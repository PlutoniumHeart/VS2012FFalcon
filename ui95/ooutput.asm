; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ui95\ooutput.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	__tcsncpy
PUBLIC	__tcsclen
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?ExtractAnim@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ; O_Output::ExtractAnim
PUBLIC	?Extract16BitRLE@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ; O_Output::Extract16BitRLE
PUBLIC	?Extract16Bit@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ; O_Output::Extract16Bit
PUBLIC	?FitString@O_Output@@IAEHH@Z			; O_Output::FitString
PUBLIC	?WordWrap@O_Output@@IAEXXZ			; O_Output::WordWrap
PUBLIC	??0O_Output@@QAE@PAPAD@Z			; O_Output::O_Output
PUBLIC	??0O_Output@@QAE@PAU_iobuf@@@Z			; O_Output::O_Output
PUBLIC	?Size@O_Output@@QAEJXZ				; O_Output::Size
PUBLIC	?Save@O_Output@@QAEXPAPAD@Z			; O_Output::Save
PUBLIC	?Save@O_Output@@QAEXPAU_iobuf@@@Z		; O_Output::Save
PUBLIC	?_SetOType_@O_Output@@QAEXF@Z			; O_Output::_SetOType_
PUBLIC	?SetXY@O_Output@@QAEXJJ@Z			; O_Output::SetXY
PUBLIC	?SetWH@O_Output@@QAEXJJ@Z			; O_Output::SetWH
PUBLIC	?SetReady@O_Output@@QAEXF@Z			; O_Output::SetReady
PUBLIC	?SetFlags@O_Output@@QAEXJ@Z			; O_Output::SetFlags
PUBLIC	?SetScaleInfo@O_Output@@QAEXJ@Z			; O_Output::SetScaleInfo
PUBLIC	?_GetOType_@O_Output@@QAEFXZ			; O_Output::_GetOType_
PUBLIC	?GetX@O_Output@@QAEJXZ				; O_Output::GetX
PUBLIC	?GetY@O_Output@@QAEJXZ				; O_Output::GetY
PUBLIC	?GetW@O_Output@@QAEJXZ				; O_Output::GetW
PUBLIC	?GetH@O_Output@@QAEJXZ				; O_Output::GetH
PUBLIC	?Ready@O_Output@@QAEFXZ				; O_Output::Ready
PUBLIC	?GetFlags@O_Output@@QAEJXZ			; O_Output::GetFlags
PUBLIC	?GetCursorPos@O_Output@@QAEJJJ@Z		; O_Output::GetCursorPos
PUBLIC	?GetCharXY@O_Output@@QAEXFPAJ0@Z		; O_Output::GetCharXY
PUBLIC	?Refresh@O_Output@@QAEXXZ			; O_Output::Refresh
PUBLIC	?Draw@O_Output@@QAEXPAVSCREEN@@PAUUI95_RECT@@@Z	; O_Output::Draw
PUBLIC	?Blend4Bit@O_Output@@QAEXPAVSCREEN@@PAEQAPAGPAUUI95_RECT@@@Z ; O_Output::Blend4Bit
PUBLIC	?Cleanup@O_Output@@QAEXXZ			; O_Output::Cleanup
PUBLIC	?SetInfo@O_Output@@QAEXXZ			; O_Output::SetInfo
PUBLIC	?SetText@O_Output@@QAEXPAD@Z			; O_Output::SetText
PUBLIC	?SetTextWidth@O_Output@@QAEXJ@Z			; O_Output::SetTextWidth
PUBLIC	?SetImage@O_Output@@QAEXJ@Z			; O_Output::SetImage
PUBLIC	?SetImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z	; O_Output::SetImage
PUBLIC	?SetImagePtr@O_Output@@QAEXPAVIMAGE_RSC@@@Z	; O_Output::SetImagePtr
PUBLIC	?SetScaleImage@O_Output@@QAEXJ@Z		; O_Output::SetScaleImage
PUBLIC	?SetScaleImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z	; O_Output::SetScaleImage
PUBLIC	?SetAnim@O_Output@@QAEXJ@Z			; O_Output::SetAnim
PUBLIC	?SetAnim@O_Output@@QAEXPAVANIM_RES@@@Z		; O_Output::SetAnim
PUBLIC	?SetFill@O_Output@@QAEXXZ			; O_Output::SetFill
PUBLIC	?GetID@C_Base@@QAEJXZ				; C_Base::GetID
PUBLIC	?GetFlags@C_Base@@QAEJXZ			; C_Base::GetFlags
PUBLIC	?GetClient@C_Base@@QAEFXZ			; C_Base::GetClient
PUBLIC	?GetX@C_Base@@QAEJXZ				; C_Base::GetX
PUBLIC	?GetY@C_Base@@QAEJXZ				; C_Base::GetY
PUBLIC	?GetW@C_Base@@QAEJXZ				; C_Base::GetW
PUBLIC	?GetX@C_Window@@QAEFXZ				; C_Window::GetX
PUBLIC	?GetY@C_Window@@QAEFXZ				; C_Window::GetY
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0EH@MCPNPLAD@ERROR?3Calling?5SetFixedWidth?$CI?$CJ?5wh@ ; `string'
PUBLIC	??_C@_0EB@EOEAIGDH@Image?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outp@ ; `string'
PUBLIC	??_C@_0EE@LBCFDOFM@Image?5Pointer?5is?5NULL?5in?5O_Outpu@ ; `string'
PUBLIC	??_C@_0DP@HPOJLPEM@Anim?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outpu@ ; `string'
PUBLIC	??_C@_0EC@NOIGGGIH@Anim?5Pointer?5is?5NULL?5in?5O_Output@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__mbslen:PROC
EXTRN	__mbsnbcpy:PROC
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?UI95_RGB24Bit@@YAGK@Z:PROC			; UI95_RGB24Bit
EXTRN	?F4IsBadWritePtr@@YA_NPAXI@Z:PROC		; F4IsBadWritePtr
EXTRN	?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z:PROC	; IMAGE_RSC::Blit
EXTRN	?Blend@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJJJ@Z:PROC ; IMAGE_RSC::Blend
EXTRN	?ScaleDown8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJ@Z:PROC ; IMAGE_RSC::ScaleDown8
EXTRN	?ScaleUp8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJ@Z:PROC ; IMAGE_RSC::ScaleUp8
EXTRN	?ScaleDown8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJPAEQAPAG@Z:PROC ; IMAGE_RSC::ScaleDown8Overlay
EXTRN	?ScaleUp8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJPAEQAPAG@Z:PROC ; IMAGE_RSC::ScaleUp8Overlay
EXTRN	?Width@C_Fontmgr@@QAEJPAD@Z:PROC		; C_Fontmgr::Width
EXTRN	?Width@C_Fontmgr@@QAEJPADJ@Z:PROC		; C_Fontmgr::Width
EXTRN	?Height@C_Fontmgr@@QAEJXZ:PROC			; C_Fontmgr::Height
EXTRN	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADGJJPAUUI95_RECT@@@Z:PROC ; C_Fontmgr::Draw
EXTRN	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z:PROC ; C_Fontmgr::Draw
EXTRN	?DrawSolid@C_Fontmgr@@QAEXPAVSCREEN@@PADJGGJJPAUUI95_RECT@@@Z:PROC ; C_Fontmgr::DrawSolid
EXTRN	?GetHeight@C_Font@@QAEHJ@Z:PROC			; C_Font::GetHeight
EXTRN	?StrWidth@C_Font@@QAEHJPAD@Z:PROC		; C_Font::StrWidth
EXTRN	?StrWidth@C_Font@@QAEHJPADH@Z:PROC		; C_Font::StrWidth
EXTRN	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z:PROC		; C_Font::Find
EXTRN	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z:PROC	; C_Image::GetImage
EXTRN	?GetAnim@C_Animation@@QAEPAVANIM_RES@@J@Z:PROC	; C_Animation::GetAnim
EXTRN	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z:PROC ; UI_Enter
EXTRN	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z:PROC	; UI_Leave
EXTRN	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z:PROC	; C_Window::SetUpdateRect
EXTRN	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z:PROC ; C_Window::ClipToArea
EXTRN	?BlitFill@C_Window@@QAEXPAVSCREEN@@KPAUUI95_RECT@@JJ@Z:PROC ; C_Window::BlitFill
EXTRN	?DrawHLine@C_Window@@QAEXPAVSCREEN@@KJJJJJPAUUI95_RECT@@@Z:PROC ; C_Window::DrawHLine
EXTRN	_MonoPrint:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gFontList@@3PAVC_Font@@A:DWORD			; gFontList
EXTRN	?gImageMgr@@3PAVC_Image@@A:DWORD		; gImageMgr
EXTRN	?gAnimMgr@@3PAVC_Animation@@A:DWORD		; gAnimMgr
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

__password_ DB	064H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@NOIGGGIH@Anim?5Pointer?5is?5NULL?5in?5O_Output@
CONST	SEGMENT
??_C@_0EC@NOIGGGIH@Anim?5Pointer?5is?5NULL?5in?5O_Output@ DB 'Anim Pointe'
	DB	'r is NULL in O_Output::SetAnim(image*) Control=(%1ld)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@HPOJLPEM@Anim?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outpu@
CONST	SEGMENT
??_C@_0DP@HPOJLPEM@Anim?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outpu@ DB 'An'
	DB	'im [%1ld] Not found in O_Output::SetAnim(ID) Control=(%1ld)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@LBCFDOFM@Image?5Pointer?5is?5NULL?5in?5O_Outpu@
CONST	SEGMENT
??_C@_0EE@LBCFDOFM@Image?5Pointer?5is?5NULL?5in?5O_Outpu@ DB 'Image Point'
	DB	'er is NULL in O_Output::SetImage(image*) Control=(%1ld)', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@EOEAIGDH@Image?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outp@
CONST	SEGMENT
??_C@_0EB@EOEAIGDH@Image?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outp@ DB 'Im'
	DB	'age [%1ld] Not found in O_Output::SetImage(ID) Control=(%1ld)'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@MCPNPLAD@ERROR?3Calling?5SetFixedWidth?$CI?$CJ?5wh@
CONST	SEGMENT
??_C@_0EH@MCPNPLAD@ERROR?3Calling?5SetFixedWidth?$CI?$CJ?5wh@ DB 'ERROR:C'
	DB	'alling SetFixedWidth() when a string has already been assigne'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetY@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Window@@QAEFXZ PROC				; C_Window::GetY, COMDAT
; _this$ = ecx

; 311  : 		short GetY() { return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+430]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Window@@QAEFXZ ENDP				; C_Window::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetX@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Window@@QAEFXZ PROC				; C_Window::GetX, COMDAT
; _this$ = ecx

; 310  : 		short GetX() { return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+428]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Window@@QAEFXZ ENDP				; C_Window::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetW@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetW@C_Base@@QAEJXZ PROC				; C_Base::GetW, COMDAT
; _this$ = ecx

; 143  : 		long GetW()					{ return(w_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetW@C_Base@@QAEJXZ ENDP				; C_Base::GetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetY@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Base@@QAEJXZ PROC				; C_Base::GetY, COMDAT
; _this$ = ecx

; 142  : 		long GetY()					{ return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Base@@QAEJXZ ENDP				; C_Base::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetX@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Base@@QAEJXZ PROC				; C_Base::GetX, COMDAT
; _this$ = ecx

; 141  : 		long GetX()					{ return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Base@@QAEJXZ ENDP				; C_Base::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetClient@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClient@C_Base@@QAEFXZ PROC				; C_Base::GetClient, COMDAT
; _this$ = ecx

; 140  : 		short GetClient()			{ return(Client_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClient@C_Base@@QAEFXZ ENDP				; C_Base::GetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetFlags@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@C_Base@@QAEJXZ PROC				; C_Base::GetFlags, COMDAT
; _this$ = ecx

; 139  : 		long  GetFlags()			{ return(Flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@C_Base@@QAEJXZ ENDP				; C_Base::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetID@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@C_Base@@QAEJXZ PROC				; C_Base::GetID, COMDAT
; _this$ = ecx

; 134  : 		long  GetID()				{ return(ID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@C_Base@@QAEJXZ ENDP				; C_Base::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetFill@O_Output@@QAEXXZ PROC				; O_Output::SetFill
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 	_SetOType_(_OUT_FILL_);

	push	104					; 00000068H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 145  : 
; 146  : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetFill@O_Output@@QAEXXZ ENDP				; O_Output::SetFill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newanim$ = 8						; size = 4
?SetAnim@O_Output@@QAEXPAVANIM_RES@@@Z PROC		; O_Output::SetAnim
; _this$ = ecx

; 1086 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 	_SetOType_(_OUT_ANIM_);

	push	103					; 00000067H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 1088 : 
; 1089 : 	Anim_=newanim;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newanim$[ebp]
	mov	DWORD PTR [eax+136], ecx

; 1090 : 	if(Anim_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+136], 0
	jne	SHORT $LN1@SetAnim

; 1091 : 	{
; 1092 : 		MonoPrint("Anim Pointer is NULL in O_Output::SetAnim(image*) Control=(%1ld)\n",Owner_->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	push	OFFSET ??_C@_0EC@NOIGGGIH@Anim?5Pointer?5is?5NULL?5in?5O_Output@
	call	_MonoPrint
	add	esp, 8

; 1093 : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 1094 : 		return;

	jmp	SHORT $LN2@SetAnim
$LN1@SetAnim:

; 1095 : 	}
; 1096 : 	SetWH(Anim_->Anim->Width,Anim_->Anim->Height);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWH@O_Output@@QAEXJJ@Z		; O_Output::SetWH

; 1097 : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo
$LN2@SetAnim:

; 1098 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAnim@O_Output@@QAEXPAVANIM_RES@@@Z ENDP		; O_Output::SetAnim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_anim$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetAnim@O_Output@@QAEXJ@Z PROC				; O_Output::SetAnim
; _this$ = ecx

; 1072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1073 : 	ANIM_RES *anim;
; 1074 : 
; 1075 : 	anim=gAnimMgr->GetAnim(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gAnimMgr@@3PAVC_Animation@@A ; gAnimMgr
	call	?GetAnim@C_Animation@@QAEPAVANIM_RES@@J@Z ; C_Animation::GetAnim
	mov	DWORD PTR _anim$[ebp], eax

; 1076 : 	if(anim == NULL)

	cmp	DWORD PTR _anim$[ebp], 0
	jne	SHORT $LN1@SetAnim

; 1077 : 	{
; 1078 : 		MonoPrint("Anim [%1ld] Not found in O_Output::SetAnim(ID) Control=(%1ld)\n",ID,Owner_->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	push	OFFSET ??_C@_0DP@HPOJLPEM@Anim?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outpu@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 1079 : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 1080 : 		return;

	jmp	SHORT $LN2@SetAnim
$LN1@SetAnim:

; 1081 : 	}
; 1082 : 	SetAnim(anim);

	mov	eax, DWORD PTR _anim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAnim@O_Output@@QAEXPAVANIM_RES@@@Z	; O_Output::SetAnim
$LN2@SetAnim:

; 1083 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAnim@O_Output@@QAEXJ@Z ENDP				; O_Output::SetAnim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
_newimage$ = 8						; size = 4
?SetScaleImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z PROC	; O_Output::SetScaleImage
; _this$ = ecx

; 984  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 985  : 	_SetOType_(_OUT_SCALEBITMAP_);

	push	102					; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 986  : 
; 987  : 	Image_=newimage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newimage$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 988  : 	if(Image_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 0
	jne	SHORT $LN3@SetScaleIm

; 989  : 	{
; 990  : 		MonoPrint("Image Pointer is NULL in O_Output::SetImage(image*) Control=(%1ld)\n",Owner_->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	push	OFFSET ??_C@_0EE@LBCFDOFM@Image?5Pointer?5is?5NULL?5in?5O_Outpu@
	call	_MonoPrint
	add	esp, 8

; 991  : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 992  : 		return;

	jmp	$LN4@SetScaleIm
$LN3@SetScaleIm:

; 993  : 	}
; 994  : 
; 995  : 	SetXY(0,0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetXY@O_Output@@QAEXJJ@Z		; O_Output::SetXY

; 996  : 	if(Rows_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN2@SetScaleIm

; 997  : 	{
; 998  : #ifdef USE_SH_POOLS
; 999  : 		Rows_=(long*)MemAllocPtr(UI_Pools[UI_ART_POOL],sizeof(long)*(Image_->Header->h*2),FALSE);
; 1000 : #else
; 1001 : 		Rows_=new long[Image_->Header->h*2];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [ecx+46]
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+116], ecx

; 1002 : #endif
; 1003 : 		memset(Rows_,0,sizeof(long)*Image_->Header->h*2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	shl	edx, 2
	shl	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@SetScaleIm:

; 1004 : 	}
; 1005 : 	if(Cols_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+120], 0
	jne	SHORT $LN1@SetScaleIm

; 1006 : 	{
; 1007 : #ifdef USE_SH_POOLS
; 1008 : 		Cols_=(long*)MemAllocPtr(UI_Pools[UI_ART_POOL],sizeof(long)*(Image_->Header->w*2),FALSE);
; 1009 : #else
; 1010 : 		Cols_=new long[Image_->Header->w*2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+120], ecx

; 1011 : #endif
; 1012 : 		memset(Cols_,0,sizeof(long)*Image_->Header->w*2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	shl	edx, 2
	shl	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@SetScaleIm:

; 1013 : 	}
; 1014 : 	ScaleSet_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1015 : 	SetWH(Image_->Header->w,Image_->Header->h);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+46]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWH@O_Output@@QAEXJJ@Z		; O_Output::SetWH

; 1016 : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo
$LN4@SetScaleIm:

; 1017 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z ENDP	; O_Output::SetScaleImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_image$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetScaleImage@O_Output@@QAEXJ@Z PROC			; O_Output::SetScaleImage
; _this$ = ecx

; 969  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 970  : 	IMAGE_RSC *image;
; 971  : 
; 972  : 	image=gImageMgr->GetImage(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gImageMgr@@3PAVC_Image@@A ; gImageMgr
	call	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z	; C_Image::GetImage
	mov	DWORD PTR _image$[ebp], eax

; 973  : 	if(image == NULL)

	cmp	DWORD PTR _image$[ebp], 0
	jne	SHORT $LN2@SetScaleIm

; 974  : 	{
; 975  : 		if(ID > 0)

	cmp	DWORD PTR _ID$[ebp], 0
	jle	SHORT $LN1@SetScaleIm

; 976  : 			MonoPrint("Image [%1ld] Not found in O_Output::SetImage(ID) Control=(%1ld)\n",ID,Owner_->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	push	OFFSET ??_C@_0EB@EOEAIGDH@Image?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outp@
	call	_MonoPrint
	add	esp, 12					; 0000000cH
$LN1@SetScaleIm:

; 977  : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 978  : 		return;

	jmp	SHORT $LN3@SetScaleIm
$LN2@SetScaleIm:

; 979  : 	}
; 980  : 	SetScaleImage(image);

	mov	eax, DWORD PTR _image$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScaleImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z ; O_Output::SetScaleImage
$LN3@SetScaleIm:

; 981  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleImage@O_Output@@QAEXJ@Z ENDP			; O_Output::SetScaleImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newimage$ = 8						; size = 4
?SetImagePtr@O_Output@@QAEXPAVIMAGE_RSC@@@Z PROC	; O_Output::SetImagePtr
; _this$ = ecx

; 955  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 956  : 	_SetOType_(_OUT_BITMAP_);

	push	101					; 00000065H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 957  : 
; 958  : 	Image_=newimage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newimage$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 959  : 	if(Image_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 0
	jne	SHORT $LN1@SetImagePt

; 960  : 	{
; 961  : 		MonoPrint("Image Pointer is NULL in O_Output::SetImage(image*) Control=(%1ld)\n",Owner_->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	push	OFFSET ??_C@_0EE@LBCFDOFM@Image?5Pointer?5is?5NULL?5in?5O_Outpu@
	call	_MonoPrint
	add	esp, 8

; 962  : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 963  : 		return;

	jmp	SHORT $LN2@SetImagePt
$LN1@SetImagePt:

; 964  : 	}
; 965  : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo
$LN2@SetImagePt:

; 966  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetImagePtr@O_Output@@QAEXPAVIMAGE_RSC@@@Z ENDP	; O_Output::SetImagePtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newimage$ = 8						; size = 4
?SetImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z PROC		; O_Output::SetImage
; _this$ = ecx

; 940  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 941  : 	_SetOType_(_OUT_BITMAP_);

	push	101					; 00000065H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 942  : 
; 943  : 	Image_=newimage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newimage$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 944  : 	if(Image_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 0
	jne	SHORT $LN1@SetImage

; 945  : 	{
; 946  : 		MonoPrint("Image Pointer is NULL in O_Output::SetImage(image*) Control=(%1ld)\n",Owner_->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	push	OFFSET ??_C@_0EE@LBCFDOFM@Image?5Pointer?5is?5NULL?5in?5O_Outpu@
	call	_MonoPrint
	add	esp, 8

; 947  : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 948  : 		return;

	jmp	SHORT $LN2@SetImage
$LN1@SetImage:

; 949  : 	}
; 950  : 	SetWH(Image_->Header->w,Image_->Header->h);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+46]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWH@O_Output@@QAEXJJ@Z		; O_Output::SetWH

; 951  : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo
$LN2@SetImage:

; 952  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z ENDP		; O_Output::SetImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_image$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetImage@O_Output@@QAEXJ@Z PROC			; O_Output::SetImage
; _this$ = ecx

; 925  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 926  : 	IMAGE_RSC *image;
; 927  : 
; 928  : 	image=gImageMgr->GetImage(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gImageMgr@@3PAVC_Image@@A ; gImageMgr
	call	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z	; C_Image::GetImage
	mov	DWORD PTR _image$[ebp], eax

; 929  : 	if(image == NULL)

	cmp	DWORD PTR _image$[ebp], 0
	jne	SHORT $LN2@SetImage

; 930  : 	{
; 931  : 		if(ID > 0)

	cmp	DWORD PTR _ID$[ebp], 0
	jle	SHORT $LN1@SetImage

; 932  : 			MonoPrint("Image [%1ld] Not found in O_Output::SetImage(ID) Control=(%1ld)\n",ID,Owner_->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	push	OFFSET ??_C@_0EB@EOEAIGDH@Image?5?$FL?$CF1ld?$FN?5Not?5found?5in?5O_Outp@
	call	_MonoPrint
	add	esp, 12					; 0000000cH
$LN1@SetImage:

; 933  : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 934  : 		return;

	jmp	SHORT $LN3@SetImage
$LN2@SetImage:

; 935  : 	}
; 936  : 	SetImage(image);

	mov	eax, DWORD PTR _image$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetImage@O_Output@@QAEXPAVIMAGE_RSC@@@Z ; O_Output::SetImage
$LN3@SetImage:

; 937  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetImage@O_Output@@QAEXJ@Z ENDP			; O_Output::SetImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
_w$ = 8							; size = 4
?SetTextWidth@O_Output@@QAEXJ@Z PROC			; O_Output::SetTextWidth
; _this$ = ecx

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 	_SetOType_(_OUT_TEXT_);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 300  : 
; 301  : 	if(Label_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN4@SetTextWid

; 302  : 	{
; 303  : 		if(flags_ & C_BIT_FIXEDSIZE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN3@SetTextWid

; 304  : 		{
; 305  : 			if(w == LabelLen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+106]
	cmp	DWORD PTR _w$[ebp], ecx
	jne	SHORT $LN2@SetTextWid

; 306  : 				return;

	jmp	$LN5@SetTextWid
$LN2@SetTextWid:

; 307  : #ifdef USE_SH_POOLS
; 308  : 			MemFreePtr(Label_);
; 309  : #else
; 310  : 			delete Label_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 311  : #endif
; 312  : 		}
; 313  : 		else

	jmp	SHORT $LN4@SetTextWid
$LN3@SetTextWid:

; 314  : 		{
; 315  : 			MonoPrint("ERROR:Calling SetFixedWidth() when a string has already been assigned\n");

	push	OFFSET ??_C@_0EH@MCPNPLAD@ERROR?3Calling?5SetFixedWidth?$CI?$CJ?5wh@
	call	_MonoPrint
	add	esp, 4
$LN4@SetTextWid:

; 316  : 		}
; 317  : 	}
; 318  : 	LabelLen_= static_cast<short>(w);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _w$[ebp]
	mov	WORD PTR [edx+106], ax

; 319  : #ifdef USE_SH_POOLS
; 320  : 	Label_=(_TCHAR*)MemAllocPtr(UI_Pools[UI_GENERAL_POOL],sizeof(_TCHAR)*(LabelLen_+1),FALSE);
; 321  : #else
; 322  : 	Label_=new _TCHAR[LabelLen_+1];

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+106]
	add	edx, 1
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+128], ecx

; 323  : #endif
; 324  : 	memset(Label_,0,sizeof(_TCHAR)*(LabelLen_));

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+106]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 325  : 	SetFlags(flags_ | C_BIT_FIXEDSIZE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlags@O_Output@@QAEXJ@Z		; O_Output::SetFlags

; 326  : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo
$LN5@SetTextWid:

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextWidth@O_Output@@QAEXJ@Z ENDP			; O_Output::SetTextWidth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_txt$ = 8						; size = 4
?SetText@O_Output@@QAEXPAD@Z PROC			; O_Output::SetText
; _this$ = ecx

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 	_SetOType_(_OUT_TEXT_);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetOType_@O_Output@@QAEXF@Z		; O_Output::_SetOType_

; 152  : 
; 153  : 	if(Label_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+128], 0
	jne	SHORT $LN7@SetText

; 154  : 	{
; 155  : 		if(flags_ & C_BIT_FIXEDSIZE && LabelLen_ > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN7@SetText
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+106]
	test	ecx, ecx
	jle	SHORT $LN7@SetText

; 156  : #ifdef USE_SH_POOLS
; 157  : 			Label_=(_TCHAR*)MemAllocPtr(UI_Pools[UI_GENERAL_POOL],sizeof(_TCHAR)*(LabelLen_),FALSE);
; 158  : #else
; 159  : 			Label_=new _TCHAR[LabelLen_];

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+106]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+128], edx
$LN7@SetText:

; 160  : #endif
; 161  : 	}
; 162  : 	if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN5@SetText

; 163  : 	{
; 164  : 		if(flags_ & C_BIT_FIXEDSIZE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN4@SetText

; 165  : 		{
; 166  : 			_tcsncpy(Label_,txt,LabelLen_-1);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+106]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	call	__tcsncpy
	add	esp, 12					; 0000000cH

; 167  : 			Label_[LabelLen_-1]=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+106]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	BYTE PTR [ecx+edx-1], 0

; 168  : 		}
; 169  : 		else

	jmp	SHORT $LN3@SetText
$LN4@SetText:

; 170  : 			Label_=txt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _txt$[ebp]
	mov	DWORD PTR [edx+128], eax
$LN3@SetText:
	jmp	SHORT $LN2@SetText
$LN5@SetText:

; 171  : 	}
; 172  : 	else if(Label_ && (flags_ & C_BIT_FIXEDSIZE))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN2@SetText
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	SHORT $LN2@SetText

; 173  : 		memset(Label_,0,sizeof(_TCHAR)*(LabelLen_));

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+106]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@SetText:

; 174  : 
; 175  : 	SetInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInfo@O_Output@@QAEXXZ		; O_Output::SetInfo

; 176  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetText@O_Output@@QAEXPAD@Z ENDP			; O_Output::SetText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?SetInfo@O_Output@@QAEXXZ PROC				; O_Output::SetInfo
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 	switch(_GetOType_())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_GetOType_@O_Output@@QAEFXZ		; O_Output::_GetOType_
	cwde
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 100				; 00000064H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 4
	ja	$LN43@SetInfo
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN45@SetInfo[edx*4]
$LN40@SetInfo:

; 374  : 	{
; 375  : 		case _OUT_FILL_:
; 376  : 			SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 377  : 			if(flags_ & C_BIT_HCENTER)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	je	SHORT $LN39@SetInfo

; 378  : 				x_=(origx_ - (w_ >> 1));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
	jmp	SHORT $LN38@SetInfo
$LN39@SetInfo:

; 379  : 			else if(flags_ & C_BIT_RIGHT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 64					; 00000040H
	je	SHORT $LN37@SetInfo

; 380  : 				x_=(origx_ - w_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx

; 381  : 			else

	jmp	SHORT $LN38@SetInfo
$LN37@SetInfo:

; 382  : 				x_=(origx_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+60], eax
$LN38@SetInfo:

; 383  : 
; 384  : 			if(flags_ & C_BIT_VCENTER)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1024				; 00000400H
	je	SHORT $LN35@SetInfo

; 385  : 				y_=(origy_ - (h_ >> 1));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sar	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 386  : 			else

	jmp	SHORT $LN34@SetInfo
$LN35@SetInfo:

; 387  : 				y_=(origy_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR [edx+64], ecx
$LN34@SetInfo:

; 388  : 			break;

	jmp	$LN43@SetInfo
$LN33@SetInfo:

; 389  : 		case _OUT_TEXT_:
; 390  : 			if(Label_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+128], 0
	je	$LN32@SetInfo

; 391  : 			{
; 392  : 				SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 393  : 				if(GetFlags() & C_BIT_PASSWORD)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@O_Output@@QAEJXZ		; O_Output::GetFlags
	and	eax, 8388608				; 00800000H
	je	SHORT $LN31@SetInfo

; 394  : 					SetWH(gFontList->StrWidth(Font_,"*")*_tcsclen(Label_),gFontList->GetHeight(Font_));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	push	eax
	push	OFFSET ??_C@_01NBENCBCI@?$CK?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	call	__tcsclen
	add	esp, 4
	imul	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWH@O_Output@@QAEXJJ@Z		; O_Output::SetWH

; 395  : 				else

	jmp	SHORT $LN30@SetInfo
$LN31@SetInfo:

; 396  : 					SetWH(gFontList->StrWidth(Font_,Label_),gFontList->GetHeight(Font_));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWH@O_Output@@QAEXJJ@Z		; O_Output::SetWH
$LN30@SetInfo:

; 397  : 				if(Label_[0] && (flags_ & C_BIT_WORDWRAP) && Owner_ && GetW() > 50)

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	movsx	eax, BYTE PTR [edx+eax]
	test	eax, eax
	je	SHORT $LN29@SetInfo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 33554432				; 02000000H
	je	SHORT $LN29@SetInfo
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN29@SetInfo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	cmp	eax, 50					; 00000032H
	jle	SHORT $LN29@SetInfo

; 398  : 					WordWrap(); // Sets WH internally

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WordWrap@O_Output@@IAEXXZ		; O_Output::WordWrap
$LN29@SetInfo:

; 399  : 				if(flags_ & C_BIT_HCENTER)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 512				; 00000200H
	je	SHORT $LN28@SetInfo

; 400  : 					x_=(origx_ - (w_ >> 1));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sar	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax
	jmp	SHORT $LN27@SetInfo
$LN28@SetInfo:

; 401  : 				else if(flags_ & C_BIT_RIGHT)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 64					; 00000040H
	je	SHORT $LN26@SetInfo

; 402  : 					x_=(origx_ - w_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+52]
	sub	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 403  : 				else

	jmp	SHORT $LN27@SetInfo
$LN26@SetInfo:

; 404  : 					x_=(origx_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+60], ecx
$LN27@SetInfo:

; 405  : 
; 406  : 				if(flags_ & C_BIT_VCENTER)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1024				; 00000400H
	je	SHORT $LN24@SetInfo

; 407  : 					y_=(origy_ - (h_ >> 1));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	sar	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 408  : 				else

	jmp	SHORT $LN23@SetInfo
$LN24@SetInfo:

; 409  : 					y_=(origy_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx
$LN23@SetInfo:

; 410  : 			}
; 411  : 			else

	jmp	SHORT $LN22@SetInfo
$LN32@SetInfo:

; 412  : 				SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady
$LN22@SetInfo:

; 413  : 			break;

	jmp	$LN43@SetInfo
$LN21@SetInfo:

; 414  : 		case _OUT_BITMAP_:
; 415  : 			if(Image_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+132], 0
	je	$LN20@SetInfo

; 416  : 			{
; 417  : 				SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 418  : 				if(flags_ & C_BIT_HCENTER)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 512				; 00000200H
	je	SHORT $LN19@SetInfo

; 419  : 					x_=(origx_ - Image_->Header->centerx);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
	jmp	SHORT $LN18@SetInfo
$LN19@SetInfo:

; 420  : 				else if(flags_ & C_BIT_RIGHT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 64					; 00000040H
	je	SHORT $LN17@SetInfo

; 421  : 					x_=(origx_ - w_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx

; 422  : 				else

	jmp	SHORT $LN18@SetInfo
$LN17@SetInfo:

; 423  : 					x_=(origx_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+60], eax
$LN18@SetInfo:

; 424  : 
; 425  : 				if(flags_ & C_BIT_VCENTER)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1024				; 00000400H
	je	SHORT $LN15@SetInfo

; 426  : 					y_=(origy_ - Image_->Header->centery);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+42]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], edx

; 427  : 				else

	jmp	SHORT $LN14@SetInfo
$LN15@SetInfo:

; 428  : 					y_=(origy_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+64], eax
$LN14@SetInfo:

; 429  : 			}
; 430  : 			else

	jmp	SHORT $LN13@SetInfo
$LN20@SetInfo:

; 431  : 				SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady
$LN13@SetInfo:

; 432  : 			break;

	jmp	$LN43@SetInfo
$LN12@SetInfo:

; 433  : 		case _OUT_SCALEBITMAP_:
; 434  : 			if(Image_ && ScaleSet_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	je	SHORT $LN11@SetInfo
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN11@SetInfo

; 435  : 				SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 436  : 			else

	jmp	SHORT $LN10@SetInfo
$LN11@SetInfo:

; 437  : 				SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady
$LN10@SetInfo:

; 438  : 			return; // centering Doesn't apply here

	jmp	$LN43@SetInfo

; 439  : 			break;

	jmp	$LN43@SetInfo
$LN9@SetInfo:

; 440  : 		case _OUT_ANIM_:
; 441  : 			if(Anim_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	$LN8@SetInfo

; 442  : 			{
; 443  : 				SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 444  : 				if(flags_ & C_BIT_HCENTER)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 512				; 00000200H
	je	SHORT $LN7@SetInfo

; 445  : 					x_=(origx_ - (w_ >> 1));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sar	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax
	jmp	SHORT $LN6@SetInfo
$LN7@SetInfo:

; 446  : 				else if(flags_ & C_BIT_RIGHT)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 64					; 00000040H
	je	SHORT $LN5@SetInfo

; 447  : 					x_=(origx_ - w_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+52]
	sub	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 448  : 				else

	jmp	SHORT $LN6@SetInfo
$LN5@SetInfo:

; 449  : 					x_=(origx_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+60], ecx
$LN6@SetInfo:

; 450  : 
; 451  : 				if(flags_ & C_BIT_VCENTER)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1024				; 00000400H
	je	SHORT $LN3@SetInfo

; 452  : 					y_=(origy_ - (h_ >> 1));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	sar	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 453  : 				else

	jmp	SHORT $LN2@SetInfo
$LN3@SetInfo:

; 454  : 					y_=(origy_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx
$LN2@SetInfo:

; 455  : 			}
; 456  : 			else

	jmp	SHORT $LN43@SetInfo
$LN8@SetInfo:

; 457  : 				SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady
$LN43@SetInfo:

; 458  : 			break;
; 459  : 	}
; 460  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@SetInfo:
	DD	$LN33@SetInfo
	DD	$LN21@SetInfo
	DD	$LN12@SetInfo
	DD	$LN9@SetInfo
	DD	$LN40@SetInfo
?SetInfo@O_Output@@QAEXXZ ENDP				; O_Output::SetInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@O_Output@@QAEXXZ PROC				; O_Output::Cleanup
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	if(Label_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN6@Cleanup

; 332  : 	{
; 333  : 		if(flags_ & C_BIT_FIXEDSIZE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN5@Cleanup

; 334  : #ifdef USE_SH_POOLS
; 335  : 			MemFreePtr(Label_);
; 336  : #else
; 337  : 			delete Label_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Cleanup:

; 338  : #endif
; 339  : 		Label_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 0

; 340  : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady
$LN6@Cleanup:

; 341  : 	}
; 342  : 	if(Image_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	je	SHORT $LN4@Cleanup

; 343  : 		Image_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0
$LN4@Cleanup:

; 344  : 
; 345  : 	if(Rows_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN3@Cleanup

; 346  : 	{
; 347  : #ifdef USE_SH_POOLS
; 348  : 			MemFreePtr(Rows_);
; 349  : #else
; 350  : 			delete Rows_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 351  : #endif
; 352  : 		Rows_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], 0
$LN3@Cleanup:

; 353  : 	}
; 354  : 	if(Cols_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+120], 0
	je	SHORT $LN2@Cleanup

; 355  : 	{
; 356  : #ifdef USE_SH_POOLS
; 357  : 			MemFreePtr(Cols_);
; 358  : #else
; 359  : 			delete Cols_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 360  : #endif
; 361  : 		Cols_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 0
$LN2@Cleanup:

; 362  : 	}
; 363  : 	WWCount_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+110], cx

; 364  : 	if(Wrap_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN7@Cleanup

; 365  : 	{
; 366  : 		delete Wrap_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 367  : 		Wrap_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+124], 0
$LN7@Cleanup:

; 368  : 	}
; 369  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@O_Output@@QAEXXZ ENDP				; O_Output::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_clip$ = -36						; size = 16
_dummy$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_surface$ = 8						; size = 4
_overlay$ = 12						; size = 4
_Palette$ = 16						; size = 4
_cliprect$ = 20						; size = 4
?Blend4Bit@O_Output@@QAEXPAVSCREEN@@PAEQAPAGPAUUI95_RECT@@@Z PROC ; O_Output::Blend4Bit
; _this$ = ecx

; 911  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 912  : 	UI95_RECT dummy,clip;
; 913  : 	clip=*cliprect;

	mov	eax, DWORD PTR _cliprect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _clip$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _clip$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _clip$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _clip$[ebp+12], edx

; 914  : 	if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN4@Blend4Bit

; 915  : 		if(!Owner_->Parent_->ClipToArea(&dummy,&clip,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	shl	ecx, 4
	lea	edx, DWORD PTR [esi+ecx+168]
	push	edx
	lea	eax, DWORD PTR _clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN4@Blend4Bit

; 916  : 			return;

	jmp	$LN5@Blend4Bit
$LN4@Blend4Bit:

; 917  : 
; 918  : 	if(ScaleSet_ > 500)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 500			; 000001f4H
	jle	$LN2@Blend4Bit

; 919  : 		Image_->ScaleDown8Overlay(surface,Rows_,Cols_,clip.left+Owner_->Parent_->GetX(),clip.top+Owner_->Parent_->GetY(),(clip.right-clip.left),(clip.bottom-clip.top),Src_.left*1000/ScaleSet_+(clip.left-Dest_.left),Src_.top*1000/ScaleSet_+(clip.top-Dest_.top),overlay,Palette);

	mov	edx, DWORD PTR _Palette$[ebp]
	push	edx
	mov	eax, DWORD PTR _overlay$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clip$[ebp+4]
	sub	ecx, DWORD PTR [edx+40]
	add	eax, ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clip$[ebp]
	sub	ecx, DWORD PTR [edx+36]
	add	eax, ecx
	push	eax
	mov	edx, DWORD PTR _clip$[ebp+12]
	sub	edx, DWORD PTR _clip$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clip$[ebp+8]
	sub	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _clip$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _clip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?ScaleDown8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJPAEQAPAG@Z ; IMAGE_RSC::ScaleDown8Overlay

; 920  : 	else

	jmp	SHORT $LN5@Blend4Bit
$LN2@Blend4Bit:

; 921  : 		Image_->ScaleUp8Overlay(surface,&Rows_[clip.top-Dest_.top],&Cols_[clip.left-Dest_.left],clip.left+Owner_->Parent_->GetX(),clip.top+Owner_->Parent_->GetY(),(clip.right-clip.left),(clip.bottom-clip.top),overlay,Palette);

	mov	ecx, DWORD PTR _Palette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _overlay$[ebp]
	push	edx
	mov	eax, DWORD PTR _clip$[ebp+12]
	sub	eax, DWORD PTR _clip$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _clip$[ebp+8]
	sub	ecx, DWORD PTR _clip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _clip$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _clip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _clip$[ebp]
	sub	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _clip$[ebp+4]
	sub	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?ScaleUp8Overlay@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJPAEQAPAG@Z ; IMAGE_RSC::ScaleUp8Overlay
$LN5@Blend4Bit:

; 922  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Blend4Bit@O_Output@@QAEXPAVSCREEN@@PAEQAPAGPAUUI95_RECT@@@Z ENDP ; O_Output::Blend4Bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_origx$1 = -244						; size = 4
_dy$2 = -240						; size = 4
_dx$3 = -236						; size = 4
_origy$4 = -232						; size = 4
tv735 = -228						; size = 4
tv768 = -224						; size = 4
tv876 = -220						; size = 4
tv417 = -216						; size = 4
tv363 = -212						; size = 4
tv840 = -208						; size = 4
tv71 = -204						; size = 4
_nx$5 = -200						; size = 4
_i$6 = -196						; size = 4
_y$7 = -192						; size = 4
_x$8 = -188						; size = 4
_cur$9 = -184						; size = 4
_lenout$10 = -180					; size = 4
_idx$11 = -176						; size = 4
_len$12 = -172						; size = 4
_this$ = -168						; size = 4
_clip$13 = -164						; size = 16
_dummy$14 = -148					; size = 16
_src$15 = -132						; size = 16
_dummy$16 = -116					; size = 16
_src$17 = -100						; size = 16
_dest$18 = -84						; size = 16
_src$19 = -68						; size = 16
_dest$20 = -52						; size = 16
_dest$21 = -36						; size = 16
_rect$22 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?Draw@O_Output@@QAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; O_Output::Draw
; _this$ = ecx

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 598  : 	if(!Ready()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@O_Output@@QAEFXZ			; O_Output::Ready
	cwde
	test	eax, eax
	jne	SHORT $LN63@Draw
	jmp	$LN64@Draw
$LN63@Draw:

; 599  : 
; 600  : 	switch(_GetOType_())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_GetOType_@O_Output@@QAEFXZ		; O_Output::_GetOType_
	movsx	ecx, ax
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	sub	edx, 100				; 00000064H
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 4
	ja	$LN64@Draw
	mov	eax, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN78@Draw[eax*4]
$LN60@Draw:

; 601  : 	{
; 602  : 		case _OUT_FILL_:
; 603  : 			UI95_RECT src,dest;
; 604  : 
; 605  : 			dest.left=Owner_->GetX()+GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	add	esi, eax
	mov	DWORD PTR _dest$18[ebp], esi

; 606  : 			dest.top=Owner_->GetY()+GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	add	esi, eax
	mov	DWORD PTR _dest$18[ebp+4], esi

; 607  : 			dest.right=dest.left+GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	add	eax, DWORD PTR _dest$18[ebp]
	mov	DWORD PTR _dest$18[ebp+8], eax

; 608  : 			dest.bottom=dest.top+GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	add	eax, DWORD PTR _dest$18[ebp+4]
	mov	DWORD PTR _dest$18[ebp+12], eax

; 609  : 
; 610  : 			if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	$LN59@Draw

; 611  : 			{
; 612  : 				dest.left+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _dest$18[ebp]
	add	edx, DWORD PTR [esi+ecx*4+480]
	mov	DWORD PTR _dest$18[ebp], edx

; 613  : 				dest.top+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$18[ebp+4]
	add	ecx, DWORD PTR [esi+eax*4+512]
	mov	DWORD PTR _dest$18[ebp+4], ecx

; 614  : 				dest.right+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _dest$18[ebp+8]
	add	eax, DWORD PTR [esi+edx*4+480]
	mov	DWORD PTR _dest$18[ebp+8], eax

; 615  : 				dest.bottom+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _dest$18[ebp+12]
	add	edx, DWORD PTR [esi+ecx*4+512]
	mov	DWORD PTR _dest$18[ebp+12], edx
$LN59@Draw:

; 616  : 			}
; 617  : 			if(!Owner_->Parent_->ClipToArea(&src,&dest,cliprect))

	mov	eax, DWORD PTR _cliprect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$18[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$15[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN58@Draw

; 618  : 				return;

	jmp	$LN64@Draw
$LN58@Draw:

; 619  : 
; 620  : 			if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN57@Draw

; 621  : 				if(!Owner_->Parent_->ClipToArea(&src,&dest,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	shl	eax, 4
	lea	ecx, DWORD PTR [esi+eax+168]
	push	ecx
	lea	edx, DWORD PTR _dest$18[ebp]
	push	edx
	lea	eax, DWORD PTR _src$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN57@Draw

; 622  : 					break;

	jmp	$LN64@Draw
$LN57@Draw:

; 623  : 
; 624  : 			Owner_->Parent_->BlitFill(surface,FgColor_,&dest,C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	lea	eax, DWORD PTR _dest$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?BlitFill@C_Window@@QAEXPAVSCREEN@@KPAUUI95_RECT@@JJ@Z ; C_Window::BlitFill

; 625  : 			break;

	jmp	$LN64@Draw
$LN55@Draw:

; 626  : 
; 627  : 		case _OUT_TEXT_:
; 628  : 			{
; 629  : 				long x,y,origx,origy,i;
; 630  : 				long idx,len,lenout,nx;
; 631  : 				UI95_RECT rect,dummy;
; 632  : 				C_Fontmgr *cur;
; 633  : 
; 634  : 				x=GetX()+Owner_->GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	add	esi, eax
	mov	DWORD PTR _x$8[ebp], esi

; 635  : 				y=GetY()+Owner_->GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	add	esi, eax
	mov	DWORD PTR _y$7[ebp], esi

; 636  : 
; 637  : 				if(WWCount_ && (flags_ & C_BIT_WORDWRAP))

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+110]
	test	eax, eax
	je	$LN54@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 33554432				; 02000000H
	je	$LN54@Draw

; 638  : 				{
; 639  : 					if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN53@Draw

; 640  : 					{
; 641  : 						x+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _x$8[ebp]
	add	edx, DWORD PTR [esi+ecx*4+480]
	mov	DWORD PTR _x$8[ebp], edx

; 642  : 						y+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _y$7[ebp]
	add	ecx, DWORD PTR [esi+eax*4+512]
	mov	DWORD PTR _y$7[ebp], ecx
$LN53@Draw:

; 643  : 					}
; 644  : 					rect.left=x;

	mov	edx, DWORD PTR _x$8[ebp]
	mov	DWORD PTR _rect$22[ebp], edx

; 645  : 					rect.top=y;

	mov	eax, DWORD PTR _y$7[ebp]
	mov	DWORD PTR _rect$22[ebp+4], eax

; 646  : 					rect.right=rect.left+GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	add	eax, DWORD PTR _rect$22[ebp]
	mov	DWORD PTR _rect$22[ebp+8], eax

; 647  : 					rect.bottom=rect.top+GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	add	eax, DWORD PTR _rect$22[ebp+4]
	mov	DWORD PTR _rect$22[ebp+12], eax

; 648  : 
; 649  : 					if(!Owner_->Parent_->ClipToArea(&dummy,&rect,cliprect))

	mov	ecx, DWORD PTR _cliprect$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rect$22[ebp]
	push	edx
	lea	eax, DWORD PTR _dummy$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN52@Draw

; 650  : 						return;

	jmp	$LN64@Draw
$LN52@Draw:

; 651  : 
; 652  : 					if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN51@Draw

; 653  : 						if(!Owner_->Parent_->ClipToArea(&dummy,&rect,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	shl	ecx, 4
	lea	edx, DWORD PTR [esi+ecx+168]
	push	edx
	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN51@Draw

; 654  : 							return;

	jmp	$LN64@Draw
$LN51@Draw:

; 655  : 
; 656  : 					x+=Owner_->Parent_->GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _x$8[ebp]
	mov	DWORD PTR _x$8[ebp], eax

; 657  : 					y+=Owner_->Parent_->GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _y$7[ebp]
	mov	DWORD PTR _y$7[ebp], eax

; 658  : 					rect.left+=Owner_->Parent_->GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _rect$22[ebp]
	mov	DWORD PTR _rect$22[ebp], eax

; 659  : 					rect.top+=Owner_->Parent_->GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _rect$22[ebp+4]
	mov	DWORD PTR _rect$22[ebp+4], eax

; 660  : 					rect.right+=Owner_->Parent_->GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _rect$22[ebp+8]
	mov	DWORD PTR _rect$22[ebp+8], eax

; 661  : 					rect.bottom+=Owner_->Parent_->GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _rect$22[ebp+12]
	mov	DWORD PTR _rect$22[ebp+12], eax

; 662  : 
; 663  : 					cur=gFontList->Find(Font_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$9[ebp], eax

; 664  : 					if(cur)

	cmp	DWORD PTR _cur$9[ebp], 0
	je	$LN49@Draw

; 665  : 					{
; 666  : 						for(i=0;i<WWCount_;i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN48@Draw
$LN47@Draw:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN48@Draw:
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	cmp	DWORD PTR _i$6[ebp], edx
	jge	$LN46@Draw

; 667  : 						{
; 668  : 							if(GetFlags() & C_BIT_OPAQUE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@O_Output@@QAEJXZ		; O_Output::GetFlags
	and	eax, 1048576				; 00100000H
	je	$LN45@Draw

; 669  : 							{
; 670  : 								idx=Wrap_[i].Index;

	mov	eax, DWORD PTR _i$6[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax]
	mov	DWORD PTR _idx$11[ebp], eax

; 671  : 								len=Wrap_[i].Length;

	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx+2]
	mov	DWORD PTR _len$12[ebp], ecx

; 672  : 								nx=0;

	mov	DWORD PTR _nx$5[ebp], 0

; 673  : 								lenout=0;

	mov	DWORD PTR _lenout$10[ebp], 0

; 674  : 
; 675  : 								if(len && idx < OpStart_)

	cmp	DWORD PTR _len$12[ebp], 0
	je	$LN44@Draw
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+112]
	cmp	DWORD PTR _idx$11[ebp], eax
	jge	$LN44@Draw

; 676  : 								{
; 677  : 									len=min(len,OpStart_-idx);

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+112]
	sub	edx, DWORD PTR _idx$11[ebp]
	cmp	DWORD PTR _len$12[ebp], edx
	jge	SHORT $LN66@Draw
	mov	eax, DWORD PTR _len$12[ebp]
	mov	DWORD PTR tv363[ebp], eax
	jmp	SHORT $LN67@Draw
$LN66@Draw:
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+112]
	sub	edx, DWORD PTR _idx$11[ebp]
	mov	DWORD PTR tv363[ebp], edx
$LN67@Draw:
	mov	eax, DWORD PTR tv363[ebp]
	mov	DWORD PTR _len$12[ebp], eax

; 678  : 									cur->Draw(surface,&Label_[idx],len,UI95_RGB24Bit(FgColor_),x,y+Wrap_[i].y,&rect);

	lea	ecx, DWORD PTR _rect$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$6[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	edx, WORD PTR [ecx+edx+4]
	add	edx, DWORD PTR _y$7[ebp]
	push	edx
	mov	eax, DWORD PTR _x$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _len$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, DWORD PTR _idx$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw

; 679  : 									idx += len;

	mov	edx, DWORD PTR _idx$11[ebp]
	add	edx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _idx$11[ebp], edx

; 680  : 									lenout+=len;

	mov	eax, DWORD PTR _lenout$10[ebp]
	add	eax, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _lenout$10[ebp], eax

; 681  : 									len=Wrap_[i].Length-lenout;

	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx+2]
	sub	ecx, DWORD PTR _lenout$10[ebp]
	mov	DWORD PTR _len$12[ebp], ecx

; 682  : 									nx=cur->Width(&Label_[Wrap_[i].Index],lenout)-1;

	mov	edx, DWORD PTR _lenout$10[ebp]
	push	edx
	mov	eax, DWORD PTR _i$6[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, eax
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	mov	DWORD PTR _nx$5[ebp], eax
$LN44@Draw:

; 683  : 								}
; 684  : 								if(len && idx < OpEnd_)

	cmp	DWORD PTR _len$12[ebp], 0
	je	$LN43@Draw
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+114]
	cmp	DWORD PTR _idx$11[ebp], ecx
	jge	$LN43@Draw

; 685  : 								{
; 686  : 									len=min(len,OpEnd_-idx);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+114]
	sub	eax, DWORD PTR _idx$11[ebp]
	cmp	DWORD PTR _len$12[ebp], eax
	jge	SHORT $LN68@Draw
	mov	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR tv417[ebp], ecx
	jmp	SHORT $LN69@Draw
$LN68@Draw:
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+114]
	sub	eax, DWORD PTR _idx$11[ebp]
	mov	DWORD PTR tv417[ebp], eax
$LN69@Draw:
	mov	ecx, DWORD PTR tv417[ebp]
	mov	DWORD PTR _len$12[ebp], ecx

; 687  : 									cur->DrawSolid(surface,&Label_[idx],len,UI95_RGB24Bit(FgColor_),UI95_RGB24Bit(BgColor_),x+nx,y+Wrap_[i].y,&rect);

	lea	edx, DWORD PTR _rect$22[ebp]
	push	edx
	mov	eax, DWORD PTR _i$6[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax+4]
	add	eax, DWORD PTR _y$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	add	ecx, DWORD PTR _nx$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _len$12[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, DWORD PTR _idx$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?DrawSolid@C_Fontmgr@@QAEXPAVSCREEN@@PADJGGJJPAUUI95_RECT@@@Z ; C_Fontmgr::DrawSolid

; 688  : 									idx += len;

	mov	eax, DWORD PTR _idx$11[ebp]
	add	eax, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _idx$11[ebp], eax

; 689  : 									lenout+=len;

	mov	ecx, DWORD PTR _lenout$10[ebp]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _lenout$10[ebp], ecx

; 690  : 									len=Wrap_[i].Length-lenout;

	mov	edx, DWORD PTR _i$6[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	edx, WORD PTR [ecx+edx+2]
	sub	edx, DWORD PTR _lenout$10[ebp]
	mov	DWORD PTR _len$12[ebp], edx

; 691  : 									nx=cur->Width(&Label_[Wrap_[i].Index],lenout)-1;

	mov	eax, DWORD PTR _lenout$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, ecx
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	mov	DWORD PTR _nx$5[ebp], eax
$LN43@Draw:

; 692  : 								}
; 693  : 								if(len)

	cmp	DWORD PTR _len$12[ebp], 0
	je	SHORT $LN42@Draw

; 694  : 								{
; 695  : 									cur->Draw(surface,&Label_[idx],len,UI95_RGB24Bit(FgColor_),x+nx,y+Wrap_[i].y,&rect);

	lea	ecx, DWORD PTR _rect$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$6[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	edx, WORD PTR [ecx+edx+4]
	add	edx, DWORD PTR _y$7[ebp]
	push	edx
	mov	eax, DWORD PTR _x$8[ebp]
	add	eax, DWORD PTR _nx$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _len$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, DWORD PTR _idx$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw
$LN42@Draw:

; 696  : 								}
; 697  : 							}
; 698  : 							else

	jmp	$LN41@Draw
$LN45@Draw:

; 699  : 								cur->Draw(surface,&Label_[Wrap_[i].Index],Wrap_[i].Length,UI95_RGB24Bit(FgColor_),x,y+Wrap_[i].y,&rect);

	lea	edx, DWORD PTR _rect$22[ebp]
	push	edx
	mov	eax, DWORD PTR _i$6[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax+4]
	add	eax, DWORD PTR _y$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _i$6[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	edx, WORD PTR [ecx+edx+2]
	push	edx
	mov	eax, DWORD PTR _i$6[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, eax
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw
$LN41@Draw:

; 700  : 						}

	jmp	$LN47@Draw
$LN46@Draw:

; 701  : 						if(flags_ & C_BIT_USELINE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 4194304				; 00400000H
	je	$LN49@Draw

; 702  : 						{
; 703  : 							for(i=0;i<WWCount_;i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN39@Draw
$LN38@Draw:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN39@Draw:
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	cmp	DWORD PTR _i$6[ebp], edx
	jge	$LN49@Draw

; 704  : 								Owner_->Parent_->DrawHLine(surface,FgColor_,GetX()+Owner_->GetX(),GetY()+Owner_->GetY()+Wrap_[i].y+cur->Height()-1,Wrap_[i].Length,Owner_->GetFlags(),Owner_->GetClient(),cliprect);

	mov	eax, DWORD PTR _cliprect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx+2]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	add	esi, eax
	mov	eax, DWORD PTR _i$6[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax+4]
	add	esi, eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	lea	ecx, DWORD PTR [esi+eax-1]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	add	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?DrawHLine@C_Window@@QAEXPAVSCREEN@@KJJJJJPAUUI95_RECT@@@Z ; C_Window::DrawHLine
	jmp	$LN38@Draw
$LN49@Draw:

; 705  : 						}
; 706  : 					}
; 707  : 				}
; 708  : 				else

	jmp	$LN36@Draw
$LN54@Draw:

; 709  : 				{
; 710  : 					origx=x;

	mov	edx, DWORD PTR _x$8[ebp]
	mov	DWORD PTR _origx$1[ebp], edx

; 711  : 					origy=y;

	mov	eax, DWORD PTR _y$7[ebp]
	mov	DWORD PTR _origy$4[ebp], eax

; 712  : 
; 713  : 					if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN35@Draw

; 714  : 					{
; 715  : 						x+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _x$8[ebp]
	add	eax, DWORD PTR [esi+edx*4+480]
	mov	DWORD PTR _x$8[ebp], eax

; 716  : 						y+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _y$7[ebp]
	add	edx, DWORD PTR [esi+ecx*4+512]
	mov	DWORD PTR _y$7[ebp], edx
$LN35@Draw:

; 717  : 					}
; 718  : 					rect.left=x;

	mov	eax, DWORD PTR _x$8[ebp]
	mov	DWORD PTR _rect$22[ebp], eax

; 719  : 					rect.top=y;

	mov	ecx, DWORD PTR _y$7[ebp]
	mov	DWORD PTR _rect$22[ebp+4], ecx

; 720  : 					rect.right=rect.left+GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	add	eax, DWORD PTR _rect$22[ebp]
	mov	DWORD PTR _rect$22[ebp+8], eax

; 721  : 					rect.bottom=rect.top+GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	add	eax, DWORD PTR _rect$22[ebp+4]
	mov	DWORD PTR _rect$22[ebp+12], eax

; 722  : 
; 723  : 					if(!Owner_->Parent_->ClipToArea(&dummy,&rect,cliprect))

	mov	edx, DWORD PTR _cliprect$[ebp]
	push	edx
	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN34@Draw

; 724  : 						return;

	jmp	$LN64@Draw
$LN34@Draw:

; 725  : 
; 726  : 					if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN33@Draw

; 727  : 						if(!Owner_->Parent_->ClipToArea(&dummy,&rect,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	lea	eax, DWORD PTR [esi+edx+168]
	push	eax
	lea	ecx, DWORD PTR _rect$22[ebp]
	push	ecx
	lea	edx, DWORD PTR _dummy$16[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN33@Draw

; 728  : 							return;

	jmp	$LN64@Draw
$LN33@Draw:

; 729  : 
; 730  : 					x+=Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _x$8[ebp]
	mov	DWORD PTR _x$8[ebp], ecx

; 731  : 					y+=Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _y$7[ebp]
	mov	DWORD PTR _y$7[ebp], ecx

; 732  : 					rect.left+=Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _rect$22[ebp]
	mov	DWORD PTR _rect$22[ebp], ecx

; 733  : 					rect.top+=Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _rect$22[ebp+4]
	mov	DWORD PTR _rect$22[ebp+4], ecx

; 734  : 					rect.right+=Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _rect$22[ebp+8]
	mov	DWORD PTR _rect$22[ebp+8], ecx

; 735  : 					rect.bottom+=Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _rect$22[ebp+12]
	mov	DWORD PTR _rect$22[ebp+12], ecx

; 736  : 
; 737  : 					cur=gFontList->Find(Font_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$9[ebp], eax

; 738  : 					if(cur)

	cmp	DWORD PTR _cur$9[ebp], 0
	je	$LN36@Draw

; 739  : 					{
; 740  : 						if(GetFlags() & C_BIT_PASSWORD) // Password... draw asterixs

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@O_Output@@QAEJXZ		; O_Output::GetFlags
	and	eax, 8388608				; 00800000H
	je	$LN30@Draw

; 741  : 						{
; 742  : 							memset(_password_,_T('*'),_tcsclen(Label_));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	call	__tcsclen
	add	esp, 4
	push	eax
	push	42					; 0000002aH
	push	OFFSET __password_
	call	_memset
	add	esp, 12					; 0000000cH

; 743  : 							if(GetFlags() & C_BIT_OPAQUE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@O_Output@@QAEJXZ		; O_Output::GetFlags
	and	eax, 1048576				; 00100000H
	je	$LN29@Draw

; 744  : 							{
; 745  : 								idx=0;

	mov	DWORD PTR _idx$11[ebp], 0

; 746  : 								len=_tcsclen(_password_);

	push	OFFSET __password_
	call	__tcsclen
	add	esp, 4
	mov	DWORD PTR _len$12[ebp], eax

; 747  : 								nx=0;

	mov	DWORD PTR _nx$5[ebp], 0

; 748  : 								lenout=0;

	mov	DWORD PTR _lenout$10[ebp], 0

; 749  : 
; 750  : 								if(len && idx < OpStart_)

	cmp	DWORD PTR _len$12[ebp], 0
	je	$LN28@Draw
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+112]
	cmp	DWORD PTR _idx$11[ebp], ecx
	jge	$LN28@Draw

; 751  : 								{
; 752  : 									len=min(len,OpStart_-idx);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+112]
	sub	eax, DWORD PTR _idx$11[ebp]
	cmp	DWORD PTR _len$12[ebp], eax
	jge	SHORT $LN70@Draw
	mov	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR tv735[ebp], ecx
	jmp	SHORT $LN71@Draw
$LN70@Draw:
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+112]
	sub	eax, DWORD PTR _idx$11[ebp]
	mov	DWORD PTR tv735[ebp], eax
$LN71@Draw:
	mov	ecx, DWORD PTR tv735[ebp]
	mov	DWORD PTR _len$12[ebp], ecx

; 753  : 									cur->Draw(surface,_password_,len,UI95_RGB24Bit(FgColor_),x,y,&rect);

	lea	edx, DWORD PTR _rect$22[ebp]
	push	edx
	mov	eax, DWORD PTR _y$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _len$12[ebp]
	push	edx
	push	OFFSET __password_
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw

; 754  : 									idx += len;

	mov	ecx, DWORD PTR _idx$11[ebp]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _idx$11[ebp], ecx

; 755  : 									lenout+=len;

	mov	edx, DWORD PTR _lenout$10[ebp]
	add	edx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _lenout$10[ebp], edx

; 756  : 									len=_tcsclen(_password_)-lenout;

	push	OFFSET __password_
	call	__tcsclen
	add	esp, 4
	sub	eax, DWORD PTR _lenout$10[ebp]
	mov	DWORD PTR _len$12[ebp], eax

; 757  : 									nx=cur->Width(_password_,lenout)-1;

	mov	eax, DWORD PTR _lenout$10[ebp]
	push	eax
	push	OFFSET __password_
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	mov	DWORD PTR _nx$5[ebp], eax
$LN28@Draw:

; 758  : 								}
; 759  : 								if(len && idx < OpEnd_)

	cmp	DWORD PTR _len$12[ebp], 0
	je	$LN27@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+114]
	cmp	DWORD PTR _idx$11[ebp], edx
	jge	$LN27@Draw

; 760  : 								{
; 761  : 									len=min(len,OpEnd_-idx);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+114]
	sub	ecx, DWORD PTR _idx$11[ebp]
	cmp	DWORD PTR _len$12[ebp], ecx
	jge	SHORT $LN72@Draw
	mov	edx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR tv768[ebp], edx
	jmp	SHORT $LN73@Draw
$LN72@Draw:
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+114]
	sub	ecx, DWORD PTR _idx$11[ebp]
	mov	DWORD PTR tv768[ebp], ecx
$LN73@Draw:
	mov	edx, DWORD PTR tv768[ebp]
	mov	DWORD PTR _len$12[ebp], edx

; 762  : 									cur->DrawSolid(surface,&_password_[idx],len,UI95_RGB24Bit(FgColor_),UI95_RGB24Bit(BgColor_),x+nx,y,&rect);

	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8[ebp]
	add	edx, DWORD PTR _nx$5[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _len$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$11[ebp]
	add	ecx, OFFSET __password_
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?DrawSolid@C_Fontmgr@@QAEXPAVSCREEN@@PADJGGJJPAUUI95_RECT@@@Z ; C_Fontmgr::DrawSolid

; 763  : 									idx += len;

	mov	eax, DWORD PTR _idx$11[ebp]
	add	eax, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _idx$11[ebp], eax

; 764  : 									lenout+=len;

	mov	ecx, DWORD PTR _lenout$10[ebp]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _lenout$10[ebp], ecx

; 765  : 									len=_tcsclen(_password_)-lenout;

	push	OFFSET __password_
	call	__tcsclen
	add	esp, 4
	sub	eax, DWORD PTR _lenout$10[ebp]
	mov	DWORD PTR _len$12[ebp], eax

; 766  : 									nx=cur->Width(_password_,lenout)-1;

	mov	edx, DWORD PTR _lenout$10[ebp]
	push	edx
	push	OFFSET __password_
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	mov	DWORD PTR _nx$5[ebp], eax
$LN27@Draw:

; 767  : 								}
; 768  : 								if(len)

	cmp	DWORD PTR _len$12[ebp], 0
	je	SHORT $LN26@Draw

; 769  : 								{
; 770  : 									cur->Draw(surface,&_password_[idx],len,UI95_RGB24Bit(FgColor_),x+nx,y,&rect);

	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8[ebp]
	add	edx, DWORD PTR _nx$5[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _len$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$11[ebp]
	add	ecx, OFFSET __password_
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw
$LN26@Draw:

; 771  : 								}
; 772  : 							}
; 773  : 							else

	jmp	SHORT $LN25@Draw
$LN29@Draw:

; 774  : 								cur->Draw(surface,_password_,UI95_RGB24Bit(FgColor_),x,y,&rect);

	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	push	OFFSET __password_
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw
$LN25@Draw:

; 775  : 						}
; 776  : 						else

	jmp	$LN24@Draw
$LN30@Draw:

; 777  : 						{
; 778  : 							if(GetFlags() & C_BIT_OPAQUE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@O_Output@@QAEJXZ		; O_Output::GetFlags
	and	eax, 1048576				; 00100000H
	je	$LN23@Draw

; 779  : 							{
; 780  : 								idx=0;

	mov	DWORD PTR _idx$11[ebp], 0

; 781  : 								len=_tcsclen(Label_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	call	__tcsclen
	add	esp, 4
	mov	DWORD PTR _len$12[ebp], eax

; 782  : 								nx=0;

	mov	DWORD PTR _nx$5[ebp], 0

; 783  : 								lenout=0;

	mov	DWORD PTR _lenout$10[ebp], 0

; 784  : 
; 785  : 								if(len && idx < OpStart_)

	cmp	DWORD PTR _len$12[ebp], 0
	je	$LN22@Draw
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+112]
	cmp	DWORD PTR _idx$11[ebp], ecx
	jge	$LN22@Draw

; 786  : 								{
; 787  : 									len=min(len,OpStart_-idx);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+112]
	sub	eax, DWORD PTR _idx$11[ebp]
	cmp	DWORD PTR _len$12[ebp], eax
	jge	SHORT $LN74@Draw
	mov	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR tv840[ebp], ecx
	jmp	SHORT $LN75@Draw
$LN74@Draw:
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+112]
	sub	eax, DWORD PTR _idx$11[ebp]
	mov	DWORD PTR tv840[ebp], eax
$LN75@Draw:
	mov	ecx, DWORD PTR tv840[ebp]
	mov	DWORD PTR _len$12[ebp], ecx

; 788  : 									cur->Draw(surface,Label_,len,UI95_RGB24Bit(FgColor_),x,y,&rect);

	lea	edx, DWORD PTR _rect$22[ebp]
	push	edx
	mov	eax, DWORD PTR _y$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _len$12[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw

; 789  : 									idx += len;

	mov	eax, DWORD PTR _idx$11[ebp]
	add	eax, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _idx$11[ebp], eax

; 790  : 									lenout+=len;

	mov	ecx, DWORD PTR _lenout$10[ebp]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _lenout$10[ebp], ecx

; 791  : 									len=_tcsclen(Label_)-lenout;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	call	__tcsclen
	add	esp, 4
	sub	eax, DWORD PTR _lenout$10[ebp]
	mov	DWORD PTR _len$12[ebp], eax

; 792  : 									nx=cur->Width(Label_,lenout)-1;

	mov	ecx, DWORD PTR _lenout$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	mov	DWORD PTR _nx$5[ebp], eax
$LN22@Draw:

; 793  : 								}
; 794  : 								if(len && idx < OpEnd_)

	cmp	DWORD PTR _len$12[ebp], 0
	je	$LN21@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+114]
	cmp	DWORD PTR _idx$11[ebp], edx
	jge	$LN21@Draw

; 795  : 								{
; 796  : 									len=min(len,OpEnd_-idx);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+114]
	sub	ecx, DWORD PTR _idx$11[ebp]
	cmp	DWORD PTR _len$12[ebp], ecx
	jge	SHORT $LN76@Draw
	mov	edx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR tv876[ebp], edx
	jmp	SHORT $LN77@Draw
$LN76@Draw:
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+114]
	sub	ecx, DWORD PTR _idx$11[ebp]
	mov	DWORD PTR tv876[ebp], ecx
$LN77@Draw:
	mov	edx, DWORD PTR tv876[ebp]
	mov	DWORD PTR _len$12[ebp], edx

; 797  : 									cur->DrawSolid(surface,&Label_[idx],len,UI95_RGB24Bit(FgColor_),UI95_RGB24Bit(BgColor_),x+nx,y,&rect);

	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8[ebp]
	add	edx, DWORD PTR _nx$5[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _len$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, DWORD PTR _idx$11[ebp]
	push	edx
	mov	eax, DWORD PTR _surface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?DrawSolid@C_Fontmgr@@QAEXPAVSCREEN@@PADJGGJJPAUUI95_RECT@@@Z ; C_Fontmgr::DrawSolid

; 798  : 									idx += len;

	mov	ecx, DWORD PTR _idx$11[ebp]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _idx$11[ebp], ecx

; 799  : 									lenout+=len;

	mov	edx, DWORD PTR _lenout$10[ebp]
	add	edx, DWORD PTR _len$12[ebp]
	mov	DWORD PTR _lenout$10[ebp], edx

; 800  : 									len=_tcsclen(Label_)-lenout;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call	__tcsclen
	add	esp, 4
	sub	eax, DWORD PTR _lenout$10[ebp]
	mov	DWORD PTR _len$12[ebp], eax

; 801  : 									nx=cur->Width(Label_,lenout)-1;

	mov	edx, DWORD PTR _lenout$10[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	mov	DWORD PTR _nx$5[ebp], eax
$LN21@Draw:

; 802  : 								}
; 803  : 								if(len)

	cmp	DWORD PTR _len$12[ebp], 0
	je	SHORT $LN20@Draw

; 804  : 								{
; 805  : 									cur->Draw(surface,&Label_[idx],len,UI95_RGB24Bit(FgColor_),x+nx,y,&rect);

	lea	edx, DWORD PTR _rect$22[ebp]
	push	edx
	mov	eax, DWORD PTR _y$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$8[ebp]
	add	ecx, DWORD PTR _nx$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _len$12[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, DWORD PTR _idx$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADJGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw
$LN20@Draw:

; 806  : 								}
; 807  : 							}
; 808  : 							else

	jmp	SHORT $LN24@Draw
$LN23@Draw:

; 809  : 								cur->Draw(surface,Label_,UI95_RGB24Bit(FgColor_),x,y,&rect);

	lea	eax, DWORD PTR _rect$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$8[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?UI95_RGB24Bit@@YAGK@Z			; UI95_RGB24Bit
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Draw@C_Fontmgr@@QAEXPAVSCREEN@@PADGJJPAUUI95_RECT@@@Z ; C_Fontmgr::Draw
$LN24@Draw:

; 810  : 						}
; 811  : 						if(flags_ & C_BIT_USELINE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 4194304				; 00400000H
	je	$LN36@Draw

; 812  : 							Owner_->Parent_->DrawHLine(surface,FgColor_,origx,origy+cur->Height()-1,cur->Width(Label_),Owner_->GetFlags(),Owner_->GetClient(),cliprect);

	mov	edx, DWORD PTR _cliprect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Width@C_Fontmgr@@QAEJPAD@Z		; C_Fontmgr::Width
	push	eax
	mov	ecx, DWORD PTR _cur$9[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	mov	edx, DWORD PTR _origy$4[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	push	eax
	mov	ecx, DWORD PTR _origx$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?DrawHLine@C_Window@@QAEXPAVSCREEN@@KJJJJJPAUUI95_RECT@@@Z ; C_Window::DrawHLine
$LN36@Draw:

; 813  : 					}
; 814  : 				}
; 815  : 			}
; 816  : 			break;

	jmp	$LN64@Draw
$LN17@Draw:

; 817  : 		case _OUT_BITMAP_:
; 818  : 			{
; 819  : 				UI95_RECT src,dest;
; 820  : 				src.left=0;

	mov	DWORD PTR _src$19[ebp], 0

; 821  : 				src.top=0;

	mov	DWORD PTR _src$19[ebp+4], 0

; 822  : 				src.right=Image_->Header->w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	DWORD PTR _src$19[ebp+8], ecx

; 823  : 				src.bottom=Image_->Header->h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	mov	DWORD PTR _src$19[ebp+12], edx

; 824  : 				dest.left=Owner_->GetX()+GetX();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	add	esi, eax
	mov	DWORD PTR _dest$20[ebp], esi

; 825  : 				dest.top=Owner_->GetY()+GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	add	esi, eax
	mov	DWORD PTR _dest$20[ebp+4], esi

; 826  : 				dest.right=dest.left+GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	add	eax, DWORD PTR _dest$20[ebp]
	mov	DWORD PTR _dest$20[ebp+8], eax

; 827  : 				dest.bottom=dest.top+GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	add	eax, DWORD PTR _dest$20[ebp+4]
	mov	DWORD PTR _dest$20[ebp+12], eax

; 828  : 
; 829  : 				if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	$LN16@Draw

; 830  : 				{
; 831  : 					dest.left+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$20[ebp]
	add	ecx, DWORD PTR [esi+eax*4+480]
	mov	DWORD PTR _dest$20[ebp], ecx

; 832  : 					dest.top+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _dest$20[ebp+4]
	add	eax, DWORD PTR [esi+edx*4+512]
	mov	DWORD PTR _dest$20[ebp+4], eax

; 833  : 					dest.right+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _dest$20[ebp+8]
	add	edx, DWORD PTR [esi+ecx*4+480]
	mov	DWORD PTR _dest$20[ebp+8], edx

; 834  : 					dest.bottom+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$20[ebp+12]
	add	ecx, DWORD PTR [esi+eax*4+512]
	mov	DWORD PTR _dest$20[ebp+12], ecx
$LN16@Draw:

; 835  : 				}
; 836  : 				if(!Owner_->Parent_->ClipToArea(&src,&dest,cliprect))

	mov	edx, DWORD PTR _cliprect$[ebp]
	push	edx
	lea	eax, DWORD PTR _dest$20[ebp]
	push	eax
	lea	ecx, DWORD PTR _src$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN15@Draw

; 837  : 					return;

	jmp	$LN64@Draw
$LN15@Draw:

; 838  : 
; 839  : 				if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN14@Draw

; 840  : 					if(!Owner_->Parent_->ClipToArea(&src,&dest,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	lea	eax, DWORD PTR [esi+edx+168]
	push	eax
	lea	ecx, DWORD PTR _dest$20[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$19[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN14@Draw

; 841  : 						break;

	jmp	$LN64@Draw
$LN14@Draw:

; 842  : 
; 843  : 				dest.left+=Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$20[ebp]
	mov	DWORD PTR _dest$20[ebp], ecx

; 844  : 				dest.top+=Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$20[ebp+4]
	mov	DWORD PTR _dest$20[ebp+4], ecx

; 845  : 				if(flags_ & C_BIT_TRANSLUCENT && fperc_ < 100)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 536870912				; 20000000H
	je	SHORT $LN12@Draw
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+102]
	cmp	edx, 100				; 00000064H
	jge	SHORT $LN12@Draw

; 846  : 					Image_->Blend(surface,src.left,src.top,src.right-src.left,src.bottom-src.top,dest.left,dest.top,fperc_,100-fperc_);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+102]
	mov	edx, 100				; 00000064H
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+102]
	push	ecx
	mov	edx, DWORD PTR _dest$20[ebp+4]
	push	edx
	mov	eax, DWORD PTR _dest$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$19[ebp+12]
	sub	ecx, DWORD PTR _src$19[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _src$19[ebp+8]
	sub	edx, DWORD PTR _src$19[ebp]
	push	edx
	mov	eax, DWORD PTR _src$19[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _src$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?Blend@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJJJ@Z ; IMAGE_RSC::Blend

; 847  : 				else 

	jmp	SHORT $LN11@Draw
$LN12@Draw:

; 848  : 					Image_->Blit(surface,src.left,src.top,src.right-src.left,src.bottom-src.top,dest.left,dest.top);

	mov	ecx, DWORD PTR _dest$20[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _dest$20[ebp]
	push	edx
	mov	eax, DWORD PTR _src$19[ebp+12]
	sub	eax, DWORD PTR _src$19[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _src$19[ebp+8]
	sub	ecx, DWORD PTR _src$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$19[ebp+4]
	push	edx
	mov	eax, DWORD PTR _src$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	call	?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z ; IMAGE_RSC::Blit
$LN11@Draw:

; 849  : 			}
; 850  : 			break;

	jmp	$LN64@Draw
$LN10@Draw:

; 851  : 		case _OUT_SCALEBITMAP_:
; 852  : 			{
; 853  : 				UI95_RECT dummy,clip;
; 854  : 				clip=*cliprect;

	mov	eax, DWORD PTR _cliprect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _clip$13[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _clip$13[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _clip$13[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _clip$13[ebp+12], edx

; 855  : 				if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN9@Draw

; 856  : 					if(!Owner_->Parent_->ClipToArea(&dummy,&clip,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	shl	ecx, 4
	lea	edx, DWORD PTR [esi+ecx+168]
	push	edx
	lea	eax, DWORD PTR _clip$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN9@Draw

; 857  : 						break;

	jmp	$LN64@Draw
$LN9@Draw:

; 858  : 
; 859  : 				if(ScaleSet_ > 500)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 500			; 000001f4H
	jle	$LN7@Draw

; 860  : 					Image_->ScaleDown8(surface,Rows_,Cols_,clip.left+Owner_->Parent_->GetX(),clip.top+Owner_->Parent_->GetY(),(clip.right-clip.left),(clip.bottom-clip.top),Src_.left*1000/ScaleSet_+(clip.left-Dest_.left),Src_.top*1000/ScaleSet_+(clip.top-Dest_.top));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clip$13[ebp+4]
	sub	ecx, DWORD PTR [edx+40]
	add	eax, ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clip$13[ebp]
	sub	ecx, DWORD PTR [edx+36]
	add	eax, ecx
	push	eax
	mov	edx, DWORD PTR _clip$13[ebp+12]
	sub	edx, DWORD PTR _clip$13[ebp+4]
	push	edx
	mov	eax, DWORD PTR _clip$13[ebp+8]
	sub	eax, DWORD PTR _clip$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _clip$13[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	cwde
	add	eax, DWORD PTR _clip$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?ScaleDown8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJJJ@Z ; IMAGE_RSC::ScaleDown8

; 861  : 				else

	jmp	$LN6@Draw
$LN7@Draw:

; 862  : 					Image_->ScaleUp8(surface,&Rows_[clip.top-Dest_.top],&Cols_[clip.left-Dest_.left],clip.left+Owner_->Parent_->GetX(),clip.top+Owner_->Parent_->GetY(),(clip.right-clip.left),(clip.bottom-clip.top));

	mov	ecx, DWORD PTR _clip$13[ebp+12]
	sub	ecx, DWORD PTR _clip$13[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _clip$13[ebp+8]
	sub	edx, DWORD PTR _clip$13[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	edx, ax
	add	edx, DWORD PTR _clip$13[ebp+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	add	edx, DWORD PTR _clip$13[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clip$13[ebp]
	sub	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _clip$13[ebp+4]
	sub	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	call	?ScaleUp8@IMAGE_RSC@@QAEXPAVSCREEN@@PAJ1JJJJ@Z ; IMAGE_RSC::ScaleUp8
$LN6@Draw:

; 863  : 			}
; 864  : 			break;

	jmp	$LN64@Draw
$LN5@Draw:

; 865  : 		case _OUT_ANIM_:
; 866  : 			{
; 867  : 				UI95_RECT dest,src;
; 868  : 				long dx,dy;
; 869  : 
; 870  : 				dest.left=Owner_->GetX()+GetX();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	add	esi, eax
	mov	DWORD PTR _dest$21[ebp], esi

; 871  : 				dest.top=Owner_->GetY()+GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	add	esi, eax
	mov	DWORD PTR _dest$21[ebp+4], esi

; 872  : 
; 873  : 				dest.right=dest.left+GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	add	eax, DWORD PTR _dest$21[ebp]
	mov	DWORD PTR _dest$21[ebp+8], eax

; 874  : 				dest.bottom=dest.top+GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	add	eax, DWORD PTR _dest$21[ebp+4]
	mov	DWORD PTR _dest$21[ebp+12], eax

; 875  : 
; 876  : 				src.left=0;

	mov	DWORD PTR _src$17[ebp], 0

; 877  : 				src.top=0;

	mov	DWORD PTR _src$17[ebp+4], 0

; 878  : 				src.right=GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	mov	DWORD PTR _src$17[ebp+8], eax

; 879  : 				src.bottom=GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	mov	DWORD PTR _src$17[ebp+12], eax

; 880  : 
; 881  : 				if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	$LN4@Draw

; 882  : 				{
; 883  : 					dest.left+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$21[ebp]
	add	ecx, DWORD PTR [esi+eax*4+480]
	mov	DWORD PTR _dest$21[ebp], ecx

; 884  : 					dest.top+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	mov	eax, DWORD PTR _dest$21[ebp+4]
	add	eax, DWORD PTR [esi+edx*4+512]
	mov	DWORD PTR _dest$21[ebp+4], eax

; 885  : 					dest.right+=Owner_->Parent_->VX_[Owner_->GetClient()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	mov	edx, DWORD PTR _dest$21[ebp+8]
	add	edx, DWORD PTR [esi+ecx*4+480]
	mov	DWORD PTR _dest$21[ebp+8], edx

; 886  : 					dest.bottom+=Owner_->Parent_->VY_[Owner_->GetClient()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$21[ebp+12]
	add	ecx, DWORD PTR [esi+eax*4+512]
	mov	DWORD PTR _dest$21[ebp+12], ecx
$LN4@Draw:

; 887  : 				}
; 888  : 
; 889  : 				dx=dest.left+Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$21[ebp]
	mov	DWORD PTR _dx$3[ebp], ecx

; 890  : 				dy=dest.top+Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$21[ebp+4]
	mov	DWORD PTR _dy$2[ebp], ecx

; 891  : 
; 892  : 				if(!Owner_->Parent_->ClipToArea(&src,&dest,cliprect))

	mov	edx, DWORD PTR _cliprect$[ebp]
	push	edx
	lea	eax, DWORD PTR _dest$21[ebp]
	push	eax
	lea	ecx, DWORD PTR _src$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN3@Draw

; 893  : 					return;

	jmp	$LN64@Draw
$LN3@Draw:

; 894  : 
; 895  : 				if(!(Owner_->GetFlags() & C_BIT_ABSOLUTE))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	jne	SHORT $LN2@Draw

; 896  : 					if(!Owner_->Parent_->ClipToArea(&src,&dest,&Owner_->Parent_->ClientArea_[Owner_->GetClient()]))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	lea	eax, DWORD PTR [esi+edx+168]
	push	eax
	lea	ecx, DWORD PTR _dest$21[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$17[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN2@Draw

; 897  : 						return;

	jmp	$LN64@Draw
$LN2@Draw:

; 898  : 
; 899  : 				dest.left+=Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$21[ebp]
	mov	DWORD PTR _dest$21[ebp], ecx

; 900  : 				dest.right+=Owner_->Parent_->GetX();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$21[ebp+8]
	mov	DWORD PTR _dest$21[ebp+8], ecx

; 901  : 				dest.top+=Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$21[ebp+4]
	mov	DWORD PTR _dest$21[ebp+4], ecx

; 902  : 				dest.bottom+=Owner_->Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$21[ebp+12]
	mov	DWORD PTR _dest$21[ebp+12], ecx

; 903  : 
; 904  : 				ExtractAnim(surface,frame_,dx,dy,&src,&dest);

	lea	edx, DWORD PTR _dest$21[ebp]
	push	edx
	lea	eax, DWORD PTR _src$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _dy$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _dx$3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractAnim@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ; O_Output::ExtractAnim
$LN64@Draw:

; 905  : 			}
; 906  : 			break;
; 907  : 	}
; 908  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN78@Draw:
	DD	$LN55@Draw
	DD	$LN17@Draw
	DD	$LN10@Draw
	DD	$LN5@Draw
	DD	$LN60@Draw
?Draw@O_Output@@QAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; O_Output::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_h$ = -20						; size = 4
_w$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?Refresh@O_Output@@QAEXXZ PROC				; O_Output::Refresh
; _this$ = ecx

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 	long x,y,w,h;
; 465  : 	if(!Ready()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@O_Output@@QAEFXZ			; O_Output::Ready
	cwde
	test	eax, eax
	jne	SHORT $LN7@Refresh
	jmp	$LN8@Refresh
$LN7@Refresh:

; 466  : 
; 467  : 	if(_GetOType_() == _OUT_SCALEBITMAP_)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_GetOType_@O_Output@@QAEFXZ		; O_Output::_GetOType_
	movsx	ecx, ax
	cmp	ecx, 102				; 00000066H
	jne	$LN6@Refresh

; 468  : 	{
; 469  : 		Owner_->Parent_->update_ |= C_DRAW_REFRESH;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+104]
	or	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+104], edx

; 470  : 		Owner_->Parent_->SetUpdateRect(Owner_->Parent_->ClientArea_[Owner_->GetClient()].left,
; 471  : 									   Owner_->Parent_->ClientArea_[Owner_->GetClient()].top,
; 472  : 									   Owner_->Parent_->ClientArea_[Owner_->GetClient()].right,
; 473  : 									   Owner_->Parent_->ClientArea_[Owner_->GetClient()].bottom,
; 474  : 									   C_BIT_ABSOLUTE,Owner_->GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	push	edx
	push	262144					; 00040000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	shl	eax, 4
	mov	ecx, DWORD PTR [esi+eax+180]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	esi, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	shl	edx, 4
	mov	eax, DWORD PTR [esi+edx+176]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	esi, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	shl	ecx, 4
	mov	edx, DWORD PTR [esi+ecx+172]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	esi, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	shl	eax, 4
	mov	ecx, DWORD PTR [esi+eax+168]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect

; 475  : 	}
; 476  : 	else

	jmp	$LN8@Refresh
$LN6@Refresh:

; 477  : 	{
; 478  : 		x=Owner_->GetX()+GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	add	esi, eax
	mov	DWORD PTR _x$[ebp], esi

; 479  : 		y=Owner_->GetY()+GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	add	esi, eax
	mov	DWORD PTR _y$[ebp], esi

; 480  : 		w=x+GetW();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@O_Output@@QAEJXZ			; O_Output::GetW
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _w$[ebp], eax

; 481  : 		h=y+GetH();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@O_Output@@QAEJXZ			; O_Output::GetH
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _h$[ebp], eax

; 482  : 
; 483  : 		if(x < lastx_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax+76]
	jge	SHORT $LN4@Refresh

; 484  : 			lastx_=x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+76], eax
$LN4@Refresh:

; 485  : 		if(y < lasty_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jge	SHORT $LN3@Refresh

; 486  : 			lasty_=y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+80], ecx
$LN3@Refresh:

; 487  : 		if(w > lastw_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	cmp	eax, DWORD PTR [edx+84]
	jle	SHORT $LN2@Refresh

; 488  : 			lastw_=w;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+84], edx
$LN2@Refresh:

; 489  : 		if(h > lasth_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jle	SHORT $LN1@Refresh

; 490  : 			lasth_=h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+88], eax
$LN1@Refresh:

; 491  : 		Owner_->Parent_->SetUpdateRect(lastx_,lasty_,lastw_,lasth_,Owner_->GetFlags(),Owner_->GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR [ecx+48]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect

; 492  : 		lastx_=x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+76], eax

; 493  : 		lasty_=y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+80], edx

; 494  : 		lastw_=w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+84], ecx

; 495  : 		lasty_=h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+80], eax
$LN8@Refresh:

; 496  : 	}
; 497  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@O_Output@@QAEXXZ ENDP				; O_Output::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_cur$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 2
_idx$ = 8						; size = 2
_cx$ = 12						; size = 4
_cy$ = 16						; size = 4
?GetCharXY@O_Output@@QAEXFPAJ0@Z PROC			; O_Output::GetCharXY
; _this$ = ecx

; 559  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 	C_Fontmgr *cur;
; 561  : 	short i;
; 562  : 
; 563  : 	if(_GetOType_() != _OUT_TEXT_)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_GetOType_@O_Output@@QAEFXZ		; O_Output::_GetOType_
	cwde
	cmp	eax, 100				; 00000064H
	je	SHORT $LN10@GetCharXY

; 564  : 		return;

	jmp	$LN11@GetCharXY
$LN10@GetCharXY:

; 565  : 
; 566  : 	cur=gFontList->Find(Font_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 567  : 	if(!cur)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN9@GetCharXY

; 568  : 		return;

	jmp	$LN11@GetCharXY
$LN9@GetCharXY:

; 569  : 
; 570  : 	*cx=GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@O_Output@@QAEJXZ			; O_Output::GetX
	mov	ecx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR [ecx], eax

; 571  : 	*cy=GetY();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@O_Output@@QAEJXZ			; O_Output::GetY
	mov	edx, DWORD PTR _cy$[ebp]
	mov	DWORD PTR [edx], eax

; 572  : 
; 573  : 	if(WWCount_ && (flags_ & C_BIT_WORDWRAP))

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+110]
	test	ecx, ecx
	je	$LN8@GetCharXY
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 33554432				; 02000000H
	je	$LN8@GetCharXY

; 574  : 	{
; 575  : 		for(i=0;i<WWCount_;i++)

	xor	ecx, ecx
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN7@GetCharXY
$LN6@GetCharXY:
	mov	dx, WORD PTR _i$[ebp]
	add	dx, 1
	mov	WORD PTR _i$[ebp], dx
$LN7@GetCharXY:
	movsx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	cmp	eax, edx
	jge	$LN5@GetCharXY

; 576  : 		{
; 577  : 			if(idx <= Wrap_[i].Index + Wrap_[i].Length)

	movsx	eax, WORD PTR _idx$[ebp]
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [edx+ecx]
	movsx	edx, WORD PTR _i$[ebp]
	imul	edx, 6
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi+124]
	movsx	edx, WORD PTR [esi+edx+2]
	add	ecx, edx
	cmp	eax, ecx
	jg	SHORT $LN4@GetCharXY

; 578  : 			{
; 579  : 				*cx=cur->Width(&Label_[Wrap_[i].Index],idx-Wrap_[i].Index);

	movsx	eax, WORD PTR _idx$[ebp]
	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [edx+ecx]
	sub	eax, ecx
	push	eax
	movsx	edx, WORD PTR _i$[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	edx, WORD PTR [ecx+edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, edx
	push	ecx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	mov	edx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR [edx], eax

; 580  : 				*cy=Wrap_[i].y;

	movsx	eax, WORD PTR _i$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax+4]
	mov	ecx, DWORD PTR _cy$[ebp]
	mov	DWORD PTR [ecx], eax

; 581  : 				return;

	jmp	SHORT $LN11@GetCharXY
$LN4@GetCharXY:

; 582  : 			}
; 583  : 		}

	jmp	$LN6@GetCharXY
$LN5@GetCharXY:

; 584  : 	}
; 585  : 	else

	jmp	SHORT $LN11@GetCharXY
$LN8@GetCharXY:

; 586  : 	{
; 587  : 		if(GetFlags() & C_BIT_PASSWORD)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@O_Output@@QAEJXZ		; O_Output::GetFlags
	and	eax, 8388608				; 00800000H
	je	SHORT $LN2@GetCharXY

; 588  : 		{
; 589  : 			*cx += cur->Width("*") * idx;

	push	OFFSET ??_C@_01NBENCBCI@?$CK?$AA@
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPAD@Z		; C_Fontmgr::Width
	movsx	edx, WORD PTR _idx$[ebp]
	imul	eax, edx
	mov	ecx, DWORD PTR _cx$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR [edx], eax

; 590  : 		}
; 591  : 		else

	jmp	SHORT $LN11@GetCharXY
$LN2@GetCharXY:

; 592  : 			*cx += cur->Width(Label_,idx);

	movsx	eax, WORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	mov	ecx, DWORD PTR _cx$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR [edx], eax
$LN11@GetCharXY:

; 593  : 	}
; 594  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetCharXY@O_Output@@QAEXFPAJ0@Z ENDP			; O_Output::GetCharXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_x$ = -28						; size = 4
_y$ = -24						; size = 4
_w$ = -20						; size = 4
_cur$ = -16						; size = 4
_i$ = -12						; size = 4
_j$ = -8						; size = 4
_this$ = -4						; size = 4
_relx$ = 8						; size = 4
_rely$ = 12						; size = 4
?GetCursorPos@O_Output@@QAEJJJ@Z PROC			; O_Output::GetCursorPos
; _this$ = ecx

; 500  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 501  : 	C_Fontmgr *cur;
; 502  : 	unsigned long i,j;//! 
; 503  : 	long x,y,w;
; 504  : 
; 505  : 	if(_GetOType_() != _OUT_TEXT_)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_GetOType_@O_Output@@QAEFXZ		; O_Output::_GetOType_
	cwde
	cmp	eax, 100				; 00000064H
	je	SHORT $LN16@GetCursorP

; 506  : 		return(0);

	xor	eax, eax
	jmp	$LN17@GetCursorP
$LN16@GetCursorP:

; 507  : 
; 508  : 	cur=gFontList->Find(Font_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 509  : 	if(!cur)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN15@GetCursorP

; 510  : 		return(0);

	xor	eax, eax
	jmp	$LN17@GetCursorP
$LN15@GetCursorP:

; 511  : 
; 512  : 	if(WWCount_ && (flags_ & C_BIT_WORDWRAP))

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+110]
	test	ecx, ecx
	je	$LN14@GetCursorP
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 33554432				; 02000000H
	je	$LN14@GetCursorP

; 513  : 	{
; 514  : 		if(rely < 0)

	cmp	DWORD PTR _rely$[ebp], 0
	jge	SHORT $LN13@GetCursorP

; 515  : 			return(0);

	xor	eax, eax
	jmp	$LN17@GetCursorP
$LN13@GetCursorP:

; 516  : 		if(rely > (Wrap_[WWCount_-1].y+cur->Height()))

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	sub	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	esi, WORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	add	esi, eax
	cmp	DWORD PTR _rely$[ebp], esi
	jle	SHORT $LN12@GetCursorP

; 517  : 			return((short)_tcsclen(Label_));//! 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	call	__tcsclen
	add	esp, 4
	cwde
	jmp	$LN17@GetCursorP
$LN12@GetCursorP:

; 518  : 
; 519  : 		i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN11@GetCursorP:

; 520  : 
; 521  : 		while(rely >= (Wrap_[i].y+cur->Height()) && i < (unsigned long)WWCount_)//! 

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	esi, WORD PTR [eax+ecx+4]
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	add	esi, eax
	cmp	DWORD PTR _rely$[ebp], esi
	jl	SHORT $LN10@GetCursorP
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+110]
	cmp	DWORD PTR _i$[ebp], edx
	jae	SHORT $LN10@GetCursorP

; 522  : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN11@GetCursorP
$LN10@GetCursorP:

; 523  : 
; 524  : 		j=0;

	mov	DWORD PTR _j$[ebp], 0

; 525  : 		w=(cur->Width(&Label_[Wrap_[i].Index+j],1)-1)/2;

	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, ecx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _w$[ebp], eax
$LN9@GetCursorP:

; 526  : 		while(relx >= (cur->Width(&Label_[Wrap_[i].Index],j)-1+w) && j < (unsigned long)Wrap_[i].Length)//! 

	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	movsx	edx, WORD PTR [ecx+edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, edx
	push	ecx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	mov	edx, DWORD PTR _w$[ebp]
	lea	eax, DWORD PTR [eax+edx-1]
	cmp	DWORD PTR _relx$[ebp], eax
	jl	SHORT $LN8@GetCursorP
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx+2]
	cmp	DWORD PTR _j$[ebp], ecx
	jae	SHORT $LN8@GetCursorP

; 527  : 		{
; 528  : 			j++;

	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx

; 529  : 			if(j < (unsigned long)Wrap_[i].Length)

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	movsx	eax, WORD PTR [edx+eax+2]
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN7@GetCursorP

; 530  : 				w=(cur->Width(&Label_[Wrap_[i].Index+j],1)-1)/2;

	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, ecx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _w$[ebp], eax
$LN7@GetCursorP:

; 531  : 		}

	jmp	$LN9@GetCursorP
$LN8@GetCursorP:

; 532  : 
; 533  : 		return(short(Wrap_[i].Index + j));//! 

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	movsx	ecx, WORD PTR [eax+ecx]
	add	ecx, DWORD PTR _j$[ebp]
	movsx	eax, cx
	jmp	$LN17@GetCursorP

; 534  : 	}
; 535  : 	else

	jmp	$LN6@GetCursorP
$LN14@GetCursorP:

; 536  : 	{
; 537  : 		x=0;

	mov	DWORD PTR _x$[ebp], 0

; 538  : 		y=0;

	mov	DWORD PTR _y$[ebp], 0

; 539  : 
; 540  : 		if(rely < y)

	mov	edx, DWORD PTR _rely$[ebp]
	cmp	edx, DWORD PTR _y$[ebp]
	jge	SHORT $LN5@GetCursorP

; 541  : 			return(0);

	xor	eax, eax
	jmp	$LN17@GetCursorP
$LN5@GetCursorP:

; 542  : 		if(rely > y + cur->Height())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	add	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _rely$[ebp], eax
	jle	SHORT $LN4@GetCursorP

; 543  : 			return((short)_tcsclen(Label_));//! 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call	__tcsclen
	add	esp, 4
	cwde
	jmp	$LN17@GetCursorP
$LN4@GetCursorP:

; 544  : 
; 545  : 		j=0;

	mov	DWORD PTR _j$[ebp], 0

; 546  : 		w=(cur->Width(Label_,1)-1)/2;

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _w$[ebp], eax
$LN3@GetCursorP:

; 547  : 		while(relx >= (cur->Width(Label_,j)-1+x+w) && j < _tcsclen(Label_))

	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	add	edx, DWORD PTR _w$[ebp]
	cmp	DWORD PTR _relx$[ebp], edx
	jl	SHORT $LN2@GetCursorP
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call	__tcsclen
	add	esp, 4
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN2@GetCursorP

; 548  : 		{
; 549  : 			j++;

	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx

; 550  : 			if(j < _tcsclen(Label_))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call	__tcsclen
	add	esp, 4
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN1@GetCursorP

; 551  : 				w=(cur->Width(&Label_[j],1)-1)/2;

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Width@C_Fontmgr@@QAEJPADJ@Z		; C_Fontmgr::Width
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _w$[ebp], eax
$LN1@GetCursorP:

; 552  : 		}

	jmp	SHORT $LN3@GetCursorP
$LN2@GetCursorP:

; 553  : 		return(j);

	mov	eax, DWORD PTR _j$[ebp]
	jmp	SHORT $LN17@GetCursorP
$LN6@GetCursorP:

; 554  : 	}
; 555  : 	return(0);

	xor	eax, eax
$LN17@GetCursorP:

; 556  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetCursorPos@O_Output@@QAEJJJ@Z ENDP			; O_Output::GetCursorPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?GetFlags@O_Output@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@O_Output@@QAEJXZ PROC				; O_Output::GetFlags, COMDAT
; _this$ = ecx

; 150  : 		long GetFlags()					{ return(flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@O_Output@@QAEJXZ ENDP				; O_Output::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?Ready@O_Output@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Ready@O_Output@@QAEFXZ PROC				; O_Output::Ready, COMDAT
; _this$ = ecx

; 149  : 		short Ready()					{ return(ready_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+100]
	mov	esp, ebp
	pop	ebp
	ret	0
?Ready@O_Output@@QAEFXZ ENDP				; O_Output::Ready
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?GetH@O_Output@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetH@O_Output@@QAEJXZ PROC				; O_Output::GetH, COMDAT
; _this$ = ecx

; 148  : 		long GetH()						{ return(h_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetH@O_Output@@QAEJXZ ENDP				; O_Output::GetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?GetW@O_Output@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetW@O_Output@@QAEJXZ PROC				; O_Output::GetW, COMDAT
; _this$ = ecx

; 147  : 		long GetW()						{ return(w_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetW@O_Output@@QAEJXZ ENDP				; O_Output::GetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?GetY@O_Output@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@O_Output@@QAEJXZ PROC				; O_Output::GetY, COMDAT
; _this$ = ecx

; 146  : 		long GetY()						{ return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@O_Output@@QAEJXZ ENDP				; O_Output::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?GetX@O_Output@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@O_Output@@QAEJXZ PROC				; O_Output::GetX, COMDAT
; _this$ = ecx

; 145  : 		long GetX()						{ return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@O_Output@@QAEJXZ ENDP				; O_Output::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?_GetOType_@O_Output@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_GetOType_@O_Output@@QAEFXZ PROC			; O_Output::_GetOType_, COMDAT
; _this$ = ecx

; 143  : 		short _GetOType_()				{ return(_OType_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?_GetOType_@O_Output@@QAEFXZ ENDP			; O_Output::_GetOType_
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_sr$ = -32						; size = 4
_sl$ = -28						; size = 4
_sb$ = -24						; size = 4
_st$ = -20						; size = 4
_k$ = -16						; size = 4
_i$ = -12						; size = 4
_dd$ = -8						; size = 4
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?SetScaleInfo@O_Output@@QAEXJ@Z PROC			; O_Output::SetScaleInfo
; _this$ = ecx

; 1020 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1021 : 	long i,k,dd;
; 1022 : 	long st,sb,sl,sr;
; 1023 : 	if(scale > 500) // Shrink

	cmp	DWORD PTR _scale$[ebp], 500		; 000001f4H
	jle	SHORT $LN17@SetScaleIn

; 1024 : 	{
; 1025 : 		if(scale == ScaleSet_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN16@SetScaleIn

; 1026 : 			return;

	jmp	$LN18@SetScaleIn
$LN16@SetScaleIn:

; 1027 : 		st=0;

	mov	DWORD PTR _st$[ebp], 0

; 1028 : 		sb=Image_->Header->h;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	mov	DWORD PTR _sb$[ebp], edx

; 1029 : 		sl=0;

	mov	DWORD PTR _sl$[ebp], 0

; 1030 : 		sr=Image_->Header->w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	mov	DWORD PTR _sr$[ebp], eax

; 1031 : 	}
; 1032 : 	else // Grow

	jmp	SHORT $LN15@SetScaleIn
$LN17@SetScaleIn:

; 1033 : 	{
; 1034 : 		st=Src_.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _st$[ebp], edx

; 1035 : 		sb=Src_.bottom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _sb$[ebp], ecx

; 1036 : 		sl=Src_.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _sl$[ebp], eax

; 1037 : 		sr=Src_.right;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _sr$[ebp], edx
$LN15@SetScaleIn:

; 1038 : 	}
; 1039 : 	ScaleSet_=scale;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1040 : 
; 1041 : 	k=0;

	mov	DWORD PTR _k$[ebp], 0

; 1042 : 	dd=0;

	mov	DWORD PTR _dd$[ebp], 0

; 1043 : 	for(i=st;i<=sb;i++)

	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN14@SetScaleIn
$LN13@SetScaleIn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@SetScaleIn:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _sb$[ebp]
	jg	SHORT $LN12@SetScaleIn

; 1044 : 	{
; 1045 : 		dd-=1000;

	mov	edx, DWORD PTR _dd$[ebp]
	sub	edx, 1000				; 000003e8H
	mov	DWORD PTR _dd$[ebp], edx
$LN11@SetScaleIn:

; 1046 : 		while(dd <= 0)

	cmp	DWORD PTR _dd$[ebp], 0
	jg	SHORT $LN10@SetScaleIn

; 1047 : 		{
; 1048 : 			if (!F4IsBadWritePtr(&(Rows_[k + 1]), sizeof(short))) // JB 010304 CTD

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	call	?F4IsBadWritePtr@@YA_NPAXI@Z		; F4IsBadWritePtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@SetScaleIn

; 1049 : 				Rows_[k++]=i;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN9@SetScaleIn:

; 1050 : 			dd+=scale;

	mov	ecx, DWORD PTR _dd$[ebp]
	add	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR _dd$[ebp], ecx

; 1051 : 		}

	jmp	SHORT $LN11@SetScaleIn
$LN10@SetScaleIn:

; 1052 : 	}

	jmp	SHORT $LN13@SetScaleIn
$LN12@SetScaleIn:

; 1053 : 	k=0;

	mov	DWORD PTR _k$[ebp], 0

; 1054 : 	dd=0;

	mov	DWORD PTR _dd$[ebp], 0

; 1055 : 	for(i=sl;i<=sr;i++)

	mov	edx, DWORD PTR _sl$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN8@SetScaleIn
$LN7@SetScaleIn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@SetScaleIn:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _sr$[ebp]
	jg	SHORT $LN6@SetScaleIn

; 1056 : 	{
; 1057 : 		dd-=1000;

	mov	edx, DWORD PTR _dd$[ebp]
	sub	edx, 1000				; 000003e8H
	mov	DWORD PTR _dd$[ebp], edx
$LN5@SetScaleIn:

; 1058 : 		while(dd <= 0)

	cmp	DWORD PTR _dd$[ebp], 0
	jg	SHORT $LN4@SetScaleIn

; 1059 : 		{
; 1060 : 			if (!F4IsBadWritePtr(&(Cols_[k + 1]), sizeof(short))) // JB 010304 CTD

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	call	?F4IsBadWritePtr@@YA_NPAXI@Z		; F4IsBadWritePtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@SetScaleIn

; 1061 : 				Cols_[k++]=i;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN3@SetScaleIn:

; 1062 : 			dd+=scale;

	mov	ecx, DWORD PTR _dd$[ebp]
	add	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR _dd$[ebp], ecx

; 1063 : 		}

	jmp	SHORT $LN5@SetScaleIn
$LN4@SetScaleIn:

; 1064 : 	}

	jmp	SHORT $LN7@SetScaleIn
$LN6@SetScaleIn:

; 1065 : 	if(Image_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 0
	je	SHORT $LN2@SetScaleIn

; 1066 : 		SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady

; 1067 : 	else

	jmp	SHORT $LN18@SetScaleIn
$LN2@SetScaleIn:

; 1068 : 		SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@O_Output@@QAEXF@Z		; O_Output::SetReady
$LN18@SetScaleIn:

; 1069 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleInfo@O_Output@@QAEXJ@Z ENDP			; O_Output::SetScaleInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?SetFlags@O_Output@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flags$ = 8						; size = 4
?SetFlags@O_Output@@QAEXJ@Z PROC			; O_Output::SetFlags, COMDAT
; _this$ = ecx

; 126  : 		void SetFlags(long flags)				{ flags_=flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlags@O_Output@@QAEXJ@Z ENDP			; O_Output::SetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?SetReady@O_Output@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 2
?SetReady@O_Output@@QAEXF@Z PROC			; O_Output::SetReady, COMDAT
; _this$ = ecx

; 125  : 		void SetReady(short val)				{ ready_ = val; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _val$[ebp]
	mov	WORD PTR [eax+100], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetReady@O_Output@@QAEXF@Z ENDP			; O_Output::SetReady
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?SetWH@O_Output@@QAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?SetWH@O_Output@@QAEXJJ@Z PROC				; O_Output::SetWH, COMDAT
; _this$ = ecx

; 121  : 		void SetWH(long w,long h)				{ w_ = w; h_ = h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+72], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWH@O_Output@@QAEXJJ@Z ENDP				; O_Output::SetWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?SetXY@O_Output@@QAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetXY@O_Output@@QAEXJJ@Z PROC				; O_Output::SetXY, COMDAT
; _this$ = ecx

; 118  : 		void SetXY(long x,long y)				{ origx_ = x; origy_ = y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetXY@O_Output@@QAEXJJ@Z ENDP				; O_Output::SetXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.h
;	COMDAT ?_SetOType_@O_Output@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 2
?_SetOType_@O_Output@@QAEXF@Z PROC			; O_Output::_SetOType_, COMDAT
; _this$ = ecx

; 116  : 		void _SetOType_(short type)				{ _OType_=type; } // Private...Called by setup

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _type$[ebp]
	mov	WORD PTR [eax+92], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?_SetOType_@O_Output@@QAEXF@Z ENDP			; O_Output::_SetOType_
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fp$ = 8						; size = 4
?Save@O_Output@@QAEXPAU_iobuf@@@Z PROC			; O_Output::Save
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 	fwrite(&flags_,sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 118  : 	fwrite(&Font_,sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 119  : 	fwrite(&ScaleSet_,sizeof(long),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 120  : 
; 121  : 	fwrite(&FgColor_,sizeof(COLORREF),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 122  : 	fwrite(&BgColor_,sizeof(COLORREF),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 123  : 	fwrite(&Src_,sizeof(UI95_RECT),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 124  : 	fwrite(&Dest_,sizeof(UI95_RECT),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 125  : 	fwrite(&origx_,sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 126  : 	fwrite(&origy_,sizeof(long),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 127  : 	fwrite(&x_,sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 128  : 	fwrite(&y_,sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 129  : 	fwrite(&w_,sizeof(long),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 130  : 	fwrite(&h_,sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 131  : 
; 132  : 	fwrite(&_OType_,sizeof(short),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 133  : 	fwrite(&animtype_,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 94					; 0000005eH
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 134  : 	fwrite(&frame_,sizeof(short),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 135  : 	fwrite(&direction_,sizeof(short),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 98					; 00000062H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 136  : 	fwrite(&ready_,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 137  : 	fwrite(&fperc_,sizeof(short),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 138  : 	fwrite(&bperc_,sizeof(short),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 139  : 	fwrite(&LabelLen_,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 106				; 0000006aH
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 140  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@O_Output@@QAEXPAU_iobuf@@@Z ENDP			; O_Output::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@O_Output@@QAEXPAPAD@Z PROC			; O_Output::Save
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	memcpy(*stream,&flags_,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 91   : 	memcpy(*stream,&Font_,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 92   : 	memcpy(*stream,&ScaleSet_,sizeof(long));		*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 93   : 
; 94   : 	memcpy(*stream,&FgColor_,sizeof(COLORREF));		*stream += sizeof(COLORREF);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 95   : 	memcpy(*stream,&BgColor_,sizeof(COLORREF));		*stream += sizeof(COLORREF);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 96   : 	memcpy(*stream,&Src_,sizeof(UI95_RECT));		*stream += sizeof(UI95_RECT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 97   : 	memcpy(*stream,&Dest_,sizeof(UI95_RECT));		*stream += sizeof(UI95_RECT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 98   : 	memcpy(*stream,&origx_,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 99   : 	memcpy(*stream,&origy_,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 100  : 	memcpy(*stream,&x_,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 101  : 	memcpy(*stream,&y_,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 102  : 	memcpy(*stream,&w_,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 103  : 	memcpy(*stream,&h_,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 104  : 
; 105  : 	memcpy(*stream,&_OType_,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 106  : 	memcpy(*stream,&animtype_,sizeof(short));		*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 94					; 0000005eH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 107  : 	memcpy(*stream,&frame_,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 108  : 	memcpy(*stream,&direction_,sizeof(short));		*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 98					; 00000062H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 109  : 	memcpy(*stream,&ready_,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 110  : 	memcpy(*stream,&fperc_,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 111  : 	memcpy(*stream,&bperc_,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 112  : 	memcpy(*stream,&LabelLen_,sizeof(short));		*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 106				; 0000006aH
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 113  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@O_Output@@QAEXPAPAD@Z ENDP			; O_Output::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = -4						; size = 4
?Size@O_Output@@QAEJXZ PROC				; O_Output::Size
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	long size=sizeof(long)
; 64   : 		+ sizeof(long)
; 65   : 		+ sizeof(long)
; 66   : 
; 67   : 		+ sizeof(COLORREF)
; 68   : 		+ sizeof(COLORREF)
; 69   : 		+ sizeof(UI95_RECT)
; 70   : 		+ sizeof(UI95_RECT)
; 71   : 		+ sizeof(long)
; 72   : 		+ sizeof(long)
; 73   : 		+ sizeof(long)
; 74   : 		+ sizeof(long)
; 75   : 		+ sizeof(long)
; 76   : 		+ sizeof(long)
; 77   : 		+ sizeof(short)
; 78   : 		+ sizeof(short)
; 79   : 		+ sizeof(short)
; 80   : 		+ sizeof(short)
; 81   : 		+ sizeof(short)
; 82   : 		+ sizeof(short)
; 83   : 		+ sizeof(short)
; 84   : 		+ sizeof(short);

	mov	DWORD PTR _size$[ebp], 92		; 0000005cH

; 85   : 	return(size);

	mov	eax, DWORD PTR _size$[ebp]

; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Size@O_Output@@QAEJXZ ENDP				; O_Output::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fp$ = 8						; size = 4
??0O_Output@@QAE@PAU_iobuf@@@Z PROC			; O_Output::O_Output
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	fread(&flags_,sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 37   : 	fread(&Font_,sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 38   : 	fread(&ScaleSet_,sizeof(long),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 39   : 
; 40   : 	fread(&FgColor_,sizeof(COLORREF),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 41   : 	fread(&BgColor_,sizeof(COLORREF),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 42   : 	fread(&Src_,sizeof(UI95_RECT),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 43   : 	fread(&Dest_,sizeof(UI95_RECT),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 44   : 	fread(&origx_,sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 45   : 	fread(&origy_,sizeof(long),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 46   : 	fread(&x_,sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 47   : 	fread(&y_,sizeof(long),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 48   : 	fread(&w_,sizeof(long),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 49   : 	fread(&h_,sizeof(long),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 50   : 
; 51   : 	fread(&_OType_,sizeof(short),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 52   : 	fread(&animtype_,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 94					; 0000005eH
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 53   : 	fread(&frame_,sizeof(short),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 54   : 	fread(&direction_,sizeof(short),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 98					; 00000062H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 55   : 	fread(&ready_,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 56   : 	fread(&fperc_,sizeof(short),1,fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 57   : 	fread(&bperc_,sizeof(short),1,fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 58   : 	fread(&LabelLen_,sizeof(short),1,fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 106				; 0000006aH
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 59   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0O_Output@@QAE@PAU_iobuf@@@Z ENDP			; O_Output::O_Output
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
??0O_Output@@QAE@PAPAD@Z PROC				; O_Output::O_Output
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 9    : 	memcpy(&flags_,*stream,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 10   : 	memcpy(&Font_,*stream,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 11   : 	memcpy(&ScaleSet_,*stream,sizeof(long));		*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 12   : 
; 13   : 	memcpy(&FgColor_,*stream,sizeof(COLORREF));		*stream += sizeof(COLORREF);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 14   : 	memcpy(&BgColor_,*stream,sizeof(COLORREF));		*stream += sizeof(COLORREF);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 15   : 	memcpy(&Src_,*stream,sizeof(UI95_RECT));		*stream += sizeof(UI95_RECT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 16   : 	memcpy(&Dest_,*stream,sizeof(UI95_RECT));		*stream += sizeof(UI95_RECT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 17   : 	memcpy(&origx_,*stream,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 18   : 	memcpy(&origy_,*stream,sizeof(long));			*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 19   : 	memcpy(&x_,*stream,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 20   : 	memcpy(&y_,*stream,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 21   : 	memcpy(&w_,*stream,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 22   : 	memcpy(&h_,*stream,sizeof(long));				*stream += sizeof(long);

	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 23   : 
; 24   : 	memcpy(&_OType_,*stream,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 25   : 	memcpy(&animtype_,*stream,sizeof(short));		*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 94					; 0000005eH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 26   : 	memcpy(&frame_,*stream,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 27   : 	memcpy(&direction_,*stream,sizeof(short));		*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 98					; 00000062H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 28   : 	memcpy(&ready_,*stream,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 29   : 	memcpy(&fperc_,*stream,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 102				; 00000066H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 30   : 	memcpy(&bperc_,*stream,sizeof(short));			*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 31   : 	memcpy(&LabelLen_,*stream,sizeof(short));		*stream += sizeof(short);

	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 106				; 0000006aH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0O_Output@@QAE@PAPAD@Z ENDP				; O_Output::O_Output
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
_Leave$ = -36						; size = 4
_fontheight$ = -32					; size = 4
_maxw$ = -28						; size = 4
_linew$ = -24						; size = 4
_len$ = -20						; size = 4
_idx$ = -16						; size = 4
_this$ = -12						; size = 4
_lenstr$ = -8						; size = 2
_count$ = -4						; size = 2
?WordWrap@O_Output@@IAEXXZ PROC				; O_Output::WordWrap
; _this$ = ecx

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 	int idx=0, len=0,fontheight=0, linew=0, maxw=0;

	mov	DWORD PTR _idx$[ebp], 0
	mov	DWORD PTR _len$[ebp], 0
	mov	DWORD PTR _fontheight$[ebp], 0
	mov	DWORD PTR _linew$[ebp], 0
	mov	DWORD PTR _maxw$[ebp], 0

; 218  : 	short count=0,lenstr=0;

	xor	eax, eax
	mov	WORD PTR _count$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _lenstr$[ebp], cx

; 219  : 
; 220  : 	F4CSECTIONHANDLE *Leave=NULL;

	mov	DWORD PTR _Leave$[ebp], 0

; 221  : 
; 222  : 	if(Owner_ && Owner_->Parent_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 0
	je	SHORT $LN20@WordWrap
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN20@WordWrap

; 223  : 		Leave=UI_Enter(Owner_->Parent_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax
$LN20@WordWrap:

; 224  : 
; 225  : 	if(Label_[0]) // pre-calc wordwrapping - 2 pass, 1st to figure out how many lines, 2nd to actually do it

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	movsx	edx, BYTE PTR [ecx+edx]
	test	edx, edx
	je	$LN19@WordWrap

; 226  : 	{
; 227  : 		idx=0;

	mov	DWORD PTR _idx$[ebp], 0

; 228  : 		count=0;

	xor	eax, eax
	mov	WORD PTR _count$[ebp], ax

; 229  : 		lenstr=(short)_tcsclen(Label_);//! 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	call	__tcsclen
	add	esp, 4
	mov	WORD PTR _lenstr$[ebp], ax

; 230  : 
; 231  : 		len=FitString(idx); 

	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FitString@O_Output@@IAEHH@Z		; O_Output::FitString
	mov	DWORD PTR _len$[ebp], eax
$LN18@WordWrap:

; 232  : 		while((idx+len) < lenstr)

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, WORD PTR _lenstr$[ebp]
	cmp	ecx, edx
	jge	$LN17@WordWrap

; 233  : 		{
; 234  : 			count++;

	mov	ax, WORD PTR _count$[ebp]
	add	ax, 1
	mov	WORD PTR _count$[ebp], ax

; 235  : 			idx += len;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _idx$[ebp], ecx
$LN16@WordWrap:

; 236  : 			while(Label_[idx] == ' ' || Label_[idx] == '\n') // 2002-02-24 MODIFIED BY S.G. Skip '\n' as well since these will 'terminate' word wrapped line (like they should) and need to be skipped for the next one

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [eax+ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN14@WordWrap
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _idx$[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN15@WordWrap
$LN14@WordWrap:

; 237  : 				idx++;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
	jmp	SHORT $LN16@WordWrap
$LN15@WordWrap:

; 238  : 			len=FitString(idx);

	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FitString@O_Output@@IAEHH@Z		; O_Output::FitString
	mov	DWORD PTR _len$[ebp], eax

; 239  : 			linew=gFontList->StrWidth(Font_,&Label_[idx],len);  

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPADH@Z		; C_Font::StrWidth
	mov	DWORD PTR _linew$[ebp], eax

; 240  : 			if(linew > maxw)

	mov	edx, DWORD PTR _linew$[ebp]
	cmp	edx, DWORD PTR _maxw$[ebp]
	jle	SHORT $LN13@WordWrap

; 241  : 				maxw=linew;

	mov	eax, DWORD PTR _linew$[ebp]
	mov	DWORD PTR _maxw$[ebp], eax
$LN13@WordWrap:

; 242  : 		}

	jmp	$LN18@WordWrap
$LN17@WordWrap:

; 243  : 		if(count)

	movsx	ecx, WORD PTR _count$[ebp]
	test	ecx, ecx
	je	$LN12@WordWrap

; 244  : 		{
; 245  : 			count++;

	mov	dx, WORD PTR _count$[ebp]
	add	dx, 1
	mov	WORD PTR _count$[ebp], dx

; 246  : 			if(WWCount_ && WWCount_ != count)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+110]
	test	ecx, ecx
	je	SHORT $LN11@WordWrap
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+110]
	movsx	ecx, WORD PTR _count$[ebp]
	cmp	eax, ecx
	je	SHORT $LN11@WordWrap

; 247  : 			{
; 248  : 				WWCount_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+110], dx

; 249  : 				if(Wrap_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+124], 0
	je	SHORT $LN10@WordWrap

; 250  : 					delete Wrap_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN10@WordWrap:

; 251  : 				Wrap_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], 0
$LN11@WordWrap:

; 252  : 			}
; 253  : 			WWCount_=count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _count$[ebp]
	mov	WORD PTR [eax+110], cx

; 254  : 			if(!Wrap_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+124], 0
	jne	SHORT $LN9@WordWrap

; 255  : 				Wrap_=new WORDWRAP[WWCount_];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+110]
	xor	ecx, ecx
	mov	edx, 6
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+124], ecx
$LN9@WordWrap:

; 256  : 
; 257  : 			fontheight=gFontList->GetHeight(Font_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	mov	DWORD PTR _fontheight$[ebp], eax

; 258  : 			idx=0;

	mov	DWORD PTR _idx$[ebp], 0

; 259  : 			count=0;

	xor	ecx, ecx
	mov	WORD PTR _count$[ebp], cx

; 260  : 			len=FitString(idx);

	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FitString@O_Output@@IAEHH@Z		; O_Output::FitString
	mov	DWORD PTR _len$[ebp], eax

; 261  : 			linew=gFontList->StrWidth(Font_,&Label_[idx],len); 

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPADH@Z		; C_Font::StrWidth
	mov	DWORD PTR _linew$[ebp], eax

; 262  : 			if(linew > maxw)

	mov	edx, DWORD PTR _linew$[ebp]
	cmp	edx, DWORD PTR _maxw$[ebp]
	jle	SHORT $LN7@WordWrap

; 263  : 				maxw=linew;

	mov	eax, DWORD PTR _linew$[ebp]
	mov	DWORD PTR _maxw$[ebp], eax
$LN7@WordWrap:

; 264  : 			while((idx+len) < lenstr)

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, WORD PTR _lenstr$[ebp]
	cmp	ecx, edx
	jge	$LN6@WordWrap

; 265  : 			{
; 266  : 				Wrap_[count].Index=(short)idx;				//! 

	movsx	eax, WORD PTR _count$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	cx, WORD PTR _idx$[ebp]
	mov	WORD PTR [edx+eax], cx

; 267  : 				Wrap_[count].Length=(short)len;				//! 

	movsx	edx, WORD PTR _count$[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	ax, WORD PTR _len$[ebp]
	mov	WORD PTR [ecx+edx+2], ax

; 268  : 				Wrap_[count].y=(short)(count * fontheight);	//! 

	movsx	ecx, WORD PTR _count$[ebp]
	imul	ecx, DWORD PTR _fontheight$[ebp]
	movsx	edx, WORD PTR _count$[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	WORD PTR [eax+edx+4], cx

; 269  : 
; 270  : 				count++;

	mov	cx, WORD PTR _count$[ebp]
	add	cx, 1
	mov	WORD PTR _count$[ebp], cx

; 271  : 				idx+=len;

	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _idx$[ebp], edx
$LN5@WordWrap:

; 272  : 				while(Label_[idx] == ' ')

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _idx$[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN4@WordWrap

; 273  : 					idx++;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
	jmp	SHORT $LN5@WordWrap
$LN4@WordWrap:

; 274  : 				len=FitString(idx);

	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FitString@O_Output@@IAEHH@Z		; O_Output::FitString
	mov	DWORD PTR _len$[ebp], eax

; 275  : 				linew=gFontList->StrWidth(Font_,&Label_[idx],len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPADH@Z		; C_Font::StrWidth
	mov	DWORD PTR _linew$[ebp], eax

; 276  : 				if(linew > maxw)

	mov	edx, DWORD PTR _linew$[ebp]
	cmp	edx, DWORD PTR _maxw$[ebp]
	jle	SHORT $LN3@WordWrap

; 277  : 					maxw=linew;

	mov	eax, DWORD PTR _linew$[ebp]
	mov	DWORD PTR _maxw$[ebp], eax
$LN3@WordWrap:

; 278  : 			}

	jmp	$LN7@WordWrap
$LN6@WordWrap:

; 279  : 			Wrap_[count].Index	= (short)idx;					//! 

	movsx	ecx, WORD PTR _count$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	dx, WORD PTR _idx$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 280  : 			Wrap_[count].Length	= (short)len;					//! 

	movsx	eax, WORD PTR _count$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	cx, WORD PTR _len$[ebp]
	mov	WORD PTR [edx+eax+2], cx

; 281  : 			Wrap_[count].y		= (short)(count * fontheight);	//! 

	movsx	edx, WORD PTR _count$[ebp]
	imul	edx, DWORD PTR _fontheight$[ebp]
	movsx	eax, WORD PTR _count$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	mov	WORD PTR [ecx+eax+4], dx

; 282  : 		}
; 283  : 		else

	jmp	SHORT $LN19@WordWrap
$LN12@WordWrap:

; 284  : 		{
; 285  : 			WWCount_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+110], dx

; 286  : 			if(Wrap_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+124], 0
	je	SHORT $LN1@WordWrap

; 287  : 				delete Wrap_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@WordWrap:

; 288  : 			Wrap_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], 0

; 289  : 			count=0;

	xor	eax, eax
	mov	WORD PTR _count$[ebp], ax

; 290  : 			maxw=gFontList->StrWidth(Font_,Label_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPAD@Z		; C_Font::StrWidth
	mov	DWORD PTR _maxw$[ebp], eax
$LN19@WordWrap:

; 291  : 		}
; 292  : 	}
; 293  : 	SetWH(maxw,(count+1)*gFontList->GetHeight(Font_));

	movsx	esi, WORD PTR _count$[ebp]
	add	esi, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHeight@C_Font@@QAEHJ@Z		; C_Font::GetHeight
	imul	esi, eax
	push	esi
	mov	ecx, DWORD PTR _maxw$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWH@O_Output@@QAEXJJ@Z		; O_Output::SetWH

; 294  : 	UI_Leave(Leave);

	mov	edx, DWORD PTR _Leave$[ebp]
	push	edx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 295  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?WordWrap@O_Output@@IAEXXZ ENDP				; O_Output::WordWrap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_space$ = -16						; size = 4
_w$ = -12						; size = 4
_this$ = -8						; size = 4
_count$ = -4						; size = 4
_idx$ = 8						; size = 4
?FitString@O_Output@@IAEHH@Z PROC			; O_Output::FitString
; _this$ = ecx

; 179  : { // idx is the index into the start of the string

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 	int count,space;
; 181  : 	long w;	//! 
; 182  : 
; 183  : 	if(!Label_[idx])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _idx$[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	test	eax, eax
	jne	SHORT $LN10@FitString

; 184  : 		return(0);

	xor	eax, eax
	jmp	$LN11@FitString
$LN10@FitString:

; 185  : 
; 186  : 	w=WWWidth_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+108]
	mov	DWORD PTR _w$[ebp], edx

; 187  : 	if(!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN9@FitString

; 188  : 		w=Owner_->GetW();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	mov	DWORD PTR _w$[ebp], eax
$LN9@FitString:

; 189  : 	if(!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN8@FitString

; 190  : 		return((short)_tcsclen(&Label_[idx]));	   //! 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, DWORD PTR _idx$[ebp]
	push	edx
	call	__tcsclen
	add	esp, 4
	cwde
	jmp	$LN11@FitString
$LN8@FitString:

; 191  : 	space=0;

	mov	DWORD PTR _space$[ebp], 0

; 192  : 	count=1;

	mov	DWORD PTR _count$[ebp], 1
$LN7@FitString:

; 193  : 	while(Label_[idx+count] && gFontList->StrWidth(Font_,&Label_[idx],(short)count) < w)//! 

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	movsx	eax, BYTE PTR [edx+eax]
	test	eax, eax
	je	SHORT $LN6@FitString
	movsx	ecx, WORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPADH@Z		; C_Font::StrWidth
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN6@FitString

; 194  : 	{
; 195  : 		if(Label_[idx+count] == ' ')

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN5@FitString

; 196  : 			space=count;

	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR _space$[ebp], ecx
$LN5@FitString:

; 197  : 		// 2002-02-24 ADDED BY S.G. If we get a '\n', that's it for this line!
; 198  : 		if(Label_[idx+count] == '\n') {

	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN4@FitString

; 199  : 			space=count;

	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _space$[ebp], eax

; 200  : 			break;

	jmp	SHORT $LN6@FitString
$LN4@FitString:

; 201  : 		}
; 202  : 		// END OF ADDED SECTION 2002-02-24
; 203  : 		count++;

	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 204  : 	}

	jmp	$LN7@FitString
$LN6@FitString:

; 205  : 
; 206  : 	if(gFontList->StrWidth(Font_,&Label_[idx],(short)count) < w)//! 

	movsx	edx, WORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?StrWidth@C_Font@@QAEHJPADH@Z		; C_Font::StrWidth
	cmp	eax, DWORD PTR _w$[ebp]
	jge	SHORT $LN3@FitString

; 207  : 		return(count);

	mov	eax, DWORD PTR _count$[ebp]
	jmp	SHORT $LN11@FitString
$LN3@FitString:

; 208  : 	if(space)

	cmp	DWORD PTR _space$[ebp], 0
	je	SHORT $LN2@FitString

; 209  : 		return(space);

	mov	eax, DWORD PTR _space$[ebp]
	jmp	SHORT $LN11@FitString
$LN2@FitString:

; 210  : 	if(count > 1)

	cmp	DWORD PTR _count$[ebp], 1
	jle	SHORT $LN1@FitString

; 211  : 		return((short)(count-1));	//! 

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	movsx	eax, cx
	jmp	SHORT $LN11@FitString
$LN1@FitString:

; 212  : 	return(1);

	mov	eax, 1
$LN11@FitString:

; 213  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FitString@O_Output@@IAEHH@Z ENDP			; O_Output::FitString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
?Extract16Bit@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z PROC ; O_Output::Extract16Bit
; _this$ = ecx

; 1227 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1228 : #if 0
; 1229 : 	ANIM_FRAME *Frame;
; 1230 : 	WORD *sptr;
; 1231 : 	WORD *dptr;
; 1232 : 	long i;
; 1233 : 
; 1234 : 	i=0;
; 1235 : 	Frame=(ANIM_FRAME *)&Anim_->Anim->Start[0];
; 1236 : 	dptr=(WORD *)Mem;
; 1237 : 	while(i < FrameNo && i < Anim_->Anim->Frames)
; 1238 : 	{
; 1239 : 		Frame=(ANIM_FRAME *)&Frame->Data[Frame->Size];
; 1240 : 		i++;
; 1241 : 	}
; 1242 : 
; 1243 : 	sptr=(WORD *)&Frame->Data[0];
; 1244 : 	dptr+=(y+dy*w)+x+dx;
; 1245 : 	sptr+=(dy*Anim_->Anim->Width)+dx;
; 1246 : 	for(i=0;i<dh;i++)
; 1247 : 	{
; 1248 : 		memmove(dptr,sptr,dw*Anim_->Anim->BytesPerPixel);
; 1249 : 		dptr+=w;
; 1250 : 		sptr+=Anim_->Anim->Width;
; 1251 : 	}
; 1252 : #endif
; 1253 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Extract16Bit@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ENDP ; O_Output::Extract16Bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
_done$ = -40						; size = 4
_FramePtr$ = -36					; size = 4
_i$ = -32						; size = 4
_dy$ = -28						; size = 4
_lptr$ = -24						; size = 4
_dx$ = -20						; size = 4
_dptr$ = -16						; size = 4
_sptr$ = -12						; size = 4
_Key$ = -8						; size = 2
_count$ = -4						; size = 2
_surface$ = 8						; size = 4
_FrameNo$ = 12						; size = 4
_destx$ = 16						; size = 4
_desty$ = 20						; size = 4
_src$ = 24						; size = 4
_clip$ = 28						; size = 4
?Extract16BitRLE@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z PROC ; O_Output::Extract16BitRLE
; _this$ = ecx

; 1118 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 	src;		//!	Unused
; 1120 : 
; 1121 : 	ShiAssert( surface->bpp != 32 );//XX
; 1122 : 
; 1123 : 	long i,dx,dy,done;
; 1124 : 	WORD Key,count;
; 1125 : 	ANIM_FRAME *FramePtr;
; 1126 : 	WORD *sptr;
; 1127 : 	WORD *dptr,*lptr;
; 1128 : 
; 1129 : 	i=0;

	mov	DWORD PTR _i$[ebp], 0

; 1130 : 	FramePtr=(ANIM_FRAME *)&Anim_->Anim->Start[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+28]
	mov	DWORD PTR _FramePtr$[ebp], ecx
$LN32@Extract16B:

; 1131 : 	while(i < FrameNo && i < Anim_->Anim->Frames)

	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _FrameNo$[ebp]
	jge	SHORT $LN31@Extract16B
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jge	SHORT $LN31@Extract16B

; 1132 : 	{
; 1133 : 		FramePtr=(ANIM_FRAME *)&FramePtr->Data[FramePtr->Size];

	mov	ecx, DWORD PTR _FramePtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _FramePtr$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _FramePtr$[ebp], ecx

; 1134 : 		i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1135 : 	}

	jmp	SHORT $LN32@Extract16B
$LN31@Extract16B:

; 1136 : 	sptr=(WORD *)&FramePtr->Data[0];

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _FramePtr$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _sptr$[ebp], edx

; 1137 : 	lptr=(WORD *)surface->mem;

	mov	eax, DWORD PTR _surface$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _lptr$[ebp], ecx

; 1138 : 	lptr+=(desty * surface->width + destx);

	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	eax, DWORD PTR _desty$[ebp]
	add	eax, DWORD PTR _destx$[ebp]
	mov	ecx, DWORD PTR _lptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _lptr$[ebp], edx

; 1139 : 	dptr=lptr;

	mov	eax, DWORD PTR _lptr$[ebp]
	mov	DWORD PTR _dptr$[ebp], eax

; 1140 : 	dx=destx;

	mov	ecx, DWORD PTR _destx$[ebp]
	mov	DWORD PTR _dx$[ebp], ecx

; 1141 : 	dy=desty;

	mov	edx, DWORD PTR _desty$[ebp]
	mov	DWORD PTR _dy$[ebp], edx

; 1142 : 	done=0;

	mov	DWORD PTR _done$[ebp], 0
$LN30@Extract16B:

; 1143 : 
; 1144 : 	while(!done)

	cmp	DWORD PTR _done$[ebp], 0
	jne	$LN33@Extract16B

; 1145 : 	{
; 1146 : 		Key   = (WORD)(*sptr & RLE_KEYMASK);

	mov	eax, DWORD PTR _sptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, 61440				; 0000f000H
	mov	WORD PTR _Key$[ebp], cx

; 1147 : 		count = (WORD)(*sptr & RLE_COUNTMASK);

	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, 4095				; 00000fffH
	mov	WORD PTR _count$[ebp], ax

; 1148 : 		sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1149 : 
; 1150 : 		if(Key & RLE_END)

	movzx	edx, WORD PTR _Key$[ebp]
	and	edx, 32768				; 00008000H
	je	SHORT $LN28@Extract16B

; 1151 : 			done=1;

	mov	DWORD PTR _done$[ebp], 1
	jmp	$LN27@Extract16B
$LN28@Extract16B:

; 1152 : 		else if(dy < clip->top)

	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR _dy$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN26@Extract16B

; 1153 : 		{
; 1154 : 			// go through compressed stuff, & don't do anything for output
; 1155 : 			if(!(Key & RLE_KEYMASK))

	movzx	edx, WORD PTR _Key$[ebp]
	and	edx, 61440				; 0000f000H
	jne	SHORT $LN25@Extract16B

; 1156 : 			{
; 1157 : 				sptr+=count;

	movzx	eax, WORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _sptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _sptr$[ebp], edx
	jmp	SHORT $LN24@Extract16B
$LN25@Extract16B:

; 1158 : 			}
; 1159 : 			else if(Key & RLE_REPEAT)

	movzx	eax, WORD PTR _Key$[ebp]
	and	eax, 4096				; 00001000H
	je	SHORT $LN23@Extract16B

; 1160 : 			{
; 1161 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx
	jmp	SHORT $LN24@Extract16B
$LN23@Extract16B:

; 1162 : 			}
; 1163 : 			else if(Key & RLE_SKIPCOL)

	movzx	edx, WORD PTR _Key$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN21@Extract16B
	jmp	SHORT $LN24@Extract16B
$LN21@Extract16B:

; 1164 : 			{
; 1165 : 			}
; 1166 : 			else if(Key & RLE_SKIPROW)

	movzx	eax, WORD PTR _Key$[ebp]
	and	eax, 16384				; 00004000H
	je	SHORT $LN24@Extract16B

; 1167 : 			{
; 1168 : 				lptr+=(count * surface->width);

	movzx	ecx, WORD PTR _count$[ebp]
	mov	edx, DWORD PTR _surface$[ebp]
	movsx	eax, WORD PTR [edx+4]
	imul	ecx, eax
	mov	edx, DWORD PTR _lptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _lptr$[ebp], eax

; 1169 : 				dptr=lptr;

	mov	ecx, DWORD PTR _lptr$[ebp]
	mov	DWORD PTR _dptr$[ebp], ecx

; 1170 : 				dx=destx;

	mov	edx, DWORD PTR _destx$[ebp]
	mov	DWORD PTR _dx$[ebp], edx

; 1171 : 				dy+=count;

	movzx	eax, WORD PTR _count$[ebp]
	add	eax, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _dy$[ebp], eax
$LN24@Extract16B:

; 1172 : 			}
; 1173 : 		}
; 1174 : 		else

	jmp	$LN27@Extract16B
$LN26@Extract16B:

; 1175 : 		{
; 1176 : 			if(!(Key & RLE_KEYMASK))

	movzx	ecx, WORD PTR _Key$[ebp]
	and	ecx, 61440				; 0000f000H
	jne	SHORT $LN17@Extract16B
$LN16@Extract16B:

; 1177 : 			{
; 1178 : 				while(count > 0)

	movzx	edx, WORD PTR _count$[ebp]
	test	edx, edx
	jle	SHORT $LN15@Extract16B

; 1179 : 				{
; 1180 : 					if(dx >= clip->left && dx < clip->right)

	mov	eax, DWORD PTR _clip$[ebp]
	mov	ecx, DWORD PTR _dx$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN14@Extract16B
	mov	edx, DWORD PTR _clip$[ebp]
	mov	eax, DWORD PTR _dx$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN14@Extract16B

; 1181 : 					{
; 1182 : 						*dptr=*sptr;

	mov	ecx, DWORD PTR _dptr$[ebp]
	mov	edx, DWORD PTR _sptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax

; 1183 : 						dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx

; 1184 : 					}
; 1185 : 					else

	jmp	SHORT $LN13@Extract16B
$LN14@Extract16B:

; 1186 : 						dptr++;

	mov	edx, DWORD PTR _dptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _dptr$[ebp], edx
$LN13@Extract16B:

; 1187 : 					dx++;

	mov	eax, DWORD PTR _dx$[ebp]
	add	eax, 1
	mov	DWORD PTR _dx$[ebp], eax

; 1188 : 					sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx

; 1189 : 					count--;

	mov	dx, WORD PTR _count$[ebp]
	sub	dx, 1
	mov	WORD PTR _count$[ebp], dx

; 1190 : 				}

	jmp	SHORT $LN16@Extract16B
$LN15@Extract16B:

; 1191 : 			}
; 1192 : 			else if(Key & RLE_REPEAT)

	jmp	$LN12@Extract16B
$LN17@Extract16B:
	movzx	eax, WORD PTR _Key$[ebp]
	and	eax, 4096				; 00001000H
	je	SHORT $LN11@Extract16B
$LN10@Extract16B:

; 1193 : 			{
; 1194 : 				while(count > 0)

	movzx	ecx, WORD PTR _count$[ebp]
	test	ecx, ecx
	jle	SHORT $LN9@Extract16B

; 1195 : 				{
; 1196 : 					if(dx >= clip->left && dx < clip->right)

	mov	edx, DWORD PTR _clip$[ebp]
	mov	eax, DWORD PTR _dx$[ebp]
	cmp	eax, DWORD PTR [edx]
	jl	SHORT $LN8@Extract16B
	mov	ecx, DWORD PTR _clip$[ebp]
	mov	edx, DWORD PTR _dx$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN8@Extract16B

; 1197 : 					{
; 1198 : 						*dptr=*sptr;

	mov	eax, DWORD PTR _dptr$[ebp]
	mov	ecx, DWORD PTR _sptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 1199 : 						dptr++;

	mov	eax, DWORD PTR _dptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _dptr$[ebp], eax

; 1200 : 					}
; 1201 : 					else

	jmp	SHORT $LN7@Extract16B
$LN8@Extract16B:

; 1202 : 						dptr++;

	mov	ecx, DWORD PTR _dptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dptr$[ebp], ecx
$LN7@Extract16B:

; 1203 : 					dx++;

	mov	edx, DWORD PTR _dx$[ebp]
	add	edx, 1
	mov	DWORD PTR _dx$[ebp], edx

; 1204 : 					count--;

	mov	ax, WORD PTR _count$[ebp]
	sub	ax, 1
	mov	WORD PTR _count$[ebp], ax

; 1205 : 				}

	jmp	SHORT $LN10@Extract16B
$LN9@Extract16B:

; 1206 : 				sptr++;

	mov	ecx, DWORD PTR _sptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _sptr$[ebp], ecx
	jmp	SHORT $LN12@Extract16B
$LN11@Extract16B:

; 1207 : 			}
; 1208 : 			else if(Key & RLE_SKIPCOL)

	movzx	edx, WORD PTR _Key$[ebp]
	and	edx, 8192				; 00002000H
	je	SHORT $LN5@Extract16B

; 1209 : 			{
; 1210 : 				dptr+=count;

	movzx	eax, WORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dptr$[ebp], edx

; 1211 : 				dx+=count;

	movzx	eax, WORD PTR _count$[ebp]
	add	eax, DWORD PTR _dx$[ebp]
	mov	DWORD PTR _dx$[ebp], eax
	jmp	SHORT $LN12@Extract16B
$LN5@Extract16B:

; 1212 : 			}
; 1213 : 			else if(Key & RLE_SKIPROW)

	movzx	ecx, WORD PTR _Key$[ebp]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN12@Extract16B

; 1214 : 			{
; 1215 : 				lptr+=(count * surface->width);

	movzx	edx, WORD PTR _count$[ebp]
	mov	eax, DWORD PTR _surface$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	imul	edx, ecx
	mov	eax, DWORD PTR _lptr$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _lptr$[ebp], ecx

; 1216 : 				dptr=lptr;

	mov	edx, DWORD PTR _lptr$[ebp]
	mov	DWORD PTR _dptr$[ebp], edx

; 1217 : 				dx=destx;

	mov	eax, DWORD PTR _destx$[ebp]
	mov	DWORD PTR _dx$[ebp], eax

; 1218 : 				dy+=count;

	movzx	ecx, WORD PTR _count$[ebp]
	add	ecx, DWORD PTR _dy$[ebp]
	mov	DWORD PTR _dy$[ebp], ecx
$LN12@Extract16B:

; 1219 : 			}
; 1220 : 			if(dy >= clip->bottom || dy >= surface->height)

	mov	edx, DWORD PTR _clip$[ebp]
	mov	eax, DWORD PTR _dy$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN1@Extract16B
	mov	ecx, DWORD PTR _surface$[ebp]
	movsx	edx, WORD PTR [ecx+6]
	cmp	DWORD PTR _dy$[ebp], edx
	jl	SHORT $LN27@Extract16B
$LN1@Extract16B:

; 1221 : 				done=1;

	mov	DWORD PTR _done$[ebp], 1
$LN27@Extract16B:

; 1222 : 		}
; 1223 : 	}

	jmp	$LN30@Extract16B
$LN33@Extract16B:

; 1224 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Extract16BitRLE@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ENDP ; O_Output::Extract16BitRLE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ooutput.cpp
_TEXT	SEGMENT
tv68 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_FrameNo$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_src$ = 24						; size = 4
_dest$ = 28						; size = 4
?ExtractAnim@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z PROC ; O_Output::ExtractAnim
; _this$ = ecx

; 1101 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1102 : 	switch(Anim_->Anim->BytesPerPixel)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+22]
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 2
	je	SHORT $LN5@ExtractAni
	jmp	SHORT $LN8@ExtractAni
$LN5@ExtractAni:

; 1103 : 	{
; 1104 : 		case 2:
; 1105 : 			switch(Anim_->Anim->Compression)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+20]
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN2@ExtractAni
	cmp	DWORD PTR tv73[ebp], 0
	jle	SHORT $LN8@ExtractAni
	cmp	DWORD PTR tv73[ebp], 4
	jle	SHORT $LN1@ExtractAni
	jmp	SHORT $LN8@ExtractAni
$LN2@ExtractAni:

; 1106 : 			{
; 1107 : 				case 0:
; 1108 : 					Extract16Bit(surface,FrameNo,x,y,src,dest);

	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _FrameNo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Extract16Bit@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ; O_Output::Extract16Bit

; 1109 : 					break;

	jmp	SHORT $LN8@ExtractAni
$LN1@ExtractAni:

; 1110 : 				case 1: case 2: case 3: case 4:
; 1111 : 					Extract16BitRLE(surface,FrameNo,x,y,src,dest);

	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _FrameNo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Extract16BitRLE@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ; O_Output::Extract16BitRLE
$LN8@ExtractAni:

; 1112 : 					break;
; 1113 : 			}
; 1114 : 	}
; 1115 : }				

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?ExtractAnim@O_Output@@IAEXPAVSCREEN@@JJJPAUUI95_RECT@@1@Z ENDP ; O_Output::ExtractAnim
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcsclen
_TEXT	SEGMENT
__String$ = 8						; size = 4
__tcsclen PROC						; COMDAT

; 1748 : {

	push	ebp
	mov	ebp, esp

; 1749 :     return _mbslen((const unsigned char *)_String);

	mov	eax, DWORD PTR __String$[ebp]
	push	eax
	call	__mbslen
	add	esp, 4

; 1750 : }

	pop	ebp
	ret	0
__tcsclen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__Dst$ = 8						; size = 4
__Source$ = 12						; size = 4
__Count$ = 16						; size = 4
__tcsncpy PROC						; COMDAT

; 1524 : {

	push	ebp
	mov	ebp, esp

; 1525 : #pragma warning(push)
; 1526 : #pragma warning(disable:4996)
; 1527 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Source$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dst$[ebp]
	push	edx
	call	__mbsnbcpy
	add	esp, 12					; 0000000cH

; 1528 : #pragma warning(pop)
; 1529 : }

	pop	ebp
	ret	0
__tcsncpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
