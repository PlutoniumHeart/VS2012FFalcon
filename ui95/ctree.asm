; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ui95\ctree.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?C_Tl_Tokens@@3PAPADA				; C_Tl_Tokens
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@		; `string'
PUBLIC	??_C@_07INNADMMB@?$FLSETUP?$FN?$AA@		; `string'
PUBLIC	??_C@_09CNLFMIEK@?$FLXOFFSET?$FN?$AA@		; `string'
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	??_C@_09DKMONMAJ@?$FLYOFFSET?$FN?$AA@		; `string'
PUBLIC	??_C@_08BJANLPOK@?$FLIMAGES?$FN?$AA@		; `string'
PUBLIC	??_C@_08FBKLKDCI@?$FLSORTBY?$FN?$AA@		; `string'
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	??_C@_0O@DIGCDKAD@?$FLADDTEXTITEM?$FN?$AA@	; `string'
PUBLIC	??_C@_0BA@MBCDDELI@?$FLADDBITMAPITEM?$FN?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	??_C@_0O@JEOEAKH@?$FLADDHELPITEM?$FN?$AA@	; `string'
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	??_C@_0BA@BJMEMPDC@?$FLHELPITEMIMAGE?$FN?$AA@	; `string'
PUBLIC	??_C@_0P@IDHBKJDO@?$FLHELPITEMTEXT?$FN?$AA@	; `string'
PUBLIC	??_C@_0P@PCKNBKEM@?$FLHELPITEMFONT?$FN?$AA@	; `string'
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	??_C@_0BB@MJFBFCAD@?$FLHELPITEMFLAGON?$FN?$AA@	; `string'
PUBLIC	??_C@_0BC@EDBCEHIP@?$FLHELPITEMFLAGOFF?$FN?$AA@	; `string'
PUBLIC	??_C@_0BC@IJGGC@?$FLADDWORDWRAPITEM?$FN?$AA@	; `string'
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ??_C@_0BC@IJGGC@?$FLADDWORDWRAPITEM?$FN?$AA@
CONST	SEGMENT
??_C@_0BC@IJGGC@?$FLADDWORDWRAPITEM?$FN?$AA@ DB '[ADDWORDWRAPITEM]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EDBCEHIP@?$FLHELPITEMFLAGOFF?$FN?$AA@
CONST	SEGMENT
??_C@_0BC@EDBCEHIP@?$FLHELPITEMFLAGOFF?$FN?$AA@ DB '[HELPITEMFLAGOFF]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJFBFCAD@?$FLHELPITEMFLAGON?$FN?$AA@
CONST	SEGMENT
??_C@_0BB@MJFBFCAD@?$FLHELPITEMFLAGON?$FN?$AA@ DB '[HELPITEMFLAGON]', 00H ; `string'
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ??_C@_0P@PCKNBKEM@?$FLHELPITEMFONT?$FN?$AA@
CONST	SEGMENT
??_C@_0P@PCKNBKEM@?$FLHELPITEMFONT?$FN?$AA@ DB '[HELPITEMFONT]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDHBKJDO@?$FLHELPITEMTEXT?$FN?$AA@
CONST	SEGMENT
??_C@_0P@IDHBKJDO@?$FLHELPITEMTEXT?$FN?$AA@ DB '[HELPITEMTEXT]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJMEMPDC@?$FLHELPITEMIMAGE?$FN?$AA@
CONST	SEGMENT
??_C@_0BA@BJMEMPDC@?$FLHELPITEMIMAGE?$FN?$AA@ DB '[HELPITEMIMAGE]', 00H ; `string'
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ??_C@_0O@JEOEAKH@?$FLADDHELPITEM?$FN?$AA@
CONST	SEGMENT
??_C@_0O@JEOEAKH@?$FLADDHELPITEM?$FN?$AA@ DB '[ADDHELPITEM]', 00H ; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BA@MBCDDELI@?$FLADDBITMAPITEM?$FN?$AA@
CONST	SEGMENT
??_C@_0BA@MBCDDELI@?$FLADDBITMAPITEM?$FN?$AA@ DB '[ADDBITMAPITEM]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DIGCDKAD@?$FLADDTEXTITEM?$FN?$AA@
CONST	SEGMENT
??_C@_0O@DIGCDKAD@?$FLADDTEXTITEM?$FN?$AA@ DB '[ADDTEXTITEM]', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ??_C@_08FBKLKDCI@?$FLSORTBY?$FN?$AA@
CONST	SEGMENT
??_C@_08FBKLKDCI@?$FLSORTBY?$FN?$AA@ DB '[SORTBY]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJANLPOK@?$FLIMAGES?$FN?$AA@
CONST	SEGMENT
??_C@_08BJANLPOK@?$FLIMAGES?$FN?$AA@ DB '[IMAGES]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKMONMAJ@?$FLYOFFSET?$FN?$AA@
CONST	SEGMENT
??_C@_09DKMONMAJ@?$FLYOFFSET?$FN?$AA@ DB '[YOFFSET]', 00H ; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ??_C@_09CNLFMIEK@?$FLXOFFSET?$FN?$AA@
CONST	SEGMENT
??_C@_09CNLFMIEK@?$FLXOFFSET?$FN?$AA@ DB '[XOFFSET]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07INNADMMB@?$FLSETUP?$FN?$AA@
CONST	SEGMENT
??_C@_07INNADMMB@?$FLSETUP?$FN?$AA@ DB '[SETUP]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@
CONST	SEGMENT
??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@ DB '[NOTHING]', 00H ; `string'
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
_DATA	SEGMENT
?C_Tl_Tokens@@3PAPADA DD FLAT:??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@ ; C_Tl_Tokens
	DD	FLAT:??_C@_07INNADMMB@?$FLSETUP?$FN?$AA@
	DD	FLAT:??_C@_09CNLFMIEK@?$FLXOFFSET?$FN?$AA@
	DD	FLAT:??_C@_09DKMONMAJ@?$FLYOFFSET?$FN?$AA@
	DD	FLAT:??_C@_08BJANLPOK@?$FLIMAGES?$FN?$AA@
	DD	FLAT:??_C@_08FBKLKDCI@?$FLSORTBY?$FN?$AA@
	DD	FLAT:??_C@_0O@DIGCDKAD@?$FLADDTEXTITEM?$FN?$AA@
	DD	FLAT:??_C@_0BA@MBCDDELI@?$FLADDBITMAPITEM?$FN?$AA@
	DD	FLAT:??_C@_0O@JEOEAKH@?$FLADDHELPITEM?$FN?$AA@
	DD	FLAT:??_C@_0BA@BJMEMPDC@?$FLHELPITEMIMAGE?$FN?$AA@
	DD	FLAT:??_C@_0P@IDHBKJDO@?$FLHELPITEMTEXT?$FN?$AA@
	DD	FLAT:??_C@_0P@PCKNBKEM@?$FLHELPITEMFONT?$FN?$AA@
	DD	FLAT:??_C@_0BB@MJFBFCAD@?$FLHELPITEMFLAGON?$FN?$AA@
	DD	FLAT:??_C@_0BC@EDBCEHIP@?$FLHELPITEMFLAGOFF?$FN?$AA@
	DD	FLAT:??_C@_0BC@IJGGC@?$FLADDWORDWRAPITEM?$FN?$AA@
	DD	00H
_DATA	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??_GC_Hash@@QAEPAXI@Z				; C_Hash::`scalar deleting destructor'
PUBLIC	??1C_Base@@UAE@XZ				; C_Base::~C_Base
PUBLIC	?SetID@C_Base@@QAEXJ@Z				; C_Base::SetID
PUBLIC	?SetType@C_Base@@QAEXF@Z			; C_Base::SetType
PUBLIC	?_SetCType_@C_Base@@QAEXF@Z			; C_Base::_SetCType_
PUBLIC	?SetClient@C_Base@@QAEXF@Z			; C_Base::SetClient
PUBLIC	?SetFlags@C_Base@@UAEXJ@Z			; C_Base::SetFlags
PUBLIC	?SetFlagBitOn@C_Base@@UAEXJ@Z			; C_Base::SetFlagBitOn
PUBLIC	?SetFlagBitOff@C_Base@@UAEXJ@Z			; C_Base::SetFlagBitOff
PUBLIC	?SetX@C_Base@@UAEXJ@Z				; C_Base::SetX
PUBLIC	?SetY@C_Base@@UAEXJ@Z				; C_Base::SetY
PUBLIC	?SetW@C_Base@@UAEXJ@Z				; C_Base::SetW
PUBLIC	?SetH@C_Base@@UAEXJ@Z				; C_Base::SetH
PUBLIC	?SetXY@C_Base@@UAEXJJ@Z				; C_Base::SetXY
PUBLIC	?SetWH@C_Base@@UAEXJJ@Z				; C_Base::SetWH
PUBLIC	?SetXYWH@C_Base@@UAEXJJJJ@Z			; C_Base::SetXYWH
PUBLIC	?SetRelX@C_Base@@UAEXJ@Z			; C_Base::SetRelX
PUBLIC	?SetRelY@C_Base@@UAEXJ@Z			; C_Base::SetRelY
PUBLIC	?SetRelXY@C_Base@@UAEXJJ@Z			; C_Base::SetRelXY
PUBLIC	?SetParent@C_Base@@QAEXPAVC_Window@@@Z		; C_Base::SetParent
PUBLIC	?SetReady@C_Base@@QAEXF@Z			; C_Base::SetReady
PUBLIC	?SetState@C_Base@@UAEXF@Z			; C_Base::SetState
PUBLIC	?SetHotKey@C_Base@@UAEXF@Z			; C_Base::SetHotKey
PUBLIC	?SetMenu@C_Base@@UAEXJ@Z			; C_Base::SetMenu
PUBLIC	?SetFont@C_Base@@UAEXJ@Z			; C_Base::SetFont
PUBLIC	?SetSound@C_Base@@UAEXJF@Z			; C_Base::SetSound
PUBLIC	?SetCursorID@C_Base@@UAEXJ@Z			; C_Base::SetCursorID
PUBLIC	?SetDragCursorID@C_Base@@UAEXJ@Z		; C_Base::SetDragCursorID
PUBLIC	?SetHelpText@C_Base@@UAEXJ@Z			; C_Base::SetHelpText
PUBLIC	?SetMouseOver@C_Base@@UAEXF@Z			; C_Base::SetMouseOver
PUBLIC	?SetMouseOverColor@C_Base@@UAEXK@Z		; C_Base::SetMouseOverColor
PUBLIC	?SetMouseOverPerc@C_Base@@UAEXF@Z		; C_Base::SetMouseOverPerc
PUBLIC	?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z	; C_Base::SetCallback
PUBLIC	?GetID@C_Base@@QAEJXZ				; C_Base::GetID
PUBLIC	?_GetCType_@C_Base@@QAEFXZ			; C_Base::_GetCType_
PUBLIC	?GetFlags@C_Base@@QAEJXZ			; C_Base::GetFlags
PUBLIC	?GetClient@C_Base@@QAEFXZ			; C_Base::GetClient
PUBLIC	?GetX@C_Base@@QAEJXZ				; C_Base::GetX
PUBLIC	?GetY@C_Base@@QAEJXZ				; C_Base::GetY
PUBLIC	?GetW@C_Base@@QAEJXZ				; C_Base::GetW
PUBLIC	?GetH@C_Base@@QAEJXZ				; C_Base::GetH
PUBLIC	?GetRelX@C_Base@@UAEJXZ				; C_Base::GetRelX
PUBLIC	?GetRelY@C_Base@@UAEJXZ				; C_Base::GetRelY
PUBLIC	?Ready@C_Base@@QAEFXZ				; C_Base::Ready
PUBLIC	?GetState@C_Base@@UAEFXZ			; C_Base::GetState
PUBLIC	?GetHotKey@C_Base@@UAEFXZ			; C_Base::GetHotKey
PUBLIC	?GetMenu@C_Base@@UAEJXZ				; C_Base::GetMenu
PUBLIC	?GetFont@C_Base@@UAEJXZ				; C_Base::GetFont
PUBLIC	?GetHelpText@C_Base@@UAEJXZ			; C_Base::GetHelpText
PUBLIC	?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z		; C_Base::GetSound
PUBLIC	?GetMouseOver@C_Base@@UAEFXZ			; C_Base::GetMouseOver
PUBLIC	?GetCursorID@C_Base@@UAEJXZ			; C_Base::GetCursorID
PUBLIC	?GetDragCursorID@C_Base@@UAEJXZ			; C_Base::GetDragCursorID
PUBLIC	?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ		; C_Base::GetCallback
PUBLIC	?IsBase@C_Base@@UAEHXZ				; C_Base::IsBase
PUBLIC	?IsControl@C_Base@@UAEHXZ			; C_Base::IsControl
PUBLIC	?Refresh@C_Base@@UAEXXZ				; C_Base::Refresh
PUBLIC	?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z	; C_Base::Draw
PUBLIC	?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ; C_Base::HighLite
PUBLIC	?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z	; C_Base::SetSubParents
PUBLIC	?Cleanup@C_Base@@UAEXXZ				; C_Base::Cleanup
PUBLIC	?TimerUpdate@C_Base@@UAEHXZ			; C_Base::TimerUpdate
PUBLIC	?Activate@C_Base@@UAEXXZ			; C_Base::Activate
PUBLIC	?Deactivate@C_Base@@UAEXXZ			; C_Base::Deactivate
PUBLIC	?CheckHotSpots@C_Base@@UAEJJJ@Z			; C_Base::CheckHotSpots
PUBLIC	?CheckKeyboard@C_Base@@UAEHEEEJ@Z		; C_Base::CheckKeyboard
PUBLIC	?Process@C_Base@@UAEHJF@Z			; C_Base::Process
PUBLIC	?CloseWindow@C_Base@@UAEHXZ			; C_Base::CloseWindow
PUBLIC	?MouseOver@C_Base@@UAEHJJPAV1@@Z		; C_Base::MouseOver
PUBLIC	?GetMe@C_Base@@UAEPAV1@XZ			; C_Base::GetMe
PUBLIC	?Dragable@C_Base@@UAEHJ@Z			; C_Base::Dragable
PUBLIC	?GetItemXY@C_Base@@UAEXJPAJ0@Z			; C_Base::GetItemXY
PUBLIC	?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z	; C_Base::Drag
PUBLIC	?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z	; C_Base::Drop
PUBLIC	?Wheel@C_Base@@UAEHHGG@Z			; C_Base::Wheel
PUBLIC	?LocalFind@C_Base@@UAEFPAD@Z			; C_Base::LocalFind
PUBLIC	?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z ; C_Base::LocalFunction
PUBLIC	?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z	; C_Base::SaveText
PUBLIC	??_GC_Base@@UAEPAXI@Z				; C_Base::`scalar deleting destructor'
PUBLIC	??1C_Control@@UAE@XZ				; C_Control::~C_Control
PUBLIC	?SetRelX@C_Control@@UAEXJ@Z			; C_Control::SetRelX
PUBLIC	?SetRelY@C_Control@@UAEXJ@Z			; C_Control::SetRelY
PUBLIC	?SetRelXY@C_Control@@UAEXJJ@Z			; C_Control::SetRelXY
PUBLIC	?SetCursorID@C_Control@@UAEXJ@Z			; C_Control::SetCursorID
PUBLIC	?SetDragCursorID@C_Control@@UAEXJ@Z		; C_Control::SetDragCursorID
PUBLIC	?SetMenu@C_Control@@UAEXJ@Z			; C_Control::SetMenu
PUBLIC	?SetHelpText@C_Control@@UAEXJ@Z			; C_Control::SetHelpText
PUBLIC	?SetHotKey@C_Control@@UAEXF@Z			; C_Control::SetHotKey
PUBLIC	?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z ; C_Control::SetCallback
PUBLIC	?SetMouseOver@C_Control@@UAEXF@Z		; C_Control::SetMouseOver
PUBLIC	?SetMouseOverColor@C_Control@@UAEXK@Z		; C_Control::SetMouseOverColor
PUBLIC	?SetMouseOverPerc@C_Control@@UAEXF@Z		; C_Control::SetMouseOverPerc
PUBLIC	?IsBase@C_Control@@UAEHXZ			; C_Control::IsBase
PUBLIC	?IsControl@C_Control@@UAEHXZ			; C_Control::IsControl
PUBLIC	?GetRelX@C_Control@@UAEJXZ			; C_Control::GetRelX
PUBLIC	?GetRelY@C_Control@@UAEJXZ			; C_Control::GetRelY
PUBLIC	?GetCursorID@C_Control@@UAEJXZ			; C_Control::GetCursorID
PUBLIC	?GetDragCursorID@C_Control@@UAEJXZ		; C_Control::GetDragCursorID
PUBLIC	?GetMenu@C_Control@@UAEJXZ			; C_Control::GetMenu
PUBLIC	?GetHelpText@C_Control@@UAEJXZ			; C_Control::GetHelpText
PUBLIC	?GetHotKey@C_Control@@UAEFXZ			; C_Control::GetHotKey
PUBLIC	?GetMouseOver@C_Control@@UAEFXZ			; C_Control::GetMouseOver
PUBLIC	?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ ; C_Control::GetCallback
PUBLIC	??_GC_Control@@UAEPAXI@Z			; C_Control::`scalar deleting destructor'
PUBLIC	?CalculateTreePositions@C_TreeList@@IAEJPAVTREELIST@@JJ@Z ; C_TreeList::CalculateTreePositions
PUBLIC	?DrawBranch@C_TreeList@@IAEXPAVSCREEN@@PAVTREELIST@@PAUUI95_RECT@@@Z ; C_TreeList::DrawBranch
PUBLIC	?CheckBranch@C_TreeList@@IAEPAVTREELIST@@PAV2@JJ@Z ; C_TreeList::CheckBranch
PUBLIC	?FindItemWithCB@C_TreeList@@IAEPAVTREELIST@@PAV2@@Z ; C_TreeList::FindItemWithCB
PUBLIC	?SetControlParents@C_TreeList@@IAEXPAVTREELIST@@@Z ; C_TreeList::SetControlParents
PUBLIC	?Add@C_TreeList@@IAEXPAVTREELIST@@0@Z		; C_TreeList::Add
PUBLIC	?AddChild@C_TreeList@@IAEXPAVTREELIST@@0@Z	; C_TreeList::AddChild
PUBLIC	??0C_TreeList@@QAE@XZ				; C_TreeList::C_TreeList
PUBLIC	??0C_TreeList@@QAE@PAPAD@Z			; C_TreeList::C_TreeList
PUBLIC	??0C_TreeList@@QAE@PAU_iobuf@@@Z		; C_TreeList::C_TreeList
PUBLIC	??1C_TreeList@@UAE@XZ				; C_TreeList::~C_TreeList
PUBLIC	?Size@C_TreeList@@QAEJXZ			; C_TreeList::Size
PUBLIC	?Setup@C_TreeList@@QAEXJF@Z			; C_TreeList::Setup
PUBLIC	?SetSortType@C_TreeList@@QAEXF@Z		; C_TreeList::SetSortType
PUBLIC	?SetImages@C_TreeList@@QAEXJJJ@Z		; C_TreeList::SetImages
PUBLIC	?SetXOffset@C_TreeList@@QAEXJ@Z			; C_TreeList::SetXOffset
PUBLIC	?SetMinYOffset@C_TreeList@@QAEXJ@Z		; C_TreeList::SetMinYOffset
PUBLIC	?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ; C_TreeList::CreateItem
PUBLIC	?FindVisible@C_TreeList@@QAEHPAVTREELIST@@@Z	; C_TreeList::FindVisible
PUBLIC	?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z	; C_TreeList::AddItem
PUBLIC	?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z	; C_TreeList::AddChildItem
PUBLIC	?DeleteItem@C_TreeList@@QAEXJ@Z			; C_TreeList::DeleteItem
PUBLIC	?DeleteItem@C_TreeList@@QAEXPAVTREELIST@@@Z	; C_TreeList::DeleteItem
PUBLIC	?DeleteBranch@C_TreeList@@QAEXPAVTREELIST@@@Z	; C_TreeList::DeleteBranch
PUBLIC	?ChangeItemID@C_TreeList@@QAEHPAVTREELIST@@J@Z	; C_TreeList::ChangeItemID
PUBLIC	?MoveChildItem@C_TreeList@@QAEXPAVTREELIST@@0@Z	; C_TreeList::MoveChildItem
PUBLIC	?GetMenu@C_TreeList@@UAEJXZ			; C_TreeList::GetMenu
PUBLIC	?Cleanup@C_TreeList@@UAEXXZ			; C_TreeList::Cleanup
PUBLIC	?SetDefaultFlags@C_TreeList@@QAEXXZ		; C_TreeList::SetDefaultFlags
PUBLIC	?SetFont@C_TreeList@@UAEXJ@Z			; C_TreeList::SetFont
PUBLIC	?GetFont@C_TreeList@@UAEJXZ			; C_TreeList::GetFont
PUBLIC	?RemoveOldBranch@C_TreeList@@QAEXJJPAVTREELIST@@@Z ; C_TreeList::RemoveOldBranch
PUBLIC	?RemoveOld@C_TreeList@@QAEXJJ@Z			; C_TreeList::RemoveOld
PUBLIC	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z		; C_TreeList::Find
PUBLIC	?FindOpen@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::FindOpen
PUBLIC	?GetNextBranch@C_TreeList@@QAEPAVTREELIST@@PAV2@@Z ; C_TreeList::GetNextBranch
PUBLIC	?GetChild@C_TreeList@@QAEPAVTREELIST@@PAV2@@Z	; C_TreeList::GetChild
PUBLIC	?SetItemState@C_TreeList@@QAEXJF@Z		; C_TreeList::SetItemState
PUBLIC	?ToggleItemState@C_TreeList@@QAEXJ@Z		; C_TreeList::ToggleItemState
PUBLIC	?ToggleItemState@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::ToggleItemState
PUBLIC	?SetAllBranches@C_TreeList@@QAEXJFPAVTREELIST@@@Z ; C_TreeList::SetAllBranches
PUBLIC	?ClearAllStates@C_TreeList@@QAEXJ@Z		; C_TreeList::ClearAllStates
PUBLIC	?SetAllControlStates@C_TreeList@@QAEXFPAVTREELIST@@@Z ; C_TreeList::SetAllControlStates
PUBLIC	?CheckHotSpots@C_TreeList@@UAEJJJ@Z		; C_TreeList::CheckHotSpots
PUBLIC	?Process@C_TreeList@@UAEHJF@Z			; C_TreeList::Process
PUBLIC	?Dragable@C_TreeList@@UAEHJ@Z			; C_TreeList::Dragable
PUBLIC	?RecalcSize@C_TreeList@@QAEXXZ			; C_TreeList::RecalcSize
PUBLIC	?Refresh@C_TreeList@@UAEXXZ			; C_TreeList::Refresh
PUBLIC	?Draw@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ; C_TreeList::Draw
PUBLIC	?MouseOver@C_TreeList@@UAEHJJPAVC_Base@@@Z	; C_TreeList::MouseOver
PUBLIC	?GetItemXY@C_TreeList@@UAEXJPAJ0@Z		; C_TreeList::GetItemXY
PUBLIC	?SetSubParents@C_TreeList@@UAEXPAVC_Window@@@Z	; C_TreeList::SetSubParents
PUBLIC	?HighLite@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ; C_TreeList::HighLite
PUBLIC	?ReorderBranch@C_TreeList@@QAEXPAVTREELIST@@@Z	; C_TreeList::ReorderBranch
PUBLIC	?Activate@C_TreeList@@UAEXXZ			; C_TreeList::Activate
PUBLIC	?Deactivate@C_TreeList@@UAEXXZ			; C_TreeList::Deactivate
PUBLIC	?GetMe@C_TreeList@@UAEPAVC_Base@@XZ		; C_TreeList::GetMe
PUBLIC	?CheckKeyboard@C_TreeList@@UAEHEEEJ@Z		; C_TreeList::CheckKeyboard
PUBLIC	?AddTextItem@C_TreeList@@QAEXJJJJJ@Z		; C_TreeList::AddTextItem
PUBLIC	?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z		; C_TreeList::AddTextItem
PUBLIC	?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z	; C_TreeList::AddWordWrapItem
PUBLIC	?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z		; C_TreeList::AddBitmapItem
PUBLIC	?AddHelpItem@C_TreeList@@QAEXJJJ@Z		; C_TreeList::AddHelpItem
PUBLIC	?SetHelpItemImage@C_TreeList@@QAEXJJJJ@Z	; C_TreeList::SetHelpItemImage
PUBLIC	?SetHelpItemText@C_TreeList@@QAEXJJJJJJ@Z	; C_TreeList::SetHelpItemText
PUBLIC	?SetHelpFlagOn@C_TreeList@@QAEXJJ@Z		; C_TreeList::SetHelpFlagOn
PUBLIC	?SetHelpFlagOff@C_TreeList@@QAEXJJ@Z		; C_TreeList::SetHelpFlagOff
PUBLIC	?SetHelpItemFont@C_TreeList@@QAEXJJ@Z		; C_TreeList::SetHelpItemFont
PUBLIC	?LocalFind@C_TreeList@@UAEFPAD@Z		; C_TreeList::LocalFind
PUBLIC	?LocalFunction@C_TreeList@@UAEXFQAJPADPAVC_Handler@@@Z ; C_TreeList::LocalFunction
PUBLIC	?SaveText@C_TreeList@@UAEXPAXPAVC_Parser@@@Z	; C_TreeList::SaveText
PUBLIC	??_GC_TreeList@@UAEPAXI@Z			; C_TreeList::`scalar deleting destructor'
PUBLIC	?SetFgColor@C_Help@@QAEXK@Z			; C_Help::SetFgColor
PUBLIC	?GetX@C_Window@@QAEFXZ				; C_Window::GetX
PUBLIC	?GetY@C_Window@@QAEFXZ				; C_Window::GetY
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7C_Base@@6B@					; C_Base::`vftable'
PUBLIC	??_7C_Control@@6B@				; C_Control::`vftable'
PUBLIC	??_7C_TreeList@@6B@				; C_TreeList::`vftable'
PUBLIC	??_C@_07EFBCKMKG@Hidi?5Ho?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_Base@@6B@				; C_Base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_Base@@@8				; C_Base `RTTI Type Descriptor'
PUBLIC	??_R3C_Base@@8					; C_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Base@@8					; C_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_Base@@8				; C_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_Control@@6B@				; C_Control::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_Control@@@8				; C_Control `RTTI Type Descriptor'
PUBLIC	??_R3C_Control@@8				; C_Control::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Control@@8				; C_Control::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_Control@@8			; C_Control::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_TreeList@@6B@				; C_TreeList::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_TreeList@@@8				; C_TreeList `RTTI Type Descriptor'
PUBLIC	??_R3C_TreeList@@8				; C_TreeList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_TreeList@@8				; C_TreeList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_TreeList@@8			; C_TreeList::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strnicmp:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	??0C_Hash@@QAE@XZ:PROC				; C_Hash::C_Hash
EXTRN	??1C_Hash@@QAE@XZ:PROC				; C_Hash::~C_Hash
EXTRN	?Setup@C_Hash@@QAEXJ@Z:PROC			; C_Hash::Setup
EXTRN	?Cleanup@C_Hash@@QAEXXZ:PROC			; C_Hash::Cleanup
EXTRN	?Find@C_Hash@@QAEPAXJ@Z:PROC			; C_Hash::Find
EXTRN	?Add@C_Hash@@QAEXJPAX@Z:PROC			; C_Hash::Add
EXTRN	?Remove@C_Hash@@QAEXJ@Z:PROC			; C_Hash::Remove
EXTRN	?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z:PROC	; IMAGE_RSC::Blit
EXTRN	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z:PROC	; C_Image::GetImage
EXTRN	?PlaySoundA@C_Sound@@QAEHPAVSOUND_RES@@@Z:PROC	; C_Sound::PlaySoundA
EXTRN	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z:PROC ; UI_Enter
EXTRN	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z:PROC	; UI_Leave
EXTRN	?GetUserNumber@C_Base@@QAEJJ@Z:PROC		; C_Base::GetUserNumber
EXTRN	??_EC_Base@@UAEPAXI@Z:PROC			; C_Base::`vector deleting destructor'
EXTRN	??0C_Control@@QAE@XZ:PROC			; C_Control::C_Control
EXTRN	??0C_Control@@QAE@PAPAD@Z:PROC			; C_Control::C_Control
EXTRN	??0C_Control@@QAE@PAU_iobuf@@@Z:PROC		; C_Control::C_Control
EXTRN	?MouseOver@C_Control@@UAEHJJPAVC_Base@@@Z:PROC	; C_Control::MouseOver
EXTRN	?SetSound@C_Control@@UAEXJF@Z:PROC		; C_Control::SetSound
EXTRN	?HighLite@C_Control@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z:PROC ; C_Control::HighLite
EXTRN	?GetSound@C_Control@@UAEPAVSOUND_RES@@F@Z:PROC	; C_Control::GetSound
EXTRN	??_EC_Control@@UAEPAXI@Z:PROC			; C_Control::`vector deleting destructor'
EXTRN	??0C_Bitmap@@QAE@XZ:PROC			; C_Bitmap::C_Bitmap
EXTRN	?Setup@C_Bitmap@@QAEXJFJ@Z:PROC			; C_Bitmap::Setup
EXTRN	??_EC_TreeList@@UAEPAXI@Z:PROC			; C_TreeList::`vector deleting destructor'
EXTRN	??0C_Text@@QAE@XZ:PROC				; C_Text::C_Text
EXTRN	?SetFGColor@C_Text@@QAEXK@Z:PROC		; C_Text::SetFGColor
EXTRN	??0C_Help@@QAE@XZ:PROC				; C_Help::C_Help
EXTRN	?Setup@C_Help@@QAEXJF@Z:PROC			; C_Help::Setup
EXTRN	?SetImage@C_Help@@QAEXJJJ@Z:PROC		; C_Help::SetImage
EXTRN	?SetText@C_Help@@QAEXJJJJ@Z:PROC		; C_Help::SetText
EXTRN	?ScanClientArea@C_Window@@QAEXJ@Z:PROC		; C_Window::ScanClientArea
EXTRN	?DeactivateControl@C_Window@@QAEXXZ:PROC	; C_Window::DeactivateControl
EXTRN	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z:PROC	; C_Window::SetUpdateRect
EXTRN	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z:PROC ; C_Window::ClipToArea
EXTRN	?InsideClientHeight@C_Window@@QAEHJJJ@Z:PROC	; C_Window::InsideClientHeight
EXTRN	?BlitTranslucent@C_Window@@QAEXPAVSCREEN@@KJPAUUI95_RECT@@JJ@Z:PROC ; C_Window::BlitTranslucent
EXTRN	?RemovingControl@C_Window@@QAEXPAVC_Base@@@Z:PROC ; C_Window::RemovingControl
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gImageMgr@@3PAVC_Image@@A:DWORD		; gImageMgr
EXTRN	?gSoundMgr@@3PAVC_Sound@@A:DWORD		; gSoundMgr
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@C_TreeList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_TreeList@@8 DD FLAT:??_R0?AVC_TreeList@@@8 ; C_TreeList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_TreeList@@8
rdata$r	ENDS
;	COMDAT ??_R2C_TreeList@@8
rdata$r	SEGMENT
??_R2C_TreeList@@8 DD FLAT:??_R1A@?0A@EA@C_TreeList@@8	; C_TreeList::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@C_Control@@8
	DD	FLAT:??_R1A@?0A@EA@C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R3C_TreeList@@8
rdata$r	SEGMENT
??_R3C_TreeList@@8 DD 00H				; C_TreeList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2C_TreeList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_TreeList@@@8
_DATA	SEGMENT
??_R0?AVC_TreeList@@@8 DD FLAT:??_7type_info@@6B@	; C_TreeList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_TreeList@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_TreeList@@6B@
rdata$r	SEGMENT
??_R4C_TreeList@@6B@ DD 00H				; C_TreeList::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_TreeList@@@8
	DD	FLAT:??_R3C_TreeList@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Control@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Control@@8 DD FLAT:??_R0?AVC_Control@@@8 ; C_Control::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Control@@8
rdata$r	ENDS
;	COMDAT ??_R2C_Control@@8
rdata$r	SEGMENT
??_R2C_Control@@8 DD FLAT:??_R1A@?0A@EA@C_Control@@8	; C_Control::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R3C_Control@@8
rdata$r	SEGMENT
??_R3C_Control@@8 DD 00H				; C_Control::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2C_Control@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Control@@@8
_DATA	SEGMENT
??_R0?AVC_Control@@@8 DD FLAT:??_7type_info@@6B@	; C_Control `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Control@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_Control@@6B@
rdata$r	SEGMENT
??_R4C_Control@@6B@ DD 00H				; C_Control::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_Control@@@8
	DD	FLAT:??_R3C_Control@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Base@@8 DD FLAT:??_R0?AVC_Base@@@8	; C_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2C_Base@@8
rdata$r	SEGMENT
??_R2C_Base@@8 DD FLAT:??_R1A@?0A@EA@C_Base@@8		; C_Base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3C_Base@@8
rdata$r	SEGMENT
??_R3C_Base@@8 DD 00H					; C_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Base@@@8
_DATA	SEGMENT
??_R0?AVC_Base@@@8 DD FLAT:??_7type_info@@6B@		; C_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_Base@@6B@
rdata$r	SEGMENT
??_R4C_Base@@6B@ DD 00H					; C_Base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_Base@@@8
	DD	FLAT:??_R3C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFBCKMKG@Hidi?5Ho?$AA@
CONST	SEGMENT
??_C@_07EFBCKMKG@Hidi?5Ho?$AA@ DB 'Hidi Ho', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7C_TreeList@@6B@
CONST	SEGMENT
??_7C_TreeList@@6B@ DD FLAT:??_R4C_TreeList@@6B@	; C_TreeList::`vftable'
	DD	FLAT:??_EC_TreeList@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Control@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Control@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Control@@UAEXJ@Z
	DD	FLAT:?SetFont@C_TreeList@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Control@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Control@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Control@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Control@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Control@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z
	DD	FLAT:?GetRelX@C_Control@@UAEJXZ
	DD	FLAT:?GetRelY@C_Control@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Control@@UAEFXZ
	DD	FLAT:?GetMenu@C_TreeList@@UAEJXZ
	DD	FLAT:?GetFont@C_TreeList@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Control@@UAEJXZ
	DD	FLAT:?GetSound@C_Control@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Control@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ
	DD	FLAT:?IsBase@C_Control@@UAEHXZ
	DD	FLAT:?IsControl@C_Control@@UAEHXZ
	DD	FLAT:?Refresh@C_TreeList@@UAEXXZ
	DD	FLAT:?Draw@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_TreeList@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_TreeList@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Base@@UAEHXZ
	DD	FLAT:?Activate@C_TreeList@@UAEXXZ
	DD	FLAT:?Deactivate@C_TreeList@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_TreeList@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_TreeList@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_TreeList@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_TreeList@@UAEHJJPAVC_Base@@@Z
	DD	FLAT:?GetMe@C_TreeList@@UAEPAVC_Base@@XZ
	DD	FLAT:?Dragable@C_TreeList@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_TreeList@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_TreeList@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_TreeList@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_TreeList@@UAEXPAXPAVC_Parser@@@Z
CONST	ENDS
;	COMDAT ??_7C_Control@@6B@
CONST	SEGMENT
??_7C_Control@@6B@ DD FLAT:??_R4C_Control@@6B@		; C_Control::`vftable'
	DD	FLAT:??_EC_Control@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Control@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Control@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Control@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Control@@UAEXJ@Z
	DD	FLAT:?SetFont@C_Base@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Control@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Control@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Control@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Control@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Control@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Control@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z
	DD	FLAT:?GetRelX@C_Control@@UAEJXZ
	DD	FLAT:?GetRelY@C_Control@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Control@@UAEFXZ
	DD	FLAT:?GetMenu@C_Control@@UAEJXZ
	DD	FLAT:?GetFont@C_Base@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Control@@UAEJXZ
	DD	FLAT:?GetSound@C_Control@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Control@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Control@@UAEJXZ
	DD	FLAT:?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ
	DD	FLAT:?IsBase@C_Control@@UAEHXZ
	DD	FLAT:?IsControl@C_Control@@UAEHXZ
	DD	FLAT:?Refresh@C_Base@@UAEXXZ
	DD	FLAT:?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_Control@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_Base@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Base@@UAEHXZ
	DD	FLAT:?Activate@C_Base@@UAEXXZ
	DD	FLAT:?Deactivate@C_Base@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_Base@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_Base@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_Base@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_Control@@UAEHJJPAVC_Base@@@Z
	DD	FLAT:?GetMe@C_Base@@UAEPAV1@XZ
	DD	FLAT:?Dragable@C_Base@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_Base@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_Base@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
CONST	ENDS
;	COMDAT ??_7C_Base@@6B@
CONST	SEGMENT
??_7C_Base@@6B@ DD FLAT:??_R4C_Base@@6B@		; C_Base::`vftable'
	DD	FLAT:??_EC_Base@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Base@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFont@C_Base@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Base@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Base@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Base@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Base@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Base@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Base@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Base@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z
	DD	FLAT:?GetRelX@C_Base@@UAEJXZ
	DD	FLAT:?GetRelY@C_Base@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Base@@UAEFXZ
	DD	FLAT:?GetMenu@C_Base@@UAEJXZ
	DD	FLAT:?GetFont@C_Base@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Base@@UAEJXZ
	DD	FLAT:?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Base@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Base@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Base@@UAEJXZ
	DD	FLAT:?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ
	DD	FLAT:?IsBase@C_Base@@UAEHXZ
	DD	FLAT:?IsControl@C_Base@@UAEHXZ
	DD	FLAT:?Refresh@C_Base@@UAEXXZ
	DD	FLAT:?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_Base@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Base@@UAEHXZ
	DD	FLAT:?Activate@C_Base@@UAEXXZ
	DD	FLAT:?Deactivate@C_Base@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_Base@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_Base@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_Base@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_Base@@UAEHJJPAV1@@Z
	DD	FLAT:?GetMe@C_Base@@UAEPAV1@XZ
	DD	FLAT:?Dragable@C_Base@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_Base@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_Base@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?AddHelpItem@C_TreeList@@QAEXJJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddHelpItem@C_TreeList@@QAEXJJJ@Z$0
__unwindtable$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z$0
__unwindtable$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z$0
__unwindtable$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z$0
__unwindtable$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z$0
__unwindtable$?Setup@C_TreeList@@QAEXJF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@C_TreeList@@QAEXJF@Z$0
__unwindtable$??1C_TreeList@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1C_TreeList@@UAE@XZ$0
__unwindtable$??0C_TreeList@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0C_TreeList@@QAE@XZ$0
__ehfuncinfo$?AddHelpItem@C_TreeList@@QAEXJJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddHelpItem@C_TreeList@@QAEXJJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@C_TreeList@@QAEXJF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Setup@C_TreeList@@QAEXJF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1C_TreeList@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1C_TreeList@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0C_TreeList@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0C_TreeList@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1C_Control@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1C_Control@@UAE@XZ$0
__ehfuncinfo$??1C_Control@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1C_Control@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetY@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Window@@QAEFXZ PROC				; C_Window::GetY, COMDAT
; _this$ = ecx

; 311  : 		short GetY() { return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+430]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Window@@QAEFXZ ENDP				; C_Window::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetX@C_Window@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Window@@QAEFXZ PROC				; C_Window::GetX, COMDAT
; _this$ = ecx

; 310  : 		short GetX() { return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+428]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Window@@QAEFXZ ENDP				; C_Window::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chelp.h
;	COMDAT ?SetFgColor@C_Help@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetFgColor@C_Help@@QAEXK@Z PROC			; C_Help::SetFgColor, COMDAT
; _this$ = ecx

; 38   : 		void SetFgColor(COLORREF color) { FgColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+104], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFgColor@C_Help@@QAEXK@Z ENDP			; C_Help::SetFgColor
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_TreeList@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_TreeList@@UAEPAXI@Z PROC				; C_TreeList::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_TreeList@@UAE@XZ			; C_TreeList::~C_TreeList
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_TreeList@@UAEPAXI@Z ENDP				; C_TreeList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?SaveText@C_TreeList@@UAEXPAXPAVC_Parser@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SaveText@C_TreeList@@UAEXPAXPAVC_Parser@@@Z PROC	; C_TreeList::SaveText, COMDAT
; _this$ = ecx

; 161  : 		void SaveText(HANDLE ,C_Parser *)	{ ; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SaveText@C_TreeList@@UAEXPAXPAVC_Parser@@@Z ENDP	; C_TreeList::SaveText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 2
_P$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?LocalFunction@C_TreeList@@UAEXFQAJPADPAVC_Handler@@@Z PROC ; C_TreeList::LocalFunction
; _this$ = ecx

; 1440 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1441 : 	switch(ID)

	movsx	eax, WORD PTR _ID$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 13			; 0000000dH
	ja	$LN17@LocalFunct
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN19@LocalFunct[edx*4]
$LN14@LocalFunct:

; 1442 : 	{
; 1443 : 		case CTL_SETUP:
; 1444 : 			Setup(P[0],(short)P[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@C_TreeList@@QAEXJF@Z		; C_TreeList::Setup

; 1445 : 			break;

	jmp	$LN17@LocalFunct
$LN13@LocalFunct:

; 1446 : 		case CTL_SETXOFFSET:
; 1447 : 			SetXOffset((long)P[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetXOffset@C_TreeList@@QAEXJ@Z		; C_TreeList::SetXOffset

; 1448 : 			break;

	jmp	$LN17@LocalFunct
$LN12@LocalFunct:

; 1449 : 		case CTL_SETYOFFSET:
; 1450 : 			SetMinYOffset((long)P[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMinYOffset@C_TreeList@@QAEXJ@Z	; C_TreeList::SetMinYOffset

; 1451 : 			break;

	jmp	$LN17@LocalFunct
$LN11@LocalFunct:

; 1452 : 		case CTL_SETIMAGES:
; 1453 : 			SetImages(P[0],P[1],P[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetImages@C_TreeList@@QAEXJJJ@Z	; C_TreeList::SetImages

; 1454 : 			break;

	jmp	$LN17@LocalFunct
$LN10@LocalFunct:

; 1455 : 		case CTL_SETSORT:
; 1456 : 			SetSortType((short)P[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSortType@C_TreeList@@QAEXF@Z	; C_TreeList::SetSortType

; 1457 : 			break;

	jmp	$LN17@LocalFunct
$LN9@LocalFunct:

; 1458 : 		case CTL_ADDTEXTITEM:
; 1459 : 			AddTextItem(P[0],P[1],P[2],P[3],P[4]|(P[5] << 8)|(P[6]<<16));

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	shl	ecx, 8
	mov	edx, DWORD PTR _P$[ebp]
	or	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	eax, 6
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	push	ecx
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddTextItem@C_TreeList@@QAEXJJJJJ@Z	; C_TreeList::AddTextItem

; 1460 : 			break;

	jmp	$LN17@LocalFunct
$LN8@LocalFunct:

; 1461 : 		case CTL_ADDBITMAPITEM:
; 1462 : 			AddBitmapItem(P[0],P[1],P[2],P[3]);

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z	; C_TreeList::AddBitmapItem

; 1463 : 			break;

	jmp	$LN17@LocalFunct
$LN7@LocalFunct:

; 1464 : 		case CTL_ADDHELPITEM:
; 1465 : 			AddHelpItem(P[0],P[1],P[2]);

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddHelpItem@C_TreeList@@QAEXJJJ@Z	; C_TreeList::AddHelpItem

; 1466 : 			break;

	jmp	$LN17@LocalFunct
$LN6@LocalFunct:

; 1467 : 		case CTL_HELPITEMIMAGE:
; 1468 : 			SetHelpItemImage(P[0],P[1],P[2],P[3]);

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHelpItemImage@C_TreeList@@QAEXJJJJ@Z ; C_TreeList::SetHelpItemImage

; 1469 : 			break;

	jmp	$LN17@LocalFunct
$LN5@LocalFunct:

; 1470 : 		case CTL_HELPITEMTEXT:
; 1471 : 			SetHelpItemText(P[0],P[1],P[2],P[3],P[4],P[5]|(P[6] << 8)|(P[7]<<16));

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	shl	edx, 8
	mov	eax, DWORD PTR _P$[ebp]
	or	edx, DWORD PTR [eax+ecx]
	mov	ecx, 4
	imul	ecx, 7
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	push	edx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHelpItemText@C_TreeList@@QAEXJJJJJJ@Z ; C_TreeList::SetHelpItemText

; 1472 : 			break;

	jmp	$LN17@LocalFunct
$LN4@LocalFunct:

; 1473 : 		case CTL_HELPITEMFONT:
; 1474 : 			SetHelpItemFont(P[0],P[1]);

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHelpItemFont@C_TreeList@@QAEXJJ@Z	; C_TreeList::SetHelpItemFont

; 1475 : 			break;

	jmp	$LN17@LocalFunct
$LN3@LocalFunct:

; 1476 : 		case CTL_HELPITEMFLAGON:
; 1477 : 			SetHelpFlagOn(P[0],P[1]);

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHelpFlagOn@C_TreeList@@QAEXJJ@Z	; C_TreeList::SetHelpFlagOn

; 1478 : 			break;

	jmp	$LN17@LocalFunct
$LN2@LocalFunct:

; 1479 : 		case CTL_HELPITEMFLAGOFF:
; 1480 : 			SetHelpFlagOff(P[0],P[1]);

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _P$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHelpFlagOff@C_TreeList@@QAEXJJ@Z	; C_TreeList::SetHelpFlagOff

; 1481 : 			break;

	jmp	$LN17@LocalFunct
$LN1@LocalFunct:

; 1482 : 		case CTL_ADDWORDWRAPITEM:
; 1483 : 			AddWordWrapItem(P[0],P[1],P[2],P[3],(long)P[4],P[5]|(P[6] << 8)|(P[7]<<16));

	mov	edx, 4
	imul	edx, 5
	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _P$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	shl	eax, 8
	mov	ecx, DWORD PTR _P$[ebp]
	or	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	edx, 7
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	or	eax, edx
	push	eax
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _P$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z ; C_TreeList::AddWordWrapItem
$LN17@LocalFunct:

; 1484 : 			break;
; 1485 : 	}
; 1486 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN19@LocalFunct:
	DD	$LN14@LocalFunct
	DD	$LN13@LocalFunct
	DD	$LN12@LocalFunct
	DD	$LN11@LocalFunct
	DD	$LN10@LocalFunct
	DD	$LN9@LocalFunct
	DD	$LN8@LocalFunct
	DD	$LN7@LocalFunct
	DD	$LN6@LocalFunct
	DD	$LN5@LocalFunct
	DD	$LN4@LocalFunct
	DD	$LN3@LocalFunct
	DD	$LN2@LocalFunct
	DD	$LN1@LocalFunct
?LocalFunction@C_TreeList@@UAEXFQAJPADPAVC_Handler@@@Z ENDP ; C_TreeList::LocalFunction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
_token$ = 8						; size = 4
?LocalFind@C_TreeList@@UAEFPAD@Z PROC			; C_TreeList::LocalFind
; _this$ = ecx

; 1427 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1428 : 	short i=0;

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
$LN3@LocalFind:

; 1429 : 
; 1430 : 	while(C_Tl_Tokens[i])

	movsx	ecx, WORD PTR _i$[ebp]
	cmp	DWORD PTR ?C_Tl_Tokens@@3PAPADA[ecx*4], 0
	je	SHORT $LN2@LocalFind

; 1431 : 	{
; 1432 : 		if(strnicmp(token,C_Tl_Tokens[i],strlen(C_Tl_Tokens[i])) == 0)

	movsx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?C_Tl_Tokens@@3PAPADA[edx*4]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	movsx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?C_Tl_Tokens@@3PAPADA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@LocalFind

; 1433 : 			return(i);

	mov	ax, WORD PTR _i$[ebp]
	jmp	SHORT $LN4@LocalFind
$LN1@LocalFind:

; 1434 : 		i++;

	mov	cx, WORD PTR _i$[ebp]
	add	cx, 1
	mov	WORD PTR _i$[ebp], cx

; 1435 : 	}

	jmp	SHORT $LN3@LocalFind
$LN2@LocalFind:

; 1436 : 	return(0);

	xor	eax, eax
$LN4@LocalFind:

; 1437 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LocalFind@C_TreeList@@UAEFPAD@Z ENDP			; C_TreeList::LocalFind
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_ID$ = 8						; size = 4
_FontID$ = 12						; size = 4
?SetHelpItemFont@C_TreeList@@QAEXJJ@Z PROC		; C_TreeList::SetHelpItemFont
; _this$ = ecx

; 1412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1413 : 	TREELIST *item;
; 1414 : 
; 1415 : 	item=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 1416 : 	if(item && item->Item_)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN3@SetHelpIte
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN3@SetHelpIte

; 1417 : 	{
; 1418 : 		if(item->Item_->_GetCType_() == _CNTL_HELP_)

	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?_GetCType_@C_Base@@QAEFXZ		; C_Base::_GetCType_
	cwde
	cmp	eax, 16419				; 00004023H
	jne	SHORT $LN3@SetHelpIte

; 1419 : 		{
; 1420 : 			item->Item_->SetFont(FontID);

	mov	ecx, DWORD PTR _FontID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN3@SetHelpIte:

; 1421 : 		}
; 1422 : 	}
; 1423 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetHelpItemFont@C_TreeList@@QAEXJJ@Z ENDP		; C_TreeList::SetHelpItemFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_ID$ = 8						; size = 4
_Flag$ = 12						; size = 4
?SetHelpFlagOff@C_TreeList@@QAEXJJ@Z PROC		; C_TreeList::SetHelpFlagOff
; _this$ = ecx

; 1398 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1399 : 	TREELIST *item;
; 1400 : 
; 1401 : 	item=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 1402 : 	if(item && item->Item_)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN3@SetHelpFla
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN3@SetHelpFla

; 1403 : 	{
; 1404 : 		if(item->Item_->_GetCType_() == _CNTL_HELP_)

	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?_GetCType_@C_Base@@QAEFXZ		; C_Base::_GetCType_
	cwde
	cmp	eax, 16419				; 00004023H
	jne	SHORT $LN3@SetHelpFla

; 1405 : 		{
; 1406 : 			item->Item_->SetFlagBitOff(Flag);

	mov	ecx, DWORD PTR _Flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN3@SetHelpFla:

; 1407 : 		}
; 1408 : 	}
; 1409 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetHelpFlagOff@C_TreeList@@QAEXJJ@Z ENDP		; C_TreeList::SetHelpFlagOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_ID$ = 8						; size = 4
_Flag$ = 12						; size = 4
?SetHelpFlagOn@C_TreeList@@QAEXJJ@Z PROC		; C_TreeList::SetHelpFlagOn
; _this$ = ecx

; 1384 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1385 : 	TREELIST *item;
; 1386 : 
; 1387 : 	item=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 1388 : 	if(item && item->Item_)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN3@SetHelpFla
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN3@SetHelpFla

; 1389 : 	{
; 1390 : 		if(item->Item_->_GetCType_() == _CNTL_HELP_)

	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?_GetCType_@C_Base@@QAEFXZ		; C_Base::_GetCType_
	cwde
	cmp	eax, 16419				; 00004023H
	jne	SHORT $LN3@SetHelpFla

; 1391 : 		{
; 1392 : 			item->Item_->SetFlagBitOn(Flag);

	mov	ecx, DWORD PTR _Flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN3@SetHelpFla:

; 1393 : 		}
; 1394 : 	}
; 1395 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetHelpFlagOn@C_TreeList@@QAEXJJ@Z ENDP		; C_TreeList::SetHelpFlagOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_ID$ = 8						; size = 4
_TextID$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_w$ = 24						; size = 4
_color$ = 28						; size = 4
?SetHelpItemText@C_TreeList@@QAEXJJJJJJ@Z PROC		; C_TreeList::SetHelpItemText
; _this$ = ecx

; 1369 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1370 : 	TREELIST *item;
; 1371 : 
; 1372 : 	item=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 1373 : 	if(item && item->Item_)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN3@SetHelpIte
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN3@SetHelpIte

; 1374 : 	{
; 1375 : 		if(item->Item_->_GetCType_() == _CNTL_HELP_)

	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?_GetCType_@C_Base@@QAEFXZ		; C_Base::_GetCType_
	cwde
	cmp	eax, 16419				; 00004023H
	jne	SHORT $LN3@SetHelpIte

; 1376 : 		{
; 1377 : 			((C_Help*)item->Item_)->SetText(x,y,w,TextID);

	mov	ecx, DWORD PTR _TextID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?SetText@C_Help@@QAEXJJJJ@Z		; C_Help::SetText

; 1378 : 			((C_Help*)item->Item_)->SetFgColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?SetFgColor@C_Help@@QAEXK@Z		; C_Help::SetFgColor
$LN3@SetHelpIte:

; 1379 : 		}
; 1380 : 	}
; 1381 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?SetHelpItemText@C_TreeList@@QAEXJJJJJJ@Z ENDP		; C_TreeList::SetHelpItemText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_ID$ = 8						; size = 4
_ImageID$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
?SetHelpItemImage@C_TreeList@@QAEXJJJJ@Z PROC		; C_TreeList::SetHelpItemImage
; _this$ = ecx

; 1355 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1356 : 	TREELIST *item;
; 1357 : 
; 1358 : 	item=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 1359 : 	if(item && item->Item_)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN3@SetHelpIte
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN3@SetHelpIte

; 1360 : 	{
; 1361 : 		if(item->Item_->_GetCType_() == _CNTL_HELP_)

	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?_GetCType_@C_Base@@QAEFXZ		; C_Base::_GetCType_
	cwde
	cmp	eax, 16419				; 00004023H
	jne	SHORT $LN3@SetHelpIte

; 1362 : 		{
; 1363 : 			((C_Help*)item->Item_)->SetImage(x,y,ImageID);

	mov	ecx, DWORD PTR _ImageID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?SetImage@C_Help@@QAEXJJJ@Z		; C_Help::SetImage
$LN3@SetHelpIte:

; 1364 : 		}
; 1365 : 	}
; 1366 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetHelpItemImage@C_TreeList@@QAEXJJJJ@Z ENDP		; C_TreeList::SetHelpItemImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv186 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
tv167 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
tv142 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
tv71 = -44						; size = 4
$T8 = -40						; size = 4
$T9 = -36						; size = 4
$T10 = -32						; size = 4
$T11 = -28						; size = 4
_item$ = -24						; size = 4
_this$ = -20						; size = 4
_hlp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_Type$ = 12						; size = 4
_ParentID$ = 16						; size = 4
?AddHelpItem@C_TreeList@@QAEXJJJ@Z PROC			; C_TreeList::AddHelpItem
; _this$ = ecx

; 1318 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddHelpItem@C_TreeList@@QAEXJJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1319 : 	C_Help *hlp;
; 1320 : 	TREELIST *item;
; 1321 : 
; 1322 : 	hlp=new C_Help;

	push	120					; 00000078H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AddHelpIte
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0C_Help@@QAE@XZ			; C_Help::C_Help
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@AddHelpIte
$LN9@AddHelpIte:
	mov	DWORD PTR tv71[ebp], 0
$LN10@AddHelpIte:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _hlp$[ebp], ecx

; 1323 : 	hlp->Setup(ID,C_TYPE_NORMAL);

	push	25					; 00000019H
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _hlp$[ebp]
	call	?Setup@C_Help@@QAEXJF@Z			; C_Help::Setup

; 1324 : 
; 1325 : 	item=CreateItem(ID,Type,hlp);

	mov	eax, DWORD PTR _hlp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ; C_TreeList::CreateItem
	mov	DWORD PTR _item$[ebp], eax

; 1326 : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	$LN6@AddHelpIte

; 1327 : 	{
; 1328 : 		if(ParentID)

	cmp	DWORD PTR _ParentID$[ebp], 0
	je	SHORT $LN5@AddHelpIte

; 1329 : 		{
; 1330 : 			if(!AddChildItem(Find(ParentID),item))

	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ParentID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddChildItem
	test	eax, eax
	jne	SHORT $LN4@AddHelpIte

; 1331 : 			{
; 1332 : 				hlp->Cleanup();

	mov	edx, DWORD PTR _hlp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hlp$[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx

; 1333 : 				delete hlp;

	mov	eax, DWORD PTR _hlp$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T11[ebp], ecx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@AddHelpIte
	push	1
	mov	edx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN12@AddHelpIte
$LN11@AddHelpIte:
	mov	DWORD PTR tv142[ebp], 0
$LN12@AddHelpIte:

; 1334 : 				delete item;

	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AddHelpIte:

; 1335 : 			}
; 1336 : 		}
; 1337 : 		else

	jmp	SHORT $LN3@AddHelpIte
$LN5@AddHelpIte:

; 1338 : 		{
; 1339 : 			if(!AddItem(Root_,item))

	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddItem
	test	eax, eax
	jne	SHORT $LN3@AddHelpIte

; 1340 : 			{
; 1341 : 				hlp->Cleanup();

	mov	edx, DWORD PTR _hlp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hlp$[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx

; 1342 : 				delete hlp;

	mov	eax, DWORD PTR _hlp$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@AddHelpIte
	push	1
	mov	edx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN14@AddHelpIte
$LN13@AddHelpIte:
	mov	DWORD PTR tv167[ebp], 0
$LN14@AddHelpIte:

; 1343 : 				delete item;

	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@AddHelpIte:

; 1344 : 			}
; 1345 : 		}
; 1346 : 	}
; 1347 : 	else

	jmp	SHORT $LN7@AddHelpIte
$LN6@AddHelpIte:

; 1348 : 	{
; 1349 : 		hlp->Cleanup();

	mov	edx, DWORD PTR _hlp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _hlp$[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx

; 1350 : 		delete hlp;

	mov	eax, DWORD PTR _hlp$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@AddHelpIte
	push	1
	mov	edx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN7@AddHelpIte
$LN15@AddHelpIte:
	mov	DWORD PTR tv186[ebp], 0
$LN7@AddHelpIte:

; 1351 : 	}
; 1352 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddHelpItem@C_TreeList@@QAEXJJJ@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddHelpItem@C_TreeList@@QAEXJJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddHelpItem@C_TreeList@@QAEXJJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddHelpItem@C_TreeList@@QAEXJJJ@Z ENDP			; C_TreeList::AddHelpItem
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv187 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
tv168 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
tv143 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
tv71 = -44						; size = 4
$T8 = -40						; size = 4
$T9 = -36						; size = 4
$T10 = -32						; size = 4
$T11 = -28						; size = 4
_item$ = -24						; size = 4
_this$ = -20						; size = 4
_bmp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_Type$ = 12						; size = 4
_ParentID$ = 16						; size = 4
_ImageID$ = 20						; size = 4
?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z PROC		; C_TreeList::AddBitmapItem
; _this$ = ecx

; 1281 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1282 : 	C_Bitmap *bmp;
; 1283 : 	TREELIST *item;
; 1284 : 
; 1285 : 	bmp=new C_Bitmap;

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AddBitmapI
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0C_Bitmap@@QAE@XZ			; C_Bitmap::C_Bitmap
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@AddBitmapI
$LN9@AddBitmapI:
	mov	DWORD PTR tv71[ebp], 0
$LN10@AddBitmapI:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _bmp$[ebp], ecx

; 1286 : 	bmp->Setup(ID,C_TYPE_NORMAL,ImageID);

	mov	edx, DWORD PTR _ImageID$[ebp]
	push	edx
	push	25					; 00000019H
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bmp$[ebp]
	call	?Setup@C_Bitmap@@QAEXJFJ@Z		; C_Bitmap::Setup

; 1287 : 
; 1288 : 	item=CreateItem(ID,Type,bmp);

	mov	ecx, DWORD PTR _bmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ; C_TreeList::CreateItem
	mov	DWORD PTR _item$[ebp], eax

; 1289 : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	$LN6@AddBitmapI

; 1290 : 	{
; 1291 : 		if(ParentID)

	cmp	DWORD PTR _ParentID$[ebp], 0
	je	SHORT $LN5@AddBitmapI

; 1292 : 		{
; 1293 : 			if(!AddChildItem(Find(ParentID),item))

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ParentID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddChildItem
	test	eax, eax
	jne	SHORT $LN4@AddBitmapI

; 1294 : 			{
; 1295 : 				bmp->Cleanup();

	mov	eax, DWORD PTR _bmp$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bmp$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1296 : 				delete bmp;

	mov	ecx, DWORD PTR _bmp$[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T11[ebp], edx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@AddBitmapI
	push	1
	mov	eax, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN12@AddBitmapI
$LN11@AddBitmapI:
	mov	DWORD PTR tv143[ebp], 0
$LN12@AddBitmapI:

; 1297 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AddBitmapI:

; 1298 : 			}
; 1299 : 		}
; 1300 : 		else

	jmp	SHORT $LN3@AddBitmapI
$LN5@AddBitmapI:

; 1301 : 		{
; 1302 : 			if(!AddItem(Root_,item))

	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddItem
	test	eax, eax
	jne	SHORT $LN3@AddBitmapI

; 1303 : 			{
; 1304 : 				bmp->Cleanup();

	mov	eax, DWORD PTR _bmp$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bmp$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1305 : 				delete bmp;

	mov	ecx, DWORD PTR _bmp$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], edx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@AddBitmapI
	push	1
	mov	eax, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN14@AddBitmapI
$LN13@AddBitmapI:
	mov	DWORD PTR tv168[ebp], 0
$LN14@AddBitmapI:

; 1306 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@AddBitmapI:

; 1307 : 			}
; 1308 : 		}
; 1309 : 	}
; 1310 : 	else

	jmp	SHORT $LN7@AddBitmapI
$LN6@AddBitmapI:

; 1311 : 	{
; 1312 : 		bmp->Cleanup();

	mov	eax, DWORD PTR _bmp$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bmp$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1313 : 		delete bmp;

	mov	ecx, DWORD PTR _bmp$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@AddBitmapI
	push	1
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv187[ebp], eax
	jmp	SHORT $LN7@AddBitmapI
$LN15@AddBitmapI:
	mov	DWORD PTR tv187[ebp], 0
$LN7@AddBitmapI:

; 1314 : 	}
; 1315 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddBitmapItem@C_TreeList@@QAEXJJJJ@Z ENDP		; C_TreeList::AddBitmapItem
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv219 = -80						; size = 4
$T2 = -76						; size = 4
tv201 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
tv175 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
tv71 = -44						; size = 4
$T8 = -40						; size = 4
$T9 = -36						; size = 4
$T10 = -32						; size = 4
$T11 = -28						; size = 4
_item$ = -24						; size = 4
_this$ = -20						; size = 4
_txt$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_Type$ = 12						; size = 4
_ParentID$ = 16						; size = 4
_TextID$ = 20						; size = 4
_w$ = 24						; size = 4
_color$ = 28						; size = 4
?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z PROC		; C_TreeList::AddWordWrapItem
; _this$ = ecx

; 1239 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1240 : 	C_Text *txt;
; 1241 : 	TREELIST *item;
; 1242 : 
; 1243 : 	txt=new C_Text;

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AddWordWra
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0C_Text@@QAE@XZ			; C_Text::C_Text
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@AddWordWra
$LN9@AddWordWra:
	mov	DWORD PTR tv71[ebp], 0
$LN10@AddWordWra:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _txt$[ebp], ecx

; 1244 : 	txt->Setup(ID,C_TYPE_NORMAL);

	push	25					; 00000019H
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax

; 1245 : 	txt->SetText(TextID);

	mov	ecx, DWORD PTR _TextID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+252]
	call	edx

; 1246 : 	txt->SetW(w);

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 1247 : 	txt->SetFGColor(color);

	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetFGColor@C_Text@@QAEXK@Z		; C_Text::SetFGColor

; 1248 : 	txt->SetFont(Font_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 1249 : 	txt->SetFlagBitOn(C_BIT_WORDWRAP);

	push	33554432				; 02000000H
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 1250 : 
; 1251 : 	item=CreateItem(ID,Type,txt);

	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ; C_TreeList::CreateItem
	mov	DWORD PTR _item$[ebp], eax

; 1252 : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	$LN6@AddWordWra

; 1253 : 	{
; 1254 : 		if(ParentID)

	cmp	DWORD PTR _ParentID$[ebp], 0
	je	SHORT $LN5@AddWordWra

; 1255 : 		{
; 1256 : 			if(!AddChildItem(Find(ParentID),item))

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ParentID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddChildItem
	test	eax, eax
	jne	SHORT $LN4@AddWordWra

; 1257 : 			{
; 1258 : 				txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1259 : 				delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T11[ebp], edx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@AddWordWra
	push	1
	mov	eax, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv175[ebp], eax
	jmp	SHORT $LN12@AddWordWra
$LN11@AddWordWra:
	mov	DWORD PTR tv175[ebp], 0
$LN12@AddWordWra:

; 1260 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AddWordWra:

; 1261 : 			}
; 1262 : 		}
; 1263 : 		else

	jmp	SHORT $LN3@AddWordWra
$LN5@AddWordWra:

; 1264 : 		{
; 1265 : 			if(!AddItem(Root_,item))

	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddItem
	test	eax, eax
	jne	SHORT $LN3@AddWordWra

; 1266 : 			{
; 1267 : 				txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1268 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1269 : 				delete txt;

	mov	eax, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@AddWordWra
	push	1
	mov	edx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN3@AddWordWra
$LN13@AddWordWra:
	mov	DWORD PTR tv201[ebp], 0
$LN3@AddWordWra:

; 1270 : 			}
; 1271 : 		}
; 1272 : 	}
; 1273 : 	else

	jmp	SHORT $LN7@AddWordWra
$LN6@AddWordWra:

; 1274 : 	{
; 1275 : 		txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1276 : 		delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@AddWordWra
	push	1
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv219[ebp], eax
	jmp	SHORT $LN7@AddWordWra
$LN15@AddWordWra:
	mov	DWORD PTR tv219[ebp], 0
$LN7@AddWordWra:

; 1277 : 	}
; 1278 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddWordWrapItem@C_TreeList@@QAEXJJJJJJ@Z ENDP		; C_TreeList::AddWordWrapItem
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv203 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
tv184 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
tv159 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
tv71 = -44						; size = 4
$T8 = -40						; size = 4
$T9 = -36						; size = 4
$T10 = -32						; size = 4
$T11 = -28						; size = 4
_item$ = -24						; size = 4
_this$ = -20						; size = 4
_txt$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_Type$ = 12						; size = 4
_ParentID$ = 16						; size = 4
_Text$ = 20						; size = 4
_color$ = 24						; size = 4
?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z PROC		; C_TreeList::AddTextItem
; _this$ = ecx

; 1199 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1200 : 	C_Text *txt;
; 1201 : 	TREELIST *item;
; 1202 : 
; 1203 : 	txt=new C_Text;

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AddTextIte
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0C_Text@@QAE@XZ			; C_Text::C_Text
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@AddTextIte
$LN9@AddTextIte:
	mov	DWORD PTR tv71[ebp], 0
$LN10@AddTextIte:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _txt$[ebp], ecx

; 1204 : 	txt->Setup(ID,C_TYPE_NORMAL);

	push	25					; 00000019H
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax

; 1205 : 	txt->SetText(Text);

	mov	ecx, DWORD PTR _Text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 1206 : 	txt->SetFGColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetFGColor@C_Text@@QAEXK@Z		; C_Text::SetFGColor

; 1207 : 	txt->SetFont(Font_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 1208 : 
; 1209 : 	item=CreateItem(ID,Type,txt);

	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ; C_TreeList::CreateItem
	mov	DWORD PTR _item$[ebp], eax

; 1210 : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	$LN6@AddTextIte

; 1211 : 	{
; 1212 : 		if(ParentID)

	cmp	DWORD PTR _ParentID$[ebp], 0
	je	SHORT $LN5@AddTextIte

; 1213 : 		{
; 1214 : 			if(!AddChildItem(Find(ParentID),item))

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ParentID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddChildItem
	test	eax, eax
	jne	SHORT $LN4@AddTextIte

; 1215 : 			{
; 1216 : 				txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1217 : 				delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T11[ebp], edx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@AddTextIte
	push	1
	mov	eax, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN12@AddTextIte
$LN11@AddTextIte:
	mov	DWORD PTR tv159[ebp], 0
$LN12@AddTextIte:

; 1218 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AddTextIte:

; 1219 : 			}
; 1220 : 		}
; 1221 : 		else

	jmp	SHORT $LN3@AddTextIte
$LN5@AddTextIte:

; 1222 : 		{
; 1223 : 			if(!AddItem(Root_,item))

	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddItem
	test	eax, eax
	jne	SHORT $LN3@AddTextIte

; 1224 : 			{
; 1225 : 				txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1226 : 				delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], edx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@AddTextIte
	push	1
	mov	eax, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN14@AddTextIte
$LN13@AddTextIte:
	mov	DWORD PTR tv184[ebp], 0
$LN14@AddTextIte:

; 1227 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@AddTextIte:

; 1228 : 			}
; 1229 : 		}
; 1230 : 	}
; 1231 : 	else

	jmp	SHORT $LN7@AddTextIte
$LN6@AddTextIte:

; 1232 : 	{
; 1233 : 		txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1234 : 		delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@AddTextIte
	push	1
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN7@AddTextIte
$LN15@AddTextIte:
	mov	DWORD PTR tv203[ebp], 0
$LN7@AddTextIte:

; 1235 : 	}
; 1236 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddTextItem@C_TreeList@@QAEXJJJPADJ@Z ENDP		; C_TreeList::AddTextItem
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv203 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
tv184 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
tv159 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
tv71 = -44						; size = 4
$T8 = -40						; size = 4
$T9 = -36						; size = 4
$T10 = -32						; size = 4
$T11 = -28						; size = 4
_item$ = -24						; size = 4
_this$ = -20						; size = 4
_txt$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_Type$ = 12						; size = 4
_ParentID$ = 16						; size = 4
_TextID$ = 20						; size = 4
_color$ = 24						; size = 4
?AddTextItem@C_TreeList@@QAEXJJJJJ@Z PROC		; C_TreeList::AddTextItem
; _this$ = ecx

; 1159 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1160 : 	C_Text *txt;
; 1161 : 	TREELIST *item;
; 1162 : 
; 1163 : 	txt=new C_Text;

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AddTextIte
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0C_Text@@QAE@XZ			; C_Text::C_Text
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@AddTextIte
$LN9@AddTextIte:
	mov	DWORD PTR tv71[ebp], 0
$LN10@AddTextIte:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _txt$[ebp], ecx

; 1164 : 	txt->Setup(ID,C_TYPE_NORMAL);

	push	25					; 00000019H
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax

; 1165 : 	txt->SetText(TextID);

	mov	ecx, DWORD PTR _TextID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+252]
	call	edx

; 1166 : 	txt->SetFGColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetFGColor@C_Text@@QAEXK@Z		; C_Text::SetFGColor

; 1167 : 	txt->SetFont(Font_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 1168 : 
; 1169 : 	item=CreateItem(ID,Type,txt);

	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Type$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ; C_TreeList::CreateItem
	mov	DWORD PTR _item$[ebp], eax

; 1170 : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	$LN6@AddTextIte

; 1171 : 	{
; 1172 : 		if(ParentID)

	cmp	DWORD PTR _ParentID$[ebp], 0
	je	SHORT $LN5@AddTextIte

; 1173 : 		{
; 1174 : 			if(!AddChildItem(Find(ParentID),item))

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ParentID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddChildItem
	test	eax, eax
	jne	SHORT $LN4@AddTextIte

; 1175 : 			{
; 1176 : 				txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1177 : 				delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T11[ebp], edx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN11@AddTextIte
	push	1
	mov	eax, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN12@AddTextIte
$LN11@AddTextIte:
	mov	DWORD PTR tv159[ebp], 0
$LN12@AddTextIte:

; 1178 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AddTextIte:

; 1179 : 			}
; 1180 : 		}
; 1181 : 		else

	jmp	SHORT $LN3@AddTextIte
$LN5@AddTextIte:

; 1182 : 		{
; 1183 : 			if(!AddItem(Root_,item))

	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ; C_TreeList::AddItem
	test	eax, eax
	jne	SHORT $LN3@AddTextIte

; 1184 : 			{
; 1185 : 				txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1186 : 				delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], edx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN13@AddTextIte
	push	1
	mov	eax, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN14@AddTextIte
$LN13@AddTextIte:
	mov	DWORD PTR tv184[ebp], 0
$LN14@AddTextIte:

; 1187 : 				delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@AddTextIte:

; 1188 : 			}
; 1189 : 		}
; 1190 : 	}
; 1191 : 	else

	jmp	SHORT $LN7@AddTextIte
$LN6@AddTextIte:

; 1192 : 	{
; 1193 : 		txt->Cleanup();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 1194 : 		delete txt;

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN15@AddTextIte
	push	1
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN7@AddTextIte
$LN15@AddTextIte:
	mov	DWORD PTR tv203[ebp], 0
$LN7@AddTextIte:

; 1195 : 	}
; 1196 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddTextItem@C_TreeList@@QAEXJJJJJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddTextItem@C_TreeList@@QAEXJJJJJ@Z ENDP		; C_TreeList::AddTextItem
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DKScanCode$ = 8					; size = 1
_Ascii$ = 12						; size = 1
_ShiftStates$ = 16					; size = 1
_RepeatCount$ = 20					; size = 4
?CheckKeyboard@C_TreeList@@UAEHEEEJ@Z PROC		; C_TreeList::CheckKeyboard
; _this$ = ecx

; 876  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 877  : 	if(LastFound_ && LastFound_->Item_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN1@CheckKeybo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN1@CheckKeybo

; 878  : 		return(LastFound_->Item_->CheckKeyboard(DKScanCode,Ascii,ShiftStates,RepeatCount));

	mov	eax, DWORD PTR _RepeatCount$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _ShiftStates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _Ascii$[ebp]
	push	edx
	movzx	eax, BYTE PTR _DKScanCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	jmp	SHORT $LN2@CheckKeybo
$LN1@CheckKeybo:

; 879  : 	return(FALSE);

	xor	eax, eax
$LN2@CheckKeybo:

; 880  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckKeyboard@C_TreeList@@UAEHEEEJ@Z ENDP		; C_TreeList::CheckKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMe@C_TreeList@@UAEPAVC_Base@@XZ PROC		; C_TreeList::GetMe
; _this$ = ecx

; 865  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 866  : 	if(MouseFound_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	SHORT $LN2@GetMe

; 867  : 	{
; 868  : 		if(CheckFlag_ == C_TYPE_MENU)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+120]
	cmp	edx, 49					; 00000031H
	jne	SHORT $LN1@GetMe

; 869  : 			return(this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@GetMe
$LN1@GetMe:

; 870  : 		return(MouseFound_->Item_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	eax, DWORD PTR [ecx+20]
	jmp	SHORT $LN3@GetMe
$LN2@GetMe:

; 871  : 	}
; 872  : 	return(NULL);

	xor	eax, eax
$LN3@GetMe:

; 873  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMe@C_TreeList@@UAEPAVC_Base@@XZ ENDP		; C_TreeList::GetMe
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deactivate@C_TreeList@@UAEXXZ PROC			; C_TreeList::Deactivate
; _this$ = ecx

; 858  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 859  : 	if(LastActive_ && LastActive_->Item_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN1@Deactivate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN1@Deactivate

; 860  : 		LastActive_->Item_->Deactivate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+188]
	call	eax
$LN1@Deactivate:

; 861  : 	LastActive_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], 0

; 862  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Deactivate@C_TreeList@@UAEXXZ ENDP			; C_TreeList::Deactivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Activate@C_TreeList@@UAEXXZ PROC			; C_TreeList::Activate
; _this$ = ecx

; 843  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 844  : 	if(LastActive_ == LastFound_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+144]
	cmp	edx, DWORD PTR [ecx+140]
	jne	SHORT $LN3@Activate

; 845  : 		return;

	jmp	$LN4@Activate
$LN3@Activate:

; 846  : 
; 847  : 	if(LastActive_ && LastActive_->Item_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN2@Activate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN2@Activate

; 848  : 		LastActive_->Item_->Deactivate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+188]
	call	eax
$LN2@Activate:

; 849  : 
; 850  : 	if(LastFound_ && LastFound_->Item_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN4@Activate
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@Activate

; 851  : 	{
; 852  : 		LastActive_=LastFound_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [ecx+144], eax

; 853  : 		LastFound_->Item_->Activate();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+184]
	call	edx
$LN4@Activate:

; 854  : 	}
; 855  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@C_TreeList@@UAEXXZ ENDP			; C_TreeList::Activate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_limb$ = -12						; size = 4
_top$ = -8						; size = 4
_cur$ = -4						; size = 4
_branch$ = 8						; size = 4
?ReorderBranch@C_TreeList@@QAEXPAVTREELIST@@@Z PROC	; C_TreeList::ReorderBranch
; _this$ = ecx

; 1125 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1126 : 	TREELIST *cur,*top,*limb;
; 1127 : 
; 1128 : 	if(!branch)

	cmp	DWORD PTR _branch$[ebp], 0
	jne	SHORT $LN10@ReorderBra

; 1129 : 		return;

	jmp	$LN11@ReorderBra
$LN10@ReorderBra:

; 1130 : 
; 1131 : 	cur=branch;

	mov	eax, DWORD PTR _branch$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN9@ReorderBra:

; 1132 : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN8@ReorderBra

; 1133 : 	{
; 1134 : 		if(cur->Child)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN7@ReorderBra

; 1135 : 			ReorderBranch(cur->Child);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReorderBranch@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::ReorderBranch
$LN7@ReorderBra:

; 1136 : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _cur$[ebp], edx

; 1137 : 	}

	jmp	SHORT $LN9@ReorderBra
$LN8@ReorderBra:

; 1138 : 	// Sort here
; 1139 : 	top=branch;

	mov	eax, DWORD PTR _branch$[ebp]
	mov	DWORD PTR _top$[ebp], eax

; 1140 : 	limb=top->Next;

	mov	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _limb$[ebp], edx

; 1141 : 	if(limb)

	cmp	DWORD PTR _limb$[ebp], 0
	je	SHORT $LN11@ReorderBra

; 1142 : 	{
; 1143 : 		top->Next=NULL;

	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1144 : 		cur=limb;

	mov	ecx, DWORD PTR _limb$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
$LN5@ReorderBra:

; 1145 : 		while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN4@ReorderBra

; 1146 : 		{
; 1147 : 			limb=cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _limb$[ebp], edx

; 1148 : 			cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx

; 1149 : 			Add(top,limb);

	mov	edx, DWORD PTR _limb$[ebp]
	push	edx
	mov	eax, DWORD PTR _top$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@C_TreeList@@IAEXPAVTREELIST@@0@Z	; C_TreeList::Add
$LN3@ReorderBra:

; 1150 : 			while(top->Prev)

	mov	ecx, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN2@ReorderBra

; 1151 : 				top=top->Prev;

	mov	edx, DWORD PTR _top$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _top$[ebp], eax
	jmp	SHORT $LN3@ReorderBra
$LN2@ReorderBra:

; 1152 : 		}

	jmp	SHORT $LN5@ReorderBra
$LN4@ReorderBra:

; 1153 : 		if(top->Parent)

	mov	ecx, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@ReorderBra

; 1154 : 			top->Parent->Child=top;

	mov	edx, DWORD PTR _top$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN11@ReorderBra:

; 1155 : 	}
; 1156 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ReorderBranch@C_TreeList@@QAEXPAVTREELIST@@@Z ENDP	; C_TreeList::ReorderBranch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_tmp$ = -36						; size = 16
_clip$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?HighLite@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC ; C_TreeList::HighLite
; _this$ = ecx

; 1033 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1034 : 	UI95_RECT clip,tmp;
; 1035 : 
; 1036 : 	if(MouseFound_ && CheckFlag_ == C_TYPE_MENU)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	$LN6@HighLite
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+120]
	cmp	edx, 49					; 00000031H
	jne	$LN6@HighLite

; 1037 : 	{
; 1038 : 		clip.left=MouseFound_->x_+2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 2
	mov	DWORD PTR _clip$[ebp], edx

; 1039 : 		clip.top=MouseFound_->y_+2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _clip$[ebp+4], edx

; 1040 : 
; 1041 : 		if(!(Flags_ & C_BIT_ABSOLUTE))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 262144				; 00040000H
	jne	SHORT $LN4@HighLite

; 1042 : 		{
; 1043 : 			clip.left+=Parent_->VX_[Client_];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+40]
	mov	ecx, DWORD PTR _clip$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+480]
	mov	DWORD PTR _clip$[ebp], ecx

; 1044 : 			clip.top+=Parent_->VY_[Client_];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+40]
	mov	ecx, DWORD PTR _clip$[ebp+4]
	add	ecx, DWORD PTR [eax+edx*4+512]
	mov	DWORD PTR _clip$[ebp+4], ecx
$LN4@HighLite:

; 1045 : 		}
; 1046 : 
; 1047 : 		clip.right=clip.left+ChildImage_[0]->Header->w;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+152]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, WORD PTR [edx+44]
	add	eax, DWORD PTR _clip$[ebp]
	mov	DWORD PTR _clip$[ebp+8], eax

; 1048 : 		clip.bottom=clip.top+ChildImage_[0]->Header->h;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+152]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+46]
	add	edx, DWORD PTR _clip$[ebp+4]
	mov	DWORD PTR _clip$[ebp+12], edx

; 1049 : 
; 1050 : 		if(!Parent_->ClipToArea(&tmp,&clip,cliprect))

	mov	eax, DWORD PTR _cliprect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _clip$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN3@HighLite

; 1051 : 			return;

	jmp	SHORT $LN6@HighLite
$LN3@HighLite:

; 1052 : 
; 1053 : 		if(!(Flags_ & C_BIT_ABSOLUTE))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 262144				; 00040000H
	jne	SHORT $LN2@HighLite

; 1054 : 			if(!Parent_->ClipToArea(&tmp,&clip,&Parent_->ClientArea_[Client_]))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+40]
	shl	eax, 4
	lea	ecx, DWORD PTR [ecx+eax+168]
	push	ecx
	lea	edx, DWORD PTR _clip$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN2@HighLite

; 1055 : 				return;

	jmp	SHORT $LN6@HighLite
$LN2@HighLite:

; 1056 : 
; 1057 : 		Parent_->BlitTranslucent(surface,MouseOverColor_,MouseOverPercent_,&clip,C_BIT_ABSOLUTE,0);

	push	0
	push	262144					; 00040000H
	lea	edx, DWORD PTR _clip$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BlitTranslucent@C_Window@@QAEXPAVSCREEN@@KJPAUUI95_RECT@@JJ@Z ; C_Window::BlitTranslucent
$LN6@HighLite:

; 1058 : 	}
; 1059 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?HighLite@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP ; C_TreeList::HighLite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetSubParents@C_TreeList@@UAEXPAVC_Window@@@Z PROC	; C_TreeList::SetSubParents
; _this$ = ecx

; 1099 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1100 : 	SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@C_Base@@QAEXF@Z		; C_Base::SetReady

; 1101 : 	if(Parent_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN1@SetSubPare

; 1102 : 		return;

	jmp	SHORT $LN2@SetSubPare
$LN1@SetSubPare:

; 1103 : 
; 1104 : 	SetControlParents(Root_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetControlParents@C_TreeList@@IAEXPAVTREELIST@@@Z ; C_TreeList::SetControlParents

; 1105 : 	SetReady(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@C_Base@@QAEXF@Z		; C_Base::SetReady

; 1106 : 	RecalcSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RecalcSize@C_TreeList@@QAEXXZ		; C_TreeList::RecalcSize
$LN2@SetSubPare:

; 1107 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubParents@C_TreeList@@UAEXPAVC_Window@@@Z ENDP	; C_TreeList::SetSubParents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?GetItemXY@C_TreeList@@UAEXJPAJ0@Z PROC			; C_TreeList::GetItemXY
; _this$ = ecx

; 1110 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1111 : 	TREELIST *cur;
; 1112 : 
; 1113 : 	cur=FindOpen(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindOpen@C_TreeList@@QAEPAVTREELIST@@J@Z ; C_TreeList::FindOpen
	mov	DWORD PTR _cur$[ebp], eax

; 1114 : 	if(cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN1@GetItemXY

; 1115 : 		return;

	jmp	SHORT $LN2@GetItemXY
$LN1@GetItemXY:

; 1116 : 
; 1117 : 	*x=cur->x_;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax

; 1118 : 	*y=cur->y_;

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], eax
$LN2@GetItemXY:

; 1119 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetItemXY@C_TreeList@@UAEXJPAJ0@Z ENDP			; C_TreeList::GetItemXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relx$ = 8						; size = 4
_rely$ = 12						; size = 4
_me$ = 16						; size = 4
?MouseOver@C_TreeList@@UAEHJJPAVC_Base@@@Z PROC		; C_TreeList::MouseOver
; _this$ = ecx

; 1062 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1063 : 	if(GetFlags() & C_BIT_INVISIBLE || !(GetFlags() & C_BIT_ENABLED))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN5@MouseOver
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 2048				; 00000800H
	jne	SHORT $LN6@MouseOver
$LN5@MouseOver:

; 1064 : 		return(FALSE);

	xor	eax, eax
	jmp	$LN7@MouseOver
$LN6@MouseOver:

; 1065 : 
; 1066 : 	CheckFlag_=C_BIT_NOTHING; // (0)

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+120], ax

; 1067 : 	MouseFound_=CheckBranch(Root_,relx,rely);

	mov	edx, DWORD PTR _rely$[ebp]
	push	edx
	mov	eax, DWORD PTR _relx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBranch@C_TreeList@@IAEPAVTREELIST@@PAV2@JJ@Z ; C_TreeList::CheckBranch
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 1068 : 	if(MouseFound_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+148], 0
	je	SHORT $LN4@MouseOver

; 1069 : 	{
; 1070 : 		if(CheckFlag_ == C_TYPE_MENU)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+120]
	cmp	ecx, 49					; 00000031H
	jne	SHORT $LN3@MouseOver

; 1071 : 			return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN7@MouseOver
	jmp	SHORT $LN4@MouseOver
$LN3@MouseOver:

; 1072 : 		else if(MouseFound_->Item_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@MouseOver

; 1073 : 			return(MouseFound_->Item_->MouseOver(relx,rely,me));

	mov	ecx, DWORD PTR _me$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rely$[ebp]
	push	edx
	mov	eax, DWORD PTR _relx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	jmp	SHORT $LN7@MouseOver
$LN4@MouseOver:

; 1074 : 	}
; 1075 : 
; 1076 : 	MouseFound_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1077 : 	return(FALSE);

	xor	eax, eax
$LN7@MouseOver:

; 1078 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MouseOver@C_TreeList@@UAEHJJPAVC_Base@@@Z ENDP		; C_TreeList::MouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?Draw@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_TreeList::Draw
; _this$ = ecx

; 1022 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1023 : 	if(!Ready())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@C_Base@@QAEFXZ			; C_Base::Ready
	cwde
	test	eax, eax
	jne	SHORT $LN2@Draw

; 1024 : 		return;

	jmp	SHORT $LN3@Draw
$LN2@Draw:

; 1025 : 
; 1026 : 	if(GetFlags() & C_BIT_INVISIBLE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	je	SHORT $LN1@Draw

; 1027 : 		return;

	jmp	SHORT $LN3@Draw
$LN1@Draw:

; 1028 : 
; 1029 : 	DrawBranch(surface,Root_,cliprect);

	mov	ecx, DWORD PTR _cliprect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBranch@C_TreeList@@IAEXPAVSCREEN@@PAVTREELIST@@PAUUI95_RECT@@@Z ; C_TreeList::DrawBranch
$LN3@Draw:

; 1030 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Draw@C_TreeList@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_TreeList::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Refresh@C_TreeList@@UAEXXZ PROC			; C_TreeList::Refresh
; _this$ = ecx

; 937  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 938  : 	if(!Ready() || GetFlags() & C_BIT_INVISIBLE || Parent_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@C_Base@@QAEFXZ			; C_Base::Ready
	cwde
	test	eax, eax
	je	SHORT $LN1@Refresh
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN1@Refresh
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN2@Refresh
$LN1@Refresh:

; 939  : 		return;

	jmp	SHORT $LN3@Refresh
$LN2@Refresh:

; 940  : 
; 941  : 	Parent_->SetUpdateRect(GetX(),GetY(),GetX()+GetW()+1,GetY()+GetH()+1,GetFlags(),GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	edx, ax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	lea	eax, DWORD PTR [esi+eax+1]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	lea	ecx, DWORD PTR [esi+eax+1]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?SetUpdateRect@C_Window@@QAEXJJJJJJ@Z	; C_Window::SetUpdateRect
$LN3@Refresh:

; 942  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@C_TreeList@@UAEXXZ ENDP			; C_TreeList::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -8						; size = 4
_this$ = -4						; size = 4
?RecalcSize@C_TreeList@@QAEXXZ PROC			; C_TreeList::RecalcSize
; _this$ = ecx

; 799  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 800  : 	F4CSECTIONHANDLE *Leave;
; 801  : 	if(!Ready()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ready@C_Base@@QAEFXZ			; C_Base::Ready
	cwde
	test	eax, eax
	jne	SHORT $LN2@RecalcSize
	jmp	$LN3@RecalcSize
$LN2@RecalcSize:

; 802  : 
; 803  : 	if(Parent_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN3@RecalcSize

; 804  : 	{
; 805  : 		Leave=UI_Enter(Parent_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 806  : 		treew_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+124], 0

; 807  : 		treeh_=CalculateTreePositions(Root_,GetX(),GetY());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateTreePositions@C_TreeList@@IAEJPAVTREELIST@@JJ@Z ; C_TreeList::CalculateTreePositions
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], eax

; 808  : 		treeh_+=yoffset_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], eax

; 809  : 
; 810  : 		SetWH(treew_,treeh_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 811  : 
; 812  : 		Parent_->ScanClientArea(GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movsx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?ScanClientArea@C_Window@@QAEXJ@Z	; C_Window::ScanClientArea

; 813  : 
; 814  : 		UI_Leave(Leave);

	mov	eax, DWORD PTR _Leave$[ebp]
	push	eax
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4
$LN3@RecalcSize:

; 815  : 	}
; 816  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RecalcSize@C_TreeList@@QAEXXZ ENDP			; C_TreeList::RecalcSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?Dragable@C_TreeList@@UAEHJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Dragable@C_TreeList@@UAEHJ@Z PROC			; C_TreeList::Dragable, COMDAT
; _this$ = ecx

; 131  : 		BOOL Dragable(long) {return(GetFlags() & C_BIT_DRAGABLE);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 4096				; 00001000H
	mov	esp, ebp
	pop	ebp
	ret	4
?Dragable@C_TreeList@@UAEHJ@Z ENDP			; C_TreeList::Dragable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv210 = -16						; size = 4
tv130 = -12						; size = 4
tv95 = -8						; size = 4
_this$ = -4						; size = 4
_cID$ = 8						; size = 4
_HitType$ = 12						; size = 2
?Process@C_TreeList@@UAEHJF@Z PROC			; C_TreeList::Process
; _this$ = ecx

; 883  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 	if(GetFlags() & C_BIT_INVISIBLE || !(GetFlags() & C_BIT_ENABLED))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN19@Process
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 2048				; 00000800H
	jne	SHORT $LN20@Process
$LN19@Process:

; 885  : 		return(0);

	xor	eax, eax
	jmp	$LN21@Process
$LN20@Process:

; 886  : 	if(CheckFlag_ == C_BIT_NOTHING) return(FALSE); // CheckFlag is the segment of the button pressed (0=Nothing)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+120]
	test	ecx, ecx
	jne	SHORT $LN18@Process
	xor	eax, eax
	jmp	$LN21@Process
$LN18@Process:

; 887  : 
; 888  : 	gSoundMgr->PlaySound(GetSound(HitType));

	movzx	edx, WORD PTR _HitType$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
	push	eax
	mov	ecx, DWORD PTR ?gSoundMgr@@3PAVC_Sound@@A ; gSoundMgr
	call	?PlaySoundA@C_Sound@@QAEHPAVSOUND_RES@@@Z ; C_Sound::PlaySoundA

; 889  : 	switch(HitType)

	movsx	ecx, WORD PTR _HitType$[ebp]
	mov	DWORD PTR tv95[ebp], ecx
	cmp	DWORD PTR tv95[ebp], 51			; 00000033H
	je	SHORT $LN15@Process
	cmp	DWORD PTR tv95[ebp], 51			; 00000033H
	jle	$LN16@Process
	cmp	DWORD PTR tv95[ebp], 53			; 00000035H
	jle	$LN6@Process
	jmp	$LN16@Process
$LN15@Process:

; 890  : 	{
; 891  : 		case C_TYPE_LMOUSEDOWN:
; 892  : 			switch(CheckFlag_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+120]
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 49		; 00000031H
	je	SHORT $LN12@Process
	cmp	DWORD PTR tv130[ebp], 50		; 00000032H
	je	SHORT $LN9@Process
	jmp	$LN13@Process
$LN12@Process:

; 893  : 			{
; 894  : 				case C_TYPE_MENU:
; 895  : 					if(LastFound_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN11@Process

; 896  : 					{
; 897  : 						Refresh();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 898  : 						ToggleItemState(LastFound_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ToggleItemState@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::ToggleItemState

; 899  : 						if(Callback_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN10@Process

; 900  : 							(*Callback_)(GetID(),HitType,this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	movzx	ecx, WORD PTR _HitType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 12					; 0000000cH
$LN10@Process:

; 901  : 
; 902  : 						RecalcSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RecalcSize@C_TreeList@@QAEXXZ		; C_TreeList::RecalcSize

; 903  : 
; 904  : 						Refresh();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN11@Process:

; 905  : 					}
; 906  : 					break;

	jmp	SHORT $LN13@Process
$LN9@Process:

; 907  : 				case C_TYPE_ITEM:
; 908  : 					if(LastFound_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN13@Process

; 909  : 					{
; 910  : 						LastFound_->Item_->Process(cID,HitType);

	movzx	edx, WORD PTR _HitType$[ebp]
	push	edx
	mov	eax, DWORD PTR _cID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+200]
	call	edx

; 911  : 						if(Callback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN13@Process

; 912  : 							(*Callback_)(cID,HitType,this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movzx	edx, WORD PTR _HitType$[ebp]
	push	edx
	mov	eax, DWORD PTR _cID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 12					; 0000000cH
$LN13@Process:

; 913  : 					}
; 914  : 					break;
; 915  : 			}
; 916  : 			break;

	jmp	SHORT $LN16@Process
$LN6@Process:

; 917  : 
; 918  : 		case C_TYPE_LMOUSEUP:
; 919  : 		case C_TYPE_LMOUSEDBLCLK:
; 920  : 			switch(CheckFlag_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+120]
	mov	DWORD PTR tv210[ebp], ecx
	cmp	DWORD PTR tv210[ebp], 50		; 00000032H
	je	SHORT $LN3@Process
	jmp	SHORT $LN16@Process
$LN3@Process:

; 921  : 			{
; 922  : 				case C_TYPE_ITEM:
; 923  : 					if(LastFound_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 0
	je	SHORT $LN16@Process

; 924  : 					{
; 925  : 						LastFound_->Item_->Process(cID,HitType);

	movzx	eax, WORD PTR _HitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+200]
	call	eax

; 926  : 						if(Callback_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	je	SHORT $LN16@Process

; 927  : 							(*Callback_)(cID,HitType,this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	movzx	eax, WORD PTR _HitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 12					; 0000000cH
$LN16@Process:

; 928  : 					}
; 929  : 					break;
; 930  : 			}
; 931  : 			break;
; 932  : 	}
; 933  : 	return(TRUE);

	mov	eax, 1
$LN21@Process:

; 934  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Process@C_TreeList@@UAEHJF@Z ENDP			; C_TreeList::Process
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_relX$ = 8						; size = 4
_relY$ = 12						; size = 4
?CheckHotSpots@C_TreeList@@UAEJJJ@Z PROC		; C_TreeList::CheckHotSpots
; _this$ = ecx

; 819  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 820  : 	TREELIST *cur;
; 821  : 
; 822  : 	if(GetFlags() & C_BIT_INVISIBLE || !(GetFlags() & C_BIT_ENABLED))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN3@CheckHotSp
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 2048				; 00000800H
	jne	SHORT $LN4@CheckHotSp
$LN3@CheckHotSp:

; 823  : 		return(0);

	xor	eax, eax
	jmp	$LN5@CheckHotSp
$LN4@CheckHotSp:

; 824  : 
; 825  : 	CheckFlag_=C_BIT_NOTHING; // (0)

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+120], ax

; 826  : 	cur=CheckBranch(Root_,relX,relY);

	mov	edx, DWORD PTR _relY$[ebp]
	push	edx
	mov	eax, DWORD PTR _relX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBranch@C_TreeList@@IAEPAVTREELIST@@PAV2@JJ@Z ; C_TreeList::CheckBranch
	mov	DWORD PTR _cur$[ebp], eax

; 827  : 	if(cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@CheckHotSp

; 828  : 	{
; 829  : 		LastFound_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0

; 830  : 		return(0);

	xor	eax, eax
	jmp	SHORT $LN5@CheckHotSp
$LN2@CheckHotSp:

; 831  : 	}
; 832  : 
; 833  : 	if(LastFound_ != cur)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	cmp	edx, DWORD PTR _cur$[ebp]
	je	SHORT $LN1@CheckHotSp

; 834  : 	{
; 835  : 		Parent_->DeactivateControl();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?DeactivateControl@C_Window@@QAEXXZ	; C_Window::DeactivateControl
$LN1@CheckHotSp:

; 836  : 	}
; 837  : 	LastFound_=cur;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+140], edx

; 838  : 	SetRelXY(relX-GetX(),relY-GetY());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@C_Base@@QAEJXZ			; C_Base::GetY
	mov	ecx, DWORD PTR _relY$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	edx, DWORD PTR _relX$[ebp]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 839  : 	return(GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
$LN5@CheckHotSp:

; 840  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CheckHotSpots@C_TreeList@@UAEJJJ@Z ENDP		; C_TreeList::CheckHotSpots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_newstate$ = 8						; size = 2
_me$ = 12						; size = 4
?SetAllControlStates@C_TreeList@@QAEXFPAVTREELIST@@@Z PROC ; C_TreeList::SetAllControlStates
; _this$ = ecx

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 638  : 	TREELIST *cur;
; 639  : 
; 640  : 	cur=me;

	mov	eax, DWORD PTR _me$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN4@SetAllCont:

; 641  : 
; 642  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@SetAllCont

; 643  : 	{
; 644  : 		if(cur->Type_ != C_TYPE_INFO)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 48			; 00000030H
	je	SHORT $LN2@SetAllCont

; 645  : 			cur->Item_->SetState(newstate);

	movzx	edx, WORD PTR _newstate$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx
$LN2@SetAllCont:

; 646  : 
; 647  : 		if(cur->Child)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@SetAllCont

; 648  : 			SetAllControlStates(newstate,cur->Child);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	movzx	eax, WORD PTR _newstate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAllControlStates@C_TreeList@@QAEXFPAVTREELIST@@@Z ; C_TreeList::SetAllControlStates
$LN1@SetAllCont:

; 649  : 
; 650  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _cur$[ebp], edx

; 651  : 	}

	jmp	SHORT $LN4@SetAllCont
$LN5@SetAllCont:

; 652  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetAllControlStates@C_TreeList@@QAEXFPAVTREELIST@@@Z ENDP ; C_TreeList::SetAllControlStates
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Mask$ = 8						; size = 4
?ClearAllStates@C_TreeList@@QAEXJ@Z PROC		; C_TreeList::ClearAllStates
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 663  : 	SetAllBranches(Mask,0,Root_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	push	0
	mov	edx, DWORD PTR _Mask$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAllBranches@C_TreeList@@QAEXJFPAVTREELIST@@@Z ; C_TreeList::SetAllBranches

; 664  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAllStates@C_TreeList@@QAEXJ@Z ENDP		; C_TreeList::ClearAllStates
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_Mask$ = 8						; size = 4
_newstate$ = 12						; size = 2
_me$ = 16						; size = 4
?SetAllBranches@C_TreeList@@QAEXJFPAVTREELIST@@@Z PROC	; C_TreeList::SetAllBranches
; _this$ = ecx

; 619  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 620  : 	TREELIST *cur;
; 621  : 
; 622  : 	cur=me;

	mov	eax, DWORD PTR _me$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN4@SetAllBran:

; 623  : 
; 624  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@SetAllBran

; 625  : 	{
; 626  : 		if(cur->Type_ == Mask)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _Mask$[ebp]
	jne	SHORT $LN2@SetAllBran

; 627  : 			cur->state_=newstate&1;

	movsx	eax, WORD PTR _newstate$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN2@SetAllBran:

; 628  : 
; 629  : 		if(cur->Child)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN1@SetAllBran

; 630  : 			SetAllBranches(Mask,newstate,cur->Child);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	movzx	edx, WORD PTR _newstate$[ebp]
	push	edx
	mov	eax, DWORD PTR _Mask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAllBranches@C_TreeList@@QAEXJFPAVTREELIST@@@Z ; C_TreeList::SetAllBranches
$LN1@SetAllBran:

; 631  : 
; 632  : 		cur=cur->Next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _cur$[ebp], edx

; 633  : 	}

	jmp	SHORT $LN4@SetAllBran
$LN5@SetAllBran:

; 634  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetAllBranches@C_TreeList@@QAEXJFPAVTREELIST@@@Z ENDP	; C_TreeList::SetAllBranches
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?ToggleItemState@C_TreeList@@QAEXPAVTREELIST@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?ToggleItemState@C_TreeList@@QAEXPAVTREELIST@@@Z PROC	; C_TreeList::ToggleItemState, COMDAT
; _this$ = ecx

; 125  : 		void ToggleItemState(TREELIST *item) { if(item != NULL) item->state_=1-item->state_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN2@ToggleItem
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN2@ToggleItem:
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleItemState@C_TreeList@@QAEXPAVTREELIST@@@Z ENDP	; C_TreeList::ToggleItemState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_item$ = -8						; size = 4
_this$ = -4						; size = 4
_ItemID$ = 8						; size = 4
?ToggleItemState@C_TreeList@@QAEXJ@Z PROC		; C_TreeList::ToggleItemState
; _this$ = ecx

; 610  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 611  : 	TREELIST *item;
; 612  : 
; 613  : 	item=Find(ItemID);

	mov	eax, DWORD PTR _ItemID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 614  : 
; 615  : 	ToggleItemState(item);

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ToggleItemState@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::ToggleItemState

; 616  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleItemState@C_TreeList@@QAEXJ@Z ENDP		; C_TreeList::ToggleItemState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_ItemID$ = 8						; size = 4
_newstate$ = 12						; size = 2
?SetItemState@C_TreeList@@QAEXJF@Z PROC			; C_TreeList::SetItemState
; _this$ = ecx

; 600  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 	TREELIST *item;
; 602  : 
; 603  : 	item=Find(ItemID);

	mov	eax, DWORD PTR _ItemID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 604  : 
; 605  : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN2@SetItemSta

; 606  : 		item->state_ = newstate & 1;

	movsx	ecx, WORD PTR _newstate$[ebp]
	and	ecx, 1
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN2@SetItemSta:

; 607  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetItemState@C_TreeList@@QAEXJF@Z ENDP			; C_TreeList::SetItemState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_me$ = 8						; size = 4
?GetChild@C_TreeList@@QAEPAVTREELIST@@PAV2@@Z PROC	; C_TreeList::GetChild
; _this$ = ecx

; 592  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 593  : 	if(me)

	cmp	DWORD PTR _me$[ebp], 0
	je	SHORT $LN1@GetChild

; 594  : 		return(me->Child);

	mov	eax, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [eax+32]
	jmp	SHORT $LN2@GetChild
$LN1@GetChild:

; 595  : 
; 596  : 	return(NULL);

	xor	eax, eax
$LN2@GetChild:

; 597  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetChild@C_TreeList@@QAEPAVTREELIST@@PAV2@@Z ENDP	; C_TreeList::GetChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_me$ = 8						; size = 4
?GetNextBranch@C_TreeList@@QAEPAVTREELIST@@PAV2@@Z PROC	; C_TreeList::GetNextBranch
; _this$ = ecx

; 585  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 	if(me)

	cmp	DWORD PTR _me$[ebp], 0
	je	SHORT $LN1@GetNextBra

; 587  : 		return(me->Next);

	mov	eax, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [eax+28]
	jmp	SHORT $LN2@GetNextBra
$LN1@GetNextBra:

; 588  : 	return(NULL);

	xor	eax, eax
$LN2@GetNextBra:

; 589  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNextBranch@C_TreeList@@QAEPAVTREELIST@@PAV2@@Z ENDP	; C_TreeList::GetNextBranch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_item$ = -8						; size = 4
_cur$ = -4						; size = 4
_cID$ = 8						; size = 4
?FindOpen@C_TreeList@@QAEPAVTREELIST@@J@Z PROC		; C_TreeList::FindOpen
; _this$ = ecx

; 540  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 541  : 	TREELIST *item,*cur;
; 542  : 
; 543  : 	item=Find(cID);

	mov	eax, DWORD PTR _cID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _item$[ebp], eax

; 544  : 	if(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN4@FindOpen

; 545  : 	{
; 546  : 		cur=item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@FindOpen:

; 547  : 		while(cur->Parent)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@FindOpen

; 548  : 		{
; 549  : 			if(!cur->Parent->state_)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN1@FindOpen

; 550  : 				return(NULL);

	xor	eax, eax
	jmp	SHORT $LN5@FindOpen
$LN1@FindOpen:

; 551  : 			cur=cur->Parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _cur$[ebp], eax

; 552  : 		}

	jmp	SHORT $LN3@FindOpen
$LN2@FindOpen:

; 553  : 		return(item);

	mov	eax, DWORD PTR _item$[ebp]
	jmp	SHORT $LN5@FindOpen
$LN4@FindOpen:

; 554  : 	}
; 555  : 	return(NULL);

	xor	eax, eax
$LN5@FindOpen:

; 556  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindOpen@C_TreeList@@QAEPAVTREELIST@@J@Z ENDP		; C_TreeList::FindOpen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cID$ = 8						; size = 4
?Find@C_TreeList@@QAEPAVTREELIST@@J@Z PROC		; C_TreeList::Find
; _this$ = ecx

; 535  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 536  : 	return((TREELIST *)Hash_->Find(cID));

	mov	eax, DWORD PTR _cID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?Find@C_Hash@@QAEPAXJ@Z			; C_Hash::Find

; 537  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Find@C_TreeList@@QAEPAVTREELIST@@J@Z ENDP		; C_TreeList::Find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -8						; size = 4
_this$ = -4						; size = 4
_UserSlot$ = 8						; size = 4
_Age$ = 12						; size = 4
?RemoveOld@C_TreeList@@QAEXJJ@Z PROC			; C_TreeList::RemoveOld
; _this$ = ecx

; 705  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 706  : 	F4CSECTIONHANDLE *Leave;
; 707  : 
; 708  : 	Leave=UI_Enter(Parent_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 709  : 	RemoveOldBranch(UserSlot,Age,Root_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _Age$[ebp]
	push	ecx
	mov	edx, DWORD PTR _UserSlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveOldBranch@C_TreeList@@QAEXJJPAVTREELIST@@@Z ; C_TreeList::RemoveOldBranch

; 710  : 	UI_Leave(Leave);

	mov	eax, DWORD PTR _Leave$[ebp]
	push	eax
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 711  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveOld@C_TreeList@@QAEXJJ@Z ENDP			; C_TreeList::RemoveOld
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_UserSlot$ = 8						; size = 4
_Age$ = 12						; size = 4
_me$ = 16						; size = 4
?RemoveOldBranch@C_TreeList@@QAEXJJPAVTREELIST@@@Z PROC	; C_TreeList::RemoveOldBranch
; _this$ = ecx

; 667  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 668  : 	TREELIST *cur;
; 669  : 
; 670  : 	cur=me;

	mov	eax, DWORD PTR _me$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN11@RemoveOldB:

; 671  : 
; 672  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN12@RemoveOldB

; 673  : 	{
; 674  : 		me=cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _me$[ebp], ecx

; 675  : 		cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _cur$[ebp], eax

; 676  : 		if(me->Type_ != C_TYPE_INFO)

	mov	ecx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [ecx+4], 48			; 00000030H
	je	SHORT $LN9@RemoveOldB

; 677  : 		{
; 678  : 			if(me->Item_)

	mov	edx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN8@RemoveOldB

; 679  : 			{
; 680  : 				if(me->Item_->GetUserNumber(UserSlot) && me->Item_->GetUserNumber(UserSlot) != Age)

	mov	eax, DWORD PTR _UserSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	test	eax, eax
	je	SHORT $LN7@RemoveOldB
	mov	edx, DWORD PTR _UserSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	cmp	eax, DWORD PTR _Age$[ebp]
	je	SHORT $LN7@RemoveOldB

; 681  : 				{
; 682  : 					DeleteItem(me);

	mov	ecx, DWORD PTR _me$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteItem@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::DeleteItem

; 683  : 				}
; 684  : 				else

	jmp	SHORT $LN8@RemoveOldB
$LN7@RemoveOldB:

; 685  : 				{
; 686  : 					if(me->Child)

	mov	edx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN8@RemoveOldB

; 687  : 						RemoveOldBranch(UserSlot,Age,me->Child);

	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _Age$[ebp]
	push	edx
	mov	eax, DWORD PTR _UserSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveOldBranch@C_TreeList@@QAEXJJPAVTREELIST@@@Z ; C_TreeList::RemoveOldBranch
$LN8@RemoveOldB:

; 688  : 				}
; 689  : 			}
; 690  : 		}

	jmp	SHORT $LN4@RemoveOldB
$LN9@RemoveOldB:

; 691  : 		else if (me->Type_ == C_TYPE_INFO)

	mov	ecx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [ecx+4], 48			; 00000030H
	jne	SHORT $LN4@RemoveOldB

; 692  : 		{
; 693  : 			if (me->Item_)

	mov	edx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN4@RemoveOldB

; 694  : 			{
; 695  : 				if ((me->Item_->GetUserNumber(UserSlot)) && (me->Item_->GetUserNumber(UserSlot) < Age))

	mov	eax, DWORD PTR _UserSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	test	eax, eax
	je	SHORT $LN4@RemoveOldB
	mov	edx, DWORD PTR _UserSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	cmp	eax, DWORD PTR _Age$[ebp]
	jge	SHORT $LN4@RemoveOldB

; 696  : 				{
; 697  : 					DeleteItem (me);

	mov	ecx, DWORD PTR _me$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteItem@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::DeleteItem
$LN4@RemoveOldB:

; 698  : 				}
; 699  : 			}
; 700  : 		}
; 701  : 	}

	jmp	$LN11@RemoveOldB
$LN12@RemoveOldB:

; 702  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RemoveOldBranch@C_TreeList@@QAEXJJPAVTREELIST@@@Z ENDP	; C_TreeList::RemoveOldBranch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?GetFont@C_TreeList@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFont@C_TreeList@@UAEJXZ PROC			; C_TreeList::GetFont, COMDAT
; _this$ = ecx

; 110  : 		long GetFont() { return(Font_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFont@C_TreeList@@UAEJXZ ENDP			; C_TreeList::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?SetFont@C_TreeList@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetFont@C_TreeList@@UAEXJ@Z PROC			; C_TreeList::SetFont, COMDAT
; _this$ = ecx

; 109  : 		void SetFont(long ID) { Font_=ID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax+104], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFont@C_TreeList@@UAEXJ@Z ENDP			; C_TreeList::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?SetDefaultFlags@C_TreeList@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDefaultFlags@C_TreeList@@QAEXXZ PROC		; C_TreeList::SetDefaultFlags, COMDAT
; _this$ = ecx

; 106  : 		void SetDefaultFlags() { SetFlags(DefaultFlags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDefaultFlags@C_TreeList@@QAEXXZ ENDP		; C_TreeList::SetDefaultFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
tv79 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@C_TreeList@@UAEXXZ PROC			; C_TreeList::Cleanup
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	if(Root_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN2@Cleanup

; 163  : 	{
; 164  : 		DeleteBranch(Root_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBranch@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::DeleteBranch

; 165  : 		Root_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
$LN2@Cleanup:

; 166  : 	}
; 167  : 	if(Hash_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	je	SHORT $LN3@Cleanup

; 168  : 	{
; 169  : 		Hash_->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 170  : 		delete Hash_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@Cleanup
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN6@Cleanup
$LN5@Cleanup:
	mov	DWORD PTR tv79[ebp], 0
$LN6@Cleanup:

; 171  : 		Hash_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0
$LN3@Cleanup:

; 172  : 	}
; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@C_TreeList@@UAEXXZ ENDP			; C_TreeList::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenu@C_TreeList@@UAEJXZ PROC			; C_TreeList::GetMenu
; _this$ = ecx

; 655  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 	if(LastFound_ && LastFound_->Item_ && LastFound_->Item_->GetMenu())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN1@GetMenu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN1@GetMenu
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	test	eax, eax
	je	SHORT $LN1@GetMenu

; 657  : 		return(LastFound_->Item_->GetMenu());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	jmp	SHORT $LN2@GetMenu
$LN1@GetMenu:

; 658  :    return(C_Control::GetMenu());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMenu@C_Control@@UAEJXZ		; C_Control::GetMenu
$LN2@GetMenu:

; 659  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenu@C_TreeList@@UAEJXZ ENDP			; C_TreeList::GetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -8						; size = 4
_this$ = -4						; size = 4
_Parent$ = 8						; size = 4
_item$ = 12						; size = 4
?MoveChildItem@C_TreeList@@QAEXPAVTREELIST@@0@Z PROC	; C_TreeList::MoveChildItem
; _this$ = ecx

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 493  : 	F4CSECTIONHANDLE *Leave;
; 494  : 
; 495  : 	if(item && Parent && item != Parent)

	cmp	DWORD PTR _item$[ebp], 0
	je	$LN7@MoveChildI
	cmp	DWORD PTR _Parent$[ebp], 0
	je	$LN7@MoveChildI
	mov	eax, DWORD PTR _item$[ebp]
	cmp	eax, DWORD PTR _Parent$[ebp]
	je	$LN7@MoveChildI

; 496  : 	{
; 497  : 		Leave=UI_Enter(Parent_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 498  : 		if(item == Root_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jne	SHORT $LN5@MoveChildI

; 499  : 			Root_=item->Next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+136], ecx
$LN5@MoveChildI:

; 500  : 		if(item->Next)

	mov	edx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN4@MoveChildI

; 501  : 			item->Next->Prev=item->Prev;

	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
$LN4@MoveChildI:

; 502  : 		if(item->Prev)

	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@MoveChildI

; 503  : 			item->Prev->Next=item->Next;

	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
$LN3@MoveChildI:

; 504  : 		if(item->Parent && item->Parent->Child == item)

	mov	eax, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@MoveChildI
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR _item$[ebp]
	jne	SHORT $LN2@MoveChildI

; 505  : 			item->Parent->Child=item->Next;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+32], ecx
$LN2@MoveChildI:

; 506  : 		if(LastFound_ == item)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	eax, DWORD PTR _item$[ebp]
	jne	SHORT $LN1@MoveChildI

; 507  : 			LastFound_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0
$LN1@MoveChildI:

; 508  : 
; 509  : 		item->Next=NULL;

	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+28], 0

; 510  : 		item->Prev=NULL;

	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+24], 0

; 511  : 		item->Parent=NULL;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 512  : 
; 513  : 		AddChild(Parent,item);

	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChild@C_TreeList@@IAEXPAVTREELIST@@0@Z ; C_TreeList::AddChild

; 514  : 		UI_Leave(Leave);

	mov	ecx, DWORD PTR _Leave$[ebp]
	push	ecx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4
$LN7@MoveChildI:

; 515  : 	}
; 516  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?MoveChildItem@C_TreeList@@QAEXPAVTREELIST@@0@Z ENDP	; C_TreeList::MoveChildItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
_NewID$ = 12						; size = 4
?ChangeItemID@C_TreeList@@QAEHPAVTREELIST@@J@Z PROC	; C_TreeList::ChangeItemID
; _this$ = ecx

; 519  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 520  : 	if(!item || Find(NewID))

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN3@ChangeItem
	mov	eax, DWORD PTR _NewID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	test	eax, eax
	je	SHORT $LN4@ChangeItem
$LN3@ChangeItem:

; 521  : 		return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN5@ChangeItem
$LN4@ChangeItem:

; 522  : 
; 523  : 	if(item->Type_ != C_TYPE_INFO)

	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+4], 48			; 00000030H
	je	SHORT $LN2@ChangeItem

; 524  : 	{
; 525  : 		Hash_->Remove(item->ID_);

	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?Remove@C_Hash@@QAEXJ@Z			; C_Hash::Remove

; 526  : 		item->ID_=NewID;

	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _NewID$[ebp]
	mov	DWORD PTR [edx], eax

; 527  : 		Hash_->Add(NewID,item);

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?Add@C_Hash@@QAEXJPAX@Z			; C_Hash::Add

; 528  : 	}
; 529  : 	else

	jmp	SHORT $LN1@ChangeItem
$LN2@ChangeItem:

; 530  : 		item->ID_=NewID;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR _NewID$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@ChangeItem:

; 531  : 	return(TRUE);

	mov	eax, 1
$LN5@ChangeItem:

; 532  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeItemID@C_TreeList@@QAEHPAVTREELIST@@J@Z ENDP	; C_TreeList::ChangeItemID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -28						; size = 4
$T1 = -24						; size = 4
tv167 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_last$ = -8						; size = 4
_this$ = -4						; size = 4
_top$ = 8						; size = 4
?DeleteBranch@C_TreeList@@QAEXPAVTREELIST@@@Z PROC	; C_TreeList::DeleteBranch
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	TREELIST *last;
; 109  : 
; 110  : 	if(top == NULL)

	cmp	DWORD PTR _top$[ebp], 0
	jne	SHORT $LN14@DeleteBran

; 111  : 		return;

	jmp	$LN15@DeleteBran
$LN14@DeleteBran:

; 112  : 
; 113  : 	F4CSECTIONHANDLE* Leave=UI_Enter(Parent_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 114  : 	if(top == Root_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _top$[ebp]
	cmp	eax, DWORD PTR [edx+136]
	jne	SHORT $LN13@DeleteBran

; 115  : 		Root_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0
$LN13@DeleteBran:

; 116  : 
; 117  : 	if(top->Parent)

	mov	edx, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN11@DeleteBran

; 118  : 		top->Parent->Child=NULL;

	mov	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+32], 0
$LN11@DeleteBran:

; 119  : 
; 120  : 	while(top)

	cmp	DWORD PTR _top$[ebp], 0
	je	$LN10@DeleteBran

; 121  : 	{
; 122  : 		if(top->Child)

	mov	edx, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN9@DeleteBran

; 123  : 		{
; 124  : 			DeleteBranch(top->Child);

	mov	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBranch@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::DeleteBranch

; 125  : 			top->Child=NULL;

	mov	edx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN9@DeleteBran:

; 126  : 		}
; 127  : 		last=top;

	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _last$[ebp], eax

; 128  : 		top=top->Next;

	mov	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _top$[ebp], edx

; 129  : 
; 130  : 		if(last == LastActive_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _last$[ebp]
	cmp	ecx, DWORD PTR [eax+144]
	jne	SHORT $LN8@DeleteBran

; 131  : 			LastActive_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], 0
$LN8@DeleteBran:

; 132  : 		if(last == LastFound_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _last$[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jne	SHORT $LN7@DeleteBran

; 133  : 			LastFound_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 0
$LN7@DeleteBran:

; 134  : 		if(last == MouseFound_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _last$[ebp]
	cmp	ecx, DWORD PTR [eax+148]
	jne	SHORT $LN6@DeleteBran

; 135  : 			MouseFound_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN6@DeleteBran:

; 136  : 
; 137  : 		if(DelCallback_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN5@DeleteBran

; 138  : 			(*DelCallback_)(last);

	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	add	esp, 4
$LN5@DeleteBran:

; 139  : 		if(last->Item_)

	mov	ecx, DWORD PTR _last$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN4@DeleteBran

; 140  : 		{
; 141  : 			if(last->Item_->GetFlags() & C_BIT_REMOVE)

	mov	edx, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 67108864				; 04000000H
	je	SHORT $LN3@DeleteBran

; 142  : 			{
; 143  : 				if(Parent_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN2@DeleteBran

; 144  : 					Parent_->RemovingControl(last->Item_);

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RemovingControl@C_Window@@QAEXPAVC_Base@@@Z ; C_Window::RemovingControl
$LN2@DeleteBran:

; 145  : 				last->Item_->Cleanup();

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 146  : 				delete last->Item_;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN17@DeleteBran
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN18@DeleteBran
$LN17@DeleteBran:
	mov	DWORD PTR tv167[ebp], 0
$LN18@DeleteBran:

; 147  : 				last->Item_=NULL;

	mov	ecx, DWORD PTR _last$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 148  : 			}
; 149  : 			else

	jmp	SHORT $LN4@DeleteBran
$LN3@DeleteBran:

; 150  : 			{
; 151  : 				OutputDebugString("Hidi Ho");

	push	OFFSET ??_C@_07EFBCKMKG@Hidi?5Ho?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN4@DeleteBran:

; 152  : 			}
; 153  : 		}
; 154  : 		Hash_->Remove(last->ID_);

	mov	edx, DWORD PTR _last$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?Remove@C_Hash@@QAEXJ@Z			; C_Hash::Remove

; 155  : 		delete last;

	mov	edx, DWORD PTR _last$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 156  : 	}

	jmp	$LN11@DeleteBran
$LN10@DeleteBran:

; 157  : 	UI_Leave(Leave);

	mov	ecx, DWORD PTR _Leave$[ebp]
	push	ecx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4
$LN15@DeleteBran:

; 158  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteBranch@C_TreeList@@QAEXPAVTREELIST@@@Z ENDP	; C_TreeList::DeleteBranch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -24						; size = 4
$T1 = -20						; size = 4
tv194 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?DeleteItem@C_TreeList@@QAEXPAVTREELIST@@@Z PROC	; C_TreeList::DeleteItem
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 	if (!item){ return; }

	cmp	DWORD PTR _item$[ebp], 0
	jne	SHORT $LN14@DeleteItem
	jmp	$LN15@DeleteItem
$LN14@DeleteItem:

; 189  : 
; 190  : 	F4CSECTIONHANDLE *Leave;
; 191  : 	Leave=UI_Enter (Parent_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 192  : 
; 193  : 	if(LastFound_ == item){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	eax, DWORD PTR _item$[ebp]
	jne	SHORT $LN13@DeleteItem

; 194  : 		LastFound_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0
$LN13@DeleteItem:

; 195  : 	}
; 196  : 
; 197  : 	if( Root_ == item){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	cmp	eax, DWORD PTR _item$[ebp]
	jne	SHORT $LN12@DeleteItem

; 198  : 		Root_ = item->Next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+136], eax

; 199  : 		if (Root_){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	je	SHORT $LN12@DeleteItem

; 200  : 			Root_->Prev = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR [eax+24], 0
$LN12@DeleteItem:

; 201  : 		}
; 202  : 	}
; 203  : 
; 204  : 	if(Parent_){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN10@DeleteItem

; 205  : 		Parent_->RemovingControl(item->Item_);

	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?RemovingControl@C_Window@@QAEXPAVC_Base@@@Z ; C_Window::RemovingControl
$LN10@DeleteItem:

; 206  : 	}
; 207  : 
; 208  : 	if(item == LastActive_){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jne	SHORT $LN9@DeleteItem

; 209  : 		LastActive_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], 0
$LN9@DeleteItem:

; 210  : 	}
; 211  : 	if(item == LastFound_){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	cmp	eax, DWORD PTR [edx+140]
	jne	SHORT $LN8@DeleteItem

; 212  : 		LastFound_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0
$LN8@DeleteItem:

; 213  : 	}
; 214  : 	if(item == MouseFound_){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	cmp	eax, DWORD PTR [edx+148]
	jne	SHORT $LN7@DeleteItem

; 215  : 		MouseFound_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN7@DeleteItem:

; 216  : 	}
; 217  : 
; 218  : 	// sfr: remove JB hack and fix the child parent relations
; 219  : 	// FRB - removed
; 220  : //#define CTREE_FIX 1
; 221  : #if CTREE_FIX
; 222  : 	if ((item->Parent) && (item->Parent->Child == item)){
; 223  : 		item->Parent->Child = item->Next;
; 224  : 	}
; 225  : 	// sfr: shouldnt we also fix children stuff?
; 226  : 	if ((item->Child) && (item->Child->Parent == item)){
; 227  : 		item->Child->Parent = item->Parent;
; 228  : 	}
; 229  : #else
; 230  : 	if (!F4IsBadReadPtr(item->Parent, sizeof(TREELIST)) &&	// JB 010317 CTD
; 231  : 		!F4IsBadReadPtr(item->Parent->Child, sizeof(TREELIST)) && // M.N. 011209 CTD
; 232  : 		(item->Parent) && (item->Parent->Child == item)) 

	push	40					; 00000028H
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@DeleteItem
	push	40					; 00000028H
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@DeleteItem
	mov	eax, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN6@DeleteItem
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR _item$[ebp]
	jne	SHORT $LN6@DeleteItem

; 233  : 	{
; 234  : 		item->Parent->Child = item->Next;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+32], ecx
$LN6@DeleteItem:

; 235  : 	}
; 236  : #endif
; 237  : 
; 238  : 	if (item->Prev){

	mov	edx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN5@DeleteItem

; 239  : 		item->Prev->Next = item->Next;

	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
$LN5@DeleteItem:

; 240  : 	}
; 241  : 
; 242  : 	if (item->Next){

	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN4@DeleteItem

; 243  : 		item->Next->Prev = item->Prev;

	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
$LN4@DeleteItem:

; 244  : 	}
; 245  : 
; 246  : 	if(DelCallback_){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN3@DeleteItem

; 247  : 		(*DelCallback_)(item);

	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	add	esp, 4
$LN3@DeleteItem:

; 248  : 	}
; 249  : 
; 250  : 	if (item->Item_){

	mov	ecx, DWORD PTR _item$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN2@DeleteItem

; 251  : 		if(item->Item_->GetFlags() & C_BIT_REMOVE){

	mov	edx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 67108864				; 04000000H
	je	SHORT $LN2@DeleteItem

; 252  : 			item->Item_->Cleanup();

	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+176]
	call	edx

; 253  : 			delete item->Item_;

	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN17@DeleteItem
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv194[ebp], eax
	jmp	SHORT $LN2@DeleteItem
$LN17@DeleteItem:
	mov	DWORD PTR tv194[ebp], 0
$LN2@DeleteItem:

; 254  : 		}
; 255  : 	}
; 256  : 
; 257  : 	Hash_->Remove(item->ID_); // Note: This deletes item also

	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?Remove@C_Hash@@QAEXJ@Z			; C_Hash::Remove

; 258  : 	delete item;

	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 259  : 
; 260  : 	UI_Leave (Leave);

	mov	eax, DWORD PTR _Leave$[ebp]
	push	eax
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4
$LN15@DeleteItem:

; 261  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteItem@C_TreeList@@QAEXPAVTREELIST@@@Z ENDP	; C_TreeList::DeleteItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
?DeleteItem@C_TreeList@@QAEXJ@Z PROC			; C_TreeList::DeleteItem
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 	TREELIST *cur;
; 178  : 
; 179  : 	cur=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@C_TreeList@@QAEPAVTREELIST@@J@Z	; C_TreeList::Find
	mov	DWORD PTR _cur$[ebp], eax

; 180  : 	if(cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN1@DeleteItem

; 181  : 		return;

	jmp	SHORT $LN2@DeleteItem
$LN1@DeleteItem:

; 182  : 
; 183  : 	DeleteItem(cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteItem@C_TreeList@@QAEXPAVTREELIST@@@Z ; C_TreeList::DeleteItem
$LN2@DeleteItem:

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteItem@C_TreeList@@QAEXJ@Z ENDP			; C_TreeList::DeleteItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -8						; size = 4
_this$ = -4						; size = 4
_par$ = 8						; size = 4
_NewItem$ = 12						; size = 4
?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z PROC	; C_TreeList::AddChildItem
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 449  : 	if(par == NULL || Root_ == NULL || NewItem == NULL)

	cmp	DWORD PTR _par$[ebp], 0
	je	SHORT $LN6@AddChildIt
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN6@AddChildIt
	cmp	DWORD PTR _NewItem$[ebp], 0
	jne	SHORT $LN7@AddChildIt
$LN6@AddChildIt:

; 450  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN8@AddChildIt
$LN7@AddChildIt:

; 451  : 
; 452  : 	if(Hash_->Find(NewItem->ID_))

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?Find@C_Hash@@QAEPAXJ@Z			; C_Hash::Find
	test	eax, eax
	je	SHORT $LN5@AddChildIt

; 453  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN8@AddChildIt
$LN5@AddChildIt:

; 454  : 
; 455  : 	if(par->Type_ ==  C_TYPE_INFO) // No SUB items can be attached to this type

	mov	ecx, DWORD PTR _par$[ebp]
	cmp	DWORD PTR [ecx+4], 48			; 00000030H
	jne	SHORT $LN4@AddChildIt

; 456  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN8@AddChildIt
$LN4@AddChildIt:

; 457  : 
; 458  : 	if(!NewItem->Item_->GetCursorID())

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	test	eax, eax
	jne	SHORT $LN3@AddChildIt

; 459  : 		NewItem->Item_->SetCursorID(GetCursorID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+76]
	call	eax
$LN3@AddChildIt:

; 460  : 	if(!NewItem->Item_->GetDragCursorID())

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@AddChildIt

; 461  : 		NewItem->Item_->SetDragCursorID(GetDragCursorID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN2@AddChildIt:

; 462  : 
; 463  : 	F4CSECTIONHANDLE* Leave=UI_Enter(Parent_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 464  : 	if(NewItem->Type_ != C_TYPE_INFO)

	mov	eax, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [eax+4], 48			; 00000030H
	je	SHORT $LN1@AddChildIt

; 465  : 		Hash_->Add(NewItem->ID_,NewItem);

	mov	ecx, DWORD PTR _NewItem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?Add@C_Hash@@QAEXJPAX@Z			; C_Hash::Add
$LN1@AddChildIt:

; 466  : 	AddChild(par,NewItem);

	mov	edx, DWORD PTR _NewItem$[ebp]
	push	edx
	mov	eax, DWORD PTR _par$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChild@C_TreeList@@IAEXPAVTREELIST@@0@Z ; C_TreeList::AddChild

; 467  : 	UI_Leave(Leave);

	mov	ecx, DWORD PTR _Leave$[ebp]
	push	ecx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 468  : 	return(TRUE);

	mov	eax, 1
$LN8@AddChildIt:

; 469  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddChildItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ENDP	; C_TreeList::AddChildItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_Leave$ = -8						; size = 4
_this$ = -4						; size = 4
_current$ = 8						; size = 4
_NewItem$ = 12						; size = 4
?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z PROC		; C_TreeList::AddItem
; _this$ = ecx

; 472  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 473  : 	if((!current && Root_) || !NewItem || !NewItem->Item_)

	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN5@AddItem
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	jne	SHORT $LN6@AddItem
$LN5@AddItem:
	cmp	DWORD PTR _NewItem$[ebp], 0
	je	SHORT $LN6@AddItem
	mov	ecx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN7@AddItem
$LN6@AddItem:

; 474  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN8@AddItem
$LN7@AddItem:

; 475  : 
; 476  : 	if(Hash_->Find(NewItem->ID_))

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?Find@C_Hash@@QAEPAXJ@Z			; C_Hash::Find
	test	eax, eax
	je	SHORT $LN4@AddItem

; 477  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN8@AddItem
$LN4@AddItem:

; 478  : 
; 479  : 	if(!NewItem->Item_->GetCursorID())

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	test	eax, eax
	jne	SHORT $LN3@AddItem

; 480  : 		NewItem->Item_->SetCursorID(GetCursorID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+76]
	call	eax
$LN3@AddItem:

; 481  : 	if(!NewItem->Item_->GetDragCursorID())

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@AddItem

; 482  : 		NewItem->Item_->SetDragCursorID(GetDragCursorID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN2@AddItem:

; 483  : 	F4CSECTIONHANDLE* Leave=UI_Enter(Parent_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 484  : 	Add(current,NewItem);

	mov	eax, DWORD PTR _NewItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@C_TreeList@@IAEXPAVTREELIST@@0@Z	; C_TreeList::Add

; 485  : 	if(NewItem->Type_ != C_TYPE_INFO)

	mov	edx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [edx+4], 48			; 00000030H
	je	SHORT $LN1@AddItem

; 486  : 		Hash_->Add(NewItem->ID_,NewItem);

	mov	eax, DWORD PTR _NewItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?Add@C_Hash@@QAEXJPAX@Z			; C_Hash::Add
$LN1@AddItem:

; 487  : 	UI_Leave(Leave);

	mov	ecx, DWORD PTR _Leave$[ebp]
	push	ecx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 488  : 	return(TRUE);

	mov	eax, 1
$LN8@AddItem:

; 489  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddItem@C_TreeList@@QAEHPAVTREELIST@@0@Z ENDP		; C_TreeList::AddItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = -4						; size = 4
_top$ = 8						; size = 4
?FindVisible@C_TreeList@@QAEHPAVTREELIST@@@Z PROC	; C_TreeList::FindVisible
; _this$ = ecx

; 714  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 715  : 	TREELIST *item;
; 716  : 
; 717  : 	item=top;

	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _item$[ebp], eax
$LN3@FindVisibl:

; 718  : 	while(item)

	cmp	DWORD PTR _item$[ebp], 0
	je	SHORT $LN2@FindVisibl

; 719  : 	{
; 720  : 		if(!(item->Item_->GetFlags() & C_BIT_INVISIBLE))

	mov	ecx, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	SHORT $LN1@FindVisibl

; 721  : 			return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@FindVisibl
$LN1@FindVisibl:

; 722  : 		item=item->Next;

	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _item$[ebp], eax

; 723  : 	}

	jmp	SHORT $LN3@FindVisibl
$LN2@FindVisibl:

; 724  : 	return(FALSE);

	xor	eax, eax
$LN4@FindVisibl:

; 725  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindVisible@C_TreeList@@QAEHPAVTREELIST@@@Z ENDP	; C_TreeList::FindVisible
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
_NewItem$ = -4						; size = 4
_NewID$ = 8						; size = 4
_ItemType$ = 12						; size = 4
_Item$ = 16						; size = 4
?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z PROC ; C_TreeList::CreateItem
; _this$ = ecx

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 	TREELIST *NewItem;
; 266  : 
; 267  : 	if(Item == NULL)

	cmp	DWORD PTR _Item$[ebp], 0
	jne	SHORT $LN2@CreateItem

; 268  : 		return(NULL);

	xor	eax, eax
	jmp	$LN3@CreateItem
$LN2@CreateItem:

; 269  : 
; 270  : 	NewItem=new TREELIST;

	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _NewItem$[ebp], eax

; 271  : 	if(NewItem == NULL)

	cmp	DWORD PTR _NewItem$[ebp], 0
	jne	SHORT $LN1@CreateItem

; 272  : 		return(NULL);

	xor	eax, eax
	jmp	$LN3@CreateItem
$LN1@CreateItem:

; 273  : 
; 274  : 	NewItem->ID_=NewID;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _NewID$[ebp]
	mov	DWORD PTR [ecx], edx

; 275  : 	NewItem->Type_=ItemType;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _ItemType$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 276  : 	NewItem->state_=0; // Menu Open/Closed (Max Value is 1)

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+16], 0

; 277  : 	NewItem->Item_=Item;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _Item$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 278  : 	NewItem->x_ = NewItem->y_ = 0; // JPO set

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+8], 0

; 279  : 	Item->SetClient(GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _Item$[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 280  : 	Item->SetParent(Parent_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _Item$[ebp]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 281  : 	Item->SetSubParents(Parent_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _Item$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Item$[ebp]
	mov	eax, DWORD PTR [edx+172]
	call	eax

; 282  : 
; 283  : 	NewItem->Next=NULL;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 284  : 	NewItem->Prev=NULL;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+24], 0

; 285  : 	NewItem->Parent=NULL;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+36], 0

; 286  : 	NewItem->Child=NULL;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 287  : 	return(NewItem);

	mov	eax, DWORD PTR _NewItem$[ebp]
$LN3@CreateItem:

; 288  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateItem@C_TreeList@@QAEPAVTREELIST@@JJPAVC_Base@@@Z ENDP ; C_TreeList::CreateItem
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?SetMinYOffset@C_TreeList@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yoff$ = 8						; size = 4
?SetMinYOffset@C_TreeList@@QAEXJ@Z PROC			; C_TreeList::SetMinYOffset, COMDAT
; _this$ = ecx

; 90   : 		void SetMinYOffset(long yoff) { yoffset_=yoff; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _yoff$[ebp]
	mov	DWORD PTR [eax+116], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMinYOffset@C_TreeList@@QAEXJ@Z ENDP			; C_TreeList::SetMinYOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?SetXOffset@C_TreeList@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xoff$ = 8						; size = 4
?SetXOffset@C_TreeList@@QAEXJ@Z PROC			; C_TreeList::SetXOffset, COMDAT
; _this$ = ecx

; 89   : 		void SetXOffset(long xoff) { xoffset_=xoff; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xoff$[ebp]
	mov	DWORD PTR [eax+112], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetXOffset@C_TreeList@@QAEXJ@Z ENDP			; C_TreeList::SetXOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Closed$ = 8						; size = 4
_Open$ = 12						; size = 4
_Disd$ = 16						; size = 4
?SetImages@C_TreeList@@QAEXJJJ@Z PROC			; C_TreeList::SetImages
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	ChildImage_[0]=gImageMgr->GetImage(Closed);

	mov	eax, DWORD PTR _Closed$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gImageMgr@@3PAVC_Image@@A ; gImageMgr
	call	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z	; C_Image::GetImage
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+152], eax

; 102  : 	ChildImage_[1]=gImageMgr->GetImage(Open);

	mov	eax, DWORD PTR _Open$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gImageMgr@@3PAVC_Image@@A ; gImageMgr
	call	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z	; C_Image::GetImage
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+152], eax

; 103  : 	ChildImage_[2]=gImageMgr->GetImage(Disd);

	mov	eax, DWORD PTR _Disd$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gImageMgr@@3PAVC_Image@@A ; gImageMgr
	call	?GetImage@C_Image@@QAEPAVIMAGE_RSC@@J@Z	; C_Image::GetImage
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+152], eax

; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetImages@C_TreeList@@QAEXJJJ@Z ENDP			; C_TreeList::SetImages
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.h
;	COMDAT ?SetSortType@C_TreeList@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sortby$ = 8						; size = 2
?SetSortType@C_TreeList@@QAEXF@Z PROC			; C_TreeList::SetSortType, COMDAT
; _this$ = ecx

; 87   : 		void SetSortType(short sortby) { SortType_=sortby; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _sortby$[ebp]
	mov	WORD PTR [eax+108], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSortType@C_TreeList@@QAEXF@Z ENDP			; C_TreeList::SetSortType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv91 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_Type$ = 12						; size = 2
?Setup@C_TreeList@@QAEXJF@Z PROC			; C_TreeList::Setup
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@C_TreeList@@QAEXJF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	SetReady(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReady@C_Base@@QAEXF@Z		; C_Base::SetReady

; 92   : 	SetID(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetID@C_Base@@QAEXJ@Z			; C_Base::SetID

; 93   : 	SetType(Type);

	movzx	ecx, WORD PTR _Type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetType@C_Base@@QAEXF@Z		; C_Base::SetType

; 94   : 	SetDefaultFlags();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultFlags@C_TreeList@@QAEXXZ	; C_TreeList::SetDefaultFlags

; 95   : 	Hash_=new C_Hash;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@Setup
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_Hash@@QAE@XZ			; C_Hash::C_Hash
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN4@Setup
$LN3@Setup:
	mov	DWORD PTR tv91[ebp], 0
$LN4@Setup:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+132], ecx

; 96   : 	Hash_->Setup(512);

	push	512					; 00000200H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	call	?Setup@C_Hash@@QAEXJ@Z			; C_Hash::Setup

; 97   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@C_TreeList@@QAEXJF@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Setup@C_TreeList@@QAEXJF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@C_TreeList@@QAEXJF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@C_TreeList@@QAEXJF@Z ENDP			; C_TreeList::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@C_TreeList@@QAEJXZ PROC				; C_TreeList::Size
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	return(0);

	xor	eax, eax

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Size@C_TreeList@@QAEJXZ ENDP				; C_TreeList::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1C_TreeList@@UAE@XZ PROC				; C_TreeList::~C_TreeList
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1C_TreeList@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_TreeList@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 80   : 	if(Root_ || Hash_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	jne	SHORT $LN1@C_TreeList
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 0
	je	SHORT $LN3@C_TreeList
$LN1@C_TreeList:

; 81   : 		Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@C_TreeList@@UAEXXZ		; C_TreeList::Cleanup
$LN3@C_TreeList:

; 82   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Control@@UAE@XZ			; C_Control::~C_Control
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1C_TreeList@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1C_Control@@UAE@XZ			; C_Control::~C_Control
__ehhandler$??1C_TreeList@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1C_TreeList@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1C_TreeList@@UAE@XZ ENDP				; C_TreeList::~C_TreeList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fp$ = 8						; size = 4
??0C_TreeList@@QAE@PAU_iobuf@@@Z PROC			; C_TreeList::C_TreeList
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Control@@QAE@PAU_iobuf@@@Z		; C_Control::C_Control
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7C_TreeList@@6B@

; 76   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0C_TreeList@@QAE@PAU_iobuf@@@Z ENDP			; C_TreeList::C_TreeList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
??0C_TreeList@@QAE@PAPAD@Z PROC				; C_TreeList::C_TreeList
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Control@@QAE@PAPAD@Z		; C_Control::C_Control
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7C_TreeList@@6B@

; 72   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0C_TreeList@@QAE@PAPAD@Z ENDP				; C_TreeList::C_TreeList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0C_TreeList@@QAE@XZ PROC				; C_TreeList::C_TreeList
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0C_TreeList@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Control@@QAE@XZ			; C_Control::C_Control
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_TreeList@@6B@

; 50   : 	_SetCType_(_CNTL_TREELIST_);

	push	16397					; 0000400dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_SetCType_@C_Base@@QAEXF@Z		; C_Base::_SetCType_

; 51   : 	Root_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 52   : 	Hash_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 53   : 	ChildImage_[0]=NULL;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+152], 0

; 54   : 	ChildImage_[1]=NULL;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+152], 0

; 55   : 	ChildImage_[2]=NULL;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+152], 0

; 56   : 	xoffset_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0

; 57   : 	yoffset_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], 0

; 58   : 	treew_=0;treeh_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 0

; 59   : 	CheckFlag_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+120], cx

; 60   : 	LastActive_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0

; 61   : 	LastFound_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0

; 62   : 	MouseFound_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+148], 0

; 63   : 	DelCallback_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0

; 64   : 	SearchCB_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 0

; 65   : 	SortCB_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], 0

; 66   : 	SortType_=TREE_SORT_BY_ID;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+108], ax

; 67   : 	DefaultFlags_=C_BIT_ENABLED|C_BIT_REMOVE|C_BIT_SELECTABLE|C_BIT_MOUSEOVER;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 336070656		; 14080800H

; 68   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0C_TreeList@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1C_Control@@UAE@XZ			; C_Control::~C_Control
__ehhandler$??0C_TreeList@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0C_TreeList@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0C_TreeList@@QAE@XZ ENDP				; C_TreeList::C_TreeList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_par$ = 8						; size = 4
_NewItem$ = 12						; size = 4
?AddChild@C_TreeList@@IAEXPAVTREELIST@@0@Z PROC		; C_TreeList::AddChild
; _this$ = ecx

; 437  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 438  : 	if(par->Child == NULL)

	mov	eax, DWORD PTR _par$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN2@AddChild

; 439  : 	{
; 440  : 		par->Child=NewItem;

	mov	ecx, DWORD PTR _par$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 441  : 		NewItem->Parent=par;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _par$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 442  : 	}
; 443  : 	else

	jmp	SHORT $LN3@AddChild
$LN2@AddChild:

; 444  : 		Add(par->Child,NewItem);

	mov	edx, DWORD PTR _NewItem$[ebp]
	push	edx
	mov	eax, DWORD PTR _par$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@C_TreeList@@IAEXPAVTREELIST@@0@Z	; C_TreeList::Add
$LN3@AddChild:

; 445  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddChild@C_TreeList@@IAEXPAVTREELIST@@0@Z ENDP		; C_TreeList::AddChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
_NewItem$ = 12						; size = 4
?Add@C_TreeList@@IAEXPAVTREELIST@@0@Z PROC		; C_TreeList::Add
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 	if(Root_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	jne	SHORT $LN48@Add

; 293  : 	{
; 294  : 		Root_=NewItem;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+136], edx

; 295  : 	}
; 296  : 	else

	jmp	$LN51@Add
$LN48@Add:

; 297  : 	{
; 298  : 		while(current->Next && current->Type_ < NewItem->Type_)

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN47@Add
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN47@Add

; 299  : 			current=current->Next;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _current$[ebp], edx
	jmp	SHORT $LN48@Add
$LN47@Add:

; 300  : 		if(SortType_ == TREE_SORT_BY_ID)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+108]
	cmp	ecx, 1
	jne	$LN46@Add
$LN45@Add:

; 301  : 		{
; 302  : 			while(current->Next && current->ID_ <= NewItem->ID_)

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN44@Add
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN44@Add

; 303  : 				current=current->Next;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _current$[ebp], ecx
	jmp	SHORT $LN45@Add
$LN44@Add:

; 304  : 
; 305  : 			if(NewItem->Type_ < current->Type_)

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN43@Add

; 306  : 			{
; 307  : 				if(Root_ == current)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	cmp	eax, DWORD PTR _current$[ebp]
	jne	SHORT $LN42@Add

; 308  : 					Root_=NewItem;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+136], edx
$LN42@Add:

; 309  : 
; 310  : 				NewItem->Parent=current->Parent;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 311  : 				NewItem->Prev=current->Prev;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 312  : 				if(NewItem->Prev)

	mov	eax, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN41@Add

; 313  : 					NewItem->Prev->Next=NewItem;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN41@Add:

; 314  : 				NewItem->Next=current;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 315  : 				if(current->Parent && !current->Prev)

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN40@Add
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN40@Add

; 316  : 					current->Parent->Child=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN40@Add:

; 317  : 				current->Prev=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+24], eax
	jmp	$LN39@Add
$LN43@Add:

; 318  : 			}
; 319  : 			else if(NewItem->Type_ == current->Type_ && NewItem->ID_ < current->ID_)

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jne	$LN38@Add
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jge	$LN38@Add

; 320  : 			{ // Insert before
; 321  : 				if(current->Parent && current->Parent->Child == current)

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN37@Add
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _current$[ebp]
	jne	SHORT $LN37@Add

; 322  : 					current->Parent->Child=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN37@Add:

; 323  : 
; 324  : 				if(Root_ == current)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	cmp	eax, DWORD PTR _current$[ebp]
	jne	SHORT $LN36@Add

; 325  : 					Root_=NewItem;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+136], edx
$LN36@Add:

; 326  : 
; 327  : 				NewItem->Parent=current->Parent;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 328  : 				NewItem->Prev=current->Prev;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 329  : 				if(NewItem->Prev)

	mov	eax, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN35@Add

; 330  : 					NewItem->Prev->Next=NewItem;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN35@Add:

; 331  : 				NewItem->Next=current;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 332  : 				if(current->Parent && !current->Prev)

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN34@Add
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN34@Add

; 333  : 					current->Parent->Child=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN34@Add:

; 334  : 				current->Prev=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+24], eax

; 335  : 			}
; 336  : 			else

	jmp	SHORT $LN39@Add
$LN38@Add:

; 337  : 			{ // Insert After
; 338  : 				NewItem->Parent=current->Parent;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax

; 339  : 				NewItem->Prev=current;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 340  : 				NewItem->Next=current->Next;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 341  : 				current->Next=NewItem;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 342  : 				if(NewItem->Next)

	mov	edx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN39@Add

; 343  : 					NewItem->Next->Prev=NewItem;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN39@Add:

; 344  : 			}

	jmp	$LN51@Add
$LN46@Add:

; 345  : 		}
; 346  : 		else if(SortType_ == TREE_SORT_BY_ITEM_ID)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+108]
	cmp	ecx, 2
	jne	$LN30@Add
$LN29@Add:

; 347  : 		{
; 348  : 			while(current->Next && current->Item_->GetID() <= NewItem->Item_->GetID())

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN28@Add
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	mov	esi, eax
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	cmp	esi, eax
	jg	SHORT $LN28@Add

; 349  : 				current=current->Next;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _current$[ebp], eax
	jmp	SHORT $LN29@Add
$LN28@Add:

; 350  : 
; 351  : 			if(NewItem->Type_ < current->Type_)

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN27@Add

; 352  : 			{
; 353  : 				if(Root_ == current)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	cmp	edx, DWORD PTR _current$[ebp]
	jne	SHORT $LN26@Add

; 354  : 					Root_=NewItem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+136], ecx
$LN26@Add:

; 355  : 
; 356  : 				NewItem->Parent=current->Parent;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx

; 357  : 				NewItem->Prev=current->Prev;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 358  : 				if(NewItem->Prev)

	mov	edx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN25@Add

; 359  : 					NewItem->Prev->Next=NewItem;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN25@Add:

; 360  : 				NewItem->Next=current;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 361  : 				if(current->Parent && !current->Prev)

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN24@Add
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN24@Add

; 362  : 					current->Parent->Child=NewItem;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN24@Add:

; 363  : 				current->Prev=NewItem;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+24], edx
	jmp	$LN23@Add
$LN27@Add:

; 364  : 			}
; 365  : 			else if(NewItem->Type_ == current->Type_ && NewItem->Item_->GetID() < current->Item_->GetID())

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	$LN22@Add
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	mov	esi, eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetID@C_Base@@QAEJXZ			; C_Base::GetID
	cmp	esi, eax
	jge	$LN22@Add

; 366  : 			{ // Insert before
; 367  : 				if(current->Parent && current->Parent->Child == current)

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN21@Add
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+32]
	cmp	edx, DWORD PTR _current$[ebp]
	jne	SHORT $LN21@Add

; 368  : 					current->Parent->Child=NewItem;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+32], edx
$LN21@Add:

; 369  : 
; 370  : 				if(Root_ == current)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	cmp	ecx, DWORD PTR _current$[ebp]
	jne	SHORT $LN20@Add

; 371  : 					Root_=NewItem;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+136], eax
$LN20@Add:

; 372  : 
; 373  : 				NewItem->Parent=current->Parent;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax

; 374  : 				NewItem->Prev=current->Prev;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax

; 375  : 				if(NewItem->Prev)

	mov	ecx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN19@Add

; 376  : 					NewItem->Prev->Next=NewItem;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN19@Add:

; 377  : 				NewItem->Next=current;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx+28], eax

; 378  : 				if(current->Parent && !current->Prev)

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN18@Add
	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN18@Add

; 379  : 					current->Parent->Child=NewItem;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+32], edx
$LN18@Add:

; 380  : 				current->Prev=NewItem;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 381  : 			}
; 382  : 			else

	jmp	SHORT $LN23@Add
$LN22@Add:

; 383  : 			{ // Insert After
; 384  : 				NewItem->Parent=current->Parent;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx

; 385  : 				NewItem->Prev=current;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx+24], eax

; 386  : 				NewItem->Next=current->Next;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax

; 387  : 				current->Next=NewItem;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 388  : 				if(NewItem->Next)

	mov	eax, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN23@Add

; 389  : 					NewItem->Next->Prev=NewItem;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN23@Add:

; 390  : 			}

	jmp	$LN51@Add
$LN30@Add:

; 391  : 		}
; 392  : 		else if(SortType_ == TREE_SORT_CALLBACK && SortCB_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+108]
	cmp	edx, 3
	jne	$LN2@Add
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	$LN2@Add
$LN13@Add:

; 393  : 		{
; 394  : 			while(current->Next && !(*SortCB_)(current,NewItem))

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN12@Add
	mov	edx, DWORD PTR _NewItem$[ebp]
	push	edx
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@Add

; 395  : 				current=current->Next;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _current$[ebp], ecx
	jmp	SHORT $LN13@Add
$LN12@Add:

; 396  : 
; 397  : 			if((NewItem->Type_ < current->Type_) || (NewItem->Type_ == current->Type_ && (*SortCB_)(current,NewItem)))

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN10@Add
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	$LN11@Add
	mov	edx, DWORD PTR _NewItem$[ebp]
	push	edx
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 8
	test	eax, eax
	je	$LN11@Add
$LN10@Add:

; 398  : 			{ // Insert before
; 399  : 				if(current->Parent && current->Parent->Child == current)

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN9@Add
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR _current$[ebp]
	jne	SHORT $LN9@Add

; 400  : 					current->Parent->Child=NewItem;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN9@Add:

; 401  : 
; 402  : 				if(Root_ == current)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	cmp	edx, DWORD PTR _current$[ebp]
	jne	SHORT $LN8@Add

; 403  : 					Root_=NewItem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+136], ecx
$LN8@Add:

; 404  : 
; 405  : 				NewItem->Parent=current->Parent;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], ecx

; 406  : 				NewItem->Prev=current->Prev;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 407  : 				if(NewItem->Prev)

	mov	edx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN7@Add

; 408  : 					NewItem->Prev->Next=NewItem;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN7@Add:

; 409  : 				NewItem->Next=current;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 410  : 				if(current->Parent && !current->Prev)

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN6@Add
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN6@Add

; 411  : 					current->Parent->Child=NewItem;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN6@Add:

; 412  : 				current->Prev=NewItem;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 413  : 			}
; 414  : 			else

	jmp	SHORT $LN5@Add
$LN11@Add:

; 415  : 			{ // Insert After
; 416  : 				NewItem->Parent=current->Parent;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 417  : 				NewItem->Prev=current;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 418  : 				NewItem->Next=current->Next;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx

; 419  : 				current->Next=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+28], eax

; 420  : 				if(NewItem->Next)

	mov	ecx, DWORD PTR _NewItem$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN5@Add

; 421  : 					NewItem->Next->Prev=NewItem;

	mov	edx, DWORD PTR _NewItem$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN5@Add:

; 422  : 			}
; 423  : 		}
; 424  : 		else

	jmp	SHORT $LN51@Add
$LN2@Add:

; 425  : 		{
; 426  : 			while(current->Next)

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN1@Add

; 427  : 				current=current->Next;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _current$[ebp], ecx
	jmp	SHORT $LN2@Add
$LN1@Add:

; 428  : 
; 429  : 			current->Next=NewItem;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	DWORD PTR [edx+28], eax

; 430  : 			NewItem->Prev=current;

	mov	ecx, DWORD PTR _NewItem$[ebp]
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 431  : 			NewItem->Parent=current->Parent;

	mov	eax, DWORD PTR _NewItem$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
$LN51@Add:

; 432  : 		}
; 433  : 	}
; 434  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@C_TreeList@@IAEXPAVTREELIST@@0@Z ENDP		; C_TreeList::Add
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_me$ = 8						; size = 4
?SetControlParents@C_TreeList@@IAEXPAVTREELIST@@@Z PROC	; C_TreeList::SetControlParents
; _this$ = ecx

; 1081 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@SetControl:

; 1082 : 	while(me)

	cmp	DWORD PTR _me$[ebp], 0
	je	SHORT $LN5@SetControl

; 1083 : 	{
; 1084 : 		if(me->Item_)

	mov	eax, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@SetControl

; 1085 : 		{
; 1086 : 			me->Item_->SetParent(Parent_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?SetParent@C_Base@@QAEXPAVC_Window@@@Z	; C_Base::SetParent

; 1087 : 			me->Item_->SetClient(GetClient());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 1088 : 			me->Item_->SetSubParents(Parent_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+172]
	call	eax
$LN2@SetControl:

; 1089 : 		}
; 1090 : 
; 1091 : 		if(me->Child)

	mov	ecx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN1@SetControl

; 1092 : 			SetControlParents(me->Child);

	mov	edx, DWORD PTR _me$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetControlParents@C_TreeList@@IAEXPAVTREELIST@@@Z ; C_TreeList::SetControlParents
$LN1@SetControl:

; 1093 : 
; 1094 : 		me=me->Next;

	mov	ecx, DWORD PTR _me$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _me$[ebp], edx

; 1095 : 	}

	jmp	SHORT $LN4@SetControl
$LN5@SetControl:

; 1096 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetControlParents@C_TreeList@@IAEXPAVTREELIST@@@Z ENDP	; C_TreeList::SetControlParents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_this$ = -4						; size = 4
_me$ = 8						; size = 4
?FindItemWithCB@C_TreeList@@IAEPAVTREELIST@@PAV2@@Z PROC ; C_TreeList::FindItemWithCB
; _this$ = ecx

; 559  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 	TREELIST *tmp;
; 561  : 
; 562  : 	if(me == NULL)

	cmp	DWORD PTR _me$[ebp], 0
	jne	SHORT $LN6@FindItemWi

; 563  : 		me=Root_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _me$[ebp], ecx
$LN6@FindItemWi:

; 564  : 
; 565  : 	if(me == NULL)

	cmp	DWORD PTR _me$[ebp], 0
	jne	SHORT $LN5@FindItemWi

; 566  : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN7@FindItemWi
$LN5@FindItemWi:

; 567  : 
; 568  : 	if((*SearchCB_)(me))

	mov	edx, DWORD PTR _me$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	ecx
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@FindItemWi

; 569  : 		return(me);

	mov	eax, DWORD PTR _me$[ebp]
	jmp	SHORT $LN7@FindItemWi
$LN4@FindItemWi:

; 570  : 
; 571  : 	if(me->Child)

	mov	edx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN3@FindItemWi

; 572  : 	{
; 573  : 		tmp=FindItemWithCB(me->Child);

	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindItemWithCB@C_TreeList@@IAEPAVTREELIST@@PAV2@@Z ; C_TreeList::FindItemWithCB
	mov	DWORD PTR _tmp$[ebp], eax

; 574  : 		if(tmp)

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN3@FindItemWi

; 575  : 			return(tmp);

	mov	eax, DWORD PTR _tmp$[ebp]
	jmp	SHORT $LN7@FindItemWi
$LN3@FindItemWi:

; 576  : 	}
; 577  : 
; 578  : 	if(me->Next)

	mov	edx, DWORD PTR _me$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN1@FindItemWi

; 579  : 		return(FindItemWithCB(me->Next));

	mov	eax, DWORD PTR _me$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindItemWithCB@C_TreeList@@IAEPAVTREELIST@@PAV2@@Z ; C_TreeList::FindItemWithCB
	jmp	SHORT $LN7@FindItemWi
$LN1@FindItemWi:

; 580  : 	return(NULL);

	xor	eax, eax
$LN7@FindItemWi:

; 581  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindItemWithCB@C_TreeList@@IAEPAVTREELIST@@PAV2@@Z ENDP ; C_TreeList::FindItemWithCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_tmp$ = -12						; size = 4
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_me$ = 8						; size = 4
_mx$ = 12						; size = 4
_my$ = 16						; size = 4
?CheckBranch@C_TreeList@@IAEPAVTREELIST@@PAV2@JJ@Z PROC	; C_TreeList::CheckBranch
; _this$ = ecx

; 761  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 762  : 	TREELIST *cur,*tmp;
; 763  : 
; 764  : 	cur=me;

	mov	eax, DWORD PTR _me$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN8@CheckBranc:

; 765  : 
; 766  : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN7@CheckBranc

; 767  : 	{
; 768  : 		if(cur->Item_ && !(cur->Item_->GetFlags() & C_BIT_INVISIBLE))

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN6@CheckBranc
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	$LN6@CheckBranc

; 769  : 		{
; 770  : 			if(cur->Child && ChildImage_[0] && FindVisible(cur->Child))

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	$LN5@CheckBranc
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+152], 0
	je	$LN5@CheckBranc
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindVisible@C_TreeList@@QAEHPAVTREELIST@@@Z ; C_TreeList::FindVisible
	test	eax, eax
	je	SHORT $LN5@CheckBranc

; 771  : 			{
; 772  : 				if(mx >= (cur->x_+2) && mx <= (cur->x_ + (ChildImage_[0]->Header->w)) &&
; 773  : 					my >= (cur->y_+2) && my <= (cur->y_ + ChildImage_[0]->Header->h))

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 2
	cmp	DWORD PTR _mx$[ebp], eax
	jl	SHORT $LN5@CheckBranc
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+152]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx+44]
	mov	eax, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR [eax+8]
	cmp	DWORD PTR _mx$[ebp], edx
	jg	SHORT $LN5@CheckBranc
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	cmp	DWORD PTR _my$[ebp], edx
	jl	SHORT $LN5@CheckBranc
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+152]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+46]
	mov	edx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR [edx+12]
	cmp	DWORD PTR _my$[ebp], ecx
	jg	SHORT $LN5@CheckBranc

; 774  : 				{
; 775  : 						CheckFlag_=C_TYPE_MENU;

	mov	eax, 49					; 00000031H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+120], ax

; 776  : 						return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN9@CheckBranc
$LN5@CheckBranc:

; 777  : 				}
; 778  : 			}
; 779  : 
; 780  : 			if(cur->Item_->CheckHotSpots(mx,my))

	mov	edx, DWORD PTR _my$[ebp]
	push	edx
	mov	eax, DWORD PTR _mx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN3@CheckBranc

; 781  : 			{
; 782  : 				CheckFlag_=C_TYPE_ITEM;

	mov	ecx, 50					; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+120], cx

; 783  : 				return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN9@CheckBranc
$LN3@CheckBranc:

; 784  : 			}
; 785  : 
; 786  : 			if(cur->state_ && cur->Child)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@CheckBranc
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN6@CheckBranc

; 787  : 			{
; 788  : 				tmp=CheckBranch(cur->Child,mx,my);

	mov	edx, DWORD PTR _my$[ebp]
	push	edx
	mov	eax, DWORD PTR _mx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBranch@C_TreeList@@IAEPAVTREELIST@@PAV2@JJ@Z ; C_TreeList::CheckBranch
	mov	DWORD PTR _tmp$[ebp], eax

; 789  : 				if(tmp)

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN6@CheckBranc

; 790  : 					return(tmp);

	mov	eax, DWORD PTR _tmp$[ebp]
	jmp	SHORT $LN9@CheckBranc
$LN6@CheckBranc:

; 791  : 			}
; 792  : 		}
; 793  : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx

; 794  : 	}

	jmp	$LN8@CheckBranc
$LN7@CheckBranc:

; 795  : 	return(NULL);

	xor	eax, eax
$LN9@CheckBranc:

; 796  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CheckBranch@C_TreeList@@IAEPAVTREELIST@@PAV2@JJ@Z ENDP	; C_TreeList::CheckBranch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_doit$ = -48						; size = 4
_current$ = -44						; size = 4
_this$ = -40						; size = 4
_src$ = -36						; size = 16
_dest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_surface$ = 8						; size = 4
_branch$ = 12						; size = 4
_cliprect$ = 16						; size = 4
?DrawBranch@C_TreeList@@IAEXPAVSCREEN@@PAVTREELIST@@PAUUI95_RECT@@@Z PROC ; C_TreeList::DrawBranch
; _this$ = ecx

; 945  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 946  : 	TREELIST *current;
; 947  : 	UI95_RECT src,dest;
; 948  : 	BOOL doit;
; 949  : 
; 950  : 	current=branch;

	mov	eax, DWORD PTR _branch$[ebp]
	mov	DWORD PTR _current$[ebp], eax
$LN19@DrawBranch:

; 951  : 	while(current)

	cmp	DWORD PTR _current$[ebp], 0
	je	$LN18@DrawBranch

; 952  : 	{
; 953  : 		if(current->Item_ && !(current->Item_->GetFlags() & C_BIT_INVISIBLE))

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN17@DrawBranch
	mov	edx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	$LN17@DrawBranch

; 954  : 		{
; 955  : 			if(Parent_->InsideClientHeight(current->y_-current->Item_->GetH(),current->y_+current->Item_->GetH(),GetClient()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	mov	edx, DWORD PTR _current$[ebp]
	add	eax, DWORD PTR [edx+12]
	push	eax
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?InsideClientHeight@C_Window@@QAEHJJJ@Z	; C_Window::InsideClientHeight
	test	eax, eax
	je	$LN16@DrawBranch

; 956  : 			{
; 957  : 				if(current->Type_ != C_TYPE_INFO)

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+4], 48			; 00000030H
	je	$LN15@DrawBranch

; 958  : 				{
; 959  : 					if(current->Child && FindVisible(current->Child))

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	$LN14@DrawBranch
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindVisible@C_TreeList@@QAEHPAVTREELIST@@@Z ; C_TreeList::FindVisible
	test	eax, eax
	je	$LN14@DrawBranch

; 960  : 					{
; 961  : 						if(ChildImage_[current->state_])

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+152], 0
	je	$LN14@DrawBranch

; 962  : 						{
; 963  : 							src.left=0;

	mov	DWORD PTR _src$[ebp], 0

; 964  : 							src.top=0;

	mov	DWORD PTR _src$[ebp+4], 0

; 965  : 							src.right=ChildImage_[current->state_]->Header->w;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+152]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+44]
	mov	DWORD PTR _src$[ebp+8], ecx

; 966  : 							src.bottom=ChildImage_[current->state_]->Header->h;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+152]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, WORD PTR [eax+46]
	mov	DWORD PTR _src$[ebp+12], ecx

; 967  : 
; 968  : 							dest.left=current->x_+2;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 2
	mov	DWORD PTR _dest$[ebp], eax

; 969  : 							if(Flags_ & C_BIT_VCENTER)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1024				; 00000400H
	je	SHORT $LN12@DrawBranch

; 970  : 								dest.top=current->y_+current->Item_->GetH()/2-(src.bottom-src.top)/2;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, eax
	mov	eax, DWORD PTR _src$[ebp+12]
	sub	eax, DWORD PTR _src$[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ecx, eax
	mov	DWORD PTR _dest$[ebp+4], ecx

; 971  : 							else

	jmp	SHORT $LN11@DrawBranch
$LN12@DrawBranch:

; 972  : 								dest.top=current->y_+2;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 2
	mov	DWORD PTR _dest$[ebp+4], eax
$LN11@DrawBranch:

; 973  : 							dest.right=dest.left + src.right - src.left;

	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, DWORD PTR _src$[ebp+8]
	sub	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _dest$[ebp+8], ecx

; 974  : 							dest.bottom=dest.top + src.bottom - src.top;

	mov	edx, DWORD PTR _dest$[ebp+4]
	add	edx, DWORD PTR _src$[ebp+12]
	sub	edx, DWORD PTR _src$[ebp+4]
	mov	DWORD PTR _dest$[ebp+12], edx

; 975  : 
; 976  : 							doit=TRUE;

	mov	DWORD PTR _doit$[ebp], 1

; 977  : 							if(GetFlags() & C_BIT_ABSOLUTE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 262144				; 00040000H
	je	SHORT $LN10@DrawBranch

; 978  : 							{
; 979  : 								if(!Parent_->ClipToArea(&src,&dest,&Parent_->Area_))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 112				; 00000070H
	push	ecx
	lea	edx, DWORD PTR _dest$[ebp]
	push	edx
	lea	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN9@DrawBranch

; 980  : 									doit=FALSE;

	mov	DWORD PTR _doit$[ebp], 0
$LN9@DrawBranch:

; 981  : 							}
; 982  : 							else

	jmp	$LN8@DrawBranch
$LN10@DrawBranch:

; 983  : 							{
; 984  : 								dest.left+=Parent_->VX_[GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, DWORD PTR [esi+eax*4+480]
	mov	DWORD PTR _dest$[ebp], ecx

; 985  : 								dest.top+=Parent_->VY_[GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$[ebp+4]
	add	ecx, DWORD PTR [esi+eax*4+512]
	mov	DWORD PTR _dest$[ebp+4], ecx

; 986  : 								dest.right+=Parent_->VX_[GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$[ebp+8]
	add	ecx, DWORD PTR [esi+eax*4+480]
	mov	DWORD PTR _dest$[ebp+8], ecx

; 987  : 								dest.bottom+=Parent_->VY_[GetClient()];

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	mov	ecx, DWORD PTR _dest$[ebp+12]
	add	ecx, DWORD PTR [esi+eax*4+512]
	mov	DWORD PTR _dest$[ebp+12], ecx

; 988  : 								if(!Parent_->ClipToArea(&src,&dest,&Parent_->ClientArea_[GetClient()]))

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClient@C_Base@@QAEFXZ		; C_Base::GetClient
	cwde
	shl	eax, 4
	lea	ecx, DWORD PTR [esi+eax+168]
	push	ecx
	lea	edx, DWORD PTR _dest$[ebp]
	push	edx
	lea	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN8@DrawBranch

; 989  : 									doit=FALSE;

	mov	DWORD PTR _doit$[ebp], 0
$LN8@DrawBranch:

; 990  : 							}
; 991  : 
; 992  : 							if(!Parent_->ClipToArea(&src,&dest,cliprect))

	mov	edx, DWORD PTR _cliprect$[ebp]
	push	edx
	lea	eax, DWORD PTR _dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?ClipToArea@C_Window@@QAEHPAUUI95_RECT@@00@Z ; C_Window::ClipToArea
	test	eax, eax
	jne	SHORT $LN6@DrawBranch

; 993  : 								doit=FALSE;

	mov	DWORD PTR _doit$[ebp], 0
$LN6@DrawBranch:

; 994  : 
; 995  : 							if(doit)

	cmp	DWORD PTR _doit$[ebp], 0
	je	$LN14@DrawBranch

; 996  : 							{
; 997  : 								dest.left+=Parent_->GetX();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dest$[ebp], ecx

; 998  : 								dest.top+=Parent_->GetY();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	cwde
	add	eax, DWORD PTR _dest$[ebp+4]
	mov	DWORD PTR _dest$[ebp+4], eax

; 999  : 								dest.right+=Parent_->GetX();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?GetX@C_Window@@QAEFXZ			; C_Window::GetX
	movsx	edx, ax
	add	edx, DWORD PTR _dest$[ebp+8]
	mov	DWORD PTR _dest$[ebp+8], edx

; 1000 : 								dest.bottom+=Parent_->GetY();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?GetY@C_Window@@QAEFXZ			; C_Window::GetY
	movsx	ecx, ax
	add	ecx, DWORD PTR _dest$[ebp+12]
	mov	DWORD PTR _dest$[ebp+12], ecx

; 1001 : 
; 1002 : 								ChildImage_[current->state_]->Blit(surface,src.left,src.top,src.right-src.left,src.bottom-src.top,
; 1003 : 											dest.left,dest.top);

	mov	edx, DWORD PTR _dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp+12]
	sub	ecx, DWORD PTR _src$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp+8]
	sub	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+152]
	call	?Blit@IMAGE_RSC@@QAEXPAVSCREEN@@JJJJJJ@Z ; IMAGE_RSC::Blit
$LN14@DrawBranch:

; 1004 : 							}
; 1005 : 						}
; 1006 : 					}
; 1007 : 					current->Item_->Draw(surface,cliprect);

	mov	eax, DWORD PTR _cliprect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _surface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 1008 : 				}
; 1009 : 				else

	jmp	SHORT $LN16@DrawBranch
$LN15@DrawBranch:

; 1010 : 					current->Item_->Draw(surface,cliprect);

	mov	ecx, DWORD PTR _cliprect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+164]
	call	edx
$LN16@DrawBranch:

; 1011 : 			}
; 1012 : 			if(current->state_ && current->Child)

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN17@DrawBranch
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN17@DrawBranch

; 1013 : 				DrawBranch(surface,current->Child,cliprect);

	mov	edx, DWORD PTR _cliprect$[ebp]
	push	edx
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBranch@C_TreeList@@IAEXPAVSCREEN@@PAVTREELIST@@PAUUI95_RECT@@@Z ; C_TreeList::DrawBranch
$LN17@DrawBranch:

; 1014 : 		}
; 1015 : 		current=current->Next;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _current$[ebp], ecx

; 1016 : 	}

	jmp	$LN19@DrawBranch
$LN18@DrawBranch:

; 1017 : 	if(MouseOver_ || (GetFlags() & C_BIT_FORCEMOUSEOVER))

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+82]
	test	eax, eax
	jne	SHORT $LN1@DrawBranch
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 16384				; 00004000H
	je	SHORT $LN20@DrawBranch
$LN1@DrawBranch:

; 1018 : 		HighLite(surface,cliprect);

	mov	ecx, DWORD PTR _cliprect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surface$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
$LN20@DrawBranch:

; 1019 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawBranch@C_TreeList@@IAEXPAVSCREEN@@PAVTREELIST@@PAUUI95_RECT@@@Z ENDP ; C_TreeList::DrawBranch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctree.cpp
_TEXT	SEGMENT
_width$ = -12						; size = 4
_this$ = -8						; size = 4
_current$ = -4						; size = 4
_top$ = 8						; size = 4
_offx$ = 12						; size = 4
_offy$ = 16						; size = 4
?CalculateTreePositions@C_TreeList@@IAEJPAVTREELIST@@JJ@Z PROC ; C_TreeList::CalculateTreePositions
; _this$ = ecx

; 728  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 729  : 	TREELIST *current;
; 730  : 	long width;
; 731  : 
; 732  : 	current=top;

	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _current$[ebp], eax
$LN7@CalculateT:

; 733  : 
; 734  : 	while(current)

	cmp	DWORD PTR _current$[ebp], 0
	je	$LN6@CalculateT

; 735  : 	{
; 736  : 		if(current->Item_ && !(current->Item_->GetFlags() & C_BIT_INVISIBLE))

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN5@CalculateT
	mov	edx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetFlags@C_Base@@QAEJXZ		; C_Base::GetFlags
	and	eax, 8192				; 00002000H
	jne	$LN5@CalculateT

; 737  : 		{
; 738  : 			current->x_=offx;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _offx$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 739  : 			current->y_=offy;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _offy$[ebp]
	mov	DWORD PTR [edx+12], eax

; 740  : 
; 741  : 			current->Item_->SetXY(current->x_ + xoffset_,current->y_);

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+112]
	push	ecx
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 742  : 
; 743  : 			if(current->Item_->GetH() < yoffset_)

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+116]
	jge	SHORT $LN4@CalculateT

; 744  : 				offy+=yoffset_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _offy$[ebp]
	add	eax, DWORD PTR [edx+116]
	mov	DWORD PTR _offy$[ebp], eax

; 745  : 			else

	jmp	SHORT $LN3@CalculateT
$LN4@CalculateT:

; 746  : 				offy+=current->Item_->GetH();

	mov	ecx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetH@C_Base@@QAEJXZ			; C_Base::GetH
	add	eax, DWORD PTR _offy$[ebp]
	mov	DWORD PTR _offy$[ebp], eax
$LN3@CalculateT:

; 747  : 
; 748  : 			width=current->Item_->GetX() + current->Item_->GetW();

	mov	edx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetX@C_Base@@QAEJXZ			; C_Base::GetX
	mov	esi, eax
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?GetW@C_Base@@QAEJXZ			; C_Base::GetW
	add	esi, eax
	mov	DWORD PTR _width$[ebp], esi

; 749  : 			if(width > treew_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	cmp	edx, DWORD PTR [ecx+124]
	jle	SHORT $LN2@CalculateT

; 750  : 				treew_=width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+124], ecx
$LN2@CalculateT:

; 751  : 
; 752  : 			if(current->state_ && current->Child)

	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@CalculateT
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN5@CalculateT

; 753  : 				offy=CalculateTreePositions(current->Child,offx+xoffset_,offy);

	mov	ecx, DWORD PTR _offy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _offx$[ebp]
	add	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateTreePositions@C_TreeList@@IAEJPAVTREELIST@@JJ@Z ; C_TreeList::CalculateTreePositions
	mov	DWORD PTR _offy$[ebp], eax
$LN5@CalculateT:

; 754  : 		}
; 755  : 		current=current->Next;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _current$[ebp], ecx

; 756  : 	}

	jmp	$LN7@CalculateT
$LN6@CalculateT:

; 757  : 	return(offy);

	mov	eax, DWORD PTR _offy$[ebp]

; 758  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CalculateTreePositions@C_TreeList@@IAEJPAVTREELIST@@JJ@Z ENDP ; C_TreeList::CalculateTreePositions
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Control@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Control@@UAEPAXI@Z PROC				; C_Control::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Control@@UAE@XZ			; C_Control::~C_Control
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Control@@UAEPAXI@Z ENDP				; C_Control::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ PROC	; C_Control::GetCallback, COMDAT
; _this$ = ecx

; 82   : 		void (*GetCallback())(long,short,C_Base*)	{ return(Callback_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallback@C_Control@@UAEP6AXJFPAVC_Base@@@ZXZ ENDP	; C_Control::GetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetMouseOver@C_Control@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseOver@C_Control@@UAEFXZ PROC			; C_Control::GetMouseOver, COMDAT
; _this$ = ecx

; 80   : 		short GetMouseOver()			{ return(MouseOver_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+82]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseOver@C_Control@@UAEFXZ ENDP			; C_Control::GetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetHotKey@C_Control@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHotKey@C_Control@@UAEFXZ PROC			; C_Control::GetHotKey, COMDAT
; _this$ = ecx

; 79   : 		short GetHotKey()				{ return(HotKey_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+80]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHotKey@C_Control@@UAEFXZ ENDP			; C_Control::GetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetHelpText@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHelpText@C_Control@@UAEJXZ PROC			; C_Control::GetHelpText, COMDAT
; _this$ = ecx

; 78   : 		long  GetHelpText()				{ return(HelpTextID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHelpText@C_Control@@UAEJXZ ENDP			; C_Control::GetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetMenu@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenu@C_Control@@UAEJXZ PROC				; C_Control::GetMenu, COMDAT
; _this$ = ecx

; 77   : 		long  GetMenu()					{ return(MenuID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenu@C_Control@@UAEJXZ ENDP				; C_Control::GetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetDragCursorID@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDragCursorID@C_Control@@UAEJXZ PROC			; C_Control::GetDragCursorID, COMDAT
; _this$ = ecx

; 76   : 		long  GetDragCursorID()			{ return(DragCursor_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDragCursorID@C_Control@@UAEJXZ ENDP			; C_Control::GetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetCursorID@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorID@C_Control@@UAEJXZ PROC			; C_Control::GetCursorID, COMDAT
; _this$ = ecx

; 75   : 		long  GetCursorID()				{ return(Cursor_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorID@C_Control@@UAEJXZ ENDP			; C_Control::GetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetRelY@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelY@C_Control@@UAEJXZ PROC				; C_Control::GetRelY, COMDAT
; _this$ = ecx

; 73   : 		long GetRelY()					{ return(RelY_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelY@C_Control@@UAEJXZ ENDP				; C_Control::GetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?GetRelX@C_Control@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelX@C_Control@@UAEJXZ PROC				; C_Control::GetRelX, COMDAT
; _this$ = ecx

; 72   : 		long GetRelX()					{ return(RelX_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelX@C_Control@@UAEJXZ ENDP				; C_Control::GetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?IsControl@C_Control@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsControl@C_Control@@UAEHXZ PROC			; C_Control::IsControl, COMDAT
; _this$ = ecx

; 71   : 		BOOL  IsControl()				{ return(TRUE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsControl@C_Control@@UAEHXZ ENDP			; C_Control::IsControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?IsBase@C_Control@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBase@C_Control@@UAEHXZ PROC				; C_Control::IsBase, COMDAT
; _this$ = ecx

; 70   : 		BOOL  IsBase()					{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBase@C_Control@@UAEHXZ ENDP				; C_Control::IsBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMouseOverPerc@C_Control@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_perc$ = 8						; size = 2
?SetMouseOverPerc@C_Control@@UAEXF@Z PROC		; C_Control::SetMouseOverPerc, COMDAT
; _this$ = ecx

; 67   : 		void SetMouseOverPerc(short perc)				{ MouseOverPercent_=perc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _perc$[ebp]
	mov	WORD PTR [eax+84], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverPerc@C_Control@@UAEXF@Z ENDP		; C_Control::SetMouseOverPerc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMouseOverColor@C_Control@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetMouseOverColor@C_Control@@UAEXK@Z PROC		; C_Control::SetMouseOverColor, COMDAT
; _this$ = ecx

; 66   : 		void SetMouseOverColor(COLORREF color)			{ MouseOverColor_=color; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverColor@C_Control@@UAEXK@Z ENDP		; C_Control::SetMouseOverColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMouseOver@C_Control@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetMouseOver@C_Control@@UAEXF@Z PROC			; C_Control::SetMouseOver, COMDAT
; _this$ = ecx

; 65   : 		void SetMouseOver(short state)					{ MouseOver_=state; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _state$[ebp]
	mov	WORD PTR [eax+82], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOver@C_Control@@UAEXF@Z ENDP			; C_Control::SetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cb$ = 8						; size = 4
?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z PROC	; C_Control::SetCallback, COMDAT
; _this$ = ecx

; 63   : 		void SetCallback(void (*cb)(long,short,C_Base*)) { Callback_=cb; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCallback@C_Control@@UAEXP6AXJFPAVC_Base@@@Z@Z ENDP	; C_Control::SetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetHotKey@C_Control@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
?SetHotKey@C_Control@@UAEXF@Z PROC			; C_Control::SetHotKey, COMDAT
; _this$ = ecx

; 62   : 		void SetHotKey(short key)						{ HotKey_=key; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _key$[ebp]
	mov	WORD PTR [eax+80], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHotKey@C_Control@@UAEXF@Z ENDP			; C_Control::SetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetHelpText@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetHelpText@C_Control@@UAEXJ@Z PROC			; C_Control::SetHelpText, COMDAT
; _this$ = ecx

; 61   : 		void SetHelpText(long id)						{ HelpTextID_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHelpText@C_Control@@UAEXJ@Z ENDP			; C_Control::SetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetMenu@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetMenu@C_Control@@UAEXJ@Z PROC			; C_Control::SetMenu, COMDAT
; _this$ = ecx

; 60   : 		void SetMenu(long id)							{ MenuID_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMenu@C_Control@@UAEXJ@Z ENDP			; C_Control::SetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetDragCursorID@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetDragCursorID@C_Control@@UAEXJ@Z PROC		; C_Control::SetDragCursorID, COMDAT
; _this$ = ecx

; 59   : 		void SetDragCursorID(long id)					{ DragCursor_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragCursorID@C_Control@@UAEXJ@Z ENDP		; C_Control::SetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetCursorID@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetCursorID@C_Control@@UAEXJ@Z PROC			; C_Control::SetCursorID, COMDAT
; _this$ = ecx

; 58   : 		void SetCursorID(long id)						{ Cursor_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorID@C_Control@@UAEXJ@Z ENDP			; C_Control::SetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetRelXY@C_Control@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetRelXY@C_Control@@UAEXJJ@Z PROC			; C_Control::SetRelXY, COMDAT
; _this$ = ecx

; 57   : 		void SetRelXY(long x,long y)					{ RelX_=x; RelY_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+76], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRelXY@C_Control@@UAEXJJ@Z ENDP			; C_Control::SetRelXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetRelY@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetRelY@C_Control@@UAEXJ@Z PROC			; C_Control::SetRelY, COMDAT
; _this$ = ecx

; 56   : 		void SetRelY(long y)							{ RelY_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelY@C_Control@@UAEXJ@Z ENDP			; C_Control::SetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ?SetRelX@C_Control@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetRelX@C_Control@@UAEXJ@Z PROC			; C_Control::SetRelX, COMDAT
; _this$ = ecx

; 55   : 		void SetRelX(long x)							{ RelX_=x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelX@C_Control@@UAEXJ@Z ENDP			; C_Control::SetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ccontrol.h
;	COMDAT ??1C_Control@@UAE@XZ
_TEXT	SEGMENT
tv83 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1C_Control@@UAE@XZ PROC				; C_Control::~C_Control, COMDAT
; _this$ = ecx

; 40   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1C_Control@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_Control@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 41   : 			if(Sound_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN2@C_Control

; 42   : 			{
; 43   : 				Sound_->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 44   : 				delete Sound_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@C_Control
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN2@C_Control
$LN4@C_Control:
	mov	DWORD PTR tv83[ebp], 0
$LN2@C_Control:

; 45   : 			}
; 46   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Base@@UAE@XZ			; C_Base::~C_Base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1C_Control@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1C_Base@@UAE@XZ			; C_Base::~C_Base
__ehhandler$??1C_Control@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1C_Control@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1C_Control@@UAE@XZ ENDP				; C_Control::~C_Control
; Function compile flags: /Odtp
;	COMDAT ??_GC_Base@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Base@@UAEPAXI@Z PROC				; C_Base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Base@@UAE@XZ			; C_Base::~C_Base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Base@@UAEPAXI@Z ENDP				; C_Base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ofp$ = 8						; size = 4
_Parser$ = 12						; size = 4
?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z PROC		; C_Base::SaveText, COMDAT
; _this$ = ecx

; 193  : 		virtual void SaveText(HANDLE ofp,C_Parser *Parser) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SaveText@C_Base@@UAEXPAXPAVC_Parser@@@Z ENDP		; C_Base::SaveText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 2
_P$ = 12						; size = 4
_str$ = 16						; size = 4
_Hndlr$ = 20						; size = 4
?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z PROC	; C_Base::LocalFunction, COMDAT
; _this$ = ecx

; 192  : 		virtual void LocalFunction(short ID,long P[],_TCHAR *str,C_Handler *Hndlr) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?LocalFunction@C_Base@@UAEXFQAJPADPAVC_Handler@@@Z ENDP	; C_Base::LocalFunction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?LocalFind@C_Base@@UAEFPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?LocalFind@C_Base@@UAEFPAD@Z PROC			; C_Base::LocalFind, COMDAT
; _this$ = ecx

; 191  : 		virtual short LocalFind(char *str) { return(-1); } // Search local token list

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	4
?LocalFind@C_Base@@UAEFPAD@Z ENDP			; C_Base::LocalFind
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Wheel@C_Base@@UAEHHGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_increments$ = 8					; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
?Wheel@C_Base@@UAEHHGG@Z PROC				; C_Base::Wheel, COMDAT
; _this$ = ecx

; 187  : 		virtual BOOL Wheel(int increments, WORD MouseX, WORD MouseY)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Wheel@C_Base@@UAEHHGG@Z ENDP				; C_Base::Wheel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC	; C_Base::Drop, COMDAT
; _this$ = ecx

; 182  : 		virtual BOOL Drop(GRABBER *Drag,WORD MouseX,WORD MouseY,C_Window *over) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP	; C_Base::Drop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC	; C_Base::Drag, COMDAT
; _this$ = ecx

; 181  : 		virtual BOOL Drag(GRABBER *Drag,WORD MouseX,WORD MouseY,C_Window *over) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP	; C_Base::Drag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetItemXY@C_Base@@UAEXJPAJ0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?GetItemXY@C_Base@@UAEXJPAJ0@Z PROC			; C_Base::GetItemXY, COMDAT
; _this$ = ecx

; 180  : 		virtual void GetItemXY(long ID,long *x,long *y)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetItemXY@C_Base@@UAEXJPAJ0@Z ENDP			; C_Base::GetItemXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Dragable@C_Base@@UAEHJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Dragable@C_Base@@UAEHJ@Z PROC				; C_Base::Dragable, COMDAT
; _this$ = ecx

; 179  : 		virtual BOOL Dragable(long ID)					{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Dragable@C_Base@@UAEHJ@Z ENDP				; C_Base::Dragable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMe@C_Base@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMe@C_Base@@UAEPAV1@XZ PROC				; C_Base::GetMe, COMDAT
; _this$ = ecx

; 178  : 		virtual C_Base *GetMe()							{ return(this); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMe@C_Base@@UAEPAV1@XZ ENDP				; C_Base::GetMe
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?MouseOver@C_Base@@UAEHJJPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relX$ = 8						; size = 4
_relY$ = 12						; size = 4
_me$ = 16						; size = 4
?MouseOver@C_Base@@UAEHJJPAV1@@Z PROC			; C_Base::MouseOver, COMDAT
; _this$ = ecx

; 177  : 		virtual BOOL MouseOver(long relX,long relY,C_Base *me) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MouseOver@C_Base@@UAEHJJPAV1@@Z ENDP			; C_Base::MouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CloseWindow@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseWindow@C_Base@@UAEHXZ PROC			; C_Base::CloseWindow, COMDAT
; _this$ = ecx

; 176  : 		virtual BOOL CloseWindow()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseWindow@C_Base@@UAEHXZ ENDP			; C_Base::CloseWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Process@C_Base@@UAEHJF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_HitType$ = 12						; size = 2
?Process@C_Base@@UAEHJF@Z PROC				; C_Base::Process, COMDAT
; _this$ = ecx

; 175  : 		virtual BOOL Process(long ID,short HitType)		{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?Process@C_Base@@UAEHJF@Z ENDP				; C_Base::Process
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CheckKeyboard@C_Base@@UAEHEEEJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DKScanCode$ = 8					; size = 1
_Ascii$ = 12						; size = 1
_ShiftStates$ = 16					; size = 1
_RepeatCount$ = 20					; size = 4
?CheckKeyboard@C_Base@@UAEHEEEJ@Z PROC			; C_Base::CheckKeyboard, COMDAT
; _this$ = ecx

; 174  : 		virtual BOOL CheckKeyboard(uchar DKScanCode,uchar Ascii,uchar ShiftStates,long RepeatCount) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckKeyboard@C_Base@@UAEHEEEJ@Z ENDP			; C_Base::CheckKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CheckHotSpots@C_Base@@UAEJJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relx$ = 8						; size = 4
_rely$ = 12						; size = 4
?CheckHotSpots@C_Base@@UAEJJJ@Z PROC			; C_Base::CheckHotSpots, COMDAT
; _this$ = ecx

; 173  : 		virtual long CheckHotSpots(long relx,long rely)	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?CheckHotSpots@C_Base@@UAEJJJ@Z ENDP			; C_Base::CheckHotSpots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Deactivate@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deactivate@C_Base@@UAEXXZ PROC				; C_Base::Deactivate, COMDAT
; _this$ = ecx

; 172  : 		virtual void Deactivate()						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Deactivate@C_Base@@UAEXXZ ENDP				; C_Base::Deactivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Activate@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Activate@C_Base@@UAEXXZ PROC				; C_Base::Activate, COMDAT
; _this$ = ecx

; 171  : 		virtual void Activate()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@C_Base@@UAEXXZ ENDP				; C_Base::Activate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?TimerUpdate@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TimerUpdate@C_Base@@UAEHXZ PROC			; C_Base::TimerUpdate, COMDAT
; _this$ = ecx

; 170  : 		virtual BOOL TimerUpdate()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?TimerUpdate@C_Base@@UAEHXZ ENDP			; C_Base::TimerUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Cleanup@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@C_Base@@UAEXXZ PROC				; C_Base::Cleanup, COMDAT
; _this$ = ecx

; 169  : 		virtual void Cleanup()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@C_Base@@UAEXXZ ENDP				; C_Base::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Parent$ = 8						; size = 4
?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z PROC		; C_Base::SetSubParents, COMDAT
; _this$ = ecx

; 168  : 		virtual void SetSubParents(C_Window *Parent)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubParents@C_Base@@UAEXPAVC_Window@@@Z ENDP		; C_Base::SetSubParents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_Base::HighLite, COMDAT
; _this$ = ecx

; 167  : 		virtual void HighLite(SCREEN *surface,UI95_RECT *cliprect)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_Base::HighLite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_Base::Draw, COMDAT
; _this$ = ecx

; 166  : 		virtual void Draw(SCREEN *surface,UI95_RECT *cliprect)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?Draw@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_Base::Draw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Refresh@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Refresh@C_Base@@UAEXXZ PROC				; C_Base::Refresh, COMDAT
; _this$ = ecx

; 165  : 		virtual void Refresh()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@C_Base@@UAEXXZ ENDP				; C_Base::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?IsControl@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsControl@C_Base@@UAEHXZ PROC				; C_Base::IsControl, COMDAT
; _this$ = ecx

; 164  : 		virtual BOOL IsControl()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsControl@C_Base@@UAEHXZ ENDP				; C_Base::IsControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?IsBase@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBase@C_Base@@UAEHXZ PROC				; C_Base::IsBase, COMDAT
; _this$ = ecx

; 163  : 		virtual BOOL IsBase()							{ return(TRUE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBase@C_Base@@UAEHXZ ENDP				; C_Base::IsBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ PROC		; C_Base::GetCallback, COMDAT
; _this$ = ecx

; 160  : 		virtual void (*GetCallback())(long,short,C_Base*) { return(NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ ENDP		; C_Base::GetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetDragCursorID@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDragCursorID@C_Base@@UAEJXZ PROC			; C_Base::GetDragCursorID, COMDAT
; _this$ = ecx

; 159  : 		virtual long  GetDragCursorID()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDragCursorID@C_Base@@UAEJXZ ENDP			; C_Base::GetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetCursorID@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorID@C_Base@@UAEJXZ PROC			; C_Base::GetCursorID, COMDAT
; _this$ = ecx

; 158  : 		virtual long  GetCursorID()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorID@C_Base@@UAEJXZ ENDP			; C_Base::GetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMouseOver@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseOver@C_Base@@UAEFXZ PROC			; C_Base::GetMouseOver, COMDAT
; _this$ = ecx

; 157  : 		virtual short GetMouseOver() { return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseOver@C_Base@@UAEFXZ ENDP			; C_Base::GetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 2
?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z PROC		; C_Base::GetSound, COMDAT
; _this$ = ecx

; 156  : 		virtual SOUND_RES *GetSound(short Type) { return(NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z ENDP		; C_Base::GetSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetHelpText@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHelpText@C_Base@@UAEJXZ PROC			; C_Base::GetHelpText, COMDAT
; _this$ = ecx

; 155  : 		virtual long  GetHelpText()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHelpText@C_Base@@UAEJXZ ENDP			; C_Base::GetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetFont@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFont@C_Base@@UAEJXZ PROC				; C_Base::GetFont, COMDAT
; _this$ = ecx

; 154  : 		virtual long  GetFont()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFont@C_Base@@UAEJXZ ENDP				; C_Base::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMenu@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenu@C_Base@@UAEJXZ PROC				; C_Base::GetMenu, COMDAT
; _this$ = ecx

; 153  : 		virtual long  GetMenu()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenu@C_Base@@UAEJXZ ENDP				; C_Base::GetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetHotKey@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHotKey@C_Base@@UAEFXZ PROC				; C_Base::GetHotKey, COMDAT
; _this$ = ecx

; 152  : 		virtual short GetHotKey()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHotKey@C_Base@@UAEFXZ ENDP				; C_Base::GetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetState@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetState@C_Base@@UAEFXZ PROC				; C_Base::GetState, COMDAT
; _this$ = ecx

; 151  : 		virtual short GetState()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@C_Base@@UAEFXZ ENDP				; C_Base::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Ready@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Ready@C_Base@@QAEFXZ PROC				; C_Base::Ready, COMDAT
; _this$ = ecx

; 150  : 		short  Ready()				{ return(Ready_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+42]
	mov	esp, ebp
	pop	ebp
	ret	0
?Ready@C_Base@@QAEFXZ ENDP				; C_Base::Ready
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetRelY@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelY@C_Base@@UAEJXZ PROC				; C_Base::GetRelY, COMDAT
; _this$ = ecx

; 148  : 		virtual long GetRelY()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelY@C_Base@@UAEJXZ ENDP				; C_Base::GetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetRelX@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelX@C_Base@@UAEJXZ PROC				; C_Base::GetRelX, COMDAT
; _this$ = ecx

; 147  : 		virtual long GetRelX()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelX@C_Base@@UAEJXZ ENDP				; C_Base::GetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetH@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetH@C_Base@@QAEJXZ PROC				; C_Base::GetH, COMDAT
; _this$ = ecx

; 144  : 		long GetH()					{ return(h_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetH@C_Base@@QAEJXZ ENDP				; C_Base::GetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetW@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetW@C_Base@@QAEJXZ PROC				; C_Base::GetW, COMDAT
; _this$ = ecx

; 143  : 		long GetW()					{ return(w_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetW@C_Base@@QAEJXZ ENDP				; C_Base::GetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetY@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@C_Base@@QAEJXZ PROC				; C_Base::GetY, COMDAT
; _this$ = ecx

; 142  : 		long GetY()					{ return(y_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@C_Base@@QAEJXZ ENDP				; C_Base::GetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetX@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@C_Base@@QAEJXZ PROC				; C_Base::GetX, COMDAT
; _this$ = ecx

; 141  : 		long GetX()					{ return(x_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@C_Base@@QAEJXZ ENDP				; C_Base::GetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetClient@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClient@C_Base@@QAEFXZ PROC				; C_Base::GetClient, COMDAT
; _this$ = ecx

; 140  : 		short GetClient()			{ return(Client_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClient@C_Base@@QAEFXZ ENDP				; C_Base::GetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetFlags@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@C_Base@@QAEJXZ PROC				; C_Base::GetFlags, COMDAT
; _this$ = ecx

; 139  : 		long  GetFlags()			{ return(Flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@C_Base@@QAEJXZ ENDP				; C_Base::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?_GetCType_@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_GetCType_@C_Base@@QAEFXZ PROC				; C_Base::_GetCType_, COMDAT
; _this$ = ecx

; 136  : 		short _GetCType_()			{ return(_CType_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?_GetCType_@C_Base@@QAEFXZ ENDP				; C_Base::_GetCType_
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetID@C_Base@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@C_Base@@QAEJXZ PROC				; C_Base::GetID, COMDAT
; _this$ = ecx

; 134  : 		long  GetID()				{ return(ID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@C_Base@@QAEJXZ ENDP				; C_Base::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cb$ = 8						; size = 4
?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z PROC		; C_Base::SetCallback, COMDAT
; _this$ = ecx

; 131  : 		virtual void SetCallback(void (*cb)(long,short,C_Base*)){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z ENDP		; C_Base::SetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOverPerc@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_perc$ = 8						; size = 2
?SetMouseOverPerc@C_Base@@UAEXF@Z PROC			; C_Base::SetMouseOverPerc, COMDAT
; _this$ = ecx

; 130  : 		virtual void SetMouseOverPerc(short perc)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverPerc@C_Base@@UAEXF@Z ENDP			; C_Base::SetMouseOverPerc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOverColor@C_Base@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetMouseOverColor@C_Base@@UAEXK@Z PROC			; C_Base::SetMouseOverColor, COMDAT
; _this$ = ecx

; 129  : 		virtual void SetMouseOverColor(COLORREF color)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverColor@C_Base@@UAEXK@Z ENDP			; C_Base::SetMouseOverColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOver@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetMouseOver@C_Base@@UAEXF@Z PROC			; C_Base::SetMouseOver, COMDAT
; _this$ = ecx

; 128  : 		virtual void SetMouseOver(short state)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOver@C_Base@@UAEXF@Z ENDP			; C_Base::SetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetHelpText@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetHelpText@C_Base@@UAEXJ@Z PROC			; C_Base::SetHelpText, COMDAT
; _this$ = ecx

; 127  : 		virtual void SetHelpText(long id)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHelpText@C_Base@@UAEXJ@Z ENDP			; C_Base::SetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetDragCursorID@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetDragCursorID@C_Base@@UAEXJ@Z PROC			; C_Base::SetDragCursorID, COMDAT
; _this$ = ecx

; 126  : 		virtual void SetDragCursorID(long id)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragCursorID@C_Base@@UAEXJ@Z ENDP			; C_Base::SetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetCursorID@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetCursorID@C_Base@@UAEXJ@Z PROC			; C_Base::SetCursorID, COMDAT
; _this$ = ecx

; 125  : 		virtual void SetCursorID(long id)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorID@C_Base@@UAEXJ@Z ENDP			; C_Base::SetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetSound@C_Base@@UAEXJF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_type$ = 12						; size = 2
?SetSound@C_Base@@UAEXJF@Z PROC				; C_Base::SetSound, COMDAT
; _this$ = ecx

; 124  : 		virtual void SetSound(long ID,short type)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSound@C_Base@@UAEXJF@Z ENDP				; C_Base::SetSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFont@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetFont@C_Base@@UAEXJ@Z PROC				; C_Base::SetFont, COMDAT
; _this$ = ecx

; 123  : 		virtual void SetFont(long ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFont@C_Base@@UAEXJ@Z ENDP				; C_Base::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMenu@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetMenu@C_Base@@UAEXJ@Z PROC				; C_Base::SetMenu, COMDAT
; _this$ = ecx

; 122  : 		virtual void SetMenu(long ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMenu@C_Base@@UAEXJ@Z ENDP				; C_Base::SetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetHotKey@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
?SetHotKey@C_Base@@UAEXF@Z PROC				; C_Base::SetHotKey, COMDAT
; _this$ = ecx

; 121  : 		virtual void SetHotKey(short key)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHotKey@C_Base@@UAEXF@Z ENDP				; C_Base::SetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetState@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetState@C_Base@@UAEXF@Z PROC				; C_Base::SetState, COMDAT
; _this$ = ecx

; 120  : 		virtual void SetState(short state)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetState@C_Base@@UAEXF@Z ENDP				; C_Base::SetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetReady@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 2
?SetReady@C_Base@@QAEXF@Z PROC				; C_Base::SetReady, COMDAT
; _this$ = ecx

; 116  : 		void SetReady(short r)									{ Ready_=r; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _r$[ebp]
	mov	WORD PTR [eax+42], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetReady@C_Base@@QAEXF@Z ENDP				; C_Base::SetReady
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetParent@C_Base@@QAEXPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_win$ = 8						; size = 4
?SetParent@C_Base@@QAEXPAVC_Window@@@Z PROC		; C_Base::SetParent, COMDAT
; _this$ = ecx

; 115  : 		void SetParent(C_Window *win)							{ Parent_=win; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetParent@C_Base@@QAEXPAVC_Window@@@Z ENDP		; C_Base::SetParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelXY@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetRelXY@C_Base@@UAEXJJ@Z PROC				; C_Base::SetRelXY, COMDAT
; _this$ = ecx

; 112  : 		virtual void SetRelXY(long x,long y)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRelXY@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetRelXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelY@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetRelY@C_Base@@UAEXJ@Z PROC				; C_Base::SetRelY, COMDAT
; _this$ = ecx

; 111  : 		virtual void SetRelY(long y)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelY@C_Base@@UAEXJ@Z ENDP				; C_Base::SetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelX@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetRelX@C_Base@@UAEXJ@Z PROC				; C_Base::SetRelX, COMDAT
; _this$ = ecx

; 110  : 		virtual void SetRelX(long x)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelX@C_Base@@UAEXJ@Z ENDP				; C_Base::SetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetXYWH@C_Base@@UAEXJJJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
?SetXYWH@C_Base@@UAEXJJJJ@Z PROC			; C_Base::SetXYWH, COMDAT
; _this$ = ecx

; 109  : 		virtual void SetXYWH(long x,long y,long w,long h)		{ x_=x; y_=y; w_=w; h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetXYWH@C_Base@@UAEXJJJJ@Z ENDP			; C_Base::SetXYWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetWH@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?SetWH@C_Base@@UAEXJJ@Z PROC				; C_Base::SetWH, COMDAT
; _this$ = ecx

; 108  : 		virtual void SetWH(long w,long h)						{ w_=w; h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWH@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetXY@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetXY@C_Base@@UAEXJJ@Z PROC				; C_Base::SetXY, COMDAT
; _this$ = ecx

; 107  : 		virtual void SetXY(long x,long y)						{ x_=x; y_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetXY@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetH@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
?SetH@C_Base@@UAEXJ@Z PROC				; C_Base::SetH, COMDAT
; _this$ = ecx

; 106  : 		virtual void SetH(long h)								{ h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetH@C_Base@@UAEXJ@Z ENDP				; C_Base::SetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetW@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
?SetW@C_Base@@UAEXJ@Z PROC				; C_Base::SetW, COMDAT
; _this$ = ecx

; 105  : 		virtual void SetW(long w)								{ w_=w; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetW@C_Base@@UAEXJ@Z ENDP				; C_Base::SetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetY@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetY@C_Base@@UAEXJ@Z PROC				; C_Base::SetY, COMDAT
; _this$ = ecx

; 104  : 		virtual void SetY(long y)								{ y_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetY@C_Base@@UAEXJ@Z ENDP				; C_Base::SetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetX@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetX@C_Base@@UAEXJ@Z PROC				; C_Base::SetX, COMDAT
; _this$ = ecx

; 103  : 		virtual void SetX(long x)								{ x_=x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetX@C_Base@@UAEXJ@Z ENDP				; C_Base::SetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlagBitOff@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
?SetFlagBitOff@C_Base@@UAEXJ@Z PROC			; C_Base::SetFlagBitOff, COMDAT
; _this$ = ecx

; 102  : 		virtual void SetFlagBitOff(long bits)					{ Flags_ &= ~bits; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _bits$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBitOff@C_Base@@UAEXJ@Z ENDP			; C_Base::SetFlagBitOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlagBitOn@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
?SetFlagBitOn@C_Base@@UAEXJ@Z PROC			; C_Base::SetFlagBitOn, COMDAT
; _this$ = ecx

; 101  : 		virtual void SetFlagBitOn(long bits)					{ Flags_ |= bits; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBitOn@C_Base@@UAEXJ@Z ENDP			; C_Base::SetFlagBitOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlags@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flags$ = 8						; size = 4
?SetFlags@C_Base@@UAEXJ@Z PROC				; C_Base::SetFlags, COMDAT
; _this$ = ecx

; 100  : 		virtual void SetFlags(long flags)						{ Flags_=flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlags@C_Base@@UAEXJ@Z ENDP				; C_Base::SetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetClient@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_client$ = 8						; size = 2
?SetClient@C_Base@@QAEXF@Z PROC				; C_Base::SetClient, COMDAT
; _this$ = ecx

; 98   : 		void SetClient(short client)							{ Client_=client; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _client$[ebp]
	mov	WORD PTR [eax+40], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetClient@C_Base@@QAEXF@Z ENDP				; C_Base::SetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?_SetCType_@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ctype$ = 8						; size = 2
?_SetCType_@C_Base@@QAEXF@Z PROC			; C_Base::_SetCType_, COMDAT
; _this$ = ecx

; 95   : 		void _SetCType_(short ctype)							{ _CType_=ctype; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _ctype$[ebp]
	mov	WORD PTR [eax+20], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?_SetCType_@C_Base@@QAEXF@Z ENDP			; C_Base::_SetCType_
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetType@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 2
?SetType@C_Base@@QAEXF@Z PROC				; C_Base::SetType, COMDAT
; _this$ = ecx

; 94   : 		void SetType(short type)								{ Type_=type; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _type$[ebp]
	mov	WORD PTR [eax+22], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@C_Base@@QAEXF@Z ENDP				; C_Base::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetID@C_Base@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetID@C_Base@@QAEXJ@Z PROC				; C_Base::SetID, COMDAT
; _this$ = ecx

; 93   : 		void SetID(long id)										{ ID_=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@C_Base@@QAEXJ@Z ENDP				; C_Base::SetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ??1C_Base@@UAE@XZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1C_Base@@UAE@XZ PROC					; C_Base::~C_Base, COMDAT
; _this$ = ecx

; 81   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_Base@@6B@

; 82   : 			if(User_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN2@C_Base

; 83   : 			{
; 84   : 				User_->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 85   : 				delete User_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@C_Base
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN2@C_Base
$LN4@C_Base:
	mov	DWORD PTR tv74[ebp], 0
$LN2@C_Base:

; 86   : 			}
; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1C_Base@@UAE@XZ ENDP					; C_Base::~C_Base
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Hash@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Hash@@QAEPAXI@Z PROC				; C_Hash::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Hash@@QAE@XZ			; C_Hash::~C_Hash
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Hash@@QAEPAXI@Z ENDP				; C_Hash::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
