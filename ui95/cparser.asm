; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ui95\cparser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ ; ATL::CVarTypeInfo<unsigned long *>::pmField
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?VT@?$CVarTypeInfo@_J@ATL@@2GB			; ATL::CVarTypeInfo<__int64>::VT
PUBLIC	?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ ; ATL::CVarTypeInfo<__int64>::pmField
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?VT@?$CVarTypeInfo@PA_J@ATL@@2GB		; ATL::CVarTypeInfo<__int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ ; ATL::CVarTypeInfo<__int64 *>::pmField
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?VT@?$CVarTypeInfo@_K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned __int64>::VT
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64>::pmField
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PA_K@ATL@@2GB		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?VT@?$CVarTypeInfo@M@ATL@@2GB			; ATL::CVarTypeInfo<float>::VT
PUBLIC	?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ ; ATL::CVarTypeInfo<float>::pmField
PUBLIC	__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
PUBLIC	?VT@?$CVarTypeInfo@PAM@ATL@@2GB			; ATL::CVarTypeInfo<float *>::VT
PUBLIC	__GUID_00020400_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ ; ATL::CVarTypeInfo<float *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@N@ATL@@2GB			; ATL::CVarTypeInfo<double>::VT
PUBLIC	?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ ; ATL::CVarTypeInfo<double>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAN@ATL@@2GB			; ATL::CVarTypeInfo<double *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ ; ATL::CVarTypeInfo<double *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB	; ATL::CVarTypeInfo<tagVARIANT *>::VT
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	__GUID_0002e012_0000_0000_c000_000000000046
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?VT@?$CVarTypeInfo@PA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ ; ATL::CVarTypeInfo<wchar_t *>::pmField
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB		; ATL::CVarTypeInfo<wchar_t * *>::VT
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ ; ATL::CVarTypeInfo<wchar_t * *>::pmField
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown *>::VT
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown *>::pmField
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB	; ATL::CVarTypeInfo<IUnknown * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ ; ATL::CVarTypeInfo<IUnknown * *>::pmField
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	__GUID_0000010c_0000_0000_c000_000000000046
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch *>::VT
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch *>::pmField
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB	; ATL::CVarTypeInfo<IDispatch * *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ ; ATL::CVarTypeInfo<IDispatch * *>::pmField
PUBLIC	?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY>::VT
PUBLIC	?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY>::pmField
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB		; ATL::CVarTypeInfo<tagCY *>::VT
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ ; ATL::CVarTypeInfo<tagCY *>::pmField
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?chDirSep@ATL@@3DB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3DB			; ATL::chRightBracket
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?chLeftBracket@ATL@@3DB				; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3DB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3DB				; ATL::chEquals
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?szStringVal@ATL@@3QBDB				; ATL::szStringVal
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	?multiszStringVal@ATL@@3QBDB			; ATL::multiszStringVal
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	?szDwordVal@ATL@@3QBDB				; ATL::szDwordVal
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?szBinaryVal@ATL@@3QBDB				; ATL::szBinaryVal
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	?szValToken@ATL@@3QBDB				; ATL::szValToken
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	?szForceRemove@ATL@@3QBDB			; ATL::szForceRemove
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?szNoRemove@ATL@@3QBDB				; ATL::szNoRemove
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	?szDelete@ATL@@3QBDB				; ATL::szDelete
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?MAX_VALUE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_VALUE
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?cbNeverDelete@CRegParser@ATL@@1HB		; ATL::CRegParser::cbNeverDelete
PUBLIC	?MAX_TYPE@CRegParser@ATL@@1HB			; ATL::CRegParser::MAX_TYPE
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	_IID_IInternalConnection
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?TokenErrorList@@3PAVC_Hash@@A			; TokenErrorList
PUBLIC	?errorfp@@3PAU_iobuf@@A				; errorfp
PUBLIC	__GUID_1cf2b120_547d_101b_8e65_08002b2bd119
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@		; `string'
PUBLIC	??_C@_08FKDBDIFN@?$FLWINDOW?$FN?$AA@		; `string'
PUBLIC	??_C@_08BPEONPCI@?$FLBUTTON?$FN?$AA@		; `string'
PUBLIC	??_C@_06COFEICCM@?$FLTEXT?$FN?$AA@		; `string'
PUBLIC	??_C@_09KOCBAFHB@?$FLEDITBOX?$FN?$AA@		; `string'
PUBLIC	??_C@_09FKCJGFHL@?$FLLISTBOX?$FN?$AA@		; `string'
PUBLIC	??_C@_0M@GLIMEBAJ@?$FLSCROLLBAR?$FN?$AA@	; `string'
PUBLIC	??_C@_0L@MEJDDIPA@?$FLTREELIST?$FN?$AA@		; `string'
PUBLIC	??_C@_0L@BDEHKHNA@?$FLMAKEFONT?$FN?$AA@		; `string'
PUBLIC	??_C@_07OKNAJLFB@?$FLIMAGE?$FN?$AA@		; `string'
PUBLIC	??_C@_08CEKHCFCI@?$FLBITMAP?$FN?$AA@		; `string'
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	??_C@_06GMLHCONP@?$FLLINE?$FN?$AA@		; `string'
PUBLIC	??_C@_05KEIKLJDL@?$FLBOX?$FN?$AA@		; `string'
PUBLIC	??_C@_08HILHEBCO@?$FLMARQUE?$FN?$AA@		; `string'
PUBLIC	??_C@_0M@IDJJBGC@?$FLANIMATION?$FN?$AA@		; `string'
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	??_C@_09EKLEIEOO@?$FLLOCATOR?$FN?$AA@		; `string'
PUBLIC	??_C@_07INBMONCF@?$FLSOUND?$FN?$AA@		; `string'
PUBLIC	??_C@_08PIDAALDH@?$FLSLIDER?$FN?$AA@		; `string'
PUBLIC	??_C@_0M@KPPBDNDP@?$FLPOPUPMENU?$FN?$AA@	; `string'
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	??_C@_08EANNEFAN@?$FLPANNER?$FN?$AA@		; `string'
PUBLIC	??_C@_06PBMNIIBA@?$FLANIM?$FN?$AA@		; `string'
PUBLIC	??_C@_0N@HPEAJKOC@?$FLSTRINGLIST?$FN?$AA@	; `string'
PUBLIC	??_C@_07GBEICCOI@?$FLMOVIE?$FN?$AA@		; `string'
PUBLIC	??_C@_06GIPEPOLN@?$FLFILL?$FN?$AA@		; `string'
PUBLIC	??_C@_07LPDABDIG@?$FLCLOCK?$FN?$AA@		; `string'
PUBLIC	??_C@_06CJDLGGKC@?$FLTILE?$FN?$AA@		; `string'
PUBLIC	??_C@_0O@MOIEHDHD@?$FLVERSIONTEXT?$FN?$AA@	; `string'
PUBLIC	?ParseSave@@3PADA				; ParseSave
PUBLIC	?ParseCRLF@@3PADA				; ParseCRLF
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	__GUID_00000146_0000_0000_c000_000000000046
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?VT@?$CVarTypeInfo@D@ATL@@2GB			; ATL::CVarTypeInfo<char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ ; ATL::CVarTypeInfo<char>::pmField
PUBLIC	?VT@?$CVarTypeInfo@E@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char>::VT
PUBLIC	?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ ; ATL::CVarTypeInfo<unsigned char>::pmField
PUBLIC	_CLSID_Registrar
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Min@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Min
PUBLIC	?VT@?$CVarTypeInfo@PAD@ATL@@2GB			; ATL::CVarTypeInfo<char *>::VT
PUBLIC	?_Max@?$AtlLimits@H@ATL@@2HB			; ATL::AtlLimits<int>::_Max
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ ; ATL::CVarTypeInfo<char *>::pmField
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Min@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Min
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Max@?$AtlLimits@I@ATL@@2IB			; ATL::AtlLimits<unsigned int>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAE@ATL@@2GB			; ATL::CVarTypeInfo<unsigned char *>::VT
PUBLIC	__GUID_00000109_0000_0000_c000_000000000046
PUBLIC	?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ ; ATL::CVarTypeInfo<unsigned char *>::pmField
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Min@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Min
PUBLIC	__GUID_b196b284_bab4_101a_b69c_00aa00341d07
PUBLIC	?_Max@?$AtlLimits@J@ATL@@2JB			; ATL::AtlLimits<long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@F@ATL@@2GB			; ATL::CVarTypeInfo<short>::VT
PUBLIC	_IID_IRegistrar
PUBLIC	?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ ; ATL::CVarTypeInfo<short>::pmField
PUBLIC	?_Min@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Min
PUBLIC	?_Max@?$AtlLimits@K@ATL@@2KB			; ATL::AtlLimits<unsigned long>::_Max
PUBLIC	?VT@?$CVarTypeInfo@PAF@ATL@@2GB			; ATL::CVarTypeInfo<short *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ ; ATL::CVarTypeInfo<short *>::pmField
PUBLIC	?_Min@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Min
PUBLIC	__GUID_00000001_0000_0000_c000_000000000046
PUBLIC	?_Max@?$AtlLimits@_J@ATL@@2_JB			; ATL::AtlLimits<__int64>::_Max
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?VT@?$CVarTypeInfo@G@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short>::VT
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ ; ATL::CVarTypeInfo<unsigned short>::pmField
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	__GUID_00020401_0000_0000_c000_000000000046
PUBLIC	?_Min@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Min
PUBLIC	_LIBID_ATLLib
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_Max@?$AtlLimits@_K@ATL@@2_KB			; ATL::AtlLimits<unsigned __int64>::_Max
PUBLIC	__GUID_00020412_0000_0000_c000_000000000046
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?VT@?$CVarTypeInfo@PAG@ATL@@2GB			; ATL::CVarTypeInfo<unsigned short *>::VT
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ ; ATL::CVarTypeInfo<unsigned short *>::pmField
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?VT@?$CVarTypeInfo@H@ATL@@2GB			; ATL::CVarTypeInfo<int>::VT
PUBLIC	?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ ; ATL::CVarTypeInfo<int>::pmField
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?VT@?$CVarTypeInfo@PAH@ATL@@2GB			; ATL::CVarTypeInfo<int *>::VT
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ ; ATL::CVarTypeInfo<int *>::pmField
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?VT@?$CVarTypeInfo@I@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int>::VT
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ ; ATL::CVarTypeInfo<unsigned int>::pmField
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?VT@?$CVarTypeInfo@PAI@ATL@@2GB			; ATL::CVarTypeInfo<unsigned int *>::VT
PUBLIC	?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ ; ATL::CVarTypeInfo<unsigned int *>::pmField
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?VT@?$CVarTypeInfo@J@ATL@@2GB			; ATL::CVarTypeInfo<long>::VT
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ ; ATL::CVarTypeInfo<long>::pmField
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?VT@?$CVarTypeInfo@PAJ@ATL@@2GB			; ATL::CVarTypeInfo<long *>::VT
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ ; ATL::CVarTypeInfo<long *>::pmField
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?VT@?$CVarTypeInfo@K@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long>::VT
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ ; ATL::CVarTypeInfo<unsigned long>::pmField
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?VT@?$CVarTypeInfo@PAK@ATL@@2GB			; ATL::CVarTypeInfo<unsigned long *>::VT
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
_BSS	SEGMENT
?TokenErrorList@@3PAVC_Hash@@A DD 01H DUP (?)		; TokenErrorList
?errorfp@@3PAU_iobuf@@A DD 01H DUP (?)			; errorfp
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
_BSS	SEGMENT
?ParseSave@@3PADA DB 050H DUP (?)			; ParseSave
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAK@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAK@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned long *>::VT
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@K@ATL@@2QQtagVARIANT@@KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long>::pmField
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@K@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned long>::VT
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAJ@ATL@@2QQtagVARIANT@@PAJQ3@ DD 08H ; ATL::CVarTypeInfo<long *>::pmField
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAJ@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAJ@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<long *>::VT
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@J@ATL@@2QQtagVARIANT@@JQ3@ DD 08H ; ATL::CVarTypeInfo<long>::pmField
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@J@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<long>::VT
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAI@ATL@@2QQtagVARIANT@@PAIQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAI@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAI@ATL@@2GB DW 04013H		; ATL::CVarTypeInfo<unsigned int *>::VT
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@I@ATL@@2QQtagVARIANT@@IQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned int>::pmField
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@I@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@I@ATL@@2GB DW 013H			; ATL::CVarTypeInfo<unsigned int>::VT
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAH@ATL@@2QQtagVARIANT@@PAHQ3@ DD 08H ; ATL::CVarTypeInfo<int *>::pmField
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAH@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAH@ATL@@2GB DW 04003H		; ATL::CVarTypeInfo<int *>::VT
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@H@ATL@@2QQtagVARIANT@@HQ3@ DD 08H ; ATL::CVarTypeInfo<int>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@H@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@H@ATL@@2GB DW 03H			; ATL::CVarTypeInfo<int>::VT
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAG@ATL@@2QQtagVARIANT@@PAGQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short *>::pmField
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAG@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAG@ATL@@2GB DW 04012H		; ATL::CVarTypeInfo<unsigned short *>::VT
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT __GUID_00020412_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020412_0000_0000_c000_000000000046 DD 020412H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Max@?$AtlLimits@_K@ATL@@2_KB DQ ffffffffffffffffH	; ATL::AtlLimits<unsigned __int64>::_Max
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_K@ATL@@2_KB
CONST	SEGMENT
?_Min@?$AtlLimits@_K@ATL@@2_KB DQ 0000000000000000H	; ATL::AtlLimits<unsigned __int64>::_Min
CONST	ENDS
;	COMDAT __GUID_00020401_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020401_0000_0000_c000_000000000046 DD 020401H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@G@ATL@@2QQtagVARIANT@@GQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned short>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@G@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@G@ATL@@2GB DW 012H			; ATL::CVarTypeInfo<unsigned short>::VT
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Max@?$AtlLimits@_J@ATL@@2_JB DQ 7fffffffffffffffH	; ATL::AtlLimits<__int64>::_Max
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000001_0000_0000_c000_000000000046 DD 01H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@_J@ATL@@2_JB
CONST	SEGMENT
?_Min@?$AtlLimits@_J@ATL@@2_JB DQ 8000000000000000H	; ATL::AtlLimits<__int64>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAF@ATL@@2QQtagVARIANT@@PAFQ3@ DD 08H ; ATL::CVarTypeInfo<short *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAF@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAF@ATL@@2GB DW 04002H		; ATL::CVarTypeInfo<short *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Max@?$AtlLimits@K@ATL@@2KB DD 0ffffffffH		; ATL::AtlLimits<unsigned long>::_Max
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@K@ATL@@2KB
CONST	SEGMENT
?_Min@?$AtlLimits@K@ATL@@2KB DD 00H			; ATL::AtlLimits<unsigned long>::_Min
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@F@ATL@@2QQtagVARIANT@@FQ3@ DD 08H ; ATL::CVarTypeInfo<short>::pmField
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@F@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@F@ATL@@2GB DW 02H			; ATL::CVarTypeInfo<short>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Max@?$AtlLimits@J@ATL@@2JB DD 07fffffffH		; ATL::AtlLimits<long>::_Max
CONST	ENDS
;	COMDAT __GUID_b196b284_bab4_101a_b69c_00aa00341d07
CONST	SEGMENT
__GUID_b196b284_bab4_101a_b69c_00aa00341d07 DD 0b196b284H
	DW	0bab4H
	DW	0101aH
	DB	0b6H
	DB	09cH
	DB	00H
	DB	0aaH
	DB	00H
	DB	034H
	DB	01dH
	DB	07H
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@J@ATL@@2JB
CONST	SEGMENT
?_Min@?$AtlLimits@J@ATL@@2JB DD 080000000H		; ATL::AtlLimits<long>::_Min
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT __GUID_7fd52380_4e07_101b_ae2d_08002b2ec713
CONST	SEGMENT
__GUID_7fd52380_4e07_101b_ae2d_08002b2ec713 DD 07fd52380H
	DW	04e07H
	DW	0101bH
	DB	0aeH
	DB	02dH
	DB	08H
	DB	00H
	DB	02bH
	DB	02eH
	DB	0c7H
	DB	013H
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAE@ATL@@2QQtagVARIANT@@PAEQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char *>::pmField
CONST	ENDS
;	COMDAT __GUID_00000109_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000109_0000_0000_c000_000000000046 DD 0109H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAE@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAE@ATL@@2GB DW 04011H		; ATL::CVarTypeInfo<unsigned char *>::VT
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Max@?$AtlLimits@I@ATL@@2IB DD 0ffffffffH		; ATL::AtlLimits<unsigned int>::_Max
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@I@ATL@@2IB
CONST	SEGMENT
?_Min@?$AtlLimits@I@ATL@@2IB DD 00H			; ATL::AtlLimits<unsigned int>::_Min
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAD@ATL@@2QQtagVARIANT@@PADQ3@ DD 08H ; ATL::CVarTypeInfo<char *>::pmField
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Max@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Max@?$AtlLimits@H@ATL@@2HB DD 07fffffffH		; ATL::AtlLimits<int>::_Max
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAD@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAD@ATL@@2GB DW 04010H		; ATL::CVarTypeInfo<char *>::VT
CONST	ENDS
;	COMDAT ?_Min@?$AtlLimits@H@ATL@@2HB
CONST	SEGMENT
?_Min@?$AtlLimits@H@ATL@@2HB DD 080000000H		; ATL::AtlLimits<int>::_Min
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@E@ATL@@2QQtagVARIANT@@EQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@E@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@E@ATL@@2GB DW 011H			; ATL::CVarTypeInfo<unsigned char>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@D@ATL@@2QQtagVARIANT@@DQ3@ DD 08H ; ATL::CVarTypeInfo<char>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@D@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@D@ATL@@2GB DW 010H			; ATL::CVarTypeInfo<char>::VT
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000146_0000_0000_c000_000000000046 DD 0146H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ??_C@_0O@MOIEHDHD@?$FLVERSIONTEXT?$FN?$AA@
CONST	SEGMENT
??_C@_0O@MOIEHDHD@?$FLVERSIONTEXT?$FN?$AA@ DB '[VERSIONTEXT]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJDLGGKC@?$FLTILE?$FN?$AA@
CONST	SEGMENT
??_C@_06CJDLGGKC@?$FLTILE?$FN?$AA@ DB '[TILE]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LPDABDIG@?$FLCLOCK?$FN?$AA@
CONST	SEGMENT
??_C@_07LPDABDIG@?$FLCLOCK?$FN?$AA@ DB '[CLOCK]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIPEPOLN@?$FLFILL?$FN?$AA@
CONST	SEGMENT
??_C@_06GIPEPOLN@?$FLFILL?$FN?$AA@ DB '[FILL]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GBEICCOI@?$FLMOVIE?$FN?$AA@
CONST	SEGMENT
??_C@_07GBEICCOI@?$FLMOVIE?$FN?$AA@ DB '[MOVIE]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HPEAJKOC@?$FLSTRINGLIST?$FN?$AA@
CONST	SEGMENT
??_C@_0N@HPEAJKOC@?$FLSTRINGLIST?$FN?$AA@ DB '[STRINGLIST]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBMNIIBA@?$FLANIM?$FN?$AA@
CONST	SEGMENT
??_C@_06PBMNIIBA@?$FLANIM?$FN?$AA@ DB '[ANIM]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EANNEFAN@?$FLPANNER?$FN?$AA@
CONST	SEGMENT
??_C@_08EANNEFAN@?$FLPANNER?$FN?$AA@ DB '[PANNER]', 00H	; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ??_C@_0M@KPPBDNDP@?$FLPOPUPMENU?$FN?$AA@
CONST	SEGMENT
??_C@_0M@KPPBDNDP@?$FLPOPUPMENU?$FN?$AA@ DB '[POPUPMENU]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PIDAALDH@?$FLSLIDER?$FN?$AA@
CONST	SEGMENT
??_C@_08PIDAALDH@?$FLSLIDER?$FN?$AA@ DB '[SLIDER]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07INBMONCF@?$FLSOUND?$FN?$AA@
CONST	SEGMENT
??_C@_07INBMONCF@?$FLSOUND?$FN?$AA@ DB '[SOUND]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKLEIEOO@?$FLLOCATOR?$FN?$AA@
CONST	SEGMENT
??_C@_09EKLEIEOO@?$FLLOCATOR?$FN?$AA@ DB '[LOCATOR]', 00H ; `string'
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ??_C@_0M@IDJJBGC@?$FLANIMATION?$FN?$AA@
CONST	SEGMENT
??_C@_0M@IDJJBGC@?$FLANIMATION?$FN?$AA@ DB '[ANIMATION]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HILHEBCO@?$FLMARQUE?$FN?$AA@
CONST	SEGMENT
??_C@_08HILHEBCO@?$FLMARQUE?$FN?$AA@ DB '[MARQUE]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KEIKLJDL@?$FLBOX?$FN?$AA@
CONST	SEGMENT
??_C@_05KEIKLJDL@?$FLBOX?$FN?$AA@ DB '[BOX]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMLHCONP@?$FLLINE?$FN?$AA@
CONST	SEGMENT
??_C@_06GMLHCONP@?$FLLINE?$FN?$AA@ DB '[LINE]', 00H	; `string'
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ??_C@_08CEKHCFCI@?$FLBITMAP?$FN?$AA@
CONST	SEGMENT
??_C@_08CEKHCFCI@?$FLBITMAP?$FN?$AA@ DB '[BITMAP]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKNAJLFB@?$FLIMAGE?$FN?$AA@
CONST	SEGMENT
??_C@_07OKNAJLFB@?$FLIMAGE?$FN?$AA@ DB '[IMAGE]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDEHKHNA@?$FLMAKEFONT?$FN?$AA@
CONST	SEGMENT
??_C@_0L@BDEHKHNA@?$FLMAKEFONT?$FN?$AA@ DB '[MAKEFONT]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MEJDDIPA@?$FLTREELIST?$FN?$AA@
CONST	SEGMENT
??_C@_0L@MEJDDIPA@?$FLTREELIST?$FN?$AA@ DB '[TREELIST]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GLIMEBAJ@?$FLSCROLLBAR?$FN?$AA@
CONST	SEGMENT
??_C@_0M@GLIMEBAJ@?$FLSCROLLBAR?$FN?$AA@ DB '[SCROLLBAR]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKCJGFHL@?$FLLISTBOX?$FN?$AA@
CONST	SEGMENT
??_C@_09FKCJGFHL@?$FLLISTBOX?$FN?$AA@ DB '[LISTBOX]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KOCBAFHB@?$FLEDITBOX?$FN?$AA@
CONST	SEGMENT
??_C@_09KOCBAFHB@?$FLEDITBOX?$FN?$AA@ DB '[EDITBOX]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06COFEICCM@?$FLTEXT?$FN?$AA@
CONST	SEGMENT
??_C@_06COFEICCM@?$FLTEXT?$FN?$AA@ DB '[TEXT]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPEONPCI@?$FLBUTTON?$FN?$AA@
CONST	SEGMENT
??_C@_08BPEONPCI@?$FLBUTTON?$FN?$AA@ DB '[BUTTON]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FKDBDIFN@?$FLWINDOW?$FN?$AA@
CONST	SEGMENT
??_C@_08FKDBDIFN@?$FLWINDOW?$FN?$AA@ DB '[WINDOW]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@
CONST	SEGMENT
??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@ DB '[NOTHING]', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_C_All_Tokens DD FLAT:??_C@_09NLBFAKCN@?$FLNOTHING?$FN?$AA@
	DD	FLAT:??_C@_08FKDBDIFN@?$FLWINDOW?$FN?$AA@
	DD	FLAT:??_C@_08BPEONPCI@?$FLBUTTON?$FN?$AA@
	DD	FLAT:??_C@_06COFEICCM@?$FLTEXT?$FN?$AA@
	DD	FLAT:??_C@_09KOCBAFHB@?$FLEDITBOX?$FN?$AA@
	DD	FLAT:??_C@_09FKCJGFHL@?$FLLISTBOX?$FN?$AA@
	DD	FLAT:??_C@_0M@GLIMEBAJ@?$FLSCROLLBAR?$FN?$AA@
	DD	FLAT:??_C@_0L@MEJDDIPA@?$FLTREELIST?$FN?$AA@
	DD	FLAT:??_C@_0L@BDEHKHNA@?$FLMAKEFONT?$FN?$AA@
	DD	FLAT:??_C@_07OKNAJLFB@?$FLIMAGE?$FN?$AA@
	DD	FLAT:??_C@_08CEKHCFCI@?$FLBITMAP?$FN?$AA@
	DD	FLAT:??_C@_06GMLHCONP@?$FLLINE?$FN?$AA@
	DD	FLAT:??_C@_05KEIKLJDL@?$FLBOX?$FN?$AA@
	DD	FLAT:??_C@_08HILHEBCO@?$FLMARQUE?$FN?$AA@
	DD	FLAT:??_C@_0M@IDJJBGC@?$FLANIMATION?$FN?$AA@
	DD	FLAT:??_C@_09EKLEIEOO@?$FLLOCATOR?$FN?$AA@
	DD	FLAT:??_C@_07INBMONCF@?$FLSOUND?$FN?$AA@
	DD	FLAT:??_C@_08PIDAALDH@?$FLSLIDER?$FN?$AA@
	DD	FLAT:??_C@_0M@KPPBDNDP@?$FLPOPUPMENU?$FN?$AA@
	DD	FLAT:??_C@_08EANNEFAN@?$FLPANNER?$FN?$AA@
	DD	FLAT:??_C@_06PBMNIIBA@?$FLANIM?$FN?$AA@
	DD	FLAT:??_C@_0N@HPEAJKOC@?$FLSTRINGLIST?$FN?$AA@
	DD	FLAT:??_C@_07GBEICCOI@?$FLMOVIE?$FN?$AA@
	DD	FLAT:??_C@_06GIPEPOLN@?$FLFILL?$FN?$AA@
	DD	FLAT:??_C@_0L@MEJDDIPA@?$FLTREELIST?$FN?$AA@
	DD	FLAT:??_C@_07LPDABDIG@?$FLCLOCK?$FN?$AA@
	DD	FLAT:??_C@_06CJDLGGKC@?$FLTILE?$FN?$AA@
	DD	FLAT:??_C@_0O@MOIEHDHD@?$FLVERSIONTEXT?$FN?$AA@
	DD	00H
?ParseCRLF@@3PADA DB 0dH				; ParseCRLF
	DB	0aH
	DB	00H
	ORG $+1
_UI95_Table DB	'NULL', 00H
	ORG $+59
	DD	00H
	DB	'NID', 00H
	ORG $+60
	DD	0fffffffeH
	DB	'C_DONT_CARE', 00H
	ORG $+52
	DD	0fffffffeH
	DB	'C_STATE_0', 00H
	ORG $+54
	DD	00H
	DB	'C_STATE_1', 00H
	ORG $+54
	DD	01H
	DB	'C_STATE_2', 00H
	ORG $+54
	DD	02H
	DB	'C_STATE_3', 00H
	ORG $+54
	DD	03H
	DB	'C_STATE_4', 00H
	ORG $+54
	DD	04H
	DB	'C_STATE_5', 00H
	ORG $+54
	DD	05H
	DB	'C_STATE_6', 00H
	ORG $+54
	DD	06H
	DB	'C_STATE_7', 00H
	ORG $+54
	DD	07H
	DB	'C_STATE_8', 00H
	ORG $+54
	DD	08H
	DB	'C_STATE_9', 00H
	ORG $+54
	DD	09H
	DB	'C_STATE_10', 00H
	ORG $+53
	DD	0aH
	DB	'C_STATE_11', 00H
	ORG $+53
	DD	0bH
	DB	'C_STATE_12', 00H
	ORG $+53
	DD	0cH
	DB	'C_STATE_13', 00H
	ORG $+53
	DD	0dH
	DB	'C_STATE_14', 00H
	ORG $+53
	DD	0eH
	DB	'C_STATE_15', 00H
	ORG $+53
	DD	0fH
	DB	'C_STATE_16', 00H
	ORG $+53
	DD	010H
	DB	'C_STATE_17', 00H
	ORG $+53
	DD	011H
	DB	'C_STATE_18', 00H
	ORG $+53
	DD	012H
	DB	'C_STATE_19', 00H
	ORG $+53
	DD	013H
	DB	'C_STATE_20', 00H
	ORG $+53
	DD	014H
	DB	'C_STATE_UP', 00H
	ORG $+53
	DD	00H
	DB	'C_STATE_DOWN', 00H
	ORG $+51
	DD	01H
	DB	'C_STATE_DISABLED', 00H
	ORG $+47
	DD	015H
	DB	'C_STATE_SELECTED', 00H
	ORG $+47
	DD	016H
	DB	'C_STATE_MOUSE', 00H
	ORG $+50
	DD	017H
	DB	'C_TYPE_NOTHING', 00H
	ORG $+49
	DD	018H
	DB	'C_TYPE_NORMAL', 00H
	ORG $+50
	DD	019H
	DB	'C_TYPE_TOGGLE', 00H
	ORG $+50
	DD	01aH
	DB	'C_TYPE_SELECT', 00H
	ORG $+50
	DD	01cH
	DB	'C_TYPE_RADIO', 00H
	ORG $+51
	DD	01bH
	DB	'C_TYPE_CUSTOM', 00H
	ORG $+50
	DD	01dH
	DB	'C_TYPE_SIZEX', 00H
	ORG $+51
	DD	01eH
	DB	'C_TYPE_SIZEY', 00H
	ORG $+51
	DD	01fH
	DB	'C_TYPE_SIZEXY', 00H
	ORG $+50
	DD	020H
	DB	'C_TYPE_SIZEW', 00H
	ORG $+51
	DD	021H
	DB	'C_TYPE_SIZEH', 00H
	ORG $+51
	DD	022H
	DB	'C_TYPE_SIZEWH', 00H
	ORG $+50
	DD	023H
	DB	'C_TYPE_DRAGX', 00H
	ORG $+51
	DD	024H
	DB	'C_TYPE_DRAGY', 00H
	ORG $+51
	DD	025H
	DB	'C_TYPE_DRAGXY', 00H
	ORG $+50
	DD	026H
	DB	'C_TYPE_TEXT', 00H
	ORG $+52
	DD	027H
	DB	'C_TYPE_PASSWORD', 00H
	ORG $+48
	DD	028H
	DB	'C_TYPE_INTEGER', 00H
	ORG $+49
	DD	029H
	DB	'C_TYPE_FLOAT', 00H
	ORG $+51
	DD	02aH
	DB	'C_TYPE_FILENAME', 00H
	ORG $+48
	DD	02bH
	DB	'C_TYPE_MENU', 00H
	ORG $+52
	DD	031H
	DB	'C_TYPE_LEFT', 00H
	ORG $+52
	DD	02cH
	DB	'C_TYPE_CENTER', 00H
	ORG $+50
	DD	02dH
	DB	'C_TYPE_RIGHT', 00H
	ORG $+51
	DD	02eH
	DB	'C_TYPE_ROOT', 00H
	ORG $+52
	DD	02fH
	DB	'C_TYPE_INFO', 00H
	ORG $+52
	DD	030H
	DB	'C_TYPE_ITEM', 00H
	ORG $+52
	DD	032H
	DB	'C_TYPE_LMOUSEDOWN', 00H
	ORG $+46
	DD	033H
	DB	'C_TYPE_LMOUSEUP', 00H
	ORG $+48
	DD	034H
	DB	'C_TYPE_LMOUSEDBLCLK', 00H
	ORG $+44
	DD	035H
	DB	'C_TYPE_RMOUSEDOWN', 00H
	ORG $+46
	DD	036H
	DB	'C_TYPE_RMOUSEUP', 00H
	ORG $+48
	DD	037H
	DB	'C_TYPE_RMOUSEDBLCLK', 00H
	ORG $+44
	DD	038H
	DB	'C_TYPE_MOUSEOVER', 00H
	ORG $+47
	DD	039H
	DB	'C_TYPE_MOUSEREPEAT', 00H
	ORG $+45
	DD	03aH
	DB	'C_TYPE_EXCLUSIVE', 00H
	ORG $+47
	DD	03cH
	DB	'C_TYPE_MOUSEMOVE', 00H
	ORG $+47
	DD	03dH
	DB	'C_TYPE_VERTICAL', 00H
	ORG $+48
	DD	03eH
	DB	'C_TYPE_HORIZONTAL', 00H
	ORG $+46
	DD	03fH
	DB	'C_TYPE_LOOP', 00H
	ORG $+52
	DD	040H
	DB	'C_TYPE_STOPATEND', 00H
	ORG $+47
	DD	041H
	DB	'C_TYPE_PINGPONG', 00H
	ORG $+48
	DD	042H
	DB	'C_TYPE_TIMER', 00H
	ORG $+51
	DD	043H
	DB	'C_TYPE_TRANSLUCENT', 00H
	ORG $+45
	DD	044H
	DB	'C_TYPE_IPADDRESS', 00H
	ORG $+47
	DD	04aH
	DB	00H
	DB	0ffH
	ORG $+62
	ORG $+4
	ORG $+4
_UI95_BitTable DB 'NULL', 00H
	ORG $+59
	DD	00H
	DB	'C_BIT_NOTHING', 00H
	ORG $+50
	DD	00H
	DB	'C_BIT_FIXEDSIZE', 00H
	ORG $+48
	DD	01H
	DB	'C_BIT_LEADINGZEROS', 00H
	ORG $+45
	DD	02H
	DB	'C_BIT_VERTICAL', 00H
	ORG $+49
	DD	04H
	DB	'C_BIT_HORIZONTAL', 00H
	ORG $+47
	DD	08H
	DB	'C_BIT_USEOUTLINE', 00H
	ORG $+47
	DD	010H
	DB	'C_BIT_LEFT', 00H
	ORG $+53
	DD	020H
	DB	'C_BIT_RIGHT', 00H
	ORG $+52
	DD	040H
	DB	'C_BIT_TOP', 00H
	ORG $+54
	DD	080H
	DB	'C_BIT_BOTTOM', 00H
	ORG $+51
	DD	0100H
	DB	'C_BIT_HCENTER', 00H
	ORG $+50
	DD	0200H
	DB	'C_BIT_VCENTER', 00H
	ORG $+50
	DD	0400H
	DB	'C_BIT_ENABLED', 00H
	ORG $+50
	DD	0800H
	DB	'C_BIT_DRAGABLE', 00H
	ORG $+49
	DD	01000H
	DB	'C_BIT_INVISIBLE', 00H
	ORG $+48
	DD	02000H
	DB	'C_BIT_FORCEMOUSEOVER', 00H
	ORG $+43
	DD	04000H
	DB	'C_BIT_USEBGIMAGE', 00H
	ORG $+47
	DD	08000H
	DB	'C_BIT_TIMER', 00H
	ORG $+52
	DD	010000H
	DB	'C_BIT_ABSOLUTE', 00H
	ORG $+49
	DD	040000H
	DB	'C_BIT_SELECTABLE', 00H
	ORG $+47
	DD	080000H
	DB	'C_BIT_OPAQUE', 00H
	ORG $+51
	DD	0100000H
	DB	'C_BIT_CANTMOVE', 00H
	ORG $+49
	DD	0200000H
	DB	'C_BIT_USELINE', 00H
	ORG $+50
	DD	0400000H
	DB	'C_BIT_WORDWRAP', 00H
	ORG $+49
	DD	02000000H
	DB	'C_BIT_REMOVE', 00H
	ORG $+51
	DD	04000000H
	DB	'C_BIT_NOCLEANUP', 00H
	ORG $+48
	DD	08000000H
	DB	'C_BIT_TRANSLUCENT', 00H
	ORG $+46
	DD	020000000H
	DB	'C_BIT_USEBGFILL', 00H
	ORG $+48
	DD	040000000H
	DB	'C_BIT_MOUSEOVER', 00H
	ORG $+48
	DD	010000000H
	DB	'C_BIT_NOLABEL', 00H
	ORG $+50
	DD	01000000H
	DB	00H
	DB	0ffH
	ORG $+62
	ORG $+4
_UI95_FontTable DB 'FALSE', 00H
	ORG $+58
	DD	00H
	DB	'TRUE', 00H
	ORG $+59
	DD	01H
	DB	'FW_DONTCARE', 00H
	ORG $+52
	DD	00H
	DB	'FW_THIN', 00H
	ORG $+56
	DD	064H
	DB	'FW_EXTRALIGHT', 00H
	ORG $+50
	DD	0c8H
	DB	'FW_ULTRALIGHT', 00H
	ORG $+50
	DD	0c8H
	DB	'FW_LIGHT', 00H
	ORG $+55
	DD	012cH
	DB	'FW_NORMAL', 00H
	ORG $+54
	DD	0190H
	DB	'FW_REGULAR', 00H
	ORG $+53
	DD	0190H
	DB	'FW_MEDIUM', 00H
	ORG $+54
	DD	01f4H
	DB	'FW_SEMIBOLD', 00H
	ORG $+52
	DD	0258H
	DB	'FW_DEMIBOLD', 00H
	ORG $+52
	DD	0258H
	DB	'FW_BOLD', 00H
	ORG $+56
	DD	02bcH
	DB	'FW_EXTRABOLD', 00H
	ORG $+51
	DD	0320H
	DB	'FW_ULTRABOLD', 00H
	ORG $+51
	DD	0320H
	DB	'FW_HEAVY', 00H
	ORG $+55
	DD	0384H
	DB	'FW_BLACK', 00H
	ORG $+55
	DD	0384H
	DB	'ANSI_CHARSET', 00H
	ORG $+51
	DD	00H
	DB	'DEFAULT_CHARSET', 00H
	ORG $+48
	DD	01H
	DB	'SYMBOL_CHARSET', 00H
	ORG $+49
	DD	02H
	DB	'SHIFTJIS_CHARSET', 00H
	ORG $+47
	DD	080H
	DB	'GB2312_CHARSET', 00H
	ORG $+49
	DD	086H
	DB	'HANGEUL_CHARSET', 00H
	ORG $+48
	DD	081H
	DB	'CHINESEBIG5_CHARSET', 00H
	ORG $+44
	DD	088H
	DB	'OEM_CHARSET', 00H
	ORG $+52
	DD	0ffH
	DB	'JOHAB_CHARSET', 00H
	ORG $+50
	DD	082H
	DB	'HEBREW_CHARSET', 00H
	ORG $+49
	DD	0b1H
	DB	'ARABIC_CHARSET', 00H
	ORG $+49
	DD	0b2H
	DB	'GREEK_CHARSET', 00H
	ORG $+50
	DD	0a1H
	DB	'TURKISH_CHARSET', 00H
	ORG $+48
	DD	0a2H
	DB	'THAI_CHARSET', 00H
	ORG $+51
	DD	0deH
	DB	'EASTEUROPE_CHARSET', 00H
	ORG $+45
	DD	0eeH
	DB	'RUSSIAN_CHARSET', 00H
	ORG $+48
	DD	0ccH
	DB	'MAC_CHARSET', 00H
	ORG $+52
	DD	04dH
	DB	'BALTIC_CHARSET', 00H
	ORG $+49
	DD	0baH
	DB	'OUT_CHARACTER_PRECIS', 00H
	ORG $+43
	DD	02H
	DB	'OUT_DEFAULT_PRECIS', 00H
	ORG $+45
	DD	00H
	DB	'OUT_DEVICE_PRECIS', 00H
	ORG $+46
	DD	05H
	DB	'OUT_OUTLINE_PRECIS', 00H
	ORG $+45
	DD	08H
	DB	'OUT_RASTER_PRECIS', 00H
	ORG $+46
	DD	06H
	DB	'OUT_STRING_PRECIS', 00H
	ORG $+46
	DD	01H
	DB	'OUT_STROKE_PRECIS', 00H
	ORG $+46
	DD	03H
	DB	'OUT_TT_ONLY_PRECIS', 00H
	ORG $+45
	DD	07H
	DB	'OUT_TT_PRECIS', 00H
	ORG $+50
	DD	04H
	DB	'CLIP_DEFAULT_PRECIS', 00H
	ORG $+44
	DD	00H
	DB	'CLIP_CHARACTER_PRECIS', 00H
	ORG $+42
	DD	01H
	DB	'CLIP_STROKE_PRECIS', 00H
	ORG $+45
	DD	02H
	DB	'CLIP_MASK', 00H
	ORG $+54
	DD	0fH
	DB	'CLIP_EMBEDDED', 00H
	ORG $+50
	DD	080H
	DB	'CLIP_LH_ANGLES', 00H
	ORG $+49
	DD	010H
	DB	'CLIP_TT_ALWAYS', 00H
	ORG $+49
	DD	020H
	DB	'DEFAULT_QUALITY', 00H
	ORG $+48
	DD	00H
	DB	'DRAFT_QUALITY', 00H
	ORG $+50
	DD	01H
	DB	'PROOF_QUALITY', 00H
	ORG $+50
	DD	02H
	DB	'DEFAULT_PITCH', 00H
	ORG $+50
	DD	00H
	DB	'FIXED_PITCH', 00H
	ORG $+52
	DD	01H
	DB	'VARIABLE_PITCH', 00H
	ORG $+49
	DD	02H
	DB	'FF_DECORATIVE', 00H
	ORG $+50
	DD	050H
	DB	'FF_DONTCARE', 00H
	ORG $+52
	DD	00H
	DB	'FF_MODERN', 00H
	ORG $+54
	DD	030H
	DB	'FF_ROMAN', 00H
	ORG $+55
	DD	010H
	DB	'FF_SCRIPT', 00H
	ORG $+54
	DD	040H
	DB	'FF_SWISS', 00H
	ORG $+55
	DD	020H
	DB	00H
	DB	0ffH
	ORG $+62
	ORG $+4
_DATA	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT __GUID_1cf2b120_547d_101b_8e65_08002b2bd119
CONST	SEGMENT
__GUID_1cf2b120_547d_101b_8e65_08002b2bd119 DD 01cf2b120H
	DW	0547dH
	DW	0101bH
	DB	08eH
	DB	065H
	DB	08H
	DB	00H
	DB	02bH
	DB	02bH
	DB	0d1H
	DB	019H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT __GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352
CONST	SEGMENT
__GUID_fc4801a3_2ba9_11cf_a229_00aa003d7352 DD 0fc4801a3H
	DW	02ba9H
	DW	011cfH
	DB	0a2H
	DB	029H
	DB	00H
	DB	0aaH
	DB	00H
	DB	03dH
	DB	073H
	DB	052H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?MAX_TYPE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_TYPE@CRegParser@ATL@@1HB DD 01000H			; ATL::CRegParser::MAX_TYPE
CONST	ENDS
;	COMDAT ?cbNeverDelete@CRegParser@ATL@@1HB
CONST	SEGMENT
?cbNeverDelete@CRegParser@ATL@@1HB DD 0cH		; ATL::CRegParser::cbNeverDelete
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?MAX_VALUE@CRegParser@ATL@@1HB
CONST	SEGMENT
?MAX_VALUE@CRegParser@ATL@@1HB DD 01000H		; ATL::CRegParser::MAX_VALUE
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QBDB
CONST	SEGMENT
?szDelete@ATL@@3QBDB DD FLAT:??_C@_06JBKGCNBB@Delete?$AA@ ; ATL::szDelete
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QBDB
CONST	SEGMENT
?szNoRemove@ATL@@3QBDB DD FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@ ; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QBDB
CONST	SEGMENT
?szForceRemove@ATL@@3QBDB DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@ ; ATL::szForceRemove
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QBDB
CONST	SEGMENT
?szValToken@ATL@@3QBDB DD FLAT:??_C@_03LAIAPFCB@Val?$AA@ ; ATL::szValToken
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QBDB
CONST	SEGMENT
?szBinaryVal@ATL@@3QBDB DD FLAT:??_C@_01HMGJMAIH@B?$AA@	; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QBDB
CONST	SEGMENT
?szDwordVal@ATL@@3QBDB DD FLAT:??_C@_01CKDDGHAB@D?$AA@	; ATL::szDwordVal
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QBDB
CONST	SEGMENT
?multiszStringVal@ATL@@3QBDB DD FLAT:??_C@_01PLPBNMEI@M?$AA@ ; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QBDB
CONST	SEGMENT
?szStringVal@ATL@@3QBDB DD FLAT:??_C@_01CPLAODJH@S?$AA@	; ATL::szStringVal
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3DB
CONST	SEGMENT
?chEquals@ATL@@3DB DB 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3DB
CONST	SEGMENT
?chQuote@ATL@@3DB DB 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3DB
CONST	SEGMENT
?chLeftBracket@ATL@@3DB DB 07bH				; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3DB
CONST	SEGMENT
?chRightBracket@ATL@@3DB DB 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3DB
CONST	SEGMENT
?chDirSep@ATL@@3DB DB 05cH				; ATL::chDirSep
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PATtagCY@@@ATL@@2QQtagVARIANT@@PATtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY *>::pmField
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PATtagCY@@@ATL@@2GB DW 04006H	; ATL::CVarTypeInfo<tagCY *>::VT
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@TtagCY@@@ATL@@2QQtagVARIANT@@TtagCY@@Q3@ DD 08H ; ATL::CVarTypeInfo<tagCY>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@TtagCY@@@ATL@@2GB DW 06H		; ATL::CVarTypeInfo<tagCY>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2QQtagVARIANT@@PAPAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIDispatch@@@ATL@@2GB DW 04009H	; ATL::CVarTypeInfo<IDispatch * *>::VT
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2QQtagVARIANT@@PAUIDispatch@@Q3@ DD 08H ; ATL::CVarTypeInfo<IDispatch *>::pmField
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIDispatch@@@ATL@@2GB DW 09H	; ATL::CVarTypeInfo<IDispatch *>::VT
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT __GUID_0000010c_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0000010c_0000_0000_c000_000000000046 DD 010cH
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2QQtagVARIANT@@PAPAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown * *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPAUIUnknown@@@ATL@@2GB DW 0400dH	; ATL::CVarTypeInfo<IUnknown * *>::VT
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2QQtagVARIANT@@PAUIUnknown@@Q3@ DD 08H ; ATL::CVarTypeInfo<IUnknown *>::pmField
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUIUnknown@@@ATL@@2GB DW 0dH	; ATL::CVarTypeInfo<IUnknown *>::VT
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAPA_W@ATL@@2QQtagVARIANT@@PAPA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t * *>::pmField
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAPA_W@ATL@@2GB DW 04008H		; ATL::CVarTypeInfo<wchar_t * *>::VT
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_W@ATL@@2QQtagVARIANT@@PA_WQ3@ DD 08H ; ATL::CVarTypeInfo<wchar_t *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_W@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_W@ATL@@2GB DW 08H			; ATL::CVarTypeInfo<wchar_t *>::VT
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT __GUID_0002e012_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_0002e012_0000_0000_c000_000000000046 DD 02e012H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAUtagVARIANT@@@ATL@@2GB DW 0400cH	; ATL::CVarTypeInfo<tagVARIANT *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAN@ATL@@2QQtagVARIANT@@PANQ3@ DD 08H ; ATL::CVarTypeInfo<double *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAN@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAN@ATL@@2GB DW 04005H		; ATL::CVarTypeInfo<double *>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@N@ATL@@2QQtagVARIANT@@NQ3@ DD 08H ; ATL::CVarTypeInfo<double>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@N@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@N@ATL@@2GB DW 05H			; ATL::CVarTypeInfo<double>::VT
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAM@ATL@@2QQtagVARIANT@@PAMQ3@ DD 08H ; ATL::CVarTypeInfo<float *>::pmField
CONST	ENDS
;	COMDAT __GUID_00020400_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00020400_0000_0000_c000_000000000046 DD 020400H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PAM@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PAM@ATL@@2GB DW 04004H		; ATL::CVarTypeInfo<float *>::VT
CONST	ENDS
;	COMDAT __GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851
CONST	SEGMENT
__GUID_a6bc3ac0_dbaa_11ce_9de3_00aa004bb851 DD 0a6bc3ac0H
	DW	0dbaaH
	DW	011ceH
	DB	09dH
	DB	0e3H
	DB	00H
	DB	0aaH
	DB	00H
	DB	04bH
	DB	0b8H
	DB	051H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@M@ATL@@2QQtagVARIANT@@MQ3@ DD 08H ; ATL::CVarTypeInfo<float>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@M@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@M@ATL@@2GB DW 04H			; ATL::CVarTypeInfo<float>::VT
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_K@ATL@@2QQtagVARIANT@@PA_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_K@ATL@@2GB DW 04015H		; ATL::CVarTypeInfo<unsigned __int64 *>::VT
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_K@ATL@@2QQtagVARIANT@@_KQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned __int64>::pmField
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_K@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_K@ATL@@2GB DW 015H			; ATL::CVarTypeInfo<unsigned __int64>::VT
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PA_J@ATL@@2QQtagVARIANT@@PA_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64 *>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@PA_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@PA_J@ATL@@2GB DW 04014H		; ATL::CVarTypeInfo<__int64 *>::VT
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@_J@ATL@@2QQtagVARIANT@@_JQ3@ DD 08H ; ATL::CVarTypeInfo<__int64>::pmField
CONST	ENDS
;	COMDAT ?VT@?$CVarTypeInfo@_J@ATL@@2GB
CONST	SEGMENT
?VT@?$CVarTypeInfo@_J@ATL@@2GB DW 014H			; ATL::CVarTypeInfo<__int64>::VT
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@
CONST	SEGMENT
?pmField@?$CVarTypeInfo@PAK@ATL@@2QQtagVARIANT@@PAKQ3@ DD 08H ; ATL::CVarTypeInfo<unsigned long *>::pmField
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??1CComBSTR@ATL@@QAE@XZ				; ATL::CComBSTR::~CComBSTR
PUBLIC	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
PUBLIC	??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?SetFlags@C_Hash@@QAEXJ@Z			; C_Hash::SetFlags
PUBLIC	??_GC_Hash@@QAEPAXI@Z				; C_Hash::`scalar deleting destructor'
PUBLIC	?SetIDTable@C_Sound@@QAEXPAVC_Hash@@@Z		; C_Sound::SetIDTable
PUBLIC	?GetLastID@C_String@@QAEJXZ			; C_String::GetLastID
PUBLIC	?SetFlagBitOn@C_Base@@UAEXJ@Z			; C_Base::SetFlagBitOn
PUBLIC	?SetFlagBitOff@C_Base@@UAEXJ@Z			; C_Base::SetFlagBitOff
PUBLIC	?SetX@C_Base@@UAEXJ@Z				; C_Base::SetX
PUBLIC	?SetY@C_Base@@UAEXJ@Z				; C_Base::SetY
PUBLIC	?SetW@C_Base@@UAEXJ@Z				; C_Base::SetW
PUBLIC	?SetH@C_Base@@UAEXJ@Z				; C_Base::SetH
PUBLIC	?SetXY@C_Base@@UAEXJJ@Z				; C_Base::SetXY
PUBLIC	?SetWH@C_Base@@UAEXJJ@Z				; C_Base::SetWH
PUBLIC	?SetXYWH@C_Base@@UAEXJJJJ@Z			; C_Base::SetXYWH
PUBLIC	?SetRelX@C_Base@@UAEXJ@Z			; C_Base::SetRelX
PUBLIC	?SetRelY@C_Base@@UAEXJ@Z			; C_Base::SetRelY
PUBLIC	?SetRelXY@C_Base@@UAEXJJ@Z			; C_Base::SetRelXY
PUBLIC	?SetState@C_Base@@UAEXF@Z			; C_Base::SetState
PUBLIC	?SetHotKey@C_Base@@UAEXF@Z			; C_Base::SetHotKey
PUBLIC	?SetMenu@C_Base@@UAEXJ@Z			; C_Base::SetMenu
PUBLIC	?SetSound@C_Base@@UAEXJF@Z			; C_Base::SetSound
PUBLIC	?SetCursorID@C_Base@@UAEXJ@Z			; C_Base::SetCursorID
PUBLIC	?SetDragCursorID@C_Base@@UAEXJ@Z		; C_Base::SetDragCursorID
PUBLIC	?SetHelpText@C_Base@@UAEXJ@Z			; C_Base::SetHelpText
PUBLIC	?SetMouseOver@C_Base@@UAEXF@Z			; C_Base::SetMouseOver
PUBLIC	?SetMouseOverColor@C_Base@@UAEXK@Z		; C_Base::SetMouseOverColor
PUBLIC	?SetMouseOverPerc@C_Base@@UAEXF@Z		; C_Base::SetMouseOverPerc
PUBLIC	?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z	; C_Base::SetCallback
PUBLIC	?GetRelX@C_Base@@UAEJXZ				; C_Base::GetRelX
PUBLIC	?GetRelY@C_Base@@UAEJXZ				; C_Base::GetRelY
PUBLIC	?GetState@C_Base@@UAEFXZ			; C_Base::GetState
PUBLIC	?GetHotKey@C_Base@@UAEFXZ			; C_Base::GetHotKey
PUBLIC	?GetMenu@C_Base@@UAEJXZ				; C_Base::GetMenu
PUBLIC	?GetHelpText@C_Base@@UAEJXZ			; C_Base::GetHelpText
PUBLIC	?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z		; C_Base::GetSound
PUBLIC	?GetMouseOver@C_Base@@UAEFXZ			; C_Base::GetMouseOver
PUBLIC	?GetCursorID@C_Base@@UAEJXZ			; C_Base::GetCursorID
PUBLIC	?GetDragCursorID@C_Base@@UAEJXZ			; C_Base::GetDragCursorID
PUBLIC	?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ		; C_Base::GetCallback
PUBLIC	?IsBase@C_Base@@UAEHXZ				; C_Base::IsBase
PUBLIC	?IsControl@C_Base@@UAEHXZ			; C_Base::IsControl
PUBLIC	?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ; C_Base::HighLite
PUBLIC	?Activate@C_Base@@UAEXXZ			; C_Base::Activate
PUBLIC	?Deactivate@C_Base@@UAEXXZ			; C_Base::Deactivate
PUBLIC	?CheckHotSpots@C_Base@@UAEJJJ@Z			; C_Base::CheckHotSpots
PUBLIC	?CheckKeyboard@C_Base@@UAEHEEEJ@Z		; C_Base::CheckKeyboard
PUBLIC	?Process@C_Base@@UAEHJF@Z			; C_Base::Process
PUBLIC	?CloseWindow@C_Base@@UAEHXZ			; C_Base::CloseWindow
PUBLIC	?MouseOver@C_Base@@UAEHJJPAV1@@Z		; C_Base::MouseOver
PUBLIC	?GetMe@C_Base@@UAEPAV1@XZ			; C_Base::GetMe
PUBLIC	?Dragable@C_Base@@UAEHJ@Z			; C_Base::Dragable
PUBLIC	?GetItemXY@C_Base@@UAEXJPAJ0@Z			; C_Base::GetItemXY
PUBLIC	?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z	; C_Base::Drag
PUBLIC	?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z	; C_Base::Drop
PUBLIC	?Wheel@C_Base@@UAEHHGG@Z			; C_Base::Wheel
PUBLIC	?GetFont@C_Text@@UAEJXZ				; C_Text::GetFont
PUBLIC	?SaveText@C_Text@@UAEXPAXPAVC_Parser@@@Z	; C_Text::SaveText
PUBLIC	??0C_VersionText@@QAE@XZ			; C_VersionText::C_VersionText
PUBLIC	?SetText@C_VersionText@@UAEXPAD@Z		; C_VersionText::SetText
PUBLIC	?SetText@C_VersionText@@UAEXJ@Z			; C_VersionText::SetText
PUBLIC	??1C_VersionText@@UAE@XZ			; C_VersionText::~C_VersionText
PUBLIC	??_GC_VersionText@@UAEPAXI@Z			; C_VersionText::`scalar deleting destructor'
PUBLIC	?WindowParser@C_Parser@@AAEPAVC_Window@@XZ	; C_Parser::WindowParser
PUBLIC	?ControlParser@C_Parser@@AAEPAVC_Base@@XZ	; C_Parser::ControlParser
PUBLIC	?PopupParser@C_Parser@@AAEPAVC_Base@@XZ		; C_Parser::PopupParser
PUBLIC	?AddInternalIDs@C_Parser@@AAEXQAUID_TABLE@@@Z	; C_Parser::AddInternalIDs
PUBLIC	?TokenizeIDs@C_Parser@@AAEJPADJ@Z		; C_Parser::TokenizeIDs
PUBLIC	?LoadIDTable@C_Parser@@AAEXPAD@Z		; C_Parser::LoadIDTable
PUBLIC	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z	; C_Parser::OpenArtFile
PUBLIC	??0C_Parser@@QAE@XZ				; C_Parser::C_Parser
PUBLIC	??1C_Parser@@QAE@XZ				; C_Parser::~C_Parser
PUBLIC	?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z ; C_Parser::Setup
PUBLIC	?Cleanup@C_Parser@@QAEXXZ			; C_Parser::Cleanup
PUBLIC	?FindIDStr@C_Parser@@QAEPADJ@Z			; C_Parser::FindIDStr
PUBLIC	?FindID@C_Parser@@QAEJPAD@Z			; C_Parser::FindID
PUBLIC	?FindToken@C_Parser@@QAEJPAD@Z			; C_Parser::FindToken
PUBLIC	?LoadIDList@C_Parser@@QAEXPAD@Z			; C_Parser::LoadIDList
PUBLIC	?LoadScript@C_Parser@@QAEHPAD@Z			; C_Parser::LoadScript
PUBLIC	?ParseScript@C_Parser@@QAEHPAD@Z		; C_Parser::ParseScript
PUBLIC	?LoadWindowList@C_Parser@@QAEHPAD@Z		; C_Parser::LoadWindowList
PUBLIC	?LoadSoundList@C_Parser@@QAEHPAD@Z		; C_Parser::LoadSoundList
PUBLIC	?LoadStringList@C_Parser@@QAEHPAD@Z		; C_Parser::LoadStringList
PUBLIC	?LoadMovieList@C_Parser@@QAEHPAD@Z		; C_Parser::LoadMovieList
PUBLIC	?LoadImageList@C_Parser@@QAEHPAD@Z		; C_Parser::LoadImageList
PUBLIC	?LoadPopupMenuList@C_Parser@@QAEHPAD@Z		; C_Parser::LoadPopupMenuList
PUBLIC	?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z ; C_Parser::ParseSoundBite
PUBLIC	?ParseControl@C_Parser@@QAEPAVC_Base@@PAD@Z	; C_Parser::ParseControl
PUBLIC	?ParseWindow@C_Parser@@QAEPAVC_Window@@PAD@Z	; C_Parser::ParseWindow
PUBLIC	?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z	; C_Parser::ParseImage
PUBLIC	?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z	; C_Parser::ParseSound
PUBLIC	?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z	; C_Parser::ParseString
PUBLIC	?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z	; C_Parser::ParseMovie
PUBLIC	?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z	; C_Parser::ParseFont
PUBLIC	?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z	; C_Parser::ParsePopupMenu
PUBLIC	?AddNewID@C_Parser@@QAEJPADJ@Z			; C_Parser::AddNewID
PUBLIC	?LogError@C_Parser@@QAEXPAD@Z			; C_Parser::LogError
PUBLIC	?GetFlags@C_Window@@QAEJXZ			; C_Window::GetFlags
PUBLIC	?GetID@C_Window@@QAEJXZ				; C_Window::GetID
PUBLIC	?UI_FILESIZE@@YAJPAU_iobuf@@@Z			; UI_FILESIZE
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7C_VersionText@@6B@				; C_VersionText::`vftable'
PUBLIC	??_C@_01MCMALHOG@a?$AA@				; `string'
PUBLIC	??_C@_0M@CADKCABC@ui95err?4log?$AA@		; `string'
PUBLIC	??_C@_0O@JLGOJDPF@Setup?5Parser?6?$AA@		; `string'
PUBLIC	??_C@_0BA@NDJBGPGB@Cleanup?5Parser?6?$AA@	; `string'
PUBLIC	??_C@_0BO@INFGEAJH@LoadIDTable?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@JALCFDH@LoadIDTable?5seek?5end?5failed?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BO@IIPENBFP@LoadIDTable?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@BMHBEFCI@LoadScript?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@GABGFBNH@LoadScript?5seek?5start?5failed?5?$CI?$CFs@ ; `string'
PUBLIC	??_C@_0BN@BJNDNEOA@LoadScript?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_04FLICLKIC@?2art?$AA@			; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0CA@GDPFFHAC@LoadWindowList?5processing?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@LNIDGHFB@LoadWindowList?5open?5failed?5?$CI?$CFs?$CJ?6@ ; `string'
PUBLIC	??_C@_0BL@CCCIALCG@Open?5Art?5file?5found?5as?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@LBBEPHCG@LoadWindowList?5seek?5start?5failed@ ; `string'
PUBLIC	??_C@_0CB@DAEKLAMC@LoadWindowList?5read?5failed?5?$CI?$CFs?$CJ?6@ ; `string'
PUBLIC	??_C@_0CE@DDNELKMF@LoadWindowList?5Parsing?5Window?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CI@FDODKDM@LoadWindowList?5NO?5Window?5returne@ ; `string'
PUBLIC	??_C@_0CD@PLJJBFFH@LoadPopupMenuList?5processing?5?$CI?$CFs@ ; `string'
PUBLIC	??_C@_0CE@KGBKKOGI@LoadPopupMenuList?5open?5failed?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CK@KGFPMJFG@LoadPopupMenuList?5seek?5start?5fai@ ; `string'
PUBLIC	??_C@_0CE@CLNDHJPL@LoadPopupMenuList?5read?5failed?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CI@FJKHPLBF@LoadPopupMenuList?5Parsing?5PopMen@ ; `string'
PUBLIC	??_C@_0CP@GFPLFNHN@LoadPopupMenuList?5NO?5Popup?5Menu?5@ ; `string'
PUBLIC	??_C@_0CA@OAOMCCII@LoadImageList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@BDBHDHEO@LoadImageList?5seek?5start?5failed?5@ ; `string'
PUBLIC	??_C@_0CA@GNCFPFBL@LoadImageList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@KAAMHMDA@LoadSoundList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@MEEIBLAE@LoadSoundList?5seek?5start?5failed?5@ ; `string'
PUBLIC	??_C@_0CA@CNMFKLKD@LoadSoundList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@EEIINBIN@LoadStringList?5open?5failed?5?$CI?$CFs?$CJ?6@ ; `string'
PUBLIC	??_C@_0CH@CGHLBJJI@LoadStringList?5seek?5start?5failed@ ; `string'
PUBLIC	??_C@_0CB@MJEBAGBO@LoadStringList?5read?5failed?5?$CI?$CFs?$CJ?6@ ; `string'
PUBLIC	??_C@_0CA@OGCDPDB@LoadMovieList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@BIFIBKGC@LoadMovieList?5seek?5start?5failed?5@ ; `string'
PUBLIC	??_C@_0CA@IDKLOIKC@LoadMovieList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_04DIDHKLLF@?$CF1ld?$AA@			; `string'
PUBLIC	??_C@_0CF@OECDJKFN@ControlParser?3?5Token?5NOT?5FOUND?5?$FL@ ; `string'
PUBLIC	??_C@_03EOCODDKD@NID?$AA@			; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVC_Base@@@8				; C_Base `RTTI Type Descriptor'
PUBLIC	??_R3C_Base@@8					; C_Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Base@@8					; C_Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_Base@@8				; C_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4C_VersionText@@6B@				; C_VersionText::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVC_VersionText@@@8			; C_VersionText `RTTI Type Descriptor'
PUBLIC	??_R3C_VersionText@@8				; C_VersionText::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_VersionText@@8				; C_VersionText::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@C_VersionText@@8			; C_VersionText::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@C_Text@@8				; C_Text::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVC_Text@@@8				; C_Text `RTTI Type Descriptor'
PUBLIC	??_R3C_Text@@8					; C_Text::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2C_Text@@8					; C_Text::`RTTI Base Class Array'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strnicmp:PROC
EXTRN	_atol:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	_fprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_MonoPrint:PROC
EXTRN	??0C_Hash@@QAE@XZ:PROC				; C_Hash::C_Hash
EXTRN	??1C_Hash@@QAE@XZ:PROC				; C_Hash::~C_Hash
EXTRN	?Setup@C_Hash@@QAEXJ@Z:PROC			; C_Hash::Setup
EXTRN	?Cleanup@C_Hash@@QAEXXZ:PROC			; C_Hash::Cleanup
EXTRN	?FindTextID@C_Hash@@QAEJPAD@Z:PROC		; C_Hash::FindTextID
EXTRN	?AddText@C_Hash@@QAEJPBD@Z:PROC			; C_Hash::AddText
EXTRN	?AddTextID@C_Hash@@QAEJJPAD@Z:PROC		; C_Hash::AddTextID
EXTRN	??0C_Font@@QAE@XZ:PROC				; C_Font::C_Font
EXTRN	?Setup@C_Font@@QAEXPAVC_Handler@@@Z:PROC	; C_Font::Setup
EXTRN	?FontFind@C_Font@@QAEFPAD@Z:PROC		; C_Font::FontFind
EXTRN	?FontFunction@C_Font@@QAEXFQAJPADPAUtagLOGFONTA@@PAJ@Z:PROC ; C_Font::FontFunction
EXTRN	??0C_Image@@QAE@XZ:PROC				; C_Image::C_Image
EXTRN	?Setup@C_Image@@QAEXXZ:PROC			; C_Image::Setup
EXTRN	?LocalFind@C_Image@@QAEFPAD@Z:PROC		; C_Image::LocalFind
EXTRN	?LocalFunction@C_Image@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Image::LocalFunction
EXTRN	??0C_Sound@@QAE@XZ:PROC				; C_Sound::C_Sound
EXTRN	?Setup@C_Sound@@QAEXXZ:PROC			; C_Sound::Setup
EXTRN	?LocalFind@C_Sound@@QAEFPAD@Z:PROC		; C_Sound::LocalFind
EXTRN	?LocalFunction@C_Sound@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Sound::LocalFunction
EXTRN	??0C_Animation@@QAE@XZ:PROC			; C_Animation::C_Animation
EXTRN	?Setup@C_Animation@@QAEXXZ:PROC			; C_Animation::Setup
EXTRN	?LocalFind@C_Animation@@QAEFPAD@Z:PROC		; C_Animation::LocalFind
EXTRN	?LocalFunction@C_Animation@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Animation::LocalFunction
EXTRN	??0C_String@@QAE@XZ:PROC			; C_String::C_String
EXTRN	?Setup@C_String@@QAEXJ@Z:PROC			; C_String::Setup
EXTRN	?LocalFind@C_String@@QAEFPAD@Z:PROC		; C_String::LocalFind
EXTRN	?LocalFunction@C_String@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_String::LocalFunction
EXTRN	??0C_Movie@@QAE@XZ:PROC				; C_Movie::C_Movie
EXTRN	?Setup@C_Movie@@QAEXXZ:PROC			; C_Movie::Setup
EXTRN	?LocalFind@C_Movie@@QAEFPAD@Z:PROC		; C_Movie::LocalFind
EXTRN	?LocalFunction@C_Movie@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Movie::LocalFunction
EXTRN	??0C_SoundBite@@QAE@XZ:PROC			; C_SoundBite::C_SoundBite
EXTRN	?Setup@C_SoundBite@@QAEXXZ:PROC			; C_SoundBite::Setup
EXTRN	?Add@C_SoundBite@@QAEXJJ@Z:PROC			; C_SoundBite::Add
EXTRN	?BaseFind@C_Base@@QAEFPAD@Z:PROC		; C_Base::BaseFind
EXTRN	?BaseFunction@C_Base@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Base::BaseFunction
EXTRN	??0C_Anim@@QAE@XZ:PROC				; C_Anim::C_Anim
EXTRN	??0C_Bitmap@@QAE@XZ:PROC			; C_Bitmap::C_Bitmap
EXTRN	??0C_Tile@@QAE@XZ:PROC				; C_Tile::C_Tile
EXTRN	??0C_Button@@QAE@XZ:PROC			; C_Button::C_Button
EXTRN	??0C_ListBox@@QAE@XZ:PROC			; C_ListBox::C_ListBox
EXTRN	??0C_TreeList@@QAE@XZ:PROC			; C_TreeList::C_TreeList
EXTRN	??0C_ScrollBar@@QAE@XZ:PROC			; C_ScrollBar::C_ScrollBar
EXTRN	??0C_PopupList@@QAE@XZ:PROC			; C_PopupList::C_PopupList
EXTRN	??0C_EditBox@@QAE@XZ:PROC			; C_EditBox::C_EditBox
EXTRN	??0C_Text@@QAE@XZ:PROC				; C_Text::C_Text
EXTRN	??1C_Text@@UAE@XZ:PROC				; C_Text::~C_Text
EXTRN	?SetFont@C_Text@@UAEXJ@Z:PROC			; C_Text::SetFont
EXTRN	?SetFlags@C_Text@@UAEXJ@Z:PROC			; C_Text::SetFlags
EXTRN	?Cleanup@C_Text@@UAEXXZ:PROC			; C_Text::Cleanup
EXTRN	?TimerUpdate@C_Text@@UAEHXZ:PROC		; C_Text::TimerUpdate
EXTRN	?Refresh@C_Text@@UAEXXZ:PROC			; C_Text::Refresh
EXTRN	?Draw@C_Text@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z:PROC ; C_Text::Draw
EXTRN	?SetSubParents@C_Text@@UAEXPAVC_Window@@@Z:PROC	; C_Text::SetSubParents
EXTRN	?LocalFind@C_Text@@UAEFPAD@Z:PROC		; C_Text::LocalFind
EXTRN	?LocalFunction@C_Text@@UAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Text::LocalFunction
EXTRN	?Setup@C_VersionText@@UAEXJF@Z:PROC		; C_VersionText::Setup
EXTRN	??_EC_VersionText@@UAEPAXI@Z:PROC		; C_VersionText::`vector deleting destructor'
EXTRN	??0C_Line@@QAE@XZ:PROC				; C_Line::C_Line
EXTRN	??0C_Box@@QAE@XZ:PROC				; C_Box::C_Box
EXTRN	??0C_Cursor@@QAE@XZ:PROC			; C_Cursor::C_Cursor
EXTRN	??0C_Marque@@QAE@XZ:PROC			; C_Marque::C_Marque
EXTRN	??0C_Slider@@QAE@XZ:PROC			; C_Slider::C_Slider
EXTRN	??0C_Panner@@QAE@XZ:PROC			; C_Panner::C_Panner
EXTRN	??0C_Fill@@QAE@XZ:PROC				; C_Fill::C_Fill
EXTRN	??0C_PopupMgr@@QAE@XZ:PROC			; C_PopupMgr::C_PopupMgr
EXTRN	?Setup@C_PopupMgr@@QAEXPAVC_Handler@@@Z:PROC	; C_PopupMgr::Setup
EXTRN	?AddMenu@C_PopupMgr@@QAEXPAVC_PopupList@@@Z:PROC ; C_PopupMgr::AddMenu
EXTRN	??0C_Clock@@QAE@XZ:PROC				; C_Clock::C_Clock
EXTRN	??0C_Window@@QAE@XZ:PROC			; C_Window::C_Window
EXTRN	?ScanClientAreas@C_Window@@QAEXXZ:PROC		; C_Window::ScanClientAreas
EXTRN	?AddScrollBar@C_Window@@QAEXPAVC_ScrollBar@@@Z:PROC ; C_Window::AddScrollBar
EXTRN	?AddControl@C_Window@@QAEXPAVC_Base@@@Z:PROC	; C_Window::AddControl
EXTRN	?LocalFind@C_Window@@QAEFPAD@Z:PROC		; C_Window::LocalFind
EXTRN	?LocalFunction@C_Window@@QAEXFQAJPADPAVC_Handler@@@Z:PROC ; C_Window::LocalFunction
EXTRN	?AddWindow@C_Handler@@QAEHPAVC_Window@@J@Z:PROC	; C_Handler::AddWindow
EXTRN	_ResFOpen:PROC
EXTRN	_ResFClose:PROC
EXTRN	_ResFTell:PROC
EXTRN	_ResFRead:PROC
EXTRN	_ResFSeek:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_bLogUiErrors@@3_NA:BYTE			; g_bLogUiErrors
EXTRN	?FalconUIArtDirectory@@3PADA:BYTE		; FalconUIArtDirectory
EXTRN	?FalconUIArtThrDirectory@@3PADA:BYTE		; FalconUIArtThrDirectory
EXTRN	?FalconUISoundDirectory@@3PADA:BYTE		; FalconUISoundDirectory
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_filebuf DB	0104H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R2C_Text@@8
rdata$r	SEGMENT
??_R2C_Text@@8 DD FLAT:??_R1A@?0A@EA@C_Text@@8		; C_Text::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R3C_Text@@8
rdata$r	SEGMENT
??_R3C_Text@@8 DD 00H					; C_Text::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2C_Text@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Text@@@8
_DATA	SEGMENT
??_R0?AVC_Text@@@8 DD FLAT:??_7type_info@@6B@		; C_Text `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Text@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Text@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Text@@8 DD FLAT:??_R0?AVC_Text@@@8	; C_Text::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Text@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@C_VersionText@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_VersionText@@8 DD FLAT:??_R0?AVC_VersionText@@@8 ; C_VersionText::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_VersionText@@8
rdata$r	ENDS
;	COMDAT ??_R2C_VersionText@@8
rdata$r	SEGMENT
??_R2C_VersionText@@8 DD FLAT:??_R1A@?0A@EA@C_VersionText@@8 ; C_VersionText::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@C_Text@@8
	DD	FLAT:??_R1A@?0A@EA@C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R3C_VersionText@@8
rdata$r	SEGMENT
??_R3C_VersionText@@8 DD 00H				; C_VersionText::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2C_VersionText@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_VersionText@@@8
_DATA	SEGMENT
??_R0?AVC_VersionText@@@8 DD FLAT:??_7type_info@@6B@	; C_VersionText `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_VersionText@@', 00H
_DATA	ENDS
;	COMDAT ??_R4C_VersionText@@6B@
rdata$r	SEGMENT
??_R4C_VersionText@@6B@ DD 00H				; C_VersionText::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVC_VersionText@@@8
	DD	FLAT:??_R3C_VersionText@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@C_Base@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@C_Base@@8 DD FLAT:??_R0?AVC_Base@@@8	; C_Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R2C_Base@@8
rdata$r	SEGMENT
??_R2C_Base@@8 DD FLAT:??_R1A@?0A@EA@C_Base@@8		; C_Base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3C_Base@@8
rdata$r	SEGMENT
??_R3C_Base@@8 DD 00H					; C_Base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2C_Base@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVC_Base@@@8
_DATA	SEGMENT
??_R0?AVC_Base@@@8 DD FLAT:??_7type_info@@6B@		; C_Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVC_Base@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOCODDKD@NID?$AA@
CONST	SEGMENT
??_C@_03EOCODDKD@NID?$AA@ DB 'NID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OECDJKFN@ControlParser?3?5Token?5NOT?5FOUND?5?$FL@
CONST	SEGMENT
??_C@_0CF@OECDJKFN@ControlParser?3?5Token?5NOT?5FOUND?5?$FL@ DB 'ControlP'
	DB	'arser: Token NOT FOUND [%s]', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIDHKLLF@?$CF1ld?$AA@
CONST	SEGMENT
??_C@_04DIDHKLLF@?$CF1ld?$AA@ DB '%1ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IDKLOIKC@LoadMovieList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@IDKLOIKC@LoadMovieList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadMovieList read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BIFIBKGC@LoadMovieList?5seek?5start?5failed?5@
CONST	SEGMENT
??_C@_0CG@BIFIBKGC@LoadMovieList?5seek?5start?5failed?5@ DB 'LoadMovieLis'
	DB	't seek start failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OGCDPDB@LoadMovieList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@OGCDPDB@LoadMovieList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadMovieList open failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MJEBAGBO@LoadStringList?5read?5failed?5?$CI?$CFs?$CJ?6@
CONST	SEGMENT
??_C@_0CB@MJEBAGBO@LoadStringList?5read?5failed?5?$CI?$CFs?$CJ?6@ DB 'Loa'
	DB	'dStringList read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CGHLBJJI@LoadStringList?5seek?5start?5failed@
CONST	SEGMENT
??_C@_0CH@CGHLBJJI@LoadStringList?5seek?5start?5failed@ DB 'LoadStringLis'
	DB	't seek start failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EEIINBIN@LoadStringList?5open?5failed?5?$CI?$CFs?$CJ?6@
CONST	SEGMENT
??_C@_0CB@EEIINBIN@LoadStringList?5open?5failed?5?$CI?$CFs?$CJ?6@ DB 'Loa'
	DB	'dStringList open failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CNMFKLKD@LoadSoundList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@CNMFKLKD@LoadSoundList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadSoundList read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MEEIBLAE@LoadSoundList?5seek?5start?5failed?5@
CONST	SEGMENT
??_C@_0CG@MEEIBLAE@LoadSoundList?5seek?5start?5failed?5@ DB 'LoadSoundLis'
	DB	't seek start failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KAAMHMDA@LoadSoundList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@KAAMHMDA@LoadSoundList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadSoundList open failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GNCFPFBL@LoadImageList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@GNCFPFBL@LoadImageList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadImageList read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BDBHDHEO@LoadImageList?5seek?5start?5failed?5@
CONST	SEGMENT
??_C@_0CG@BDBHDHEO@LoadImageList?5seek?5start?5failed?5@ DB 'LoadImageLis'
	DB	't seek start failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OAOMCCII@LoadImageList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@OAOMCCII@LoadImageList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadImageList open failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GFPLFNHN@LoadPopupMenuList?5NO?5Popup?5Menu?5@
CONST	SEGMENT
??_C@_0CP@GFPLFNHN@LoadPopupMenuList?5NO?5Popup?5Menu?5@ DB 'LoadPopupMen'
	DB	'uList NO Popup Menu returned (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FJKHPLBF@LoadPopupMenuList?5Parsing?5PopMen@
CONST	SEGMENT
??_C@_0CI@FJKHPLBF@LoadPopupMenuList?5Parsing?5PopMen@ DB 'LoadPopupMenuL'
	DB	'ist Parsing PopMenu (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CLNDHJPL@LoadPopupMenuList?5read?5failed?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@CLNDHJPL@LoadPopupMenuList?5read?5failed?5?$CI?$CF@ DB 'LoadPop'
	DB	'upMenuList read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KGFPMJFG@LoadPopupMenuList?5seek?5start?5fai@
CONST	SEGMENT
??_C@_0CK@KGFPMJFG@LoadPopupMenuList?5seek?5start?5fai@ DB 'LoadPopupMenu'
	DB	'List seek start failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KGBKKOGI@LoadPopupMenuList?5open?5failed?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@KGBKKOGI@LoadPopupMenuList?5open?5failed?5?$CI?$CF@ DB 'LoadPop'
	DB	'upMenuList open failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PLJJBFFH@LoadPopupMenuList?5processing?5?$CI?$CFs@
CONST	SEGMENT
??_C@_0CD@PLJJBFFH@LoadPopupMenuList?5processing?5?$CI?$CFs@ DB 'LoadPopu'
	DB	'pMenuList processing (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FDODKDM@LoadWindowList?5NO?5Window?5returne@
CONST	SEGMENT
??_C@_0CI@FDODKDM@LoadWindowList?5NO?5Window?5returne@ DB 'LoadWindowList'
	DB	' NO Window returned (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DDNELKMF@LoadWindowList?5Parsing?5Window?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@DDNELKMF@LoadWindowList?5Parsing?5Window?5?$CI?$CF@ DB 'LoadWin'
	DB	'dowList Parsing Window (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DAEKLAMC@LoadWindowList?5read?5failed?5?$CI?$CFs?$CJ?6@
CONST	SEGMENT
??_C@_0CB@DAEKLAMC@LoadWindowList?5read?5failed?5?$CI?$CFs?$CJ?6@ DB 'Loa'
	DB	'dWindowList read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LBBEPHCG@LoadWindowList?5seek?5start?5failed@
CONST	SEGMENT
??_C@_0CH@LBBEPHCG@LoadWindowList?5seek?5start?5failed@ DB 'LoadWindowLis'
	DB	't seek start failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CCCIALCG@Open?5Art?5file?5found?5as?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BL@CCCIALCG@Open?5Art?5file?5found?5as?5?$CFs?6?$AA@ DB 'Open Art '
	DB	'file found as %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LNIDGHFB@LoadWindowList?5open?5failed?5?$CI?$CFs?$CJ?6@
CONST	SEGMENT
??_C@_0CB@LNIDGHFB@LoadWindowList?5open?5failed?5?$CI?$CFs?$CJ?6@ DB 'Loa'
	DB	'dWindowList open failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GDPFFHAC@LoadWindowList?5processing?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0CA@GDPFFHAC@LoadWindowList?5processing?5?$CI?$CFs?$CJ?6?$AA@ DB 'L'
	DB	'oadWindowList processing (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLICLKIC@?2art?$AA@
CONST	SEGMENT
??_C@_04FLICLKIC@?2art?$AA@ DB '\art', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BJNDNEOA@LoadScript?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BN@BJNDNEOA@LoadScript?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'Loa'
	DB	'dScript read failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GABGFBNH@LoadScript?5seek?5start?5failed?5?$CI?$CFs@
CONST	SEGMENT
??_C@_0CD@GABGFBNH@LoadScript?5seek?5start?5failed?5?$CI?$CFs@ DB 'LoadSc'
	DB	'ript seek start failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BMHBEFCI@LoadScript?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BN@BMHBEFCI@LoadScript?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'Loa'
	DB	'dScript load failed (%s)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IIPENBFP@LoadIDTable?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BO@IIPENBFP@LoadIDTable?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'Lo'
	DB	'adIDTable read failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JALCFDH@LoadIDTable?5seek?5end?5failed?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0CC@JALCFDH@LoadIDTable?5seek?5end?5failed?5?$CI?$CFs?$CJ@ DB 'Load'
	DB	'IDTable seek end failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@INFGEAJH@LoadIDTable?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BO@INFGEAJH@LoadIDTable?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@ DB 'Lo'
	DB	'adIDTable load failed (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NDJBGPGB@Cleanup?5Parser?6?$AA@
CONST	SEGMENT
??_C@_0BA@NDJBGPGB@Cleanup?5Parser?6?$AA@ DB 'Cleanup Parser', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JLGOJDPF@Setup?5Parser?6?$AA@
CONST	SEGMENT
??_C@_0O@JLGOJDPF@Setup?5Parser?6?$AA@ DB 'Setup Parser', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CADKCABC@ui95err?4log?$AA@
CONST	SEGMENT
??_C@_0M@CADKCABC@ui95err?4log?$AA@ DB 'ui95err.log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a?$AA@
CONST	SEGMENT
??_C@_01MCMALHOG@a?$AA@ DB 'a', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7C_VersionText@@6B@
CONST	SEGMENT
??_7C_VersionText@@6B@ DD FLAT:??_R4C_VersionText@@6B@	; C_VersionText::`vftable'
	DD	FLAT:??_EC_VersionText@@UAEPAXI@Z
	DD	FLAT:?SetFlags@C_Text@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOn@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFlagBitOff@C_Base@@UAEXJ@Z
	DD	FLAT:?SetX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetW@C_Base@@UAEXJ@Z
	DD	FLAT:?SetH@C_Base@@UAEXJ@Z
	DD	FLAT:?SetXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetWH@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetXYWH@C_Base@@UAEXJJJJ@Z
	DD	FLAT:?SetRelX@C_Base@@UAEXJ@Z
	DD	FLAT:?SetRelY@C_Base@@UAEXJ@Z
	DD	FLAT:?SetRelXY@C_Base@@UAEXJJ@Z
	DD	FLAT:?SetState@C_Base@@UAEXF@Z
	DD	FLAT:?SetHotKey@C_Base@@UAEXF@Z
	DD	FLAT:?SetMenu@C_Base@@UAEXJ@Z
	DD	FLAT:?SetFont@C_Text@@UAEXJ@Z
	DD	FLAT:?SetSound@C_Base@@UAEXJF@Z
	DD	FLAT:?SetCursorID@C_Base@@UAEXJ@Z
	DD	FLAT:?SetDragCursorID@C_Base@@UAEXJ@Z
	DD	FLAT:?SetHelpText@C_Base@@UAEXJ@Z
	DD	FLAT:?SetMouseOver@C_Base@@UAEXF@Z
	DD	FLAT:?SetMouseOverColor@C_Base@@UAEXK@Z
	DD	FLAT:?SetMouseOverPerc@C_Base@@UAEXF@Z
	DD	FLAT:?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z
	DD	FLAT:?GetRelX@C_Base@@UAEJXZ
	DD	FLAT:?GetRelY@C_Base@@UAEJXZ
	DD	FLAT:?GetState@C_Base@@UAEFXZ
	DD	FLAT:?GetHotKey@C_Base@@UAEFXZ
	DD	FLAT:?GetMenu@C_Base@@UAEJXZ
	DD	FLAT:?GetFont@C_Text@@UAEJXZ
	DD	FLAT:?GetHelpText@C_Base@@UAEJXZ
	DD	FLAT:?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z
	DD	FLAT:?GetMouseOver@C_Base@@UAEFXZ
	DD	FLAT:?GetCursorID@C_Base@@UAEJXZ
	DD	FLAT:?GetDragCursorID@C_Base@@UAEJXZ
	DD	FLAT:?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ
	DD	FLAT:?IsBase@C_Base@@UAEHXZ
	DD	FLAT:?IsControl@C_Base@@UAEHXZ
	DD	FLAT:?Refresh@C_Text@@UAEXXZ
	DD	FLAT:?Draw@C_Text@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
	DD	FLAT:?SetSubParents@C_Text@@UAEXPAVC_Window@@@Z
	DD	FLAT:?Cleanup@C_Text@@UAEXXZ
	DD	FLAT:?TimerUpdate@C_Text@@UAEHXZ
	DD	FLAT:?Activate@C_Base@@UAEXXZ
	DD	FLAT:?Deactivate@C_Base@@UAEXXZ
	DD	FLAT:?CheckHotSpots@C_Base@@UAEJJJ@Z
	DD	FLAT:?CheckKeyboard@C_Base@@UAEHEEEJ@Z
	DD	FLAT:?Process@C_Base@@UAEHJF@Z
	DD	FLAT:?CloseWindow@C_Base@@UAEHXZ
	DD	FLAT:?MouseOver@C_Base@@UAEHJJPAV1@@Z
	DD	FLAT:?GetMe@C_Base@@UAEPAV1@XZ
	DD	FLAT:?Dragable@C_Base@@UAEHJ@Z
	DD	FLAT:?GetItemXY@C_Base@@UAEXJPAJ0@Z
	DD	FLAT:?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
	DD	FLAT:?Wheel@C_Base@@UAEHHGG@Z
	DD	FLAT:?LocalFind@C_Text@@UAEFPAD@Z
	DD	FLAT:?LocalFunction@C_Text@@UAEXFQAJPADPAVC_Handler@@@Z
	DD	FLAT:?SaveText@C_Text@@UAEXPAXPAVC_Parser@@@Z
	DD	FLAT:?Setup@C_VersionText@@UAEXJF@Z
	DD	FLAT:?SetText@C_VersionText@@UAEXJ@Z
	DD	FLAT:?SetText@C_VersionText@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z$0
__unwindtable$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z$0
__unwindtable$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z$0
__unwindtable$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z$0
__unwindtable$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z$0
__unwindtable$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z$0
__unwindtable$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ$0
__unwindtable$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ$0
__unwindtable$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z$1
__unwindtable$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z$1
__ehfuncinfo$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$17
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$18
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_size$ = -4						; size = 4
_fp$ = 8						; size = 4
?UI_FILESIZE@@YAJPAU_iobuf@@@Z PROC			; UI_FILESIZE

; 39   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 40   : 	long size=0;

	mov	DWORD PTR _size$[ebp], 0

; 41   : 
; 42   : 	if(UI_SEEK(fp,0l,SEEK_END))

	push	2
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_ResFSeek
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@UI_FILESIZ

; 43   : 		return(0);

	xor	eax, eax
	jmp	SHORT $LN3@UI_FILESIZ
$LN2@UI_FILESIZ:

; 44   : 
; 45   : 	size=UI_TELL(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_ResFTell
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 46   : 
; 47   : 	if(UI_SEEK(fp,0l,SEEK_SET))

	push	0
	push	0
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_ResFSeek
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@UI_FILESIZ

; 48   : 		return(0);

	xor	eax, eax
	jmp	SHORT $LN3@UI_FILESIZ
$LN1@UI_FILESIZ:

; 49   : 
; 50   : 	return(size);

	mov	eax, DWORD PTR _size$[ebp]
$LN3@UI_FILESIZ:

; 51   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UI_FILESIZE@@YAJPAU_iobuf@@@Z ENDP			; UI_FILESIZE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetID@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@C_Window@@QAEJXZ PROC				; C_Window::GetID, COMDAT
; _this$ = ecx

; 302  : 		long GetID() { return(ID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@C_Window@@QAEJXZ ENDP				; C_Window::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetFlags@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlags@C_Window@@QAEJXZ PROC				; C_Window::GetFlags, COMDAT
; _this$ = ecx

; 264  : 		long GetFlags() { return(Flags_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlags@C_Window@@QAEJXZ ENDP				; C_Window::GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?LogError@C_Parser@@QAEXPAD@Z PROC			; C_Parser::LogError
; _this$ = ecx

; 4272 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4273 :     if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN3@LogError

; 4274 : 	if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN3@LogError

; 4275 : 	    fprintf(Perror_,"%s\n",str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN3@LogError:

; 4276 :     }
; 4277 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LogError@C_Parser@@QAEXPAD@Z ENDP			; C_Parser::LogError
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_label$ = 8						; size = 4
___formal$ = 12						; size = 4
?AddNewID@C_Parser@@QAEJPADJ@Z PROC			; C_Parser::AddNewID
; _this$ = ecx

; 1472 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1473 : 	return(TokenOrder_->AddText(label));

	mov	eax, DWORD PTR _label$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+908]
	call	?AddText@C_Hash@@QAEJPBD@Z		; C_Hash::AddText

; 1474 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddNewID@C_Parser@@QAEJPADJ@Z ENDP			; C_Parser::AddNewID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
tv204 = -68						; size = 4
$T2 = -64						; size = 4
tv88 = -60						; size = 4
tv74 = -56						; size = 4
$T3 = -52						; size = 4
_TokenID$ = -48						; size = 4
_InString$ = -44					; size = 4
tv131 = -40						; size = 4
_this$ = -36						; size = 4
_TokenType$ = -32					; size = 2
_Found$ = -28						; size = 2
_Comment$ = -24						; size = 2
_Section$ = -20						; size = 2
_Done$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z PROC	; C_Parser::ParsePopupMenu
; _this$ = ecx

; 3992 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3993 : 	//short Finished=0;
; 3994 : 	short Done=0,Comment=0,Found=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx

; 3995 : 	short Section=0,TokenType=0;

	xor	eax, eax
	mov	WORD PTR _Section$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _TokenType$[ebp], cx

; 3996 : 	int InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3997 : 	long TokenID=0;

	mov	DWORD PTR _TokenID$[ebp], 0

; 3998 : 
; 3999 : 
; 4000 : 	if(Popup_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jne	SHORT $LN28@ParsePopup

; 4001 : 	{
; 4002 : 		Popup_=new C_PopupMgr;

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN31@ParsePopup
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_PopupMgr@@QAE@XZ			; C_PopupMgr::C_PopupMgr
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN32@ParsePopup
$LN31@ParsePopup:
	mov	DWORD PTR tv74[ebp], 0
$LN32@ParsePopup:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+92], edx

; 4003 : 		Popup_->Setup(Handler_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?Setup@C_PopupMgr@@QAEXPAVC_Handler@@@Z	; C_PopupMgr::Setup
$LN28@ParsePopup:

; 4004 : 	}
; 4005 : 
; 4006 : 	if(LoadScript(filename) == FALSE)

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN27@ParsePopup

; 4007 : 		return(FALSE);

	xor	eax, eax
	jmp	$LN29@ParsePopup
$LN27@ParsePopup:

; 4008 : 
; 4009 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 4010 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 4011 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 4012 : 
; 4013 : 	Done=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax

; 4014 : 	Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 4015 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 4016 : 	Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 4017 : 	TokenType=TOKEN_NOTHING;

	xor	eax, eax
	mov	WORD PTR _TokenType$[ebp], ax
$LN26@ParsePopup:

; 4018 : 
; 4019 : 	while(!Done)

	movsx	ecx, WORD PTR _Done$[ebp]
	test	ecx, ecx
	jne	$LN25@ParsePopup

; 4020 : 	{
; 4021 : 		switch(Section)

	movsx	edx, WORD PTR _Section$[ebp]
	mov	DWORD PTR tv88[ebp], edx
	cmp	DWORD PTR tv88[ebp], 0
	je	SHORT $LN22@ParsePopup
	cmp	DWORD PTR tv88[ebp], 1
	je	$LN6@ParsePopup
	jmp	$LN23@ParsePopup
$LN22@ParsePopup:

; 4022 : 		{
; 4023 : 			case SECTION_FINDTOKEN:
; 4024 : 			// Look for token starting with '['
; 4025 : 				Found=0;

	xor	eax, eax
	mov	WORD PTR _Found$[ebp], ax
$LN21@ParsePopup:

; 4026 : 				while(!Found && !Done)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	jne	$LN20@ParsePopup
	movsx	edx, WORD PTR _Done$[ebp]
	test	edx, edx
	jne	$LN20@ParsePopup

; 4027 : 				{
; 4028 : 					switch(script_[Idx_])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv131[ebp], ecx
	mov	edx, DWORD PTR tv131[ebp]
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR tv131[ebp], edx
	cmp	DWORD PTR tv131[ebp], 81		; 00000051H
	ja	$LN12@ParsePopup
	mov	eax, DWORD PTR tv131[ebp]
	movzx	ecx, BYTE PTR $LN34@ParsePopup[eax]
	jmp	DWORD PTR $LN36@ParsePopup[ecx*4]
$LN17@ParsePopup:

; 4029 : 					{
; 4030 : 						case '[':
; 4031 : 							if(!Comment && !InString)

	movsx	edx, WORD PTR _Comment$[ebp]
	test	edx, edx
	jne	SHORT $LN16@ParsePopup
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN16@ParsePopup

; 4032 : 							{
; 4033 : 								Found=1;

	mov	eax, 1
	mov	WORD PTR _Found$[ebp], ax

; 4034 : 								break;

	jmp	SHORT $LN18@ParsePopup
$LN16@ParsePopup:

; 4035 : 							}
; 4036 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 4037 : 							break;

	jmp	SHORT $LN18@ParsePopup
$LN15@ParsePopup:

; 4038 : 						case '"':
; 4039 : 							InString=1-InString;

	mov	ecx, 1
	sub	ecx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], ecx

; 4040 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 4041 : 							break;

	jmp	SHORT $LN18@ParsePopup
$LN14@ParsePopup:

; 4042 : 						case '#':
; 4043 : 							Comment=1;

	mov	edx, 1
	mov	WORD PTR _Comment$[ebp], dx

; 4044 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 4045 : 							break;

	jmp	SHORT $LN18@ParsePopup
$LN13@ParsePopup:

; 4046 : 						case 0x0a: case 0x0d:
; 4047 : 							Comment=0;

	xor	eax, eax
	mov	WORD PTR _Comment$[ebp], ax

; 4048 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 4049 : 							break;

	jmp	SHORT $LN18@ParsePopup
$LN12@ParsePopup:

; 4050 : 						default:
; 4051 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN18@ParsePopup:

; 4052 : 					}
; 4053 : 					if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN11@ParsePopup

; 4054 : 						Done=1;

	mov	ecx, 1
	mov	WORD PTR _Done$[ebp], cx
$LN11@ParsePopup:

; 4055 : 				}

	jmp	$LN21@ParsePopup
$LN20@ParsePopup:

; 4056 : 							
; 4057 : 				tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN10@ParsePopup:

; 4058 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN9@ParsePopup
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN9@ParsePopup

; 4059 : 					tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
	jmp	SHORT $LN10@ParsePopup
$LN9@ParsePopup:

; 4060 : 				tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 4061 : 
; 4062 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN8@ParsePopup

; 4063 : 				{
; 4064 : 					Done=1;

	mov	ecx, 1
	mov	WORD PTR _Done$[ebp], cx

; 4065 : 					break;

	jmp	$LN23@ParsePopup
$LN8@ParsePopup:

; 4066 : 				}
; 4067 : 
; 4068 : 				if(Found == 1)

	movsx	edx, WORD PTR _Found$[ebp]
	cmp	edx, 1
	jne	SHORT $LN7@ParsePopup

; 4069 : 					Section=SECTION_PROCESSTOKEN;

	mov	eax, 1
	mov	WORD PTR _Section$[ebp], ax
$LN7@ParsePopup:

; 4070 : 				break;

	jmp	$LN23@ParsePopup
$LN6@ParsePopup:

; 4071 : 			case SECTION_PROCESSTOKEN:
; 4072 : 				TokenID=FindToken(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 4073 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN5@ParsePopup

; 4074 : 				{
; 4075 : 					switch(TokenID)

	mov	ecx, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv204[ebp], ecx
	cmp	DWORD PTR tv204[ebp], 18		; 00000012H
	je	SHORT $LN2@ParsePopup
	jmp	SHORT $LN3@ParsePopup
$LN2@ParsePopup:

; 4076 : 					{
; 4077 : 						case CPARSE_POPUP:
; 4078 : 							return(PopupParser());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PopupParser@C_Parser@@AAEPAVC_Base@@XZ	; C_Parser::PopupParser
	jmp	SHORT $LN29@ParsePopup
$LN3@ParsePopup:

; 4079 : 							break;
; 4080 : 					}
; 4081 : 					Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 4082 : 					tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 4083 : 					Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 4084 : 				}
; 4085 : 				else

	jmp	SHORT $LN23@ParsePopup
$LN5@ParsePopup:

; 4086 : 				{
; 4087 : 					Section=SECTION_FINDTOKEN;

	xor	eax, eax
	mov	WORD PTR _Section$[ebp], ax

; 4088 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 4089 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN23@ParsePopup:

; 4090 : 				}
; 4091 : 				break;
; 4092 : 		}
; 4093 : 	}

	jmp	$LN26@ParsePopup
$LN25@ParsePopup:

; 4094 : 	return(NULL);

	xor	eax, eax
$LN29@ParsePopup:

; 4095 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN36@ParsePopup:
	DD	$LN13@ParsePopup
	DD	$LN15@ParsePopup
	DD	$LN14@ParsePopup
	DD	$LN17@ParsePopup
	DD	$LN12@ParsePopup
$LN34@ParsePopup:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z ENDP	; C_Parser::ParsePopupMenu
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -152						; size = 4
_NewID$ = -148						; size = 4
_TokenType$ = -144					; size = 4
tv92 = -140						; size = 4
tv80 = -136						; size = 4
$T3 = -132						; size = 4
_TokenID$ = -128					; size = 4
_InString$ = -124					; size = 4
_Comment$ = -120					; size = 4
tv133 = -116						; size = 4
tv380 = -112						; size = 4
tv326 = -108						; size = 4
tv229 = -104						; size = 4
_FontID$ = -100						; size = 4
_Done$ = -96						; size = 4
_Finished$ = -92					; size = 4
_Section$ = -88						; size = 4
_Found$ = -84						; size = 4
_this$ = -80						; size = 4
_logfont$ = -76						; size = 60
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z PROC		; C_Parser::ParseFont
; _this$ = ecx

; 2731 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2732 : 	long Done=0,Comment=0,Found=0,InString=0,Finished=0;;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0
	mov	DWORD PTR _Finished$[ebp], 0

; 2733 : 	long TokenID=0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 2734 : 	long FontID=0,NewID=0;

	mov	DWORD PTR _FontID$[ebp], 0
	mov	DWORD PTR _NewID$[ebp], 0

; 2735 : 	LOGFONT logfont= {0};

	mov	DWORD PTR _logfont$[ebp], 0
	push	56					; 00000038H
	push	0
	lea	eax, DWORD PTR _logfont$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2736 : 
; 2737 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 2738 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 2739 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2740 : 
; 2741 : 	if(Font_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN68@ParseFont

; 2742 : 	{
; 2743 : 		Font_=new C_Font;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN71@ParseFont
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_Font@@QAE@XZ			; C_Font::C_Font
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN72@ParseFont
$LN71@ParseFont:
	mov	DWORD PTR tv80[ebp], 0
$LN72@ParseFont:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+76], eax

; 2744 : 		Font_->Setup(Handler_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?Setup@C_Font@@QAEXPAVC_Handler@@@Z	; C_Font::Setup
$LN68@ParseFont:

; 2745 : 	}
; 2746 : 
; 2747 : 	if(LoadScript(filename) == FALSE)

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN67@ParseFont

; 2748 : 		return(NULL);

	xor	eax, eax
	jmp	$LN69@ParseFont
$LN67@ParseFont:

; 2749 : 
; 2750 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 2751 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2752 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 2753 : 	Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2754 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0

; 2755 : 
; 2756 : 	memset(&logfont,0,sizeof(LOGFONT));

	push	60					; 0000003cH
	push	0
	lea	edx, DWORD PTR _logfont$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN66@ParseFont:

; 2757 : 	
; 2758 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN65@ParseFont

; 2759 : 	{
; 2760 : 		switch(Section)

	mov	eax, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	cmp	DWORD PTR tv92[ebp], 5
	ja	$LN63@ParseFont
	mov	ecx, DWORD PTR tv92[ebp]
	jmp	DWORD PTR $LN79@ParseFont[ecx*4]
$LN62@ParseFont:

; 2761 : 		{
; 2762 : 			case SECTION_FINDTOKEN:
; 2763 : 			// Look for token starting with '['
; 2764 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN61@ParseFont:

; 2765 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN60@ParseFont
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN60@ParseFont

; 2766 : 				{
; 2767 : 					switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR tv133[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv133[ebp], ecx
	cmp	DWORD PTR tv133[ebp], 81		; 00000051H
	ja	SHORT $LN52@ParseFont
	mov	edx, DWORD PTR tv133[ebp]
	movzx	eax, BYTE PTR $LN74@ParseFont[edx]
	jmp	DWORD PTR $LN80@ParseFont[eax*4]
$LN57@ParseFont:

; 2768 : 					{
; 2769 : 						case '[':
; 2770 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN56@ParseFont
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN56@ParseFont

; 2771 : 							{
; 2772 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2773 : 								break;

	jmp	SHORT $LN58@ParseFont
$LN56@ParseFont:

; 2774 : 							}
; 2775 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2776 : 							break;

	jmp	SHORT $LN58@ParseFont
$LN55@ParseFont:

; 2777 : 						case '"':
; 2778 : 							InString=1-InString;

	mov	ecx, 1
	sub	ecx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], ecx

; 2779 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2780 : 							break;

	jmp	SHORT $LN58@ParseFont
$LN54@ParseFont:

; 2781 : 						case '#':
; 2782 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 2783 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2784 : 							break;

	jmp	SHORT $LN58@ParseFont
$LN53@ParseFont:

; 2785 : 						case 0x0a: case 0x0d:
; 2786 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2787 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2788 : 							break;

	jmp	SHORT $LN58@ParseFont
$LN52@ParseFont:

; 2789 : 						default:
; 2790 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN58@ParseFont:

; 2791 : 					}
; 2792 : 					if((Idx_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN51@ParseFont

; 2793 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN51@ParseFont:

; 2794 : 				}

	jmp	$LN61@ParseFont
$LN60@ParseFont:

; 2795 : 							
; 2796 : 				tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN50@ParseFont:

; 2797 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN49@ParseFont
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN49@ParseFont

; 2798 : 					tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
	jmp	SHORT $LN50@ParseFont
$LN49@ParseFont:

; 2799 : 				tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2800 : 
; 2801 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN48@ParseFont

; 2802 : 				{
; 2803 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 2804 : 					break;

	jmp	$LN63@ParseFont
$LN48@ParseFont:

; 2805 : 				}
; 2806 : 
; 2807 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN47@ParseFont

; 2808 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN47@ParseFont:

; 2809 : 				break;

	jmp	$LN63@ParseFont
$LN46@ParseFont:

; 2810 : 			case SECTION_PROCESSTOKEN:
; 2811 : 				TokenID=Font_->FontFind(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	?FontFind@C_Font@@QAEFPAD@Z		; C_Font::FontFind
	movsx	edx, ax
	mov	DWORD PTR _TokenID$[ebp], edx

; 2812 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN45@ParseFont

; 2813 : 				{
; 2814 : 					Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 2815 : 					Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 2816 : 					tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2817 : 				}
; 2818 : 				else

	jmp	SHORT $LN44@ParseFont
$LN45@ParseFont:

; 2819 : 				{
; 2820 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2821 : 					Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 2822 : 					tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN44@ParseFont:

; 2823 : 				}
; 2824 : 				break;

	jmp	$LN63@ParseFont
$LN43@ParseFont:

; 2825 : 			case SECTION_FINDPARAMS:
; 2826 : 				P_Idx_=0; // start with 0 parameters

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 2827 : 
; 2828 : 				// Repeat until token char '[' found (or EOF)
; 2829 : 				Finished=0;

	mov	DWORD PTR _Finished$[ebp], 0
$LN42@ParseFont:

; 2830 : 				while(!Finished)

	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN41@ParseFont

; 2831 : 				{
; 2832 : 					// Find NON white space
; 2833 : 					Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN40@ParseFont:

; 2834 : 					while(!Found && !Done && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN39@ParseFont
	cmp	DWORD PTR _Done$[ebp], 0
	jne	SHORT $LN39@ParseFont
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN39@ParseFont

; 2835 : 					{
; 2836 : 						switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv229[ebp], eax
	mov	ecx, DWORD PTR tv229[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv229[ebp], ecx
	cmp	DWORD PTR tv229[ebp], 82		; 00000052H
	ja	SHORT $LN34@ParseFont
	mov	edx, DWORD PTR tv229[ebp]
	movzx	eax, BYTE PTR $LN75@ParseFont[edx]
	jmp	DWORD PTR $LN81@ParseFont[eax*4]
$LN36@ParseFont:

; 2837 : 						{
; 2838 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2839 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2840 : 								break;

	jmp	SHORT $LN37@ParseFont
$LN35@ParseFont:

; 2841 : 							case '[':
; 2842 : 								Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2843 : 								Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 2844 : 								break;

	jmp	SHORT $LN37@ParseFont
$LN34@ParseFont:

; 2845 : 							default:
; 2846 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1
$LN37@ParseFont:

; 2847 : 								break;
; 2848 : 						}
; 2849 : 						if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN33@ParseFont

; 2850 : 						{
; 2851 : 							Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2852 : 							Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN33@ParseFont:

; 2853 : 						}
; 2854 : 					}

	jmp	$LN40@ParseFont
$LN39@ParseFont:

; 2855 : 
; 2856 : 					if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN32@ParseFont

; 2857 : 					{
; 2858 : 						Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2859 : 						if(script_[Idx_] == '"') // string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 34					; 00000022H
	jne	$LN31@ParseFont

; 2860 : 						{
; 2861 : 							tokenlen_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2862 : 							str_=&script_[Idx_+tokenlen_];

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx
$LN30@ParseFont:

; 2863 : 							// Find closing (")
; 2864 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	SHORT $LN29@ParseFont
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN29@ParseFont

; 2865 : 							{
; 2866 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN28@ParseFont

; 2867 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2868 : 								else

	jmp	SHORT $LN27@ParseFont
$LN28@ParseFont:

; 2869 : 								{
; 2870 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN26@ParseFont

; 2871 : 									{
; 2872 : 										Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2873 : 										Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 2874 : 									}
; 2875 : 									else

	jmp	SHORT $LN27@ParseFont
$LN26@ParseFont:

; 2876 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN27@ParseFont:

; 2877 : 								}
; 2878 : 							}

	jmp	SHORT $LN30@ParseFont
$LN29@ParseFont:

; 2879 : 							if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN24@ParseFont

; 2880 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+eax], 0
$LN24@ParseFont:

; 2881 : 							Idx_+=tokenlen_+1;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2882 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	$LN32@ParseFont
$LN31@ParseFont:

; 2883 : 						}
; 2884 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN21@ParseFont
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 45					; 0000002dH
	jne	$LN22@ParseFont
$LN21@ParseFont:

; 2885 : 						{
; 2886 : 							// find white space
; 2887 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2888 : 							tokenlen_=1;

	mov	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN20@ParseFont:

; 2889 : 							while(!Found)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN19@ParseFont

; 2890 : 							{
; 2891 : 								switch(script_[Idx_ + tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv326[ebp], ecx
	mov	edx, DWORD PTR tv326[ebp]
	sub	edx, 9
	mov	DWORD PTR tv326[ebp], edx
	cmp	DWORD PTR tv326[ebp], 35		; 00000023H
	ja	SHORT $LN15@ParseFont
	mov	eax, DWORD PTR tv326[ebp]
	movzx	ecx, BYTE PTR $LN76@ParseFont[eax]
	jmp	DWORD PTR $LN82@ParseFont[ecx*4]
$LN16@ParseFont:

; 2892 : 								{
; 2893 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2894 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2895 : 										break;

	jmp	SHORT $LN17@ParseFont
$LN15@ParseFont:

; 2896 : 									default:
; 2897 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN17@ParseFont:

; 2898 : 										break;
; 2899 : 								}
; 2900 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN14@ParseFont

; 2901 : 								{
; 2902 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2903 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2904 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN14@ParseFont:

; 2905 : 								}
; 2906 : 							}

	jmp	$LN20@ParseFont
$LN19@ParseFont:

; 2907 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN13@ParseFont
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	cmp	ecx, 12					; 0000000cH
	jge	SHORT $LN13@ParseFont

; 2908 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	_atol
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [edx+958]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+958]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx
$LN13@ParseFont:

; 2909 : 
; 2910 : 							Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 2911 : 							tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2912 : 						}
; 2913 : 						else

	jmp	$LN32@ParseFont
$LN22@ParseFont:

; 2914 : 						{
; 2915 : 							// Look for ID in tables
; 2916 : 							// Look for white space
; 2917 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2918 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN11@ParseFont:

; 2919 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN10@ParseFont
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN10@ParseFont

; 2920 : 							{
; 2921 : 								switch(script_[Idx_+tokenlen_])

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv380[ebp], edx
	mov	eax, DWORD PTR tv380[ebp]
	sub	eax, 9
	mov	DWORD PTR tv380[ebp], eax
	cmp	DWORD PTR tv380[ebp], 35		; 00000023H
	ja	SHORT $LN6@ParseFont
	mov	ecx, DWORD PTR tv380[ebp]
	movzx	edx, BYTE PTR $LN77@ParseFont[ecx]
	jmp	DWORD PTR $LN83@ParseFont[edx*4]
$LN7@ParseFont:

; 2922 : 								{
; 2923 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2924 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2925 : 										break;

	jmp	SHORT $LN8@ParseFont
$LN6@ParseFont:

; 2926 : 									default:
; 2927 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN8@ParseFont:

; 2928 : 										break;
; 2929 : 								}
; 2930 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN5@ParseFont

; 2931 : 								{
; 2932 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2933 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2934 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN5@ParseFont:

; 2935 : 								}
; 2936 : 							}

	jmp	$LN11@ParseFont
$LN10@ParseFont:

; 2937 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN4@ParseFont
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	cmp	edx, 12					; 0000000cH
	jge	$LN4@ParseFont

; 2938 : 							{
; 2939 : 								script_[Idx_+tokenlen_]=0;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0

; 2940 : 								FontID=FindID(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	DWORD PTR _FontID$[ebp], eax

; 2941 : 								if(FontID == -1)

	cmp	DWORD PTR _FontID$[ebp], -1
	jne	SHORT $LN3@ParseFont

; 2942 : 								{
; 2943 : 									if(FontID == -1)

	cmp	DWORD PTR _FontID$[ebp], -1
	jne	SHORT $LN3@ParseFont

; 2944 : 										FontID=AddNewID(&script_[Idx_],1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddNewID@C_Parser@@QAEJPADJ@Z		; C_Parser::AddNewID
	mov	DWORD PTR _FontID$[ebp], eax
$LN3@ParseFont:

; 2945 : 								}
; 2946 : 								P_[P_Idx_++]=FontID;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _FontID$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+958]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx
$LN4@ParseFont:

; 2947 : 							}
; 2948 : 							Idx_+=tokenlen_+1;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2949 : 							tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN32@ParseFont:

; 2950 : 						}
; 2951 : 					}
; 2952 : 				}

	jmp	$LN42@ParseFont
$LN41@ParseFont:

; 2953 : 				break;

	jmp	$LN63@ParseFont
$LN1@ParseFont:

; 2954 : 			case SECTION_PROCESSPARAMS:
; 2955 : 				Font_->FontFunction(static_cast<short>(TokenID),P_,str_,&logfont,&NewID);

	lea	eax, DWORD PTR _NewID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _logfont$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	movzx	edx, WORD PTR _TokenID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?FontFunction@C_Font@@QAEXFQAJPADPAUtagLOGFONTA@@PAJ@Z ; C_Font::FontFunction

; 2956 : 				P_Idx_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 2957 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0

; 2958 : 				str_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 2959 : 				Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0
$LN63@ParseFont:

; 2960 : 				break;
; 2961 : 		}
; 2962 : 	}

	jmp	$LN66@ParseFont
$LN65@ParseFont:

; 2963 : 	return(Font_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
$LN69@ParseFont:

; 2964 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN79@ParseFont:
	DD	$LN62@ParseFont
	DD	$LN46@ParseFont
	DD	$LN63@ParseFont
	DD	$LN63@ParseFont
	DD	$LN43@ParseFont
	DD	$LN1@ParseFont
$LN80@ParseFont:
	DD	$LN53@ParseFont
	DD	$LN55@ParseFont
	DD	$LN54@ParseFont
	DD	$LN57@ParseFont
	DD	$LN52@ParseFont
$LN74@ParseFont:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN81@ParseFont:
	DD	$LN36@ParseFont
	DD	$LN35@ParseFont
	DD	$LN34@ParseFont
$LN75@ParseFont:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN82@ParseFont:
	DD	$LN16@ParseFont
	DD	$LN15@ParseFont
$LN76@ParseFont:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN83@ParseFont:
	DD	$LN7@ParseFont
	DD	$LN6@ParseFont
$LN77@ParseFont:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseFont@C_Parser@@QAEPAVC_Font@@PAD@Z ENDP		; C_Parser::ParseFont
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 4
tv86 = -80						; size = 4
tv77 = -76						; size = 4
$T3 = -72						; size = 4
_MovieID$ = -68						; size = 4
tv390 = -64						; size = 4
tv333 = -60						; size = 4
tv231 = -56						; size = 4
_InString$ = -52					; size = 4
tv129 = -48						; size = 4
_this$ = -44						; size = 4
_TokenType$ = -40					; size = 2
_TokenID$ = -36						; size = 2
_Comment$ = -32						; size = 2
_Done$ = -28						; size = 2
_Finished$ = -24					; size = 2
_Section$ = -20						; size = 2
_Found$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z PROC		; C_Parser::ParseMovie
; _this$ = ecx

; 3439 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3440 : 	int InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3441 : 	short Done=0,Comment=0,Found=0,Finished=0;;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _Finished$[ebp], ax

; 3442 : 	short TokenID=0,Section=0,TokenType=0;

	xor	ecx, ecx
	mov	WORD PTR _TokenID$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _TokenType$[ebp], ax

; 3443 : 	long MovieID=0;

	mov	DWORD PTR _MovieID$[ebp], 0

; 3444 : 
; 3445 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 3446 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 3447 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 3448 : 
; 3449 : 	if(Movie_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN67@ParseMovie

; 3450 : 	{
; 3451 : 		Movie_=new C_Movie;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN70@ParseMovie
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_Movie@@QAE@XZ			; C_Movie::C_Movie
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN71@ParseMovie
$LN70@ParseMovie:
	mov	DWORD PTR tv77[ebp], 0
$LN71@ParseMovie:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+100], eax

; 3452 : 		Movie_->Setup();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?Setup@C_Movie@@QAEXXZ			; C_Movie::Setup
$LN67@ParseMovie:

; 3453 : 	}
; 3454 : 
; 3455 : 	if(LoadScript(filename) == FALSE)

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN66@ParseMovie

; 3456 : 		return(NULL);

	xor	eax, eax
	jmp	$LN68@ParseMovie
$LN66@ParseMovie:

; 3457 : 
; 3458 : 	Done=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax

; 3459 : 	Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3460 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3461 : 	Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 3462 : 	TokenType=TOKEN_NOTHING;

	xor	eax, eax
	mov	WORD PTR _TokenType$[ebp], ax
$LN65@ParseMovie:

; 3463 : 	
; 3464 : 	while(!Done)

	movsx	ecx, WORD PTR _Done$[ebp]
	test	ecx, ecx
	jne	$LN64@ParseMovie

; 3465 : 	{
; 3466 : 		switch(Section)

	movsx	edx, WORD PTR _Section$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	cmp	DWORD PTR tv86[ebp], 5
	ja	$LN62@ParseMovie
	mov	eax, DWORD PTR tv86[ebp]
	jmp	DWORD PTR $LN78@ParseMovie[eax*4]
$LN61@ParseMovie:

; 3467 : 		{
; 3468 : 			case SECTION_FINDTOKEN:
; 3469 : 			// Look for token starting with '['
; 3470 : 				Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN60@ParseMovie:

; 3471 : 				while(!Found && !Done)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN59@ParseMovie
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN59@ParseMovie

; 3472 : 				{
; 3473 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR tv129[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv129[ebp], eax
	cmp	DWORD PTR tv129[ebp], 81		; 00000051H
	ja	$LN51@ParseMovie
	mov	ecx, DWORD PTR tv129[ebp]
	movzx	edx, BYTE PTR $LN73@ParseMovie[ecx]
	jmp	DWORD PTR $LN79@ParseMovie[edx*4]
$LN56@ParseMovie:

; 3474 : 					{
; 3475 : 						case '[':
; 3476 : 							if(!Comment && !InString)

	movsx	eax, WORD PTR _Comment$[ebp]
	test	eax, eax
	jne	SHORT $LN55@ParseMovie
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN55@ParseMovie

; 3477 : 							{
; 3478 : 								Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3479 : 								break;

	jmp	SHORT $LN57@ParseMovie
$LN55@ParseMovie:

; 3480 : 							}
; 3481 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3482 : 							break;

	jmp	SHORT $LN57@ParseMovie
$LN54@ParseMovie:

; 3483 : 						case '"':
; 3484 : 							InString=1-InString;

	mov	edx, 1
	sub	edx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], edx

; 3485 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3486 : 							break;

	jmp	SHORT $LN57@ParseMovie
$LN53@ParseMovie:

; 3487 : 						case '#':
; 3488 : 							Comment=1;

	mov	eax, 1
	mov	WORD PTR _Comment$[ebp], ax

; 3489 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3490 : 							break;

	jmp	SHORT $LN57@ParseMovie
$LN52@ParseMovie:

; 3491 : 						case 0x0a: case 0x0d:
; 3492 : 							Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3493 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3494 : 							break;

	jmp	SHORT $LN57@ParseMovie
$LN51@ParseMovie:

; 3495 : 						default:
; 3496 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN57@ParseMovie:

; 3497 : 					}
; 3498 : 					if((Idx_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN50@ParseMovie

; 3499 : 						Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx
$LN50@ParseMovie:

; 3500 : 				}

	jmp	$LN60@ParseMovie
$LN59@ParseMovie:

; 3501 : 							
; 3502 : 				tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN49@ParseMovie:

; 3503 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN48@ParseMovie
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN48@ParseMovie

; 3504 : 					tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	SHORT $LN49@ParseMovie
$LN48@ParseMovie:

; 3505 : 				tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 3506 : 
; 3507 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN47@ParseMovie

; 3508 : 				{
; 3509 : 					Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx

; 3510 : 					break;

	jmp	$LN62@ParseMovie
$LN47@ParseMovie:

; 3511 : 				}
; 3512 : 
; 3513 : 				if(Found == 1)

	movsx	eax, WORD PTR _Found$[ebp]
	cmp	eax, 1
	jne	SHORT $LN46@ParseMovie

; 3514 : 					Section=SECTION_PROCESSTOKEN;

	mov	ecx, 1
	mov	WORD PTR _Section$[ebp], cx
$LN46@ParseMovie:

; 3515 : 				break;

	jmp	$LN62@ParseMovie
$LN45@ParseMovie:

; 3516 : 			case SECTION_PROCESSTOKEN:
; 3517 : 				TokenID=Movie_->LocalFind(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?LocalFind@C_Movie@@QAEFPAD@Z		; C_Movie::LocalFind
	mov	WORD PTR _TokenID$[ebp], ax

; 3518 : 				if(TokenID)

	movsx	eax, WORD PTR _TokenID$[ebp]
	test	eax, eax
	je	SHORT $LN44@ParseMovie

; 3519 : 				{
; 3520 : 					Section=SECTION_FINDPARAMS;

	mov	ecx, 4
	mov	WORD PTR _Section$[ebp], cx

; 3521 : 					Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3522 : 					tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3523 : 				}
; 3524 : 				else

	jmp	SHORT $LN43@ParseMovie
$LN44@ParseMovie:

; 3525 : 				{
; 3526 : 					Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 3527 : 					Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 3528 : 					tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN43@ParseMovie:

; 3529 : 				}
; 3530 : 				break;

	jmp	$LN62@ParseMovie
$LN42@ParseMovie:

; 3531 : 			case SECTION_FINDPARAMS:
; 3532 : 				P_Idx_=0; // start with 0 parameters

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 3533 : 
; 3534 : 				// Repeat until token char '[' found (or EOF)
; 3535 : 				Finished=0;

	xor	edx, edx
	mov	WORD PTR _Finished$[ebp], dx
$LN41@ParseMovie:

; 3536 : 				while(!Finished)

	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN40@ParseMovie

; 3537 : 				{
; 3538 : 					// Find NON white space
; 3539 : 					Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN39@ParseMovie:

; 3540 : 					while(!Found && !Done && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN38@ParseMovie
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN38@ParseMovie
	movsx	ecx, WORD PTR _Finished$[ebp]
	test	ecx, ecx
	jne	$LN38@ParseMovie

; 3541 : 					{
; 3542 : 						switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv231[ebp], eax
	mov	ecx, DWORD PTR tv231[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv231[ebp], ecx
	cmp	DWORD PTR tv231[ebp], 82		; 00000052H
	ja	SHORT $LN33@ParseMovie
	mov	edx, DWORD PTR tv231[ebp]
	movzx	eax, BYTE PTR $LN74@ParseMovie[edx]
	jmp	DWORD PTR $LN80@ParseMovie[eax*4]
$LN35@ParseMovie:

; 3543 : 						{
; 3544 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3545 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3546 : 								break;

	jmp	SHORT $LN36@ParseMovie
$LN34@ParseMovie:

; 3547 : 							case '[':
; 3548 : 								Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3549 : 								Section=SECTION_PROCESSPARAMS;

	mov	edx, 5
	mov	WORD PTR _Section$[ebp], dx

; 3550 : 								break;

	jmp	SHORT $LN36@ParseMovie
$LN33@ParseMovie:

; 3551 : 							default:
; 3552 : 								Found=1;

	mov	eax, 1
	mov	WORD PTR _Found$[ebp], ax
$LN36@ParseMovie:

; 3553 : 								break;
; 3554 : 						}
; 3555 : 						if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN32@ParseMovie

; 3556 : 						{
; 3557 : 							Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3558 : 							Section=SECTION_PROCESSPARAMS;

	mov	edx, 5
	mov	WORD PTR _Section$[ebp], dx
$LN32@ParseMovie:

; 3559 : 						}
; 3560 : 					}

	jmp	$LN39@ParseMovie
$LN38@ParseMovie:

; 3561 : 
; 3562 : 					if(Found)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	je	$LN31@ParseMovie

; 3563 : 					{
; 3564 : 						Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx

; 3565 : 						if(script_[Idx_] == '"') // string

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	$LN30@ParseMovie

; 3566 : 						{
; 3567 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 3568 : 							str_=&script_[Idx_+tokenlen_];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN29@ParseMovie:

; 3569 : 							// Find closing (")
; 3570 : 							while(!Found && !Finished)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	jne	SHORT $LN28@ParseMovie
	movsx	edx, WORD PTR _Finished$[ebp]
	test	edx, edx
	jne	SHORT $LN28@ParseMovie

; 3571 : 							{
; 3572 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN27@ParseMovie

; 3573 : 									Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3574 : 								else

	jmp	SHORT $LN26@ParseMovie
$LN27@ParseMovie:

; 3575 : 								{
; 3576 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN25@ParseMovie

; 3577 : 									{
; 3578 : 										Finished=1;

	mov	eax, 1
	mov	WORD PTR _Finished$[ebp], ax

; 3579 : 										Section=SECTION_PROCESSPARAMS;

	mov	ecx, 5
	mov	WORD PTR _Section$[ebp], cx

; 3580 : 									}
; 3581 : 									else

	jmp	SHORT $LN26@ParseMovie
$LN25@ParseMovie:

; 3582 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN26@ParseMovie:

; 3583 : 								}
; 3584 : 							}

	jmp	SHORT $LN29@ParseMovie
$LN28@ParseMovie:

; 3585 : 							if(Found)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	je	SHORT $LN23@ParseMovie

; 3586 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0
$LN23@ParseMovie:

; 3587 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3588 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	$LN31@ParseMovie
$LN30@ParseMovie:

; 3589 : 						}
; 3590 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN20@ParseMovie
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 45					; 0000002dH
	jne	$LN21@ParseMovie
$LN20@ParseMovie:

; 3591 : 						{
; 3592 : 							// find white space
; 3593 : 							Found=0;

	xor	eax, eax
	mov	WORD PTR _Found$[ebp], ax

; 3594 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN19@ParseMovie:

; 3595 : 							while(!Found)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	jne	$LN18@ParseMovie

; 3596 : 							{
; 3597 : 								switch(script_[Idx_ + tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv333[ebp], ecx
	mov	edx, DWORD PTR tv333[ebp]
	sub	edx, 9
	mov	DWORD PTR tv333[ebp], edx
	cmp	DWORD PTR tv333[ebp], 35		; 00000023H
	ja	SHORT $LN14@ParseMovie
	mov	eax, DWORD PTR tv333[ebp]
	movzx	ecx, BYTE PTR $LN75@ParseMovie[eax]
	jmp	DWORD PTR $LN81@ParseMovie[ecx*4]
$LN15@ParseMovie:

; 3598 : 								{
; 3599 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3600 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3601 : 										break;

	jmp	SHORT $LN16@ParseMovie
$LN14@ParseMovie:

; 3602 : 									default:
; 3603 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN16@ParseMovie:

; 3604 : 										break;
; 3605 : 								}
; 3606 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN13@ParseMovie

; 3607 : 								{
; 3608 : 									Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3609 : 									Finished=1;

	mov	edx, 1
	mov	WORD PTR _Finished$[ebp], dx

; 3610 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN13@ParseMovie:

; 3611 : 								}
; 3612 : 							}

	jmp	$LN19@ParseMovie
$LN18@ParseMovie:

; 3613 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@ParseMovie
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN12@ParseMovie

; 3614 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN12@ParseMovie:

; 3615 : 
; 3616 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3617 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3618 : 						}
; 3619 : 						else

	jmp	$LN31@ParseMovie
$LN21@ParseMovie:

; 3620 : 						{
; 3621 : 							// Look for ID in tables
; 3622 : 							// Look for white space
; 3623 : 							Found=0;

	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx

; 3624 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN10@ParseMovie:

; 3625 : 							while(!Found && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN9@ParseMovie
	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN9@ParseMovie

; 3626 : 							{
; 3627 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv390[ebp], ecx
	mov	edx, DWORD PTR tv390[ebp]
	sub	edx, 9
	mov	DWORD PTR tv390[ebp], edx
	cmp	DWORD PTR tv390[ebp], 35		; 00000023H
	ja	SHORT $LN5@ParseMovie
	mov	eax, DWORD PTR tv390[ebp]
	movzx	ecx, BYTE PTR $LN76@ParseMovie[eax]
	jmp	DWORD PTR $LN82@ParseMovie[ecx*4]
$LN6@ParseMovie:

; 3628 : 								{
; 3629 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3630 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3631 : 										break;

	jmp	SHORT $LN7@ParseMovie
$LN5@ParseMovie:

; 3632 : 									default:
; 3633 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN7@ParseMovie:

; 3634 : 										break;
; 3635 : 								}
; 3636 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN4@ParseMovie

; 3637 : 								{
; 3638 : 									Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3639 : 									Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3640 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN4@ParseMovie:

; 3641 : 								}
; 3642 : 							}

	jmp	$LN10@ParseMovie
$LN9@ParseMovie:

; 3643 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	$LN3@ParseMovie
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN3@ParseMovie

; 3644 : 							{
; 3645 : 								script_[Idx_+tokenlen_]=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	BYTE PTR [eax+edx], 0

; 3646 : 								MovieID=FindID(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	DWORD PTR _MovieID$[ebp], eax

; 3647 : 								if(MovieID == -1)

	cmp	DWORD PTR _MovieID$[ebp], -1
	jne	SHORT $LN2@ParseMovie

; 3648 : 									MovieID=AddNewID(&script_[Idx_],1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddNewID@C_Parser@@QAEJPADJ@Z		; C_Parser::AddNewID
	mov	DWORD PTR _MovieID$[ebp], eax
$LN2@ParseMovie:

; 3649 : 								P_[P_Idx_++]=MovieID;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _MovieID$[ebp]
	mov	DWORD PTR [eax+edx*4+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN3@ParseMovie:

; 3650 : 							}
; 3651 : 							Idx_+=tokenlen_+1;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3652 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN31@ParseMovie:

; 3653 : 						}
; 3654 : 					}
; 3655 : 				}

	jmp	$LN41@ParseMovie
$LN40@ParseMovie:

; 3656 : 				break;

	jmp	$LN62@ParseMovie
$LN1@ParseMovie:

; 3657 : 			case SECTION_PROCESSPARAMS:
; 3658 : 				Movie_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	movzx	eax, WORD PTR _TokenID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?LocalFunction@C_Movie@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Movie::LocalFunction

; 3659 : 				P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 3660 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0

; 3661 : 				str_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0

; 3662 : 				Section=SECTION_FINDTOKEN;

	xor	eax, eax
	mov	WORD PTR _Section$[ebp], ax
$LN62@ParseMovie:

; 3663 : 				break;
; 3664 : 		}
; 3665 : 	}

	jmp	$LN65@ParseMovie
$LN64@ParseMovie:

; 3666 : 	return(Movie_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+100]
$LN68@ParseMovie:

; 3667 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN78@ParseMovie:
	DD	$LN61@ParseMovie
	DD	$LN45@ParseMovie
	DD	$LN62@ParseMovie
	DD	$LN62@ParseMovie
	DD	$LN42@ParseMovie
	DD	$LN1@ParseMovie
$LN79@ParseMovie:
	DD	$LN52@ParseMovie
	DD	$LN54@ParseMovie
	DD	$LN53@ParseMovie
	DD	$LN56@ParseMovie
	DD	$LN51@ParseMovie
$LN73@ParseMovie:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN80@ParseMovie:
	DD	$LN35@ParseMovie
	DD	$LN34@ParseMovie
	DD	$LN33@ParseMovie
$LN74@ParseMovie:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN81@ParseMovie:
	DD	$LN15@ParseMovie
	DD	$LN14@ParseMovie
$LN75@ParseMovie:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN82@ParseMovie:
	DD	$LN6@ParseMovie
	DD	$LN5@ParseMovie
$LN76@ParseMovie:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z ENDP		; C_Parser::ParseMovie
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -172						; size = 4
$T3 = -168						; size = 4
tv77 = -164						; size = 4
tv87 = -160						; size = 4
_TokenType$ = -156					; size = 2
_AddFlag$ = -152					; size = 4
_StringID$ = -148					; size = 4
tv232 = -144						; size = 4
tv391 = -140						; size = 4
tv130 = -136						; size = 4
tv334 = -132						; size = 4
_InString$ = -128					; size = 4
_TokenID$ = -124					; size = 2
_Comment$ = -120					; size = 2
_Done$ = -116						; size = 2
_Finished$ = -112					; size = 2
_Section$ = -108					; size = 2
_Found$ = -104						; size = 2
_this$ = -100						; size = 4
_buffer$ = -96						; size = 80
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z PROC	; C_Parser::ParseString
; _this$ = ecx

; 3197 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3198 : 	int InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3199 : 	short Done=0,Comment=0,Found=0,Finished=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _Finished$[ebp], ax

; 3200 : 	short TokenID=0,Section=0,TokenType=0;

	xor	ecx, ecx
	mov	WORD PTR _TokenID$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _TokenType$[ebp], ax

; 3201 : 	long StringID=0;

	mov	DWORD PTR _StringID$[ebp], 0

; 3202 : 	BOOL AddFlag=FALSE;

	mov	DWORD PTR _AddFlag$[ebp], 0

; 3203 : 	char buffer[80];
; 3204 : 
; 3205 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 3206 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 3207 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 3208 : 
; 3209 : 	if(String_ == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN70@ParseStrin

; 3210 : 	{
; 3211 : 		String_=new C_String;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN73@ParseStrin
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_String@@QAE@XZ			; C_String::C_String
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN74@ParseStrin
$LN73@ParseStrin:
	mov	DWORD PTR tv77[ebp], 0
$LN74@ParseStrin:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+96], eax

; 3212 : 		String_->Setup(TXT_LAST_TEXT_ID);

	push	2000					; 000007d0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+96]
	call	?Setup@C_String@@QAEXJ@Z		; C_String::Setup
$LN70@ParseStrin:

; 3213 : 	}
; 3214 : 
; 3215 : 	if(LoadScript(filename) == FALSE)

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN69@ParseStrin

; 3216 : 		return(NULL);

	xor	eax, eax
	jmp	$LN71@ParseStrin
$LN69@ParseStrin:

; 3217 : 
; 3218 : 	Done=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax

; 3219 : 	Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3220 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3221 : 	Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 3222 : 	TokenType=TOKEN_NOTHING;

	xor	eax, eax
	mov	WORD PTR _TokenType$[ebp], ax
$LN68@ParseStrin:

; 3223 : 	
; 3224 : 	while(!Done)

	movsx	ecx, WORD PTR _Done$[ebp]
	test	ecx, ecx
	jne	$LN67@ParseStrin

; 3225 : 	{
; 3226 : 		switch(Section)

	movsx	edx, WORD PTR _Section$[ebp]
	mov	DWORD PTR tv87[ebp], edx
	cmp	DWORD PTR tv87[ebp], 5
	ja	$LN65@ParseStrin
	mov	eax, DWORD PTR tv87[ebp]
	jmp	DWORD PTR $LN81@ParseStrin[eax*4]
$LN64@ParseStrin:

; 3227 : 		{
; 3228 : 			case SECTION_FINDTOKEN:
; 3229 : 			// Look for token starting with '['
; 3230 : 				Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN63@ParseStrin:

; 3231 : 				while(!Found && !Done)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN62@ParseStrin
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN62@ParseStrin

; 3232 : 				{
; 3233 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv130[ebp], edx
	mov	eax, DWORD PTR tv130[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 81		; 00000051H
	ja	$LN54@ParseStrin
	mov	ecx, DWORD PTR tv130[ebp]
	movzx	edx, BYTE PTR $LN76@ParseStrin[ecx]
	jmp	DWORD PTR $LN82@ParseStrin[edx*4]
$LN59@ParseStrin:

; 3234 : 					{
; 3235 : 						case '[':
; 3236 : 							if(!Comment && !InString)

	movsx	eax, WORD PTR _Comment$[ebp]
	test	eax, eax
	jne	SHORT $LN58@ParseStrin
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN58@ParseStrin

; 3237 : 							{
; 3238 : 								Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3239 : 								break;

	jmp	SHORT $LN60@ParseStrin
$LN58@ParseStrin:

; 3240 : 							}
; 3241 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3242 : 							break;

	jmp	SHORT $LN60@ParseStrin
$LN57@ParseStrin:

; 3243 : 						case '"':
; 3244 : 							InString=1-InString;

	mov	edx, 1
	sub	edx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], edx

; 3245 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3246 : 							break;

	jmp	SHORT $LN60@ParseStrin
$LN56@ParseStrin:

; 3247 : 						case '#':
; 3248 : 							Comment=1;

	mov	eax, 1
	mov	WORD PTR _Comment$[ebp], ax

; 3249 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3250 : 							break;

	jmp	SHORT $LN60@ParseStrin
$LN55@ParseStrin:

; 3251 : 						case 0x0a: case 0x0d:
; 3252 : 							Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3253 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3254 : 							break;

	jmp	SHORT $LN60@ParseStrin
$LN54@ParseStrin:

; 3255 : 						default:
; 3256 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN60@ParseStrin:

; 3257 : 					}
; 3258 : 					if((Idx_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN53@ParseStrin

; 3259 : 						Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx
$LN53@ParseStrin:

; 3260 : 				}

	jmp	$LN63@ParseStrin
$LN62@ParseStrin:

; 3261 : 							
; 3262 : 				tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN52@ParseStrin:

; 3263 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN51@ParseStrin
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN51@ParseStrin

; 3264 : 					tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	SHORT $LN52@ParseStrin
$LN51@ParseStrin:

; 3265 : 				tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 3266 : 
; 3267 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN50@ParseStrin

; 3268 : 				{
; 3269 : 					Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx

; 3270 : 					break;

	jmp	$LN65@ParseStrin
$LN50@ParseStrin:

; 3271 : 				}
; 3272 : 
; 3273 : 				if(Found == 1)

	movsx	eax, WORD PTR _Found$[ebp]
	cmp	eax, 1
	jne	SHORT $LN49@ParseStrin

; 3274 : 					Section=SECTION_PROCESSTOKEN;

	mov	ecx, 1
	mov	WORD PTR _Section$[ebp], cx
$LN49@ParseStrin:

; 3275 : 				break;

	jmp	$LN65@ParseStrin
$LN48@ParseStrin:

; 3276 : 			case SECTION_PROCESSTOKEN:
; 3277 : 				TokenID=String_->LocalFind(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	call	?LocalFind@C_String@@QAEFPAD@Z		; C_String::LocalFind
	mov	WORD PTR _TokenID$[ebp], ax

; 3278 : 				if(TokenID)

	movsx	eax, WORD PTR _TokenID$[ebp]
	test	eax, eax
	je	SHORT $LN47@ParseStrin

; 3279 : 				{
; 3280 : 					Section=SECTION_FINDPARAMS;

	mov	ecx, 4
	mov	WORD PTR _Section$[ebp], cx

; 3281 : 					Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3282 : 					tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3283 : 				}
; 3284 : 				else

	jmp	SHORT $LN46@ParseStrin
$LN47@ParseStrin:

; 3285 : 				{
; 3286 : 					Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 3287 : 					Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 3288 : 					tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN46@ParseStrin:

; 3289 : 				}
; 3290 : 				break;

	jmp	$LN65@ParseStrin
$LN45@ParseStrin:

; 3291 : 			case SECTION_FINDPARAMS:
; 3292 : 				P_Idx_=0; // start with 0 parameters

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 3293 : 
; 3294 : 				// Repeat until token char '[' found (or EOF)
; 3295 : 				Finished=0;

	xor	edx, edx
	mov	WORD PTR _Finished$[ebp], dx
$LN44@ParseStrin:

; 3296 : 				while(!Finished)

	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN43@ParseStrin

; 3297 : 				{
; 3298 : 					// Find NON white space
; 3299 : 					Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN42@ParseStrin:

; 3300 : 					while(!Found && !Done && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN41@ParseStrin
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN41@ParseStrin
	movsx	ecx, WORD PTR _Finished$[ebp]
	test	ecx, ecx
	jne	$LN41@ParseStrin

; 3301 : 					{
; 3302 : 						switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv232[ebp], eax
	mov	ecx, DWORD PTR tv232[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv232[ebp], ecx
	cmp	DWORD PTR tv232[ebp], 82		; 00000052H
	ja	SHORT $LN36@ParseStrin
	mov	edx, DWORD PTR tv232[ebp]
	movzx	eax, BYTE PTR $LN77@ParseStrin[edx]
	jmp	DWORD PTR $LN83@ParseStrin[eax*4]
$LN38@ParseStrin:

; 3303 : 						{
; 3304 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3305 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3306 : 								break;

	jmp	SHORT $LN39@ParseStrin
$LN37@ParseStrin:

; 3307 : 							case '[':
; 3308 : 								Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3309 : 								Section=SECTION_PROCESSPARAMS;

	mov	edx, 5
	mov	WORD PTR _Section$[ebp], dx

; 3310 : 								break;

	jmp	SHORT $LN39@ParseStrin
$LN36@ParseStrin:

; 3311 : 							default:
; 3312 : 								Found=1;

	mov	eax, 1
	mov	WORD PTR _Found$[ebp], ax
$LN39@ParseStrin:

; 3313 : 								break;
; 3314 : 						}
; 3315 : 						if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN35@ParseStrin

; 3316 : 						{
; 3317 : 							Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3318 : 							Section=SECTION_PROCESSPARAMS;

	mov	edx, 5
	mov	WORD PTR _Section$[ebp], dx
$LN35@ParseStrin:

; 3319 : 						}
; 3320 : 					}

	jmp	$LN42@ParseStrin
$LN41@ParseStrin:

; 3321 : 
; 3322 : 					if(Found)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	je	$LN34@ParseStrin

; 3323 : 					{
; 3324 : 						Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx

; 3325 : 						if(script_[Idx_] == '"') // string

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	$LN33@ParseStrin

; 3326 : 						{
; 3327 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 3328 : 							str_=&script_[Idx_+tokenlen_];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN32@ParseStrin:

; 3329 : 							// Find closing (")
; 3330 : 							while(!Found && !Finished)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	jne	SHORT $LN31@ParseStrin
	movsx	edx, WORD PTR _Finished$[ebp]
	test	edx, edx
	jne	SHORT $LN31@ParseStrin

; 3331 : 							{
; 3332 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN30@ParseStrin

; 3333 : 									Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3334 : 								else

	jmp	SHORT $LN29@ParseStrin
$LN30@ParseStrin:

; 3335 : 								{
; 3336 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN28@ParseStrin

; 3337 : 									{
; 3338 : 										Finished=1;

	mov	eax, 1
	mov	WORD PTR _Finished$[ebp], ax

; 3339 : 										Section=SECTION_PROCESSPARAMS;

	mov	ecx, 5
	mov	WORD PTR _Section$[ebp], cx

; 3340 : 									}
; 3341 : 									else

	jmp	SHORT $LN29@ParseStrin
$LN28@ParseStrin:

; 3342 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN29@ParseStrin:

; 3343 : 								}
; 3344 : 							}

	jmp	SHORT $LN32@ParseStrin
$LN31@ParseStrin:

; 3345 : 							if(Found)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	je	SHORT $LN26@ParseStrin

; 3346 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0
$LN26@ParseStrin:

; 3347 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3348 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	$LN34@ParseStrin
$LN33@ParseStrin:

; 3349 : 						}
; 3350 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN23@ParseStrin
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 45					; 0000002dH
	jne	$LN24@ParseStrin
$LN23@ParseStrin:

; 3351 : 						{
; 3352 : 							// find white space
; 3353 : 							Found=0;

	xor	eax, eax
	mov	WORD PTR _Found$[ebp], ax

; 3354 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN22@ParseStrin:

; 3355 : 							while(!Found)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	jne	$LN21@ParseStrin

; 3356 : 							{
; 3357 : 								switch(script_[Idx_ + tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv334[ebp], ecx
	mov	edx, DWORD PTR tv334[ebp]
	sub	edx, 9
	mov	DWORD PTR tv334[ebp], edx
	cmp	DWORD PTR tv334[ebp], 35		; 00000023H
	ja	SHORT $LN17@ParseStrin
	mov	eax, DWORD PTR tv334[ebp]
	movzx	ecx, BYTE PTR $LN78@ParseStrin[eax]
	jmp	DWORD PTR $LN84@ParseStrin[ecx*4]
$LN18@ParseStrin:

; 3358 : 								{
; 3359 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3360 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3361 : 										break;

	jmp	SHORT $LN19@ParseStrin
$LN17@ParseStrin:

; 3362 : 									default:
; 3363 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN19@ParseStrin:

; 3364 : 										break;
; 3365 : 								}
; 3366 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN16@ParseStrin

; 3367 : 								{
; 3368 : 									Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3369 : 									Finished=1;

	mov	edx, 1
	mov	WORD PTR _Finished$[ebp], dx

; 3370 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN16@ParseStrin:

; 3371 : 								}
; 3372 : 							}

	jmp	$LN22@ParseStrin
$LN21@ParseStrin:

; 3373 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	SHORT $LN15@ParseStrin
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN15@ParseStrin

; 3374 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN15@ParseStrin:

; 3375 : 
; 3376 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3377 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3378 : 						}
; 3379 : 						else

	jmp	$LN34@ParseStrin
$LN24@ParseStrin:

; 3380 : 						{
; 3381 : 							// Look for ID in tables
; 3382 : 							// Look for white space
; 3383 : 							Found=0;

	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx

; 3384 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN13@ParseStrin:

; 3385 : 							while(!Found && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN12@ParseStrin
	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN12@ParseStrin

; 3386 : 							{
; 3387 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv391[ebp], ecx
	mov	edx, DWORD PTR tv391[ebp]
	sub	edx, 9
	mov	DWORD PTR tv391[ebp], edx
	cmp	DWORD PTR tv391[ebp], 35		; 00000023H
	ja	SHORT $LN8@ParseStrin
	mov	eax, DWORD PTR tv391[ebp]
	movzx	ecx, BYTE PTR $LN79@ParseStrin[eax]
	jmp	DWORD PTR $LN85@ParseStrin[ecx*4]
$LN9@ParseStrin:

; 3388 : 								{
; 3389 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3390 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3391 : 										break;

	jmp	SHORT $LN10@ParseStrin
$LN8@ParseStrin:

; 3392 : 									default:
; 3393 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN10@ParseStrin:

; 3394 : 										break;
; 3395 : 								}
; 3396 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN7@ParseStrin

; 3397 : 								{
; 3398 : 									Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3399 : 									Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3400 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN7@ParseStrin:

; 3401 : 								}
; 3402 : 							}

	jmp	$LN13@ParseStrin
$LN12@ParseStrin:

; 3403 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	$LN6@ParseStrin
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	$LN6@ParseStrin

; 3404 : 							{
; 3405 : 								script_[Idx_+tokenlen_]=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	BYTE PTR [eax+edx], 0

; 3406 : 								StringID=FindID(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	DWORD PTR _StringID$[ebp], eax

; 3407 : 								if(StringID == -1)

	cmp	DWORD PTR _StringID$[ebp], -1
	jne	SHORT $LN5@ParseStrin

; 3408 : 								{
; 3409 : 									_tcscpy(buffer,&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 3410 : 									StringID=-2;

	mov	DWORD PTR _StringID$[ebp], -2		; fffffffeH
$LN5@ParseStrin:

; 3411 : 								}
; 3412 : 								P_[P_Idx_++]=StringID;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _StringID$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+958]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx
$LN6@ParseStrin:

; 3413 : 							}
; 3414 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3415 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN34@ParseStrin:

; 3416 : 						}
; 3417 : 					}
; 3418 : 				}

	jmp	$LN44@ParseStrin
$LN43@ParseStrin:

; 3419 : 				break;

	jmp	$LN65@ParseStrin
$LN4@ParseStrin:

; 3420 : 			case SECTION_PROCESSPARAMS:
; 3421 : 				if(P_[0] == -2)

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+12], -2		; fffffffeH
	jne	SHORT $LN3@ParseStrin

; 3422 : 					AddFlag=TRUE;

	mov	DWORD PTR _AddFlag$[ebp], 1

; 3423 : 				else

	jmp	SHORT $LN2@ParseStrin
$LN3@ParseStrin:

; 3424 : 					AddFlag=FALSE;

	mov	DWORD PTR _AddFlag$[ebp], 0
$LN2@ParseStrin:

; 3425 : 				String_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	movzx	eax, WORD PTR _TokenID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+96]
	call	?LocalFunction@C_String@@QAEXFQAJPADPAVC_Handler@@@Z ; C_String::LocalFunction

; 3426 : 				if(AddFlag)

	cmp	DWORD PTR _AddFlag$[ebp], 0
	je	SHORT $LN1@ParseStrin

; 3427 : 					TokenOrder_->AddTextID(String_->GetLastID(),buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	call	?GetLastID@C_String@@QAEJXZ		; C_String::GetLastID
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+908]
	call	?AddTextID@C_Hash@@QAEJJPAD@Z		; C_Hash::AddTextID
$LN1@ParseStrin:

; 3428 : 				P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 3429 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0

; 3430 : 				str_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0

; 3431 : 				Section=SECTION_FINDTOKEN;

	xor	eax, eax
	mov	WORD PTR _Section$[ebp], ax
$LN65@ParseStrin:

; 3432 : 				break;
; 3433 : 		}
; 3434 : 	}

	jmp	$LN68@ParseStrin
$LN67@ParseStrin:

; 3435 : 	return(String_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+96]
$LN71@ParseStrin:

; 3436 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN81@ParseStrin:
	DD	$LN64@ParseStrin
	DD	$LN48@ParseStrin
	DD	$LN65@ParseStrin
	DD	$LN65@ParseStrin
	DD	$LN45@ParseStrin
	DD	$LN4@ParseStrin
$LN82@ParseStrin:
	DD	$LN55@ParseStrin
	DD	$LN57@ParseStrin
	DD	$LN56@ParseStrin
	DD	$LN59@ParseStrin
	DD	$LN54@ParseStrin
$LN76@ParseStrin:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN83@ParseStrin:
	DD	$LN38@ParseStrin
	DD	$LN37@ParseStrin
	DD	$LN36@ParseStrin
$LN77@ParseStrin:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN84@ParseStrin:
	DD	$LN18@ParseStrin
	DD	$LN17@ParseStrin
$LN78@ParseStrin:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN85@ParseStrin:
	DD	$LN9@ParseStrin
	DD	$LN8@ParseStrin
$LN79@ParseStrin:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z ENDP	; C_Parser::ParseString
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_TokenType$ = -84					; size = 4
$T2 = -80						; size = 4
tv84 = -76						; size = 4
tv77 = -72						; size = 4
$T3 = -68						; size = 4
_TokenID$ = -64						; size = 4
_SoundID$ = -60						; size = 4
tv372 = -56						; size = 4
tv318 = -52						; size = 4
tv221 = -48						; size = 4
_Comment$ = -44						; size = 4
_InString$ = -40					; size = 4
tv93 = -36						; size = 4
_Done$ = -32						; size = 4
_Finished$ = -28					; size = 4
_Section$ = -24						; size = 4
_Found$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z PROC		; C_Parser::ParseSound
; _this$ = ecx

; 2967 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2968 : 	long Done=0,Comment=0,Found=0,InString=0,Finished=0;;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0
	mov	DWORD PTR _Finished$[ebp], 0

; 2969 : 	long TokenID=0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 2970 : 	long SoundID=0;

	mov	DWORD PTR _SoundID$[ebp], 0

; 2971 : 
; 2972 : 	Idx_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 2973 : 	P_Idx_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 2974 : 	tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2975 : 
; 2976 : 	if(Sound_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+88], 0
	jne	SHORT $LN67@ParseSound

; 2977 : 	{
; 2978 : 		Sound_=new C_Sound;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN70@ParseSound
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_Sound@@QAE@XZ			; C_Sound::C_Sound
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN71@ParseSound
$LN70@ParseSound:
	mov	DWORD PTR tv77[ebp], 0
$LN71@ParseSound:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+88], edx

; 2979 : 		Sound_->Setup();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	call	?Setup@C_Sound@@QAEXXZ			; C_Sound::Setup
$LN67@ParseSound:

; 2980 : 	}
; 2981 : 
; 2982 : 	if(LoadScript(filename) == FALSE)

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN66@ParseSound

; 2983 : 		return(NULL);

	xor	eax, eax
	jmp	$LN68@ParseSound
$LN66@ParseSound:

; 2984 : 
; 2985 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 2986 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2987 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 2988 : 	Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2989 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN65@ParseSound:

; 2990 : 	
; 2991 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN64@ParseSound

; 2992 : 	{
; 2993 : 		switch(Section)

	mov	edx, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv84[ebp], edx
	cmp	DWORD PTR tv84[ebp], 5
	ja	$LN62@ParseSound
	mov	eax, DWORD PTR tv84[ebp]
	jmp	DWORD PTR $LN78@ParseSound[eax*4]
$LN61@ParseSound:

; 2994 : 		{
; 2995 : 			case SECTION_FINDTOKEN:
; 2996 : 			// Look for token starting with '['
; 2997 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN60@ParseSound:

; 2998 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN59@ParseSound
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN59@ParseSound

; 2999 : 				{
; 3000 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv93[ebp], edx
	mov	eax, DWORD PTR tv93[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv93[ebp], eax
	cmp	DWORD PTR tv93[ebp], 81			; 00000051H
	ja	SHORT $LN51@ParseSound
	mov	ecx, DWORD PTR tv93[ebp]
	movzx	edx, BYTE PTR $LN73@ParseSound[ecx]
	jmp	DWORD PTR $LN79@ParseSound[edx*4]
$LN56@ParseSound:

; 3001 : 					{
; 3002 : 						case '[':
; 3003 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN55@ParseSound
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN55@ParseSound

; 3004 : 							{
; 3005 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 3006 : 								break;

	jmp	SHORT $LN57@ParseSound
$LN55@ParseSound:

; 3007 : 							}
; 3008 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3009 : 							break;

	jmp	SHORT $LN57@ParseSound
$LN54@ParseSound:

; 3010 : 						case '"':
; 3011 : 							InString=1-InString;

	mov	eax, 1
	sub	eax, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], eax

; 3012 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3013 : 							break;

	jmp	SHORT $LN57@ParseSound
$LN53@ParseSound:

; 3014 : 						case '#':
; 3015 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 3016 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3017 : 							break;

	jmp	SHORT $LN57@ParseSound
$LN52@ParseSound:

; 3018 : 						case 0x0a: case 0x0d:
; 3019 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 3020 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3021 : 							break;

	jmp	SHORT $LN57@ParseSound
$LN51@ParseSound:

; 3022 : 						default:
; 3023 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN57@ParseSound:

; 3024 : 					}
; 3025 : 					if((Idx_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN50@ParseSound

; 3026 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN50@ParseSound:

; 3027 : 				}

	jmp	$LN60@ParseSound
$LN59@ParseSound:

; 3028 : 							
; 3029 : 				tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN49@ParseSound:

; 3030 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN48@ParseSound
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN48@ParseSound

; 3031 : 					tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	SHORT $LN49@ParseSound
$LN48@ParseSound:

; 3032 : 				tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3033 : 
; 3034 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN47@ParseSound

; 3035 : 				{
; 3036 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 3037 : 					break;

	jmp	$LN62@ParseSound
$LN47@ParseSound:

; 3038 : 				}
; 3039 : 
; 3040 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN46@ParseSound

; 3041 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN46@ParseSound:

; 3042 : 				break;

	jmp	$LN62@ParseSound
$LN45@ParseSound:

; 3043 : 			case SECTION_PROCESSTOKEN:
; 3044 : 				TokenID=Sound_->LocalFind(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	call	?LocalFind@C_Sound@@QAEFPAD@Z		; C_Sound::LocalFind
	movsx	ecx, ax
	mov	DWORD PTR _TokenID$[ebp], ecx

; 3045 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN44@ParseSound

; 3046 : 				{
; 3047 : 					Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 3048 : 					Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3049 : 					tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3050 : 				}
; 3051 : 				else

	jmp	SHORT $LN43@ParseSound
$LN44@ParseSound:

; 3052 : 				{
; 3053 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 3054 : 					Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3055 : 					tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN43@ParseSound:

; 3056 : 				}
; 3057 : 				break;

	jmp	$LN62@ParseSound
$LN42@ParseSound:

; 3058 : 			case SECTION_FINDPARAMS:
; 3059 : 				P_Idx_=0; // start with 0 parameters

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 3060 : 
; 3061 : 				// Repeat until token char '[' found (or EOF)
; 3062 : 				Finished=0;

	mov	DWORD PTR _Finished$[ebp], 0
$LN41@ParseSound:

; 3063 : 				while(!Finished)

	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN40@ParseSound

; 3064 : 				{
; 3065 : 					// Find NON white space
; 3066 : 					Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN39@ParseSound:

; 3067 : 					while(!Found && !Done && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN38@ParseSound
	cmp	DWORD PTR _Done$[ebp], 0
	jne	SHORT $LN38@ParseSound
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN38@ParseSound

; 3068 : 					{
; 3069 : 						switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv221[ebp], edx
	mov	eax, DWORD PTR tv221[ebp]
	sub	eax, 9
	mov	DWORD PTR tv221[ebp], eax
	cmp	DWORD PTR tv221[ebp], 82		; 00000052H
	ja	SHORT $LN33@ParseSound
	mov	ecx, DWORD PTR tv221[ebp]
	movzx	edx, BYTE PTR $LN74@ParseSound[ecx]
	jmp	DWORD PTR $LN80@ParseSound[edx*4]
$LN35@ParseSound:

; 3070 : 						{
; 3071 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3072 : 								Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3073 : 								break;

	jmp	SHORT $LN36@ParseSound
$LN34@ParseSound:

; 3074 : 							case '[':
; 3075 : 								Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 3076 : 								Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 3077 : 								break;

	jmp	SHORT $LN36@ParseSound
$LN33@ParseSound:

; 3078 : 							default:
; 3079 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1
$LN36@ParseSound:

; 3080 : 								break;
; 3081 : 						}
; 3082 : 						if(Idx_ >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN32@ParseSound

; 3083 : 						{
; 3084 : 							Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 3085 : 							Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN32@ParseSound:

; 3086 : 						}
; 3087 : 					}

	jmp	$LN39@ParseSound
$LN38@ParseSound:

; 3088 : 
; 3089 : 					if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN31@ParseSound

; 3090 : 					{
; 3091 : 						Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 3092 : 						if(script_[Idx_] == '"') // string

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 34					; 00000022H
	jne	$LN30@ParseSound

; 3093 : 						{
; 3094 : 							tokenlen_=1;

	mov	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 3095 : 							str_=&script_[Idx_+tokenlen_];

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN29@ParseSound:

; 3096 : 							// Find closing (")
; 3097 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	SHORT $LN28@ParseSound
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN28@ParseSound

; 3098 : 							{
; 3099 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 34					; 00000022H
	jne	SHORT $LN27@ParseSound

; 3100 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 3101 : 								else

	jmp	SHORT $LN26@ParseSound
$LN27@ParseSound:

; 3102 : 								{
; 3103 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN25@ParseSound

; 3104 : 									{
; 3105 : 										Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 3106 : 										Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 3107 : 									}
; 3108 : 									else

	jmp	SHORT $LN26@ParseSound
$LN25@ParseSound:

; 3109 : 										tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN26@ParseSound:

; 3110 : 								}
; 3111 : 							}

	jmp	SHORT $LN29@ParseSound
$LN28@ParseSound:

; 3112 : 							if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN23@ParseSound

; 3113 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	BYTE PTR [eax+edx], 0
$LN23@ParseSound:

; 3114 : 							Idx_+=tokenlen_+1;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3115 : 							tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
	jmp	$LN31@ParseSound
$LN30@ParseSound:

; 3116 : 						}
; 3117 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN20@ParseSound
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 45					; 0000002dH
	jne	$LN21@ParseSound
$LN20@ParseSound:

; 3118 : 						{
; 3119 : 							// find white space
; 3120 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 3121 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN19@ParseSound:

; 3122 : 							while(!Found)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN18@ParseSound

; 3123 : 							{
; 3124 : 								switch(script_[Idx_ + tokenlen_])

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv318[ebp], eax
	mov	ecx, DWORD PTR tv318[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv318[ebp], ecx
	cmp	DWORD PTR tv318[ebp], 35		; 00000023H
	ja	SHORT $LN14@ParseSound
	mov	edx, DWORD PTR tv318[ebp]
	movzx	eax, BYTE PTR $LN75@ParseSound[edx]
	jmp	DWORD PTR $LN81@ParseSound[eax*4]
$LN15@ParseSound:

; 3125 : 								{
; 3126 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3127 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 3128 : 										break;

	jmp	SHORT $LN16@ParseSound
$LN14@ParseSound:

; 3129 : 									default:
; 3130 : 										tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN16@ParseSound:

; 3131 : 										break;
; 3132 : 								}
; 3133 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN13@ParseSound

; 3134 : 								{
; 3135 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 3136 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 3137 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN13@ParseSound:

; 3138 : 								}
; 3139 : 							}

	jmp	$LN19@ParseSound
$LN18@ParseSound:

; 3140 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN12@ParseSound
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN12@ParseSound

; 3141 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN12@ParseSound:

; 3142 : 
; 3143 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3144 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3145 : 						}
; 3146 : 						else

	jmp	$LN31@ParseSound
$LN21@ParseSound:

; 3147 : 						{
; 3148 : 							// Look for ID in tables
; 3149 : 							// Look for white space
; 3150 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 3151 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN10@ParseSound:

; 3152 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN9@ParseSound
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN9@ParseSound

; 3153 : 							{
; 3154 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv372[ebp], ecx
	mov	edx, DWORD PTR tv372[ebp]
	sub	edx, 9
	mov	DWORD PTR tv372[ebp], edx
	cmp	DWORD PTR tv372[ebp], 35		; 00000023H
	ja	SHORT $LN5@ParseSound
	mov	eax, DWORD PTR tv372[ebp]
	movzx	ecx, BYTE PTR $LN76@ParseSound[eax]
	jmp	DWORD PTR $LN82@ParseSound[ecx*4]
$LN6@ParseSound:

; 3155 : 								{
; 3156 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3157 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 3158 : 										break;

	jmp	SHORT $LN7@ParseSound
$LN5@ParseSound:

; 3159 : 									default:
; 3160 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN7@ParseSound:

; 3161 : 										break;
; 3162 : 								}
; 3163 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN4@ParseSound

; 3164 : 								{
; 3165 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 3166 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 3167 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN4@ParseSound:

; 3168 : 								}
; 3169 : 							}

	jmp	$LN10@ParseSound
$LN9@ParseSound:

; 3170 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN3@ParseSound
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	cmp	ecx, 12					; 0000000cH
	jge	SHORT $LN3@ParseSound

; 3171 : 							{
; 3172 : 								script_[Idx_+tokenlen_]=0;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+eax], 0

; 3173 : 								SoundID=FindID(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	DWORD PTR _SoundID$[ebp], eax

; 3174 : 								if(SoundID == -1)

	cmp	DWORD PTR _SoundID$[ebp], -1
	jne	SHORT $LN2@ParseSound

; 3175 : 									SoundID=AddNewID(&script_[Idx_],1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddNewID@C_Parser@@QAEJPADJ@Z		; C_Parser::AddNewID
	mov	DWORD PTR _SoundID$[ebp], eax
$LN2@ParseSound:

; 3176 : 								P_[P_Idx_++]=SoundID;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _SoundID$[ebp]
	mov	DWORD PTR [ecx+eax*4+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+958]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx
$LN3@ParseSound:

; 3177 : 							}
; 3178 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3179 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN31@ParseSound:

; 3180 : 						}
; 3181 : 					}
; 3182 : 				}

	jmp	$LN41@ParseSound
$LN40@ParseSound:

; 3183 : 				break;

	jmp	$LN62@ParseSound
$LN1@ParseSound:

; 3184 : 			case SECTION_PROCESSPARAMS:
; 3185 : 				Sound_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	movzx	ecx, WORD PTR _TokenID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+88]
	call	?LocalFunction@C_Sound@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Sound::LocalFunction

; 3186 : 				P_Idx_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 3187 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0

; 3188 : 				str_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 3189 : 				Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0
$LN62@ParseSound:

; 3190 : 				break;
; 3191 : 		}
; 3192 : 	}

	jmp	$LN65@ParseSound
$LN64@ParseSound:

; 3193 : 	return(Sound_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+88]
$LN68@ParseSound:

; 3194 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN78@ParseSound:
	DD	$LN61@ParseSound
	DD	$LN45@ParseSound
	DD	$LN62@ParseSound
	DD	$LN62@ParseSound
	DD	$LN42@ParseSound
	DD	$LN1@ParseSound
$LN79@ParseSound:
	DD	$LN52@ParseSound
	DD	$LN54@ParseSound
	DD	$LN53@ParseSound
	DD	$LN56@ParseSound
	DD	$LN51@ParseSound
$LN73@ParseSound:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN80@ParseSound:
	DD	$LN35@ParseSound
	DD	$LN34@ParseSound
	DD	$LN33@ParseSound
$LN74@ParseSound:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN81@ParseSound:
	DD	$LN15@ParseSound
	DD	$LN14@ParseSound
$LN75@ParseSound:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN82@ParseSound:
	DD	$LN6@ParseSound
	DD	$LN5@ParseSound
$LN76@ParseSound:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z ENDP		; C_Parser::ParseSound
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 4
tv128 = -88						; size = 4
tv89 = -84						; size = 4
$T4 = -80						; size = 4
tv77 = -76						; size = 4
$T5 = -72						; size = 4
_ImageID$ = -68						; size = 4
tv401 = -64						; size = 4
tv347 = -60						; size = 4
tv250 = -56						; size = 4
_Comment$ = -52						; size = 4
_InString$ = -48					; size = 4
tv137 = -44						; size = 4
_TokenID$ = -40						; size = 4
_Done$ = -36						; size = 4
_TokenType$ = -32					; size = 4
_Finished$ = -28					; size = 4
_Section$ = -24						; size = 4
_Found$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z PROC		; C_Parser::ParseImage
; _this$ = ecx

; 2483 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2484 : 	long Done=0,Comment=0,Found=0,InString=0,Finished=0;;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0
	mov	DWORD PTR _Finished$[ebp], 0

; 2485 : 	long TokenID=0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 2486 : 	long ImageID=0;

	mov	DWORD PTR _ImageID$[ebp], 0

; 2487 : 
; 2488 : 	Idx_=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 2489 : 	P_Idx_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 2490 : 	tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2491 : 
; 2492 : 	if(Image_ == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+80], 0
	jne	SHORT $LN71@ParseImage

; 2493 : 	{
; 2494 : 		Image_=new C_Image;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN74@ParseImage
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0C_Image@@QAE@XZ			; C_Image::C_Image
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN75@ParseImage
$LN74@ParseImage:
	mov	DWORD PTR tv77[ebp], 0
$LN75@ParseImage:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+80], edx

; 2495 : 		Image_->Setup();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	?Setup@C_Image@@QAEXXZ			; C_Image::Setup
$LN71@ParseImage:

; 2496 : 	}
; 2497 : 	if(Anim_ == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN70@ParseImage

; 2498 : 	{
; 2499 : 		Anim_=new C_Animation;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN76@ParseImage
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0C_Animation@@QAE@XZ			; C_Animation::C_Animation
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN77@ParseImage
$LN76@ParseImage:
	mov	DWORD PTR tv89[ebp], 0
$LN77@ParseImage:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+84], ecx

; 2500 : 		Anim_->Setup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	call	?Setup@C_Animation@@QAEXXZ		; C_Animation::Setup
$LN70@ParseImage:

; 2501 : 	}
; 2502 : 
; 2503 : 	if(LoadScript(filename) == FALSE)

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN69@ParseImage

; 2504 : 		return(NULL);

	xor	eax, eax
	jmp	$LN72@ParseImage
$LN69@ParseImage:

; 2505 : 
; 2506 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 2507 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2508 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 2509 : 	Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2510 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN68@ParseImage:

; 2511 : 	
; 2512 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN67@ParseImage

; 2513 : 	{
; 2514 : 		switch(Section)

	mov	ecx, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	cmp	DWORD PTR tv128[ebp], 5
	ja	$LN65@ParseImage
	mov	edx, DWORD PTR tv128[ebp]
	jmp	DWORD PTR $LN85@ParseImage[edx*4]
$LN64@ParseImage:

; 2515 : 		{
; 2516 : 			case SECTION_FINDTOKEN:
; 2517 : 			// Look for token starting with '['
; 2518 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN63@ParseImage:

; 2519 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN62@ParseImage
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN62@ParseImage

; 2520 : 				{
; 2521 : 					switch(script_[Idx_])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv137[ebp], ecx
	mov	edx, DWORD PTR tv137[ebp]
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR tv137[ebp], edx
	cmp	DWORD PTR tv137[ebp], 81		; 00000051H
	ja	SHORT $LN54@ParseImage
	mov	eax, DWORD PTR tv137[ebp]
	movzx	ecx, BYTE PTR $LN80@ParseImage[eax]
	jmp	DWORD PTR $LN86@ParseImage[ecx*4]
$LN59@ParseImage:

; 2522 : 					{
; 2523 : 						case '[':
; 2524 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN58@ParseImage
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN58@ParseImage

; 2525 : 							{
; 2526 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2527 : 								break;

	jmp	SHORT $LN60@ParseImage
$LN58@ParseImage:

; 2528 : 							}
; 2529 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2530 : 							break;

	jmp	SHORT $LN60@ParseImage
$LN57@ParseImage:

; 2531 : 						case '"':
; 2532 : 							InString=1-InString;

	mov	edx, 1
	sub	edx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], edx

; 2533 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2534 : 							break;

	jmp	SHORT $LN60@ParseImage
$LN56@ParseImage:

; 2535 : 						case '#':
; 2536 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 2537 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2538 : 							break;

	jmp	SHORT $LN60@ParseImage
$LN55@ParseImage:

; 2539 : 						case 0x0a: case 0x0d:
; 2540 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2541 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2542 : 							break;

	jmp	SHORT $LN60@ParseImage
$LN54@ParseImage:

; 2543 : 						default:
; 2544 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN60@ParseImage:

; 2545 : 					}
; 2546 : 					if((Idx_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN53@ParseImage

; 2547 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN53@ParseImage:

; 2548 : 				}

	jmp	$LN63@ParseImage
$LN62@ParseImage:

; 2549 : 							
; 2550 : 				tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN52@ParseImage:

; 2551 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN51@ParseImage
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN51@ParseImage

; 2552 : 					tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	SHORT $LN52@ParseImage
$LN51@ParseImage:

; 2553 : 				tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2554 : 
; 2555 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN50@ParseImage

; 2556 : 				{
; 2557 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 2558 : 					break;

	jmp	$LN65@ParseImage
$LN50@ParseImage:

; 2559 : 				}
; 2560 : 
; 2561 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN49@ParseImage

; 2562 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN49@ParseImage:

; 2563 : 				break;

	jmp	$LN65@ParseImage
$LN48@ParseImage:

; 2564 : 			case SECTION_PROCESSTOKEN:
; 2565 : 				TokenID=Image_->LocalFind(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	call	?LocalFind@C_Image@@QAEFPAD@Z		; C_Image::LocalFind
	cwde
	mov	DWORD PTR _TokenID$[ebp], eax

; 2566 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN47@ParseImage

; 2567 : 				{
; 2568 : 					Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 2569 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2570 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2571 : 					TokenType=1;

	mov	DWORD PTR _TokenType$[ebp], 1

; 2572 : 					break;

	jmp	$LN65@ParseImage
$LN47@ParseImage:

; 2573 : 				}
; 2574 : 				TokenID=Anim_->LocalFind(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	call	?LocalFind@C_Animation@@QAEFPAD@Z	; C_Animation::LocalFind
	movsx	edx, ax
	mov	DWORD PTR _TokenID$[ebp], edx

; 2575 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN46@ParseImage

; 2576 : 				{
; 2577 : 					Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 2578 : 					Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 2579 : 					tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2580 : 					TokenType=2;

	mov	DWORD PTR _TokenType$[ebp], 2

; 2581 : 					break;

	jmp	$LN65@ParseImage
$LN46@ParseImage:

; 2582 : 				}
; 2583 : 				TokenType=0;

	mov	DWORD PTR _TokenType$[ebp], 0

; 2584 : 				Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2585 : 				Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 2586 : 				tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2587 : 				break;

	jmp	$LN65@ParseImage
$LN45@ParseImage:

; 2588 : 			case SECTION_FINDPARAMS:
; 2589 : 				P_Idx_=0; // start with 0 parameters

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 2590 : 
; 2591 : 				// Repeat until token char '[' found (or EOF)
; 2592 : 				Finished=0;

	mov	DWORD PTR _Finished$[ebp], 0
$LN44@ParseImage:

; 2593 : 				while(!Finished)

	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN43@ParseImage

; 2594 : 				{
; 2595 : 					// Find NON white space
; 2596 : 					Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN42@ParseImage:

; 2597 : 					while(!Found && !Done && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN41@ParseImage
	cmp	DWORD PTR _Done$[ebp], 0
	jne	SHORT $LN41@ParseImage
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN41@ParseImage

; 2598 : 					{
; 2599 : 						switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv250[ebp], eax
	mov	ecx, DWORD PTR tv250[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv250[ebp], ecx
	cmp	DWORD PTR tv250[ebp], 82		; 00000052H
	ja	SHORT $LN36@ParseImage
	mov	edx, DWORD PTR tv250[ebp]
	movzx	eax, BYTE PTR $LN81@ParseImage[edx]
	jmp	DWORD PTR $LN87@ParseImage[eax*4]
$LN38@ParseImage:

; 2600 : 						{
; 2601 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2602 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2603 : 								break;

	jmp	SHORT $LN39@ParseImage
$LN37@ParseImage:

; 2604 : 							case '[':
; 2605 : 								Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2606 : 								Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 2607 : 								break;

	jmp	SHORT $LN39@ParseImage
$LN36@ParseImage:

; 2608 : 							default:
; 2609 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1
$LN39@ParseImage:

; 2610 : 								break;
; 2611 : 						}
; 2612 : 						if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN35@ParseImage

; 2613 : 						{
; 2614 : 							Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2615 : 							Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN35@ParseImage:

; 2616 : 						}
; 2617 : 					}

	jmp	$LN42@ParseImage
$LN41@ParseImage:

; 2618 : 
; 2619 : 					if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN34@ParseImage

; 2620 : 					{
; 2621 : 						Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2622 : 						if(script_[Idx_] == '"') // string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 34					; 00000022H
	jne	$LN33@ParseImage

; 2623 : 						{
; 2624 : 							tokenlen_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2625 : 							str_=&script_[Idx_+tokenlen_];

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx
$LN32@ParseImage:

; 2626 : 							// Find closing (")
; 2627 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	SHORT $LN31@ParseImage
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN31@ParseImage

; 2628 : 							{
; 2629 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN30@ParseImage

; 2630 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2631 : 								else

	jmp	SHORT $LN29@ParseImage
$LN30@ParseImage:

; 2632 : 								{
; 2633 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN28@ParseImage

; 2634 : 									{
; 2635 : 										Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2636 : 										Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 2637 : 									}
; 2638 : 									else

	jmp	SHORT $LN29@ParseImage
$LN28@ParseImage:

; 2639 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN29@ParseImage:

; 2640 : 								}
; 2641 : 							}

	jmp	SHORT $LN32@ParseImage
$LN31@ParseImage:

; 2642 : 							if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN26@ParseImage

; 2643 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+eax], 0
$LN26@ParseImage:

; 2644 : 							Idx_+=tokenlen_+1;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2645 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	$LN34@ParseImage
$LN33@ParseImage:

; 2646 : 						}
; 2647 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN23@ParseImage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 45					; 0000002dH
	jne	$LN24@ParseImage
$LN23@ParseImage:

; 2648 : 						{
; 2649 : 							// find white space
; 2650 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2651 : 							tokenlen_=1;

	mov	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN22@ParseImage:

; 2652 : 							while(!Found)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN21@ParseImage

; 2653 : 							{
; 2654 : 								switch(script_[Idx_ + tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv347[ebp], ecx
	mov	edx, DWORD PTR tv347[ebp]
	sub	edx, 9
	mov	DWORD PTR tv347[ebp], edx
	cmp	DWORD PTR tv347[ebp], 35		; 00000023H
	ja	SHORT $LN17@ParseImage
	mov	eax, DWORD PTR tv347[ebp]
	movzx	ecx, BYTE PTR $LN82@ParseImage[eax]
	jmp	DWORD PTR $LN88@ParseImage[ecx*4]
$LN18@ParseImage:

; 2655 : 								{
; 2656 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2657 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2658 : 										break;

	jmp	SHORT $LN19@ParseImage
$LN17@ParseImage:

; 2659 : 									default:
; 2660 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN19@ParseImage:

; 2661 : 										break;
; 2662 : 								}
; 2663 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN16@ParseImage

; 2664 : 								{
; 2665 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2666 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2667 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN16@ParseImage:

; 2668 : 								}
; 2669 : 							}

	jmp	$LN22@ParseImage
$LN21@ParseImage:

; 2670 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN15@ParseImage
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	cmp	ecx, 12					; 0000000cH
	jge	SHORT $LN15@ParseImage

; 2671 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	_atol
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [edx+958]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+958]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx
$LN15@ParseImage:

; 2672 : 
; 2673 : 							Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 2674 : 							tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2675 : 						}
; 2676 : 						else

	jmp	$LN34@ParseImage
$LN24@ParseImage:

; 2677 : 						{
; 2678 : 							// Look for ID in tables
; 2679 : 							// Look for white space
; 2680 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2681 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN13@ParseImage:

; 2682 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN12@ParseImage
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN12@ParseImage

; 2683 : 							{
; 2684 : 								switch(script_[Idx_+tokenlen_])

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv401[ebp], edx
	mov	eax, DWORD PTR tv401[ebp]
	sub	eax, 9
	mov	DWORD PTR tv401[ebp], eax
	cmp	DWORD PTR tv401[ebp], 35		; 00000023H
	ja	SHORT $LN8@ParseImage
	mov	ecx, DWORD PTR tv401[ebp]
	movzx	edx, BYTE PTR $LN83@ParseImage[ecx]
	jmp	DWORD PTR $LN89@ParseImage[edx*4]
$LN9@ParseImage:

; 2685 : 								{
; 2686 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2687 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2688 : 										break;

	jmp	SHORT $LN10@ParseImage
$LN8@ParseImage:

; 2689 : 									default:
; 2690 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN10@ParseImage:

; 2691 : 										break;
; 2692 : 								}
; 2693 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN7@ParseImage

; 2694 : 								{
; 2695 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2696 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2697 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN7@ParseImage:

; 2698 : 								}
; 2699 : 							}

	jmp	$LN13@ParseImage
$LN12@ParseImage:

; 2700 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN6@ParseImage
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	cmp	edx, 12					; 0000000cH
	jge	SHORT $LN6@ParseImage

; 2701 : 							{
; 2702 : 								script_[Idx_+tokenlen_]=0;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0

; 2703 : 								ImageID=FindID(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	DWORD PTR _ImageID$[ebp], eax

; 2704 : 								if(ImageID == -1)

	cmp	DWORD PTR _ImageID$[ebp], -1
	jne	SHORT $LN5@ParseImage

; 2705 : 									ImageID=AddNewID(&script_[Idx_],_START_BASE_ID_);

	push	3500000					; 003567e0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddNewID@C_Parser@@QAEJPADJ@Z		; C_Parser::AddNewID
	mov	DWORD PTR _ImageID$[ebp], eax
$LN5@ParseImage:

; 2706 : 								P_[P_Idx_++]=ImageID;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ImageID$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+958]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx
$LN6@ParseImage:

; 2707 : 							}
; 2708 : 							Idx_+=tokenlen_+1;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2709 : 							tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN34@ParseImage:

; 2710 : 						}
; 2711 : 					}
; 2712 : 				}

	jmp	$LN44@ParseImage
$LN43@ParseImage:

; 2713 : 				break;

	jmp	$LN65@ParseImage
$LN4@ParseImage:

; 2714 : 			case SECTION_PROCESSPARAMS:
; 2715 : 				if(TokenType == 1)

	cmp	DWORD PTR _TokenType$[ebp], 1
	jne	SHORT $LN3@ParseImage

; 2716 : 					Image_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	movzx	edx, WORD PTR _TokenID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	?LocalFunction@C_Image@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Image::LocalFunction
	jmp	SHORT $LN2@ParseImage
$LN3@ParseImage:

; 2717 : 				else if(TokenType == 2)

	cmp	DWORD PTR _TokenType$[ebp], 2
	jne	SHORT $LN2@ParseImage

; 2718 : 					Anim_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	movzx	eax, WORD PTR _TokenID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	call	?LocalFunction@C_Animation@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Animation::LocalFunction
$LN2@ParseImage:

; 2719 : 				TokenType=0;

	mov	DWORD PTR _TokenType$[ebp], 0

; 2720 : 				P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 2721 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0

; 2722 : 				str_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0

; 2723 : 				Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0
$LN65@ParseImage:

; 2724 : 				break;
; 2725 : 		}
; 2726 : 	}

	jmp	$LN68@ParseImage
$LN67@ParseImage:

; 2727 : 	return(Image_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+80]
$LN72@ParseImage:

; 2728 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN85@ParseImage:
	DD	$LN64@ParseImage
	DD	$LN48@ParseImage
	DD	$LN65@ParseImage
	DD	$LN65@ParseImage
	DD	$LN45@ParseImage
	DD	$LN4@ParseImage
$LN86@ParseImage:
	DD	$LN55@ParseImage
	DD	$LN57@ParseImage
	DD	$LN56@ParseImage
	DD	$LN59@ParseImage
	DD	$LN54@ParseImage
$LN80@ParseImage:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN87@ParseImage:
	DD	$LN38@ParseImage
	DD	$LN37@ParseImage
	DD	$LN36@ParseImage
$LN81@ParseImage:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN88@ParseImage:
	DD	$LN18@ParseImage
	DD	$LN17@ParseImage
$LN82@ParseImage:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN89@ParseImage:
	DD	$LN9@ParseImage
	DD	$LN8@ParseImage
$LN83@ParseImage:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z ENDP		; C_Parser::ParseImage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
tv184 = -44						; size = 4
_TokenType$ = -40					; size = 4
tv72 = -36						; size = 4
_TokenID$ = -32						; size = 4
_Found$ = -28						; size = 4
_Comment$ = -24						; size = 4
_InString$ = -20					; size = 4
tv81 = -16						; size = 4
_Section$ = -12						; size = 4
_Done$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?ParseWindow@C_Parser@@QAEPAVC_Window@@PAD@Z PROC	; C_Parser::ParseWindow
; _this$ = ecx

; 2270 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 	long Done=0,Comment=0,Found=0,InString=0;//!,Finished=0;;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0

; 2272 : 	long TokenID=0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 2273 : 
; 2274 : 	if(LoadScript(filename) == FALSE)

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN28@ParseWindo

; 2275 : 		return(FALSE);

	xor	eax, eax
	jmp	$LN29@ParseWindo
$LN28@ParseWindo:

; 2276 : 
; 2277 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 2278 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 2279 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2280 : 
; 2281 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 2282 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2283 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 2284 : 	Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2285 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN27@ParseWindo:

; 2286 : 
; 2287 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN26@ParseWindo

; 2288 : 	{
; 2289 : 		switch(Section)

	mov	eax, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 0
	je	SHORT $LN23@ParseWindo
	cmp	DWORD PTR tv72[ebp], 1
	je	$LN7@ParseWindo
	jmp	$LN24@ParseWindo
$LN23@ParseWindo:

; 2290 : 		{
; 2291 : 			case SECTION_FINDTOKEN:
; 2292 : 			// Look for token starting with '['
; 2293 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN22@ParseWindo:

; 2294 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN21@ParseWindo
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN21@ParseWindo

; 2295 : 				{
; 2296 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv81[ebp], edx
	mov	eax, DWORD PTR tv81[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 81			; 00000051H
	ja	SHORT $LN13@ParseWindo
	mov	ecx, DWORD PTR tv81[ebp]
	movzx	edx, BYTE PTR $LN31@ParseWindo[ecx]
	jmp	DWORD PTR $LN32@ParseWindo[edx*4]
$LN18@ParseWindo:

; 2297 : 					{
; 2298 : 						case '[':
; 2299 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN17@ParseWindo
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN17@ParseWindo

; 2300 : 							{
; 2301 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2302 : 								break;

	jmp	SHORT $LN19@ParseWindo
$LN17@ParseWindo:

; 2303 : 							}
; 2304 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2305 : 							break;

	jmp	SHORT $LN19@ParseWindo
$LN16@ParseWindo:

; 2306 : 						case '"':
; 2307 : 							InString=1-InString;

	mov	eax, 1
	sub	eax, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], eax

; 2308 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2309 : 							break;

	jmp	SHORT $LN19@ParseWindo
$LN15@ParseWindo:

; 2310 : 						case '#':
; 2311 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 2312 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2313 : 							break;

	jmp	SHORT $LN19@ParseWindo
$LN14@ParseWindo:

; 2314 : 						case 0x0a: case 0x0d:
; 2315 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2316 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2317 : 							break;

	jmp	SHORT $LN19@ParseWindo
$LN13@ParseWindo:

; 2318 : 						default:
; 2319 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN19@ParseWindo:

; 2320 : 					}
; 2321 : 					if((Idx_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN12@ParseWindo

; 2322 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN12@ParseWindo:

; 2323 : 				}

	jmp	$LN22@ParseWindo
$LN21@ParseWindo:

; 2324 : 							
; 2325 : 				tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN11@ParseWindo:

; 2326 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN10@ParseWindo
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN10@ParseWindo

; 2327 : 					tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	SHORT $LN11@ParseWindo
$LN10@ParseWindo:

; 2328 : 				tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2329 : 
; 2330 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN9@ParseWindo

; 2331 : 				{
; 2332 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 2333 : 					break;

	jmp	$LN24@ParseWindo
$LN9@ParseWindo:

; 2334 : 				}
; 2335 : 
; 2336 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN8@ParseWindo

; 2337 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN8@ParseWindo:

; 2338 : 				break;

	jmp	$LN24@ParseWindo
$LN7@ParseWindo:

; 2339 : 			case SECTION_PROCESSTOKEN:
; 2340 : 				TokenID=FindToken(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 2341 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN6@ParseWindo

; 2342 : 				{
; 2343 : 					switch(TokenID)

	mov	eax, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv184[ebp], eax
	cmp	DWORD PTR tv184[ebp], 1
	je	SHORT $LN3@ParseWindo
	jmp	SHORT $LN2@ParseWindo
$LN3@ParseWindo:

; 2344 : 					{
; 2345 : 						case CPARSE_WINDOW:
; 2346 : 							return(WindowParser());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowParser@C_Parser@@AAEPAVC_Window@@XZ ; C_Parser::WindowParser
	jmp	SHORT $LN29@ParseWindo

; 2347 : 							break;

	jmp	SHORT $LN4@ParseWindo
$LN2@ParseWindo:

; 2348 : 						default:
; 2349 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2350 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2351 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0
$LN4@ParseWindo:

; 2352 : 							break;
; 2353 : 					}
; 2354 : 				}
; 2355 : 				else

	jmp	SHORT $LN24@ParseWindo
$LN6@ParseWindo:

; 2356 : 				{
; 2357 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2358 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2359 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN24@ParseWindo:

; 2360 : 				}
; 2361 : 				break;
; 2362 : 		}
; 2363 : 	}

	jmp	$LN27@ParseWindo
$LN26@ParseWindo:

; 2364 : 	return(NULL);

	xor	eax, eax
$LN29@ParseWindo:

; 2365 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN32@ParseWindo:
	DD	$LN14@ParseWindo
	DD	$LN16@ParseWindo
	DD	$LN15@ParseWindo
	DD	$LN18@ParseWindo
	DD	$LN13@ParseWindo
$LN31@ParseWindo:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ParseWindow@C_Parser@@QAEPAVC_Window@@PAD@Z ENDP	; C_Parser::ParseWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_TokenType$ = -44					; size = 4
tv72 = -40						; size = 4
_TokenID$ = -36						; size = 4
tv184 = -32						; size = 4
_Found$ = -28						; size = 4
_Comment$ = -24						; size = 4
_InString$ = -20					; size = 4
tv81 = -16						; size = 4
_Section$ = -12						; size = 4
_Done$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?ParseControl@C_Parser@@QAEPAVC_Base@@PAD@Z PROC	; C_Parser::ParseControl
; _this$ = ecx

; 2368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 2369 : 	long Done=0,Comment=0,Found=0,InString=0;//!,Finished=0;;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0

; 2370 : 	long TokenID=0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 2371 : 
; 2372 : 	if(LoadScript(filename) == FALSE)

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN27@ParseContr

; 2373 : 		return(FALSE);

	xor	eax, eax
	jmp	$LN28@ParseContr
$LN27@ParseContr:

; 2374 : 
; 2375 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 2376 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 2377 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2378 : 
; 2379 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 2380 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2381 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 2382 : 	Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2383 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN26@ParseContr:

; 2384 : 
; 2385 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN25@ParseContr

; 2386 : 	{
; 2387 : 		switch(Section)

	mov	eax, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 0
	je	SHORT $LN22@ParseContr
	cmp	DWORD PTR tv72[ebp], 1
	je	$LN6@ParseContr
	jmp	$LN23@ParseContr
$LN22@ParseContr:

; 2388 : 		{
; 2389 : 			case SECTION_FINDTOKEN:
; 2390 : 			// Look for token starting with '['
; 2391 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN21@ParseContr:

; 2392 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN20@ParseContr
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN20@ParseContr

; 2393 : 				{
; 2394 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv81[ebp], edx
	mov	eax, DWORD PTR tv81[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 81			; 00000051H
	ja	SHORT $LN12@ParseContr
	mov	ecx, DWORD PTR tv81[ebp]
	movzx	edx, BYTE PTR $LN30@ParseContr[ecx]
	jmp	DWORD PTR $LN32@ParseContr[edx*4]
$LN17@ParseContr:

; 2395 : 					{
; 2396 : 						case '[':
; 2397 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN16@ParseContr
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN16@ParseContr

; 2398 : 							{
; 2399 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2400 : 								break;

	jmp	SHORT $LN18@ParseContr
$LN16@ParseContr:

; 2401 : 							}
; 2402 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2403 : 							break;

	jmp	SHORT $LN18@ParseContr
$LN15@ParseContr:

; 2404 : 						case '"':
; 2405 : 							InString=1-InString;

	mov	eax, 1
	sub	eax, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], eax

; 2406 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2407 : 							break;

	jmp	SHORT $LN18@ParseContr
$LN14@ParseContr:

; 2408 : 						case '#':
; 2409 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 2410 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2411 : 							break;

	jmp	SHORT $LN18@ParseContr
$LN13@ParseContr:

; 2412 : 						case 0x0a: case 0x0d:
; 2413 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2414 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2415 : 							break;

	jmp	SHORT $LN18@ParseContr
$LN12@ParseContr:

; 2416 : 						default:
; 2417 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN18@ParseContr:

; 2418 : 					}
; 2419 : 					if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN11@ParseContr

; 2420 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN11@ParseContr:

; 2421 : 				}

	jmp	$LN21@ParseContr
$LN20@ParseContr:

; 2422 : 							
; 2423 : 				tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN10@ParseContr:

; 2424 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN9@ParseContr
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN9@ParseContr

; 2425 : 					tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	SHORT $LN10@ParseContr
$LN9@ParseContr:

; 2426 : 				tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2427 : 
; 2428 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN8@ParseContr

; 2429 : 				{
; 2430 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 2431 : 					break;

	jmp	$LN23@ParseContr
$LN8@ParseContr:

; 2432 : 				}
; 2433 : 
; 2434 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN7@ParseContr

; 2435 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN7@ParseContr:

; 2436 : 				break;

	jmp	$LN23@ParseContr
$LN6@ParseContr:

; 2437 : 			case SECTION_PROCESSTOKEN:
; 2438 : 				TokenID=FindToken(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 2439 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN5@ParseContr

; 2440 : 				{
; 2441 : 					switch(TokenID)

	mov	eax, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv184[ebp], ecx
	cmp	DWORD PTR tv184[ebp], 24		; 00000018H
	ja	SHORT $LN3@ParseContr
	mov	edx, DWORD PTR tv184[ebp]
	movzx	eax, BYTE PTR $LN31@ParseContr[edx]
	jmp	DWORD PTR $LN33@ParseContr[eax*4]
$LN2@ParseContr:

; 2442 : 					{
; 2443 : 						case CPARSE_BUTTON:
; 2444 : 						case CPARSE_TEXT:
; 2445 : 						case CPARSE_BOX:
; 2446 : 						case CPARSE_LINE:
; 2447 : 						case CPARSE_CLOCK:
; 2448 : 						case CPARSE_FILL:
; 2449 : 						case CPARSE_TREE:
; 2450 : 						case CPARSE_EDITBOX:
; 2451 : 						case CPARSE_LISTBOX:
; 2452 : 						//case CPARSE_ACMI:
; 2453 : 						case CPARSE_PANNER:
; 2454 : 						case CPARSE_SLIDER:
; 2455 : 						case CPARSE_SCROLLBAR:
; 2456 : 						case CPARSE_TREELIST:
; 2457 : 						case CPARSE_BITMAP:
; 2458 : 						case CPARSE_TILE:
; 2459 : 						case CPARSE_ANIM:
; 2460 : 						case CPARSE_CURSOR:
; 2461 : 						case CPARSE_MARQUE:
; 2462 : 						case CPARSE_ANIMATION:
; 2463 : 							return(ControlParser());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ControlParser@C_Parser@@AAEPAVC_Base@@XZ ; C_Parser::ControlParser
	jmp	SHORT $LN28@ParseContr
$LN3@ParseContr:

; 2464 : 							break;
; 2465 : 					}
; 2466 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2467 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2468 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2469 : 				}
; 2470 : 				else

	jmp	SHORT $LN23@ParseContr
$LN5@ParseContr:

; 2471 : 				{
; 2472 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2473 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2474 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN23@ParseContr:

; 2475 : 				}
; 2476 : 				break;
; 2477 : 		}
; 2478 : 	}

	jmp	$LN26@ParseContr
$LN25@ParseContr:

; 2479 : 	return(NULL);

	xor	eax, eax
$LN28@ParseContr:

; 2480 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN32@ParseContr:
	DD	$LN13@ParseContr
	DD	$LN15@ParseContr
	DD	$LN14@ParseContr
	DD	$LN17@ParseContr
	DD	$LN12@ParseContr
$LN30@ParseContr:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN33@ParseContr:
	DD	$LN2@ParseContr
	DD	$LN3@ParseContr
$LN31@ParseContr:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	0
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
?ParseControl@C_Parser@@QAEPAVC_Base@@PAD@Z ENDP	; C_Parser::ParseControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 4
tv80 = -68						; size = 4
tv75 = -64						; size = 4
$T3 = -60						; size = 4
tv301 = -56						; size = 4
tv244 = -52						; size = 4
tv128 = -48						; size = 4
_Bite$ = -44						; size = 4
_this$ = -40						; size = 4
_InString$ = -36					; size = 2
_Done$ = -32						; size = 2
_Comment$ = -28						; size = 2
_Section$ = -24						; size = 2
_Finished$ = -20					; size = 2
_Found$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z PROC	; C_Parser::ParseSoundBite
; _this$ = ecx

; 4098 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4099 : 	C_SoundBite *Bite=NULL;

	mov	DWORD PTR _Bite$[ebp], 0

; 4100 : 	short Done=0,Comment=0,Found=0,InString=0,Finished=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _InString$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Finished$[ebp], cx

; 4101 : 	short Section=0;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx

; 4102 : 
; 4103 : 	if(LoadScript(filename) == FALSE)

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN52@ParseSound

; 4104 : 		return(NULL);

	xor	eax, eax
	jmp	$LN53@ParseSound
$LN52@ParseSound:

; 4105 : 
; 4106 : 	Bite=new C_SoundBite;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN55@ParseSound
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_SoundBite@@QAE@XZ			; C_SoundBite::C_SoundBite
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN56@ParseSound
$LN55@ParseSound:
	mov	DWORD PTR tv75[ebp], 0
$LN56@ParseSound:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _Bite$[ebp], edx

; 4107 : 	if(!Bite)

	cmp	DWORD PTR _Bite$[ebp], 0
	jne	SHORT $LN51@ParseSound

; 4108 : 		return(NULL);

	xor	eax, eax
	jmp	$LN53@ParseSound
$LN51@ParseSound:

; 4109 : 	Bite->Setup();

	mov	ecx, DWORD PTR _Bite$[ebp]
	call	?Setup@C_SoundBite@@QAEXXZ		; C_SoundBite::Setup

; 4110 : 
; 4111 : 	Done=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax

; 4112 : 	Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 4113 : 	InString=0;

	xor	edx, edx
	mov	WORD PTR _InString$[ebp], dx

; 4114 : 	Section=SECTION_FINDPARAMS;

	mov	eax, 4
	mov	WORD PTR _Section$[ebp], ax
$LN50@ParseSound:

; 4115 : 
; 4116 : 	while(!Done)

	movsx	ecx, WORD PTR _Done$[ebp]
	test	ecx, ecx
	jne	$LN49@ParseSound

; 4117 : 	{
; 4118 : 		switch(Section)

	movsx	edx, WORD PTR _Section$[ebp]
	mov	DWORD PTR tv80[ebp], edx
	cmp	DWORD PTR tv80[ebp], 4
	je	SHORT $LN46@ParseSound
	cmp	DWORD PTR tv80[ebp], 5
	je	$LN3@ParseSound
	jmp	$LN47@ParseSound
$LN46@ParseSound:

; 4119 : 		{
; 4120 : 			case SECTION_FINDPARAMS:
; 4121 : 				P_Idx_=0; // start with 0 parameters

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 4122 : 
; 4123 : 				// Repeat until token char '[' found (or EOF)
; 4124 : 				Finished=0;

	xor	edx, edx
	mov	WORD PTR _Finished$[ebp], dx
$LN45@ParseSound:

; 4125 : 				while(!Finished)

	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN44@ParseSound

; 4126 : 				{
; 4127 : 					// Find NON white space
; 4128 : 					Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN43@ParseSound:

; 4129 : 					while(!Found && !Done && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN42@ParseSound
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN42@ParseSound
	movsx	ecx, WORD PTR _Finished$[ebp]
	test	ecx, ecx
	jne	$LN42@ParseSound

; 4130 : 					{
; 4131 : 						switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv128[ebp], ecx
	cmp	DWORD PTR tv128[ebp], 35		; 00000023H
	ja	SHORT $LN36@ParseSound
	mov	edx, DWORD PTR tv128[ebp]
	movzx	eax, BYTE PTR $LN58@ParseSound[edx]
	jmp	DWORD PTR $LN62@ParseSound[eax*4]
$LN39@ParseSound:

; 4132 : 						{
; 4133 : 							case ' ': case ',': case 0x09: 
; 4134 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 4135 : 								break;

	jmp	SHORT $LN40@ParseSound
$LN38@ParseSound:

; 4136 : 							case 0x0a: case 0x0d:
; 4137 : 								Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 4138 : 								Finished=1;

	mov	edx, 1
	mov	WORD PTR _Finished$[ebp], dx

; 4139 : 								Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax

; 4140 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 4141 : 								break;

	jmp	SHORT $LN40@ParseSound
$LN37@ParseSound:

; 4142 : 							case '#': // Comment
; 4143 : 								Comment=1;

	mov	ecx, 1
	mov	WORD PTR _Comment$[ebp], cx

; 4144 : 								Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 4145 : 								break;

	jmp	SHORT $LN40@ParseSound
$LN36@ParseSound:

; 4146 : 							default:
; 4147 : 								if(!Comment)

	movsx	edx, WORD PTR _Comment$[ebp]
	test	edx, edx
	jne	SHORT $LN35@ParseSound

; 4148 : 								{
; 4149 : 									Found=1;

	mov	eax, 1
	mov	WORD PTR _Found$[ebp], ax

; 4150 : 									break;

	jmp	SHORT $LN40@ParseSound
$LN35@ParseSound:

; 4151 : 								}
; 4152 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN40@ParseSound:

; 4153 : 								break;
; 4154 : 						}
; 4155 : 						if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN34@ParseSound

; 4156 : 						{
; 4157 : 							Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 4158 : 							Section=SECTION_PROCESSPARAMS;

	mov	edx, 5
	mov	WORD PTR _Section$[ebp], dx
$LN34@ParseSound:

; 4159 : 						}
; 4160 : 					}

	jmp	$LN43@ParseSound
$LN42@ParseSound:

; 4161 : 
; 4162 : 					if(Found)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	je	$LN33@ParseSound

; 4163 : 					{
; 4164 : 						Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx

; 4165 : 						if(script_[Idx_] == '"') // string

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	$LN32@ParseSound

; 4166 : 						{
; 4167 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 4168 : 							str_=&script_[Idx_+tokenlen_];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN31@ParseSound:

; 4169 : 							// Find closing (")
; 4170 : 							while(!Found && !Finished)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	jne	SHORT $LN30@ParseSound
	movsx	edx, WORD PTR _Finished$[ebp]
	test	edx, edx
	jne	SHORT $LN30@ParseSound

; 4171 : 							{
; 4172 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN29@ParseSound

; 4173 : 									Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 4174 : 								else

	jmp	SHORT $LN28@ParseSound
$LN29@ParseSound:

; 4175 : 								{
; 4176 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN27@ParseSound

; 4177 : 									{
; 4178 : 										Finished=1;

	mov	eax, 1
	mov	WORD PTR _Finished$[ebp], ax

; 4179 : 										Section=SECTION_PROCESSPARAMS;

	mov	ecx, 5
	mov	WORD PTR _Section$[ebp], cx

; 4180 : 									}
; 4181 : 									else

	jmp	SHORT $LN28@ParseSound
$LN27@ParseSound:

; 4182 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN28@ParseSound:

; 4183 : 								}
; 4184 : 							}

	jmp	SHORT $LN31@ParseSound
$LN30@ParseSound:

; 4185 : 							if(Found)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	je	SHORT $LN25@ParseSound

; 4186 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0
$LN25@ParseSound:

; 4187 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 4188 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	$LN33@ParseSound
$LN32@ParseSound:

; 4189 : 						}
; 4190 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@ParseSound
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 45					; 0000002dH
	jne	$LN23@ParseSound
$LN22@ParseSound:

; 4191 : 						{
; 4192 : 							// find white space
; 4193 : 							Found=0;

	xor	eax, eax
	mov	WORD PTR _Found$[ebp], ax

; 4194 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN21@ParseSound:

; 4195 : 							while(!Found)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	jne	$LN20@ParseSound

; 4196 : 							{
; 4197 : 								switch(script_[Idx_ + tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv244[ebp], ecx
	mov	edx, DWORD PTR tv244[ebp]
	sub	edx, 9
	mov	DWORD PTR tv244[ebp], edx
	cmp	DWORD PTR tv244[ebp], 35		; 00000023H
	ja	SHORT $LN16@ParseSound
	mov	eax, DWORD PTR tv244[ebp]
	movzx	ecx, BYTE PTR $LN59@ParseSound[eax]
	jmp	DWORD PTR $LN63@ParseSound[ecx*4]
$LN17@ParseSound:

; 4198 : 								{
; 4199 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 4200 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 4201 : 										break;

	jmp	SHORT $LN18@ParseSound
$LN16@ParseSound:

; 4202 : 									default:
; 4203 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN18@ParseSound:

; 4204 : 										break;
; 4205 : 								}
; 4206 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN15@ParseSound

; 4207 : 								{
; 4208 : 									Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 4209 : 									Finished=1;

	mov	edx, 1
	mov	WORD PTR _Finished$[ebp], dx

; 4210 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN15@ParseSound:

; 4211 : 								}
; 4212 : 							}

	jmp	$LN21@ParseSound
$LN20@ParseSound:

; 4213 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	SHORT $LN14@ParseSound
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN14@ParseSound

; 4214 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN14@ParseSound:

; 4215 : 
; 4216 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 4217 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 4218 : 						}
; 4219 : 						else

	jmp	$LN33@ParseSound
$LN23@ParseSound:

; 4220 : 						{
; 4221 : 							// Look for ID in tables
; 4222 : 							// Look for white space
; 4223 : 							Found=0;

	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx

; 4224 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN12@ParseSound:

; 4225 : 							while(!Found && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN11@ParseSound
	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN11@ParseSound

; 4226 : 							{
; 4227 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv301[ebp], ecx
	mov	edx, DWORD PTR tv301[ebp]
	sub	edx, 9
	mov	DWORD PTR tv301[ebp], edx
	cmp	DWORD PTR tv301[ebp], 35		; 00000023H
	ja	SHORT $LN7@ParseSound
	mov	eax, DWORD PTR tv301[ebp]
	movzx	ecx, BYTE PTR $LN60@ParseSound[eax]
	jmp	DWORD PTR $LN64@ParseSound[ecx*4]
$LN8@ParseSound:

; 4228 : 								{
; 4229 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 4230 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 4231 : 										break;

	jmp	SHORT $LN9@ParseSound
$LN7@ParseSound:

; 4232 : 									default:
; 4233 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN9@ParseSound:

; 4234 : 										break;
; 4235 : 								}
; 4236 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN6@ParseSound

; 4237 : 								{
; 4238 : 									Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 4239 : 									Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 4240 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN6@ParseSound:

; 4241 : 								}
; 4242 : 							}

	jmp	$LN12@ParseSound
$LN11@ParseSound:

; 4243 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	$LN5@ParseSound
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	$LN5@ParseSound

; 4244 : 							{
; 4245 : 								script_[Idx_+tokenlen_]=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	BYTE PTR [eax+edx], 0

; 4246 : 								P_[P_Idx_++]=FindID(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 4247 : 								if(P_[P_Idx_-1] < 0 && strcmp(&script_[Idx_],"NID"))

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+8], 0
	jge	SHORT $LN5@ParseSound
	push	OFFSET ??_C@_03EOCODDKD@NID?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@ParseSound

; 4248 : 									TokenErrorList->AddText(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?AddText@C_Hash@@QAEJPBD@Z		; C_Hash::AddText
$LN5@ParseSound:

; 4249 : 							}
; 4250 : 							Idx_+=tokenlen_+1;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 4251 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN33@ParseSound:

; 4252 : 						}
; 4253 : 					}
; 4254 : 				}

	jmp	$LN45@ParseSound
$LN44@ParseSound:

; 4255 : 				break;

	jmp	$LN47@ParseSound
$LN3@ParseSound:

; 4256 : 			case SECTION_PROCESSPARAMS:
; 4257 : 				if(P_Idx_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	test	edx, edx
	je	SHORT $LN2@ParseSound

; 4258 : 					Bite->Add(P_[0],P_[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	ecx, DWORD PTR _Bite$[ebp]
	call	?Add@C_SoundBite@@QAEXJJ@Z		; C_SoundBite::Add
$LN2@ParseSound:

; 4259 : 				P_Idx_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 4260 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0

; 4261 : 				str_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 4262 : 				if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN1@ParseSound

; 4263 : 					Done=1;

	mov	ecx, 1
	mov	WORD PTR _Done$[ebp], cx
$LN1@ParseSound:

; 4264 : 				Section=SECTION_FINDPARAMS;

	mov	edx, 4
	mov	WORD PTR _Section$[ebp], dx
$LN47@ParseSound:

; 4265 : 				break;
; 4266 : 		}
; 4267 : 	}

	jmp	$LN50@ParseSound
$LN49@ParseSound:

; 4268 : 	return(Bite);

	mov	eax, DWORD PTR _Bite$[ebp]
$LN53@ParseSound:

; 4269 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN62@ParseSound:
	DD	$LN39@ParseSound
	DD	$LN38@ParseSound
	DD	$LN37@ParseSound
	DD	$LN36@ParseSound
$LN58@ParseSound:
	DB	0
	DB	1
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
$LN63@ParseSound:
	DD	$LN17@ParseSound
	DD	$LN16@ParseSound
$LN59@ParseSound:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN64@ParseSound:
	DD	$LN8@ParseSound
	DD	$LN7@ParseSound
$LN60@ParseSound:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseSoundBite@C_Parser@@QAEPAVC_SoundBite@@PAD@Z ENDP	; C_Parser::ParseSoundBite
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_Menu$ = -28						; size = 4
_ifp$ = -24						; size = 4
_listfile$ = -20					; size = 4
_size$ = -16						; size = 4
_lfp$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadPopupMenuList@C_Parser@@QAEHPAD@Z PROC		; C_Parser::LoadPopupMenuList
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	UI_HANDLE ifp;
; 888  : 	long size;
; 889  : 	char *listfile,*lfp;
; 890  : 	long i;
; 891  : 	C_PopupList *Menu;
; 892  : 
; 893  : 	if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN28@LoadPopupM

; 894  : 	    if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN28@LoadPopupM

; 895  : 		fprintf(Perror_,"LoadPopupMenuList processing (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@PLJJBFFH@LoadPopupMenuList?5processing?5?$CI?$CFs@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN28@LoadPopupM:

; 896  : 	}
; 897  : #if 0
; 898  : 	strcpy(filebuf,FalconUIArtDirectory);
; 899  : 	strcat(filebuf,"\\");
; 900  : 	strcat(filebuf,filename);
; 901  : 	ifp=UI_OPEN(filebuf,"rb");
; 902  : #endif
; 903  : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory, 0);

	push	0
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 904  : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN26@LoadPopupM

; 905  : 	{
; 906  : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN25@LoadPopupM

; 907  : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN25@LoadPopupM

; 908  : 		    fprintf(Perror_,"LoadPopupMenuList open failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CE@KGBKKOGI@LoadPopupMenuList?5open?5failed?5?$CI?$CF@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN25@LoadPopupM:

; 909  : 	    }
; 910  : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN29@LoadPopupM
$LN26@LoadPopupM:

; 911  : 	}
; 912  : 
; 913  : 	size=UI_FILESIZE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 914  : 
; 915  : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN23@LoadPopupM

; 916  : 	{
; 917  : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN22@LoadPopupM

; 918  : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN22@LoadPopupM

; 919  : 		    fprintf(Perror_,"LoadPopupMenuList seek start failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CK@KGFPMJFG@LoadPopupMenuList?5seek?5start?5fai@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN22@LoadPopupM:

; 920  : 	    }
; 921  : 
; 922  : 		UI_CLOSE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 923  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN29@LoadPopupM
$LN23@LoadPopupM:

; 924  : 	}
; 925  : 
; 926  : 	listfile=new char [size+5]; // just in case :)

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 5
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _listfile$[ebp], ecx

; 927  : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _listfile$[ebp]
	push	ecx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN20@LoadPopupM

; 928  : 	{
; 929  : 	    if (g_bLogUiErrors) {

	movzx	edx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	edx, edx
	je	SHORT $LN19@LoadPopupM

; 930  : 		if(Perror_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+952], 0
	je	SHORT $LN19@LoadPopupM

; 931  : 		    fprintf(Perror_,"LoadPopupMenuList read failed (%s)\n",filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@CLNDHJPL@LoadPopupMenuList?5read?5failed?5?$CI?$CF@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN19@LoadPopupM:

; 932  : 	    }
; 933  : 	    delete listfile;

	mov	ecx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 934  : 		UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 935  : 		return(FALSE);

	xor	eax, eax
	jmp	$LN29@LoadPopupM
$LN20@LoadPopupM:

; 936  : 	}
; 937  : 	listfile[size]=0;

	mov	ecx, DWORD PTR _listfile$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [ecx], 0

; 938  : 
; 939  : 	UI_CLOSE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 940  : 
; 941  : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@LoadPopupM
$LN16@LoadPopupM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@LoadPopupM:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN15@LoadPopupM

; 942  : 		if(listfile[i] < 32)

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN14@LoadPopupM

; 943  : 			listfile[i]=0;

	mov	ecx, DWORD PTR _listfile$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
$LN14@LoadPopupM:

; 944  : 
; 945  : 	lfp=listfile;

	jmp	SHORT $LN16@LoadPopupM
$LN15@LoadPopupM:
	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], edx

; 946  : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN13@LoadPopupM:

; 947  : 	while(i < size)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	$LN12@LoadPopupM
$LN11@LoadPopupM:

; 948  : 	{
; 949  : 		while(!(*lfp) && i < size)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN10@LoadPopupM
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN10@LoadPopupM

; 950  : 		{
; 951  : 			lfp++;

	mov	ecx, DWORD PTR _lfp$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lfp$[ebp], ecx

; 952  : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 953  : 		}

	jmp	SHORT $LN11@LoadPopupM
$LN10@LoadPopupM:

; 954  : 		if(*lfp)

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN9@LoadPopupM

; 955  : 		{
; 956  : 		    if (g_bLogUiErrors) {

	movzx	edx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	edx, edx
	je	SHORT $LN8@LoadPopupM

; 957  : 			if(Perror_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+952], 0
	je	SHORT $LN8@LoadPopupM

; 958  : 			    fprintf(Perror_,"LoadPopupMenuList Parsing PopMenu (%s)\n",lfp);

	mov	ecx, DWORD PTR _lfp$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@FJKHPLBF@LoadPopupMenuList?5Parsing?5PopMen@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN8@LoadPopupM:

; 959  : 		    }
; 960  : 
; 961  : 			//strcpy(filebuf,FalconUIArtDirectory);
; 962  : 			//strcat(filebuf,"\\");
; 963  : 			//strcat(filebuf,lfp);
; 964  : 			Menu=(C_PopupList *)ParsePopupMenu(lfp);

	mov	ecx, DWORD PTR _lfp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParsePopupMenu@C_Parser@@QAEPAVC_Base@@PAD@Z ; C_Parser::ParsePopupMenu
	mov	DWORD PTR _Menu$[ebp], eax

; 965  : 			if(Menu)

	cmp	DWORD PTR _Menu$[ebp], 0
	je	SHORT $LN6@LoadPopupM

; 966  : 			    Popup_->AddMenu(Menu);

	mov	edx, DWORD PTR _Menu$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	?AddMenu@C_PopupMgr@@QAEXPAVC_PopupList@@@Z ; C_PopupMgr::AddMenu

; 967  : 			
; 968  : 			else

	jmp	SHORT $LN2@LoadPopupM
$LN6@LoadPopupM:

; 969  : 			{
; 970  : 			    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN2@LoadPopupM

; 971  : 				if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN2@LoadPopupM

; 972  : 				    fprintf(Perror_,"LoadPopupMenuList NO Popup Menu returned (%s)\n",lfp);

	mov	eax, DWORD PTR _lfp$[ebp]
	push	eax
	push	OFFSET ??_C@_0CP@GFPLFNHN@LoadPopupMenuList?5NO?5Popup?5Menu?5@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN2@LoadPopupM:

; 973  : 			    }
; 974  : 			}
; 975  : 
; 976  : 			while((*lfp) && i < size)

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN9@LoadPopupM
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN9@LoadPopupM

; 977  : 			{
; 978  : 				lfp++;

	mov	eax, DWORD PTR _lfp$[ebp]
	add	eax, 1
	mov	DWORD PTR _lfp$[ebp], eax

; 979  : 				i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 980  : 			}

	jmp	SHORT $LN2@LoadPopupM
$LN9@LoadPopupM:

; 981  : 		}
; 982  : 	}

	jmp	$LN13@LoadPopupM
$LN12@LoadPopupM:

; 983  : 	delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 984  : 	return(TRUE);

	mov	eax, 1
$LN29@LoadPopupM:

; 985  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadPopupMenuList@C_Parser@@QAEHPAD@Z ENDP		; C_Parser::LoadPopupMenuList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_ifp$ = -24						; size = 4
_listfile$ = -20					; size = 4
_lfp$ = -16						; size = 4
_size$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadImageList@C_Parser@@QAEHPAD@Z PROC			; C_Parser::LoadImageList
; _this$ = ecx

; 988  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 989  : 	UI_HANDLE ifp;
; 990  : 	long size;
; 991  : 	char *listfile,*lfp;
; 992  : 	long i;
; 993  : 
; 994  : #if 0
; 995  : 	strcpy(filebuf,FalconUIArtDirectory); // Falcon root
; 996  : 	if (g_bHiResUI)
; 997  : 		strcat(filebuf,"\\art1024");		// HiResUI
; 998  : 	else
; 999  : 		strcat(filebuf,"\\art");			// LoResUI
; 1000 : 	strcat(filebuf,"\\");
; 1001 : 	strcat(filebuf,filename);
; 1002 : 	ifp=UI_OPEN(filebuf,"rb");
; 1003 : #endif
; 1004 : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory);

	push	1
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 1005 : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN20@LoadImageL

; 1006 : 	{
; 1007 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN19@LoadImageL

; 1008 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN19@LoadImageL

; 1009 : 		    fprintf(Perror_,"LoadImageList open failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@OAOMCCII@LoadImageList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN19@LoadImageL:

; 1010 : 	    }
; 1011 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadImageL
$LN20@LoadImageL:

; 1012 : 	}
; 1013 : 	
; 1014 : 	size=UI_FILESIZE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 1015 : 
; 1016 : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN17@LoadImageL

; 1017 : 	{
; 1018 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN16@LoadImageL

; 1019 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN16@LoadImageL

; 1020 : 		    fprintf(Perror_,"LoadImageList seek start failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CG@BDBHDHEO@LoadImageList?5seek?5start?5failed?5@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN16@LoadImageL:

; 1021 : 	    }
; 1022 : 	    UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1023 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadImageL
$LN17@LoadImageL:

; 1024 : 	}
; 1025 : 
; 1026 : 	listfile=new char [size+5]; // just in case :)

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 5
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _listfile$[ebp], edx

; 1027 : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _listfile$[ebp]
	push	edx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN14@LoadImageL

; 1028 : 	{
; 1029 : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN13@LoadImageL

; 1030 : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN13@LoadImageL

; 1031 : 		    fprintf(Perror_,"LoadImageList read failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CA@GNCFPFBL@LoadImageList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN13@LoadImageL:

; 1032 : 	    }
; 1033 : 	    delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1034 : 		UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 1035 : 		return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadImageL
$LN14@LoadImageL:

; 1036 : 	}
; 1037 : 	listfile[size]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0

; 1038 : 
; 1039 : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1040 : 
; 1041 : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@LoadImageL
$LN10@LoadImageL:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@LoadImageL:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN9@LoadImageL

; 1042 : 		if(listfile[i] < 32)

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN8@LoadImageL

; 1043 : 			listfile[i]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 0
$LN8@LoadImageL:

; 1044 : 
; 1045 : 	lfp=listfile;

	jmp	SHORT $LN10@LoadImageL
$LN9@LoadImageL:
	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], eax

; 1046 : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN7@LoadImageL:

; 1047 : 	while(i < size)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN6@LoadImageL
$LN5@LoadImageL:

; 1048 : 	{
; 1049 : 		while(!(*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN4@LoadImageL
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@LoadImageL

; 1050 : 		{
; 1051 : 			lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 1052 : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1053 : 		}

	jmp	SHORT $LN5@LoadImageL
$LN4@LoadImageL:

; 1054 : 		if(*lfp)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@LoadImageL

; 1055 : 		{
; 1056 : 			//strcpy(filebuf,FalconUIArtDirectory);
; 1057 : 			//strcat(filebuf,"\\");
; 1058 : 			//strcat(filebuf,lfp);
; 1059 : 			ParseImage(lfp);

	mov	eax, DWORD PTR _lfp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseImage@C_Parser@@QAEPAVC_Image@@PAD@Z ; C_Parser::ParseImage
$LN2@LoadImageL:

; 1060 : 			while((*lfp) && i < size)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@LoadImageL
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@LoadImageL

; 1061 : 			{
; 1062 : 				lfp++;

	mov	ecx, DWORD PTR _lfp$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lfp$[ebp], ecx

; 1063 : 				i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1064 : 			}

	jmp	SHORT $LN2@LoadImageL
$LN3@LoadImageL:

; 1065 : 		}
; 1066 : 	}

	jmp	SHORT $LN7@LoadImageL
$LN6@LoadImageL:

; 1067 : 	delete listfile;

	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1068 : 	return(TRUE);

	mov	eax, 1
$LN21@LoadImageL:

; 1069 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadImageList@C_Parser@@QAEHPAD@Z ENDP			; C_Parser::LoadImageList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -300						; size = 4
$T2 = -296						; size = 4
$T3 = -292						; size = 4
_ifp$ = -288						; size = 4
_listfile$ = -284					; size = 4
_this$ = -280						; size = 4
_lfp$ = -276						; size = 4
_size$ = -272						; size = 4
_i$ = -268						; size = 4
_filebuf$4 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LoadMovieList@C_Parser@@QAEHPAD@Z PROC			; C_Parser::LoadMovieList
; _this$ = ecx

; 1241 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 	UI_HANDLE ifp;
; 1243 : 	long size;
; 1244 : 	char *listfile,*lfp;
; 1245 : 	long i;
; 1246 : 
; 1247 : #if 0
; 1248 : 	strcpy(filebuf,FalconUIArtDirectory); // Falcon root
; 1249 : 	if (g_bHiResUI)
; 1250 : 		strcat(filebuf,"\\art1024");		// HiResUI
; 1251 : 	else
; 1252 : 		strcat(filebuf,"\\art");			// LoResUI
; 1253 : 	strcat(filebuf,"\\");
; 1254 : 	strcat(filebuf,filename);
; 1255 : 	ifp=UI_OPEN(filebuf,"rb");
; 1256 : #endif
; 1257 : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory);

	push	1
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 1258 : 
; 1259 : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN20@LoadMovieL

; 1260 : 	{
; 1261 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN19@LoadMovieL

; 1262 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN19@LoadMovieL

; 1263 : 		    fprintf(Perror_,"LoadMovieList open failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@OGCDPDB@LoadMovieList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN19@LoadMovieL:

; 1264 : 	    }
; 1265 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadMovieL
$LN20@LoadMovieL:

; 1266 : 	}
; 1267 : 
; 1268 : 	size=UI_FILESIZE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 1269 : 	
; 1270 : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN17@LoadMovieL

; 1271 : 	{
; 1272 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN16@LoadMovieL

; 1273 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN16@LoadMovieL

; 1274 : 		    fprintf(Perror_,"LoadMovieList seek start failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CG@BIFIBKGC@LoadMovieList?5seek?5start?5failed?5@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN16@LoadMovieL:

; 1275 : 	    }
; 1276 : 	    UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1277 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadMovieL
$LN17@LoadMovieL:

; 1278 : 	}
; 1279 : 	
; 1280 : 	listfile=new char [size+5]; // just in case :)

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 5
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _listfile$[ebp], edx

; 1281 : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _listfile$[ebp]
	push	edx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN14@LoadMovieL

; 1282 : 	{
; 1283 : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN13@LoadMovieL

; 1284 : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN13@LoadMovieL

; 1285 : 		    fprintf(Perror_,"LoadMovieList read failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CA@IDKLOIKC@LoadMovieList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN13@LoadMovieL:

; 1286 : 	    }
; 1287 : 	    delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1288 : 	    UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 1289 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadMovieL
$LN14@LoadMovieL:

; 1290 : 	}
; 1291 : 	listfile[size]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0

; 1292 : 
; 1293 : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1294 : 
; 1295 : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@LoadMovieL
$LN10@LoadMovieL:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@LoadMovieL:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN9@LoadMovieL

; 1296 : 		if(listfile[i] < 32)

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN8@LoadMovieL

; 1297 : 			listfile[i]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 0
$LN8@LoadMovieL:

; 1298 : 
; 1299 : 	lfp=listfile;

	jmp	SHORT $LN10@LoadMovieL
$LN9@LoadMovieL:
	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], eax

; 1300 : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN7@LoadMovieL:

; 1301 : 	while(i < size)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	$LN6@LoadMovieL
$LN5@LoadMovieL:

; 1302 : 	{
; 1303 : 		while(!(*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN4@LoadMovieL
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@LoadMovieL

; 1304 : 		{
; 1305 : 			lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 1306 : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1307 : 		}

	jmp	SHORT $LN5@LoadMovieL
$LN4@LoadMovieL:

; 1308 : 		if(*lfp)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN3@LoadMovieL

; 1309 : 		{
; 1310 : 			// RV - Biker - Theater switching stuff
; 1311 : 			char filebuf[_MAX_PATH];
; 1312 : 			strcpy(filebuf,FalconUISoundDirectory);

	push	OFFSET ?FalconUISoundDirectory@@3PADA	; FalconUISoundDirectory
	lea	eax, DWORD PTR _filebuf$4[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 1313 : 			strcat(filebuf,"\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	ecx, DWORD PTR _filebuf$4[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 1314 : 			strcat(filebuf,lfp);

	mov	edx, DWORD PTR _lfp$[ebp]
	push	edx
	lea	eax, DWORD PTR _filebuf$4[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 1315 : 			ParseMovie(filebuf);

	lea	ecx, DWORD PTR _filebuf$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseMovie@C_Parser@@QAEPAVC_Movie@@PAD@Z ; C_Parser::ParseMovie
$LN2@LoadMovieL:

; 1316 : 			//ParseMovie(lfp); // Don't tack on movie directory... handled by PlayMovie function
; 1317 : 			while((*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@LoadMovieL
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@LoadMovieL

; 1318 : 			{
; 1319 : 				lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 1320 : 				i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1321 : 			}

	jmp	SHORT $LN2@LoadMovieL
$LN3@LoadMovieL:

; 1322 : 		}
; 1323 : 	}

	jmp	$LN7@LoadMovieL
$LN6@LoadMovieL:

; 1324 : 	delete listfile;

	mov	ecx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1325 : 	return(TRUE);

	mov	eax, 1
$LN21@LoadMovieL:

; 1326 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadMovieList@C_Parser@@QAEHPAD@Z ENDP			; C_Parser::LoadMovieList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_ifp$ = -24						; size = 4
_listfile$ = -20					; size = 4
_lfp$ = -16						; size = 4
_size$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadStringList@C_Parser@@QAEHPAD@Z PROC		; C_Parser::LoadStringList
; _this$ = ecx

; 1157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1158 : 	UI_HANDLE ifp;
; 1159 : 	long size;
; 1160 : 	char *listfile,*lfp;
; 1161 : 	long i;
; 1162 : 
; 1163 : #if 0
; 1164 : 	strcpy(filebuf,FalconUIArtDirectory); // Falcon root
; 1165 : 	if (g_bHiResUI)
; 1166 : 		strcat(filebuf,"\\art1024");		// HiResUI
; 1167 : 	else
; 1168 : 	    strcat(filebuf,"\\art");			// LoResUI
; 1169 : 	strcat(filebuf,"\\");
; 1170 : 	strcat(filebuf,filename);
; 1171 : 	ifp=UI_OPEN(filebuf,"rb");
; 1172 : #endif
; 1173 : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory);

	push	1
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 1174 : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN20@LoadString

; 1175 : 	{
; 1176 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN19@LoadString

; 1177 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN19@LoadString

; 1178 : 		    fprintf(Perror_,"LoadStringList open failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CB@EEIINBIN@LoadStringList?5open?5failed?5?$CI?$CFs?$CJ?6@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN19@LoadString:

; 1179 : 	    }
; 1180 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadString
$LN20@LoadString:

; 1181 : 	}
; 1182 : 
; 1183 : 	size=UI_FILESIZE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 1184 : 	
; 1185 : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN17@LoadString

; 1186 : 	{
; 1187 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN16@LoadString

; 1188 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN16@LoadString

; 1189 : 		    fprintf(Perror_,"LoadStringList seek start failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CH@CGHLBJJI@LoadStringList?5seek?5start?5failed@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN16@LoadString:

; 1190 : 	    }
; 1191 : 	    UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1192 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadString
$LN17@LoadString:

; 1193 : 	}
; 1194 : 
; 1195 : 	listfile=new char [size+5]; // just in case :)

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 5
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _listfile$[ebp], edx

; 1196 : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _listfile$[ebp]
	push	edx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN14@LoadString

; 1197 : 	{
; 1198 : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN13@LoadString

; 1199 : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN13@LoadString

; 1200 : 		    fprintf(Perror_,"LoadStringList read failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CB@MJEBAGBO@LoadStringList?5read?5failed?5?$CI?$CFs?$CJ?6@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN13@LoadString:

; 1201 : 	    }
; 1202 : 	    delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1203 : 	    UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 1204 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadString
$LN14@LoadString:

; 1205 : 	}
; 1206 : 	listfile[size]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0

; 1207 : 
; 1208 : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1209 : 
; 1210 : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@LoadString
$LN10@LoadString:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@LoadString:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN9@LoadString

; 1211 : 		if(listfile[i] < 32)

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN8@LoadString

; 1212 : 			listfile[i]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 0
$LN8@LoadString:

; 1213 : 
; 1214 : 	lfp=listfile;

	jmp	SHORT $LN10@LoadString
$LN9@LoadString:
	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], eax

; 1215 : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN7@LoadString:

; 1216 : 	while(i < size)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN6@LoadString
$LN5@LoadString:

; 1217 : 	{
; 1218 : 		while(!(*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN4@LoadString
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@LoadString

; 1219 : 		{
; 1220 : 			lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 1221 : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1222 : 		}

	jmp	SHORT $LN5@LoadString
$LN4@LoadString:

; 1223 : 		if(*lfp)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@LoadString

; 1224 : 		{
; 1225 : 			//strcpy(filebuf,FalconUIArtDirectory);
; 1226 : 			//strcat(filebuf,"\\");
; 1227 : 			//strcat(filebuf,lfp);
; 1228 : 			ParseString(lfp);

	mov	eax, DWORD PTR _lfp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseString@C_Parser@@QAEPAVC_String@@PAD@Z ; C_Parser::ParseString
$LN2@LoadString:

; 1229 : 			while((*lfp) && i < size)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@LoadString
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@LoadString

; 1230 : 			{
; 1231 : 				lfp++;

	mov	ecx, DWORD PTR _lfp$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lfp$[ebp], ecx

; 1232 : 				i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1233 : 			}

	jmp	SHORT $LN2@LoadString
$LN3@LoadString:

; 1234 : 		}
; 1235 : 	}

	jmp	SHORT $LN7@LoadString
$LN6@LoadString:

; 1236 : 	delete listfile;

	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1237 : 	return(TRUE);

	mov	eax, 1
$LN21@LoadString:

; 1238 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadStringList@C_Parser@@QAEHPAD@Z ENDP		; C_Parser::LoadStringList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -300						; size = 4
$T2 = -296						; size = 4
$T3 = -292						; size = 4
_ifp$ = -288						; size = 4
_listfile$ = -284					; size = 4
_this$ = -280						; size = 4
_lfp$ = -276						; size = 4
_size$ = -272						; size = 4
_i$ = -268						; size = 4
_filebuf$4 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LoadSoundList@C_Parser@@QAEHPAD@Z PROC			; C_Parser::LoadSoundList
; _this$ = ecx

; 1072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1073 : 	UI_HANDLE ifp;
; 1074 : 	long size;
; 1075 : 	char *listfile,*lfp;
; 1076 : 	long i;
; 1077 : 
; 1078 : #if 0
; 1079 : 	strcpy(filebuf,FalconUIArtDirectory); // Falcon root
; 1080 : 	if (g_bHiResUI)
; 1081 : 		strcat(filebuf,"\\art1024");		// HiResUI
; 1082 : 	else
; 1083 : 		strcat(filebuf,"\\art");			// LoResUI
; 1084 : 	strcat(filebuf,"\\");
; 1085 : 	strcat(filebuf,filename);
; 1086 : 	ifp=UI_OPEN(filebuf,"rb");
; 1087 : #endif
; 1088 : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory);

	push	1
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 1089 : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN20@LoadSoundL

; 1090 : 	{
; 1091 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN19@LoadSoundL

; 1092 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN19@LoadSoundL

; 1093 : 		    fprintf(Perror_,"LoadSoundList open failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@KAAMHMDA@LoadSoundList?5open?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN19@LoadSoundL:

; 1094 : 	    }
; 1095 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadSoundL
$LN20@LoadSoundL:

; 1096 : 	}
; 1097 : 	
; 1098 : 	size=UI_FILESIZE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 1099 : 
; 1100 : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN17@LoadSoundL

; 1101 : 	{
; 1102 : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN16@LoadSoundL

; 1103 : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN16@LoadSoundL

; 1104 : 		    fprintf(Perror_,"LoadSoundList seek start failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CG@MEEIBLAE@LoadSoundList?5seek?5start?5failed?5@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN16@LoadSoundL:

; 1105 : 	    }
; 1106 : 	    UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1107 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadSoundL
$LN17@LoadSoundL:

; 1108 : 	}
; 1109 : 	
; 1110 : 	listfile=new char [size+5]; // just in case :)

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 5
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _listfile$[ebp], edx

; 1111 : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _listfile$[ebp]
	push	edx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN14@LoadSoundL

; 1112 : 	{
; 1113 : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN13@LoadSoundL

; 1114 : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN13@LoadSoundL

; 1115 : 		    fprintf(Perror_,"LoadSoundList read failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0CA@CNMFKLKD@LoadSoundList?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN13@LoadSoundL:

; 1116 : 	    }
; 1117 : 	    delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1118 : 	    UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 1119 : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN21@LoadSoundL
$LN14@LoadSoundL:

; 1120 : 	}
; 1121 : 	listfile[size]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0

; 1122 : 
; 1123 : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1124 : 
; 1125 : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@LoadSoundL
$LN10@LoadSoundL:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@LoadSoundL:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN9@LoadSoundL

; 1126 : 		if(listfile[i] < 32)

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN8@LoadSoundL

; 1127 : 			listfile[i]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 0
$LN8@LoadSoundL:

; 1128 : 
; 1129 : 	lfp=listfile;

	jmp	SHORT $LN10@LoadSoundL
$LN9@LoadSoundL:
	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], eax

; 1130 : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN7@LoadSoundL:

; 1131 : 	while(i < size)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	$LN6@LoadSoundL
$LN5@LoadSoundL:

; 1132 : 	{
; 1133 : 		while(!(*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN4@LoadSoundL
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@LoadSoundL

; 1134 : 		{
; 1135 : 			lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 1136 : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1137 : 		}

	jmp	SHORT $LN5@LoadSoundL
$LN4@LoadSoundL:

; 1138 : 		if(*lfp)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN3@LoadSoundL

; 1139 : 		{
; 1140 : 		    char filebuf[_MAX_PATH];
; 1141 : 			strcpy(filebuf,FalconUISoundDirectory);

	push	OFFSET ?FalconUISoundDirectory@@3PADA	; FalconUISoundDirectory
	lea	eax, DWORD PTR _filebuf$4[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 1142 : 			strcat(filebuf,"\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	ecx, DWORD PTR _filebuf$4[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 1143 : 			strcat(filebuf,lfp);

	mov	edx, DWORD PTR _lfp$[ebp]
	push	edx
	lea	eax, DWORD PTR _filebuf$4[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 1144 : 			ParseSound(filebuf);

	lea	ecx, DWORD PTR _filebuf$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseSound@C_Parser@@QAEPAVC_Sound@@PAD@Z ; C_Parser::ParseSound
$LN2@LoadSoundL:

; 1145 : 			while((*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@LoadSoundL
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@LoadSoundL

; 1146 : 			{
; 1147 : 				lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 1148 : 				i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1149 : 			}

	jmp	SHORT $LN2@LoadSoundL
$LN3@LoadSoundL:

; 1150 : 		}
; 1151 : 	}

	jmp	$LN7@LoadSoundL
$LN6@LoadSoundL:

; 1152 : 	delete listfile;

	mov	ecx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1153 : 	return(TRUE);

	mov	eax, 1
$LN21@LoadSoundL:

; 1154 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadSoundList@C_Parser@@QAEHPAD@Z ENDP			; C_Parser::LoadSoundList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_win$ = -28						; size = 4
_ifp$ = -24						; size = 4
_listfile$ = -20					; size = 4
_size$ = -16						; size = 4
_lfp$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadWindowList@C_Parser@@QAEHPAD@Z PROC		; C_Parser::LoadWindowList
; _this$ = ecx

; 772  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 	UI_HANDLE ifp;
; 774  : 	long size;
; 775  : 	char *listfile,*lfp;
; 776  : 	long i;
; 777  : 	C_Window *win;
; 778  : 
; 779  : 	memset(&WindowList_[0],0,sizeof(long)*MAX_WINDOWS_IN_LIST);

	push	800					; 00000320H
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 780  : 	WinIndex_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+960], ax

; 781  : 	WinLoaded_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+962], dx

; 782  : 	
; 783  : 	if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN31@LoadWindow

; 784  : 	    if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN31@LoadWindow

; 785  : 		fprintf(Perror_,"LoadWindowList processing (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@GDPFFHAC@LoadWindowList?5processing?5?$CI?$CFs?$CJ?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN31@LoadWindow:

; 786  : 	}
; 787  : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory);

	push	1
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 788  : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN29@LoadWindow

; 789  : 	{
; 790  : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN28@LoadWindow

; 791  : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN28@LoadWindow

; 792  : 		    fprintf(Perror_,"LoadWindowList open failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CB@LNIDGHFB@LoadWindowList?5open?5failed?5?$CI?$CFs?$CJ?6@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN28@LoadWindow:

; 793  : 	    }
; 794  : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN32@LoadWindow
$LN29@LoadWindow:

; 795  : 	}
; 796  : 	if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN26@LoadWindow

; 797  : 	    if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN26@LoadWindow

; 798  : 		fprintf(Perror_,"Open Art file found as %s\n",filebuf);

	push	OFFSET _filebuf
	push	OFFSET ??_C@_0BL@CCCIALCG@Open?5Art?5file?5found?5as?5?$CFs?6?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN26@LoadWindow:

; 799  : 	}
; 800  : 
; 801  : 
; 802  : 	size=UI_FILESIZE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 803  : 	
; 804  : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN24@LoadWindow

; 805  : 	{
; 806  : 	    if (g_bLogUiErrors) {

	movzx	edx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	edx, edx
	je	SHORT $LN23@LoadWindow

; 807  : 		if(Perror_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+952], 0
	je	SHORT $LN23@LoadWindow

; 808  : 		    fprintf(Perror_,"LoadWindowList seek start failed (%s)\n",filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CH@LBBEPHCG@LoadWindowList?5seek?5start?5failed@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN23@LoadWindow:

; 809  : 	    }
; 810  : 	    UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 811  : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN32@LoadWindow
$LN24@LoadWindow:

; 812  : 	}
; 813  : 	
; 814  : 	listfile=new char [size+5]; // just in case :)

	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 5
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _listfile$[ebp], eax

; 815  : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _listfile$[ebp]
	push	eax
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN21@LoadWindow

; 816  : 	{
; 817  : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN20@LoadWindow

; 818  : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN20@LoadWindow

; 819  : 		    fprintf(Perror_,"LoadWindowList read failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CB@DAEKLAMC@LoadWindowList?5read?5failed?5?$CI?$CFs?$CJ?6@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN20@LoadWindow:

; 820  : 	    }
; 821  : 	    delete listfile;

	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 822  : 	    UI_CLOSE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 823  : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN32@LoadWindow
$LN21@LoadWindow:

; 824  : 	}
; 825  : 	listfile[size]=0;

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR [eax], 0

; 826  : 
; 827  : 	UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 828  : 
; 829  : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@LoadWindow
$LN17@LoadWindow:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN18@LoadWindow:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN16@LoadWindow

; 830  : 		if(listfile[i] < 32)

	mov	ecx, DWORD PTR _listfile$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jge	SHORT $LN15@LoadWindow

; 831  : 			listfile[i]=0;

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
$LN15@LoadWindow:

; 832  : 
; 833  : 	lfp=listfile;

	jmp	SHORT $LN17@LoadWindow
$LN16@LoadWindow:
	mov	ecx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], ecx

; 834  : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN14@LoadWindow:

; 835  : 	while(i < size)

	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	$LN13@LoadWindow
$LN12@LoadWindow:

; 836  : 	{
; 837  : 		while(!(*lfp) && i < size)

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN11@LoadWindow
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN11@LoadWindow

; 838  : 		{
; 839  : 			lfp++;

	mov	eax, DWORD PTR _lfp$[ebp]
	add	eax, 1
	mov	DWORD PTR _lfp$[ebp], eax

; 840  : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 841  : 		}

	jmp	SHORT $LN12@LoadWindow
$LN11@LoadWindow:

; 842  : 		if(*lfp)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN10@LoadWindow

; 843  : 		{
; 844  : 		    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN9@LoadWindow

; 845  : 			if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN9@LoadWindow

; 846  : 			    fprintf(Perror_,"LoadWindowList Parsing Window (%s)\n",lfp);

	mov	eax, DWORD PTR _lfp$[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@DDNELKMF@LoadWindowList?5Parsing?5Window?5?$CI?$CF@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN9@LoadWindow:

; 847  : 		    }
; 848  : 			if (*lfp != '#')

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	je	$LN2@LoadWindow

; 849  : 			{
; 850  : 				//strcpy(filebuf,FalconUIArtDirectory);
; 851  : 				//strcat(filebuf,"\\");
; 852  : 				//strcat(filebuf,lfp);
; 853  : 				win = ParseWindow (lfp);

	mov	edx, DWORD PTR _lfp$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseWindow@C_Parser@@QAEPAVC_Window@@PAD@Z ; C_Parser::ParseWindow
	mov	DWORD PTR _win$[ebp], eax

; 854  : 
; 855  : 				if (win)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN6@LoadWindow

; 856  : 				{
; 857  : 					WindowList_[WinLoaded_ ++] = win->GetID ();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetID@C_Window@@QAEJXZ			; C_Window::GetID
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+962]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+104], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+962]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+962], ax

; 858  : 					Handler_->AddWindow (win, win->GetFlags ());

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetFlags@C_Window@@QAEJXZ		; C_Window::GetFlags
	push	eax
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?AddWindow@C_Handler@@QAEHPAVC_Window@@J@Z ; C_Handler::AddWindow

; 859  : 					win->ScanClientAreas();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?ScanClientAreas@C_Window@@QAEXXZ	; C_Window::ScanClientAreas

; 860  : 				}
; 861  : 				else

	jmp	SHORT $LN2@LoadWindow
$LN6@LoadWindow:

; 862  : 				{
; 863  : 				    
; 864  : 				    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN2@LoadWindow

; 865  : 					
; 866  : 					if (Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN2@LoadWindow

; 867  : 					{
; 868  : 					    fprintf(Perror_,"LoadWindowList NO Window returned (%s)\n",lfp);

	mov	eax, DWORD PTR _lfp$[ebp]
	push	eax
	push	OFFSET ??_C@_0CI@FDODKDM@LoadWindowList?5NO?5Window?5returne@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN2@LoadWindow:

; 869  : 					}
; 870  : 				    }
; 871  : 				}
; 872  : 			}
; 873  : 
; 874  : 			while((*lfp) && i < size)

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN10@LoadWindow
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN10@LoadWindow

; 875  : 			{
; 876  : 				lfp++;

	mov	eax, DWORD PTR _lfp$[ebp]
	add	eax, 1
	mov	DWORD PTR _lfp$[ebp], eax

; 877  : 				i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 878  : 			}

	jmp	SHORT $LN2@LoadWindow
$LN10@LoadWindow:

; 879  : 		}
; 880  : 	}

	jmp	$LN14@LoadWindow
$LN13@LoadWindow:

; 881  : 	delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 882  : 	return(TRUE);

	mov	eax, 1
$LN32@LoadWindow:

; 883  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadWindowList@C_Parser@@QAEHPAD@Z ENDP		; C_Parser::LoadWindowList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_TokenID$ = -44						; size = 4
tv72 = -40						; size = 4
_TokenType$ = -36					; size = 4
_Found$ = -32						; size = 4
_Comment$ = -28						; size = 4
_InString$ = -24					; size = 4
tv184 = -20						; size = 4
_Done$ = -16						; size = 4
tv81 = -12						; size = 4
_Section$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?ParseScript@C_Parser@@QAEHPAD@Z PROC			; C_Parser::ParseScript
; _this$ = ecx

; 1351 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1352 : 	int Done,Comment,Found,InString;//!,Finished=0;;
; 1353 : 	int TokenID,Section,TokenType;
; 1354 : 
; 1355 : 	if(LoadScript(filename) == FALSE)

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadScript@C_Parser@@QAEHPAD@Z		; C_Parser::LoadScript
	test	eax, eax
	jne	SHORT $LN31@ParseScrip

; 1356 : 		return(FALSE);

	xor	eax, eax
	jmp	$LN32@ParseScrip
$LN31@ParseScrip:

; 1357 : 
; 1358 : 	Idx_=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 1359 : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 1360 : 	tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 1361 : 
; 1362 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 1363 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1364 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 1365 : 	Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 1366 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN30@ParseScrip:

; 1367 : 
; 1368 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN29@ParseScrip

; 1369 : 	{
; 1370 : 		switch(Section)

	mov	eax, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 0
	je	SHORT $LN26@ParseScrip
	cmp	DWORD PTR tv72[ebp], 1
	je	$LN10@ParseScrip
	jmp	$LN27@ParseScrip
$LN26@ParseScrip:

; 1371 : 		{
; 1372 : 			case SECTION_FINDTOKEN:
; 1373 : 			// Look for token starting with '['
; 1374 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN25@ParseScrip:

; 1375 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN24@ParseScrip
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN24@ParseScrip

; 1376 : 				{
; 1377 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv81[ebp], edx
	mov	eax, DWORD PTR tv81[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 81			; 00000051H
	ja	SHORT $LN16@ParseScrip
	mov	ecx, DWORD PTR tv81[ebp]
	movzx	edx, BYTE PTR $LN34@ParseScrip[ecx]
	jmp	DWORD PTR $LN36@ParseScrip[edx*4]
$LN21@ParseScrip:

; 1378 : 					{
; 1379 : 						case '[':
; 1380 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN20@ParseScrip
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN20@ParseScrip

; 1381 : 							{
; 1382 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1383 : 								break;

	jmp	SHORT $LN22@ParseScrip
$LN20@ParseScrip:

; 1384 : 							}
; 1385 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1386 : 							break;

	jmp	SHORT $LN22@ParseScrip
$LN19@ParseScrip:

; 1387 : 						case '"':
; 1388 : 							InString=1-InString;

	mov	eax, 1
	sub	eax, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], eax

; 1389 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1390 : 							break;

	jmp	SHORT $LN22@ParseScrip
$LN18@ParseScrip:

; 1391 : 						case '#':
; 1392 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 1393 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1394 : 							break;

	jmp	SHORT $LN22@ParseScrip
$LN17@ParseScrip:

; 1395 : 						case 0x0a: case 0x0d:
; 1396 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1397 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1398 : 							break;

	jmp	SHORT $LN22@ParseScrip
$LN16@ParseScrip:

; 1399 : 						default:
; 1400 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN22@ParseScrip:

; 1401 : 					}
; 1402 : 					if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN15@ParseScrip

; 1403 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN15@ParseScrip:

; 1404 : 				}

	jmp	$LN25@ParseScrip
$LN24@ParseScrip:

; 1405 : 							
; 1406 : 				tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN14@ParseScrip:

; 1407 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN13@ParseScrip
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN13@ParseScrip

; 1408 : 					tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	SHORT $LN14@ParseScrip
$LN13@ParseScrip:

; 1409 : 
; 1410 : 				tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1411 : 
; 1412 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN12@ParseScrip

; 1413 : 				{
; 1414 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1415 : 					break;

	jmp	$LN27@ParseScrip
$LN12@ParseScrip:

; 1416 : 				}
; 1417 : 
; 1418 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN11@ParseScrip

; 1419 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN11@ParseScrip:

; 1420 : 				break;

	jmp	$LN27@ParseScrip
$LN10@ParseScrip:

; 1421 : 			case SECTION_PROCESSTOKEN:
; 1422 : 				TokenID=FindToken(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 1423 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	$LN9@ParseScrip

; 1424 : 				{
; 1425 : 					Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2

; 1426 : 					switch(TokenID)

	mov	eax, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv184[ebp], ecx
	cmp	DWORD PTR tv184[ebp], 20		; 00000014H
	ja	$LN2@ParseScrip
	mov	edx, DWORD PTR tv184[ebp]
	movzx	eax, BYTE PTR $LN35@ParseScrip[edx]
	jmp	DWORD PTR $LN37@ParseScrip[eax*4]
$LN6@ParseScrip:

; 1427 : 					{
; 1428 : 						case CPARSE_WINDOW:
; 1429 : 							Handler_->AddWindow(WindowParser(),C_BIT_NOTHING);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WindowParser@C_Parser@@AAEPAVC_Window@@XZ ; C_Parser::WindowParser
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	call	?AddWindow@C_Handler@@QAEHPAVC_Window@@J@Z ; C_Handler::AddWindow

; 1430 : 							break;

	jmp	$LN7@ParseScrip
$LN5@ParseScrip:

; 1431 : 						case CPARSE_FONT:
; 1432 : 							TokenType=TOKEN_FONT;

	mov	DWORD PTR _TokenType$[ebp], 4

; 1433 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1434 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1435 : 							break;

	jmp	SHORT $LN7@ParseScrip
$LN4@ParseScrip:

; 1436 : 						case CPARSE_SOUND:
; 1437 : 							TokenType=TOKEN_SOUND;

	mov	DWORD PTR _TokenType$[ebp], 6

; 1438 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1439 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1440 : 							break;

	jmp	SHORT $LN7@ParseScrip
$LN3@ParseScrip:

; 1441 : 						case CPARSE_STRING:
; 1442 : 							TokenType=TOKEN_STRING;

	mov	DWORD PTR _TokenType$[ebp], 7

; 1443 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1444 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1445 : 							break;

	jmp	SHORT $LN7@ParseScrip
$LN2@ParseScrip:

; 1446 : 						default:
; 1447 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 1448 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1449 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN7@ParseScrip:

; 1450 : 							break;
; 1451 : 					}
; 1452 : 				}
; 1453 : 				else

	jmp	SHORT $LN27@ParseScrip
$LN9@ParseScrip:

; 1454 : 				{
; 1455 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 1456 : 					Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1457 : 					tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN27@ParseScrip:

; 1458 : 				}
; 1459 : 				break;
; 1460 : 		}
; 1461 : 	}

	jmp	$LN30@ParseScrip
$LN29@ParseScrip:

; 1462 : 	return(TRUE);

	mov	eax, 1
$LN32@ParseScrip:

; 1463 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN36@ParseScrip:
	DD	$LN17@ParseScrip
	DD	$LN19@ParseScrip
	DD	$LN18@ParseScrip
	DD	$LN21@ParseScrip
	DD	$LN16@ParseScrip
$LN34@ParseScrip:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN37@ParseScrip:
	DD	$LN6@ParseScrip
	DD	$LN5@ParseScrip
	DD	$LN4@ParseScrip
	DD	$LN3@ParseScrip
	DD	$LN2@ParseScrip
$LN35@ParseScrip:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ParseScript@C_Parser@@QAEHPAD@Z ENDP			; C_Parser::ParseScript
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_ifp$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadScript@C_Parser@@QAEHPAD@Z PROC			; C_Parser::LoadScript
; _this$ = ecx

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 674  : 	UI_HANDLE ifp;
; 675  : 	long size;
; 676  : 
; 677  : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory, 0);

	push	0
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 678  : 
; 679  : //	ifp=UI_OPEN(filename,"rb");
; 680  : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN11@LoadScript

; 681  : 	{
; 682  : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN10@LoadScript

; 683  : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN10@LoadScript

; 684  : 		    fprintf(Perror_,"LoadScript load failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@BMHBEFCI@LoadScript?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN10@LoadScript:

; 685  : 	    }
; 686  : 	return(FALSE);

	xor	eax, eax
	jmp	$LN12@LoadScript
$LN11@LoadScript:

; 687  : 	}
; 688  : 
; 689  : 	size=UI_FILESIZE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 690  : 	
; 691  : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN8@LoadScript

; 692  : 	{
; 693  : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN7@LoadScript

; 694  : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN7@LoadScript

; 695  : 		    fprintf(Perror_,"LoadScript seek start failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CD@GABGFBNH@LoadScript?5seek?5start?5failed?5?$CI?$CFs@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN7@LoadScript:

; 696  : 	    }
; 697  : 	    UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 698  : 	    return(FALSE);

	xor	eax, eax
	jmp	$LN12@LoadScript
$LN8@LoadScript:

; 699  : 	}
; 700  : 
; 701  : 	scriptlen_=size;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 702  : 	if(script_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@LoadScript

; 703  : 		delete script_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@LoadScript:

; 704  : 	script_=new char [size+5]; // just in case :)

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 5
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+4], eax

; 705  : 	if(script_) memset(script_, 0, size+5);	// OW

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@LoadScript
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 5
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@LoadScript:

; 706  : 	if(UI_READ(script_,size,1,ifp) != 1)

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN3@LoadScript

; 707  : 	{
; 708  : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN2@LoadScript

; 709  : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN2@LoadScript

; 710  : 		    fprintf(Perror_,"LoadScript read failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0BN@BJNDNEOA@LoadScript?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN2@LoadScript:

; 711  : 	    }
; 712  : 	delete script_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 713  : 		UI_CLOSE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 714  : 		return(FALSE);

	xor	eax, eax
	jmp	SHORT $LN12@LoadScript
$LN3@LoadScript:

; 715  : 	}
; 716  : 	script_[size]=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 717  : 
; 718  : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 719  : 	return(TRUE);

	mov	eax, 1
$LN12@LoadScript:

; 720  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadScript@C_Parser@@QAEHPAD@Z ENDP			; C_Parser::LoadScript
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_ifp$ = -24						; size = 4
_listfile$ = -20					; size = 4
_this$ = -16						; size = 4
_size$ = -12						; size = 4
_lfp$ = -8						; size = 4
_i$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadIDList@C_Parser@@QAEXPAD@Z PROC			; C_Parser::LoadIDList
; _this$ = ecx

; 570  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 571  : 	UI_HANDLE ifp;
; 572  : 	long size;
; 573  : 	char *listfile,*lfp;
; 574  : 	long i;
; 575  : 
; 576  : 	memset(&WindowList_[0],0,sizeof(long)*MAX_WINDOWS_IN_LIST);

	push	800					; 00000320H
	push	0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+104]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 577  : 	WinIndex_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+960], ax

; 578  : 	WinLoaded_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+962], dx

; 579  : 
; 580  : #if 0
; 581  : 	char filebuf[_MAX_PATH];
; 582  : 	strcpy(filebuf,FalconUIArtDirectory); // Falcon root
; 583  : 	if (g_bHiResUI)
; 584  : 		strcat(filebuf,"\\art1024");		// HiResUI
; 585  : 	else
; 586  : 		strcat(filebuf,"\\art");			// LoResUI
; 587  : 	strcat(filebuf,"\\");
; 588  : 	strcat(filebuf,filename);
; 589  : 	ifp=UI_OPEN(filebuf,"rb");
; 590  : #endif
; 591  : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory);

	push	1
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 592  : 
; 593  : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN17@LoadIDList

; 594  : 	{
; 595  : 	    if (g_bLogUiErrors) {

	movzx	edx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	edx, edx
	je	SHORT $LN16@LoadIDList

; 596  : 		if(Perror_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+952], 0
	je	SHORT $LN16@LoadIDList

; 597  : 		    fprintf(Perror_,"LoadIDTable read failed (%s)\n",filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@IIPENBFP@LoadIDTable?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN16@LoadIDList:

; 598  : 	    }
; 599  : 		return;

	jmp	$LN18@LoadIDList
$LN17@LoadIDList:

; 600  : 	}
; 601  : 
; 602  : 	size=UI_FILESIZE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 603  : 
; 604  : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN14@LoadIDList

; 605  : 	{
; 606  : 		UI_CLOSE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 607  : 		return;

	jmp	$LN18@LoadIDList
$LN14@LoadIDList:

; 608  : 	}
; 609  : 
; 610  : 	listfile=new char [size+5]; // just in case :)

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 5
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _listfile$[ebp], ecx

; 611  : 	if(UI_READ(listfile,size,1,ifp) != 1)

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _listfile$[ebp]
	push	ecx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN13@LoadIDList

; 612  : 	{
; 613  : 		delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 614  : 		UI_CLOSE(ifp);

	mov	ecx, DWORD PTR _ifp$[ebp]
	push	ecx
	call	_ResFClose
	add	esp, 4

; 615  : 		return;

	jmp	$LN18@LoadIDList
$LN13@LoadIDList:

; 616  : 	}
; 617  : 	listfile[size]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0

; 618  : 
; 619  : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 620  : 
; 621  : 	for(i=0;i<size;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@LoadIDList
$LN11@LoadIDList:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@LoadIDList:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN10@LoadIDList

; 622  : 		if(listfile[i] < 32)

	mov	eax, DWORD PTR _listfile$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN9@LoadIDList

; 623  : 			listfile[i]=0;

	mov	edx, DWORD PTR _listfile$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], 0
$LN9@LoadIDList:

; 624  : 
; 625  : 	lfp=listfile;

	jmp	SHORT $LN11@LoadIDList
$LN10@LoadIDList:
	mov	eax, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR _lfp$[ebp], eax

; 626  : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN8@LoadIDList:

; 627  : 	while(i < size)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN7@LoadIDList
$LN6@LoadIDList:

; 628  : 	{
; 629  : 		while(!(*lfp) && i < size)

	mov	edx, DWORD PTR _lfp$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN5@LoadIDList
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN5@LoadIDList

; 630  : 		{
; 631  : 			lfp++;

	mov	edx, DWORD PTR _lfp$[ebp]
	add	edx, 1
	mov	DWORD PTR _lfp$[ebp], edx

; 632  : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 633  : 		}

	jmp	SHORT $LN6@LoadIDList
$LN5@LoadIDList:

; 634  : 		if(*lfp)

	mov	ecx, DWORD PTR _lfp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN4@LoadIDList

; 635  : 		{
; 636  : 			if (*lfp != '#')

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN2@LoadIDList

; 637  : 			{
; 638  : 				//strcpy(filebuf,FalconUIArtDirectory);
; 639  : 				//strcat(filebuf,"\\");
; 640  : 				//strcat(filebuf,lfp);
; 641  : 				LoadIDTable(lfp);

	mov	edx, DWORD PTR _lfp$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadIDTable@C_Parser@@AAEXPAD@Z	; C_Parser::LoadIDTable
$LN2@LoadIDList:

; 642  : 			}
; 643  : 			while((*lfp) && i < size)

	mov	eax, DWORD PTR _lfp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@LoadIDList
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@LoadIDList

; 644  : 			{
; 645  : 				lfp++;

	mov	eax, DWORD PTR _lfp$[ebp]
	add	eax, 1
	mov	DWORD PTR _lfp$[ebp], eax

; 646  : 				i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 647  : 			}

	jmp	SHORT $LN2@LoadIDList
$LN4@LoadIDList:

; 648  : 		}
; 649  : 	}

	jmp	SHORT $LN8@LoadIDList
$LN7@LoadIDList:

; 650  : 	delete listfile;

	mov	edx, DWORD PTR _listfile$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN18@LoadIDList:

; 651  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadIDList@C_Parser@@QAEXPAD@Z ENDP			; C_Parser::LoadIDList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_token$ = 8						; size = 4
?FindToken@C_Parser@@QAEJPAD@Z PROC			; C_Parser::FindToken
; _this$ = ecx

; 659  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 660  : 	long i;
; 661  : 
; 662  : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN3@FindToken:

; 663  : 	while(C_All_Tokens[i])

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _C_All_Tokens[eax*4], 0
	je	SHORT $LN2@FindToken

; 664  : 	{
; 665  : 		if(!strnicmp(token,C_All_Tokens[i],strlen(C_All_Tokens[i])))

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _C_All_Tokens[ecx*4]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _C_All_Tokens[eax*4]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@FindToken

; 666  : 			return(i);

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN4@FindToken
$LN1@FindToken:

; 667  : 		i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 668  : 	}

	jmp	SHORT $LN3@FindToken
$LN2@FindToken:

; 669  : 	return(0);

	xor	eax, eax
$LN4@FindToken:

; 670  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindToken@C_Parser@@QAEJPAD@Z ENDP			; C_Parser::FindToken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_token$ = 8						; size = 4
?FindID@C_Parser@@QAEJPAD@Z PROC			; C_Parser::FindID
; _this$ = ecx

; 654  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 	return(TokenOrder_->FindTextID(token));

	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+908]
	call	?FindTextID@C_Hash@@QAEJPAD@Z		; C_Hash::FindTextID

; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindID@C_Parser@@QAEJPAD@Z ENDP			; C_Parser::FindID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?FindIDStr@C_Parser@@QAEPADJ@Z PROC			; C_Parser::FindIDStr
; _this$ = ecx

; 1466 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1467 : 	sprintf(ValueStr,"%1ld",ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	push	OFFSET ??_C@_04DIDHKLLF@?$CF1ld?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 912				; 00000390H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1468 : 	return(&ValueStr[0]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [eax+edx+912]

; 1469 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindIDStr@C_Parser@@QAEPADJ@Z ENDP			; C_Parser::FindIDStr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
tv90 = -28						; size = 4
$T1 = -24						; size = 4
tv83 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@C_Parser@@QAEXXZ PROC				; C_Parser::Cleanup
; _this$ = ecx

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 
; 388  :     if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN3@Cleanup

; 389  : 	
; 390  : 	if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN2@Cleanup

; 391  : 	    fprintf(Perror_,"Cleanup Parser\n");

	push	OFFSET ??_C@_0BA@NDJBGPGB@Cleanup?5Parser?6?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_fprintf
	add	esp, 8
$LN2@Cleanup:

; 392  : 	if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN3@Cleanup

; 393  : 	    UI_CLOSE(Perror_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+952]
	push	eax
	call	_ResFClose
	add	esp, 4
$LN3@Cleanup:

; 394  :     }
; 395  :     Perror_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+952], 0

; 396  : 
; 397  : 	TokenOrder_->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+908]
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 398  : 	delete TokenOrder_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+908]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN6@Cleanup
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN7@Cleanup
$LN6@Cleanup:
	mov	DWORD PTR tv83[ebp], 0
$LN7@Cleanup:

; 399  : 	TokenOrder_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+908], 0

; 400  : 
; 401  : 	TokenErrorList->Cleanup();

	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?Cleanup@C_Hash@@QAEXXZ			; C_Hash::Cleanup

; 402  : 	delete TokenErrorList;

	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@Cleanup
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GC_Hash@@QAEPAXI@Z
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN9@Cleanup
$LN8@Cleanup:
	mov	DWORD PTR tv90[ebp], 0
$LN9@Cleanup:

; 403  : 	TokenErrorList = NULL;

	mov	DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A, 0 ; TokenErrorList

; 404  : 
; 405  : 	Handler_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 406  : 	Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 407  : 	Control_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], 0

; 408  : 	Font_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0

; 409  : 	Image_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 0

; 410  : 	Anim_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], 0

; 411  : 	Sound_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0

; 412  : 	String_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@C_Parser@@QAEXXZ ENDP				; C_Parser::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 4
$T3 = -36						; size = 4
tv93 = -32						; size = 4
$T4 = -28						; size = 4
tv80 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_handler$ = 8						; size = 4
_ImgMgr$ = 12						; size = 4
_FontList$ = 16						; size = 4
_SndMgr$ = 20						; size = 4
_PopupMgr$ = 24						; size = 4
_AnimMgr$ = 28						; size = 4
_StringMgr$ = 32					; size = 4
_MovieMgr$ = 36						; size = 4
?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z PROC ; C_Parser::Setup
; _this$ = ecx

; 354  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 	Handler_=handler;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _handler$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 356  : 	Image_=ImgMgr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ImgMgr$[ebp]
	mov	DWORD PTR [edx+80], eax

; 357  : 	Anim_=AnimMgr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _AnimMgr$[ebp]
	mov	DWORD PTR [ecx+84], edx

; 358  : 	Font_=FontList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _FontList$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 359  : 	Sound_=SndMgr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _SndMgr$[ebp]
	mov	DWORD PTR [edx+88], eax

; 360  : 	Popup_=PopupMgr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _PopupMgr$[ebp]
	mov	DWORD PTR [ecx+92], edx

; 361  : 	String_=StringMgr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _StringMgr$[ebp]
	mov	DWORD PTR [eax+96], ecx

; 362  : 	Movie_=MovieMgr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _MovieMgr$[ebp]
	mov	DWORD PTR [edx+100], eax

; 363  : 
; 364  : 	TokenOrder_=new C_Hash;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN5@Setup
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0C_Hash@@QAE@XZ			; C_Hash::C_Hash
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN6@Setup
$LN5@Setup:
	mov	DWORD PTR tv80[ebp], 0
$LN6@Setup:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+908], eax

; 365  : 	TokenOrder_->Setup(PARSE_HASH_SIZE);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+908]
	call	?Setup@C_Hash@@QAEXJ@Z			; C_Hash::Setup

; 366  : 	TokenOrder_->SetFlags(C_BIT_REMOVE);

	push	67108864				; 04000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+908]
	call	?SetFlags@C_Hash@@QAEXJ@Z		; C_Hash::SetFlags

; 367  : 
; 368  : 	TokenErrorList=new C_Hash;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN7@Setup
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0C_Hash@@QAE@XZ			; C_Hash::C_Hash
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@Setup
$LN7@Setup:
	mov	DWORD PTR tv93[ebp], 0
$LN8@Setup:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A, ecx ; TokenErrorList

; 369  : 	TokenErrorList->Setup(512);

	push	512					; 00000200H
	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?Setup@C_Hash@@QAEXJ@Z			; C_Hash::Setup

; 370  : 	TokenErrorList->SetFlags(C_BIT_REMOVE);

	push	67108864				; 04000000H
	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?SetFlags@C_Hash@@QAEXJ@Z		; C_Hash::SetFlags

; 371  : 
; 372  : 	AddInternalIDs(UI95_BitTable);

	push	OFFSET _UI95_BitTable
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInternalIDs@C_Parser@@AAEXQAUID_TABLE@@@Z ; C_Parser::AddInternalIDs

; 373  : 	AddInternalIDs(UI95_Table);

	push	OFFSET _UI95_Table
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInternalIDs@C_Parser@@AAEXQAUID_TABLE@@@Z ; C_Parser::AddInternalIDs

; 374  : 	AddInternalIDs(UI95_FontTable);

	push	OFFSET _UI95_FontTable
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInternalIDs@C_Parser@@AAEXQAUID_TABLE@@@Z ; C_Parser::AddInternalIDs

; 375  : 
; 376  : 	Sound_->SetIDTable(TokenOrder_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+908]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	call	?SetIDTable@C_Sound@@QAEXPAVC_Hash@@@Z	; C_Sound::SetIDTable

; 377  : 	
; 378  : 	if (g_bLogUiErrors) {

	movzx	edx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	edx, edx
	je	SHORT $LN3@Setup

; 379  : 	    Perror_=UI_OPEN("ui95err.log","a");

	push	OFFSET ??_C@_01MCMALHOG@a?$AA@
	push	OFFSET ??_C@_0M@CADKCABC@ui95err?4log?$AA@
	call	_ResFOpen
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+952], eax

; 380  : 	    if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN3@Setup

; 381  : 		fprintf(Perror_,"Setup Parser\n");

	push	OFFSET ??_C@_0O@JLGOJDPF@Setup?5Parser?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 8
$LN3@Setup:

; 382  : 	}
; 383  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Setup@C_Parser@@QAEXPAVC_Handler@@PAVC_Image@@PAVC_Font@@PAVC_Sound@@PAVC_PopupMgr@@PAVC_Animation@@PAVC_String@@PAVC_Movie@@@Z ENDP ; C_Parser::Setup
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1C_Parser@@QAE@XZ PROC				; C_Parser::~C_Parser
; _this$ = ecx

; 348  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 349  : 	if(script_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@C_Parser

; 350  : 		delete script_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@C_Parser:

; 351  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1C_Parser@@QAE@XZ ENDP				; C_Parser::~C_Parser
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0C_Parser@@QAE@XZ PROC				; C_Parser::C_Parser
; _this$ = ecx

; 321  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 	Idx_=0; // index into script

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 323  : 	script_=NULL; // script file (read into memory)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 324  : 	scriptlen_=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 325  : 	tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 326  : 	P_Idx_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 327  : 	str_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 328  : 
; 329  : 	Perror_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+952], 0

; 330  : 
; 331  : 	Handler_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 332  : 	Window_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 333  : 	Control_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], 0

; 334  : 	Anim_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 335  : 	Font_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 0

; 336  : 	Image_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0

; 337  : 	Anim_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 338  : 	Sound_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 0

; 339  : 	Popup_=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 340  : 	String_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0

; 341  : 
; 342  : 	TokenOrder_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+908], 0

; 343  : 
; 344  : 	memset(&P_[0],0,sizeof(long)*PARSE_MAX_PARAMS);

	push	48					; 00000030H
	push	0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 345  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0C_Parser@@QAE@XZ ENDP				; C_Parser::C_Parser
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ifp$ = -4						; size = 4
_filename$ = 8						; size = 4
_thrdir$ = 12						; size = 4
_maindir$ = 16						; size = 4
_hirescapable$ = 20					; size = 4
?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z PROC	; C_Parser::OpenArtFile
; _this$ = ecx

; 722  : UI_HANDLE C_Parser::OpenArtFile(char *filename, const char *thrdir, const char *maindir, int hirescapable){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 723  : 	UI_HANDLE ifp;
; 724  : 	
; 725  : 	// absolute path
; 726  : 	if (isalpha(filename[0]) && filename[1] == ':' && filename[2] == '\\'){

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _filename$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	push	edx
	call	_isalpha
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@OpenArtFil
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _filename$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN4@OpenArtFil
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _filename$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 92					; 0000005cH
	jne	SHORT $LN4@OpenArtFil

; 727  : 	    return UI_OPEN(filename, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_ResFOpen
	add	esp, 8
	jmp	$LN5@OpenArtFil
$LN4@OpenArtFil:

; 728  : 	}
; 729  : 
; 730  : 	// try theater first
; 731  : 	strcpy(filebuf, thrdir); // Falcon thr root dir

	mov	ecx, DWORD PTR _thrdir$[ebp]
	push	ecx
	push	OFFSET _filebuf
	call	_strcpy
	add	esp, 8

; 732  : 	if (hirescapable) {

	cmp	DWORD PTR _hirescapable$[ebp], 0
	je	SHORT $LN3@OpenArtFil

; 733  : 		// sfr: unset for old UI
; 734  : #define NIGHTFALCON_UI 1
; 735  : 
; 736  : #if NIGHTFALCON_UI
; 737  : 		strcat(filebuf,"\\art");

	push	OFFSET ??_C@_04FLICLKIC@?2art?$AA@
	push	OFFSET _filebuf
	call	_strcat
	add	esp, 8
$LN3@OpenArtFil:

; 738  : #else
; 739  : 		if (g_bHiResUI){
; 740  : 			strcat(filebuf,"\\art1024");		// HiResUI
; 741  : 		}
; 742  : 		else{
; 743  : 			strcat(filebuf,"\\art");			// LoResUI
; 744  : 		}
; 745  : #endif
; 746  : 	}
; 747  : 	strcat(filebuf,"\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	OFFSET _filebuf
	call	_strcat
	add	esp, 8

; 748  : 	strcat(filebuf,filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET _filebuf
	call	_strcat
	add	esp, 8

; 749  : 	ifp=UI_OPEN(filebuf,"rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET _filebuf
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _ifp$[ebp], eax

; 750  : 	if (ifp != NULL){ return ifp; } // got the main one

	cmp	DWORD PTR _ifp$[ebp], 0
	je	SHORT $LN2@OpenArtFil
	mov	eax, DWORD PTR _ifp$[ebp]
	jmp	SHORT $LN5@OpenArtFil
$LN2@OpenArtFil:

; 751  : 
; 752  : 	// try main dir
; 753  : 	strcpy(filebuf,maindir); // Falcon main root dir

	mov	eax, DWORD PTR _maindir$[ebp]
	push	eax
	push	OFFSET _filebuf
	call	_strcpy
	add	esp, 8

; 754  : 	if (hirescapable) {

	cmp	DWORD PTR _hirescapable$[ebp], 0
	je	SHORT $LN1@OpenArtFil

; 755  : #if NIGHTFALCON_UI
; 756  : 		strcat(filebuf,"\\art");

	push	OFFSET ??_C@_04FLICLKIC@?2art?$AA@
	push	OFFSET _filebuf
	call	_strcat
	add	esp, 8
$LN1@OpenArtFil:

; 757  : #else
; 758  : 		if (g_bHiResUI){
; 759  : 			strcat(filebuf,"\\art1024");		// HiResUI
; 760  : 		}
; 761  : 		else{
; 762  : 			strcat(filebuf,"\\art");			// LoResUI
; 763  : 		}
; 764  : #endif
; 765  : 	}
; 766  : 	strcat(filebuf,"\\");

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	OFFSET _filebuf
	call	_strcat
	add	esp, 8

; 767  : 	strcat(filebuf,filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET _filebuf
	call	_strcat
	add	esp, 8

; 768  : 	return UI_OPEN(filebuf,"rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET _filebuf
	call	_ResFOpen
	add	esp, 8
$LN5@OpenArtFil:

; 769  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ENDP	; C_Parser::OpenArtFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 4
_ID$ = -44						; size = 4
_token$ = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_count$ = -28						; size = 4
_i$ = -24						; size = 4
_ifp$ = -20						; size = 4
_this$ = -16						; size = 4
_size$ = -12						; size = 4
_idfile$ = -8						; size = 4
_idx$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadIDTable@C_Parser@@AAEXPAD@Z PROC			; C_Parser::LoadIDTable
; _this$ = ecx

; 493  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 494  : 	UI_HANDLE ifp;
; 495  : 	long size;
; 496  : 	long count,i,idx;
; 497  : 	char *idfile;
; 498  : 	char *token;
; 499  : 	long ID;
; 500  : 
; 501  : //	ifp=UI_OPEN(filename,"rb");
; 502  : 	ifp = OpenArtFile(filename, FalconUIArtThrDirectory, FalconUIArtDirectory, 0);

	push	0
	push	OFFSET ?FalconUIArtDirectory@@3PADA	; FalconUIArtDirectory
	push	OFFSET ?FalconUIArtThrDirectory@@3PADA	; FalconUIArtThrDirectory
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenArtFile@C_Parser@@AAEPAU_iobuf@@PADPBD1H@Z ; C_Parser::OpenArtFile
	mov	DWORD PTR _ifp$[ebp], eax

; 503  : 
; 504  : 	if(ifp == NULL)

	cmp	DWORD PTR _ifp$[ebp], 0
	jne	SHORT $LN20@LoadIDTabl

; 505  : 	{
; 506  : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN20@LoadIDTabl

; 507  : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN20@LoadIDTabl

; 508  : 		    fprintf(Perror_,"LoadIDTable load failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BO@INFGEAJH@LoadIDTable?5load?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN20@LoadIDTabl:

; 509  : 	    }
; 510  : 	}
; 511  : 
; 512  : 	size=UI_FILESIZE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	?UI_FILESIZE@@YAJPAU_iobuf@@@Z		; UI_FILESIZE
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 513  : 
; 514  : 	if(!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN17@LoadIDTabl

; 515  : 	{
; 516  : 	    if (g_bLogUiErrors) {

	movzx	ecx, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	ecx, ecx
	je	SHORT $LN16@LoadIDTabl

; 517  : 		if(Perror_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+952], 0
	je	SHORT $LN16@LoadIDTabl

; 518  : 		    fprintf(Perror_,"LoadIDTable seek end failed (%s)\n",filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@JALCFDH@LoadIDTable?5seek?5end?5failed?5?$CI?$CFs?$CJ@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN16@LoadIDTabl:

; 519  : 	    }
; 520  : 	    UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4
$LN17@LoadIDTabl:

; 521  : 	}
; 522  : 
; 523  : 	idfile=new char [size+5]; // just in case :)

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 5
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _idfile$[ebp], edx

; 524  : 	if(UI_READ(idfile,size,1,ifp) != 1)

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idfile$[ebp]
	push	edx
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN14@LoadIDTabl

; 525  : 	{
; 526  : 	    if (g_bLogUiErrors) {

	movzx	eax, BYTE PTR ?g_bLogUiErrors@@3_NA	; g_bLogUiErrors
	test	eax, eax
	je	SHORT $LN13@LoadIDTabl

; 527  : 		if(Perror_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+952], 0
	je	SHORT $LN13@LoadIDTabl

; 528  : 		    fprintf(Perror_,"LoadIDTable read failed (%s)\n",filename);

	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0BO@IIPENBFP@LoadIDTable?5read?5failed?5?$CI?$CFs?$CJ?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN13@LoadIDTabl:

; 529  : 	    }
; 530  : 	    UI_CLOSE(ifp);

	mov	edx, DWORD PTR _ifp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 531  : 	    delete idfile;

	mov	eax, DWORD PTR _idfile$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 532  : 	    return;

	jmp	$LN21@LoadIDTabl
$LN14@LoadIDTabl:

; 533  : 	}
; 534  : 	idfile[size]=0;

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0

; 535  : 
; 536  : 	UI_CLOSE(ifp);

	mov	eax, DWORD PTR _ifp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 537  : 
; 538  : 	count=TokenizeIDs(idfile,size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idfile$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TokenizeIDs@C_Parser@@AAEJPADJ@Z	; C_Parser::TokenizeIDs
	mov	DWORD PTR _count$[ebp], eax

; 539  : 	if(count)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN11@LoadIDTabl

; 540  : 	{
; 541  : 		i=0;

	mov	DWORD PTR _i$[ebp], 0

; 542  : 		idx=0;

	mov	DWORD PTR _idx$[ebp], 0
$LN10@LoadIDTabl:

; 543  : 		while(i < count)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN11@LoadIDTabl
$LN8@LoadIDTabl:

; 544  : 		{
; 545  : 			while(!idfile[idx] && idx < size)

	mov	ecx, DWORD PTR _idfile$[ebp]
	add	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN7@LoadIDTabl
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN7@LoadIDTabl

; 546  : 				idx++;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
	jmp	SHORT $LN8@LoadIDTabl
$LN7@LoadIDTabl:

; 547  : 
; 548  : 			token=&idfile[idx];

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR _token$[ebp], edx
$LN6@LoadIDTabl:

; 549  : 
; 550  : 			while(idfile[idx] && idx < size)

	mov	eax, DWORD PTR _idfile$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@LoadIDTabl
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@LoadIDTabl

; 551  : 				idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
	jmp	SHORT $LN6@LoadIDTabl
$LN4@LoadIDTabl:

; 552  : 
; 553  : 			while(!idfile[idx] && idx < size)

	mov	ecx, DWORD PTR _idfile$[ebp]
	add	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN3@LoadIDTabl
	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@LoadIDTabl

; 554  : 				idx++;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx
	jmp	SHORT $LN4@LoadIDTabl
$LN3@LoadIDTabl:

; 555  : 
; 556  : 			ID=atol(&idfile[idx]);

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	push	edx
	call	_atol
	add	esp, 4
	mov	DWORD PTR _ID$[ebp], eax
$LN2@LoadIDTabl:

; 557  : 
; 558  : 			while(idfile[idx] && idx < size)

	mov	eax, DWORD PTR _idfile$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@LoadIDTabl
	mov	edx, DWORD PTR _idx$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN1@LoadIDTabl

; 559  : 				idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
	jmp	SHORT $LN2@LoadIDTabl
$LN1@LoadIDTabl:

; 560  : 
; 561  : 			TokenOrder_->AddTextID(ID,token);

	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+908]
	call	?AddTextID@C_Hash@@QAEJJPAD@Z		; C_Hash::AddTextID

; 562  : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 563  : 		}

	jmp	$LN10@LoadIDTabl
$LN11@LoadIDTabl:

; 564  : 	}
; 565  : 
; 566  : 	delete idfile;

	mov	edx, DWORD PTR _idfile$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN21@LoadIDTabl:

; 567  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadIDTable@C_Parser@@AAEXPAD@Z ENDP			; C_Parser::LoadIDTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_count$ = -12						; size = 4
_expecting$ = -8					; size = 4
_idx$ = -4						; size = 4
_idfile$ = 8						; size = 4
_size$ = 12						; size = 4
?TokenizeIDs@C_Parser@@AAEJPADJ@Z PROC			; C_Parser::TokenizeIDs
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 430  : 	long idx,count,expecting;
; 431  : 
; 432  : 	idx=0;

	mov	DWORD PTR _idx$[ebp], 0
$LN23@TokenizeID:

; 433  : 
; 434  : // remove ALL white space
; 435  : 	while(idx < size)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN22@TokenizeID

; 436  : 	{
; 437  : 		if(idfile[idx] <= ' ' || idfile[idx] == ',')

	mov	ecx, DWORD PTR _idfile$[ebp]
	add	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jle	SHORT $LN20@TokenizeID
	mov	eax, DWORD PTR _idfile$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 44					; 0000002cH
	jne	SHORT $LN21@TokenizeID
$LN20@TokenizeID:

; 438  : 			idfile[idx]=0;

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	mov	BYTE PTR [edx], 0
$LN21@TokenizeID:

; 439  : 		idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 440  : 	}

	jmp	SHORT $LN23@TokenizeID
$LN22@TokenizeID:

; 441  : 
; 442  : 	idx=0;

	mov	DWORD PTR _idx$[ebp], 0

; 443  : 	count=0;

	mov	DWORD PTR _count$[ebp], 0

; 444  : 	expecting=0;

	mov	DWORD PTR _expecting$[ebp], 0
$LN19@TokenizeID:

; 445  : 
; 446  : // expecting: 0-looking for ID,1-looking for end of id
; 447  : //            2-looking for value,3-looking for end of value
; 448  : 
; 449  : 	while(idx <= size)

	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jg	$LN18@TokenizeID

; 450  : 	{
; 451  : 		if(!idfile[idx])

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN17@TokenizeID

; 452  : 		{
; 453  : 			if(expecting == 1)

	cmp	DWORD PTR _expecting$[ebp], 1
	jne	SHORT $LN16@TokenizeID

; 454  : 				expecting=2;

	mov	DWORD PTR _expecting$[ebp], 2
	jmp	SHORT $LN15@TokenizeID
$LN16@TokenizeID:

; 455  : 			else if(expecting == 3)

	cmp	DWORD PTR _expecting$[ebp], 3
	jne	SHORT $LN15@TokenizeID

; 456  : 			{
; 457  : 				expecting=0;

	mov	DWORD PTR _expecting$[ebp], 0

; 458  : 				count++;

	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN15@TokenizeID:

; 459  : 			}
; 460  : 		}
; 461  : 		else

	jmp	$LN13@TokenizeID
$LN17@TokenizeID:

; 462  : 		{
; 463  : 			if(expecting == 0)

	cmp	DWORD PTR _expecting$[ebp], 0
	jne	SHORT $LN12@TokenizeID

; 464  : 			{
; 465  : 				if(isdigit(idfile[idx]) || idfile[idx] == '-')

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	movsx	eax, BYTE PTR [edx]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN10@TokenizeID
	mov	ecx, DWORD PTR _idfile$[ebp]
	add	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN11@TokenizeID
$LN10@TokenizeID:

; 466  : 					idfile[idx]=0;

	mov	eax, DWORD PTR _idfile$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	mov	BYTE PTR [eax], 0

; 467  : 				else

	jmp	SHORT $LN9@TokenizeID
$LN11@TokenizeID:

; 468  : 					expecting=1;

	mov	DWORD PTR _expecting$[ebp], 1
$LN9@TokenizeID:
	jmp	SHORT $LN13@TokenizeID
$LN12@TokenizeID:

; 469  : 			}
; 470  : 			else if(expecting == 2)

	cmp	DWORD PTR _expecting$[ebp], 2
	jne	SHORT $LN7@TokenizeID

; 471  : 			{
; 472  : 				if(isdigit(idfile[idx]) || idfile[idx] == '-')

	mov	ecx, DWORD PTR _idfile$[ebp]
	add	ecx, DWORD PTR _idx$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@TokenizeID
	mov	eax, DWORD PTR _idfile$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN6@TokenizeID
$LN5@TokenizeID:

; 473  : 					expecting=3;

	mov	DWORD PTR _expecting$[ebp], 3

; 474  : 				else

	jmp	SHORT $LN4@TokenizeID
$LN6@TokenizeID:

; 475  : 					idfile[idx]=0;

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	mov	BYTE PTR [edx], 0
$LN4@TokenizeID:
	jmp	SHORT $LN13@TokenizeID
$LN7@TokenizeID:

; 476  : 			}
; 477  : 			else if(expecting == 3)

	cmp	DWORD PTR _expecting$[ebp], 3
	jne	SHORT $LN13@TokenizeID

; 478  : 			{
; 479  : 				if(!isdigit(idfile[idx]))

	mov	eax, DWORD PTR _idfile$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN13@TokenizeID

; 480  : 				{
; 481  : 					idfile[idx]=0;

	mov	edx, DWORD PTR _idfile$[ebp]
	add	edx, DWORD PTR _idx$[ebp]
	mov	BYTE PTR [edx], 0

; 482  : 					count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 483  : 					expecting=0;

	mov	DWORD PTR _expecting$[ebp], 0
$LN13@TokenizeID:

; 484  : 				}
; 485  : 			}
; 486  : 		}
; 487  : 		idx++;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx

; 488  : 	}

	jmp	$LN19@TokenizeID
$LN18@TokenizeID:

; 489  : 	return(count);

	mov	eax, DWORD PTR _count$[ebp]

; 490  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?TokenizeIDs@C_Parser@@AAEJPADJ@Z ENDP			; C_Parser::TokenizeIDs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 2
_tbl$ = 8						; size = 4
?AddInternalIDs@C_Parser@@AAEXQAUID_TABLE@@@Z PROC	; C_Parser::AddInternalIDs
; _this$ = ecx

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 	short i;
; 418  : 
; 419  : 	i=0;

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
$LN2@AddInterna:

; 420  : 	while(tbl[i].Label[0])

	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 68					; 00000044H
	add	ecx, DWORD PTR _tbl$[ebp]
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR [ecx+edx]
	test	eax, eax
	je	SHORT $LN3@AddInterna

; 421  : 	{
; 422  : 
; 423  : 		TokenOrder_->AddTextID(tbl[i].Value,tbl[i].Label);

	movsx	ecx, WORD PTR _i$[ebp]
	imul	ecx, 68					; 00000044H
	add	ecx, DWORD PTR _tbl$[ebp]
	push	ecx
	movsx	edx, WORD PTR _i$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _tbl$[ebp]
	mov	ecx, DWORD PTR [eax+edx+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+908]
	call	?AddTextID@C_Hash@@QAEJJPAD@Z		; C_Hash::AddTextID

; 424  : 		i++;

	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax

; 425  : 	}

	jmp	SHORT $LN2@AddInterna
$LN3@AddInterna:

; 426  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddInternalIDs@C_Parser@@AAEXQAUID_TABLE@@@Z ENDP	; C_Parser::AddInternalIDs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
tv183 = -92						; size = 4
tv591 = -88						; size = 4
tv293 = -84						; size = 4
tv195 = -80						; size = 4
$T3 = -76						; size = 4
tv67 = -72						; size = 4
tv513 = -68						; size = 4
tv456 = -64						; size = 4
tv354 = -60						; size = 4
tv219 = -56						; size = 4
tv78 = -52						; size = 4
_InString$ = -48					; size = 4
_TokenID$ = -44						; size = 4
_this$ = -40						; size = 4
_TokenType$ = -36					; size = 2
_Comment$ = -32						; size = 2
_Finished$ = -28					; size = 2
_Done$ = -24						; size = 2
_Section$ = -20						; size = 2
_Found$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
?PopupParser@C_Parser@@AAEPAVC_Base@@XZ PROC		; C_Parser::PopupParser
; _this$ = ecx

; 3670 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3671 : 	int InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3672 : 	short Done=0,Comment=0,Found=0,Finished=0;;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _Finished$[ebp], ax

; 3673 : 	short Section=0,TokenType=0;

	xor	ecx, ecx
	mov	WORD PTR _Section$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _TokenType$[ebp], dx

; 3674 : 	long TokenID=0;

	mov	DWORD PTR _TokenID$[ebp], 0

; 3675 : 
; 3676 : 	Done=0;

	xor	eax, eax
	mov	WORD PTR _Done$[ebp], ax

; 3677 : 	Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3678 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 3679 : 	Section=SECTION_PROCESSTOKEN;

	mov	edx, 1
	mov	WORD PTR _Section$[ebp], dx

; 3680 : 	TokenType=TOKEN_NOTHING;

	xor	eax, eax
	mov	WORD PTR _TokenType$[ebp], ax
$LN98@PopupParse:

; 3681 : 
; 3682 : 	while(!Done)

	movsx	ecx, WORD PTR _Done$[ebp]
	test	ecx, ecx
	jne	$LN97@PopupParse

; 3683 : 	{
; 3684 : 		switch(Section)

	movsx	edx, WORD PTR _Section$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 5
	ja	$LN95@PopupParse
	mov	eax, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN110@PopupParse[eax*4]
$LN94@PopupParse:

; 3685 : 		{
; 3686 : 			case SECTION_FINDTOKEN:
; 3687 : 			// Look for token starting with '['
; 3688 : 				Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN93@PopupParse:

; 3689 : 				while(!Found && !Done)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN92@PopupParse
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN92@PopupParse

; 3690 : 				{
; 3691 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv78[ebp], edx
	mov	eax, DWORD PTR tv78[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 81			; 00000051H
	ja	$LN84@PopupParse
	mov	ecx, DWORD PTR tv78[ebp]
	movzx	edx, BYTE PTR $LN104@PopupParse[ecx]
	jmp	DWORD PTR $LN111@PopupParse[edx*4]
$LN89@PopupParse:

; 3692 : 					{
; 3693 : 						case '[':
; 3694 : 							if(!Comment && !InString)

	movsx	eax, WORD PTR _Comment$[ebp]
	test	eax, eax
	jne	SHORT $LN88@PopupParse
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN88@PopupParse

; 3695 : 							{
; 3696 : 								Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3697 : 								break;

	jmp	SHORT $LN90@PopupParse
$LN88@PopupParse:

; 3698 : 							}
; 3699 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3700 : 							break;

	jmp	SHORT $LN90@PopupParse
$LN87@PopupParse:

; 3701 : 						case '"':
; 3702 : 							InString=1-InString;

	mov	edx, 1
	sub	edx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], edx

; 3703 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3704 : 							break;

	jmp	SHORT $LN90@PopupParse
$LN86@PopupParse:

; 3705 : 						case '#':
; 3706 : 							Comment=1;

	mov	eax, 1
	mov	WORD PTR _Comment$[ebp], ax

; 3707 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3708 : 							break;

	jmp	SHORT $LN90@PopupParse
$LN85@PopupParse:

; 3709 : 						case 0x0a: case 0x0d:
; 3710 : 							Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3711 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3712 : 							break;

	jmp	SHORT $LN90@PopupParse
$LN84@PopupParse:

; 3713 : 						default:
; 3714 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN90@PopupParse:

; 3715 : 					}
; 3716 : 					if(Idx_ >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN83@PopupParse

; 3717 : 						Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx
$LN83@PopupParse:

; 3718 : 				}

	jmp	$LN93@PopupParse
$LN92@PopupParse:

; 3719 : 							
; 3720 : 				tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN82@PopupParse:

; 3721 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN81@PopupParse
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN81@PopupParse

; 3722 : 					tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	SHORT $LN82@PopupParse
$LN81@PopupParse:

; 3723 : 				tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 3724 : 
; 3725 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN80@PopupParse

; 3726 : 				{
; 3727 : 					Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx

; 3728 : 					break;

	jmp	$LN95@PopupParse
$LN80@PopupParse:

; 3729 : 				}
; 3730 : 
; 3731 : 				if(Found == 1)

	movsx	eax, WORD PTR _Found$[ebp]
	cmp	eax, 1
	jne	SHORT $LN79@PopupParse

; 3732 : 					Section=SECTION_PROCESSTOKEN;

	mov	ecx, 1
	mov	WORD PTR _Section$[ebp], cx
$LN79@PopupParse:

; 3733 : 				break;

	jmp	$LN95@PopupParse
$LN78@PopupParse:

; 3734 : 			case SECTION_PROCESSTOKEN:
; 3735 : 				TokenID=FindToken(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 3736 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	$LN77@PopupParse

; 3737 : 				{
; 3738 : 					Section=SECTION_FINDSUBTOKEN;

	mov	edx, 2
	mov	WORD PTR _Section$[ebp], dx

; 3739 : 					switch(TokenID)

	mov	eax, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv183[ebp], eax
	cmp	DWORD PTR tv183[ebp], 18		; 00000012H
	je	SHORT $LN74@PopupParse
	jmp	SHORT $LN73@PopupParse
$LN74@PopupParse:

; 3740 : 					{
; 3741 : 						case CPARSE_POPUP:
; 3742 : 							TokenType=TOKEN_COMMON;

	mov	ecx, 2
	mov	WORD PTR _TokenType$[ebp], cx

; 3743 : 							Control_=new C_PopupList;

	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN101@PopupParse
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_PopupList@@QAE@XZ			; C_PopupList::C_PopupList
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN102@PopupParse
$LN101@PopupParse:
	mov	DWORD PTR tv195[ebp], 0
$LN102@PopupParse:
	mov	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+72], ecx

; 3744 : 
; 3745 : 							break;

	jmp	SHORT $LN75@PopupParse
$LN73@PopupParse:

; 3746 : 						default:
; 3747 : 							Section=SECTION_FINDTOKEN;

	xor	edx, edx
	mov	WORD PTR _Section$[ebp], dx
$LN75@PopupParse:

; 3748 : 							break;
; 3749 : 					}
; 3750 : 					Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 3751 : 					tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 3752 : 				}
; 3753 : 				else

	jmp	SHORT $LN72@PopupParse
$LN77@PopupParse:

; 3754 : 				{
; 3755 : 					Section=SECTION_FINDTOKEN;

	xor	eax, eax
	mov	WORD PTR _Section$[ebp], ax

; 3756 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 3757 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN72@PopupParse:

; 3758 : 				}
; 3759 : 				break;

	jmp	$LN95@PopupParse
$LN71@PopupParse:

; 3760 : 			case SECTION_FINDSUBTOKEN:
; 3761 : 			// Look for token starting with '['
; 3762 : 				Found=0;

	xor	ecx, ecx
	mov	WORD PTR _Found$[ebp], cx
$LN70@PopupParse:

; 3763 : 				while(!Found && !Done)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN69@PopupParse
	movsx	eax, WORD PTR _Done$[ebp]
	test	eax, eax
	jne	$LN69@PopupParse

; 3764 : 				{
; 3765 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv219[ebp], edx
	mov	eax, DWORD PTR tv219[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv219[ebp], eax
	cmp	DWORD PTR tv219[ebp], 81		; 00000051H
	ja	$LN61@PopupParse
	mov	ecx, DWORD PTR tv219[ebp]
	movzx	edx, BYTE PTR $LN105@PopupParse[ecx]
	jmp	DWORD PTR $LN112@PopupParse[edx*4]
$LN66@PopupParse:

; 3766 : 					{
; 3767 : 						case '[':
; 3768 : 							if(!Comment && !InString)

	movsx	eax, WORD PTR _Comment$[ebp]
	test	eax, eax
	jne	SHORT $LN65@PopupParse
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN65@PopupParse

; 3769 : 							{
; 3770 : 								Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3771 : 								break;

	jmp	SHORT $LN67@PopupParse
$LN65@PopupParse:

; 3772 : 							}
; 3773 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3774 : 							break;

	jmp	SHORT $LN67@PopupParse
$LN64@PopupParse:

; 3775 : 						case '"':
; 3776 : 							InString=1-InString;

	mov	edx, 1
	sub	edx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], edx

; 3777 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3778 : 							break;

	jmp	SHORT $LN67@PopupParse
$LN63@PopupParse:

; 3779 : 						case '#':
; 3780 : 							Comment=1;

	mov	eax, 1
	mov	WORD PTR _Comment$[ebp], ax

; 3781 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 3782 : 							break;

	jmp	SHORT $LN67@PopupParse
$LN62@PopupParse:

; 3783 : 						case 0x0a: case 0x0d:
; 3784 : 							Comment=0;

	xor	ecx, ecx
	mov	WORD PTR _Comment$[ebp], cx

; 3785 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3786 : 							break;

	jmp	SHORT $LN67@PopupParse
$LN61@PopupParse:

; 3787 : 						default:
; 3788 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN67@PopupParse:

; 3789 : 					}
; 3790 : 					if(Idx_ >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN60@PopupParse

; 3791 : 						Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx
$LN60@PopupParse:

; 3792 : 				}

	jmp	$LN70@PopupParse
$LN69@PopupParse:

; 3793 : 							
; 3794 : 				tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN59@PopupParse:

; 3795 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN58@PopupParse
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN58@PopupParse

; 3796 : 					tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	SHORT $LN59@PopupParse
$LN58@PopupParse:

; 3797 : 				tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 3798 : 
; 3799 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN57@PopupParse

; 3800 : 				{
; 3801 : 					Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx

; 3802 : 					break;

	jmp	$LN95@PopupParse
$LN57@PopupParse:

; 3803 : 				}
; 3804 : 
; 3805 : 				if(Found == 1)

	movsx	eax, WORD PTR _Found$[ebp]
	cmp	eax, 1
	jne	SHORT $LN56@PopupParse

; 3806 : 					Section=SECTION_PROCESSSUBTOKEN;

	mov	ecx, 3
	mov	WORD PTR _Section$[ebp], cx
$LN56@PopupParse:

; 3807 : 				break;

	jmp	$LN95@PopupParse
$LN55@PopupParse:

; 3808 : 			case SECTION_PROCESSSUBTOKEN:
; 3809 : 				TokenID=FindToken(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 3810 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN54@PopupParse

; 3811 : 				{ // if found... this is a MAIN keyword NOT a Control/Window keyword
; 3812 : 					Done=1;

	mov	edx, 1
	mov	WORD PTR _Done$[ebp], dx

; 3813 : 					break;

	jmp	$LN95@PopupParse
$LN54@PopupParse:

; 3814 : 				}
; 3815 : 				switch(TokenType)

	movsx	eax, WORD PTR _TokenType$[ebp]
	mov	DWORD PTR tv293[ebp], eax
	cmp	DWORD PTR tv293[ebp], 2
	jl	$LN52@PopupParse
	cmp	DWORD PTR tv293[ebp], 3
	jle	SHORT $LN51@PopupParse
	jmp	$LN52@PopupParse
$LN51@PopupParse:

; 3816 : 				{
; 3817 : 					case TOKEN_COMMON:
; 3818 : 					case TOKEN_LOCAL:
; 3819 : 						TokenID=Control_->BaseFind(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?BaseFind@C_Base@@QAEFPAD@Z		; C_Base::BaseFind
	movsx	edx, ax
	mov	DWORD PTR _TokenID$[ebp], edx

; 3820 : 						if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN50@PopupParse

; 3821 : 						{
; 3822 : 							TokenType=TOKEN_COMMON;

	mov	eax, 2
	mov	WORD PTR _TokenType$[ebp], ax

; 3823 : 							Section=SECTION_FINDPARAMS;

	mov	ecx, 4
	mov	WORD PTR _Section$[ebp], cx

; 3824 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3825 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3826 : 						}
; 3827 : 						else

	jmp	SHORT $LN52@PopupParse
$LN50@PopupParse:

; 3828 : 						{
; 3829 : 							TokenID=Control_->LocalFind(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	movsx	ecx, ax
	mov	DWORD PTR _TokenID$[ebp], ecx

; 3830 : 							if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN48@PopupParse

; 3831 : 							{
; 3832 : 								Section=SECTION_FINDPARAMS;

	mov	edx, 4
	mov	WORD PTR _Section$[ebp], dx

; 3833 : 								TokenType=TOKEN_LOCAL;

	mov	eax, 3
	mov	WORD PTR _TokenType$[ebp], ax

; 3834 : 								Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 3835 : 								tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 3836 : 							}
; 3837 : 							else

	jmp	SHORT $LN52@PopupParse
$LN48@PopupParse:

; 3838 : 							{
; 3839 : 								Section=SECTION_FINDSUBTOKEN;

	mov	ecx, 2
	mov	WORD PTR _Section$[ebp], cx

; 3840 : 								Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN52@PopupParse:

; 3841 : 							}
; 3842 : 						}
; 3843 : 						break;
; 3844 : 				}
; 3845 : 				break;

	jmp	$LN95@PopupParse
$LN46@PopupParse:

; 3846 : 			case SECTION_FINDPARAMS:
; 3847 : 				P_Idx_=0; // start with 0 parameters

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+958], dx

; 3848 : 
; 3849 : 				// Repeat until token char '[' found (or EOF)
; 3850 : 				Finished=0;

	xor	ecx, ecx
	mov	WORD PTR _Finished$[ebp], cx
$LN45@PopupParse:

; 3851 : 				while(!Finished)

	movsx	edx, WORD PTR _Finished$[ebp]
	test	edx, edx
	jne	$LN44@PopupParse

; 3852 : 				{
; 3853 : 					// Find NON white space
; 3854 : 					Found=0;

	xor	eax, eax
	mov	WORD PTR _Found$[ebp], ax
$LN43@PopupParse:

; 3855 : 					while(!Found && !Done && !Finished)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	jne	$LN42@PopupParse
	movsx	edx, WORD PTR _Done$[ebp]
	test	edx, edx
	jne	$LN42@PopupParse
	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN42@PopupParse

; 3856 : 					{
; 3857 : 						switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv354[ebp], edx
	mov	eax, DWORD PTR tv354[ebp]
	sub	eax, 9
	mov	DWORD PTR tv354[ebp], eax
	cmp	DWORD PTR tv354[ebp], 82		; 00000052H
	ja	SHORT $LN37@PopupParse
	mov	ecx, DWORD PTR tv354[ebp]
	movzx	edx, BYTE PTR $LN106@PopupParse[ecx]
	jmp	DWORD PTR $LN113@PopupParse[edx*4]
$LN39@PopupParse:

; 3858 : 						{
; 3859 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3860 : 								Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 3861 : 								break;

	jmp	SHORT $LN40@PopupParse
$LN38@PopupParse:

; 3862 : 							case '[':
; 3863 : 								Finished=1;

	mov	eax, 1
	mov	WORD PTR _Finished$[ebp], ax

; 3864 : 								Section=SECTION_PROCESSPARAMS;

	mov	ecx, 5
	mov	WORD PTR _Section$[ebp], cx

; 3865 : 								break;

	jmp	SHORT $LN40@PopupParse
$LN37@PopupParse:

; 3866 : 							default:
; 3867 : 								Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx
$LN40@PopupParse:

; 3868 : 								break;
; 3869 : 						}
; 3870 : 						if(Idx_ >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN36@PopupParse

; 3871 : 						{
; 3872 : 							Finished=1;

	mov	eax, 1
	mov	WORD PTR _Finished$[ebp], ax

; 3873 : 							Section=SECTION_PROCESSPARAMS;

	mov	ecx, 5
	mov	WORD PTR _Section$[ebp], cx
$LN36@PopupParse:

; 3874 : 						}
; 3875 : 					}

	jmp	$LN43@PopupParse
$LN42@PopupParse:

; 3876 : 
; 3877 : 					if(Found)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	je	$LN35@PopupParse

; 3878 : 					{
; 3879 : 						Found=0;

	xor	eax, eax
	mov	WORD PTR _Found$[ebp], ax

; 3880 : 						if(script_[Idx_] == '"') // string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 34					; 00000022H
	jne	$LN34@PopupParse

; 3881 : 						{
; 3882 : 							tokenlen_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3883 : 							str_=&script_[Idx_+tokenlen_];

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx
$LN33@PopupParse:

; 3884 : 							// Find closing (")
; 3885 : 							while(!Found && !Finished)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	jne	SHORT $LN32@PopupParse
	movsx	ecx, WORD PTR _Finished$[ebp]
	test	ecx, ecx
	jne	SHORT $LN32@PopupParse

; 3886 : 							{
; 3887 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 34					; 00000022H
	jne	SHORT $LN31@PopupParse

; 3888 : 									Found=1;

	mov	eax, 1
	mov	WORD PTR _Found$[ebp], ax

; 3889 : 								else

	jmp	SHORT $LN30@PopupParse
$LN31@PopupParse:

; 3890 : 								{
; 3891 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN29@PopupParse

; 3892 : 									{
; 3893 : 										Finished=1;

	mov	edx, 1
	mov	WORD PTR _Finished$[ebp], dx

; 3894 : 										Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax

; 3895 : 									}
; 3896 : 									else

	jmp	SHORT $LN30@PopupParse
$LN29@PopupParse:

; 3897 : 										tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN30@PopupParse:

; 3898 : 								}
; 3899 : 							}

	jmp	SHORT $LN33@PopupParse
$LN32@PopupParse:

; 3900 : 							if(Found)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	SHORT $LN27@PopupParse

; 3901 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+eax], 0
$LN27@PopupParse:

; 3902 : 							Idx_+=tokenlen_+1;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3903 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	$LN35@PopupParse
$LN34@PopupParse:

; 3904 : 						}
; 3905 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN24@PopupParse
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 45					; 0000002dH
	jne	$LN25@PopupParse
$LN24@PopupParse:

; 3906 : 						{
; 3907 : 							// find white space
; 3908 : 							Found=0;

	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx

; 3909 : 							tokenlen_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN23@PopupParse:

; 3910 : 							while(!Found)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN22@PopupParse

; 3911 : 							{
; 3912 : 								switch(script_[Idx_ + tokenlen_])

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv456[ebp], eax
	mov	ecx, DWORD PTR tv456[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv456[ebp], ecx
	cmp	DWORD PTR tv456[ebp], 35		; 00000023H
	ja	SHORT $LN18@PopupParse
	mov	edx, DWORD PTR tv456[ebp]
	movzx	eax, BYTE PTR $LN107@PopupParse[edx]
	jmp	DWORD PTR $LN114@PopupParse[eax*4]
$LN19@PopupParse:

; 3913 : 								{
; 3914 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3915 : 										Found=1;

	mov	ecx, 1
	mov	WORD PTR _Found$[ebp], cx

; 3916 : 										break;

	jmp	SHORT $LN20@PopupParse
$LN18@PopupParse:

; 3917 : 									default:
; 3918 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN20@PopupParse:

; 3919 : 										break;
; 3920 : 								}
; 3921 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN17@PopupParse

; 3922 : 								{
; 3923 : 									Found=1;

	mov	eax, 1
	mov	WORD PTR _Found$[ebp], ax

; 3924 : 									Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3925 : 									Section=SECTION_PROCESSPARAMS;

	mov	edx, 5
	mov	WORD PTR _Section$[ebp], dx
$LN17@PopupParse:

; 3926 : 								}
; 3927 : 							}

	jmp	$LN23@PopupParse
$LN22@PopupParse:

; 3928 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	eax, WORD PTR _Found$[ebp]
	test	eax, eax
	je	SHORT $LN16@PopupParse
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	cmp	edx, 12					; 0000000cH
	jge	SHORT $LN16@PopupParse

; 3929 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN16@PopupParse:

; 3930 : 
; 3931 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 3932 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 3933 : 						}
; 3934 : 						else

	jmp	$LN35@PopupParse
$LN25@PopupParse:

; 3935 : 						{
; 3936 : 							// Look for ID in tables
; 3937 : 							// Look for white space
; 3938 : 							Found=0;

	xor	edx, edx
	mov	WORD PTR _Found$[ebp], dx

; 3939 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN14@PopupParse:

; 3940 : 							while(!Found && !Finished)

	movsx	edx, WORD PTR _Found$[ebp]
	test	edx, edx
	jne	$LN13@PopupParse
	movsx	eax, WORD PTR _Finished$[ebp]
	test	eax, eax
	jne	$LN13@PopupParse

; 3941 : 							{
; 3942 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv513[ebp], ecx
	mov	edx, DWORD PTR tv513[ebp]
	sub	edx, 9
	mov	DWORD PTR tv513[ebp], edx
	cmp	DWORD PTR tv513[ebp], 35		; 00000023H
	ja	SHORT $LN9@PopupParse
	mov	eax, DWORD PTR tv513[ebp]
	movzx	ecx, BYTE PTR $LN108@PopupParse[eax]
	jmp	DWORD PTR $LN115@PopupParse[ecx*4]
$LN10@PopupParse:

; 3943 : 								{
; 3944 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 3945 : 										Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3946 : 										break;

	jmp	SHORT $LN11@PopupParse
$LN9@PopupParse:

; 3947 : 									default:
; 3948 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN11@PopupParse:

; 3949 : 										break;
; 3950 : 								}
; 3951 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN8@PopupParse

; 3952 : 								{
; 3953 : 									Finished=1;

	mov	ecx, 1
	mov	WORD PTR _Finished$[ebp], cx

; 3954 : 									Found=1;

	mov	edx, 1
	mov	WORD PTR _Found$[ebp], dx

; 3955 : 									Section=SECTION_PROCESSPARAMS;

	mov	eax, 5
	mov	WORD PTR _Section$[ebp], ax
$LN8@PopupParse:

; 3956 : 								}
; 3957 : 							}

	jmp	$LN14@PopupParse
$LN13@PopupParse:

; 3958 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	movsx	ecx, WORD PTR _Found$[ebp]
	test	ecx, ecx
	je	$LN7@PopupParse
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	cmp	eax, 12					; 0000000cH
	jge	$LN7@PopupParse

; 3959 : 							{
; 3960 : 								script_[Idx_+tokenlen_]=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	BYTE PTR [eax+edx], 0

; 3961 : 								P_[P_Idx_++]=FindID(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 3962 : 								if(P_[P_Idx_-1] < 0 && strcmp(&script_[Idx_],"NID"))

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+8], 0
	jge	SHORT $LN7@PopupParse
	push	OFFSET ??_C@_03EOCODDKD@NID?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@PopupParse

; 3963 : 									TokenErrorList->AddText(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?AddText@C_Hash@@QAEJPBD@Z		; C_Hash::AddText
$LN7@PopupParse:

; 3964 : 							}
; 3965 : 							Idx_+=tokenlen_+1;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 3966 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN35@PopupParse:

; 3967 : 						}
; 3968 : 					}
; 3969 : 				}

	jmp	$LN45@PopupParse
$LN44@PopupParse:

; 3970 : 				break;

	jmp	$LN95@PopupParse
$LN5@PopupParse:

; 3971 : 			case SECTION_PROCESSPARAMS:
; 3972 : 				switch(TokenType)

	movsx	ecx, WORD PTR _TokenType$[ebp]
	mov	DWORD PTR tv591[ebp], ecx
	cmp	DWORD PTR tv591[ebp], 2
	je	SHORT $LN2@PopupParse
	cmp	DWORD PTR tv591[ebp], 3
	je	SHORT $LN1@PopupParse
	jmp	SHORT $LN3@PopupParse
$LN2@PopupParse:

; 3973 : 				{
; 3974 : 					case TOKEN_COMMON:
; 3975 : 						Control_->BaseFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	movzx	ecx, WORD PTR _TokenID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	?BaseFunction@C_Base@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Base::BaseFunction

; 3976 : 						break;

	jmp	SHORT $LN3@PopupParse
$LN1@PopupParse:

; 3977 : 					case TOKEN_LOCAL:
; 3978 : 						Control_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	movzx	edx, WORD PTR _TokenID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+72]
	mov	edx, DWORD PTR [eax+240]
	call	edx
$LN3@PopupParse:

; 3979 : 						break;
; 3980 : 				}
; 3981 : 				P_Idx_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax

; 3982 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0

; 3983 : 				str_=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 3984 : 				Section=SECTION_FINDSUBTOKEN;

	mov	ecx, 2
	mov	WORD PTR _Section$[ebp], cx
$LN95@PopupParse:

; 3985 : 				break;
; 3986 : 		}
; 3987 : 	}

	jmp	$LN98@PopupParse
$LN97@PopupParse:

; 3988 : 	return(Control_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]

; 3989 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN110@PopupParse:
	DD	$LN94@PopupParse
	DD	$LN78@PopupParse
	DD	$LN71@PopupParse
	DD	$LN55@PopupParse
	DD	$LN46@PopupParse
	DD	$LN5@PopupParse
$LN111@PopupParse:
	DD	$LN85@PopupParse
	DD	$LN87@PopupParse
	DD	$LN86@PopupParse
	DD	$LN89@PopupParse
	DD	$LN84@PopupParse
$LN104@PopupParse:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN112@PopupParse:
	DD	$LN62@PopupParse
	DD	$LN64@PopupParse
	DD	$LN63@PopupParse
	DD	$LN66@PopupParse
	DD	$LN61@PopupParse
$LN105@PopupParse:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN113@PopupParse:
	DD	$LN39@PopupParse
	DD	$LN38@PopupParse
	DD	$LN37@PopupParse
$LN106@PopupParse:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN114@PopupParse:
	DD	$LN19@PopupParse
	DD	$LN18@PopupParse
$LN107@PopupParse:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN115@PopupParse:
	DD	$LN10@PopupParse
	DD	$LN9@PopupParse
$LN108@PopupParse:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PopupParser@C_Parser@@AAEPAVC_Base@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?PopupParser@C_Parser@@AAEPAVC_Base@@XZ ENDP		; C_Parser::PopupParser
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
$T2 = -540						; size = 4
$T3 = -536						; size = 4
tv648 = -532						; size = 4
tv232 = -528						; size = 4
$T4 = -524						; size = 4
$T5 = -520						; size = 4
$T6 = -516						; size = 4
$T7 = -512						; size = 4
tv626 = -508						; size = 4
tv352 = -504						; size = 4
$T8 = -500						; size = 4
$T9 = -496						; size = 4
$T10 = -492						; size = 4
$T11 = -488						; size = 4
tv604 = -484						; size = 4
tv396 = -480						; size = 4
$T12 = -476						; size = 4
$T13 = -472						; size = 4
$T14 = -468						; size = 4
$T15 = -464						; size = 4
tv582 = -460						; size = 4
tv276 = -456						; size = 4
$T16 = -452						; size = 4
$T17 = -448						; size = 4
$T18 = -444						; size = 4
$T19 = -440						; size = 4
tv560 = -436						; size = 4
tv188 = -432						; size = 4
$T20 = -428						; size = 4
$T21 = -424						; size = 4
$T22 = -420						; size = 4
$T23 = -416						; size = 4
tv506 = -412						; size = 4
tv374 = -408						; size = 4
$T24 = -404						; size = 4
$T25 = -400						; size = 4
$T26 = -396						; size = 4
$T27 = -392						; size = 4
tv484 = -388						; size = 4
tv298 = -384						; size = 4
$T28 = -380						; size = 4
$T29 = -376						; size = 4
$T30 = -372						; size = 4
$T31 = -368						; size = 4
tv462 = -364						; size = 4
tv254 = -360						; size = 4
$T32 = -356						; size = 4
$T33 = -352						; size = 4
$T34 = -348						; size = 4
$T35 = -344						; size = 4
tv440 = -340						; size = 4
tv210 = -336						; size = 4
$T36 = -332						; size = 4
$T37 = -328						; size = 4
$T38 = -324						; size = 4
tv418 = -320						; size = 4
$T39 = -316						; size = 4
tv1045 = -312						; size = 4
$T40 = -308						; size = 4
tv761 = -304						; size = 4
$T41 = -300						; size = 4
tv660 = -296						; size = 4
$T42 = -292						; size = 4
$T43 = -288						; size = 4
$T44 = -284						; size = 4
tv638 = -280						; size = 4
$T45 = -276						; size = 4
$T46 = -272						; size = 4
$T47 = -268						; size = 4
tv616 = -264						; size = 4
$T48 = -260						; size = 4
$T49 = -256						; size = 4
$T50 = -252						; size = 4
tv594 = -248						; size = 4
$T51 = -244						; size = 4
tv66 = -240						; size = 4
$T52 = -236						; size = 4
tv572 = -232						; size = 4
tv408 = -228						; size = 4
$T53 = -224						; size = 4
tv386 = -220						; size = 4
tv550 = -216						; size = 4
tv364 = -212						; size = 4
$T54 = -208						; size = 4
tv310 = -204						; size = 4
tv496 = -200						; size = 4
tv288 = -196						; size = 4
$T55 = -192						; size = 4
tv266 = -188						; size = 4
tv474 = -184						; size = 4
tv244 = -180						; size = 4
$T56 = -176						; size = 4
tv222 = -172						; size = 4
tv452 = -168						; size = 4
tv200 = -164						; size = 4
$T57 = -160						; size = 4
tv430 = -156						; size = 4
$T58 = -152						; size = 4
$T59 = -148						; size = 4
$T60 = -144						; size = 4
$T61 = -140						; size = 4
$T62 = -136						; size = 4
$T63 = -132						; size = 4
$T64 = -128						; size = 4
$T65 = -124						; size = 4
$T66 = -120						; size = 4
$T67 = -116						; size = 4
$T68 = -112						; size = 4
$T69 = -108						; size = 4
$T70 = -104						; size = 4
$T71 = -100						; size = 4
$T72 = -96						; size = 4
$T73 = -92						; size = 4
$T74 = -88						; size = 4
$T75 = -84						; size = 4
$T76 = -80						; size = 4
$T77 = -76						; size = 4
tv969 = -72						; size = 4
tv75 = -68						; size = 4
tv915 = -64						; size = 4
tv178 = -60						; size = 4
tv818 = -56						; size = 4
tv690 = -52						; size = 4
_Comment$ = -48						; size = 4
_InString$ = -44					; size = 4
_Finished$ = -40					; size = 4
_TokenID$ = -36						; size = 4
_Done$ = -32						; size = 4
_Section$ = -28						; size = 4
_TokenType$ = -24					; size = 4
_Found$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ControlParser@C_Parser@@AAEPAVC_Base@@XZ PROC		; C_Parser::ControlParser
; _this$ = ecx

; 1477 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 528				; 00000210H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1478 : 	long Done=0,Comment=0,Found=0,InString=0,Finished=0;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0
	mov	DWORD PTR _Finished$[ebp], 0

; 1479 : 	long TokenID =0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 1480 : 
; 1481 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 1482 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1483 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 1484 : 	Control_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 1485 : 	Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1

; 1486 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN137@ControlPar:

; 1487 : 
; 1488 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN136@ControlPar

; 1489 : 	{
; 1490 : 		switch(Section)

	mov	ecx, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 5
	ja	$LN134@ControlPar
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN241@ControlPar[edx*4]
$LN133@ControlPar:

; 1491 : 		{
; 1492 : 			case SECTION_FINDTOKEN:
; 1493 : 			// Look for token starting with '['
; 1494 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN132@ControlPar:

; 1495 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN131@ControlPar
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN131@ControlPar

; 1496 : 				{
; 1497 : 					switch(script_[Idx_])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR tv75[ebp]
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR tv75[ebp], edx
	cmp	DWORD PTR tv75[ebp], 81			; 00000051H
	ja	SHORT $LN123@ControlPar
	mov	eax, DWORD PTR tv75[ebp]
	movzx	ecx, BYTE PTR $LN235@ControlPar[eax]
	jmp	DWORD PTR $LN242@ControlPar[ecx*4]
$LN128@ControlPar:

; 1498 : 					{
; 1499 : 						case '[':
; 1500 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN127@ControlPar
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN127@ControlPar

; 1501 : 							{
; 1502 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1503 : 								break;

	jmp	SHORT $LN129@ControlPar
$LN127@ControlPar:

; 1504 : 							}
; 1505 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1506 : 							break;

	jmp	SHORT $LN129@ControlPar
$LN126@ControlPar:

; 1507 : 						case '"':
; 1508 : 							InString=1-InString;

	mov	edx, 1
	sub	edx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], edx

; 1509 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1510 : 							break;

	jmp	SHORT $LN129@ControlPar
$LN125@ControlPar:

; 1511 : 						case '#':
; 1512 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 1513 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1514 : 							break;

	jmp	SHORT $LN129@ControlPar
$LN124@ControlPar:

; 1515 : 						case 0x0a: case 0x0d:
; 1516 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1517 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1518 : 							break;

	jmp	SHORT $LN129@ControlPar
$LN123@ControlPar:

; 1519 : 						default:
; 1520 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN129@ControlPar:

; 1521 : 					}
; 1522 : 					if(Idx_ >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN122@ControlPar

; 1523 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN122@ControlPar:

; 1524 : 				}

	jmp	$LN132@ControlPar
$LN131@ControlPar:

; 1525 : 							
; 1526 : 				tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN121@ControlPar:

; 1527 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN120@ControlPar
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN120@ControlPar

; 1528 : 					tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
	jmp	SHORT $LN121@ControlPar
$LN120@ControlPar:

; 1529 : 				tokenlen_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+956]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 1530 : 
; 1531 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN119@ControlPar

; 1532 : 				{
; 1533 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1534 : 					break;

	jmp	$LN134@ControlPar
$LN119@ControlPar:

; 1535 : 				}
; 1536 : 
; 1537 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN118@ControlPar

; 1538 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN118@ControlPar:

; 1539 : 				break;

	jmp	$LN134@ControlPar
$LN117@ControlPar:

; 1540 : 			case SECTION_PROCESSTOKEN:
; 1541 :  				TokenID=FindToken(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 1542 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	$LN116@ControlPar

; 1543 : 				{
; 1544 : 					Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2

; 1545 : 					switch(TokenID)

	mov	edx, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv178[ebp], edx
	mov	eax, DWORD PTR tv178[ebp]
	sub	eax, 1
	mov	DWORD PTR tv178[ebp], eax
	cmp	DWORD PTR tv178[ebp], 26		; 0000001aH
	ja	$LN73@ControlPar
	mov	ecx, DWORD PTR tv178[ebp]
	jmp	DWORD PTR $LN243@ControlPar[ecx*4]
$LN113@ControlPar:

; 1546 : 					{
; 1547 : 						case CPARSE_WINDOW:
; 1548 : 							Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1549 : 							break;

	jmp	$LN114@ControlPar
$LN112@ControlPar:

; 1550 : 						case CPARSE_BUTTON:
; 1551 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1552 : 							if(Control_) delete Control_;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	je	SHORT $LN111@ControlPar
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR $T33[ebp], ecx
	mov	edx, DWORD PTR $T33[ebp]
	mov	DWORD PTR $T60[ebp], edx
	cmp	DWORD PTR $T60[ebp], 0
	je	SHORT $LN140@ControlPar
	push	1
	mov	eax, DWORD PTR $T60[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T60[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv188[ebp], eax
	jmp	SHORT $LN111@ControlPar
$LN140@ControlPar:
	mov	DWORD PTR tv188[ebp], 0
$LN111@ControlPar:

; 1553 : 							Control_=new C_Button;

	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T52[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T52[ebp], 0
	je	SHORT $LN142@ControlPar
	mov	ecx, DWORD PTR $T52[ebp]
	call	??0C_Button@@QAE@XZ			; C_Button::C_Button
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN143@ControlPar
$LN142@ControlPar:
	mov	DWORD PTR tv200[ebp], 0
$LN143@ControlPar:
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR $T37[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T37[ebp]
	mov	DWORD PTR [edx+72], eax

; 1554 : 							break;

	jmp	$LN114@ControlPar
$LN110@ControlPar:

; 1555 : 						case CPARSE_TEXT:
; 1556 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1557 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN109@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T11[ebp], eax
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR $T77[ebp], ecx
	cmp	DWORD PTR $T77[ebp], 0
	je	SHORT $LN144@ControlPar
	push	1
	mov	edx, DWORD PTR $T77[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T77[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv210[ebp], eax
	jmp	SHORT $LN109@ControlPar
$LN144@ControlPar:
	mov	DWORD PTR tv210[ebp], 0
$LN109@ControlPar:

; 1558 : 							Control_=new C_Text;

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T45[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T45[ebp], 0
	je	SHORT $LN146@ControlPar
	mov	ecx, DWORD PTR $T45[ebp]
	call	??0C_Text@@QAE@XZ			; C_Text::C_Text
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN147@ControlPar
$LN146@ControlPar:
	mov	DWORD PTR tv222[ebp], 0
$LN147@ControlPar:
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR $T19[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T19[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1559 : 							break;

	jmp	$LN114@ControlPar
$LN108@ControlPar:

; 1560 : 						case CPARSE_VERSIONTEXT:
; 1561 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1562 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN107@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T35[ebp], edx
	mov	eax, DWORD PTR $T35[ebp]
	mov	DWORD PTR $T74[ebp], eax
	cmp	DWORD PTR $T74[ebp], 0
	je	SHORT $LN148@ControlPar
	push	1
	mov	ecx, DWORD PTR $T74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T74[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv232[ebp], eax
	jmp	SHORT $LN107@ControlPar
$LN148@ControlPar:
	mov	DWORD PTR tv232[ebp], 0
$LN107@ControlPar:

; 1563 : 							Control_ = new C_VersionText;

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T51[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T51[ebp], 0
	je	SHORT $LN150@ControlPar
	mov	ecx, DWORD PTR $T51[ebp]
	call	??0C_VersionText@@QAE@XZ		; C_VersionText::C_VersionText
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN151@ControlPar
$LN150@ControlPar:
	mov	DWORD PTR tv244[ebp], 0
$LN151@ControlPar:
	mov	ecx, DWORD PTR tv244[ebp]
	mov	DWORD PTR $T39[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T39[ebp]
	mov	DWORD PTR [edx+72], eax

; 1564 : 							break;

	jmp	$LN114@ControlPar

; 1565 : 						break;

	jmp	$LN114@ControlPar
$LN106@ControlPar:

; 1566 : 						case CPARSE_EDITBOX:
; 1567 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1568 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN105@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T17[ebp], eax
	mov	ecx, DWORD PTR $T17[ebp]
	mov	DWORD PTR $T66[ebp], ecx
	cmp	DWORD PTR $T66[ebp], 0
	je	SHORT $LN152@ControlPar
	push	1
	mov	edx, DWORD PTR $T66[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T66[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv254[ebp], eax
	jmp	SHORT $LN105@ControlPar
$LN152@ControlPar:
	mov	DWORD PTR tv254[ebp], 0
$LN105@ControlPar:

; 1569 : 							Control_=new C_EditBox;

	push	184					; 000000b8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T40[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T40[ebp], 0
	je	SHORT $LN154@ControlPar
	mov	ecx, DWORD PTR $T40[ebp]
	call	??0C_EditBox@@QAE@XZ			; C_EditBox::C_EditBox
	mov	DWORD PTR tv266[ebp], eax
	jmp	SHORT $LN155@ControlPar
$LN154@ControlPar:
	mov	DWORD PTR tv266[ebp], 0
$LN155@ControlPar:
	mov	eax, DWORD PTR tv266[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1570 : 							break;

	jmp	$LN114@ControlPar
$LN104@ControlPar:

; 1571 : 						case CPARSE_LISTBOX:
; 1572 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1573 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN103@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T31[ebp], edx
	mov	eax, DWORD PTR $T31[ebp]
	mov	DWORD PTR $T72[ebp], eax
	cmp	DWORD PTR $T72[ebp], 0
	je	SHORT $LN156@ControlPar
	push	1
	mov	ecx, DWORD PTR $T72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T72[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv276[ebp], eax
	jmp	SHORT $LN103@ControlPar
$LN156@ControlPar:
	mov	DWORD PTR tv276[ebp], 0
$LN103@ControlPar:

; 1574 : 							Control_=new C_ListBox;

	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T50[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T50[ebp], 0
	je	SHORT $LN158@ControlPar
	mov	ecx, DWORD PTR $T50[ebp]
	call	??0C_ListBox@@QAE@XZ			; C_ListBox::C_ListBox
	mov	DWORD PTR tv288[ebp], eax
	jmp	SHORT $LN159@ControlPar
$LN158@ControlPar:
	mov	DWORD PTR tv288[ebp], 0
$LN159@ControlPar:
	mov	ecx, DWORD PTR tv288[ebp]
	mov	DWORD PTR $T29[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T29[ebp]
	mov	DWORD PTR [edx+72], eax

; 1575 : 							break;

	jmp	$LN114@ControlPar
$LN102@ControlPar:

; 1576 : 						case CPARSE_SLIDER:
; 1577 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1578 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN101@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T62[ebp], ecx
	cmp	DWORD PTR $T62[ebp], 0
	je	SHORT $LN160@ControlPar
	push	1
	mov	edx, DWORD PTR $T62[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T62[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN101@ControlPar
$LN160@ControlPar:
	mov	DWORD PTR tv298[ebp], 0
$LN101@ControlPar:

; 1579 : 							Control_=new C_Slider;

	push	140					; 0000008cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T44[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T44[ebp], 0
	je	SHORT $LN162@ControlPar
	mov	ecx, DWORD PTR $T44[ebp]
	call	??0C_Slider@@QAE@XZ			; C_Slider::C_Slider
	mov	DWORD PTR tv310[ebp], eax
	jmp	SHORT $LN163@ControlPar
$LN162@ControlPar:
	mov	DWORD PTR tv310[ebp], 0
$LN163@ControlPar:
	mov	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T15[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1580 : 							break;

	jmp	$LN114@ControlPar
$LN100@ControlPar:

; 1581 : 						//case CPARSE_ACMI:
; 1582 : 						//	TokenType=TOKEN_COMMON;
; 1583 : 						//	Control_=new C_Acmi;
; 1584 : 						//	break;
; 1585 : 						case CPARSE_PANNER:
; 1586 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1587 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN99@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T27[ebp], edx
	mov	eax, DWORD PTR $T27[ebp]
	mov	DWORD PTR $T70[ebp], eax
	cmp	DWORD PTR $T70[ebp], 0
	je	SHORT $LN164@ControlPar
	push	1
	mov	ecx, DWORD PTR $T70[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T70[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv352[ebp], eax
	jmp	SHORT $LN99@ControlPar
$LN164@ControlPar:
	mov	DWORD PTR tv352[ebp], 0
$LN99@ControlPar:

; 1588 : 							Control_=new C_Panner;

	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T48[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T48[ebp], 0
	je	SHORT $LN166@ControlPar
	mov	ecx, DWORD PTR $T48[ebp]
	call	??0C_Panner@@QAE@XZ			; C_Panner::C_Panner
	mov	DWORD PTR tv364[ebp], eax
	jmp	SHORT $LN167@ControlPar
$LN166@ControlPar:
	mov	DWORD PTR tv364[ebp], 0
$LN167@ControlPar:
	mov	ecx, DWORD PTR tv364[ebp]
	mov	DWORD PTR $T25[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T25[ebp]
	mov	DWORD PTR [edx+72], eax

; 1589 : 							break;

	jmp	$LN114@ControlPar
$LN98@ControlPar:

; 1590 : 						case CPARSE_SCROLLBAR:
; 1591 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1592 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN97@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T13[ebp], eax
	mov	ecx, DWORD PTR $T13[ebp]
	mov	DWORD PTR $T64[ebp], ecx
	cmp	DWORD PTR $T64[ebp], 0
	je	SHORT $LN168@ControlPar
	push	1
	mov	edx, DWORD PTR $T64[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T64[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv374[ebp], eax
	jmp	SHORT $LN97@ControlPar
$LN168@ControlPar:
	mov	DWORD PTR tv374[ebp], 0
$LN97@ControlPar:

; 1593 : 							Control_=new C_ScrollBar;

	push	204					; 000000ccH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T41[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T41[ebp], 0
	je	SHORT $LN170@ControlPar
	mov	ecx, DWORD PTR $T41[ebp]
	call	??0C_ScrollBar@@QAE@XZ			; C_ScrollBar::C_ScrollBar
	mov	DWORD PTR tv386[ebp], eax
	jmp	SHORT $LN171@ControlPar
$LN170@ControlPar:
	mov	DWORD PTR tv386[ebp], 0
$LN171@ControlPar:
	mov	eax, DWORD PTR tv386[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1594 : 							break;

	jmp	$LN114@ControlPar
$LN96@ControlPar:

; 1595 : 						case CPARSE_TREELIST:
; 1596 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1597 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN95@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T23[ebp], edx
	mov	eax, DWORD PTR $T23[ebp]
	mov	DWORD PTR $T68[ebp], eax
	cmp	DWORD PTR $T68[ebp], 0
	je	SHORT $LN172@ControlPar
	push	1
	mov	ecx, DWORD PTR $T68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T68[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv396[ebp], eax
	jmp	SHORT $LN95@ControlPar
$LN172@ControlPar:
	mov	DWORD PTR tv396[ebp], 0
$LN95@ControlPar:

; 1598 : 							Control_=new C_TreeList;

	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T47[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T47[ebp], 0
	je	SHORT $LN174@ControlPar
	mov	ecx, DWORD PTR $T47[ebp]
	call	??0C_TreeList@@QAE@XZ			; C_TreeList::C_TreeList
	mov	DWORD PTR tv408[ebp], eax
	jmp	SHORT $LN175@ControlPar
$LN174@ControlPar:
	mov	DWORD PTR tv408[ebp], 0
$LN175@ControlPar:
	mov	ecx, DWORD PTR tv408[ebp]
	mov	DWORD PTR $T21[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T21[ebp]
	mov	DWORD PTR [edx+72], eax

; 1599 : 							break;

	jmp	$LN114@ControlPar
$LN94@ControlPar:

; 1600 : 						case CPARSE_BITMAP:
; 1601 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1602 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN93@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T7[ebp], eax
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T76[ebp], ecx
	cmp	DWORD PTR $T76[ebp], 0
	je	SHORT $LN176@ControlPar
	push	1
	mov	edx, DWORD PTR $T76[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T76[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv418[ebp], eax
	jmp	SHORT $LN93@ControlPar
$LN176@ControlPar:
	mov	DWORD PTR tv418[ebp], 0
$LN93@ControlPar:

; 1603 : 							Control_=new C_Bitmap;

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T42[ebp], 0
	je	SHORT $LN178@ControlPar
	mov	ecx, DWORD PTR $T42[ebp]
	call	??0C_Bitmap@@QAE@XZ			; C_Bitmap::C_Bitmap
	mov	DWORD PTR tv430[ebp], eax
	jmp	SHORT $LN179@ControlPar
$LN178@ControlPar:
	mov	DWORD PTR tv430[ebp], 0
$LN179@ControlPar:
	mov	eax, DWORD PTR tv430[ebp]
	mov	DWORD PTR $T38[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T38[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1604 : 							break;

	jmp	$LN114@ControlPar
$LN92@ControlPar:

; 1605 : 						case CPARSE_TILE:
; 1606 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1607 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN91@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T36[ebp], edx
	mov	eax, DWORD PTR $T36[ebp]
	mov	DWORD PTR $T75[ebp], eax
	cmp	DWORD PTR $T75[ebp], 0
	je	SHORT $LN180@ControlPar
	push	1
	mov	ecx, DWORD PTR $T75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T75[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv440[ebp], eax
	jmp	SHORT $LN91@ControlPar
$LN180@ControlPar:
	mov	DWORD PTR tv440[ebp], 0
$LN91@ControlPar:

; 1608 : 							Control_=new C_Tile;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T57[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T57[ebp], 0
	je	SHORT $LN182@ControlPar
	mov	ecx, DWORD PTR $T57[ebp]
	call	??0C_Tile@@QAE@XZ			; C_Tile::C_Tile
	mov	DWORD PTR tv452[ebp], eax
	jmp	SHORT $LN183@ControlPar
$LN182@ControlPar:
	mov	DWORD PTR tv452[ebp], 0
$LN183@ControlPar:
	mov	ecx, DWORD PTR tv452[ebp]
	mov	DWORD PTR $T34[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T34[ebp]
	mov	DWORD PTR [edx+72], eax

; 1609 : 							break;

	jmp	$LN114@ControlPar
$LN90@ControlPar:

; 1610 : 						case CPARSE_ANIM:
; 1611 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1612 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN89@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T32[ebp], eax
	mov	ecx, DWORD PTR $T32[ebp]
	mov	DWORD PTR $T73[ebp], ecx
	cmp	DWORD PTR $T73[ebp], 0
	je	SHORT $LN184@ControlPar
	push	1
	mov	edx, DWORD PTR $T73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T73[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv462[ebp], eax
	jmp	SHORT $LN89@ControlPar
$LN184@ControlPar:
	mov	DWORD PTR tv462[ebp], 0
$LN89@ControlPar:

; 1613 : 							Control_=new C_Anim;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T56[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T56[ebp], 0
	je	SHORT $LN186@ControlPar
	mov	ecx, DWORD PTR $T56[ebp]
	call	??0C_Anim@@QAE@XZ			; C_Anim::C_Anim
	mov	DWORD PTR tv474[ebp], eax
	jmp	SHORT $LN187@ControlPar
$LN186@ControlPar:
	mov	DWORD PTR tv474[ebp], 0
$LN187@ControlPar:
	mov	eax, DWORD PTR tv474[ebp]
	mov	DWORD PTR $T30[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T30[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1614 : 							break;

	jmp	$LN114@ControlPar
$LN88@ControlPar:

; 1615 : 						case CPARSE_CURSOR:
; 1616 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1617 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN87@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T28[ebp], edx
	mov	eax, DWORD PTR $T28[ebp]
	mov	DWORD PTR $T71[ebp], eax
	cmp	DWORD PTR $T71[ebp], 0
	je	SHORT $LN188@ControlPar
	push	1
	mov	ecx, DWORD PTR $T71[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T71[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv484[ebp], eax
	jmp	SHORT $LN87@ControlPar
$LN188@ControlPar:
	mov	DWORD PTR tv484[ebp], 0
$LN87@ControlPar:

; 1618 : 							Control_=new C_Cursor;

	push	124					; 0000007cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T55[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	cmp	DWORD PTR $T55[ebp], 0
	je	SHORT $LN190@ControlPar
	mov	ecx, DWORD PTR $T55[ebp]
	call	??0C_Cursor@@QAE@XZ			; C_Cursor::C_Cursor
	mov	DWORD PTR tv496[ebp], eax
	jmp	SHORT $LN191@ControlPar
$LN190@ControlPar:
	mov	DWORD PTR tv496[ebp], 0
$LN191@ControlPar:
	mov	ecx, DWORD PTR tv496[ebp]
	mov	DWORD PTR $T26[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T26[ebp]
	mov	DWORD PTR [edx+72], eax

; 1619 : 							break;

	jmp	$LN114@ControlPar
$LN86@ControlPar:

; 1620 : 						case CPARSE_MARQUE:
; 1621 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1622 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN85@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T24[ebp], eax
	mov	ecx, DWORD PTR $T24[ebp]
	mov	DWORD PTR $T69[ebp], ecx
	cmp	DWORD PTR $T69[ebp], 0
	je	SHORT $LN192@ControlPar
	push	1
	mov	edx, DWORD PTR $T69[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T69[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv506[ebp], eax
	jmp	SHORT $LN85@ControlPar
$LN192@ControlPar:
	mov	DWORD PTR tv506[ebp], 0
$LN85@ControlPar:

; 1623 : 							Control_=new C_Marque;

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T54[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	cmp	DWORD PTR $T54[ebp], 0
	je	SHORT $LN194@ControlPar
	mov	ecx, DWORD PTR $T54[ebp]
	call	??0C_Marque@@QAE@XZ			; C_Marque::C_Marque
	mov	DWORD PTR tv550[ebp], eax
	jmp	SHORT $LN195@ControlPar
$LN194@ControlPar:
	mov	DWORD PTR tv550[ebp], 0
$LN195@ControlPar:
	mov	eax, DWORD PTR tv550[ebp]
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T22[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1624 : 							break;

	jmp	$LN114@ControlPar
$LN84@ControlPar:

; 1625 : 						case CPARSE_BOX:
; 1626 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1627 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN83@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T20[ebp], edx
	mov	eax, DWORD PTR $T20[ebp]
	mov	DWORD PTR $T67[ebp], eax
	cmp	DWORD PTR $T67[ebp], 0
	je	SHORT $LN196@ControlPar
	push	1
	mov	ecx, DWORD PTR $T67[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T67[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv560[ebp], eax
	jmp	SHORT $LN83@ControlPar
$LN196@ControlPar:
	mov	DWORD PTR tv560[ebp], 0
$LN83@ControlPar:

; 1628 : 							Control_=new C_Box;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T53[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T53[ebp], 0
	je	SHORT $LN198@ControlPar
	mov	ecx, DWORD PTR $T53[ebp]
	call	??0C_Box@@QAE@XZ			; C_Box::C_Box
	mov	DWORD PTR tv572[ebp], eax
	jmp	SHORT $LN199@ControlPar
$LN198@ControlPar:
	mov	DWORD PTR tv572[ebp], 0
$LN199@ControlPar:
	mov	ecx, DWORD PTR tv572[ebp]
	mov	DWORD PTR $T18[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T18[ebp]
	mov	DWORD PTR [edx+72], eax

; 1629 : 							break;

	jmp	$LN114@ControlPar
$LN82@ControlPar:

; 1630 : 						case CPARSE_LINE:
; 1631 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1632 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN81@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T16[ebp], eax
	mov	ecx, DWORD PTR $T16[ebp]
	mov	DWORD PTR $T65[ebp], ecx
	cmp	DWORD PTR $T65[ebp], 0
	je	SHORT $LN200@ControlPar
	push	1
	mov	edx, DWORD PTR $T65[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T65[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv582[ebp], eax
	jmp	SHORT $LN81@ControlPar
$LN200@ControlPar:
	mov	DWORD PTR tv582[ebp], 0
$LN81@ControlPar:

; 1633 : 							Control_=new C_Line;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T58[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	cmp	DWORD PTR $T58[ebp], 0
	je	SHORT $LN202@ControlPar
	mov	ecx, DWORD PTR $T58[ebp]
	call	??0C_Line@@QAE@XZ			; C_Line::C_Line
	mov	DWORD PTR tv594[ebp], eax
	jmp	SHORT $LN203@ControlPar
$LN202@ControlPar:
	mov	DWORD PTR tv594[ebp], 0
$LN203@ControlPar:
	mov	eax, DWORD PTR tv594[ebp]
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T14[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1634 : 							break;

	jmp	$LN114@ControlPar
$LN80@ControlPar:

; 1635 : 						case CPARSE_CLOCK:
; 1636 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1637 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN79@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T12[ebp], edx
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T63[ebp], eax
	cmp	DWORD PTR $T63[ebp], 0
	je	SHORT $LN204@ControlPar
	push	1
	mov	ecx, DWORD PTR $T63[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T63[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv604[ebp], eax
	jmp	SHORT $LN79@ControlPar
$LN204@ControlPar:
	mov	DWORD PTR tv604[ebp], 0
$LN79@ControlPar:

; 1638 : 							Control_=new C_Clock;

	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T49[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T49[ebp], 0
	je	SHORT $LN206@ControlPar
	mov	ecx, DWORD PTR $T49[ebp]
	call	??0C_Clock@@QAE@XZ			; C_Clock::C_Clock
	mov	DWORD PTR tv616[ebp], eax
	jmp	SHORT $LN207@ControlPar
$LN206@ControlPar:
	mov	DWORD PTR tv616[ebp], 0
$LN207@ControlPar:
	mov	ecx, DWORD PTR tv616[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T10[ebp]
	mov	DWORD PTR [edx+72], eax

; 1639 : 							break;

	jmp	$LN114@ControlPar
$LN78@ControlPar:

; 1640 : 						case CPARSE_FILL:
; 1641 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1642 : 							if(Control_) delete Control_;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN77@ControlPar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T61[ebp], ecx
	cmp	DWORD PTR $T61[ebp], 0
	je	SHORT $LN208@ControlPar
	push	1
	mov	edx, DWORD PTR $T61[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T61[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv626[ebp], eax
	jmp	SHORT $LN77@ControlPar
$LN208@ControlPar:
	mov	DWORD PTR tv626[ebp], 0
$LN77@ControlPar:

; 1643 : 							Control_=new C_Fill;

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T46[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T46[ebp], 0
	je	SHORT $LN210@ControlPar
	mov	ecx, DWORD PTR $T46[ebp]
	call	??0C_Fill@@QAE@XZ			; C_Fill::C_Fill
	mov	DWORD PTR tv638[ebp], eax
	jmp	SHORT $LN211@ControlPar
$LN210@ControlPar:
	mov	DWORD PTR tv638[ebp], 0
$LN211@ControlPar:
	mov	eax, DWORD PTR tv638[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+72], edx

; 1644 : 							break;

	jmp	$LN114@ControlPar
$LN76@ControlPar:

; 1645 : 						case CPARSE_TREE:
; 1646 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1647 : 							if(Control_) delete Control_;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN75@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T59[ebp], eax
	cmp	DWORD PTR $T59[ebp], 0
	je	SHORT $LN212@ControlPar
	push	1
	mov	ecx, DWORD PTR $T59[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T59[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv648[ebp], eax
	jmp	SHORT $LN75@ControlPar
$LN212@ControlPar:
	mov	DWORD PTR tv648[ebp], 0
$LN75@ControlPar:

; 1648 : 							Control_=new C_TreeList;

	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T43[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T43[ebp], 0
	je	SHORT $LN214@ControlPar
	mov	ecx, DWORD PTR $T43[ebp]
	call	??0C_TreeList@@QAE@XZ			; C_TreeList::C_TreeList
	mov	DWORD PTR tv660[ebp], eax
	jmp	SHORT $LN215@ControlPar
$LN214@ControlPar:
	mov	DWORD PTR tv660[ebp], 0
$LN215@ControlPar:
	mov	ecx, DWORD PTR tv660[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+72], eax

; 1649 : 							break;

	jmp	SHORT $LN114@ControlPar
$LN74@ControlPar:

; 1650 : 						case CPARSE_ANIMATION:
; 1651 : 						case CPARSE_FONT:
; 1652 : 						case CPARSE_SOUND:
; 1653 : 						case CPARSE_STRING:
; 1654 : 							Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1655 : 							break;

	jmp	SHORT $LN114@ControlPar
$LN73@ControlPar:

; 1656 : 						default:
; 1657 : 							MonoPrint("ControlParser: Token NOT FOUND [%s]\n",&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0CF@OECDJKFN@ControlParser?3?5Token?5NOT?5FOUND?5?$FL@
	call	_MonoPrint
	add	esp, 8

; 1658 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0
$LN114@ControlPar:

; 1659 : 							break;
; 1660 : 					}
; 1661 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 1662 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 1663 : 				}
; 1664 : 				else

	jmp	SHORT $LN72@ControlPar
$LN116@ControlPar:

; 1665 : 				{
; 1666 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 1667 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 1668 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN72@ControlPar:

; 1669 : 				}
; 1670 : 				break;

	jmp	$LN134@ControlPar
$LN71@ControlPar:

; 1671 : 			case SECTION_FINDSUBTOKEN:
; 1672 : 			// Look for token starting with '['
; 1673 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN70@ControlPar:

; 1674 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN69@ControlPar
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN69@ControlPar

; 1675 : 				{
; 1676 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv690[ebp], edx
	mov	eax, DWORD PTR tv690[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv690[ebp], eax
	cmp	DWORD PTR tv690[ebp], 81		; 00000051H
	ja	SHORT $LN61@ControlPar
	mov	ecx, DWORD PTR tv690[ebp]
	movzx	edx, BYTE PTR $LN236@ControlPar[ecx]
	jmp	DWORD PTR $LN244@ControlPar[edx*4]
$LN66@ControlPar:

; 1677 : 					{
; 1678 : 						case '[':
; 1679 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN65@ControlPar
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN65@ControlPar

; 1680 : 							{
; 1681 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1682 : 								break;

	jmp	SHORT $LN67@ControlPar
$LN65@ControlPar:

; 1683 : 							}
; 1684 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1685 : 							break;

	jmp	SHORT $LN67@ControlPar
$LN64@ControlPar:

; 1686 : 						case '"':
; 1687 : 							InString=1-InString;

	mov	eax, 1
	sub	eax, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], eax

; 1688 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1689 : 							break;

	jmp	SHORT $LN67@ControlPar
$LN63@ControlPar:

; 1690 : 						case '#':
; 1691 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 1692 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1693 : 							break;

	jmp	SHORT $LN67@ControlPar
$LN62@ControlPar:

; 1694 : 						case 0x0a: case 0x0d:
; 1695 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1696 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1697 : 							break;

	jmp	SHORT $LN67@ControlPar
$LN61@ControlPar:

; 1698 : 						default:
; 1699 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN67@ControlPar:

; 1700 : 					}
; 1701 : 					if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN60@ControlPar

; 1702 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN60@ControlPar:

; 1703 : 				}

	jmp	$LN70@ControlPar
$LN69@ControlPar:

; 1704 : 							
; 1705 : 				tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN59@ControlPar:

; 1706 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN58@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN58@ControlPar

; 1707 : 					tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	SHORT $LN59@ControlPar
$LN58@ControlPar:

; 1708 : 				tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1709 : 
; 1710 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN57@ControlPar

; 1711 : 				{
; 1712 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1713 : 					break;

	jmp	$LN134@ControlPar
$LN57@ControlPar:

; 1714 : 				}
; 1715 : 
; 1716 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN56@ControlPar

; 1717 : 					Section=SECTION_PROCESSSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 3
$LN56@ControlPar:

; 1718 : 				break;

	jmp	$LN134@ControlPar
$LN55@ControlPar:

; 1719 : 			case SECTION_PROCESSSUBTOKEN:
; 1720 : 				TokenID=FindToken(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 1721 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN54@ControlPar

; 1722 : 				{ // if found... this is a MAIN keyword NOT a Control/Window keyword
; 1723 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1724 : 					break;

	jmp	$LN134@ControlPar
$LN54@ControlPar:

; 1725 : 				}
; 1726 : 				switch(TokenType)

	mov	eax, DWORD PTR _TokenType$[ebp]
	mov	DWORD PTR tv761[ebp], eax
	cmp	DWORD PTR tv761[ebp], 2
	jl	$LN52@ControlPar
	cmp	DWORD PTR tv761[ebp], 3
	jle	SHORT $LN51@ControlPar
	jmp	$LN52@ControlPar
$LN51@ControlPar:

; 1727 : 				{
; 1728 : 					case TOKEN_COMMON:
; 1729 : 					case TOKEN_LOCAL:
; 1730 : 						TokenID=Control_->BaseFind(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?BaseFind@C_Base@@QAEFPAD@Z		; C_Base::BaseFind
	movsx	edx, ax
	mov	DWORD PTR _TokenID$[ebp], edx

; 1731 : 						if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN50@ControlPar

; 1732 : 						{
; 1733 : 							TokenType=TOKEN_COMMON;

	mov	DWORD PTR _TokenType$[ebp], 2

; 1734 : 							Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 1735 : 							Idx_+=tokenlen_;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 1736 : 							tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 1737 : 						}
; 1738 : 						else

	jmp	SHORT $LN52@ControlPar
$LN50@ControlPar:

; 1739 : 						{
; 1740 : 							TokenID=Control_->LocalFind(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+72]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	cwde
	mov	DWORD PTR _TokenID$[ebp], eax

; 1741 : 							if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN48@ControlPar

; 1742 : 							{
; 1743 : 								Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 1744 : 								TokenType=TOKEN_LOCAL;

	mov	DWORD PTR _TokenType$[ebp], 3

; 1745 : 								Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 1746 : 								tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 1747 : 							}
; 1748 : 							else

	jmp	SHORT $LN52@ControlPar
$LN48@ControlPar:

; 1749 : 							{
; 1750 : 								Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2

; 1751 : 								Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN52@ControlPar:

; 1752 : 							}
; 1753 : 						}
; 1754 : 						break;
; 1755 : 				}
; 1756 : 				break;

	jmp	$LN134@ControlPar
$LN46@ControlPar:

; 1757 : 			case SECTION_FINDPARAMS:
; 1758 : 				P_Idx_=0; // start with 0 parameters

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 1759 : 
; 1760 : 				// Repeat until token char '[' found (or EOF)
; 1761 : 				Finished=0;

	mov	DWORD PTR _Finished$[ebp], 0
$LN45@ControlPar:

; 1762 : 				while(!Finished)

	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN44@ControlPar

; 1763 : 				{
; 1764 : 					// Find NON white space
; 1765 : 					Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN43@ControlPar:

; 1766 : 					while(!Found && !Done && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN42@ControlPar
	cmp	DWORD PTR _Done$[ebp], 0
	jne	SHORT $LN42@ControlPar
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN42@ControlPar

; 1767 : 					{
; 1768 : 						switch(script_[Idx_])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv818[ebp], ecx
	mov	edx, DWORD PTR tv818[ebp]
	sub	edx, 9
	mov	DWORD PTR tv818[ebp], edx
	cmp	DWORD PTR tv818[ebp], 82		; 00000052H
	ja	SHORT $LN37@ControlPar
	mov	eax, DWORD PTR tv818[ebp]
	movzx	ecx, BYTE PTR $LN237@ControlPar[eax]
	jmp	DWORD PTR $LN245@ControlPar[ecx*4]
$LN39@ControlPar:

; 1769 : 						{
; 1770 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 1771 : 								Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1772 : 								break;

	jmp	SHORT $LN40@ControlPar
$LN38@ControlPar:

; 1773 : 							case '[':
; 1774 : 								Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 1775 : 								Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 1776 : 								break;

	jmp	SHORT $LN40@ControlPar
$LN37@ControlPar:

; 1777 : 							default:
; 1778 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1
$LN40@ControlPar:

; 1779 : 								break;
; 1780 : 						}
; 1781 : 						if(Idx_ >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN36@ControlPar

; 1782 : 						{
; 1783 : 							Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 1784 : 							Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN36@ControlPar:

; 1785 : 						}
; 1786 : 					}

	jmp	$LN43@ControlPar
$LN42@ControlPar:

; 1787 : 
; 1788 : 					if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN35@ControlPar

; 1789 : 					{
; 1790 : 						Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 1791 : 						if(script_[Idx_] == '"') // string

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	$LN34@ControlPar

; 1792 : 						{
; 1793 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 1794 : 							str_=&script_[Idx_+tokenlen_];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN33@ControlPar:

; 1795 : 							// Find closing (")
; 1796 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	SHORT $LN32@ControlPar
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN32@ControlPar

; 1797 : 							{
; 1798 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN31@ControlPar

; 1799 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1800 : 								else

	jmp	SHORT $LN30@ControlPar
$LN31@ControlPar:

; 1801 : 								{
; 1802 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN29@ControlPar

; 1803 : 									{
; 1804 : 										Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 1805 : 										Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 1806 : 									}
; 1807 : 									else

	jmp	SHORT $LN30@ControlPar
$LN29@ControlPar:

; 1808 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN30@ControlPar:

; 1809 : 								}
; 1810 : 							}

	jmp	SHORT $LN33@ControlPar
$LN32@ControlPar:

; 1811 : 							if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN27@ControlPar

; 1812 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0
$LN27@ControlPar:

; 1813 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1814 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	$LN35@ControlPar
$LN34@ControlPar:

; 1815 : 						}
; 1816 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN24@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 45					; 0000002dH
	jne	$LN25@ControlPar
$LN24@ControlPar:

; 1817 : 						{
; 1818 : 							// find white space
; 1819 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 1820 : 							tokenlen_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN23@ControlPar:

; 1821 : 							while(!Found)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN22@ControlPar

; 1822 : 							{
; 1823 : 								switch(script_[Idx_ + tokenlen_])

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv915[ebp], edx
	mov	eax, DWORD PTR tv915[ebp]
	sub	eax, 9
	mov	DWORD PTR tv915[ebp], eax
	cmp	DWORD PTR tv915[ebp], 35		; 00000023H
	ja	SHORT $LN18@ControlPar
	mov	ecx, DWORD PTR tv915[ebp]
	movzx	edx, BYTE PTR $LN238@ControlPar[ecx]
	jmp	DWORD PTR $LN246@ControlPar[edx*4]
$LN19@ControlPar:

; 1824 : 								{
; 1825 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 1826 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1827 : 										break;

	jmp	SHORT $LN20@ControlPar
$LN18@ControlPar:

; 1828 : 									default:
; 1829 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN20@ControlPar:

; 1830 : 										break;
; 1831 : 								}
; 1832 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN17@ControlPar

; 1833 : 								{
; 1834 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1835 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 1836 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN17@ControlPar:

; 1837 : 								}
; 1838 : 							}

	jmp	$LN23@ControlPar
$LN22@ControlPar:

; 1839 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN16@ControlPar
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	cmp	edx, 12					; 0000000cH
	jge	SHORT $LN16@ControlPar

; 1840 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN16@ControlPar:

; 1841 : 
; 1842 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1843 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1844 : 						}
; 1845 : 						else

	jmp	$LN35@ControlPar
$LN25@ControlPar:

; 1846 : 						{
; 1847 : 							// Look for ID in tables
; 1848 : 							// Look for white space
; 1849 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 1850 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN14@ControlPar:

; 1851 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN13@ControlPar
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN13@ControlPar

; 1852 : 							{
; 1853 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv969[ebp], ecx
	mov	edx, DWORD PTR tv969[ebp]
	sub	edx, 9
	mov	DWORD PTR tv969[ebp], edx
	cmp	DWORD PTR tv969[ebp], 35		; 00000023H
	ja	SHORT $LN9@ControlPar
	mov	eax, DWORD PTR tv969[ebp]
	movzx	ecx, BYTE PTR $LN239@ControlPar[eax]
	jmp	DWORD PTR $LN247@ControlPar[ecx*4]
$LN10@ControlPar:

; 1854 : 								{
; 1855 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 1856 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1857 : 										break;

	jmp	SHORT $LN11@ControlPar
$LN9@ControlPar:

; 1858 : 									default:
; 1859 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN11@ControlPar:

; 1860 : 										break;
; 1861 : 								}
; 1862 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN8@ControlPar

; 1863 : 								{
; 1864 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 1865 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1866 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN8@ControlPar:

; 1867 : 								}
; 1868 : 							}

	jmp	$LN14@ControlPar
$LN13@ControlPar:

; 1869 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN7@ControlPar
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	cmp	ecx, 12					; 0000000cH
	jge	$LN7@ControlPar

; 1870 : 							{
; 1871 : 								script_[Idx_+tokenlen_]=0;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+eax], 0

; 1872 : 								P_[P_Idx_++]=FindID(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	edx, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [edx+958]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+958]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 1873 : 								if(P_[P_Idx_-1] < 0 && strcmp(&script_[Idx_],"NID"))

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+8], 0
	jge	SHORT $LN7@ControlPar
	push	OFFSET ??_C@_03EOCODDKD@NID?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@ControlPar

; 1874 : 									TokenErrorList->AddText(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?AddText@C_Hash@@QAEJPBD@Z		; C_Hash::AddText
$LN7@ControlPar:

; 1875 : 							}
; 1876 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1877 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN35@ControlPar:

; 1878 : 						}
; 1879 : 					}
; 1880 : 				}

	jmp	$LN45@ControlPar
$LN44@ControlPar:

; 1881 : 				break;

	jmp	$LN134@ControlPar
$LN5@ControlPar:

; 1882 : 			case SECTION_PROCESSPARAMS:
; 1883 : 				switch(TokenType)

	mov	edx, DWORD PTR _TokenType$[ebp]
	mov	DWORD PTR tv1045[ebp], edx
	cmp	DWORD PTR tv1045[ebp], 2
	je	SHORT $LN2@ControlPar
	cmp	DWORD PTR tv1045[ebp], 3
	je	SHORT $LN1@ControlPar
	jmp	SHORT $LN3@ControlPar
$LN2@ControlPar:

; 1884 : 				{
; 1885 : 					case TOKEN_COMMON:
; 1886 : 						Control_->BaseFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	movzx	edx, WORD PTR _TokenID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?BaseFunction@C_Base@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Base::BaseFunction

; 1887 : 						break;

	jmp	SHORT $LN3@ControlPar
$LN1@ControlPar:

; 1888 : 					case TOKEN_LOCAL:
; 1889 : 						Control_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	movzx	eax, WORD PTR _TokenID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR [edx+240]
	call	eax
$LN3@ControlPar:

; 1890 : 						break;
; 1891 : 				}
; 1892 : 				P_Idx_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 1893 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0

; 1894 : 				str_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 1895 : 				Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2
$LN134@ControlPar:

; 1896 : 				break;
; 1897 : 		}
; 1898 : 	}

	jmp	$LN137@ControlPar
$LN136@ControlPar:

; 1899 : 	return(Control_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]

; 1900 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN241@ControlPar:
	DD	$LN133@ControlPar
	DD	$LN117@ControlPar
	DD	$LN71@ControlPar
	DD	$LN55@ControlPar
	DD	$LN46@ControlPar
	DD	$LN5@ControlPar
$LN242@ControlPar:
	DD	$LN124@ControlPar
	DD	$LN126@ControlPar
	DD	$LN125@ControlPar
	DD	$LN128@ControlPar
	DD	$LN123@ControlPar
$LN235@ControlPar:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN243@ControlPar:
	DD	$LN113@ControlPar
	DD	$LN112@ControlPar
	DD	$LN110@ControlPar
	DD	$LN106@ControlPar
	DD	$LN104@ControlPar
	DD	$LN98@ControlPar
	DD	$LN96@ControlPar
	DD	$LN74@ControlPar
	DD	$LN73@ControlPar
	DD	$LN94@ControlPar
	DD	$LN82@ControlPar
	DD	$LN84@ControlPar
	DD	$LN86@ControlPar
	DD	$LN74@ControlPar
	DD	$LN88@ControlPar
	DD	$LN74@ControlPar
	DD	$LN102@ControlPar
	DD	$LN73@ControlPar
	DD	$LN100@ControlPar
	DD	$LN90@ControlPar
	DD	$LN74@ControlPar
	DD	$LN73@ControlPar
	DD	$LN78@ControlPar
	DD	$LN76@ControlPar
	DD	$LN80@ControlPar
	DD	$LN92@ControlPar
	DD	$LN108@ControlPar
$LN244@ControlPar:
	DD	$LN62@ControlPar
	DD	$LN64@ControlPar
	DD	$LN63@ControlPar
	DD	$LN66@ControlPar
	DD	$LN61@ControlPar
$LN236@ControlPar:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN245@ControlPar:
	DD	$LN39@ControlPar
	DD	$LN38@ControlPar
	DD	$LN37@ControlPar
$LN237@ControlPar:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN246@ControlPar:
	DD	$LN19@ControlPar
	DD	$LN18@ControlPar
$LN238@ControlPar:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN247@ControlPar:
	DD	$LN10@ControlPar
	DD	$LN9@ControlPar
$LN239@ControlPar:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$0:
	mov	eax, DWORD PTR $T52[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$1:
	mov	eax, DWORD PTR $T45[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$2:
	mov	eax, DWORD PTR $T51[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$3:
	mov	eax, DWORD PTR $T40[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$4:
	mov	eax, DWORD PTR $T50[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$5:
	mov	eax, DWORD PTR $T44[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$6:
	mov	eax, DWORD PTR $T48[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$7:
	mov	eax, DWORD PTR $T41[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$8:
	mov	eax, DWORD PTR $T47[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$9:
	mov	eax, DWORD PTR $T42[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$10:
	mov	eax, DWORD PTR $T57[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$11:
	mov	eax, DWORD PTR $T56[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$12:
	mov	eax, DWORD PTR $T55[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$13:
	mov	eax, DWORD PTR $T54[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$14:
	mov	eax, DWORD PTR $T53[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$15:
	mov	eax, DWORD PTR $T58[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$16:
	mov	eax, DWORD PTR $T49[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$17:
	mov	eax, DWORD PTR $T46[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ$18:
	mov	eax, DWORD PTR $T43[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ControlParser@C_Parser@@AAEPAVC_Base@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ControlParser@C_Parser@@AAEPAVC_Base@@XZ ENDP		; C_Parser::ControlParser
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cparser.cpp
_TEXT	SEGMENT
tv602 = -100						; size = 4
tv339 = -96						; size = 4
$T2 = -92						; size = 4
tv330 = -88						; size = 4
tv186 = -84						; size = 4
$T3 = -80						; size = 4
tv65 = -76						; size = 4
tv526 = -72						; size = 4
tv472 = -68						; size = 4
tv375 = -64						; size = 4
tv259 = -60						; size = 4
tv177 = -56						; size = 4
tv74 = -52						; size = 4
_Comment$ = -48						; size = 4
_InString$ = -44					; size = 4
_TokenType$ = -40					; size = 4
_TokenID$ = -36						; size = 4
_Finished$ = -32					; size = 4
_Done$ = -28						; size = 4
_Section$ = -24						; size = 4
_Found$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?WindowParser@C_Parser@@AAEPAVC_Window@@XZ PROC		; C_Parser::WindowParser
; _this$ = ecx

; 1903 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1904 : 	long Done=0,Comment=0,Found=0,InString=0,Finished=0;

	mov	DWORD PTR _Done$[ebp], 0
	mov	DWORD PTR _Comment$[ebp], 0
	mov	DWORD PTR _Found$[ebp], 0
	mov	DWORD PTR _InString$[ebp], 0
	mov	DWORD PTR _Finished$[ebp], 0

; 1905 : 	long TokenID=0,Section=0,TokenType=0;

	mov	DWORD PTR _TokenID$[ebp], 0
	mov	DWORD PTR _Section$[ebp], 0
	mov	DWORD PTR _TokenType$[ebp], 0

; 1906 : 
; 1907 : 	Done=0;

	mov	DWORD PTR _Done$[ebp], 0

; 1908 : 	Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1909 : 	InString=0;

	mov	DWORD PTR _InString$[ebp], 0

; 1910 : 	Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1

; 1911 : 	TokenType=TOKEN_NOTHING;

	mov	DWORD PTR _TokenType$[ebp], 0
$LN105@WindowPars:

; 1912 : 
; 1913 : 	while(!Done)

	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN104@WindowPars

; 1914 : 	{
; 1915 : 		switch(Section)

	mov	eax, DWORD PTR _Section$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 5
	ja	$LN102@WindowPars
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN118@WindowPars[ecx*4]
$LN101@WindowPars:

; 1916 : 		{
; 1917 : 			case SECTION_FINDTOKEN:
; 1918 : 			// Look for token starting with '['
; 1919 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN100@WindowPars:

; 1920 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN99@WindowPars
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN99@WindowPars

; 1921 : 				{
; 1922 : 					switch(script_[Idx_])

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 81			; 00000051H
	ja	SHORT $LN91@WindowPars
	mov	edx, DWORD PTR tv74[ebp]
	movzx	eax, BYTE PTR $LN111@WindowPars[edx]
	jmp	DWORD PTR $LN119@WindowPars[eax*4]
$LN96@WindowPars:

; 1923 : 					{
; 1924 : 						case '[':
; 1925 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN95@WindowPars
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN95@WindowPars

; 1926 : 							{
; 1927 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 1928 : 								break;

	jmp	SHORT $LN97@WindowPars
$LN95@WindowPars:

; 1929 : 							}
; 1930 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1931 : 							break;

	jmp	SHORT $LN97@WindowPars
$LN94@WindowPars:

; 1932 : 						case '"':
; 1933 : 							InString=1-InString;

	mov	ecx, 1
	sub	ecx, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], ecx

; 1934 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1935 : 							break;

	jmp	SHORT $LN97@WindowPars
$LN93@WindowPars:

; 1936 : 						case '#':
; 1937 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 1938 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1939 : 							break;

	jmp	SHORT $LN97@WindowPars
$LN92@WindowPars:

; 1940 : 						case 0x0a: case 0x0d:
; 1941 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 1942 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1943 : 							break;

	jmp	SHORT $LN97@WindowPars
$LN91@WindowPars:

; 1944 : 						default:
; 1945 : 							Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN97@WindowPars:

; 1946 : 					}
; 1947 : 					if(Idx_ >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN90@WindowPars

; 1948 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN90@WindowPars:

; 1949 : 				}

	jmp	$LN100@WindowPars
$LN99@WindowPars:

; 1950 : 							
; 1951 : 				tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN89@WindowPars:

; 1952 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 93					; 0000005dH
	je	SHORT $LN88@WindowPars
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN88@WindowPars

; 1953 : 					tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
	jmp	SHORT $LN89@WindowPars
$LN88@WindowPars:

; 1954 : 				tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 1955 : 
; 1956 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN87@WindowPars

; 1957 : 				{
; 1958 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 1959 : 					break;

	jmp	$LN102@WindowPars
$LN87@WindowPars:

; 1960 : 				}
; 1961 : 
; 1962 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN86@WindowPars

; 1963 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1
$LN86@WindowPars:

; 1964 : 				break;

	jmp	$LN102@WindowPars
$LN85@WindowPars:

; 1965 : 			case SECTION_PROCESSTOKEN:
; 1966 : 				TokenID=FindToken(&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 1967 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	$LN84@WindowPars

; 1968 : 				{
; 1969 : 					switch(TokenID)

	mov	ecx, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv177[ebp], ecx
	mov	edx, DWORD PTR tv177[ebp]
	sub	edx, 1
	mov	DWORD PTR tv177[ebp], edx
	cmp	DWORD PTR tv177[ebp], 26		; 0000001aH
	ja	$LN74@WindowPars
	mov	eax, DWORD PTR tv177[ebp]
	movzx	ecx, BYTE PTR $LN112@WindowPars[eax]
	jmp	DWORD PTR $LN120@WindowPars[ecx*4]
$LN81@WindowPars:

; 1970 : 					{
; 1971 : 						case CPARSE_WINDOW:
; 1972 : 							TokenType=TOKEN_WINDOW;

	mov	DWORD PTR _TokenType$[ebp], 1

; 1973 : 							Window_=new C_Window;

	push	4332					; 000010ecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN108@WindowPars
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0C_Window@@QAE@XZ			; C_Window::C_Window
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN109@WindowPars
$LN108@WindowPars:
	mov	DWORD PTR tv186[ebp], 0
$LN109@WindowPars:
	mov	edx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+68], ecx

; 1974 : 							Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2

; 1975 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1976 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 1977 : 							break;

	jmp	$LN82@WindowPars
$LN80@WindowPars:

; 1978 : 						case CPARSE_BUTTON:
; 1979 : 						case CPARSE_TEXT:
; 1980 : 						case CPARSE_BOX:
; 1981 : 						case CPARSE_LINE:
; 1982 : 						case CPARSE_CLOCK:
; 1983 : 						case CPARSE_FILL:
; 1984 : 						case CPARSE_TREE:
; 1985 : 						case CPARSE_EDITBOX:
; 1986 : 						case CPARSE_LISTBOX:
; 1987 : 						//case CPARSE_ACMI:
; 1988 : 						case CPARSE_PANNER:
; 1989 : 						case CPARSE_SLIDER:
; 1990 : 						case CPARSE_TREELIST:
; 1991 : 						case CPARSE_BITMAP:
; 1992 : 						case CPARSE_TILE:
; 1993 : 						case CPARSE_ANIM:
; 1994 : 						case CPARSE_CURSOR:
; 1995 : 						case CPARSE_MARQUE:
; 1996 : 						case CPARSE_ANIMATION:
; 1997 : 						case CPARSE_VERSIONTEXT:
; 1998 : 							Window_->AddControl(ControlParser());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ControlParser@C_Parser@@AAEPAVC_Base@@XZ ; C_Parser::ControlParser
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+68]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl

; 1999 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2000 : 							break;

	jmp	$LN82@WindowPars
$LN79@WindowPars:

; 2001 : 						case CPARSE_SCROLLBAR:
; 2002 : 							Window_->AddScrollBar((C_ScrollBar *)ControlParser());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ControlParser@C_Parser@@AAEPAVC_Base@@XZ ; C_Parser::ControlParser
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	call	?AddScrollBar@C_Window@@QAEXPAVC_ScrollBar@@@Z ; C_Window::AddScrollBar

; 2003 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2004 : 							break;

	jmp	$LN82@WindowPars
$LN78@WindowPars:

; 2005 : 						case CPARSE_FONT:
; 2006 : 							TokenType=TOKEN_FONT;

	mov	DWORD PTR _TokenType$[ebp], 4

; 2007 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2008 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2009 : 							break;

	jmp	$LN82@WindowPars
$LN77@WindowPars:

; 2010 : 						case CPARSE_SOUND:
; 2011 : 							TokenType=TOKEN_SOUND;

	mov	DWORD PTR _TokenType$[ebp], 6

; 2012 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2013 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2014 : 							break;

	jmp	$LN82@WindowPars
$LN76@WindowPars:

; 2015 : 						case CPARSE_STRING:
; 2016 : 							TokenType=TOKEN_STRING;

	mov	DWORD PTR _TokenType$[ebp], 7

; 2017 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2018 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2019 : 							break;

	jmp	SHORT $LN82@WindowPars
$LN75@WindowPars:

; 2020 : 						case CPARSE_IMAGE:
; 2021 : 							TokenType=TOKEN_IMAGE;

	mov	DWORD PTR _TokenType$[ebp], 5

; 2022 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2023 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2024 : 							break;

	jmp	SHORT $LN82@WindowPars
$LN74@WindowPars:

; 2025 : 						default:
; 2026 : 							MonoPrint("ControlParser: Token NOT FOUND [%s]\n",&script_[Idx_]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0CF@OECDJKFN@ControlParser?3?5Token?5NOT?5FOUND?5?$FL@
	call	_MonoPrint
	add	esp, 8

; 2027 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2028 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2029 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN82@WindowPars:

; 2030 : 							break;
; 2031 : 					}
; 2032 : 				}
; 2033 : 				else

	jmp	SHORT $LN73@WindowPars
$LN84@WindowPars:

; 2034 : 				{
; 2035 : 					Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0

; 2036 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2037 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN73@WindowPars:

; 2038 : 				}
; 2039 : 				break;

	jmp	$LN102@WindowPars
$LN72@WindowPars:

; 2040 : 			case SECTION_FINDSUBTOKEN:
; 2041 : 			// Look for token starting with '['
; 2042 : 				Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN71@WindowPars:

; 2043 : 				while(!Found && !Done)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN70@WindowPars
	cmp	DWORD PTR _Done$[ebp], 0
	jne	$LN70@WindowPars

; 2044 : 				{
; 2045 : 					switch(script_[Idx_])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv259[ebp], edx
	mov	eax, DWORD PTR tv259[ebp]
	sub	eax, 10					; 0000000aH
	mov	DWORD PTR tv259[ebp], eax
	cmp	DWORD PTR tv259[ebp], 81		; 00000051H
	ja	SHORT $LN62@WindowPars
	mov	ecx, DWORD PTR tv259[ebp]
	movzx	edx, BYTE PTR $LN113@WindowPars[ecx]
	jmp	DWORD PTR $LN121@WindowPars[edx*4]
$LN67@WindowPars:

; 2046 : 					{
; 2047 : 						case '[':
; 2048 : 							if(!Comment && !InString)

	cmp	DWORD PTR _Comment$[ebp], 0
	jne	SHORT $LN66@WindowPars
	cmp	DWORD PTR _InString$[ebp], 0
	jne	SHORT $LN66@WindowPars

; 2049 : 							{
; 2050 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2051 : 								break;

	jmp	SHORT $LN68@WindowPars
$LN66@WindowPars:

; 2052 : 							}
; 2053 : 							Idx_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2054 : 							break;

	jmp	SHORT $LN68@WindowPars
$LN65@WindowPars:

; 2055 : 						case '"':
; 2056 : 							InString=1-InString;

	mov	eax, 1
	sub	eax, DWORD PTR _InString$[ebp]
	mov	DWORD PTR _InString$[ebp], eax

; 2057 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2058 : 							break;

	jmp	SHORT $LN68@WindowPars
$LN64@WindowPars:

; 2059 : 						case '#':
; 2060 : 							Comment=1;

	mov	DWORD PTR _Comment$[ebp], 1

; 2061 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2062 : 							break;

	jmp	SHORT $LN68@WindowPars
$LN63@WindowPars:

; 2063 : 						case 0x0a: case 0x0d:
; 2064 : 							Comment=0;

	mov	DWORD PTR _Comment$[ebp], 0

; 2065 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2066 : 							break;

	jmp	SHORT $LN68@WindowPars
$LN62@WindowPars:

; 2067 : 						default:
; 2068 : 							Idx_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN68@WindowPars:

; 2069 : 					}
; 2070 : 					if(Idx_ >= scriptlen_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN61@WindowPars

; 2071 : 						Done=1;

	mov	DWORD PTR _Done$[ebp], 1
$LN61@WindowPars:

; 2072 : 				}

	jmp	$LN71@WindowPars
$LN70@WindowPars:

; 2073 : 							
; 2074 : 				tokenlen_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN60@WindowPars:

; 2075 : 				while(script_[Idx_+tokenlen_] != ']' && (Idx_+tokenlen_) < scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN59@WindowPars
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN59@WindowPars

; 2076 : 					tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	SHORT $LN60@WindowPars
$LN59@WindowPars:

; 2077 : 				tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2078 : 
; 2079 : 				if((Idx_ + tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN58@WindowPars

; 2080 : 				{
; 2081 : 					Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 2082 : 					break;

	jmp	$LN102@WindowPars
$LN58@WindowPars:

; 2083 : 				}
; 2084 : 
; 2085 : 				if(Found == 1)

	cmp	DWORD PTR _Found$[ebp], 1
	jne	SHORT $LN57@WindowPars

; 2086 : 					Section=SECTION_PROCESSSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 3
$LN57@WindowPars:

; 2087 : 				break;

	jmp	$LN102@WindowPars
$LN56@WindowPars:

; 2088 : 			case SECTION_PROCESSSUBTOKEN:
; 2089 : 				TokenID=FindToken(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindToken@C_Parser@@QAEJPAD@Z		; C_Parser::FindToken
	mov	DWORD PTR _TokenID$[ebp], eax

; 2090 : 				if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN55@WindowPars

; 2091 : 				{ // if found... this is a MAIN keyword NOT a Control/Window keyword
; 2092 : 					Section=SECTION_PROCESSTOKEN;

	mov	DWORD PTR _Section$[ebp], 1

; 2093 : 					switch(TokenID)

	mov	eax, DWORD PTR _TokenID$[ebp]
	mov	DWORD PTR tv330[ebp], eax
	cmp	DWORD PTR tv330[ebp], 1
	je	SHORT $LN52@WindowPars
	cmp	DWORD PTR tv330[ebp], 8
	je	SHORT $LN52@WindowPars
	jmp	SHORT $LN51@WindowPars
$LN52@WindowPars:

; 2094 : 					{
; 2095 : 						case CPARSE_WINDOW:
; 2096 : 						case CPARSE_FONT:
; 2097 : 							Done=1;

	mov	DWORD PTR _Done$[ebp], 1

; 2098 : 							break;

	jmp	SHORT $LN53@WindowPars
$LN51@WindowPars:

; 2099 : 						default:
; 2100 : 							Section=SECTION_FINDTOKEN;

	mov	DWORD PTR _Section$[ebp], 0
$LN53@WindowPars:

; 2101 : 							break;
; 2102 : 					}
; 2103 : 					break;

	jmp	$LN102@WindowPars

; 2104 : 					Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2105 : 					tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN55@WindowPars:

; 2106 : 				}
; 2107 : 				switch(TokenType)

	mov	ecx, DWORD PTR _TokenType$[ebp]
	mov	DWORD PTR tv339[ebp], ecx
	cmp	DWORD PTR tv339[ebp], 1
	je	SHORT $LN48@WindowPars
	jmp	SHORT $LN49@WindowPars
$LN48@WindowPars:

; 2108 : 				{
; 2109 : 					case TOKEN_WINDOW:
; 2110 : 						TokenID=Window_->LocalFind(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+68]
	call	?LocalFind@C_Window@@QAEFPAD@Z		; C_Window::LocalFind
	cwde
	mov	DWORD PTR _TokenID$[ebp], eax

; 2111 : 						if(TokenID)

	cmp	DWORD PTR _TokenID$[ebp], 0
	je	SHORT $LN47@WindowPars

; 2112 : 						{
; 2113 : 							Section=SECTION_FINDPARAMS;

	mov	DWORD PTR _Section$[ebp], 4

; 2114 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2115 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx

; 2116 : 						}
; 2117 : 						else

	jmp	SHORT $LN49@WindowPars
$LN47@WindowPars:

; 2118 : 						{
; 2119 : 							Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2

; 2120 : 							Idx_+=tokenlen_;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 2121 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN49@WindowPars:

; 2122 : 						}
; 2123 : 						break;
; 2124 : 				}
; 2125 : 
; 2126 : 				break;

	jmp	$LN102@WindowPars
$LN45@WindowPars:

; 2127 : 			case SECTION_FINDPARAMS:
; 2128 : 				P_Idx_=0; // start with 0 parameters

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 2129 : 
; 2130 : 				// Repeat until token char '[' found (or EOF)
; 2131 : 				Finished=0;

	mov	DWORD PTR _Finished$[ebp], 0
$LN44@WindowPars:

; 2132 : 				while(!Finished)

	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN43@WindowPars

; 2133 : 				{
; 2134 : 					// Find NON white space
; 2135 : 					Found=0;

	mov	DWORD PTR _Found$[ebp], 0
$LN42@WindowPars:

; 2136 : 					while(!Found && !Done && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN41@WindowPars
	cmp	DWORD PTR _Done$[ebp], 0
	jne	SHORT $LN41@WindowPars
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN41@WindowPars

; 2137 : 					{
; 2138 : 						switch(script_[Idx_])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv375[ebp], ecx
	mov	edx, DWORD PTR tv375[ebp]
	sub	edx, 9
	mov	DWORD PTR tv375[ebp], edx
	cmp	DWORD PTR tv375[ebp], 82		; 00000052H
	ja	SHORT $LN36@WindowPars
	mov	eax, DWORD PTR tv375[ebp]
	movzx	ecx, BYTE PTR $LN114@WindowPars[eax]
	jmp	DWORD PTR $LN122@WindowPars[ecx*4]
$LN38@WindowPars:

; 2139 : 						{
; 2140 : 							case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2141 : 								Idx_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2142 : 								break;

	jmp	SHORT $LN39@WindowPars
$LN37@WindowPars:

; 2143 : 							case '[':
; 2144 : 								Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2145 : 								Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 2146 : 								break;

	jmp	SHORT $LN39@WindowPars
$LN36@WindowPars:

; 2147 : 							default:
; 2148 : 								Found=1;

	mov	DWORD PTR _Found$[ebp], 1
$LN39@WindowPars:

; 2149 : 								break;
; 2150 : 						}
; 2151 : 						if(Idx_ >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN35@WindowPars

; 2152 : 						{
; 2153 : 							Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2154 : 							Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN35@WindowPars:

; 2155 : 						}
; 2156 : 					}

	jmp	$LN42@WindowPars
$LN41@WindowPars:

; 2157 : 
; 2158 : 					if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN34@WindowPars

; 2159 : 					{
; 2160 : 						Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2161 : 						if(script_[Idx_] == '"') // string

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 34					; 00000022H
	jne	$LN33@WindowPars

; 2162 : 						{
; 2163 : 							tokenlen_=1;

	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx

; 2164 : 							str_=&script_[Idx_+tokenlen_];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx
$LN32@WindowPars:

; 2165 : 							// Find closing (")
; 2166 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	SHORT $LN31@WindowPars
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	SHORT $LN31@WindowPars

; 2167 : 							{
; 2168 : 								if(script_[Idx_+tokenlen_] == '"')

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN30@WindowPars

; 2169 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2170 : 								else

	jmp	SHORT $LN29@WindowPars
$LN30@WindowPars:

; 2171 : 								{
; 2172 : 									if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN28@WindowPars

; 2173 : 									{
; 2174 : 										Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2175 : 										Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5

; 2176 : 									}
; 2177 : 									else

	jmp	SHORT $LN29@WindowPars
$LN28@WindowPars:

; 2178 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN29@WindowPars:

; 2179 : 								}
; 2180 : 							}

	jmp	SHORT $LN32@WindowPars
$LN31@WindowPars:

; 2181 : 							if(Found)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN26@WindowPars

; 2182 : 								script_[Idx_+tokenlen_]=0; // make NULL terminated string

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx+ecx], 0
$LN26@WindowPars:

; 2183 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2184 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
	jmp	$LN34@WindowPars
$LN33@WindowPars:

; 2185 : 						}
; 2186 : 						else if(isdigit(script_[Idx_]) || script_[Idx_] == '-') // Number

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+eax]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN23@WindowPars
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 45					; 0000002dH
	jne	$LN24@WindowPars
$LN23@WindowPars:

; 2187 : 						{
; 2188 : 							// find white space
; 2189 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2190 : 							tokenlen_=1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN22@WindowPars:

; 2191 : 							while(!Found)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN21@WindowPars

; 2192 : 							{
; 2193 : 								switch(script_[Idx_ + tokenlen_])

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+edx]
	mov	DWORD PTR tv472[ebp], edx
	mov	eax, DWORD PTR tv472[ebp]
	sub	eax, 9
	mov	DWORD PTR tv472[ebp], eax
	cmp	DWORD PTR tv472[ebp], 35		; 00000023H
	ja	SHORT $LN17@WindowPars
	mov	ecx, DWORD PTR tv472[ebp]
	movzx	edx, BYTE PTR $LN115@WindowPars[ecx]
	jmp	DWORD PTR $LN123@WindowPars[edx*4]
$LN18@WindowPars:

; 2194 : 								{
; 2195 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2196 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2197 : 										break;

	jmp	SHORT $LN19@WindowPars
$LN17@WindowPars:

; 2198 : 									default:
; 2199 : 										tokenlen_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+956]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+956], cx
$LN19@WindowPars:

; 2200 : 										break;
; 2201 : 								}
; 2202 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN16@WindowPars

; 2203 : 								{
; 2204 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2205 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2206 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN16@WindowPars:

; 2207 : 								}
; 2208 : 							}

	jmp	$LN22@WindowPars
$LN21@WindowPars:

; 2209 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	SHORT $LN15@WindowPars
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	cmp	edx, 12					; 0000000cH
	jge	SHORT $LN15@WindowPars

; 2210 : 								P_[P_Idx_++]=atol(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_atol
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+958]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+958]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+958], ax
$LN15@WindowPars:

; 2211 : 
; 2212 : 							Idx_+=tokenlen_;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 2213 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax

; 2214 : 						}
; 2215 : 						else

	jmp	$LN34@WindowPars
$LN24@WindowPars:

; 2216 : 						{
; 2217 : 							// Look for ID in tables
; 2218 : 							// Look for white space
; 2219 : 							Found=0;

	mov	DWORD PTR _Found$[ebp], 0

; 2220 : 							tokenlen_=0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+956], dx
$LN13@WindowPars:

; 2221 : 							while(!Found && !Finished)

	cmp	DWORD PTR _Found$[ebp], 0
	jne	$LN12@WindowPars
	cmp	DWORD PTR _Finished$[ebp], 0
	jne	$LN12@WindowPars

; 2222 : 							{
; 2223 : 								switch(script_[Idx_+tokenlen_])

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+956]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv526[ebp], ecx
	mov	edx, DWORD PTR tv526[ebp]
	sub	edx, 9
	mov	DWORD PTR tv526[ebp], edx
	cmp	DWORD PTR tv526[ebp], 35		; 00000023H
	ja	SHORT $LN8@WindowPars
	mov	eax, DWORD PTR tv526[ebp]
	movzx	ecx, BYTE PTR $LN116@WindowPars[eax]
	jmp	DWORD PTR $LN124@WindowPars[ecx*4]
$LN9@WindowPars:

; 2224 : 								{
; 2225 : 									case ' ': case ',': case 0x09: case 0x0a: case 0x0d:
; 2226 : 										Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2227 : 										break;

	jmp	SHORT $LN10@WindowPars
$LN8@WindowPars:

; 2228 : 									default:
; 2229 : 										tokenlen_++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+956]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN10@WindowPars:

; 2230 : 										break;
; 2231 : 								}
; 2232 : 								if((Idx_+tokenlen_) >= scriptlen_)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN7@WindowPars

; 2233 : 								{
; 2234 : 									Finished=1;

	mov	DWORD PTR _Finished$[ebp], 1

; 2235 : 									Found=1;

	mov	DWORD PTR _Found$[ebp], 1

; 2236 : 									Section=SECTION_PROCESSPARAMS;

	mov	DWORD PTR _Section$[ebp], 5
$LN7@WindowPars:

; 2237 : 								}
; 2238 : 							}

	jmp	$LN13@WindowPars
$LN12@WindowPars:

; 2239 : 							if(Found && P_Idx_ < PARSE_MAX_PARAMS)

	cmp	DWORD PTR _Found$[ebp], 0
	je	$LN6@WindowPars
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	cmp	ecx, 12					; 0000000cH
	jge	$LN6@WindowPars

; 2240 : 							{
; 2241 : 								script_[Idx_+tokenlen_]=0;

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+956]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+eax], 0

; 2242 : 								P_[P_Idx_++]=FindID(&script_[Idx_]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindID@C_Parser@@QAEJPAD@Z		; C_Parser::FindID
	mov	edx, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [edx+958]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+958]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 2243 : 								if(P_[P_Idx_-1] < 0 && strcmp(&script_[Idx_],"NID"))

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+958]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+8], 0
	jge	SHORT $LN6@WindowPars
	push	OFFSET ??_C@_03EOCODDKD@NID?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@WindowPars

; 2244 : 									TokenErrorList->AddText(&script_[Idx_]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR ?TokenErrorList@@3PAVC_Hash@@A ; TokenErrorList
	call	?AddText@C_Hash@@QAEJPBD@Z		; C_Hash::AddText
$LN6@WindowPars:

; 2245 : 							}
; 2246 : 							Idx_+=tokenlen_+1;

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+956]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 2247 : 							tokenlen_=0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+956], ax
$LN34@WindowPars:

; 2248 : 						}
; 2249 : 					}
; 2250 : 				}

	jmp	$LN44@WindowPars
$LN43@WindowPars:

; 2251 : 				break;

	jmp	$LN102@WindowPars
$LN4@WindowPars:

; 2252 : 			case SECTION_PROCESSPARAMS:
; 2253 : 				switch(TokenType)

	mov	edx, DWORD PTR _TokenType$[ebp]
	mov	DWORD PTR tv602[ebp], edx
	cmp	DWORD PTR tv602[ebp], 1
	je	SHORT $LN1@WindowPars
	jmp	SHORT $LN2@WindowPars
$LN1@WindowPars:

; 2254 : 				{
; 2255 : 					case TOKEN_WINDOW:
; 2256 : 						Window_->LocalFunction(static_cast<short>(TokenID),P_,str_,Handler_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	movzx	edx, WORD PTR _TokenID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	call	?LocalFunction@C_Window@@QAEXFQAJPADPAVC_Handler@@@Z ; C_Window::LocalFunction
$LN2@WindowPars:

; 2257 : 						break;
; 2258 : 				}
; 2259 : 				P_Idx_=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+958], cx

; 2260 : 				P_[0]=0;P_[1]=0;P_[2]=0;P_[3]=0;P_[4]=0;P_[5]=0;P_[6]=0;P_[7]=0;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+12], 0
	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+12], 0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+12], 0

; 2261 : 				str_=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 2262 : 				Section=SECTION_FINDSUBTOKEN;

	mov	DWORD PTR _Section$[ebp], 2
$LN102@WindowPars:

; 2263 : 				break;
; 2264 : 		}
; 2265 : 	}

	jmp	$LN105@WindowPars
$LN104@WindowPars:

; 2266 : 	return(Window_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]

; 2267 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN118@WindowPars:
	DD	$LN101@WindowPars
	DD	$LN85@WindowPars
	DD	$LN72@WindowPars
	DD	$LN56@WindowPars
	DD	$LN45@WindowPars
	DD	$LN4@WindowPars
$LN119@WindowPars:
	DD	$LN92@WindowPars
	DD	$LN94@WindowPars
	DD	$LN93@WindowPars
	DD	$LN96@WindowPars
	DD	$LN91@WindowPars
$LN111@WindowPars:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN120@WindowPars:
	DD	$LN81@WindowPars
	DD	$LN80@WindowPars
	DD	$LN79@WindowPars
	DD	$LN78@WindowPars
	DD	$LN75@WindowPars
	DD	$LN77@WindowPars
	DD	$LN76@WindowPars
	DD	$LN74@WindowPars
$LN112@WindowPars:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	1
	DB	3
	DB	4
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	5
	DB	1
	DB	7
	DB	1
	DB	1
	DB	6
	DB	7
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	npad	1
$LN121@WindowPars:
	DD	$LN63@WindowPars
	DD	$LN65@WindowPars
	DD	$LN64@WindowPars
	DD	$LN67@WindowPars
	DD	$LN62@WindowPars
$LN113@WindowPars:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN122@WindowPars:
	DD	$LN38@WindowPars
	DD	$LN37@WindowPars
	DD	$LN36@WindowPars
$LN114@WindowPars:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	1
$LN123@WindowPars:
	DD	$LN18@WindowPars
	DD	$LN17@WindowPars
$LN115@WindowPars:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
$LN124@WindowPars:
	DD	$LN9@WindowPars
	DD	$LN8@WindowPars
$LN116@WindowPars:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WindowParser@C_Parser@@AAEPAVC_Window@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?WindowParser@C_Parser@@AAEPAVC_Window@@XZ ENDP		; C_Parser::WindowParser
; Function compile flags: /Odtp
;	COMDAT ??_GC_VersionText@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_VersionText@@UAEPAXI@Z PROC			; C_VersionText::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_VersionText@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_VersionText@@UAEPAXI@Z ENDP			; C_VersionText::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1C_VersionText@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1C_VersionText@@UAE@XZ PROC				; C_VersionText::~C_VersionText, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Text@@UAE@XZ			; C_Text::~C_Text
	mov	esp, ebp
	pop	ebp
	ret	0
??1C_VersionText@@UAE@XZ ENDP				; C_VersionText::~C_VersionText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctext.h
;	COMDAT ?SetText@C_VersionText@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_txtID$ = 8						; size = 4
?SetText@C_VersionText@@UAEXJ@Z PROC			; C_VersionText::SetText, COMDAT
; _this$ = ecx

; 70   : 	void SetText(long txtID){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetText@C_VersionText@@UAEXJ@Z ENDP			; C_VersionText::SetText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctext.h
;	COMDAT ?SetText@C_VersionText@@UAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_txt$ = 8						; size = 4
?SetText@C_VersionText@@UAEXPAD@Z PROC			; C_VersionText::SetText, COMDAT
; _this$ = ecx

; 69   : 	void SetText(_TCHAR *txt){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetText@C_VersionText@@UAEXPAD@Z ENDP			; C_VersionText::SetText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctext.h
;	COMDAT ??0C_VersionText@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0C_VersionText@@QAE@XZ PROC				; C_VersionText::C_VersionText, COMDAT
; _this$ = ecx

; 66   : 	explicit C_VersionText() : C_Text(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0C_Text@@QAE@XZ			; C_Text::C_Text
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7C_VersionText@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0C_VersionText@@QAE@XZ ENDP				; C_VersionText::C_VersionText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctext.h
;	COMDAT ?SaveText@C_Text@@UAEXPAXPAVC_Parser@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SaveText@C_Text@@UAEXPAXPAVC_Parser@@@Z PROC		; C_Text::SaveText, COMDAT
; _this$ = ecx

; 59   : 		void SaveText(HANDLE ,C_Parser *)	{ ; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SaveText@C_Text@@UAEXPAXPAVC_Parser@@@Z ENDP		; C_Text::SaveText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ctext.h
;	COMDAT ?GetFont@C_Text@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFont@C_Text@@UAEJXZ PROC				; C_Text::GetFont, COMDAT
; _this$ = ecx

; 44   : 		long GetFont() { return(Font_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFont@C_Text@@UAEJXZ ENDP				; C_Text::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Wheel@C_Base@@UAEHHGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_increments$ = 8					; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
?Wheel@C_Base@@UAEHHGG@Z PROC				; C_Base::Wheel, COMDAT
; _this$ = ecx

; 187  : 		virtual BOOL Wheel(int increments, WORD MouseX, WORD MouseY)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Wheel@C_Base@@UAEHHGG@Z ENDP				; C_Base::Wheel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC	; C_Base::Drop, COMDAT
; _this$ = ecx

; 182  : 		virtual BOOL Drop(GRABBER *Drag,WORD MouseX,WORD MouseY,C_Window *over) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drop@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP	; C_Base::Drop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Drag$ = 8						; size = 4
_MouseX$ = 12						; size = 2
_MouseY$ = 16						; size = 2
_over$ = 20						; size = 4
?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z PROC	; C_Base::Drag, COMDAT
; _this$ = ecx

; 181  : 		virtual BOOL Drag(GRABBER *Drag,WORD MouseX,WORD MouseY,C_Window *over) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Drag@C_Base@@UAEHPAUGRABBER@@GGPAVC_Window@@@Z ENDP	; C_Base::Drag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetItemXY@C_Base@@UAEXJPAJ0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?GetItemXY@C_Base@@UAEXJPAJ0@Z PROC			; C_Base::GetItemXY, COMDAT
; _this$ = ecx

; 180  : 		virtual void GetItemXY(long ID,long *x,long *y)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetItemXY@C_Base@@UAEXJPAJ0@Z ENDP			; C_Base::GetItemXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Dragable@C_Base@@UAEHJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Dragable@C_Base@@UAEHJ@Z PROC				; C_Base::Dragable, COMDAT
; _this$ = ecx

; 179  : 		virtual BOOL Dragable(long ID)					{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Dragable@C_Base@@UAEHJ@Z ENDP				; C_Base::Dragable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMe@C_Base@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMe@C_Base@@UAEPAV1@XZ PROC				; C_Base::GetMe, COMDAT
; _this$ = ecx

; 178  : 		virtual C_Base *GetMe()							{ return(this); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMe@C_Base@@UAEPAV1@XZ ENDP				; C_Base::GetMe
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?MouseOver@C_Base@@UAEHJJPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relX$ = 8						; size = 4
_relY$ = 12						; size = 4
_me$ = 16						; size = 4
?MouseOver@C_Base@@UAEHJJPAV1@@Z PROC			; C_Base::MouseOver, COMDAT
; _this$ = ecx

; 177  : 		virtual BOOL MouseOver(long relX,long relY,C_Base *me) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MouseOver@C_Base@@UAEHJJPAV1@@Z ENDP			; C_Base::MouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CloseWindow@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseWindow@C_Base@@UAEHXZ PROC			; C_Base::CloseWindow, COMDAT
; _this$ = ecx

; 176  : 		virtual BOOL CloseWindow()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseWindow@C_Base@@UAEHXZ ENDP			; C_Base::CloseWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Process@C_Base@@UAEHJF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_HitType$ = 12						; size = 2
?Process@C_Base@@UAEHJF@Z PROC				; C_Base::Process, COMDAT
; _this$ = ecx

; 175  : 		virtual BOOL Process(long ID,short HitType)		{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?Process@C_Base@@UAEHJF@Z ENDP				; C_Base::Process
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CheckKeyboard@C_Base@@UAEHEEEJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_DKScanCode$ = 8					; size = 1
_Ascii$ = 12						; size = 1
_ShiftStates$ = 16					; size = 1
_RepeatCount$ = 20					; size = 4
?CheckKeyboard@C_Base@@UAEHEEEJ@Z PROC			; C_Base::CheckKeyboard, COMDAT
; _this$ = ecx

; 174  : 		virtual BOOL CheckKeyboard(uchar DKScanCode,uchar Ascii,uchar ShiftStates,long RepeatCount) { return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckKeyboard@C_Base@@UAEHEEEJ@Z ENDP			; C_Base::CheckKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?CheckHotSpots@C_Base@@UAEJJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_relx$ = 8						; size = 4
_rely$ = 12						; size = 4
?CheckHotSpots@C_Base@@UAEJJJ@Z PROC			; C_Base::CheckHotSpots, COMDAT
; _this$ = ecx

; 173  : 		virtual long CheckHotSpots(long relx,long rely)	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?CheckHotSpots@C_Base@@UAEJJJ@Z ENDP			; C_Base::CheckHotSpots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Deactivate@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deactivate@C_Base@@UAEXXZ PROC				; C_Base::Deactivate, COMDAT
; _this$ = ecx

; 172  : 		virtual void Deactivate()						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Deactivate@C_Base@@UAEXXZ ENDP				; C_Base::Deactivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?Activate@C_Base@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Activate@C_Base@@UAEXXZ PROC				; C_Base::Activate, COMDAT
; _this$ = ecx

; 171  : 		virtual void Activate()							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@C_Base@@UAEXXZ ENDP				; C_Base::Activate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_surface$ = 8						; size = 4
_cliprect$ = 12						; size = 4
?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z PROC	; C_Base::HighLite, COMDAT
; _this$ = ecx

; 167  : 		virtual void HighLite(SCREEN *surface,UI95_RECT *cliprect)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?HighLite@C_Base@@UAEXPAVSCREEN@@PAUUI95_RECT@@@Z ENDP	; C_Base::HighLite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?IsControl@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsControl@C_Base@@UAEHXZ PROC				; C_Base::IsControl, COMDAT
; _this$ = ecx

; 164  : 		virtual BOOL IsControl()						{ return(FALSE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsControl@C_Base@@UAEHXZ ENDP				; C_Base::IsControl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?IsBase@C_Base@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBase@C_Base@@UAEHXZ PROC				; C_Base::IsBase, COMDAT
; _this$ = ecx

; 163  : 		virtual BOOL IsBase()							{ return(TRUE); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBase@C_Base@@UAEHXZ ENDP				; C_Base::IsBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ PROC		; C_Base::GetCallback, COMDAT
; _this$ = ecx

; 160  : 		virtual void (*GetCallback())(long,short,C_Base*) { return(NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallback@C_Base@@UAEP6AXJFPAV1@@ZXZ ENDP		; C_Base::GetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetDragCursorID@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDragCursorID@C_Base@@UAEJXZ PROC			; C_Base::GetDragCursorID, COMDAT
; _this$ = ecx

; 159  : 		virtual long  GetDragCursorID()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDragCursorID@C_Base@@UAEJXZ ENDP			; C_Base::GetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetCursorID@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorID@C_Base@@UAEJXZ PROC			; C_Base::GetCursorID, COMDAT
; _this$ = ecx

; 158  : 		virtual long  GetCursorID()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorID@C_Base@@UAEJXZ ENDP			; C_Base::GetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMouseOver@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseOver@C_Base@@UAEFXZ PROC			; C_Base::GetMouseOver, COMDAT
; _this$ = ecx

; 157  : 		virtual short GetMouseOver() { return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseOver@C_Base@@UAEFXZ ENDP			; C_Base::GetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Type$ = 8						; size = 2
?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z PROC		; C_Base::GetSound, COMDAT
; _this$ = ecx

; 156  : 		virtual SOUND_RES *GetSound(short Type) { return(NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSound@C_Base@@UAEPAVSOUND_RES@@F@Z ENDP		; C_Base::GetSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetHelpText@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHelpText@C_Base@@UAEJXZ PROC			; C_Base::GetHelpText, COMDAT
; _this$ = ecx

; 155  : 		virtual long  GetHelpText()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHelpText@C_Base@@UAEJXZ ENDP			; C_Base::GetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetMenu@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMenu@C_Base@@UAEJXZ PROC				; C_Base::GetMenu, COMDAT
; _this$ = ecx

; 153  : 		virtual long  GetMenu()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenu@C_Base@@UAEJXZ ENDP				; C_Base::GetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetHotKey@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHotKey@C_Base@@UAEFXZ PROC				; C_Base::GetHotKey, COMDAT
; _this$ = ecx

; 152  : 		virtual short GetHotKey()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHotKey@C_Base@@UAEFXZ ENDP				; C_Base::GetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetState@C_Base@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetState@C_Base@@UAEFXZ PROC				; C_Base::GetState, COMDAT
; _this$ = ecx

; 151  : 		virtual short GetState()	{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@C_Base@@UAEFXZ ENDP				; C_Base::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetRelY@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelY@C_Base@@UAEJXZ PROC				; C_Base::GetRelY, COMDAT
; _this$ = ecx

; 148  : 		virtual long GetRelY()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelY@C_Base@@UAEJXZ ENDP				; C_Base::GetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetRelX@C_Base@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRelX@C_Base@@UAEJXZ PROC				; C_Base::GetRelX, COMDAT
; _this$ = ecx

; 147  : 		virtual long GetRelX()		{ return(0); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRelX@C_Base@@UAEJXZ ENDP				; C_Base::GetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cb$ = 8						; size = 4
?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z PROC		; C_Base::SetCallback, COMDAT
; _this$ = ecx

; 131  : 		virtual void SetCallback(void (*cb)(long,short,C_Base*)){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCallback@C_Base@@UAEXP6AXJFPAV1@@Z@Z ENDP		; C_Base::SetCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOverPerc@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_perc$ = 8						; size = 2
?SetMouseOverPerc@C_Base@@UAEXF@Z PROC			; C_Base::SetMouseOverPerc, COMDAT
; _this$ = ecx

; 130  : 		virtual void SetMouseOverPerc(short perc)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverPerc@C_Base@@UAEXF@Z ENDP			; C_Base::SetMouseOverPerc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOverColor@C_Base@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetMouseOverColor@C_Base@@UAEXK@Z PROC			; C_Base::SetMouseOverColor, COMDAT
; _this$ = ecx

; 129  : 		virtual void SetMouseOverColor(COLORREF color)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOverColor@C_Base@@UAEXK@Z ENDP			; C_Base::SetMouseOverColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMouseOver@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetMouseOver@C_Base@@UAEXF@Z PROC			; C_Base::SetMouseOver, COMDAT
; _this$ = ecx

; 128  : 		virtual void SetMouseOver(short state)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseOver@C_Base@@UAEXF@Z ENDP			; C_Base::SetMouseOver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetHelpText@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetHelpText@C_Base@@UAEXJ@Z PROC			; C_Base::SetHelpText, COMDAT
; _this$ = ecx

; 127  : 		virtual void SetHelpText(long id)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHelpText@C_Base@@UAEXJ@Z ENDP			; C_Base::SetHelpText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetDragCursorID@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetDragCursorID@C_Base@@UAEXJ@Z PROC			; C_Base::SetDragCursorID, COMDAT
; _this$ = ecx

; 126  : 		virtual void SetDragCursorID(long id)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragCursorID@C_Base@@UAEXJ@Z ENDP			; C_Base::SetDragCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetCursorID@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetCursorID@C_Base@@UAEXJ@Z PROC			; C_Base::SetCursorID, COMDAT
; _this$ = ecx

; 125  : 		virtual void SetCursorID(long id)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorID@C_Base@@UAEXJ@Z ENDP			; C_Base::SetCursorID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetSound@C_Base@@UAEXJF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
_type$ = 12						; size = 2
?SetSound@C_Base@@UAEXJF@Z PROC				; C_Base::SetSound, COMDAT
; _this$ = ecx

; 124  : 		virtual void SetSound(long ID,short type)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSound@C_Base@@UAEXJF@Z ENDP				; C_Base::SetSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetMenu@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetMenu@C_Base@@UAEXJ@Z PROC				; C_Base::SetMenu, COMDAT
; _this$ = ecx

; 122  : 		virtual void SetMenu(long ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMenu@C_Base@@UAEXJ@Z ENDP				; C_Base::SetMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetHotKey@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
?SetHotKey@C_Base@@UAEXF@Z PROC				; C_Base::SetHotKey, COMDAT
; _this$ = ecx

; 121  : 		virtual void SetHotKey(short key)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHotKey@C_Base@@UAEXF@Z ENDP				; C_Base::SetHotKey
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetState@C_Base@@UAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 2
?SetState@C_Base@@UAEXF@Z PROC				; C_Base::SetState, COMDAT
; _this$ = ecx

; 120  : 		virtual void SetState(short state)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetState@C_Base@@UAEXF@Z ENDP				; C_Base::SetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelXY@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetRelXY@C_Base@@UAEXJJ@Z PROC				; C_Base::SetRelXY, COMDAT
; _this$ = ecx

; 112  : 		virtual void SetRelXY(long x,long y)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRelXY@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetRelXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelY@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetRelY@C_Base@@UAEXJ@Z PROC				; C_Base::SetRelY, COMDAT
; _this$ = ecx

; 111  : 		virtual void SetRelY(long y)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelY@C_Base@@UAEXJ@Z ENDP				; C_Base::SetRelY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetRelX@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetRelX@C_Base@@UAEXJ@Z PROC				; C_Base::SetRelX, COMDAT
; _this$ = ecx

; 110  : 		virtual void SetRelX(long x)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRelX@C_Base@@UAEXJ@Z ENDP				; C_Base::SetRelX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetXYWH@C_Base@@UAEXJJJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
?SetXYWH@C_Base@@UAEXJJJJ@Z PROC			; C_Base::SetXYWH, COMDAT
; _this$ = ecx

; 109  : 		virtual void SetXYWH(long x,long y,long w,long h)		{ x_=x; y_=y; w_=w; h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetXYWH@C_Base@@UAEXJJJJ@Z ENDP			; C_Base::SetXYWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetWH@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?SetWH@C_Base@@UAEXJJ@Z PROC				; C_Base::SetWH, COMDAT
; _this$ = ecx

; 108  : 		virtual void SetWH(long w,long h)						{ w_=w; h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWH@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetWH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetXY@C_Base@@UAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetXY@C_Base@@UAEXJJ@Z PROC				; C_Base::SetXY, COMDAT
; _this$ = ecx

; 107  : 		virtual void SetXY(long x,long y)						{ x_=x; y_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetXY@C_Base@@UAEXJJ@Z ENDP				; C_Base::SetXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetH@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_h$ = 8							; size = 4
?SetH@C_Base@@UAEXJ@Z PROC				; C_Base::SetH, COMDAT
; _this$ = ecx

; 106  : 		virtual void SetH(long h)								{ h_=h; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetH@C_Base@@UAEXJ@Z ENDP				; C_Base::SetH
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetW@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
?SetW@C_Base@@UAEXJ@Z PROC				; C_Base::SetW, COMDAT
; _this$ = ecx

; 105  : 		virtual void SetW(long w)								{ w_=w; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetW@C_Base@@UAEXJ@Z ENDP				; C_Base::SetW
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetY@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?SetY@C_Base@@UAEXJ@Z PROC				; C_Base::SetY, COMDAT
; _this$ = ecx

; 104  : 		virtual void SetY(long y)								{ y_=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetY@C_Base@@UAEXJ@Z ENDP				; C_Base::SetY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetX@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetX@C_Base@@UAEXJ@Z PROC				; C_Base::SetX, COMDAT
; _this$ = ecx

; 103  : 		virtual void SetX(long x)								{ x_=x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetX@C_Base@@UAEXJ@Z ENDP				; C_Base::SetX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlagBitOff@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
?SetFlagBitOff@C_Base@@UAEXJ@Z PROC			; C_Base::SetFlagBitOff, COMDAT
; _this$ = ecx

; 102  : 		virtual void SetFlagBitOff(long bits)					{ Flags_ &= ~bits; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _bits$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBitOff@C_Base@@UAEXJ@Z ENDP			; C_Base::SetFlagBitOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetFlagBitOn@C_Base@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
?SetFlagBitOn@C_Base@@UAEXJ@Z PROC			; C_Base::SetFlagBitOn, COMDAT
; _this$ = ecx

; 101  : 		virtual void SetFlagBitOn(long bits)					{ Flags_ |= bits; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBitOn@C_Base@@UAEXJ@Z ENDP			; C_Base::SetFlagBitOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cstringrc.h
;	COMDAT ?GetLastID@C_String@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastID@C_String@@QAEJXZ PROC			; C_String::GetLastID, COMDAT
; _this$ = ecx

; 43   : 		long GetLastID() { return(LastID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastID@C_String@@QAEJXZ ENDP			; C_String::GetLastID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\csoundrc.h
;	COMDAT ?SetIDTable@C_Sound@@QAEXPAVC_Hash@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tbl$ = 8						; size = 4
?SetIDTable@C_Sound@@QAEXPAVC_Hash@@@Z PROC		; C_Sound::SetIDTable, COMDAT
; _this$ = ecx

; 68   : 		void SetIDTable(C_Hash *tbl) { IDTable_=tbl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tbl$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetIDTable@C_Sound@@QAEXPAVC_Hash@@@Z ENDP		; C_Sound::SetIDTable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GC_Hash@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GC_Hash@@QAEPAXI@Z PROC				; C_Hash::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1C_Hash@@QAE@XZ			; C_Hash::~C_Hash
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GC_Hash@@QAEPAXI@Z ENDP				; C_Hash::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chash.h
;	COMDAT ?SetFlags@C_Hash@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flags$ = 8						; size = 4
?SetFlags@C_Hash@@QAEXJ@Z PROC				; C_Hash::SetFlags, COMDAT
; _this$ = ecx

; 55   : 		void SetFlags(long flags) { flags_=flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlags@C_Hash@@QAEXJ@Z ENDP				; C_Hash::SetFlags
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z PROC	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_Estringdispid@CComTypeInfoHolder@ATL@@QAEPAXI@Z ENDP	; ATL::CComTypeInfoHolder::stringdispid::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ PROC	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CComBSTR@ATL@@QAE@XZ			; ATL::CComBSTR::~CComBSTR
	mov	esp, ebp
	pop	ebp
	ret	0
??1stringdispid@CComTypeInfoHolder@ATL@@QAE@XZ ENDP	; ATL::CComTypeInfoHolder::stringdispid::~stringdispid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :     ::SysFreeString(m_str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4

; 1658 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
