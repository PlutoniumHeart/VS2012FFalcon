; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\vu2\src\vu_ordered_list.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ; std::_Iterator_base0::_Getcont
PUBLIC	??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
PUBLIC	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode
PUBLIC	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
PUBLIC	?insert@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::insert
PUBLIC	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
PUBLIC	?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::end
PUBLIC	?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
PUBLIC	?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
PUBLIC	?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
PUBLIC	?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase
PUBLIC	?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
PUBLIC	??0VuOrderedList@@QAE@PAVVuFilter@@@Z		; VuOrderedList::VuOrderedList
PUBLIC	??1VuOrderedList@@UAE@XZ			; VuOrderedList::~VuOrderedList
PUBLIC	?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z ; VuOrderedList::PrivateInsert
PUBLIC	?PrivateRemove@VuOrderedList@@MAEHPAVVuEntity@@@Z ; VuOrderedList::PrivateRemove
PUBLIC	?PrivateFind@VuOrderedList@@MAE_NPAVVuEntity@@@Z ; VuOrderedList::PrivateFind
PUBLIC	?Type@VuOrderedList@@MBE?AW4VU_COLL_TYPE@@XZ	; VuOrderedList::Type
PUBLIC	??_GVuOrderedList@@UAEPAXI@Z			; VuOrderedList::`scalar deleting destructor'
PUBLIC	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z	; VuBin<VuEntity>::VuBin<VuEntity>
PUBLIC	??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z		; VuBin<VuEntity>::VuBin<VuEntity>
PUBLIC	??1?$VuBin@VVuEntity@@@@QAE@XZ			; VuBin<VuEntity>::~VuBin<VuEntity>
PUBLIC	??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::operator*
PUBLIC	??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z		; VuBin<VuEntity>::`scalar deleting destructor'
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_Unchecked
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
PUBLIC	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator--
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator!=
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
PUBLIC	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
PUBLIC	??$emplace@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::emplace<VuBin<VuEntity> >
PUBLIC	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
PUBLIC	??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??_7VuOrderedList@@6B@				; VuOrderedList::`vftable'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4VuOrderedList@@6B@				; VuOrderedList::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVuOrderedList@@@8			; VuOrderedList `RTTI Type Descriptor'
PUBLIC	??_R3VuOrderedList@@8				; VuOrderedList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuOrderedList@@8				; VuOrderedList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuOrderedList@@8			; VuOrderedList::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@VuLinkedList@@8			; VuLinkedList::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuLinkedList@@@8			; VuLinkedList `RTTI Type Descriptor'
PUBLIC	??_R3VuLinkedList@@8				; VuLinkedList::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuLinkedList@@8				; VuLinkedList::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuCollection@@8			; VuCollection::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuCollection@@@8			; VuCollection `RTTI Type Descriptor'
PUBLIC	??_R3VuCollection@@8				; VuCollection::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuCollection@@8				; VuCollection::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetFilter@VuCollection@@IBEPAVVuFilter@@XZ:PROC ; VuCollection::GetFilter
EXTRN	??0VuLinkedList@@QAE@PAVVuFilter@@@Z:PROC	; VuLinkedList::VuLinkedList
EXTRN	??1VuLinkedList@@UAE@XZ:PROC			; VuLinkedList::~VuLinkedList
EXTRN	?PrivateFind@VuLinkedList@@MBE_NPAVVuEntity@@@Z:PROC ; VuLinkedList::PrivateFind
EXTRN	?Purge@VuLinkedList@@UAEIE@Z:PROC		; VuLinkedList::Purge
EXTRN	?Count@VuLinkedList@@UBEIXZ:PROC		; VuLinkedList::Count
EXTRN	??_EVuOrderedList@@UAEPAXI@Z:PROC		; VuOrderedList::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R2VuCollection@@8
rdata$r	SEGMENT
??_R2VuCollection@@8 DD FLAT:??_R1A@?0A@EA@VuCollection@@8 ; VuCollection::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuCollection@@8
rdata$r	SEGMENT
??_R3VuCollection@@8 DD 00H				; VuCollection::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuCollection@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuCollection@@@8
_DATA	SEGMENT
??_R0?AVVuCollection@@@8 DD FLAT:??_7type_info@@6B@	; VuCollection `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuCollection@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuCollection@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuCollection@@8 DD FLAT:??_R0?AVVuCollection@@@8 ; VuCollection::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuCollection@@8
rdata$r	ENDS
;	COMDAT ??_R2VuLinkedList@@8
rdata$r	SEGMENT
??_R2VuLinkedList@@8 DD FLAT:??_R1A@?0A@EA@VuLinkedList@@8 ; VuLinkedList::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuCollection@@8
rdata$r	ENDS
;	COMDAT ??_R3VuLinkedList@@8
rdata$r	SEGMENT
??_R3VuLinkedList@@8 DD 00H				; VuLinkedList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2VuLinkedList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuLinkedList@@@8
_DATA	SEGMENT
??_R0?AVVuLinkedList@@@8 DD FLAT:??_7type_info@@6B@	; VuLinkedList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuLinkedList@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuLinkedList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuLinkedList@@8 DD FLAT:??_R0?AVVuLinkedList@@@8 ; VuLinkedList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuLinkedList@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VuOrderedList@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuOrderedList@@8 DD FLAT:??_R0?AVVuOrderedList@@@8 ; VuOrderedList::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuOrderedList@@8
rdata$r	ENDS
;	COMDAT ??_R2VuOrderedList@@8
rdata$r	SEGMENT
??_R2VuOrderedList@@8 DD FLAT:??_R1A@?0A@EA@VuOrderedList@@8 ; VuOrderedList::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuLinkedList@@8
	DD	FLAT:??_R1A@?0A@EA@VuCollection@@8
rdata$r	ENDS
;	COMDAT ??_R3VuOrderedList@@8
rdata$r	SEGMENT
??_R3VuOrderedList@@8 DD 00H				; VuOrderedList::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2VuOrderedList@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuOrderedList@@@8
_DATA	SEGMENT
??_R0?AVVuOrderedList@@@8 DD FLAT:??_7type_info@@6B@	; VuOrderedList `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuOrderedList@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VuOrderedList@@6B@
rdata$r	SEGMENT
??_R4VuOrderedList@@6B@ DD 00H				; VuOrderedList::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVuOrderedList@@@8
	DD	FLAT:??_R3VuOrderedList@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7VuOrderedList@@6B@
CONST	SEGMENT
??_7VuOrderedList@@6B@ DD FLAT:??_R4VuOrderedList@@6B@	; VuOrderedList::`vftable'
	DD	FLAT:?Purge@VuLinkedList@@UAEIE@Z
	DD	FLAT:?Count@VuLinkedList@@UBEIXZ
	DD	FLAT:?Type@VuOrderedList@@MBE?AW4VU_COLL_TYPE@@XZ
	DD	FLAT:??_EVuOrderedList@@UAEPAXI@Z
	DD	FLAT:?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z
	DD	FLAT:?PrivateRemove@VuOrderedList@@MAEHPAVVuEntity@@@Z
	DD	FLAT:?PrivateFind@VuLinkedList@@MBE_NPAVVuEntity@@@Z
	DD	FLAT:?PrivateFind@VuOrderedList@@MAE_NPAVVuEntity@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z$0
__ehfuncinfo$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$0
__unwindtable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$2
__ehfuncinfo$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z$1
__ehfuncinfo$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv76 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z	; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	pop	ebp
	ret	0
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z

; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	call	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$0:
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z PROC ; std::addressof<VuBin<VuEntity> >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ENDP ; std::addressof<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$emplace@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__V0$ = 16						; size = 4
??$emplace@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::emplace<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_Unchecked
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator--
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$emplace@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::emplace<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z PROC ; std::forward<VuBin<VuEntity> >, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ENDP ; std::forward<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>

; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++, COMDAT
; _this$ = ecx

; 372  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 		++(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++

; 374  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 375  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*, COMDAT
; _this$ = ecx

; 362  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*

; 364  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator!=, COMDAT
; _this$ = ecx

; 302  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 304  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv75 = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv75[ebp]

; 299  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator--, COMDAT
; _this$ = ecx

; 252  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 274  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 247  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++

; 248  : 		return (_Tmp);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++, COMDAT
; _this$ = ecx

; 224  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 241  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*, COMDAT
; _this$ = ecx

; 204  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4

; 221  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_Unchecked, COMDAT
; _this$ = ecx

; 199  : 		{	// make an unchecked iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ; std::_Iterator_base0::_Getcont
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 201  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>

; 188  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z PROC			; VuBin<VuEntity>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z ENDP			; VuBin<VuEntity>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC		; VuBin<VuEntity>::operator*, COMDAT
; _this$ = ecx

; 45   : 	E *operator*() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 47   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP		; VuBin<VuEntity>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??1?$VuBin@VVuEntity@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VuBin@VVuEntity@@@@QAE@XZ PROC			; VuBin<VuEntity>::~VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 19   : 	~VuBin(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 		VuDeReferenceEntity((VuEntity *)e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 21   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VuBin@VVuEntity@@@@QAE@XZ ENDP			; VuBin<VuEntity>::~VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z PROC		; VuBin<VuEntity>::VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 15   : 	VuBin(const VuBin &rhs) : e(rhs.e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 16   : 		VuReferenceEntity(e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 17   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z ENDP		; VuBin<VuEntity>::VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z PROC	; VuBin<VuEntity>::VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 11   : 	explicit VuBin(E *e = NULL) : e(e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax], ecx

; 12   : 		VuReferenceEntity(e);

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 13   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ENDP	; VuBin<VuEntity>::VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GVuOrderedList@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVuOrderedList@@UAEPAXI@Z PROC			; VuOrderedList::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VuOrderedList@@UAE@XZ		; VuOrderedList::~VuOrderedList
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVuOrderedList@@UAEPAXI@Z ENDP			; VuOrderedList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_ordered_list.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuOrderedList@@MBE?AW4VU_COLL_TYPE@@XZ PROC	; VuOrderedList::Type
; _this$ = ecx

; 92   : VU_COLL_TYPE VuOrderedList::Type() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	return VU_ORDERED_LIST_COLLECTION;

	mov	eax, 515				; 00000203H

; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuOrderedList@@MBE?AW4VU_COLL_TYPE@@XZ ENDP	; VuOrderedList::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_ordered_list.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
_b$2 = -20						; size = 4
_res$3 = -16						; size = 4
tv134 = -12						; size = 4
_this$ = -8						; size = 4
_it$4 = -4						; size = 4
_entity$ = 8						; size = 4
?PrivateFind@VuOrderedList@@MAE_NPAVVuEntity@@@Z PROC	; VuOrderedList::PrivateFind
; _this$ = ecx

; 40   : bool VuOrderedList::PrivateFind(VuEntity* entity){

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	for (VuLinkedList::iterator it=l_.begin();it!=l_.end();++it){

	lea	eax, DWORD PTR _it$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
	jmp	SHORT $LN6@PrivateFin
$LN5@PrivateFin:
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
$LN6@PrivateFin:
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::end
	push	eax
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@PrivateFin

; 42   : 		VuEntityBin &b = *it;

	lea	ecx, DWORD PTR _it$4[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
	mov	DWORD PTR _b$2[ebp], eax

; 43   : 		int res = GetFilter()->Compare(*b, entity);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFilter@VuCollection@@IBEPAVVuFilter@@XZ ; VuCollection::GetFilter
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$2[ebp]
	call	??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::operator*
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv134[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _res$3[ebp], eax

; 44   : 		if (res == 0){

	cmp	DWORD PTR _res$3[ebp], 0
	jne	SHORT $LN3@PrivateFin

; 45   : 			return true;

	mov	al, 1
	jmp	SHORT $LN7@PrivateFin
	jmp	SHORT $LN2@PrivateFin
$LN3@PrivateFin:

; 46   : 		}
; 47   : 		else if (res > 0){

	cmp	DWORD PTR _res$3[ebp], 0
	jle	SHORT $LN2@PrivateFin

; 48   : 			// all other elements are smaller than entity, can stop
; 49   : 			return false;

	xor	al, al
	jmp	SHORT $LN7@PrivateFin
$LN2@PrivateFin:

; 50   : 		}
; 51   : 	}

	jmp	SHORT $LN5@PrivateFin
$LN4@PrivateFin:

; 52   : 	return false;

	xor	al, al
$LN7@PrivateFin:

; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PrivateFind@VuOrderedList@@MAE_NPAVVuEntity@@@Z ENDP	; VuOrderedList::PrivateFind
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_ordered_list.cpp
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
_b$4 = -20						; size = 4
_res$5 = -16						; size = 4
tv134 = -12						; size = 4
_this$ = -8						; size = 4
_it$6 = -4						; size = 4
_entity$ = 8						; size = 4
?PrivateRemove@VuOrderedList@@MAEHPAVVuEntity@@@Z PROC	; VuOrderedList::PrivateRemove
; _this$ = ecx

; 24   : VU_ERRCODE VuOrderedList::PrivateRemove(VuEntity* entity){

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	for (VuLinkedList::iterator it=l_.begin();it!=l_.end();++it){

	lea	eax, DWORD PTR _it$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
	jmp	SHORT $LN6@PrivateRem
$LN5@PrivateRem:
	lea	ecx, DWORD PTR _it$6[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
$LN6@PrivateRem:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::end
	push	eax
	lea	ecx, DWORD PTR _it$6[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@PrivateRem

; 26   : 		VuEntityBin &b = *it;

	lea	ecx, DWORD PTR _it$6[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
	mov	DWORD PTR _b$4[ebp], eax

; 27   : 		int res = GetFilter()->Compare(*b, entity);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFilter@VuCollection@@IBEPAVVuFilter@@XZ ; VuCollection::GetFilter
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$4[ebp]
	call	??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::operator*
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv134[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _res$5[ebp], eax

; 28   : 		if (res == 0){

	cmp	DWORD PTR _res$5[ebp], 0
	jne	SHORT $LN3@PrivateRem

; 29   : 			l_.erase(it);

	mov	ecx, DWORD PTR _it$6[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase

; 30   : 			return VU_SUCCESS;

	mov	eax, 1
	jmp	SHORT $LN7@PrivateRem
	jmp	SHORT $LN2@PrivateRem
$LN3@PrivateRem:

; 31   : 		}
; 32   : 		else if (res > 0){

	cmp	DWORD PTR _res$5[ebp], 0
	jle	SHORT $LN2@PrivateRem

; 33   : 			// all other elements are smaller than entity, can stop
; 34   : 			return VU_NO_OP;

	xor	eax, eax
	jmp	SHORT $LN7@PrivateRem
$LN2@PrivateRem:

; 35   : 		}
; 36   : 	}

	jmp	$LN5@PrivateRem
$LN4@PrivateRem:

; 37   : 	return VU_SUCCESS;

	mov	eax, 1
$LN7@PrivateRem:

; 38   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PrivateRemove@VuOrderedList@@MAEHPAVVuEntity@@@Z ENDP	; VuOrderedList::PrivateRemove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_ordered_list.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
tv176 = -52						; size = 4
tv178 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
tv174 = -36						; size = 4
tv177 = -32						; size = 4
_b$7 = -28						; size = 4
tv134 = -24						; size = 4
_it$8 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entity$ = 8						; size = 4
?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z PROC	; VuOrderedList::PrivateInsert
; _this$ = ecx

; 12   : VU_ERRCODE VuOrderedList::PrivateInsert(VuEntity* entity){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 13   : 	for (VuLinkedList::iterator it=l_.begin();it!=l_.end();++it){

	lea	eax, DWORD PTR _it$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
	jmp	SHORT $LN4@PrivateIns
$LN3@PrivateIns:
	lea	ecx, DWORD PTR _it$8[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
$LN4@PrivateIns:
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::end
	push	eax
	lea	ecx, DWORD PTR _it$8[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	$LN2@PrivateIns

; 14   : 		VuEntityBin &b = *it;

	lea	ecx, DWORD PTR _it$8[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
	mov	DWORD PTR _b$7[ebp], eax

; 15   : 		if (GetFilter()->Compare(*b, entity) >= 0) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFilter@VuCollection@@IBEPAVVuFilter@@XZ ; VuCollection::GetFilter
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$7[ebp]
	call	??D?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::operator*
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv134[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	test	eax, eax
	jl	SHORT $LN1@PrivateIns

; 16   : 			l_.insert(it, VuEntityBin(entity));

	mov	ecx, DWORD PTR _it$8[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR _entity$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv177[ebp], eax
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR tv174[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv174[ebp]
	push	ecx
	mov	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?insert@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::insert
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>

; 17   : 			return VU_SUCCESS;

	mov	eax, 1
	jmp	SHORT $LN5@PrivateIns
$LN1@PrivateIns:

; 18   : 		}
; 19   : 	}

	jmp	$LN3@PrivateIns
$LN2@PrivateIns:

; 20   : 	l_.push_back(VuEntityBin(entity));

	mov	ecx, DWORD PTR _entity$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv178[ebp], eax
	mov	edx, DWORD PTR tv178[ebp]
	mov	DWORD PTR tv176[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv176[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>

; 21   : 	return VU_SUCCESS;

	mov	eax, 1
$LN5@PrivateIns:

; 22   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__unwindfunclet$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z$1:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrivateInsert@VuOrderedList@@MAEHPAVVuEntity@@@Z ENDP	; VuOrderedList::PrivateInsert
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_ordered_list.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1VuOrderedList@@UAE@XZ PROC				; VuOrderedList::~VuOrderedList
; _this$ = ecx

; 10   : {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VuOrderedList@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VuLinkedList@@UAE@XZ			; VuLinkedList::~VuLinkedList
	mov	esp, ebp
	pop	ebp
	ret	0
??1VuOrderedList@@UAE@XZ ENDP				; VuOrderedList::~VuOrderedList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_ordered_list.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filter$ = 8						; size = 4
??0VuOrderedList@@QAE@PAVVuFilter@@@Z PROC		; VuOrderedList::VuOrderedList
; _this$ = ecx

; 7    : {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _filter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VuLinkedList@@QAE@PAVVuFilter@@@Z	; VuLinkedList::VuLinkedList
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7VuOrderedList@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VuOrderedList@@QAE@PAVVuFilter@@@Z ENDP		; VuOrderedList::VuOrderedList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sub	eax, 1
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase, COMDAT
; _this$ = ecx

; 1416 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1417 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1418 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1419 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1420 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1421 : 		_Orphan_ptr(*this, _Pnode);
; 1422 : 
; 1423 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1424 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
	mov	ecx, eax
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Pnode != this->_Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@erase

; 1428 : 			{	// not list head, safe to erase
; 1429 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1430 : 				this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1431 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1432 : 				this->_Prevnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1433 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode

; 1434 : 			--this->_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@erase:

; 1435 : 			}
; 1436 : 		return (_Make_iter(_Where));

	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1437 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size

; 1243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter, COMDAT
; _this$ = ecx

; 1156 : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1157 : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1158 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::end, COMDAT
; _this$ = ecx

; 1124 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1125 : 		return (iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1126 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin, COMDAT
; _this$ = ecx

; 1114 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1115 : 		return (iterator(this->_Nextnode(this->_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1116 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?insert@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::insert, COMDAT
; _this$ = ecx

; 1041 : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1042 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::emplace<VuBin<VuEntity> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1043 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back, COMDAT
; _this$ = ecx

; 1036 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1037 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >

; 1038 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 862  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

	cmp	DWORD PTR __Next$[ebp], 0
	jne	SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv133[ebp], eax
	lea	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	jmp	SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Buynode0
	ret	0
$LN5@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 548  : 		}

	pop	ebp
	ret	0
?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 543  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 357913941				; 15555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 54   : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return (0);

	xor	eax, eax

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
