; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\vu2\src\vu_collection_manager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
_BSS	SEGMENT
?vuCollectionManager@@3PAVVuCollectionManager@@A DD 01H DUP (?) ; vuCollectionManager
_BSS	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
PUBLIC	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ		; VuEntity::VuState
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ; std::_Iterator_base0::_Getcont
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ ; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >
PUBLIC	??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
PUBLIC	??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode
PUBLIC	??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
PUBLIC	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
PUBLIC	?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
PUBLIC	?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
PUBLIC	?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
PUBLIC	?empty@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE_NXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::empty
PUBLIC	?front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEAAV?$VuBin@VVuEntity@@@@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::front
PUBLIC	?pop_front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::pop_front
PUBLIC	?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase
PUBLIC	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear
PUBLIC	?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy
PUBLIC	?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
PUBLIC	??0VuScopeLock@@QAE@PAX@Z			; VuScopeLock::VuScopeLock
PUBLIC	??1VuScopeLock@@QAE@XZ				; VuScopeLock::~VuScopeLock
PUBLIC	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z	; VuBin<VuEntity>::VuBin<VuEntity>
PUBLIC	??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z		; VuBin<VuEntity>::VuBin<VuEntity>
PUBLIC	??1?$VuBin@VVuEntity@@@@QAE@XZ			; VuBin<VuEntity>::~VuBin<VuEntity>
PUBLIC	??C?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::operator->
PUBLIC	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::get
PUBLIC	??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z		; VuBin<VuEntity>::`scalar deleting destructor'
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
PUBLIC	??0VuCollectionManager@@QAE@XZ			; VuCollectionManager::VuCollectionManager
PUBLIC	??1VuCollectionManager@@QAE@XZ			; VuCollectionManager::~VuCollectionManager
PUBLIC	?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z ; VuCollectionManager::Register
PUBLIC	?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z ; VuCollectionManager::DeRegister
PUBLIC	?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z ; VuCollectionManager::GridRegister
PUBLIC	?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z ; VuCollectionManager::GridDeRegister
PUBLIC	?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z	; VuCollectionManager::Add
PUBLIC	?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::Remove
PUBLIC	?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z ; VuCollectionManager::HandleMove
PUBLIC	?Handle@VuCollectionManager@@QAEHPAVVuMessage@@@Z ; VuCollectionManager::Handle
PUBLIC	?Shutdown@VuCollectionManager@@QAEXE@Z		; VuCollectionManager::Shutdown
PUBLIC	?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::AddToGc
PUBLIC	?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::AddToBirthList
PUBLIC	?CreateEntitiesAndRunGc@VuCollectionManager@@QAEXXZ ; VuCollectionManager::CreateEntitiesAndRunGc
PUBLIC	?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z ; VuCollectionManager::FindEnt
PUBLIC	??0?$allocator@PAVVuCollection@@@std@@QAE@XZ	; std::allocator<VuCollection *>::allocator<VuCollection *>
PUBLIC	?select_on_container_copy_construction@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBE?AV12@XZ ; std::allocator<std::_List_node<VuCollection *,void *> >::select_on_container_copy_construction
PUBLIC	??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >
PUBLIC	??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuCollection *,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuCollection *> >::_List_val<std::_List_simple_types<VuCollection *> >
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::~_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
PUBLIC	??0?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_List_buy<VuCollection *,std::allocator<VuCollection *> >
PUBLIC	?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode
PUBLIC	?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode
PUBLIC	??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::~_List_buy<VuCollection *,std::allocator<VuCollection *> >
PUBLIC	??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >
PUBLIC	??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >
PUBLIC	?_Insert@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert
PUBLIC	??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
PUBLIC	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
PUBLIC	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
PUBLIC	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
PUBLIC	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
PUBLIC	?_Unchecked_end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_end
PUBLIC	?_Make_iter@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Make_iter
PUBLIC	?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::resize
PUBLIC	?max_size@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBEIXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::max_size
PUBLIC	?push_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::push_back
PUBLIC	?pop_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::pop_back
PUBLIC	?erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::erase
PUBLIC	?_Unchecked_erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_erase
PUBLIC	?clear@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::clear
PUBLIC	?remove@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::remove
PUBLIC	?_Tidy@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Tidy
PUBLIC	?_Incsize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Incsize
PUBLIC	??0?$allocator@PAVVuGridTree@@@std@@QAE@XZ	; std::allocator<VuGridTree *>::allocator<VuGridTree *>
PUBLIC	??0?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocator<std::_List_node<VuGridTree *,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuGridTree *,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_List_val<std::_List_simple_types<VuGridTree *> >
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::~_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
PUBLIC	??0?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >
PUBLIC	?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode
PUBLIC	?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Freenode
PUBLIC	??1?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::~_List_buy<VuGridTree *,std::allocator<VuGridTree *> >
PUBLIC	??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::list<VuGridTree *,std::allocator<VuGridTree *> >
PUBLIC	?_Insert@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert
PUBLIC	??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::~list<VuGridTree *,std::allocator<VuGridTree *> >
PUBLIC	?begin@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::begin
PUBLIC	?end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::end
PUBLIC	?_Unchecked_end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Unchecked_end
PUBLIC	?_Make_iter@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Make_iter
PUBLIC	?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::resize
PUBLIC	?max_size@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBEIXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::max_size
PUBLIC	?push_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::push_back
PUBLIC	?pop_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::pop_back
PUBLIC	?erase@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::erase
PUBLIC	?clear@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::clear
PUBLIC	?remove@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::remove
PUBLIC	?_Tidy@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Tidy
PUBLIC	?_Incsize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Incsize
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>
PUBLIC	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::operator--
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
PUBLIC	?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_Unchecked
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEABQAVVuCollection@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
PUBLIC	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
PUBLIC	??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEABQAVVuGridTree@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
PUBLIC	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator!=
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEAAPAVVuGridTree@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
PUBLIC	??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
PUBLIC	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
PUBLIC	??$?0U?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@PAVVuCollection@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z ; std::allocator<VuCollection *>::allocator<VuCollection *><std::_List_node<VuCollection *,void *> >
PUBLIC	??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@00@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
PUBLIC	??$_Insert@ABQAVVuCollection@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert<VuCollection * const &>
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
PUBLIC	??$_Insert@ABQAVVuGridTree@@@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuGridTree@@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert<VuGridTree * const &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
PUBLIC	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>
PUBLIC	??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z ; std::addressof<VuCollection *>
PUBLIC	??$destroy@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>
PUBLIC	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>
PUBLIC	??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z ; std::addressof<VuGridTree *>
PUBLIC	??$destroy@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>
PUBLIC	??$construct@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>
PUBLIC	??$construct@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
PUBLIC	??$_Allocate@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuCollection@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuCollection *,void *> >
PUBLIC	??$_Allocate@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuGridTree@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuGridTree *,void *> >
PUBLIC	??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
PUBLIC	??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
PUBLIC	??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
PUBLIC	??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ; std::forward<VuCollection * const &>
PUBLIC	??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode<VuCollection * const &>
PUBLIC	??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ; std::forward<VuGridTree * const &>
PUBLIC	??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode<VuGridTree * const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
PUBLIC	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>
PUBLIC	??$destroy@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>
PUBLIC	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>
PUBLIC	??$destroy@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>
PUBLIC	??$construct@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>
PUBLIC	??$construct@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>
PUBLIC	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuCollection *,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
PUBLIC	??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuGridTree *,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$construct@PAVVuCollection@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>
PUBLIC	??$construct@PAVVuGridTree@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >
PUBLIC	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<std::_List_node<VuCollection *,void *> *>
PUBLIC	??$destroy@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<VuCollection *>
PUBLIC	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<std::_List_node<VuGridTree *,void *> *>
PUBLIC	??$destroy@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<VuGridTree *>
PUBLIC	??$construct@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *>
PUBLIC	??$construct@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *>
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$construct@PAVVuCollection@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@ABQAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>
PUBLIC	??$construct@PAVVuGridTree@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@ABQAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *,VuCollection * const &>
PUBLIC	??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *,VuGridTree * const &>
PUBLIC	??_C@_0BI@PFHOLAED@garbage?5collector?5mutex?$AA@ ; `string'
PUBLIC	??_C@_0BA@FHLBPJKI@birthlist?5mutex?$AA@	; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Insert@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Insert
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z:PROC	; VuCollection::Find
EXTRN	?ReallyInsert@VuDatabase@@AAEXPAVVuEntity@@@Z:PROC ; VuDatabase::ReallyInsert
EXTRN	?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z:PROC ; VuDatabase::ReallyRemove
EXTRN	?Move@VuGridTree@@AAEHPAVVuEntity@@MM@Z:PROC	; VuGridTree::Move
EXTRN	?VuxCreateMutex@@YAPAXPBD@Z:PROC		; VuxCreateMutex
EXTRN	?VuxDestroyMutex@@YAXPAX@Z:PROC			; VuxDestroyMutex
EXTRN	?VuxLockMutex@@YAXPAX@Z:PROC			; VuxLockMutex
EXTRN	?VuxUnlockMutex@@YAXPAX@Z:PROC			; VuxUnlockMutex
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@FHLBPJKI@birthlist?5mutex?$AA@
CONST	SEGMENT
??_C@_0BA@FHLBPJKI@birthlist?5mutex?$AA@ DB 'birthlist mutex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PFHOLAED@garbage?5collector?5mutex?$AA@
CONST	SEGMENT
??_C@_0BI@PFHOLAED@garbage?5collector?5mutex?$AA@ DB 'garbage collector m'
	DB	'utex', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z$0
__ehfuncinfo$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z$0
__ehfuncinfo$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z$0
__ehfuncinfo$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z$0
__unwindtable$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z$2
__ehfuncinfo$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z$0
__unwindtable$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z$2
__ehfuncinfo$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$0
__unwindtable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$2
__ehfuncinfo$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z$0
__unwindtable$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z$0
__unwindtable$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z$0
__unwindtable$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z$0
__unwindtable$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0
__unwindtable$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z$0
__unwindtable$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z$0
__unwindtable$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z$0
__unwindtable$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z$0
__unwindtable$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z$1
__unwindtable$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z$1
__unwindtable$?Shutdown@VuCollectionManager@@QAEXE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Shutdown@VuCollectionManager@@QAEXE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Shutdown@VuCollectionManager@@QAEXE@Z$1
__unwindtable$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z$1
__unwindtable$??0VuCollectionManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VuCollectionManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0VuCollectionManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0VuCollectionManager@@QAE@XZ$2
__unwindtable$??1VuCollectionManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1VuCollectionManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1VuCollectionManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1VuCollectionManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1VuCollectionManager@@QAE@XZ$3
__ehfuncinfo$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Shutdown@VuCollectionManager@@QAEXE@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Shutdown@VuCollectionManager@@QAEXE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1VuCollectionManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1VuCollectionManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0VuCollectionManager@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0VuCollectionManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *,VuGridTree * const &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ; std::forward<VuGridTree * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *,VuGridTree * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *,VuCollection * const &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ; std::forward<VuCollection * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *,VuCollection * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv76 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z	; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuGridTree@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVVuGridTree@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ; std::forward<VuGridTree * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVVuGridTree@@ABQAV1@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *,VuGridTree * const &>
	pop	ebp
	ret	0
??$construct@PAVVuGridTree@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuCollection@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVVuCollection@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ; std::forward<VuCollection * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVVuCollection@@ABQAV1@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *,VuCollection * const &>
	pop	ebp
	ret	0
??$construct@PAVVuCollection@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	pop	ebp
	ret	0
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuGridTree *,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuCollection *,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??$construct@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:
	mov	esp, ebp
	pop	ebp
	ret	4
??$construct@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??$construct@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:
	mov	esp, ebp
	pop	ebp
	ret	4
??$construct@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<VuGridTree *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<std::_List_node<VuGridTree *,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<std::_List_node<VuGridTree *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<VuCollection *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<std::_List_node<VuCollection *,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<std::_List_node<VuCollection *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z

; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuGridTree@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVVuGridTree@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ; std::forward<VuGridTree * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVVuGridTree@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@ABQAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVVuGridTree@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuCollection@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVVuCollection@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ; std::forward<VuCollection * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVVuCollection@@ABQAV1@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@ABQAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVVuCollection@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuGridTree *,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<VuGridTree *,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<VuGridTree *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuCollection *,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<VuCollection *,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<VuCollection *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::construct<VuGridTree *>
	pop	ebp
	ret	0
??$construct@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::construct<VuCollection *>
	pop	ebp
	ret	0
??$construct@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAVVuGridTree@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<VuGridTree *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::destroy<std::_List_node<VuGridTree *,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAVVuCollection@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<VuCollection *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::destroy<std::_List_node<VuCollection *,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z PROC ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode<VuGridTree * const &>, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ; std::forward<VuGridTree * const &>
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	call	??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z ; std::addressof<VuGridTree *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAVVuGridTree@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *,VuGridTree * const &>
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z$0:
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z ENDP ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode<VuGridTree * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z PROC ; std::forward<VuGridTree * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ENDP ; std::forward<VuGridTree * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z PROC ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode<VuCollection * const &>, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ; std::forward<VuCollection * const &>
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	call	??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z ; std::addressof<VuCollection *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAVVuCollection@@ABQAV1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *,VuCollection * const &>
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z$0:
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z ENDP ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode<VuCollection * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z PROC ; std::forward<VuCollection * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ENDP ; std::forward<VuCollection * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Before$2 = -36					; size = 4
tv89 = -32						; size = 4
_this$ = -28						; size = 4
__Next$ = -24						; size = 4
tv88 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >, COMDAT
; _this$ = ecx

; 1396 : 		void _Insert_range(_Unchecked_const_iterator _Where,

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1397 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1398 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1399 : 		_DEBUG_RANGE(_First, _Last);
; 1400 : 		_Iter _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 1401 : 
; 1402 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1403 : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN6@Insert_ran
$LN5@Insert_ran:
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
$LN6@Insert_ran:
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
	mov	BYTE PTR tv88[ebp], al
	movzx	edx, BYTE PTR tv88[ebp]
	test	edx, edx
	je	SHORT $LN4@Insert_ran

; 1404 : 			_Insert(_Where, *_First);

	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEABQAVVuCollection@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
	mov	DWORD PTR tv89[ebp], eax
	mov	eax, DWORD PTR tv89[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@ABQAVVuCollection@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert<VuCollection * const &>
	jmp	SHORT $LN5@Insert_ran
$LN4@Insert_ran:
	jmp	SHORT $LN10@Insert_ran
__catch$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$0:

; 1405 : 		_CATCH_ALL
; 1406 : 		for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Insert_ran
$LN2@Insert_ran:
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
$LN3@Insert_ran:
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Insert_ran

; 1407 : 			{	// undo inserts
; 1408 : 			_Unchecked_const_iterator _Before = _Where;

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Before$2[ebp], ecx

; 1409 : 			_Unchecked_erase(--_Before);

	lea	ecx, DWORD PTR __Before$2[ebp]
	call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::operator--
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_erase

; 1410 : 			}

	jmp	SHORT $LN2@Insert_ran
$LN1@Insert_ran:

; 1411 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1412 : 		_CATCH_END

	mov	eax, $LN13@Insert_ran
	ret	0
$LN10@Insert_ran:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@Insert_ran
$LN13@Insert_ran:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Insert_ran:

; 1413 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >, COMDAT

; 398  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 401  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	call	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$0:
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuGridTree@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuGridTree@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<VuGridTree *,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuGridTree@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<VuGridTree *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuCollection@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuCollection@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<VuCollection *,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuCollection@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<VuCollection *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuGridTree *,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAAAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuCollection *,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$construct@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$construct@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	4
??$construct@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$construct@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$construct@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>
	add	esp, 8
	mov	esp, ebp
	pop	ebp
	ret	4
??$construct@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAVVuGridTree@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAVVuGridTree@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z PROC ; std::addressof<VuGridTree *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z ENDP ; std::addressof<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@1@PAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<VuGridTree *,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<VuGridTree *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAVVuCollection@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAVVuCollection@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z PROC ; std::addressof<VuCollection *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z ENDP ; std::addressof<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@PAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<VuCollection *,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<VuCollection *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z PROC ; std::addressof<VuBin<VuEntity> >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ENDP ; std::addressof<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@ABQAVVuGridTree@@@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuGridTree@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@ABQAVVuGridTree@@@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuGridTree@@@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert<VuGridTree * const &>, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVVuGridTree@@@std@@YAABQAVVuGridTree@@ABQAV1@@Z ; std::forward<VuGridTree * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@ABQAVVuGridTree@@@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@1@PAU21@0ABQAVVuGridTree@@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode<VuGridTree * const &>
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Incsize
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Insert@ABQAVVuGridTree@@@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuGridTree@@@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert<VuGridTree * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>

; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@ABQAVVuCollection@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuCollection@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@ABQAVVuCollection@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuCollection@@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert<VuCollection * const &>, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVVuCollection@@@std@@YAABQAVVuCollection@@ABQAV1@@Z ; std::forward<VuCollection * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@ABQAVVuCollection@@@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@1@PAU21@0ABQAVVuCollection@@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode<VuCollection * const &>
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Incsize
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Insert@ABQAVVuCollection@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuCollection@@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert<VuCollection * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>

; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@00@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
__Prev$ = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -4						; size = 1
$T5 = -3						; size = 1
$T6 = -2						; size = 1
$T7 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@00@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >, COMDAT
; _this$ = ecx

; 1351 : 		typename enable_if<_Is_iterator<_Iter>::value,

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1352 : 			iterator>::type
; 1353 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1354 : 		{	// insert [_First, _Last) at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != this)
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);

	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Prev$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Make_iter

; 1361 : 		if (_Prev == begin())

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	push	eax
	lea	ecx, DWORD PTR __Prev$[ebp]
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@insert

; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1364 : 				_Iter_cat(_First));

	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
	add	esp, 8
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR $T7[ebp], al
	movzx	ecx, BYTE PTR $T7[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_Unchecked
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >

; 1365 : 			return (begin());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@insert

; 1366 : 			}
; 1367 : 		else

	jmp	SHORT $LN3@insert
$LN2@insert:

; 1368 : 			{	// insert sequence not at beginning
; 1369 : 			--_Prev;

	lea	ecx, DWORD PTR __Prev$[ebp]
	call	??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--

; 1370 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1371 : 				_Iter_cat(_First));

	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
	add	esp, 8
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR $T6[ebp], al
	movzx	ecx, BYTE PTR $T6[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_Unchecked
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >

; 1372 : 			return (++_Prev);

	lea	ecx, DWORD PTR __Prev$[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@insert:

; 1373 : 			}
; 1374 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@00@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@PAVVuCollection@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@PAVVuCollection@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z PROC ; std::allocator<VuCollection *>::allocator<VuCollection *><std::_List_node<VuCollection *,void *> >, COMDAT
; _this$ = ecx

; 574  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 575  : 		{	// construct from a related allocator (do nothing)
; 576  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@PAVVuCollection@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z ENDP ; std::allocator<VuCollection *>::allocator<VuCollection *><std::_List_node<VuCollection *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z PROC ; std::forward<VuBin<VuEntity> >, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ENDP ; std::forward<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>

; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--, COMDAT
; _this$ = ecx

; 385  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		--(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--

; 387  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 388  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++, COMDAT
; _this$ = ecx

; 372  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 		++(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++

; 374  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 375  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEAAPAVVuGridTree@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEAAPAVVuGridTree@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*, COMDAT
; _this$ = ecx

; 362  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEABQAVVuGridTree@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*

; 364  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEAAPAVVuGridTree@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator!=, COMDAT
; _this$ = ecx

; 302  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 304  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv75 = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv75[ebp]

; 299  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--, COMDAT
; _this$ = ecx

; 252  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 274  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 247  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++

; 248  : 		return (_Tmp);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++, COMDAT
; _this$ = ecx

; 224  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 241  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEABQAVVuGridTree@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEABQAVVuGridTree@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*, COMDAT
; _this$ = ecx

; 204  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval
	add	esp, 4

; 221  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEABQAVVuGridTree@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>

; 188  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--, COMDAT
; _this$ = ecx

; 385  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		--(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--

; 387  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 388  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++, COMDAT
; _this$ = ecx

; 372  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 		++(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++

; 374  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 375  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*, COMDAT
; _this$ = ecx

; 362  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEABQAVVuCollection@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*

; 364  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=, COMDAT
; _this$ = ecx

; 302  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 304  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv75 = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv75[ebp]

; 299  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--, COMDAT
; _this$ = ecx

; 252  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 274  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 247  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++

; 248  : 		return (_Tmp);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++, COMDAT
; _this$ = ecx

; 224  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 241  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEABQAVVuCollection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEABQAVVuCollection@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*, COMDAT
; _this$ = ecx

; 204  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval
	add	esp, 4

; 221  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEABQAVVuCollection@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_Unchecked, COMDAT
; _this$ = ecx

; 199  : 		{	// make an unchecked iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ; std::_Iterator_base0::_Getcont
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 201  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>

; 188  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 72   : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 74   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 75   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBEIXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sub	eax, 1
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Incsize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Tidy@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Tidy, COMDAT
; _this$ = ecx

; 1926 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::clear

; 1928 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?remove@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z
_TEXT	SEGMENT
__Perase$1 = -24					; size = 4
__Val$ = -20						; size = 4
__Pprev$2 = -16						; size = 4
__Phead$ = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Val_arg$ = 8						; size = 4
?remove@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::remove, COMDAT
; _this$ = ecx

; 1586 : 		{	// erase each element matching _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1587 : 		const _Ty _Val = _Val_arg;	// in case it's removed along the way

	mov	eax, DWORD PTR __Val_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx

; 1588 : 		const _Nodeptr _Phead = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Phead$[ebp], eax

; 1589 : 		_Nodeptr _Pnode = this->_Nextnode(_Phead);

	mov	ecx, DWORD PTR __Phead$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN4@remove:

; 1590 : 
; 1591 : 		while (_Pnode != _Phead)

	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR __Phead$[ebp]
	je	$LN5@remove

; 1592 : 			if (_Pnode->_Myval == _Val)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Val$[ebp]
	jne	SHORT $LN2@remove

; 1593 : 				{	// match, remove it
; 1594 : 				const _Nodeptr _Pprev = this->_Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pprev$2[ebp], ecx

; 1595 : 				const _Nodeptr _Perase = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Perase$1[ebp], edx

; 1596 : 				_Pnode = this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1597 : 
; 1598 : 				this->_Nextnode(_Pprev) = _Pnode;

	mov	edx, DWORD PTR __Pprev$2[ebp]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1599 : 				this->_Prevnode(_Pnode) = _Pprev;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR __Pprev$2[ebp]
	mov	DWORD PTR [eax], ecx

; 1600 : 				this->_Freenode(_Perase);

	mov	edx, DWORD PTR __Perase$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Freenode

; 1601 : 
; 1602 : 				--this->_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1603 : 				}
; 1604 : 			else

	jmp	SHORT $LN1@remove
$LN2@remove:

; 1605 : 				_Pnode = this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN1@remove:
	jmp	$LN4@remove
$LN5@remove:

; 1606 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?clear@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::clear, COMDAT
; _this$ = ecx

; 1470 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1471 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1472 : 		this->_Orphan_all();
; 1473 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1474 : 
; 1475 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1476 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 1477 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1478 : 		this->_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1479 : 
; 1480 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@clear

; 1481 : 			{	// delete an element
; 1482 : 			_Pnext = this->_Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$1[ebp], edx

; 1483 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Freenode

; 1484 : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 1485 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?erase@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::erase, COMDAT
; _this$ = ecx

; 1416 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1417 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1418 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1419 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1420 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1421 : 		_Orphan_ptr(*this, _Pnode);
; 1422 : 
; 1423 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1424 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
	mov	ecx, eax
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Pnode != this->_Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@erase

; 1428 : 			{	// not list head, safe to erase
; 1429 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1430 : 				this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1431 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1432 : 				this->_Prevnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1433 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Freenode

; 1434 : 			--this->_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@erase:

; 1435 : 			}
; 1436 : 		return (_Make_iter(_Where));

	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1437 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?pop_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?pop_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::pop_back, COMDAT
; _this$ = ecx

; 1291 : 		{	// erase element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1292 : 		erase(--end());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::end
	mov	ecx, eax
	call	??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator--
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::erase

; 1293 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::push_back, COMDAT
; _this$ = ecx

; 1286 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1287 : 		_Insert(_Unchecked_end(), _Val);

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@ABQAVVuGridTree@@@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuGridTree@@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert<VuGridTree * const &>

; 1288 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBEIXZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size

; 1243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBEIXZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
$T3 = -32						; size = 4
tv132 = -28						; size = 4
__Count$4 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::resize, COMDAT
; _this$ = ecx

; 1208 : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1209 : 		if (this->_Mysize < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	$LN2@resize

; 1210 : 			{	// pad to make larger
; 1211 : 			size_type _Count = 0;

	mov	DWORD PTR __Count$4[ebp], 0

; 1212 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1213 : 			for (; this->_Mysize < _Newsize; ++_Count)

	jmp	SHORT $LN9@resize
$LN8@resize:
	mov	edx, DWORD PTR __Count$4[ebp]
	add	edx, 1
	mov	DWORD PTR __Count$4[ebp], edx
$LN9@resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN7@resize

; 1214 : 				_Insert(_Unchecked_end());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Unchecked_end
	mov	DWORD PTR tv132[ebp], eax
	mov	eax, DWORD PTR tv132[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert
	jmp	SHORT $LN8@resize
$LN7@resize:
	jmp	SHORT $LN14@resize
__catch$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z$0:

; 1215 : 			_CATCH_ALL
; 1216 : 			for (; 0 < _Count; --_Count)

	jmp	SHORT $LN6@resize
$LN5@resize:
	mov	eax, DWORD PTR __Count$4[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$4[ebp], eax
$LN6@resize:
	cmp	DWORD PTR __Count$4[ebp], 0
	jbe	SHORT $LN4@resize

; 1217 : 				pop_back();	// undo inserts

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::pop_back
	jmp	SHORT $LN5@resize
$LN4@resize:

; 1218 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1219 : 			_CATCH_END

	mov	eax, $LN17@resize
	ret	0
$LN14@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z$1
$LN17@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z$1:

; 1220 : 			}
; 1221 : 		else

	jmp	SHORT $LN13@resize
$LN2@resize:

; 1222 : 			while (_Newsize < this->_Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newsize$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN13@resize

; 1223 : 				pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::pop_back
	jmp	SHORT $LN2@resize
$LN13@resize:

; 1224 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::resize
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Make_iter, COMDAT
; _this$ = ecx

; 1156 : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1157 : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1158 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Make_iter@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::end, COMDAT
; _this$ = ecx

; 1124 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1125 : 		return (iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1126 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::begin, COMDAT
; _this$ = ecx

; 1114 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1115 : 		return (iterator(this->_Nextnode(this->_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuGridTree@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1116 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::~list<VuGridTree *,std::allocator<VuGridTree *> >, COMDAT
; _this$ = ecx

; 1091 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXXZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Tidy

; 1093 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::~list<VuGridTree *,std::allocator<VuGridTree *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Insert@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Insert@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Incsize
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Newnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Insert@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::_Insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z PROC ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::list<VuGridTree *,std::allocator<VuGridTree *> >, COMDAT
; _this$ = ecx

; 909  : 		{	// construct list from _Count * _Ty()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@PAVVuGridTree@@@std@@QAE@XZ ; std::allocator<VuGridTree *>::allocator<VuGridTree *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 910  : 		resize(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXI@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::resize

; 911  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z ENDP ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::list<VuGridTree *,std::allocator<VuGridTree *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::~_List_buy<VuGridTree *,std::allocator<VuGridTree *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::~_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::~_List_buy<VuGridTree *,std::allocator<VuGridTree *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z PROC ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z ; std::addressof<VuGridTree *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<VuGridTree *>

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate

; 862  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ENDP ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv131 = -36						; size = 4
tv130 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z PROC ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval
	add	esp, 4
	mov	DWORD PTR tv130[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	push	ecx
	call	??$addressof@PAVVuGridTree@@@std@@YAPAPAVVuGridTree@@AAPAV1@@Z ; std::addressof<VuGridTree *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	call	??$construct@PAVVuGridTree@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAVVuGridTree@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<VuGridTree *>
	jmp	SHORT $LN4@Buynode
__catch$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$0:
	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ENDP ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z PROC ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >

; 830  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_buy@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z ENDP ; std::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >::_List_buy<VuGridTree *,std::allocator<VuGridTree *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

	cmp	DWORD PTR __Next$[ebp], 0
	jne	SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	DWORD PTR tv133[ebp], eax
	lea	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	call	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAU?$_List_node@PAVVuGridTree@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::construct<std::_List_node<VuGridTree *,void *> *,std::_List_node<VuGridTree *,void *> * &>
	jmp	SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Buynode0
	ret	0
$LN5@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buynode0
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 777  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 		this->_Getal().destroy(
; 779  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>

; 780  : 		this->_Getal().destroy(
; 781  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuGridTree@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuGridTree *,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuGridTree@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuGridTree@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::destroy<std::_List_node<VuGridTree *,void *> *>

; 782  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate

; 783  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 772  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buynode0

; 774  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::~_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >, COMDAT
; _this$ = ecx

; 712  : 		{	// destroy head node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Freeheadnode

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::~_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >, COMDAT
; _this$ = ecx

; 706  : 	_List_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_List_val<std::_List_simple_types<VuGridTree *> >

; 707  : 		{	// construct head node, allocator from _Al
; 708  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 709  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuGridTree@@@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >::_List_alloc<0,std::_List_base_types<VuGridTree *,std::allocator<VuGridTree *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 548  : 		}

	pop	ebp
	ret	0
?_Myval@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAVVuGridTree@@PAU?$_List_node@PAVVuGridTree@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 543  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@SAAAPAU?$_List_node@PAVVuGridTree@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_List_val<std::_List_simple_types<VuGridTree *> >, COMDAT
; _this$ = ecx

; 529  : 	_List_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 		{	// initialize data
; 531  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 532  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 533  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<VuGridTree *> >::_List_val<std::_List_simple_types<VuGridTree *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocator<std::_List_node<VuGridTree *,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuGridTree *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuGridTree *,void *> >::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuGridTree *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 357913941				; 15555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuGridTree@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuGridTree *,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuGridTree@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocator<std::_List_node<VuGridTree *,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@PAVVuGridTree@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<VuGridTree *,void *> >::allocator<std::_List_node<VuGridTree *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVVuGridTree@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVVuGridTree@@@std@@QAE@XZ PROC		; std::allocator<VuGridTree *>::allocator<VuGridTree *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVVuGridTree@@@std@@QAE@XZ ENDP		; std::allocator<VuGridTree *>::allocator<VuGridTree *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBEIXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sub	eax, 1
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Incsize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Tidy@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Tidy, COMDAT
; _this$ = ecx

; 1926 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::clear

; 1928 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?remove@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z
_TEXT	SEGMENT
__Perase$1 = -24					; size = 4
__Val$ = -20						; size = 4
__Pprev$2 = -16						; size = 4
__Phead$ = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Val_arg$ = 8						; size = 4
?remove@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::remove, COMDAT
; _this$ = ecx

; 1586 : 		{	// erase each element matching _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1587 : 		const _Ty _Val = _Val_arg;	// in case it's removed along the way

	mov	eax, DWORD PTR __Val_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx

; 1588 : 		const _Nodeptr _Phead = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Phead$[ebp], eax

; 1589 : 		_Nodeptr _Pnode = this->_Nextnode(_Phead);

	mov	ecx, DWORD PTR __Phead$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN4@remove:

; 1590 : 
; 1591 : 		while (_Pnode != _Phead)

	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR __Phead$[ebp]
	je	$LN5@remove

; 1592 : 			if (_Pnode->_Myval == _Val)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Val$[ebp]
	jne	SHORT $LN2@remove

; 1593 : 				{	// match, remove it
; 1594 : 				const _Nodeptr _Pprev = this->_Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pprev$2[ebp], ecx

; 1595 : 				const _Nodeptr _Perase = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Perase$1[ebp], edx

; 1596 : 				_Pnode = this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1597 : 
; 1598 : 				this->_Nextnode(_Pprev) = _Pnode;

	mov	edx, DWORD PTR __Pprev$2[ebp]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1599 : 				this->_Prevnode(_Pnode) = _Pprev;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR __Pprev$2[ebp]
	mov	DWORD PTR [eax], ecx

; 1600 : 				this->_Freenode(_Perase);

	mov	edx, DWORD PTR __Perase$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode

; 1601 : 
; 1602 : 				--this->_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1603 : 				}
; 1604 : 			else

	jmp	SHORT $LN1@remove
$LN2@remove:

; 1605 : 				_Pnode = this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN1@remove:
	jmp	$LN4@remove
$LN5@remove:

; 1606 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?clear@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::clear, COMDAT
; _this$ = ecx

; 1470 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1471 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1472 : 		this->_Orphan_all();
; 1473 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1474 : 
; 1475 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1476 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 1477 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1478 : 		this->_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1479 : 
; 1480 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@clear

; 1481 : 			{	// delete an element
; 1482 : 			_Pnext = this->_Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$1[ebp], edx

; 1483 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode

; 1484 : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 1485 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Unchecked_erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_erase, COMDAT
; _this$ = ecx

; 1440 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1441 : 		_Nodeptr _Pnode = _Where._Mynode();

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1442 : 
; 1443 : 		if (_Pnode != this->_Myhead)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN2@Unchecked_

; 1444 : 			{	// not list head, safe to erase
; 1445 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1446 : 				this->_Nextnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1447 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1448 : 				this->_Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1449 : 			this->_Freenode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode

; 1450 : 			--this->_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unchecked_:

; 1451 : 			}
; 1452 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::erase, COMDAT
; _this$ = ecx

; 1416 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1417 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1418 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1419 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1420 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1421 : 		_Orphan_ptr(*this, _Pnode);
; 1422 : 
; 1423 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1424 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
	mov	ecx, eax
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Pnode != this->_Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@erase

; 1428 : 			{	// not list head, safe to erase
; 1429 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1430 : 				this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1431 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1432 : 				this->_Prevnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1433 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode

; 1434 : 			--this->_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@erase:

; 1435 : 			}
; 1436 : 		return (_Make_iter(_Where));

	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1437 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?pop_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?pop_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::pop_back, COMDAT
; _this$ = ecx

; 1291 : 		{	// erase element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1292 : 		erase(--end());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
	mov	ecx, eax
	call	??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator--
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::erase

; 1293 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::push_back, COMDAT
; _this$ = ecx

; 1286 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1287 : 		_Insert(_Unchecked_end(), _Val);

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@ABQAVVuCollection@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@1@ABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert<VuCollection * const &>

; 1288 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBEIXZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size

; 1243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBEIXZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
$T3 = -32						; size = 4
tv132 = -28						; size = 4
__Count$4 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::resize, COMDAT
; _this$ = ecx

; 1208 : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1209 : 		if (this->_Mysize < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	$LN2@resize

; 1210 : 			{	// pad to make larger
; 1211 : 			size_type _Count = 0;

	mov	DWORD PTR __Count$4[ebp], 0

; 1212 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1213 : 			for (; this->_Mysize < _Newsize; ++_Count)

	jmp	SHORT $LN9@resize
$LN8@resize:
	mov	edx, DWORD PTR __Count$4[ebp]
	add	edx, 1
	mov	DWORD PTR __Count$4[ebp], edx
$LN9@resize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN7@resize

; 1214 : 				_Insert(_Unchecked_end());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_end
	mov	DWORD PTR tv132[ebp], eax
	mov	eax, DWORD PTR tv132[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert
	jmp	SHORT $LN8@resize
$LN7@resize:
	jmp	SHORT $LN14@resize
__catch$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z$0:

; 1215 : 			_CATCH_ALL
; 1216 : 			for (; 0 < _Count; --_Count)

	jmp	SHORT $LN6@resize
$LN5@resize:
	mov	eax, DWORD PTR __Count$4[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$4[ebp], eax
$LN6@resize:
	cmp	DWORD PTR __Count$4[ebp], 0
	jbe	SHORT $LN4@resize

; 1217 : 				pop_back();	// undo inserts

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::pop_back
	jmp	SHORT $LN5@resize
$LN4@resize:

; 1218 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1219 : 			_CATCH_END

	mov	eax, $LN17@resize
	ret	0
$LN14@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z$1
$LN17@resize:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z$1:

; 1220 : 			}
; 1221 : 		else

	jmp	SHORT $LN13@resize
$LN2@resize:

; 1222 : 			while (_Newsize < this->_Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newsize$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN13@resize

; 1223 : 				pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::pop_back
	jmp	SHORT $LN2@resize
$LN13@resize:

; 1224 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::resize
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Make_iter, COMDAT
; _this$ = ecx

; 1156 : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1157 : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1158 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Make_iter@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::end, COMDAT
; _this$ = ecx

; 1129 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1130 : 		return (const_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1131 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::end, COMDAT
; _this$ = ecx

; 1124 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1125 : 		return (iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1126 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin, COMDAT
; _this$ = ecx

; 1119 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1120 : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1121 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin, COMDAT
; _this$ = ecx

; 1114 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1115 : 		return (iterator(this->_Nextnode(this->_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAVVuCollection@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1116 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >, COMDAT
; _this$ = ecx

; 1091 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Tidy

; 1093 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Insert@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Insert@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Incsize
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Newnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Insert@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -28						; size = 4
_this$ = -24						; size = 4
$T7 = -19						; size = 1
$T8 = -18						; size = 1
$T9 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >, COMDAT
; _this$ = ecx

; 934  : 		{	// construct list by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction
	push	eax
	lea	ecx, DWORD PTR $T9[ebp]
	call	??$?0U?$_List_node@PAVVuCollection@@PAX@std@@@?$allocator@PAVVuCollection@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z ; std::allocator<VuCollection *>::allocator<VuCollection *><std::_List_node<VuCollection *,void *> >
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_List_buy<VuCollection *,std::allocator<VuCollection *> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 935  : 		_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 936  : 		insert(begin(), _Right.begin(), _Right.end());

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T6[ebp], ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@1@00@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > > >
	jmp	SHORT $LN4@list
__catch$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z$0:

; 937  : 		_CATCH_ALL
; 938  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::_Tidy

; 939  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 940  : 		_CATCH_END

	mov	eax, $LN8@list
	ret	0
$LN4@list:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN2@list
$LN8@list:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@list:

; 941  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@list:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z PROC ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >, COMDAT
; _this$ = ecx

; 909  : 		{	// construct list from _Count * _Ty()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@PAVVuCollection@@@std@@QAE@XZ ; std::allocator<VuCollection *>::allocator<VuCollection *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_List_buy<VuCollection *,std::allocator<VuCollection *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 910  : 		resize(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXI@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::resize

; 911  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z ENDP ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::~_List_buy<VuCollection *,std::allocator<VuCollection *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::~_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::~_List_buy<VuCollection *,std::allocator<VuCollection *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z PROC ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z ; std::addressof<VuCollection *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<VuCollection *>

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate

; 862  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ENDP ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv131 = -36						; size = 4
tv130 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z PROC ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval
	add	esp, 4
	mov	DWORD PTR tv130[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	push	ecx
	call	??$addressof@PAVVuCollection@@@std@@YAPAPAVVuCollection@@AAPAV1@@Z ; std::addressof<VuCollection *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv131[ebp]
	call	??$construct@PAVVuCollection@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAVVuCollection@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<VuCollection *>
	jmp	SHORT $LN4@Buynode
__catch$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$0:
	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ENDP ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z PROC ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_List_buy<VuCollection *,std::allocator<VuCollection *> >, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >

; 830  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_buy@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ENDP ; std::_List_buy<VuCollection *,std::allocator<VuCollection *> >::_List_buy<VuCollection *,std::allocator<VuCollection *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

	cmp	DWORD PTR __Next$[ebp], 0
	jne	SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	DWORD PTR tv133[ebp], eax
	lea	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	call	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAU?$_List_node@PAVVuCollection@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::construct<std::_List_node<VuCollection *,void *> *,std::_List_node<VuCollection *,void *> * &>
	jmp	SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Buynode0
	ret	0
$LN5@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buynode0
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 777  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 		this->_Getal().destroy(
; 779  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>

; 780  : 		this->_Getal().destroy(
; 781  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAPAU?$_List_node@PAVVuCollection@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuCollection *,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAVVuCollection@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAVVuCollection@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::destroy<std::_List_node<VuCollection *,void *> *>

; 782  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate

; 783  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 772  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buynode0

; 774  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::~_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >, COMDAT
; _this$ = ecx

; 712  : 		{	// destroy head node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Freeheadnode

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::~_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >, COMDAT
; _this$ = ecx

; 706  : 	_List_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuCollection *> >::_List_val<std::_List_simple_types<VuCollection *> >

; 707  : 		{	// construct head node, allocator from _Al
; 708  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 709  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_alloc@$0A@U?$_List_base_types@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVVuCollection@@@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >::_List_alloc<0,std::_List_base_types<VuCollection *,std::allocator<VuCollection *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 548  : 		}

	pop	ebp
	ret	0
?_Myval@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAVVuCollection@@PAU?$_List_node@PAVVuCollection@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 543  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@SAAAPAU?$_List_node@PAVVuCollection@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuCollection *> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<VuCollection *> >::_List_val<std::_List_simple_types<VuCollection *> >, COMDAT
; _this$ = ecx

; 529  : 	_List_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 		{	// initialize data
; 531  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 532  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 533  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<VuCollection *> >::_List_val<std::_List_simple_types<VuCollection *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >, COMDAT
; _this$ = ecx

; 835  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >

; 836  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 806  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction, COMDAT

; 767  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 768  : 		return (_Al.select_on_container_copy_construction());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBE?AV12@XZ ; std::allocator<std::_List_node<VuCollection *,void *> >::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 769  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuCollection *,void *> >::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuCollection *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 357913941				; 15555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@YAPAU?$_List_node@PAVVuCollection@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuCollection *,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAEXPAU?$_List_node@PAVVuCollection@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >, COMDAT
; _this$ = ecx

; 569  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBE?AV12@XZ PROC ; std::allocator<std::_List_node<VuCollection *,void *> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 544  : 		{	// return this allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::_List_node<VuCollection *,void *> >::allocator<std::_List_node<VuCollection *,void *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@U?$_List_node@PAVVuCollection@@PAX@std@@@std@@QBE?AV12@XZ ENDP ; std::allocator<std::_List_node<VuCollection *,void *> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVVuCollection@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVVuCollection@@@std@@QAE@XZ PROC	; std::allocator<VuCollection *>::allocator<VuCollection *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVVuCollection@@@std@@QAE@XZ ENDP	; std::allocator<VuCollection *>::allocator<VuCollection *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 4
$T3 = -36						; size = 4
_l$ = -32						; size = 4
_c$4 = -28						; size = 4
_retval$ = -24						; size = 4
_it$5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ent$ = 8						; size = 4
?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z PROC	; VuCollectionManager::FindEnt
; _this$ = ecx

; 131  : int VuCollectionManager::FindEnt(VuEntity* ent){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 132  : 	VuScopeLock l(collsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 133  : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 134  : 	for (list<VuCollection*>::iterator it=collcoll_.begin(); it != collcoll_.end(); ++it) {

	lea	edx, DWORD PTR _it$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	jmp	SHORT $LN4@FindEnt
$LN3@FindEnt:
	lea	ecx, DWORD PTR _it$5[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
$LN4@FindEnt:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
	push	eax
	lea	ecx, DWORD PTR _it$5[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@FindEnt

; 135  : 		VuCollection *c = *it;

	lea	ecx, DWORD PTR _it$5[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$4[ebp], edx

; 136  : #if VU_ALL_FILTERED
; 137  : 		if (c->Find(ent)){

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$4[ebp]
	call	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z ; VuCollection::Find
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindEnt

; 138  : 			retval++;

	mov	edx, DWORD PTR _retval$[ebp]
	add	edx, 1
	mov	DWORD PTR _retval$[ebp], edx
$LN1@FindEnt:

; 139  : 		}
; 140  : #else
; 141  : 		VuEntity *ent2 = c->Find(ent);
; 142  : 		if (ent2 && ent2 == ent) {
; 143  : 			retval++;
; 144  : 		}
; 145  : #endif
; 146  : 	}

	jmp	SHORT $LN3@FindEnt
$LN2@FindEnt:

; 147  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	eax, DWORD PTR $T3[ebp]

; 148  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindEnt@VuCollectionManager@@QAEHPAVVuEntity@@@Z ENDP	; VuCollectionManager::FindEnt
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_dmax$ = -28						; size = 4
_bmax$ = -24						; size = 4
_eb$1 = -20						; size = 4
_eb$2 = -16						; size = 4
_dcount$ = -12						; size = 4
_bcount$ = -8						; size = 4
_this$ = -4						; size = 4
?CreateEntitiesAndRunGc@VuCollectionManager@@QAEXXZ PROC ; VuCollectionManager::CreateEntitiesAndRunGc
; _this$ = ecx

; 162  : void VuCollectionManager::CreateEntitiesAndRunGc(){

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 	// create entities
; 164  : 	// at most max bper cycle
; 165  : 	const unsigned int bmax = 5;

	mov	DWORD PTR _bmax$[ebp], 5

; 166  : 	unsigned int bcount = 0;

	mov	DWORD PTR _bcount$[ebp], 0
$LN5@CreateEnti:

; 167  : 	while (!birthlist_.empty() && (bcount < bmax)){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?empty@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE_NXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@CreateEnti
	cmp	DWORD PTR _bcount$[ebp], 5
	jae	SHORT $LN4@CreateEnti

; 168  : 		++bcount;

	mov	ecx, DWORD PTR _bcount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _bcount$[ebp], ecx

; 169  : 		VuEntityBin &eb = birthlist_.front();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEAAV?$VuBin@VVuEntity@@@@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::front
	mov	DWORD PTR _eb$1[ebp], eax

; 170  : 		vuDatabase->ReallyInsert(eb.get());

	mov	ecx, DWORD PTR _eb$1[ebp]
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?ReallyInsert@VuDatabase@@AAEXPAVVuEntity@@@Z ; VuDatabase::ReallyInsert

; 171  : 		birthlist_.pop_front();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?pop_front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::pop_front

; 172  : 	}

	jmp	SHORT $LN5@CreateEnti
$LN4@CreateEnti:

; 173  : 
; 174  : 	// remove list nodes, allow at most dmax per cycle
; 175  : 	const unsigned int dmax = 5;

	mov	DWORD PTR _dmax$[ebp], 5

; 176  : 	unsigned int dcount = 0;

	mov	DWORD PTR _dcount$[ebp], 0
$LN3@CreateEnti:

; 177  : 	while (!gclist_.empty() && (dcount < dmax)){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?empty@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE_NXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::empty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@CreateEnti
	cmp	DWORD PTR _dcount$[ebp], 5
	jae	SHORT $LN6@CreateEnti

; 178  : 		++dcount;

	mov	eax, DWORD PTR _dcount$[ebp]
	add	eax, 1
	mov	DWORD PTR _dcount$[ebp], eax

; 179  : 		VuEntityBin &eb = gclist_.front();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEAAV?$VuBin@VVuEntity@@@@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::front
	mov	DWORD PTR _eb$2[ebp], eax

; 180  : 		// some entities are removed and re-inserted in DB because of ID change.
; 181  : 		// when they are removed, they are collected, but they shouldnt be removed...
; 182  : 		if (eb->VuState() != VU_MEM_ACTIVE){

	mov	ecx, DWORD PTR _eb$2[ebp]
	call	??C?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::operator->
	mov	ecx, eax
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	je	SHORT $LN1@CreateEnti

; 183  : 			vuDatabase->ReallyRemove(eb.get());

	mov	ecx, DWORD PTR _eb$2[ebp]
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z ; VuDatabase::ReallyRemove
$LN1@CreateEnti:

; 184  : 		}
; 185  : 		gclist_.pop_front();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?pop_front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::pop_front

; 186  : 	}

	jmp	SHORT $LN3@CreateEnti
$LN6@CreateEnti:

; 187  : 	//REPORT_VALUE("collected", count);
; 188  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateEntitiesAndRunGc@VuCollectionManager@@QAEXXZ ENDP ; VuCollectionManager::CreateEntitiesAndRunGc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_l$ = -32						; size = 4
$T2 = -28						; size = 4
tv79 = -24						; size = 4
tv65 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_e$ = 8							; size = 4
?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z PROC ; VuCollectionManager::AddToBirthList
; _this$ = ecx

; 150  : void VuCollectionManager::AddToBirthList(VuEntity *e){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 	VuScopeLock l(birthMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 152  : 	birthlist_.push_back(VuEntityBin(e));

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>

; 153  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__unwindfunclet$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToBirthList@VuCollectionManager@@QAEXPAVVuEntity@@@Z ENDP ; VuCollectionManager::AddToBirthList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_l$ = -32						; size = 4
$T2 = -28						; size = 4
tv79 = -24						; size = 4
tv65 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_e$ = 8							; size = 4
?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z PROC	; VuCollectionManager::AddToGc
; _this$ = ecx

; 155  : void VuCollectionManager::AddToGc(VuEntity *e){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 	VuScopeLock l(gcMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 157  : 	gclist_.push_back(VuEntityBin(e));

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>

; 158  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__unwindfunclet$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z ENDP	; VuCollectionManager::AddToGc
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_collcollCopy$ = -40					; size = 8
$T2 = -32						; size = 4
_l$ = -28						; size = 4
_c$3 = -24						; size = 4
_it$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_all$ = 8						; size = 1
?Shutdown@VuCollectionManager@@QAEXE@Z PROC		; VuCollectionManager::Shutdown
; _this$ = ecx

; 190  : void VuCollectionManager::Shutdown(VU_BOOL all){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Shutdown@VuCollectionManager@@QAEXE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	// make last...
; 192  : 	//birthlist_.clear();
; 193  : 	//gclist_.clear();
; 194  : 	//vuDatabase->Suspend(all);
; 195  : 	VuScopeLock l(collsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 196  : 	// copy the list since the purges can change the registered collection structure
; 197  : 	list<VuCollection*> collcollCopy(collcoll_);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _collcollCopy$[ebp]
	call	??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@ABV01@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 198  : 	for (list<VuCollection*>::iterator it=collcollCopy.begin(); it != collcollCopy.end();++it) {

	lea	eax, DWORD PTR _it$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _collcollCopy$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	jmp	SHORT $LN3@Shutdown
$LN2@Shutdown:
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
$LN3@Shutdown:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _collcollCopy$[ebp]
	call	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
	push	eax
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Shutdown

; 199  : 		VuCollection *c = *it;

	lea	ecx, DWORD PTR _it$4[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _c$3[ebp], eax

; 200  : #if VU_ALL_FILTERED
; 201  : 		c->Purge(all);

	movzx	ecx, BYTE PTR _all$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _c$3[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx

; 202  : #else
; 203  : 		if (c != vuDatabase) {
; 204  : 			c->Purge(all);
; 205  : 		}
; 206  : #endif
; 207  : 	}

	jmp	SHORT $LN2@Shutdown
$LN1@Shutdown:

; 208  : 	collcollCopy.clear();

	lea	ecx, DWORD PTR _collcollCopy$[ebp]
	call	?clear@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXXZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::clear

; 209  : 
; 210  : 	// sfr: do at the end to avoid self destructions up there
; 211  : 	birthlist_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 212  : 	gclist_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 213  : 	vuDatabase->Suspend(all);

	movzx	eax, BYTE PTR _all$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 214  : 
; 215  : 	// clear the collections? Dont, some exist during whole game time.
; 216  : 	//collcoll_.clear();
; 217  : 	//gridcoll_.clear();
; 218  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _collcollCopy$[ebp]
	call	??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Shutdown@VuCollectionManager@@QAEXE@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__unwindfunclet$?Shutdown@VuCollectionManager@@QAEXE@Z$1:
	lea	ecx, DWORD PTR _collcollCopy$[ebp]
	jmp	??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
__ehhandler$?Shutdown@VuCollectionManager@@QAEXE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Shutdown@VuCollectionManager@@QAEXE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Shutdown@VuCollectionManager@@QAEXE@Z ENDP		; VuCollectionManager::Shutdown
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
?Handle@VuCollectionManager@@QAEHPAVVuMessage@@@Z PROC	; VuCollectionManager::Handle
; _this$ = ecx

; 106  : int VuCollectionManager::Handle(VuMessage* msg){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  : #if VU_NO_HANDLE
; 108  : 	return VU_NO_OP;

	xor	eax, eax

; 109  : #else
; 110  : 	VuScopeLock l(collsMutex_);	
; 111  : 	int retval = VU_NO_OP;
; 112  : 	for (list<VuCollection*>::iterator it=collcoll_.begin(); it != collcoll_.end(); ++it) {
; 113  : 		VuCollection *c = *it;
; 114  : #if VU_ALL_FILTERED
; 115  : 		if (c->Handle(msg) == VU_SUCCESS) {
; 116  : 			retval = VU_SUCCESS;
; 117  : 		}
; 118  : #else
; 119  : 		if (c != vuDatabase) {
; 120  : 			if (c->Handle(msg) == VU_SUCCESS) {
; 121  : 				retval = VU_SUCCESS;
; 122  : 			}
; 123  : 		}
; 124  : #endif
; 125  : 	}
; 126  : 	return retval;
; 127  : #endif // NO_HANDLE
; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@VuCollectionManager@@QAEHPAVVuMessage@@@Z ENDP	; VuCollectionManager::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
$T2 = -40						; size = 4
$T3 = -36						; size = 4
_l$ = -32						; size = 4
_retval$ = -28						; size = 4
_g$4 = -24						; size = 4
_it$5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ent$ = 8						; size = 4
_coord1$ = 12						; size = 4
_coord2$ = 16						; size = 4
?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z PROC ; VuCollectionManager::HandleMove
; _this$ = ecx

; 91   : int VuCollectionManager::HandleMove(VuEntity*  ent, BIG_SCALAR coord1, BIG_SCALAR coord2){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	VuScopeLock l(gridsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 93   : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 94   : 	for (list<VuGridTree*>::iterator it=gridcoll_.begin(); it != gridcoll_.end(); ++it) {

	lea	edx, DWORD PTR _it$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?begin@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::begin
	jmp	SHORT $LN4@HandleMove
$LN3@HandleMove:
	lea	ecx, DWORD PTR _it$5[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator++
$LN4@HandleMove:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?end@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@2@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::end
	push	eax
	lea	ecx, DWORD PTR _it$5[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@HandleMove

; 95   : 		VuGridTree *g = *it;

	lea	ecx, DWORD PTR _it$5[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuGridTree@@@std@@@std@@@std@@QBEAAPAVVuGridTree@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuGridTree *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _g$4[ebp], edx

; 96   : 		if (!g->suspendUpdates_) {

	mov	eax, DWORD PTR _g$4[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN1@HandleMove

; 97   : 			g->Move(ent, coord1, coord2);

	push	ecx
	movss	xmm0, DWORD PTR _coord2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _coord1$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _g$4[ebp]
	call	?Move@VuGridTree@@AAEHPAVVuEntity@@MM@Z	; VuGridTree::Move
$LN1@HandleMove:

; 98   : 		}
; 99   : 	}

	jmp	SHORT $LN3@HandleMove
$LN2@HandleMove:

; 100  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	eax, DWORD PTR $T3[ebp]

; 101  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z ENDP ; VuCollectionManager::HandleMove
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 4
_l$ = -32						; size = 4
_e$ = -28						; size = 4
_c$3 = -24						; size = 4
_it$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ent$ = 8						; size = 4
?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z PROC	; VuCollectionManager::Remove
; _this$ = ecx

; 74   : void VuCollectionManager::Remove(VuEntity* ent){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	VuScopeLock l(collsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 76   : 	// sfr: just to ensure it lives through all deletions
; 77   : 	VuBin<VuEntity> e(ent);

	mov	edx, DWORD PTR _ent$[ebp]
	push	edx
	lea	ecx, DWORD PTR _e$[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 78   : 	for (list<VuCollection*>::iterator it=collcoll_.begin(); it != collcoll_.end(); ++it) {

	lea	eax, DWORD PTR _it$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	jmp	SHORT $LN3@Remove
$LN2@Remove:
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
$LN3@Remove:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
	push	eax
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Remove

; 79   : 		VuCollection *c = *it;

	lea	ecx, DWORD PTR _it$4[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _c$3[ebp], eax

; 80   : #if VU_ALL_FILTERED
; 81   : 		c->Remove(ent);

	mov	ecx, DWORD PTR _ent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$3[ebp]
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove

; 82   : #else
; 83   : 		if (c != vuDatabase) {
; 84   : 			c->Remove(ent);
; 85   : 		}
; 86   : #endif
; 87   : 	}

	jmp	SHORT $LN2@Remove
$LN1@Remove:

; 88   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _e$[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__unwindfunclet$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z$1:
	lea	ecx, DWORD PTR _e$[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z ENDP	; VuCollectionManager::Remove
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
_l$ = -28						; size = 4
_c$3 = -24						; size = 4
_it$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ent$ = 8						; size = 4
?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z PROC	; VuCollectionManager::Add
; _this$ = ecx

; 59   : void VuCollectionManager::Add(VuEntity* ent){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	VuScopeLock l(collsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 61   : 	for (list<VuCollection*>::iterator it=collcoll_.begin(); it != collcoll_.end(); ++it) {

	lea	edx, DWORD PTR _it$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::begin
	jmp	SHORT $LN3@Add
$LN2@Add:
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator++
$LN3@Add:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@2@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::end
	push	eax
	lea	ecx, DWORD PTR _it$4[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Add

; 62   : 		VuCollection *c = *it;

	lea	ecx, DWORD PTR _it$4[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAVVuCollection@@@std@@@std@@@std@@QBEAAPAVVuCollection@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuCollection *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$3[ebp], edx

; 63   : #if VU_ALL_FILTERED
; 64   : 		c->Insert(ent);

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$3[ebp]
	call	?Insert@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Insert

; 65   : #else
; 66   : 		if (c != vuDatabase) {
; 67   : 			c->Insert(ent);
; 68   : 		}
; 69   : #endif
; 70   : 	}

	jmp	SHORT $LN2@Add
$LN1@Add:

; 71   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z ENDP	; VuCollectionManager::Add
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_l$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_grid$ = 8						; size = 4
?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z PROC ; VuCollectionManager::GridDeRegister
; _this$ = ecx

; 54   : void VuCollectionManager::GridDeRegister(VuGridTree *grid){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	VuScopeLock l(gridsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 56   : 	gridcoll_.remove(grid);

	lea	edx, DWORD PTR _grid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?remove@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::remove

; 57   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GridDeRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z ENDP ; VuCollectionManager::GridDeRegister
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_l$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_grid$ = 8						; size = 4
?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z PROC ; VuCollectionManager::GridRegister
; _this$ = ecx

; 48   : void VuCollectionManager::GridRegister(VuGridTree* grid){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	VuScopeLock l(gridsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 50   : 	gridcoll_.push_back(grid);

	lea	edx, DWORD PTR _grid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?push_back@?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAEXABQAVVuGridTree@@@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::push_back

; 51   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GridRegister@VuCollectionManager@@QAEXPAVVuGridTree@@@Z ENDP ; VuCollectionManager::GridRegister
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_l$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_coll$ = 8						; size = 4
?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z PROC ; VuCollectionManager::DeRegister
; _this$ = ecx

; 40   : void VuCollectionManager::DeRegister(VuCollection* coll){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	if (!this)

	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN1@DeRegister

; 42   : 		return;

	jmp	SHORT $LN2@DeRegister
$LN1@DeRegister:

; 43   : 	VuScopeLock l(collsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 44   : 	collcoll_.remove(coll);

	lea	edx, DWORD PTR _coll$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?remove@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::remove

; 45   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
$LN2@DeRegister:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DeRegister@VuCollectionManager@@QAEXPAVVuCollection@@@Z ENDP ; VuCollectionManager::DeRegister
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_l$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_coll$ = 8						; size = 4
?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z PROC ; VuCollectionManager::Register
; _this$ = ecx

; 28   : void VuCollectionManager::Register(VuCollection* coll){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	VuScopeLock l(collsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0VuScopeLock@@QAE@PAX@Z		; VuScopeLock::VuScopeLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : #if VU_ALL_FILTERED
; 31   : 	collcoll_.push_back(coll);

	lea	edx, DWORD PTR _coll$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAEXABQAVVuCollection@@@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::push_back

; 32   : #else
; 33   : 	if (coll != vuDatabase){
; 34   : 		collcoll_.push_back(coll);
; 35   : 	}
; 36   : #endif
; 37   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _l$[ebp]
	call	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z$0:
	lea	ecx, DWORD PTR _l$[ebp]
	jmp	??1VuScopeLock@@QAE@XZ			; VuScopeLock::~VuScopeLock
__ehhandler$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Register@VuCollectionManager@@QAEXPAVVuCollection@@@Z ENDP ; VuCollectionManager::Register
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1VuCollectionManager@@QAE@XZ PROC			; VuCollectionManager::~VuCollectionManager
; _this$ = ecx

; 19   : VuCollectionManager::~VuCollectionManager(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1VuCollectionManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 20   : 	gclist_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 21   : 
; 22   : 	VuxDestroyMutex(gridsMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?VuxDestroyMutex@@YAXPAX@Z		; VuxDestroyMutex
	add	esp, 4

; 23   : 	VuxDestroyMutex(collsMutex_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?VuxDestroyMutex@@YAXPAX@Z		; VuxDestroyMutex
	add	esp, 4

; 24   : 	VuxDestroyMutex(birthMutex_);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	?VuxDestroyMutex@@YAXPAX@Z		; VuxDestroyMutex
	add	esp, 4

; 25   : 	VuxDestroyMutex(gcMutex_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	?VuxDestroyMutex@@YAXPAX@Z		; VuxDestroyMutex
	add	esp, 4

; 26   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::~list<VuGridTree *,std::allocator<VuGridTree *> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1VuCollectionManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
__unwindfunclet$??1VuCollectionManager@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::~list<VuGridTree *,std::allocator<VuGridTree *> >
__unwindfunclet$??1VuCollectionManager@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
__unwindfunclet$??1VuCollectionManager@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
__ehhandler$??1VuCollectionManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1VuCollectionManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1VuCollectionManager@@QAE@XZ ENDP			; VuCollectionManager::~VuCollectionManager
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_collection_manager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0VuCollectionManager@@QAE@XZ PROC			; VuCollectionManager::VuCollectionManager
; _this$ = ecx

; 13   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VuCollectionManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@I@Z ; std::list<VuCollection *,std::allocator<VuCollection *> >::list<VuCollection *,std::allocator<VuCollection *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@I@Z ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::list<VuGridTree *,std::allocator<VuGridTree *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	OFFSET ??_C@_0BI@PFHOLAED@garbage?5collector?5mutex?$AA@
	call	?VuxCreateMutex@@YAPAXPBD@Z		; VuxCreateMutex
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	OFFSET ??_C@_0BA@FHLBPJKI@birthlist?5mutex?$AA@
	call	?VuxCreateMutex@@YAPAXPBD@Z		; VuxCreateMutex
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >

; 14   : 	collsMutex_   = NULL;//VuxCreateMutex("colls mutex");

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 15   : 	gridsMutex_   = NULL;//VuxCreateMutex("grids mutex");;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 16   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0VuCollectionManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$list@PAVVuCollection@@V?$allocator@PAVVuCollection@@@std@@@std@@QAE@XZ ; std::list<VuCollection *,std::allocator<VuCollection *> >::~list<VuCollection *,std::allocator<VuCollection *> >
__unwindfunclet$??0VuCollectionManager@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$list@PAVVuGridTree@@V?$allocator@PAVVuGridTree@@@std@@@std@@QAE@XZ ; std::list<VuGridTree *,std::allocator<VuGridTree *> >::~list<VuGridTree *,std::allocator<VuGridTree *> >
__unwindfunclet$??0VuCollectionManager@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
__ehhandler$??0VuCollectionManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VuCollectionManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VuCollectionManager@@QAE@XZ ENDP			; VuCollectionManager::VuCollectionManager
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*, COMDAT
; _this$ = ecx

; 362  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*

; 364  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 247  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++

; 248  : 		return (_Tmp);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++, COMDAT
; _this$ = ecx

; 224  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 241  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*, COMDAT
; _this$ = ecx

; 204  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4

; 221  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEABV?$VuBin@VVuEntity@@@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>

; 188  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z PROC			; VuBin<VuEntity>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z ENDP			; VuBin<VuEntity>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC	; VuBin<VuEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP	; VuBin<VuEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC		; VuBin<VuEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP		; VuBin<VuEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??1?$VuBin@VVuEntity@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VuBin@VVuEntity@@@@QAE@XZ PROC			; VuBin<VuEntity>::~VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 19   : 	~VuBin(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 		VuDeReferenceEntity((VuEntity *)e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 21   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VuBin@VVuEntity@@@@QAE@XZ ENDP			; VuBin<VuEntity>::~VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z PROC		; VuBin<VuEntity>::VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 15   : 	VuBin(const VuBin &rhs) : e(rhs.e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 16   : 		VuReferenceEntity(e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 17   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z ENDP		; VuBin<VuEntity>::VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z PROC	; VuBin<VuEntity>::VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 11   : 	explicit VuBin(E *e = NULL) : e(e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax], ecx

; 12   : 		VuReferenceEntity(e);

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 13   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ENDP	; VuBin<VuEntity>::VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu.h
;	COMDAT ??1VuScopeLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1VuScopeLock@@QAE@XZ PROC				; VuScopeLock::~VuScopeLock, COMDAT
; _this$ = ecx

; 92   : 	~VuScopeLock(){ VuxUnlockMutex(m); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuxUnlockMutex@@YAXPAX@Z		; VuxUnlockMutex
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
??1VuScopeLock@@QAE@XZ ENDP				; VuScopeLock::~VuScopeLock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu.h
;	COMDAT ??0VuScopeLock@@QAE@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0VuScopeLock@@QAE@PAX@Z PROC				; VuScopeLock::VuScopeLock, COMDAT
; _this$ = ecx

; 91   : 	explicit VuScopeLock(VuMutex m) : m(m){ VuxLockMutex(m); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	?VuxLockMutex@@YAXPAX@Z			; VuxLockMutex
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VuScopeLock@@QAE@PAX@Z ENDP				; VuScopeLock::VuScopeLock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sub	eax, 1
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy, COMDAT
; _this$ = ecx

; 1926 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 1928 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear, COMDAT
; _this$ = ecx

; 1470 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1471 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1472 : 		this->_Orphan_all();
; 1473 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1474 : 
; 1475 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1476 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 1477 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1478 : 		this->_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1479 : 
; 1480 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@clear

; 1481 : 			{	// delete an element
; 1482 : 			_Pnext = this->_Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$1[ebp], edx

; 1483 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode

; 1484 : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 1485 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase, COMDAT
; _this$ = ecx

; 1416 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1417 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1418 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1419 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1420 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1421 : 		_Orphan_ptr(*this, _Pnode);
; 1422 : 
; 1423 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1424 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator++
	mov	ecx, eax
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Pnode != this->_Myhead)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@erase

; 1428 : 			{	// not list head, safe to erase
; 1429 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1430 : 				this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1431 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1432 : 				this->_Prevnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1433 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode

; 1434 : 			--this->_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@erase:

; 1435 : 			}
; 1436 : 		return (_Make_iter(_Where));

	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1437 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?pop_front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?pop_front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::pop_front, COMDAT
; _this$ = ecx

; 1281 : 		{	// erase element at beginning

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1282 : 		erase(begin());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::erase

; 1283 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pop_front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::pop_front
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEAAV?$VuBin@VVuEntity@@@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEAAV?$VuBin@VVuEntity@@@@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::front, COMDAT
; _this$ = ecx

; 1256 : 		{	// return first element of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1257 : 		return (*begin());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
	mov	ecx, eax
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBEAAV?$VuBin@VVuEntity@@@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::operator*

; 1258 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?front@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEAAV?$VuBin@VVuEntity@@@@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::front
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?empty@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?empty@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE_NXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::empty, COMDAT
; _this$ = ecx

; 1246 : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1247 : 		return (this->_Mysize == 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv70[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv70[ebp]

; 1248 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE_NXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size

; 1243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter, COMDAT
; _this$ = ecx

; 1156 : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1157 : 		return (iterator(_Where._Ptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1158 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Make_iter@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin, COMDAT
; _this$ = ecx

; 1114 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1115 : 		return (iterator(this->_Nextnode(this->_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1116 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 1091 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy

; 1093 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back, COMDAT
; _this$ = ecx

; 1036 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1037 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >

; 1038 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 899  : 		{	// construct empty list

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ ; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >

; 900  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 862  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >

; 830  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

	cmp	DWORD PTR __Next$[ebp], 0
	jne	SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv133[ebp], eax
	lea	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	jmp	SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Buynode0
	ret	0
$LN5@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 777  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 		this->_Getal().destroy(
; 779  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 780  : 		this->_Getal().destroy(
; 781  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 782  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 783  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 772  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0

; 774  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 712  : 		{	// destroy head node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 706  : 	_List_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >

; 707  : 		{	// construct head node, allocator from _Al
; 708  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 709  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 548  : 		}

	pop	ebp
	ret	0
?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 543  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 529  : 	_List_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 		{	// initialize data
; 531  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 532  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 533  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 357913941				; 15555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ PROC	; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ ENDP	; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 54   : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		return (0);

	xor	eax, eax

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ PROC		; VuEntity::VuState, COMDAT
; _this$ = ecx

; 153  : 	VU_MEM VuState() const    { return vuState_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ ENDP		; VuEntity::VuState
_TEXT	ENDS
END
