; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\vu2\src\vu_database.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?vuDatabase@@3PAVVuDatabase@@A			; vuDatabase
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
_BSS	SEGMENT
?vuDatabase@@3PAVVuDatabase@@A DD 01H DUP (?)		; vuDatabase
_BSS	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?IsPrivate@VuEntity@@QBEEXZ			; VuEntity::IsPrivate
PUBLIC	?IsGlobal@VuEntity@@QBEEXZ			; VuEntity::IsGlobal
PUBLIC	?IsPersistent@VuEntity@@QBEEXZ			; VuEntity::IsPersistent
PUBLIC	?SendCreate@VuEntity@@QBE?AW4VU_SEND_TYPE@1@XZ	; VuEntity::SendCreate
PUBLIC	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ		; VuEntity::VuState
PUBLIC	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z		; VuEntity::SetVuState
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ ; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >
PUBLIC	??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
PUBLIC	??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode
PUBLIC	??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
PUBLIC	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
PUBLIC	?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
PUBLIC	?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
PUBLIC	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear
PUBLIC	?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy
PUBLIC	?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
PUBLIC	??0VuDatabase@@QAE@II@Z				; VuDatabase::VuDatabase
PUBLIC	??1VuDatabase@@UAE@XZ				; VuDatabase::~VuDatabase
PUBLIC	?Handle@VuDatabase@@QAEHPAVVuMessage@@@Z	; VuDatabase::Handle
PUBLIC	?HandleMove@VuDatabase@@QAEXPAVVuEntity@@MM@Z	; VuDatabase::HandleMove
PUBLIC	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z		; VuDatabase::Insert
PUBLIC	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z		; VuDatabase::Remove
PUBLIC	?Remove@VuDatabase@@QAEHVVU_ID@@@Z		; VuDatabase::Remove
PUBLIC	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z	; VuDatabase::Find
PUBLIC	?SilentRemove@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::SilentRemove
PUBLIC	?Purge@VuDatabase@@QAEIE@Z			; VuDatabase::Purge
PUBLIC	?ReallyInsert@VuDatabase@@AAEXPAVVuEntity@@@Z	; VuDatabase::ReallyInsert
PUBLIC	?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z	; VuDatabase::ReallyRemove
PUBLIC	?CommonRemove@VuDatabase@@AAEHPAVVuEntity@@@Z	; VuDatabase::CommonRemove
PUBLIC	?Suspend@VuDatabase@@EAEHE@Z			; VuDatabase::Suspend
PUBLIC	??_GVuDatabase@@UAEPAXI@Z			; VuDatabase::`scalar deleting destructor'
PUBLIC	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z	; VuBin<VuEntity>::VuBin<VuEntity>
PUBLIC	??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z		; VuBin<VuEntity>::VuBin<VuEntity>
PUBLIC	??1?$VuBin@VVuEntity@@@@QAE@XZ			; VuBin<VuEntity>::~VuBin<VuEntity>
PUBLIC	??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z		; VuBin<VuEntity>::`scalar deleting destructor'
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
PUBLIC	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
PUBLIC	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
PUBLIC	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
PUBLIC	??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
PUBLIC	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
PUBLIC	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >
PUBLIC	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
PUBLIC	??_7VuDatabase@@6B@				; VuDatabase::`vftable'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4VuDatabase@@6B@				; VuDatabase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVuDatabase@@@8				; VuDatabase `RTTI Type Descriptor'
PUBLIC	??_R3VuDatabase@@8				; VuDatabase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuDatabase@@8				; VuDatabase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuDatabase@@8			; VuDatabase::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Insert@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Insert
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	??0VuHashTable@@QAE@PAVVuFilter@@II@Z:PROC	; VuHashTable::VuHashTable
EXTRN	?Find@VuHashTable@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuHashTable::Find
EXTRN	??_EVuDatabase@@UAEPAXI@Z:PROC			; VuDatabase::`vector deleting destructor'
EXTRN	??0VuCreateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z:PROC ; VuCreateEvent::VuCreateEvent
EXTRN	??0VuDeleteEvent@@QAE@PAVVuEntity@@@Z:PROC	; VuDeleteEvent::VuDeleteEvent
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z:PROC ; VuMessageQueue::PostVuMessage
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z:PROC ; VuCollectionManager::Add
EXTRN	?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z:PROC ; VuCollectionManager::Remove
EXTRN	?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z:PROC ; VuCollectionManager::HandleMove
EXTRN	?Handle@VuCollectionManager@@QAEHPAVVuMessage@@@Z:PROC ; VuCollectionManager::Handle
EXTRN	?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z:PROC ; VuCollectionManager::AddToGc
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuGlobalGroup@@3PAVVuGlobalGroup@@A:DWORD	; vuGlobalGroup
EXTRN	?vuCollectionManager@@3PAVVuCollectionManager@@A:DWORD ; vuCollectionManager
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@VuDatabase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuDatabase@@8 DD FLAT:??_R0?AVVuDatabase@@@8 ; VuDatabase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuDatabase@@8
rdata$r	ENDS
;	COMDAT ??_R2VuDatabase@@8
rdata$r	SEGMENT
??_R2VuDatabase@@8 DD FLAT:??_R1A@?0A@EA@VuDatabase@@8	; VuDatabase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuDatabase@@8
rdata$r	SEGMENT
??_R3VuDatabase@@8 DD 00H				; VuDatabase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuDatabase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuDatabase@@@8
_DATA	SEGMENT
??_R0?AVVuDatabase@@@8 DD FLAT:??_7type_info@@6B@	; VuDatabase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuDatabase@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VuDatabase@@6B@
rdata$r	SEGMENT
??_R4VuDatabase@@6B@ DD 00H				; VuDatabase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVuDatabase@@@8
	DD	FLAT:??_R3VuDatabase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7VuDatabase@@6B@
CONST	SEGMENT
??_7VuDatabase@@6B@ DD FLAT:??_R4VuDatabase@@6B@	; VuDatabase::`vftable'
	DD	FLAT:??_EVuDatabase@@UAEPAXI@Z
	DD	FLAT:?Suspend@VuDatabase@@EAEHE@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z$0
__ehfuncinfo$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$0
__unwindtable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$2
__ehfuncinfo$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z$0
__unwindtable$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z$0
__unwindtable$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z$0
__unwindtable$??0VuDatabase@@QAE@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VuDatabase@@QAE@II@Z$0
__unwindtable$?Suspend@VuDatabase@@EAEHE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Suspend@VuDatabase@@EAEHE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Suspend@VuDatabase@@EAEHE@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Suspend@VuDatabase@@EAEHE@Z$2
__unwindtable$?Purge@VuDatabase@@QAEIE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Purge@VuDatabase@@QAEIE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Purge@VuDatabase@@QAEIE@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Purge@VuDatabase@@QAEIE@Z$2
__ehfuncinfo$?Suspend@VuDatabase@@EAEHE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Suspend@VuDatabase@@EAEHE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Purge@VuDatabase@@QAEIE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Purge@VuDatabase@@QAEIE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0VuDatabase@@QAE@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VuDatabase@@QAE@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv76 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z	; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv76[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	pop	ebp
	ret	0
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z

; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@$$QAV3@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<VuBin<VuEntity> >

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	call	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@V?$VuBin@VVuEntity@@@@V1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<VuBin<VuEntity>,VuBin<VuEntity> >
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$0:
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAV?$VuBin@VVuEntity@@@@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z PROC ; std::addressof<VuBin<VuEntity> >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ENDP ; std::addressof<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@1@PAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@V?$VuBin@VVuEntity@@@@@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PAU21@0$$QAV?$VuBin@VVuEntity@@@@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Buynode<VuBin<VuEntity> >
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z PROC ; std::forward<VuBin<VuEntity> >, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ENDP ; std::forward<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>

; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z PROC			; VuBin<VuEntity>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$VuBin@VVuEntity@@@@QAEPAXI@Z ENDP			; VuBin<VuEntity>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??1?$VuBin@VVuEntity@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VuBin@VVuEntity@@@@QAE@XZ PROC			; VuBin<VuEntity>::~VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 19   : 	~VuBin(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 		VuDeReferenceEntity((VuEntity *)e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 21   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VuBin@VVuEntity@@@@QAE@XZ ENDP			; VuBin<VuEntity>::~VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z PROC		; VuBin<VuEntity>::VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 15   : 	VuBin(const VuBin &rhs) : e(rhs.e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 16   : 		VuReferenceEntity(e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 17   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VVuEntity@@@@QAE@ABV0@@Z ENDP		; VuBin<VuEntity>::VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z PROC	; VuBin<VuEntity>::VuBin<VuEntity>, COMDAT
; _this$ = ecx

; 11   : 	explicit VuBin(E *e = NULL) : e(e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax], ecx

; 12   : 		VuReferenceEntity(e);

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 13   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ENDP	; VuBin<VuEntity>::VuBin<VuEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GVuDatabase@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVuDatabase@@UAEPAXI@Z PROC				; VuDatabase::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VuDatabase@@UAE@XZ			; VuDatabase::~VuDatabase
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVuDatabase@@UAEPAXI@Z ENDP				; VuDatabase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_li$2 = -64						; size = 12
_toBeSuspended$ = -52					; size = 8
$T3 = -44						; size = 4
$T4 = -40						; size = 4
tv159 = -36						; size = 4
tv72 = -32						; size = 4
_ret$ = -28						; size = 4
_this$ = -24						; size = 4
_i$5 = -20						; size = 4
_e$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_all$ = 8						; size = 1
?Suspend@VuDatabase@@EAEHE@Z PROC			; VuDatabase::Suspend
; _this$ = ecx

; 45   : int VuDatabase::Suspend(VU_BOOL all){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Suspend@VuDatabase@@EAEHE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 	// suspend calls removal callback
; 47   : 	int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 48   : 	// similar to purge here...
; 49   : 	std::list<VuEntityBin> toBeSuspended;

	lea	ecx, DWORD PTR _toBeSuspended$[ebp]
	call	??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 50   : 	for (unsigned int i=0;i< dbHash_->capacity_;++i){

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN9@Suspend
$LN8@Suspend:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN9@Suspend:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	$LN7@Suspend

; 51   : 		VuListIterator li(&dbHash_->table_[i]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$5[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _li$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 52   : 		VuEntity *e;
; 53   : 		for (

	lea	ecx, DWORD PTR _li$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$6[ebp], eax

; 54   : 			e = li.GetFirst();
; 55   : 			e != NULL;

	jmp	SHORT $LN6@Suspend
$LN5@Suspend:

; 56   : 			e = li.GetNext()
; 57   : 		){

	lea	ecx, DWORD PTR _li$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$6[ebp], eax
$LN6@Suspend:
	cmp	DWORD PTR _e$6[ebp], 0
	je	$LN4@Suspend

; 58   : 			// run calling all callbacks and seting as removed... purge will do the actual removal
; 59   : 			if (!(!all && ((e->IsPrivate() && e->IsPersistent()) || e->IsGlobal()))){

	movzx	ecx, BYTE PTR _all$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@Suspend
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?IsPrivate@VuEntity@@QBEEXZ		; VuEntity::IsPrivate
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Suspend
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?IsPersistent@VuEntity@@QBEEXZ		; VuEntity::IsPersistent
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Suspend
$LN1@Suspend:
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?IsGlobal@VuEntity@@QBEEXZ		; VuEntity::IsGlobal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Suspend
$LN2@Suspend:

; 60   : 				toBeSuspended.push_back(VuEntityBin(e));

	mov	edx, DWORD PTR _e$6[ebp]
	push	edx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv159[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv159[ebp]
	push	ecx
	lea	ecx, DWORD PTR _toBeSuspended$[ebp]
	call	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>

; 61   : 				e->RemovalCallback();

	mov	edx, DWORD PTR _e$6[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$6[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx

; 62   : 				e->SetVuState(VU_MEM_REMOVED);

	push	5
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z	; VuEntity::SetVuState
$LN3@Suspend:

; 63   : 			}
; 64   : 		}

	jmp	$LN5@Suspend
$LN4@Suspend:

; 65   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _li$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN8@Suspend
$LN7@Suspend:

; 66   : 	ret = dbHash_->Purge(all);

	movzx	eax, BYTE PTR _all$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR _ret$[ebp], eax

; 67   : 	// now remove all all
; 68   : 	toBeSuspended.clear();

	lea	ecx, DWORD PTR _toBeSuspended$[ebp]
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 69   : 	return ret;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _toBeSuspended$[ebp]
	call	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	eax, DWORD PTR $T3[ebp]

; 70   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Suspend@VuDatabase@@EAEHE@Z$0:
	lea	ecx, DWORD PTR _toBeSuspended$[ebp]
	jmp	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
__unwindfunclet$?Suspend@VuDatabase@@EAEHE@Z$1:
	lea	ecx, DWORD PTR _li$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?Suspend@VuDatabase@@EAEHE@Z$2:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?Suspend@VuDatabase@@EAEHE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Suspend@VuDatabase@@EAEHE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Suspend@VuDatabase@@EAEHE@Z ENDP			; VuDatabase::Suspend
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_entity$ = 8						; size = 4
?CommonRemove@VuDatabase@@AAEHPAVVuEntity@@@Z PROC	; VuDatabase::CommonRemove
; _this$ = ecx

; 146  : VU_ERRCODE VuDatabase::CommonRemove(VuEntity *entity){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 	if (!entity || entity->VuState() != VU_MEM_ACTIVE){ return VU_NO_OP; }

	cmp	DWORD PTR _entity$[ebp], 0
	je	SHORT $LN1@CommonRemo
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	je	SHORT $LN2@CommonRemo
$LN1@CommonRemo:
	xor	eax, eax
	jmp	SHORT $LN3@CommonRemo
$LN2@CommonRemo:

; 148  : 	vuCollectionManager->AddToGc(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
	call	?AddToGc@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::AddToGc

; 149  : 	entity->SetVuState(VU_MEM_INACTIVE);

	push	4
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z	; VuEntity::SetVuState

; 150  : 
; 151  : #if IMMEDIATE_REMOVAL_CALLBACK
; 152  : 	entity->RemovalCallback();
; 153  : #endif
; 154  : 
; 155  : 	return VU_SUCCESS;

	mov	eax, 1
$LN3@CommonRemo:

; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CommonRemove@VuDatabase@@AAEHPAVVuEntity@@@Z ENDP	; VuDatabase::CommonRemove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_safe$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entity$ = 8						; size = 4
?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z PROC	; VuDatabase::ReallyRemove
; _this$ = ecx

; 204  : void VuDatabase::ReallyRemove(VuEntity *entity){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	// play it safe
; 206  : 	VuBin<VuEntity> safe(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _safe$[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 207  : #if !IMMEDIATE_REMOVAL_CALLBACK
; 208  : 	entity->RemovalCallback();

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax

; 209  : #endif
; 210  : 	dbHash_->Remove(entity);

	mov	ecx, DWORD PTR _entity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove

; 211  : 	vuCollectionManager->Remove(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
	call	?Remove@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::Remove

; 212  : 	entity->SetVuState(VU_MEM_REMOVED);

	push	5
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z	; VuEntity::SetVuState

; 213  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _safe$[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z$0:
	lea	ecx, DWORD PTR _safe$[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReallyRemove@VuDatabase@@AAEXPAVVuEntity@@@Z ENDP	; VuDatabase::ReallyRemove
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_entity$ = 8						; size = 4
?ReallyInsert@VuDatabase@@AAEXPAVVuEntity@@@Z PROC	; VuDatabase::ReallyInsert
; _this$ = ecx

; 197  : void VuDatabase::ReallyInsert(VuEntity *entity){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 	entity->SetVuState(VU_MEM_ACTIVE);

	push	3
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z	; VuEntity::SetVuState

; 199  : 	dbHash_->Insert(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Insert@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Insert

; 200  : 	vuCollectionManager->Add(entity);

	mov	edx, DWORD PTR _entity$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
	call	?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::Add

; 201  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ReallyInsert@VuDatabase@@AAEXPAVVuEntity@@@Z ENDP	; VuDatabase::ReallyInsert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_li$2 = -64						; size = 12
_toBePurged$ = -52					; size = 8
$T3 = -44						; size = 4
$T4 = -40						; size = 4
tv154 = -36						; size = 4
tv72 = -32						; size = 4
_ret$ = -28						; size = 4
_this$ = -24						; size = 4
_i$5 = -20						; size = 4
_e$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_all$ = 8						; size = 1
?Purge@VuDatabase@@QAEIE@Z PROC				; VuDatabase::Purge
; _this$ = ecx

; 18   : unsigned int VuDatabase::Purge(VU_BOOL all){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Purge@VuDatabase@@QAEIE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 	// this is a bit different from hash db since we need to save entities before purging
; 20   : 	// to avoid self destruction CTD (entity is destroyed and its callback removes other entities
; 21   : 	// from vudb
; 22   : 	// suspend calls removal callback
; 23   : 	std::list<VuEntityBin> toBePurged;

	lea	ecx, DWORD PTR _toBePurged$[ebp]
	call	??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 24   : 	int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 25   : 	for (unsigned int i=0;i< dbHash_->capacity_;++i){

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN9@Purge
$LN8@Purge:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN9@Purge:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	$LN7@Purge

; 26   : 		VuListIterator li(&dbHash_->table_[i]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$5[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _li$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   : 		VuEntity *e;
; 28   : 		for (

	lea	ecx, DWORD PTR _li$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _e$6[ebp], eax

; 29   : 			e = li.GetFirst();
; 30   : 			e != NULL;

	jmp	SHORT $LN6@Purge
$LN5@Purge:

; 31   : 			e = li.GetNext()
; 32   : 		){

	lea	ecx, DWORD PTR _li$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _e$6[ebp], eax
$LN6@Purge:
	cmp	DWORD PTR _e$6[ebp], 0
	je	SHORT $LN4@Purge

; 33   : 			// run calling all callbacks and seting as removed... purge will do the actual removal
; 34   : 			if (!(!all && ((e->IsPrivate() && e->IsPersistent()) || e->IsGlobal()))){

	movzx	ecx, BYTE PTR _all$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@Purge
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?IsPrivate@VuEntity@@QBEEXZ		; VuEntity::IsPrivate
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Purge
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?IsPersistent@VuEntity@@QBEEXZ		; VuEntity::IsPersistent
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Purge
$LN1@Purge:
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?IsGlobal@VuEntity@@QBEEXZ		; VuEntity::IsGlobal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Purge
$LN2@Purge:

; 35   : 				toBePurged.push_back(VuEntityBin(e));

	mov	edx, DWORD PTR _e$6[ebp]
	push	edx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$VuBin@VVuEntity@@@@QAE@PAVVuEntity@@@Z ; VuBin<VuEntity>::VuBin<VuEntity>
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv154[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv154[ebp]
	push	ecx
	lea	ecx, DWORD PTR _toBePurged$[ebp]
	call	?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
$LN3@Purge:

; 36   : 			}
; 37   : 		}

	jmp	SHORT $LN5@Purge
$LN4@Purge:

; 38   : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _li$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN8@Purge
$LN7@Purge:

; 39   : 	ret = dbHash_->Purge(all);

	movzx	edx, BYTE PTR _all$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR _ret$[ebp], eax

; 40   : 	// now delete all
; 41   : 	toBePurged.clear();

	lea	ecx, DWORD PTR _toBePurged$[ebp]
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 42   : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _toBePurged$[ebp]
	call	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
	mov	eax, DWORD PTR $T3[ebp]

; 43   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Purge@VuDatabase@@QAEIE@Z$0:
	lea	ecx, DWORD PTR _toBePurged$[ebp]
	jmp	??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
__unwindfunclet$?Purge@VuDatabase@@QAEIE@Z$1:
	lea	ecx, DWORD PTR _li$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?Purge@VuDatabase@@QAEIE@Z$2:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$VuBin@VVuEntity@@@@QAE@XZ		; VuBin<VuEntity>::~VuBin<VuEntity>
__ehhandler$?Purge@VuDatabase@@QAEIE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Purge@VuDatabase@@QAEIE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Purge@VuDatabase@@QAEIE@Z ENDP				; VuDatabase::Purge
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_entity$ = 8						; size = 4
?SilentRemove@VuDatabase@@QAEHPAVVuEntity@@@Z PROC	; VuDatabase::SilentRemove
; _this$ = ecx

; 182  : VU_ERRCODE VuDatabase::SilentRemove(VuEntity *entity){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 	return CommonRemove(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CommonRemove@VuDatabase@@AAEHPAVVuEntity@@@Z ; VuDatabase::CommonRemove

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SilentRemove@VuDatabase@@QAEHPAVVuEntity@@@Z ENDP	; VuDatabase::SilentRemove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_entityId$ = 8						; size = 8
?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z PROC	; VuDatabase::Find
; _this$ = ecx

; 215  : VuEntity *VuDatabase::Find(VU_ID entityId) const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 	return dbHash_->Find(entityId);

	mov	eax, DWORD PTR _entityId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _entityId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Find@VuHashTable@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuHashTable::Find

; 217  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ENDP	; VuDatabase::Find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_entityId$ = 8						; size = 8
?Remove@VuDatabase@@QAEHVVU_ID@@@Z PROC			; VuDatabase::Remove
; _this$ = ecx

; 192  : VU_ERRCODE VuDatabase::Remove(VU_ID entityId){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 	return Remove(dbHash_->Find(entityId));

	mov	eax, DWORD PTR _entityId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _entityId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Find@VuHashTable@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuHashTable::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Remove

; 194  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Remove@VuDatabase@@QAEHVVU_ID@@@Z ENDP			; VuDatabase::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 4
_this$ = -32						; size = 4
_event$3 = -28						; size = 4
tv87 = -24						; size = 4
$T4 = -20						; size = 4
_ret$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entity$ = 8						; size = 4
?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z PROC		; VuDatabase::Remove
; _this$ = ecx

; 158  : VU_ERRCODE VuDatabase::Remove(VuEntity *entity){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 	VU_ERRCODE ret = CommonRemove(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CommonRemove@VuDatabase@@AAEHPAVVuEntity@@@Z ; VuDatabase::CommonRemove
	mov	DWORD PTR _ret$[ebp], eax

; 160  : 	if (ret != VU_SUCCESS){ return ret; }

	cmp	DWORD PTR _ret$[ebp], 1
	je	SHORT $LN2@Remove
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 161  : 
; 162  : #if NO_RELEASE_EVENT
; 163  : 	if (entity->IsLocal() && !entity->IsPrivate()) {

	mov	ecx, DWORD PTR _entity$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Remove
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?IsPrivate@VuEntity@@QBEEXZ		; VuEntity::IsPrivate
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@Remove

; 164  : 		VuEvent *event = new VuDeleteEvent(entity);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN5@Remove
	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0VuDeleteEvent@@QAE@PAVVuEntity@@@Z	; VuDeleteEvent::VuDeleteEvent
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN6@Remove
$LN5@Remove:
	mov	DWORD PTR tv87[ebp], 0
$LN6@Remove:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _event$3[ebp], edx

; 165  : 		event->RequestReliableTransmit();

	mov	ecx, DWORD PTR _event$3[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 166  : 		VuMessageQueue::PostVuMessage(event);

	mov	eax, DWORD PTR _event$3[ebp]
	push	eax
	call	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z ; VuMessageQueue::PostVuMessage
	add	esp, 4
$LN1@Remove:

; 167  : 	} 
; 168  : #else
; 169  : 	VuEvent *event;
; 170  : 	if (entity->IsLocal() && !entity->IsPrivate()) {
; 171  : 		event = new VuDeleteEvent(entity);
; 172  : 		event->RequestReliableTransmit();
; 173  : 	} 
; 174  : 	else {
; 175  : 		event = new VuReleaseEvent(entity);
; 176  : 	}
; 177  : 	VuMessageQueue::PostVuMessage(event);
; 178  : #endif
; 179  : 	return VU_SUCCESS;

	mov	eax, 1
$LN3@Remove:

; 180  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z ENDP		; VuDatabase::Remove
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 8
$T3 = -40						; size = 4
_sendType$ = -36					; size = 4
tv156 = -32						; size = 4
$T4 = -28						; size = 4
_target$5 = -24						; size = 4
_this$ = -20						; size = 4
_event$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entity$ = 8						; size = 4
?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z PROC		; VuDatabase::Insert
; _this$ = ecx

; 84   : VU_ERRCODE VuDatabase::Insert(VuEntity *entity){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 	if (entity == NULL){ return VU_NO_OP; }

	cmp	DWORD PTR _entity$[ebp], 0
	jne	SHORT $LN6@Insert
	xor	eax, eax
	jmp	$LN7@Insert
$LN6@Insert:

; 86   : 
; 87   : #if 0//BIRTH_LIST
; 88   : 	// already in
; 89   : 	if ((entity->VuState() == VU_MEM_ACTIVE) || (entity->VuState() == VU_MEM_TO_BE_INSERTED)){
; 90   : 		return VU_ERROR;
; 91   : 	}
; 92   : 
; 93   : 	VuScopeLock l(GetMutex());
; 94   : 	entity->SetVuState(VU_MEM_TO_BE_INSERTED);
; 95   : 	vuCollectionManager->AddToBirthList(entity);
; 96   : 	VuEntity::VU_SEND_TYPE sendType = entity->SendCreate();
; 97   : 	if (entity->IsLocal() && (!entity->IsPrivate()) && (sendType != VuEntity::VU_SC_DONT_SEND)) {
; 98   : 		VuCreateEvent *event = 0;
; 99   : 		VuTargetEntity *target = vuGlobalGroup;
; 100  : 		if (!entity->IsGlobal()) {
; 101  : 			target = vuLocalSessionEntity->Game();
; 102  : 		}
; 103  : 		event = new VuCreateEvent(entity, target);
; 104  : 		event->RequestReliableTransmit();
; 105  : 		if (sendType == VuEntity::VU_SC_SEND_OOB){
; 106  : 			event->RequestOutOfBandTransmit();
; 107  : 		}
; 108  : 		VuMessageQueue::PostVuMessage(event);
; 109  : 	}
; 110  : 	entity->InsertionCallback();
; 111  : 	return VU_SUCCESS;
; 112  : 
; 113  : #else 
; 114  : 	// no duplicates allowed
; 115  : 	if ((entity->VuState() == VU_MEM_ACTIVE) || (dbHash_->Find(entity->Id()) != NULL)){

	mov	ecx, DWORD PTR _entity$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	je	SHORT $LN4@Insert
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Find@VuHashTable@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuHashTable::Find
	test	eax, eax
	je	SHORT $LN5@Insert
$LN4@Insert:

; 116  : 		return VU_ERROR;

	or	eax, -1
	jmp	$LN7@Insert
$LN5@Insert:

; 117  : 	}
; 118  : 
; 119  : 	entity->SetVuState(VU_MEM_ACTIVE);

	push	3
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z	; VuEntity::SetVuState

; 120  : 	dbHash_->Insert(entity);

	mov	ecx, DWORD PTR _entity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Insert@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Insert

; 121  : 	vuCollectionManager->Add(entity);

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
	call	?Add@VuCollectionManager@@QAEXPAVVuEntity@@@Z ; VuCollectionManager::Add

; 122  : 	
; 123  : 	VuEntity::VU_SEND_TYPE sendType = entity->SendCreate();

	mov	ecx, DWORD PTR _entity$[ebp]
	call	?SendCreate@VuEntity@@QBE?AW4VU_SEND_TYPE@1@XZ ; VuEntity::SendCreate
	mov	DWORD PTR _sendType$[ebp], eax

; 124  : 	if (entity->IsLocal() && (!entity->IsPrivate()) && (sendType != VuEntity::VU_SC_DONT_SEND)) {

	mov	ecx, DWORD PTR _entity$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@Insert
	mov	ecx, DWORD PTR _entity$[ebp]
	call	?IsPrivate@VuEntity@@QBEEXZ		; VuEntity::IsPrivate
	movzx	edx, al
	test	edx, edx
	jne	$LN3@Insert
	cmp	DWORD PTR _sendType$[ebp], 0
	je	$LN3@Insert

; 125  : 		VuCreateEvent *event = 0;

	mov	DWORD PTR _event$6[ebp], 0

; 126  : 		VuTargetEntity *target = vuGlobalGroup;

	mov	eax, DWORD PTR ?vuGlobalGroup@@3PAVVuGlobalGroup@@A ; vuGlobalGroup
	mov	DWORD PTR _target$5[ebp], eax

; 127  : 		if (!entity->IsGlobal()) {

	mov	ecx, DWORD PTR _entity$[ebp]
	call	?IsGlobal@VuEntity@@QBEEXZ		; VuEntity::IsGlobal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Insert

; 128  : 			target = vuLocalSessionEntity->Game();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	DWORD PTR _target$5[ebp], eax
$LN2@Insert:

; 129  : 		}
; 130  : 		event = new VuCreateEvent(entity, target);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN9@Insert
	push	0
	mov	edx, DWORD PTR _target$5[ebp]
	push	edx
	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0VuCreateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z ; VuCreateEvent::VuCreateEvent
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN10@Insert
$LN9@Insert:
	mov	DWORD PTR tv156[ebp], 0
$LN10@Insert:
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _event$6[ebp], edx

; 131  : 		event->RequestReliableTransmit();

	mov	ecx, DWORD PTR _event$6[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 132  : 		if (sendType == VuEntity::VU_SC_SEND_OOB){

	cmp	DWORD PTR _sendType$[ebp], 2
	jne	SHORT $LN1@Insert

; 133  : 			event->RequestOutOfBandTransmit();

	mov	ecx, DWORD PTR _event$6[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit
$LN1@Insert:

; 134  : 		}
; 135  : 		VuMessageQueue::PostVuMessage(event);

	mov	eax, DWORD PTR _event$6[ebp]
	push	eax
	call	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z ; VuMessageQueue::PostVuMessage
	add	esp, 4
$LN3@Insert:

; 136  : 	}
; 137  : 
; 138  : 	// sfr: its possible this is being called twice (because of the create event)
; 139  : 	entity->InsertionCallback();

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 140  : 	return VU_SUCCESS;

	mov	eax, 1
$LN7@Insert:

; 141  : #endif
; 142  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z ENDP		; VuDatabase::Insert
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ent$ = 8						; size = 4
_coord1$ = 12						; size = 4
_coord2$ = 16						; size = 4
?HandleMove@VuDatabase@@QAEXPAVVuEntity@@MM@Z PROC	; VuDatabase::HandleMove
; _this$ = ecx

; 78   : void VuDatabase::HandleMove(VuEntity *ent, BIG_SCALAR coord1, BIG_SCALAR coord2){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	if (ent->VuState() == VU_MEM_ACTIVE){

	mov	ecx, DWORD PTR _ent$[ebp]
	call	?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ	; VuEntity::VuState
	cmp	eax, 3
	jne	SHORT $LN1@HandleMove

; 80   : 		vuCollectionManager->HandleMove(ent, coord1, coord2);

	push	ecx
	movss	xmm0, DWORD PTR _coord2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _coord1$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
	call	?HandleMove@VuCollectionManager@@QAEHPAVVuEntity@@MM@Z ; VuCollectionManager::HandleMove
$LN1@HandleMove:

; 81   : 	}
; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleMove@VuDatabase@@QAEXPAVVuEntity@@MM@Z ENDP	; VuDatabase::HandleMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
?Handle@VuDatabase@@QAEHPAVVuMessage@@@Z PROC		; VuDatabase::Handle
; _this$ = ecx

; 72   : VU_ERRCODE VuDatabase::Handle(VuMessage *msg){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 	// note: this should work on Create & Delete messages, but those are
; 74   : 	// currently handled elsewhere... for now... just pass on to collection mgr
; 75   : 	return vuCollectionManager->Handle(msg);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuCollectionManager@@3PAVVuCollectionManager@@A ; vuCollectionManager
	call	?Handle@VuCollectionManager@@QAEHPAVVuMessage@@@Z ; VuCollectionManager::Handle

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@VuDatabase@@QAEHPAVVuMessage@@@Z ENDP		; VuDatabase::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1VuDatabase@@UAE@XZ PROC				; VuDatabase::~VuDatabase
; _this$ = ecx

; 14   : VuDatabase::~VuDatabase(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VuDatabase@@6B@

; 15   : 	Purge(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Purge@VuDatabase@@QAEIE@Z		; VuDatabase::Purge

; 16   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1VuDatabase@@UAE@XZ ENDP				; VuDatabase::~VuDatabase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\src\vu_database.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv76 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tableSize$ = 8						; size = 4
_key$ = 12						; size = 4
??0VuDatabase@@QAE@II@Z PROC				; VuDatabase::VuDatabase
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VuDatabase@@QAE@II@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VuDatabase@@6B@
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@VuDatabase
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tableSize$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0VuHashTable@@QAE@PAVVuFilter@@II@Z	; VuHashTable::VuHashTable
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@VuDatabase
$LN3@VuDatabase:
	mov	DWORD PTR tv76[ebp], 0
$LN4@VuDatabase:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx

; 12   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0VuDatabase@@QAE@II@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0VuDatabase@@QAE@II@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VuDatabase@@QAE@II@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VuDatabase@@QAE@II@Z ENDP				; VuDatabase::VuDatabase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sub	eax, 1
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Incsize@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXI@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy, COMDAT
; _this$ = ecx

; 1926 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear

; 1928 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear, COMDAT
; _this$ = ecx

; 1470 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1471 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1472 : 		this->_Orphan_all();
; 1473 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1474 : 
; 1475 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1476 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 1477 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1478 : 		this->_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1479 : 
; 1480 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@clear

; 1481 : 			{	// delete an element
; 1482 : 			_Pnext = this->_Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$1[ebp], edx

; 1483 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode

; 1484 : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 1485 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size

; 1243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@PBV?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<VuBin<VuEntity> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 1091 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXXZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Tidy

; 1093 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back, COMDAT
; _this$ = ecx

; 1036 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1037 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@@2@XZ ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@V?$VuBin@VVuEntity@@@@@std@@YA$$QAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::forward<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$VuBin@VVuEntity@@@@@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@U_Iterator_base0@2@@1@$$QAV?$VuBin@VVuEntity@@@@@Z ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Insert<VuBin<VuEntity> >

; 1038 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEX$$QAV?$VuBin@VVuEntity@@@@@Z ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 899  : 		{	// construct empty list

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ ; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >

; 900  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$list@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::list<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::~_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@V?$VuBin@VVuEntity@@@@@std@@YAPAV?$VuBin@VVuEntity@@@@AAV1@@Z ; std::addressof<VuBin<VuEntity> >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@V?$VuBin@VVuEntity@@@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAV?$VuBin@VVuEntity@@@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<VuBin<VuEntity> >

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 862  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode@?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z PROC ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >

; 830  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_buy@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ENDP ; std::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::_List_buy<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

	cmp	DWORD PTR __Next$[ebp], 0
	jne	SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv133[ebp], eax
	lea	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::construct<std::_List_node<VuBin<VuEntity>,void *> *,std::_List_node<VuBin<VuEntity>,void *> * &>
	jmp	SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Buynode0
	ret	0
$LN5@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 777  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 		this->_Getal().destroy(
; 779  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 780  : 		this->_Getal().destroy(
; 781  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<VuBin<VuEntity>,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::destroy<std::_List_node<VuBin<VuEntity>,void *> *>

; 782  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate

; 783  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 772  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buynode0

; 774  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 712  : 		{	// destroy head node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Freeheadnode

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::~_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >, COMDAT
; _this$ = ecx

; 706  : 	_List_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >

; 707  : 		{	// construct head node, allocator from _Al
; 708  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 709  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_alloc@$0A@U?$_List_base_types@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@@std@@QAE@ABV?$allocator@V?$VuBin@VVuEntity@@@@@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >::_List_alloc<0,std::_List_base_types<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 548  : 		}

	pop	ebp
	ret	0
?_Myval@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAV?$VuBin@VVuEntity@@@@PAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 543  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@SAAAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >, COMDAT
; _this$ = ecx

; 529  : 	_List_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 		{	// initialize data
; 531  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 532  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 533  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_val@U?$_List_simple_types@V?$VuBin@VVuEntity@@@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<VuBin<VuEntity> > >::_List_val<std::_List_simple_types<VuBin<VuEntity> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<VuBin<VuEntity>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 357913941				; 15555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@YAPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<VuBin<VuEntity>,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAEXPAU?$_List_node@V?$VuBin@VVuEntity@@@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@V?$VuBin@VVuEntity@@@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<VuBin<VuEntity>,void *> >::allocator<std::_List_node<VuBin<VuEntity>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ PROC	; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@V?$VuBin@VVuEntity@@@@@std@@QAE@XZ ENDP	; std::allocator<VuBin<VuEntity> >::allocator<VuBin<VuEntity> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newState$ = 8						; size = 4
?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z PROC		; VuEntity::SetVuState, COMDAT
; _this$ = ecx

; 229  : 	void SetVuState(VU_MEM newState){ vuState_ = newState; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newState$[ebp]
	mov	DWORD PTR [eax+92], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z ENDP		; VuEntity::SetVuState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ PROC		; VuEntity::VuState, COMDAT
; _this$ = ecx

; 153  : 	VU_MEM VuState() const    { return vuState_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?VuState@VuEntity@@QBE?AW4VU_MEM@@XZ ENDP		; VuEntity::VuState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SendCreate@VuEntity@@QBE?AW4VU_SEND_TYPE@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SendCreate@VuEntity@@QBE?AW4VU_SEND_TYPE@1@XZ PROC	; VuEntity::SendCreate, COMDAT
; _this$ = ecx

; 147  : 	VU_SEND_TYPE SendCreate() const { return static_cast<VU_SEND_TYPE>(share_.flags_.breakdown_.sendCreate_); } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	shr	eax, 6
	and	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	0
?SendCreate@VuEntity@@QBE?AW4VU_SEND_TYPE@1@XZ ENDP	; VuEntity::SendCreate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?IsPersistent@VuEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPersistent@VuEntity@@QBEEXZ PROC			; VuEntity::IsPersistent, COMDAT
; _this$ = ecx

; 139  : 	VU_BOOL IsPersistent() const    { return (VU_BOOL)share_.flags_.breakdown_.persistent_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	shr	eax, 5
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPersistent@VuEntity@@QBEEXZ ENDP			; VuEntity::IsPersistent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?IsGlobal@VuEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGlobal@VuEntity@@QBEEXZ PROC				; VuEntity::IsGlobal, COMDAT
; _this$ = ecx

; 138  : 	VU_BOOL IsGlobal() const        { return (VU_BOOL)share_.flags_.breakdown_.global_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	shr	eax, 4
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGlobal@VuEntity@@QBEEXZ ENDP				; VuEntity::IsGlobal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?IsPrivate@VuEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPrivate@VuEntity@@QBEEXZ PROC			; VuEntity::IsPrivate, COMDAT
; _this$ = ecx

; 134  : 	VU_BOOL IsPrivate() const       { return (VU_BOOL)share_.flags_.breakdown_.private_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPrivate@VuEntity@@QBEEXZ ENDP			; VuEntity::IsPrivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
END
