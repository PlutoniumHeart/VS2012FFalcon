; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\comms\ComList.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
PUBLIC	_comListAdd
PUBLIC	_comListRemove
PUBLIC	_comListGetFirstP
PUBLIC	_comListGetNextP
PUBLIC	_comListFindProtocolRport
PUBLIC	_comListFindProtocolId
PUBLIC	_comListFindDangling
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0?$allocator@PAUcomiphandle@@@std@@QAE@XZ	; std::allocator<comiphandle *>::allocator<comiphandle *>
PUBLIC	??0?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<comiphandle *,void *> >::allocator<std::_List_node<comiphandle *,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::allocate
PUBLIC	?max_size@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<comiphandle *,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<comiphandle *> >::_List_val<std::_List_simple_types<comiphandle *> >
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Myval
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::~_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buynode0
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
PUBLIC	??0?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_List_buy<comiphandle *,std::allocator<comiphandle *> >
PUBLIC	?_Freenode@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Freenode
PUBLIC	??1?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::~_List_buy<comiphandle *,std::allocator<comiphandle *> >
PUBLIC	??0?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::list<comiphandle *,std::allocator<comiphandle *> >
PUBLIC	??1?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::~list<comiphandle *,std::allocator<comiphandle *> >
PUBLIC	?begin@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::begin
PUBLIC	?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::end
PUBLIC	?_Unchecked_end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Unchecked_end
PUBLIC	?max_size@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QBEIXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::max_size
PUBLIC	?push_back@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::push_back
PUBLIC	?clear@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::clear
PUBLIC	?remove@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::remove
PUBLIC	?_Tidy@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Tidy
PUBLIC	?_Incsize@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXI@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Incsize
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEABQAUcomiphandle@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator!=
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
PUBLIC	??0ComList@@QAE@XZ				; ComList::ComList
PUBLIC	??1ComList@@QAE@XZ				; ComList::~ComList
PUBLIC	?addCom@ComList@@QAEXPAUcomiphandle@@@Z		; ComList::addCom
PUBLIC	?removeCom@ComList@@QAEXPAUcomiphandle@@@Z	; ComList::removeCom
PUBLIC	?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z	; ComList::iterBegin
PUBLIC	?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z	; ComList::iterGetNext
PUBLIC	?findProtRport@ComList@@QAEPAUcomiphandle@@HG@Z	; ComList::findProtRport
PUBLIC	?findProtId@ComList@@QAEPAUcomiphandle@@HK@Z	; ComList::findProtId
PUBLIC	?findProtDangling@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::findProtDangling
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
PUBLIC	??$_Insert@ABQAUcomiphandle@@@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@1@ABQAUcomiphandle@@@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Insert<comiphandle * const &>
PUBLIC	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>
PUBLIC	??$addressof@PAUcomiphandle@@@std@@YAPAPAUcomiphandle@@AAPAU1@@Z ; std::addressof<comiphandle *>
PUBLIC	??$destroy@PAUcomiphandle@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>
PUBLIC	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
PUBLIC	??$_Allocate@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAU?$_List_node@PAUcomiphandle@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<comiphandle *,void *> >
PUBLIC	??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ; std::forward<comiphandle * const &>
PUBLIC	??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Buynode<comiphandle * const &>
PUBLIC	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>
PUBLIC	??$destroy@PAUcomiphandle@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>
PUBLIC	??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<comiphandle *,void *> * &>
PUBLIC	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
PUBLIC	??$construct@PAUcomiphandle@@ABQAU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>
PUBLIC	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<std::_List_node<comiphandle *,void *> *>
PUBLIC	??$destroy@PAUcomiphandle@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<comiphandle *>
PUBLIC	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
PUBLIC	??$construct@PAUcomiphandle@@ABQAU1@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@ABQAU3@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>
PUBLIC	??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<comiphandle *,comiphandle * const &>
PUBLIC	?GlobalComList@@3VComList@@A			; GlobalComList
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_ComAPIGetPeerIP:PROC
EXTRN	_ComAPIGetRecvPort:PROC
EXTRN	_ComAPIGetProtocol:PROC
EXTRN	_ComAPIGetPeerId:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

?GlobalComList@@3VComList@@A DB 0cH DUP (?)		; GlobalComList
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z$0
__ehfuncinfo$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z$0
__unwindtable$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z$2
__ehfuncinfo$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0ComList@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ComList@@QAE@XZ$0
__ehfuncinfo$??0ComList@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ComList@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GlobalComList$initializer$ DD FLAT:??__EGlobalComList@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<comiphandle *,comiphandle * const &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ; std::forward<comiphandle * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<comiphandle *,comiphandle * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUcomiphandle@@ABQAU1@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@ABQAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAUcomiphandle@@ABQAU1@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@ABQAU3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ; std::forward<comiphandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAUcomiphandle@@ABQAU1@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<comiphandle *,comiphandle * const &>
	pop	ebp
	ret	0
??$construct@PAUcomiphandle@@ABQAU1@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@ABQAU3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<comiphandle *,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAUcomiphandle@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAUcomiphandle@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@@Z PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<comiphandle *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAUcomiphandle@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@@Z ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<comiphandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<std::_List_node<comiphandle *,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<std::_List_node<comiphandle *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUcomiphandle@@ABQAU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAUcomiphandle@@ABQAU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ; std::forward<comiphandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAUcomiphandle@@ABQAU1@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@ABQAU3@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAUcomiphandle@@ABQAU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<comiphandle *,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<comiphandle *,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<comiphandle *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAUcomiphandle@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAUcomiphandle@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAUcomiphandle@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAUcomiphandle@@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<comiphandle *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAUcomiphandle@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::destroy<std::_List_node<comiphandle *,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z PROC ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Buynode<comiphandle * const &>, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR __V0$[ebp]
	push	edx
	call	??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ; std::forward<comiphandle * const &>
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Myval
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	call	??$addressof@PAUcomiphandle@@@std@@YAPAPAUcomiphandle@@AAPAU1@@Z ; std::addressof<comiphandle *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAUcomiphandle@@ABQAU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@ABQAU2@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<comiphandle *,comiphandle * const &>
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z$0:
	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate
	push	0
	push	0
	call	__CxxThrowException@8
	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z$1:
	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z ENDP ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Buynode<comiphandle * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z PROC ; std::forward<comiphandle * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ENDP ; std::forward<comiphandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAU?$_List_node@PAUcomiphandle@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAU?$_List_node@PAUcomiphandle@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<comiphandle *,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAU?$_List_node@PAUcomiphandle@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<comiphandle *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAAAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<comiphandle *,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAUcomiphandle@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAUcomiphandle@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAUcomiphandle@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAUcomiphandle@@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAUcomiphandle@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAUcomiphandle@@@std@@YAPAPAUcomiphandle@@AAPAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAUcomiphandle@@@std@@YAPAPAUcomiphandle@@AAPAU1@@Z PROC ; std::addressof<comiphandle *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAUcomiphandle@@@std@@YAPAPAUcomiphandle@@AAPAU1@@Z ENDP ; std::addressof<comiphandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@1@PAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<comiphandle *,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<comiphandle *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@ABQAUcomiphandle@@@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@1@ABQAUcomiphandle@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@ABQAUcomiphandle@@@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@1@ABQAUcomiphandle@@@Z PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Insert<comiphandle * const &>, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAUcomiphandle@@@std@@YAABQAUcomiphandle@@ABQAU1@@Z ; std::forward<comiphandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@ABQAUcomiphandle@@@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@1@PAU21@0ABQAUcomiphandle@@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Buynode<comiphandle * const &>
	mov	DWORD PTR __Newnode$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXI@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Incsize
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Insert@ABQAUcomiphandle@@@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@1@ABQAUcomiphandle@@@Z ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Insert<comiphandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>

; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FGlobalComList@@YAXXZ
text$yd	SEGMENT
??__FGlobalComList@@YAXXZ PROC				; `dynamic atexit destructor for 'GlobalComList'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	??1ComList@@QAE@XZ			; ComList::~ComList
	pop	ebp
	ret	0
??__FGlobalComList@@YAXXZ ENDP				; `dynamic atexit destructor for 'GlobalComList''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
;	COMDAT ??__EGlobalComList@@YAXXZ
text$yc	SEGMENT
??__EGlobalComList@@YAXXZ PROC				; `dynamic initializer for 'GlobalComList'', COMDAT

; 9    : ComList GlobalComList;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	??0ComList@@QAE@XZ			; ComList::ComList
	push	OFFSET ??__FGlobalComList@@YAXXZ	; `dynamic atexit destructor for 'GlobalComList''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EGlobalComList@@YAXXZ ENDP				; `dynamic initializer for 'GlobalComList''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_comIP$1 = -4						; size = 4
_protocol$ = 8						; size = 4
?findProtDangling@ComList@@QAEPAUcomiphandle@@H@Z PROC	; ComList::findProtDangling
; _this$ = ecx

; 125  : ComIP *ComList::findProtDangling(int protocol){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	for (ComIP *comIP = iterBegin(protocol); comIP != NULL; comIP = iterGetNext(protocol)){

	mov	eax, DWORD PTR _protocol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterBegin
	mov	DWORD PTR _comIP$1[ebp], eax
	jmp	SHORT $LN4@findProtDa
$LN3@findProtDa:
	mov	ecx, DWORD PTR _protocol$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterGetNext
	mov	DWORD PTR _comIP$1[ebp], eax
$LN4@findProtDa:
	cmp	DWORD PTR _comIP$1[ebp], 0
	je	SHORT $LN2@findProtDa

; 127  : 		if (
; 128  : 			(ComAPIGetPeerIP((ComAPIHandle)comIP) == CAPI_DANGLING_IP)
; 129  : 		){

	mov	edx, DWORD PTR _comIP$1[ebp]
	push	edx
	call	_ComAPIGetPeerIP
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN1@findProtDa

; 130  : 			return comIP;

	mov	eax, DWORD PTR _comIP$1[ebp]
	jmp	SHORT $LN5@findProtDa
$LN1@findProtDa:

; 131  : 		}
; 132  : 	}	

	jmp	SHORT $LN3@findProtDa
$LN2@findProtDa:

; 133  : 	return NULL;

	xor	eax, eax
$LN5@findProtDa:

; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?findProtDangling@ComList@@QAEPAUcomiphandle@@H@Z ENDP	; ComList::findProtDangling
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_comIP$1 = -4						; size = 4
_protocol$ = 8						; size = 4
_id$ = 12						; size = 4
?findProtId@ComList@@QAEPAUcomiphandle@@HK@Z PROC	; ComList::findProtId
; _this$ = ecx

; 112  : ComIP *ComList::findProtId(int protocol, unsigned long id){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	for (ComIP *comIP = iterBegin(protocol); comIP != NULL; comIP = iterGetNext(protocol)){

	mov	eax, DWORD PTR _protocol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterBegin
	mov	DWORD PTR _comIP$1[ebp], eax
	jmp	SHORT $LN4@findProtId
$LN3@findProtId:
	mov	ecx, DWORD PTR _protocol$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterGetNext
	mov	DWORD PTR _comIP$1[ebp], eax
$LN4@findProtId:
	cmp	DWORD PTR _comIP$1[ebp], 0
	je	SHORT $LN2@findProtId

; 114  : 		if (
; 115  : 			(ComAPIGetPeerId((ComAPIHandle)comIP) == id)
; 116  : 		){

	mov	edx, DWORD PTR _comIP$1[ebp]
	push	edx
	call	_ComAPIGetPeerId
	add	esp, 4
	cmp	eax, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@findProtId

; 117  : 			return comIP;

	mov	eax, DWORD PTR _comIP$1[ebp]
	jmp	SHORT $LN5@findProtId
$LN1@findProtId:

; 118  : 		}
; 119  : 	}	

	jmp	SHORT $LN3@findProtId
$LN2@findProtId:

; 120  : 	return NULL;

	xor	eax, eax
$LN5@findProtId:

; 121  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?findProtId@ComList@@QAEPAUcomiphandle@@HK@Z ENDP	; ComList::findProtId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_comIP$1 = -12						; size = 4
_cport$2 = -8						; size = 2
_pport$3 = -4						; size = 2
_protocol$ = 8						; size = 4
_port$ = 12						; size = 2
?findProtRport@ComList@@QAEPAUcomiphandle@@HG@Z PROC	; ComList::findProtRport
; _this$ = ecx

; 100  : ComIP *ComList::findProtRport(int protocol, unsigned short port){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	for (ComIP *comIP = iterBegin(protocol); comIP != NULL; comIP = iterGetNext(protocol)){

	mov	eax, DWORD PTR _protocol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterBegin
	mov	DWORD PTR _comIP$1[ebp], eax
	jmp	SHORT $LN4@findProtRp
$LN3@findProtRp:
	mov	ecx, DWORD PTR _protocol$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterGetNext
	mov	DWORD PTR _comIP$1[ebp], eax
$LN4@findProtRp:
	cmp	DWORD PTR _comIP$1[ebp], 0
	je	SHORT $LN2@findProtRp

; 102  : 		unsigned short pport = port;

	mov	dx, WORD PTR _port$[ebp]
	mov	WORD PTR _pport$3[ebp], dx

; 103  : 		unsigned short cport = ComAPIGetRecvPort((ComAPIHandle)comIP);

	mov	eax, DWORD PTR _comIP$1[ebp]
	push	eax
	call	_ComAPIGetRecvPort
	add	esp, 4
	mov	WORD PTR _cport$2[ebp], ax

; 104  : 		if (pport == cport){

	movzx	ecx, WORD PTR _pport$3[ebp]
	movzx	edx, WORD PTR _cport$2[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@findProtRp

; 105  : 			return comIP;

	mov	eax, DWORD PTR _comIP$1[ebp]
	jmp	SHORT $LN5@findProtRp
$LN1@findProtRp:

; 106  : 		}
; 107  : 	}

	jmp	SHORT $LN3@findProtRp
$LN2@findProtRp:

; 108  : 	// not found
; 109  : 	return NULL;

	xor	eax, eax
$LN5@findProtRp:

; 110  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?findProtRport@ComList@@QAEPAUcomiphandle@@HG@Z ENDP	; ComList::findProtRport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_com$3 = -8						; size = 4
_this$ = -4						; size = 4
_protocol$ = 8						; size = 4
?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z PROC	; ComList::iterGetNext
; _this$ = ecx

; 80   : ComIP *ComList::iterGetNext(int protocol){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	// end of list
; 82   : 	if (iterator == comList.end()){

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::end
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@iterGetNex

; 83   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN7@iterGetNex
$LN6@iterGetNex:

; 84   : 	}
; 85   : 	// find next
; 86   : 	// we begin incrementing the old position
; 87   : 	for (++iterator; iterator != comList.end(); ++iterator ){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
	jmp	SHORT $LN5@iterGetNex
$LN4@iterGetNex:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
$LN5@iterGetNex:
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::end
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@iterGetNex

; 88   : 		ComIP *com = *iterator;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _com$3[ebp], ecx

; 89   : 		if (
; 90   : 			(protocol == -1) ||
; 91   : 			(ComAPIGetProtocol((ComAPIHandle)(com)) == protocol)
; 92   : 		){

	cmp	DWORD PTR _protocol$[ebp], -1
	je	SHORT $LN1@iterGetNex
	mov	edx, DWORD PTR _com$3[ebp]
	push	edx
	call	_ComAPIGetProtocol
	add	esp, 4
	cmp	eax, DWORD PTR _protocol$[ebp]
	jne	SHORT $LN2@iterGetNex
$LN1@iterGetNex:

; 93   : 			return *iterator;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN7@iterGetNex
$LN2@iterGetNex:

; 94   : 		}
; 95   : 	}

	jmp	SHORT $LN4@iterGetNex
$LN3@iterGetNex:

; 96   : 	return NULL;

	xor	eax, eax
$LN7@iterGetNex:

; 97   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z ENDP	; ComList::iterGetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_com$3 = -8						; size = 4
_this$ = -4						; size = 4
_protocol$ = 8						; size = 4
?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z PROC		; ComList::iterBegin
; _this$ = ecx

; 62   : ComIP *ComList::iterBegin(int protocol){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	for (

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 64   : 		iterator = comList.begin();
; 65   : 		iterator != comList.end();

	jmp	SHORT $LN5@iterBegin
$LN4@iterBegin:

; 66   : 		++iterator
; 67   : 	){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
$LN5@iterBegin:
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::end
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@iterBegin

; 68   : 		// match
; 69   : 		ComIP *com = *iterator;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _com$3[ebp], edx

; 70   : 		if (
; 71   : 			(protocol == -1) || // matches all
; 72   : 			(ComAPIGetProtocol((ComAPIHandle)(com)) == protocol)
; 73   : 		){

	cmp	DWORD PTR _protocol$[ebp], -1
	je	SHORT $LN1@iterBegin
	mov	eax, DWORD PTR _com$3[ebp]
	push	eax
	call	_ComAPIGetProtocol
	add	esp, 4
	cmp	eax, DWORD PTR _protocol$[ebp]
	jne	SHORT $LN2@iterBegin
$LN1@iterBegin:

; 74   : 			return *iterator;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN6@iterBegin
$LN2@iterBegin:

; 75   : 		}
; 76   : 	}

	jmp	SHORT $LN4@iterBegin
$LN3@iterBegin:

; 77   : 	return NULL;

	xor	eax, eax
$LN6@iterBegin:

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z ENDP		; ComList::iterBegin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_com$ = 8						; size = 4
?removeCom@ComList@@QAEXPAUcomiphandle@@@Z PROC		; ComList::removeCom
; _this$ = ecx

; 56   : void ComList::removeCom(ComIP *com){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	comList.remove(com);

	lea	eax, DWORD PTR _com$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?remove@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::remove

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?removeCom@ComList@@QAEXPAUcomiphandle@@@Z ENDP		; ComList::removeCom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_com$ = 8						; size = 4
?addCom@ComList@@QAEXPAUcomiphandle@@@Z PROC		; ComList::addCom
; _this$ = ecx

; 50   : void ComList::addCom(ComIP *com){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 	// add tail
; 52   : 	comList.push_back(com);

	lea	eax, DWORD PTR _com$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::push_back

; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?addCom@ComList@@QAEXPAUcomiphandle@@@Z ENDP		; ComList::addCom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ComList@@QAE@XZ PROC					; ComList::~ComList
; _this$ = ecx

; 46   : ComList::~ComList(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 	comList.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::clear

; 48   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::~list<comiphandle *,std::allocator<comiphandle *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1ComList@@QAE@XZ ENDP					; ComList::~ComList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ComList@@QAE@XZ PROC					; ComList::ComList
; _this$ = ecx

; 42   : ComList::ComList(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ComList@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::list<comiphandle *,std::allocator<comiphandle *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >

; 43   : 	// do nothing
; 44   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0ComList@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::~list<comiphandle *,std::allocator<comiphandle *> >
__ehhandler$??0ComList@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ComList@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ComList@@QAE@XZ ENDP					; ComList::ComList
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++, COMDAT
; _this$ = ecx

; 372  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 		++(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++

; 374  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 375  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*, COMDAT
; _this$ = ecx

; 362  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEABQAUcomiphandle@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*

; 364  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEAAPAUcomiphandle@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >, COMDAT
; _this$ = ecx

; 339  : 	_List_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >

; 340  : 		{	// construct with null node
; 341  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator!=, COMDAT
; _this$ = ecx

; 302  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 304  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv75 = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() == 0
; 287  : 			|| this->_Getcont() != _Right._Getcont())
; 288  : 			{	// report error
; 289  : 			_DEBUG_ERROR("list iterators incompatible");
; 290  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 291  : 			}
; 292  : 
; 293  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 294  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 295  : 			&& this->_Getcont() == _Right._Getcont());
; 296  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 297  : 
; 298  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv75[ebp]

; 299  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++, COMDAT
; _this$ = ecx

; 224  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 241  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEABQAUcomiphandle@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEABQAUcomiphandle@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*, COMDAT
; _this$ = ecx

; 204  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Myval
	add	esp, 4

; 221  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QBEABQAUcomiphandle@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>

; 188  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >, COMDAT
; _this$ = ecx

; 182  : 		{	// construct with null node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>

; 183  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with null node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 40   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<comiphandle *> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXI@Z PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QBEIXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sub	eax, 1
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Incsize@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXI@Z ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Tidy@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Tidy, COMDAT
; _this$ = ecx

; 1926 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::clear

; 1928 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?remove@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z
_TEXT	SEGMENT
__Perase$1 = -24					; size = 4
__Val$ = -20						; size = 4
__Pprev$2 = -16						; size = 4
__Phead$ = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Val_arg$ = 8						; size = 4
?remove@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::remove, COMDAT
; _this$ = ecx

; 1586 : 		{	// erase each element matching _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1587 : 		const _Ty _Val = _Val_arg;	// in case it's removed along the way

	mov	eax, DWORD PTR __Val_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Val$[ebp], ecx

; 1588 : 		const _Nodeptr _Phead = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Phead$[ebp], eax

; 1589 : 		_Nodeptr _Pnode = this->_Nextnode(_Phead);

	mov	ecx, DWORD PTR __Phead$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN4@remove:

; 1590 : 
; 1591 : 		while (_Pnode != _Phead)

	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR __Phead$[ebp]
	je	$LN5@remove

; 1592 : 			if (_Pnode->_Myval == _Val)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Val$[ebp]
	jne	SHORT $LN2@remove

; 1593 : 				{	// match, remove it
; 1594 : 				const _Nodeptr _Pprev = this->_Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pprev$2[ebp], ecx

; 1595 : 				const _Nodeptr _Perase = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Perase$1[ebp], edx

; 1596 : 				_Pnode = this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1597 : 
; 1598 : 				this->_Nextnode(_Pprev) = _Pnode;

	mov	edx, DWORD PTR __Pprev$2[ebp]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1599 : 				this->_Prevnode(_Pnode) = _Pprev;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR __Pprev$2[ebp]
	mov	DWORD PTR [eax], ecx

; 1600 : 				this->_Freenode(_Perase);

	mov	edx, DWORD PTR __Perase$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Freenode

; 1601 : 
; 1602 : 				--this->_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1603 : 				}
; 1604 : 			else

	jmp	SHORT $LN1@remove
$LN2@remove:

; 1605 : 				_Pnode = this->_Nextnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN1@remove:
	jmp	$LN4@remove
$LN5@remove:

; 1606 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?clear@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::clear, COMDAT
; _this$ = ecx

; 1470 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1471 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1472 : 		this->_Orphan_all();
; 1473 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1474 : 
; 1475 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1476 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 1477 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1478 : 		this->_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1479 : 
; 1480 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@clear

; 1481 : 			{	// delete an element
; 1482 : 			_Pnext = this->_Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$1[ebp], edx

; 1483 : 			this->_Freenode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Freenode

; 1484 : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 1485 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::push_back, COMDAT
; _this$ = ecx

; 1286 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1287 : 		_Insert(_Unchecked_end(), _Val);

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@ABQAUcomiphandle@@@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@U_Iterator_base0@2@@1@ABQAUcomiphandle@@@Z ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Insert<comiphandle * const &>

; 1288 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXABQAUcomiphandle@@@Z ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QBEIXZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size

; 1243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QBEIXZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::end, COMDAT
; _this$ = ecx

; 1124 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1125 : 		return (iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1126 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::begin, COMDAT
; _this$ = ecx

; 1114 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1115 : 		return (iterator(this->_Nextnode(this->_Myhead), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@std@@QAE@PAU?$_List_node@PAUcomiphandle@@PAX@1@PBV?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >::_List_iterator<std::_List_val<std::_List_simple_types<comiphandle *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1116 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@@2@XZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::~list<comiphandle *,std::allocator<comiphandle *> >, COMDAT
; _this$ = ecx

; 1091 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXXZ ; std::list<comiphandle *,std::allocator<comiphandle *> >::_Tidy

; 1093 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::~list<comiphandle *,std::allocator<comiphandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ PROC ; std::list<comiphandle *,std::allocator<comiphandle *> >::list<comiphandle *,std::allocator<comiphandle *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// construct empty list

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAUcomiphandle@@@std@@QAE@XZ ; std::allocator<comiphandle *>::allocator<comiphandle *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_List_buy<comiphandle *,std::allocator<comiphandle *> >

; 900  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$list@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ENDP ; std::list<comiphandle *,std::allocator<comiphandle *> >::list<comiphandle *,std::allocator<comiphandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::~_List_buy<comiphandle *,std::allocator<comiphandle *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::~_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::~_List_buy<comiphandle *,std::allocator<comiphandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z PROC ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@PAUcomiphandle@@@std@@YAPAPAUcomiphandle@@AAPAU1@@Z ; std::addressof<comiphandle *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAUcomiphandle@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAUcomiphandle@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<comiphandle *>

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate

; 862  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode@?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ENDP ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z PROC ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_List_buy<comiphandle *,std::allocator<comiphandle *> >, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >

; 830  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_buy@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z ENDP ; std::_List_buy<comiphandle *,std::allocator<comiphandle *> >::_List_buy<comiphandle *,std::allocator<comiphandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

	cmp	DWORD PTR __Next$[ebp], 0
	jne	SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	mov	DWORD PTR tv132[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	DWORD PTR tv133[ebp], eax
	lea	edx, DWORD PTR __Next$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	call	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	mov	DWORD PTR tv134[ebp], eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	DWORD PTR tv135[ebp], eax
	lea	eax, DWORD PTR __Prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	call	??$construct@PAU?$_List_node@PAUcomiphandle@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::construct<std::_List_node<comiphandle *,void *> *,std::_List_node<comiphandle *,void *> * &>
	jmp	SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate

; 802  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 803  : 		_CATCH_END

	mov	eax, $LN8@Buynode0
	ret	0
$LN5@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buynode0
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 777  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 		this->_Getal().destroy(
; 779  : 			_STD addressof(this->_Nextnode(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>

; 780  : 		this->_Getal().destroy(
; 781  : 			_STD addressof(this->_Prevnode(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAPAU?$_List_node@PAUcomiphandle@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<comiphandle *,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_List_node@PAUcomiphandle@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAUcomiphandle@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::destroy<std::_List_node<comiphandle *,void *> *>

; 782  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate

; 783  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 772  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buynode0

; 774  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::~_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >, COMDAT
; _this$ = ecx

; 712  : 		{	// destroy head node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Freeheadnode

; 714  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::~_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >, COMDAT
; _this$ = ecx

; 706  : 	_List_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<comiphandle *> >::_List_val<std::_List_simple_types<comiphandle *> >

; 707  : 		{	// construct head node, allocator from _Al
; 708  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 709  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_alloc@$0A@U?$_List_base_types@PAUcomiphandle@@V?$allocator@PAUcomiphandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUcomiphandle@@@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >::_List_alloc<0,std::_List_base_types<comiphandle *,std::allocator<comiphandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 548  : 		}

	pop	ebp
	ret	0
?_Myval@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAUcomiphandle@@PAU?$_List_node@PAUcomiphandle@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

	push	ebp
	mov	ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 543  : 		}

	pop	ebp
	ret	0
?_Prevnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

	push	ebp
	mov	ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

	pop	ebp
	ret	0
?_Nextnode@?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@SAAAPAU?$_List_node@PAUcomiphandle@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<comiphandle *> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<comiphandle *> >::_List_val<std::_List_simple_types<comiphandle *> >, COMDAT
; _this$ = ecx

; 529  : 	_List_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 		{	// initialize data
; 531  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 532  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 533  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_val@U?$_List_simple_types@PAUcomiphandle@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<comiphandle *> >::_List_val<std::_List_simple_types<comiphandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ; std::allocator<std::_List_node<comiphandle *,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<comiphandle *,void *> >::allocator<std::_List_node<comiphandle *,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<comiphandle *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<comiphandle *,void *> >::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<comiphandle *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 357913941				; 15555555H

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@YAPAU?$_List_node@PAUcomiphandle@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<comiphandle *,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAEXPAU?$_List_node@PAUcomiphandle@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<comiphandle *,void *> >::allocator<std::_List_node<comiphandle *,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@PAUcomiphandle@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<comiphandle *,void *> >::allocator<std::_List_node<comiphandle *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAUcomiphandle@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAUcomiphandle@@@std@@QAE@XZ PROC	; std::allocator<comiphandle *>::allocator<comiphandle *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAUcomiphandle@@@std@@QAE@XZ ENDP	; std::allocator<comiphandle *>::allocator<comiphandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_protocol$ = 8						; size = 4
_comListFindDangling PROC

; 36   : ComIP *comListFindDangling(int protocol){

	push	ebp
	mov	ebp, esp

; 37   : 	return GlobalComList.findProtDangling(protocol);

	mov	eax, DWORD PTR _protocol$[ebp]
	push	eax
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?findProtDangling@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::findProtDangling

; 38   : }

	pop	ebp
	ret	0
_comListFindDangling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_protocol$ = 8						; size = 4
_id$ = 12						; size = 4
_comListFindProtocolId PROC

; 32   : ComIP *comListFindProtocolId(int protocol, unsigned long id){

	push	ebp
	mov	ebp, esp

; 33   : 	return GlobalComList.findProtId(protocol, id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _protocol$[ebp]
	push	ecx
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?findProtId@ComList@@QAEPAUcomiphandle@@HK@Z ; ComList::findProtId

; 34   : }

	pop	ebp
	ret	0
_comListFindProtocolId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_protocol$ = 8						; size = 4
_rport$ = 12						; size = 2
_comListFindProtocolRport PROC

; 28   : ComIP *comListFindProtocolRport(int protocol, unsigned short rport){

	push	ebp
	mov	ebp, esp

; 29   : 	return GlobalComList.findProtRport(protocol, rport);

	movzx	eax, WORD PTR _rport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _protocol$[ebp]
	push	ecx
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?findProtRport@ComList@@QAEPAUcomiphandle@@HG@Z ; ComList::findProtRport

; 30   : }

	pop	ebp
	ret	0
_comListFindProtocolRport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_protocol$ = 8						; size = 4
_comListGetNextP PROC

; 24   : ComIP *comListGetNextP(int protocol){

	push	ebp
	mov	ebp, esp

; 25   : 	return GlobalComList.iterGetNext(protocol);

	mov	eax, DWORD PTR _protocol$[ebp]
	push	eax
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?iterGetNext@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterGetNext

; 26   : }

	pop	ebp
	ret	0
_comListGetNextP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_protocol$ = 8						; size = 4
_comListGetFirstP PROC

; 20   : ComIP *comListGetFirstP(int protocol){

	push	ebp
	mov	ebp, esp

; 21   : 	return GlobalComList.iterBegin(protocol);

	mov	eax, DWORD PTR _protocol$[ebp]
	push	eax
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?iterBegin@ComList@@QAEPAUcomiphandle@@H@Z ; ComList::iterBegin

; 22   : }

	pop	ebp
	ret	0
_comListGetFirstP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_comIP$ = 8						; size = 4
_comListRemove PROC

; 16   : void comListRemove(ComIP *comIP){

	push	ebp
	mov	ebp, esp

; 17   : 	GlobalComList.removeCom(comIP);

	mov	eax, DWORD PTR _comIP$[ebp]
	push	eax
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?removeCom@ComList@@QAEXPAUcomiphandle@@@Z ; ComList::removeCom

; 18   : }

	pop	ebp
	ret	0
_comListRemove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\comlist.cpp
_TEXT	SEGMENT
_comIP$ = 8						; size = 4
_comListAdd PROC

; 12   : void comListAdd(ComIP *comIP){

	push	ebp
	mov	ebp, esp

; 13   : 	GlobalComList.addCom(comIP);

	mov	eax, DWORD PTR _comIP$[ebp]
	push	eax
	mov	ecx, OFFSET ?GlobalComList@@3VComList@@A ; GlobalComList
	call	?addCom@ComList@@QAEXPAUcomiphandle@@@Z	; ComList::addCom

; 14   : }

	pop	ebp
	ret	0
_comListAdd ENDP
_TEXT	ENDS
END
