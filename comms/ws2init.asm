; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\comms\ws2init.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WS2Connections
PUBLIC	_hWinSockDLL
PUBLIC	_CAPI_accept
PUBLIC	_CAPI_bind
PUBLIC	_CAPI_closesocket
PUBLIC	_CAPI_connect
PUBLIC	_CAPI_ioctlsocket
PUBLIC	_CAPI_getsockopt
PUBLIC	_CAPI_htonl
PUBLIC	_CAPI_htons
PUBLIC	_CAPI_inet_addr
PUBLIC	_CAPI_inet_ntoa
PUBLIC	_CAPI_listen
PUBLIC	_CAPI_ntohl
PUBLIC	_CAPI_ntohs
PUBLIC	_CAPI_recv
PUBLIC	_CAPI_recvfrom
PUBLIC	_CAPI_select
PUBLIC	_CAPI_send
PUBLIC	_CAPI_sendto
PUBLIC	_CAPI_setsockopt
PUBLIC	_CAPI_shutdown
PUBLIC	_CAPI_socket
PUBLIC	_CAPI_gethostbyaddr
PUBLIC	_CAPI_gethostbyname
PUBLIC	_CAPI_gethostname
PUBLIC	_CAPI_getsockname
PUBLIC	_CAPI_WSAStartup
PUBLIC	_CAPI_WSACleanup
PUBLIC	_CAPI_WSASetLastError
PUBLIC	_CAPI_WSAGetLastError
_BSS	SEGMENT
_WS2Connections DD 01H DUP (?)
_hWinSockDLL DD	01H DUP (?)
_CAPI_accept DD	01H DUP (?)
_CAPI_bind DD	01H DUP (?)
_CAPI_closesocket DD 01H DUP (?)
_CAPI_connect DD 01H DUP (?)
_CAPI_ioctlsocket DD 01H DUP (?)
_CAPI_getsockopt DD 01H DUP (?)
_CAPI_htonl DD	01H DUP (?)
_CAPI_htons DD	01H DUP (?)
_CAPI_inet_addr DD 01H DUP (?)
_CAPI_inet_ntoa DD 01H DUP (?)
_CAPI_listen DD	01H DUP (?)
_CAPI_ntohl DD	01H DUP (?)
_CAPI_ntohs DD	01H DUP (?)
_CAPI_recv DD	01H DUP (?)
_CAPI_recvfrom DD 01H DUP (?)
_CAPI_select DD	01H DUP (?)
_CAPI_send DD	01H DUP (?)
_CAPI_sendto DD	01H DUP (?)
_CAPI_setsockopt DD 01H DUP (?)
_CAPI_shutdown DD 01H DUP (?)
_CAPI_socket DD	01H DUP (?)
_CAPI_gethostbyaddr DD 01H DUP (?)
_CAPI_gethostbyname DD 01H DUP (?)
_CAPI_gethostname DD 01H DUP (?)
_CAPI_getsockname DD 01H DUP (?)
_CAPI_WSAStartup DD 01H DUP (?)
_CAPI_WSACleanup DD 01H DUP (?)
_CAPI_WSASetLastError DD 01H DUP (?)
_CAPI_WSAGetLastError DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_InitWS2
PUBLIC	??_C@_0M@EODOLPKJ@WSOCK32?4DLL?$AA@		; `string'
PUBLIC	??_C@_06MPKMECK@accept?$AA@			; `string'
PUBLIC	??_C@_04NPNJNMMP@bind?$AA@			; `string'
PUBLIC	??_C@_0M@ODDJDCDK@closesocket?$AA@		; `string'
PUBLIC	??_C@_07KAIBNCHO@connect?$AA@			; `string'
PUBLIC	??_C@_0M@PBPOCKDG@ioctlsocket?$AA@		; `string'
PUBLIC	??_C@_0L@DEFCDCGF@getsockopt?$AA@		; `string'
PUBLIC	??_C@_05EOIMLALA@htonl?$AA@			; `string'
PUBLIC	??_C@_05IDNGLOCO@htons?$AA@			; `string'
PUBLIC	??_C@_09JKBDEEOB@inet_addr?$AA@			; `string'
PUBLIC	??_C@_09CFOACKNM@inet_ntoa?$AA@			; `string'
PUBLIC	??_C@_06OODDLKLE@listen?$AA@			; `string'
PUBLIC	??_C@_05JMFICPBP@ntohl?$AA@			; `string'
PUBLIC	??_C@_05FBACCBIB@ntohs?$AA@			; `string'
PUBLIC	??_C@_04IFMDBHHF@recv?$AA@			; `string'
PUBLIC	??_C@_08HMBBGFHE@recvfrom?$AA@			; `string'
PUBLIC	??_C@_06LGNCCACI@select?$AA@			; `string'
PUBLIC	??_C@_04MIIPNNEF@send?$AA@			; `string'
PUBLIC	??_C@_06MEPBGKEC@sendto?$AA@			; `string'
PUBLIC	??_C@_0L@CKHNIFCM@setsockopt?$AA@		; `string'
PUBLIC	??_C@_08FIACBBDA@shutdown?$AA@			; `string'
PUBLIC	??_C@_06HBELJPBO@socket?$AA@			; `string'
PUBLIC	??_C@_0O@KKMOHPAJ@gethostbyaddr?$AA@		; `string'
PUBLIC	??_C@_0O@BFBCKHPD@gethostbyname?$AA@		; `string'
PUBLIC	??_C@_0M@FIJPCJJO@gethostname?$AA@		; `string'
PUBLIC	??_C@_0M@ODFENJLC@getsockname?$AA@		; `string'
PUBLIC	??_C@_0L@EEFLCHHA@WSAStartup?$AA@		; `string'
PUBLIC	??_C@_0L@OPKENMEN@WSACleanup?$AA@		; `string'
PUBLIC	??_C@_0BA@JJKJLKCN@WSASetLastError?$AA@		; `string'
PUBLIC	??_C@_0BA@ONBHHGGB@WSAGetLastError?$AA@		; `string'
EXTRN	_strcpy:PROC
EXTRN	__imp__SearchPathA@24:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_ComAPILastError:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0BA@ONBHHGGB@WSAGetLastError?$AA@
CONST	SEGMENT
??_C@_0BA@ONBHHGGB@WSAGetLastError?$AA@ DB 'WSAGetLastError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JJKJLKCN@WSASetLastError?$AA@
CONST	SEGMENT
??_C@_0BA@JJKJLKCN@WSASetLastError?$AA@ DB 'WSASetLastError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPKENMEN@WSACleanup?$AA@
CONST	SEGMENT
??_C@_0L@OPKENMEN@WSACleanup?$AA@ DB 'WSACleanup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEFLCHHA@WSAStartup?$AA@
CONST	SEGMENT
??_C@_0L@EEFLCHHA@WSAStartup?$AA@ DB 'WSAStartup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODFENJLC@getsockname?$AA@
CONST	SEGMENT
??_C@_0M@ODFENJLC@getsockname?$AA@ DB 'getsockname', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FIJPCJJO@gethostname?$AA@
CONST	SEGMENT
??_C@_0M@FIJPCJJO@gethostname?$AA@ DB 'gethostname', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BFBCKHPD@gethostbyname?$AA@
CONST	SEGMENT
??_C@_0O@BFBCKHPD@gethostbyname?$AA@ DB 'gethostbyname', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KKMOHPAJ@gethostbyaddr?$AA@
CONST	SEGMENT
??_C@_0O@KKMOHPAJ@gethostbyaddr?$AA@ DB 'gethostbyaddr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBELJPBO@socket?$AA@
CONST	SEGMENT
??_C@_06HBELJPBO@socket?$AA@ DB 'socket', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FIACBBDA@shutdown?$AA@
CONST	SEGMENT
??_C@_08FIACBBDA@shutdown?$AA@ DB 'shutdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CKHNIFCM@setsockopt?$AA@
CONST	SEGMENT
??_C@_0L@CKHNIFCM@setsockopt?$AA@ DB 'setsockopt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEPBGKEC@sendto?$AA@
CONST	SEGMENT
??_C@_06MEPBGKEC@sendto?$AA@ DB 'sendto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIIPNNEF@send?$AA@
CONST	SEGMENT
??_C@_04MIIPNNEF@send?$AA@ DB 'send', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGNCCACI@select?$AA@
CONST	SEGMENT
??_C@_06LGNCCACI@select?$AA@ DB 'select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMBBGFHE@recvfrom?$AA@
CONST	SEGMENT
??_C@_08HMBBGFHE@recvfrom?$AA@ DB 'recvfrom', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFMDBHHF@recv?$AA@
CONST	SEGMENT
??_C@_04IFMDBHHF@recv?$AA@ DB 'recv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBACCBIB@ntohs?$AA@
CONST	SEGMENT
??_C@_05FBACCBIB@ntohs?$AA@ DB 'ntohs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMFICPBP@ntohl?$AA@
CONST	SEGMENT
??_C@_05JMFICPBP@ntohl?$AA@ DB 'ntohl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OODDLKLE@listen?$AA@
CONST	SEGMENT
??_C@_06OODDLKLE@listen?$AA@ DB 'listen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CFOACKNM@inet_ntoa?$AA@
CONST	SEGMENT
??_C@_09CFOACKNM@inet_ntoa?$AA@ DB 'inet_ntoa', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKBDEEOB@inet_addr?$AA@
CONST	SEGMENT
??_C@_09JKBDEEOB@inet_addr?$AA@ DB 'inet_addr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDNGLOCO@htons?$AA@
CONST	SEGMENT
??_C@_05IDNGLOCO@htons?$AA@ DB 'htons', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EOIMLALA@htonl?$AA@
CONST	SEGMENT
??_C@_05EOIMLALA@htonl?$AA@ DB 'htonl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEFCDCGF@getsockopt?$AA@
CONST	SEGMENT
??_C@_0L@DEFCDCGF@getsockopt?$AA@ DB 'getsockopt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBPOCKDG@ioctlsocket?$AA@
CONST	SEGMENT
??_C@_0M@PBPOCKDG@ioctlsocket?$AA@ DB 'ioctlsocket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAIBNCHO@connect?$AA@
CONST	SEGMENT
??_C@_07KAIBNCHO@connect?$AA@ DB 'connect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODDJDCDK@closesocket?$AA@
CONST	SEGMENT
??_C@_0M@ODDJDCDK@closesocket?$AA@ DB 'closesocket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NPNJNMMP@bind?$AA@
CONST	SEGMENT
??_C@_04NPNJNMMP@bind?$AA@ DB 'bind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPKMECK@accept?$AA@
CONST	SEGMENT
??_C@_06MPKMECK@accept?$AA@ DB 'accept', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EODOLPKJ@WSOCK32?4DLL?$AA@
CONST	SEGMENT
??_C@_0M@EODOLPKJ@WSOCK32?4DLL?$AA@ DB 'WSOCK32.DLL', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\ws2init.c
_TEXT	SEGMENT
_buflen$ = -44						; size = 4
_wsaStatus$ = -40					; size = 4
_Major$ = -36						; size = 4
_Minor$ = -32						; size = 4
_hWinSockDLL$ = -28					; size = 4
_dllname$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_wsaData$ = 8						; size = 4
_InitWS2 PROC

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 69   :   int wsaStatus;
; 70   :   int buflen;
; 71   :   HINSTANCE  hWinSockDLL = 0;

	mov	DWORD PTR _hWinSockDLL$[ebp], 0

; 72   :   char  dllname[20];
; 73   :   int Major, Minor;
; 74   : 
; 75   :    strcpy(dllname,"WSOCK32.DLL");

	push	OFFSET ??_C@_0M@EODOLPKJ@WSOCK32?4DLL?$AA@
	lea	eax, DWORD PTR _dllname$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 76   :    Major = 1;

	mov	DWORD PTR _Major$[ebp], 1

; 77   :    Minor = 1;

	mov	DWORD PTR _Minor$[ebp], 1

; 78   : 
; 79   : if(!WS2Connections)  /* No successfull connection yet? */

	cmp	DWORD PTR _WS2Connections, 0
	jne	$LN8@InitWS2

; 80   : {
; 81   :  buflen = SearchPath(NULL, dllname, NULL,0,NULL,NULL);	

	push	0
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _dllname$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__SearchPathA@24
	mov	DWORD PTR _buflen$[ebp], eax

; 82   :  if(buflen == 0 )

	cmp	DWORD PTR _buflen$[ebp], 0
	jne	SHORT $LN7@InitWS2

; 83   :  {
; 84   :     ComAPILastError = COMAPI_WINSOCKDLL_ERROR;

	mov	DWORD PTR _ComAPILastError, -14		; fffffff2H

; 85   :     return 0;

	xor	eax, eax
	jmp	$LN9@InitWS2
$LN7@InitWS2:

; 86   :  }
; 87   : 
; 88   :  #ifdef LOAD_DLLS
; 89   :  hWinSockDLL = LoadLibrary(dllname);

	lea	edx, DWORD PTR _dllname$[ebp]
	push	edx
	call	DWORD PTR __imp__LoadLibraryA@4
	mov	DWORD PTR _hWinSockDLL$[ebp], eax

; 90   : 
; 91   :  if (hWinSockDLL == NULL) {

	cmp	DWORD PTR _hWinSockDLL$[ebp], 0
	jne	SHORT $LN6@InitWS2

; 92   :     ComAPILastError = COMAPI_WINSOCKDLL_ERROR;

	mov	DWORD PTR _ComAPILastError, -14		; fffffff2H

; 93   :     return 0;

	xor	eax, eax
	jmp	$LN9@InitWS2
$LN6@InitWS2:

; 94   :  }
; 95   :  #endif
; 96   :  
; 97   :  if(!CAPI_GetProcAddresses(hWinSockDLL)) {

	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	_CAPI_GetProcAddresses
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@InitWS2

; 98   : #ifdef LOAD_DLLS
; 99   :      FreeLibrary(hWinSockDLL);

	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__FreeLibrary@4

; 100  :      ComAPILastError = COMAPI_WINSOCKDLL_ERROR;

	mov	DWORD PTR _ComAPILastError, -14		; fffffff2H

; 101  : #endif
; 102  :      return 0;

	xor	eax, eax
	jmp	SHORT $LN9@InitWS2
$LN5@InitWS2:

; 103  :  }
; 104  :  
; 105  : 
; 106  : 
; 107  : 
; 108  :   if(wsaStatus=CAPI_WSAStartup(MAKEWORD(Major,Minor), wsaData))

	mov	edx, DWORD PTR _wsaData$[ebp]
	push	edx
	mov	eax, DWORD PTR _Major$[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, al
	mov	edx, DWORD PTR _Minor$[ebp]
	and	edx, 255				; 000000ffH
	movzx	eax, dl
	shl	eax, 8
	or	ecx, eax
	push	ecx
	call	DWORD PTR _CAPI_WSAStartup
	mov	DWORD PTR _wsaStatus$[ebp], eax
	cmp	DWORD PTR _wsaStatus$[ebp], 0
	je	SHORT $LN4@InitWS2

; 109  :     {
; 110  :       /*
; 111  :         MessageBox(GlobalFrameWindow,
; 112  :         "Could not find high enough version of WinSock",
; 113  :         "Error", MB_OK | MB_ICONSTOP | MB_SETFOREGROUND);
; 114  :         */
; 115  :       return 0;

	xor	eax, eax
	jmp	SHORT $LN9@InitWS2

; 116  :     }
; 117  :   else

	jmp	SHORT $LN8@InitWS2
$LN4@InitWS2:

; 118  :     {
; 119  :       /* Now confirm that the WinSock 2 DLL supports the exact version */
; 120  :       /* we want. If not, make sure to call WSACleanup(). */
; 121  :       if (LOBYTE(wsaData->wVersion) != Major ||
; 122  :           HIBYTE(wsaData->wVersion) != Minor)

	mov	ecx, DWORD PTR _wsaData$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, 255				; 000000ffH
	movzx	eax, dl
	cmp	eax, DWORD PTR _Major$[ebp]
	jne	SHORT $LN1@InitWS2
	mov	ecx, DWORD PTR _wsaData$[ebp]
	movzx	edx, WORD PTR [ecx]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	movzx	eax, dl
	cmp	eax, DWORD PTR _Minor$[ebp]
	je	SHORT $LN8@InitWS2
$LN1@InitWS2:

; 123  :         {
; 124  :           /*
; 125  :             MessageBox(GlobalFrameWindow,
; 126  :             "Could not find the correct version of WinSock",
; 127  :             "Error",  MB_OK | MB_ICONSTOP | MB_SETFOREGROUND);
; 128  :             */
; 129  :           CAPI_WSACleanup();

	call	DWORD PTR _CAPI_WSACleanup

; 130  :           return 0;

	xor	eax, eax
	jmp	SHORT $LN9@InitWS2
$LN8@InitWS2:

; 131  :         }
; 132  : 
; 133  :     }
; 134  : }
; 135  : 
; 136  : /* if we get here , either we just need to increment counter
; 137  :    or we execute the first successful WSAStartup */
; 138  : 
; 139  : WS2Connections++;

	mov	ecx, DWORD PTR _WS2Connections
	add	ecx, 1
	mov	DWORD PTR _WS2Connections, ecx

; 140  : 
; 141  : 
; 142  : return 1;

	mov	eax, 1
$LN9@InitWS2:

; 143  : 
; 144  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_InitWS2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\ws2init.c
_TEXT	SEGMENT
_hWinSockDLL$ = 8					; size = 4
_CAPI_GetProcAddresses PROC

; 148  : {

	push	ebp
	mov	ebp, esp

; 149  : 
; 150  : #ifdef LOAD_DLLS
; 151  : 
; 152  : CAPI_accept            = (WSFN_accept) GetProcAddress(hWinSockDLL,"accept");

	push	OFFSET ??_C@_06MPKMECK@accept?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_accept, eax

; 153  : if (CAPI_accept == NULL ) return 0;

	cmp	DWORD PTR _CAPI_accept, 0
	jne	SHORT $LN29@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN29@CAPI_GetPr:

; 154  : CAPI_bind              = (WSFN_bind)GetProcAddress(hWinSockDLL,"bind");

	push	OFFSET ??_C@_04NPNJNMMP@bind?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_bind, eax

; 155  : if (CAPI_bind == NULL )  return 0;

	cmp	DWORD PTR _CAPI_bind, 0
	jne	SHORT $LN28@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN28@CAPI_GetPr:

; 156  : 
; 157  : CAPI_closesocket       = (WSFN_closesocket)GetProcAddress(hWinSockDLL,"closesocket");

	push	OFFSET ??_C@_0M@ODDJDCDK@closesocket?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_closesocket, eax

; 158  : if (CAPI_closesocket == NULL )  return 0;

	cmp	DWORD PTR _CAPI_closesocket, 0
	jne	SHORT $LN27@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN27@CAPI_GetPr:

; 159  : 
; 160  : CAPI_connect           = (WSFN_connect)GetProcAddress(hWinSockDLL,"connect");;

	push	OFFSET ??_C@_07KAIBNCHO@connect?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_connect, eax

; 161  : if (CAPI_connect == NULL )  return 0;

	cmp	DWORD PTR _CAPI_connect, 0
	jne	SHORT $LN26@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN26@CAPI_GetPr:

; 162  : 
; 163  : CAPI_ioctlsocket       = (WSFN_ioctlsocket)GetProcAddress(hWinSockDLL,"ioctlsocket");

	push	OFFSET ??_C@_0M@PBPOCKDG@ioctlsocket?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_ioctlsocket, eax

; 164  : if (CAPI_ioctlsocket == NULL )  return 0;

	cmp	DWORD PTR _CAPI_ioctlsocket, 0
	jne	SHORT $LN25@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN25@CAPI_GetPr:

; 165  : 
; 166  : CAPI_getsockopt        = (WSFN_getsockopt)GetProcAddress(hWinSockDLL,"getsockopt");

	push	OFFSET ??_C@_0L@DEFCDCGF@getsockopt?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_getsockopt, eax

; 167  : if (CAPI_getsockopt == NULL )  return 0;

	cmp	DWORD PTR _CAPI_getsockopt, 0
	jne	SHORT $LN24@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN24@CAPI_GetPr:

; 168  : 
; 169  : CAPI_htonl             = (WSFN_htonl)GetProcAddress(hWinSockDLL,"htonl");

	push	OFFSET ??_C@_05EOIMLALA@htonl?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_htonl, eax

; 170  : if (CAPI_htonl == NULL )  return 0;

	cmp	DWORD PTR _CAPI_htonl, 0
	jne	SHORT $LN23@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN23@CAPI_GetPr:

; 171  : 
; 172  : CAPI_htons             = (WSFN_htons)GetProcAddress(hWinSockDLL,"htons");

	push	OFFSET ??_C@_05IDNGLOCO@htons?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_htons, eax

; 173  : if (CAPI_htons == NULL )  return 0;

	cmp	DWORD PTR _CAPI_htons, 0
	jne	SHORT $LN22@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN22@CAPI_GetPr:

; 174  : 
; 175  : CAPI_inet_addr         = (WSFN_inet_addr)GetProcAddress(hWinSockDLL,"inet_addr");

	push	OFFSET ??_C@_09JKBDEEOB@inet_addr?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_inet_addr, eax

; 176  : if (CAPI_inet_addr == NULL )  return 0;

	cmp	DWORD PTR _CAPI_inet_addr, 0
	jne	SHORT $LN21@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN21@CAPI_GetPr:

; 177  : 
; 178  : CAPI_inet_ntoa         = (WSFN_inet_ntoa)GetProcAddress(hWinSockDLL,"inet_ntoa");

	push	OFFSET ??_C@_09CFOACKNM@inet_ntoa?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_inet_ntoa, eax

; 179  : if (CAPI_inet_ntoa == NULL )  return 0;

	cmp	DWORD PTR _CAPI_inet_ntoa, 0
	jne	SHORT $LN20@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN20@CAPI_GetPr:

; 180  : 
; 181  : CAPI_listen            = (WSFN_listen)GetProcAddress(hWinSockDLL,"listen");

	push	OFFSET ??_C@_06OODDLKLE@listen?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_listen, eax

; 182  : if (CAPI_listen == NULL )  return 0;

	cmp	DWORD PTR _CAPI_listen, 0
	jne	SHORT $LN19@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN19@CAPI_GetPr:

; 183  : 
; 184  : CAPI_ntohl             = (WSFN_ntohl)GetProcAddress(hWinSockDLL,"ntohl");

	push	OFFSET ??_C@_05JMFICPBP@ntohl?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_ntohl, eax

; 185  : if (CAPI_ntohl == NULL )  return 0;

	cmp	DWORD PTR _CAPI_ntohl, 0
	jne	SHORT $LN18@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN18@CAPI_GetPr:

; 186  : 
; 187  : CAPI_ntohs             = (WSFN_ntohs)GetProcAddress(hWinSockDLL,"ntohs");

	push	OFFSET ??_C@_05FBACCBIB@ntohs?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_ntohs, eax

; 188  : if (CAPI_ntohs == NULL )  return 0;

	cmp	DWORD PTR _CAPI_ntohs, 0
	jne	SHORT $LN17@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN17@CAPI_GetPr:

; 189  : 
; 190  : CAPI_recv              = (WSFN_recv)GetProcAddress(hWinSockDLL,"recv");

	push	OFFSET ??_C@_04IFMDBHHF@recv?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_recv, eax

; 191  : if (CAPI_recv == NULL )  return 0;

	cmp	DWORD PTR _CAPI_recv, 0
	jne	SHORT $LN16@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN16@CAPI_GetPr:

; 192  : 
; 193  : CAPI_recvfrom          = (WSFN_recvfrom)GetProcAddress(hWinSockDLL,"recvfrom");

	push	OFFSET ??_C@_08HMBBGFHE@recvfrom?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_recvfrom, eax

; 194  : if (CAPI_recvfrom == NULL )  return 0;

	cmp	DWORD PTR _CAPI_recvfrom, 0
	jne	SHORT $LN15@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN15@CAPI_GetPr:

; 195  : 
; 196  : CAPI_select            = (WSFN_select)GetProcAddress(hWinSockDLL,"select");

	push	OFFSET ??_C@_06LGNCCACI@select?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_select, eax

; 197  : if (CAPI_select == NULL )  return 0;

	cmp	DWORD PTR _CAPI_select, 0
	jne	SHORT $LN14@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN14@CAPI_GetPr:

; 198  : 
; 199  : CAPI_send              = (WSFN_send)GetProcAddress(hWinSockDLL,"send");

	push	OFFSET ??_C@_04MIIPNNEF@send?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_send, eax

; 200  : if (CAPI_send == NULL )  return 0;

	cmp	DWORD PTR _CAPI_send, 0
	jne	SHORT $LN13@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN13@CAPI_GetPr:

; 201  : 
; 202  : CAPI_sendto            = (WSFN_sendto)GetProcAddress(hWinSockDLL,"sendto");

	push	OFFSET ??_C@_06MEPBGKEC@sendto?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_sendto, eax

; 203  : if (CAPI_sendto == NULL )  return 0;

	cmp	DWORD PTR _CAPI_sendto, 0
	jne	SHORT $LN12@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN12@CAPI_GetPr:

; 204  : 
; 205  : CAPI_setsockopt        = (WSFN_setsockopt)GetProcAddress(hWinSockDLL,"setsockopt");

	push	OFFSET ??_C@_0L@CKHNIFCM@setsockopt?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_setsockopt, eax

; 206  : if (CAPI_setsockopt == NULL )  return 0;

	cmp	DWORD PTR _CAPI_setsockopt, 0
	jne	SHORT $LN11@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN11@CAPI_GetPr:

; 207  : 
; 208  : CAPI_shutdown          = (WSFN_shutdown)GetProcAddress(hWinSockDLL,"shutdown");

	push	OFFSET ??_C@_08FIACBBDA@shutdown?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_shutdown, eax

; 209  : if (CAPI_shutdown == NULL )  return 0;

	cmp	DWORD PTR _CAPI_shutdown, 0
	jne	SHORT $LN10@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN10@CAPI_GetPr:

; 210  : 
; 211  : CAPI_socket            = (WSFN_socket)GetProcAddress(hWinSockDLL,"socket");

	push	OFFSET ??_C@_06HBELJPBO@socket?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_socket, eax

; 212  : if (CAPI_socket == NULL )  return 0;

	cmp	DWORD PTR _CAPI_socket, 0
	jne	SHORT $LN9@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN9@CAPI_GetPr:

; 213  : 
; 214  : CAPI_gethostbyaddr     = (WSFN_gethostbyaddr)GetProcAddress(hWinSockDLL,"gethostbyaddr");

	push	OFFSET ??_C@_0O@KKMOHPAJ@gethostbyaddr?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_gethostbyaddr, eax

; 215  : if (CAPI_gethostbyaddr == NULL )  return 0;

	cmp	DWORD PTR _CAPI_gethostbyaddr, 0
	jne	SHORT $LN8@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN8@CAPI_GetPr:

; 216  : 
; 217  : CAPI_gethostbyname     = (WSFN_gethostbyname)GetProcAddress(hWinSockDLL,"gethostbyname"); 

	push	OFFSET ??_C@_0O@BFBCKHPD@gethostbyname?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_gethostbyname, eax

; 218  : if (CAPI_gethostbyname == NULL )  return 0;

	cmp	DWORD PTR _CAPI_gethostbyname, 0
	jne	SHORT $LN7@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN7@CAPI_GetPr:

; 219  : 
; 220  : CAPI_gethostname       = (WSFN_gethostname)GetProcAddress(hWinSockDLL,"gethostname");

	push	OFFSET ??_C@_0M@FIJPCJJO@gethostname?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_gethostname, eax

; 221  : if (CAPI_gethostname == NULL )  return 0;

	cmp	DWORD PTR _CAPI_gethostname, 0
	jne	SHORT $LN6@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN6@CAPI_GetPr:

; 222  : 
; 223  : CAPI_getsockname       = (WSFN_getsockname)GetProcAddress(hWinSockDLL,"getsockname");

	push	OFFSET ??_C@_0M@ODFENJLC@getsockname?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_getsockname, eax

; 224  : if (CAPI_getsockname == NULL )  return 0;

	cmp	DWORD PTR _CAPI_getsockname, 0
	jne	SHORT $LN5@CAPI_GetPr
	xor	eax, eax
	jmp	$LN30@CAPI_GetPr
$LN5@CAPI_GetPr:

; 225  : 
; 226  : 
; 227  : CAPI_WSAStartup        = (WSFN_WSAStartup)GetProcAddress(hWinSockDLL,"WSAStartup");

	push	OFFSET ??_C@_0L@EEFLCHHA@WSAStartup?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_WSAStartup, eax

; 228  : if (CAPI_WSAStartup == NULL )  return 0;

	cmp	DWORD PTR _CAPI_WSAStartup, 0
	jne	SHORT $LN4@CAPI_GetPr
	xor	eax, eax
	jmp	SHORT $LN30@CAPI_GetPr
$LN4@CAPI_GetPr:

; 229  : 
; 230  : CAPI_WSACleanup        = (WSFN_WSACleanup )GetProcAddress(hWinSockDLL,"WSACleanup");

	push	OFFSET ??_C@_0L@OPKENMEN@WSACleanup?$AA@
	mov	edx, DWORD PTR _hWinSockDLL$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_WSACleanup, eax

; 231  : if (CAPI_WSACleanup == NULL )  return 0;

	cmp	DWORD PTR _CAPI_WSACleanup, 0
	jne	SHORT $LN3@CAPI_GetPr
	xor	eax, eax
	jmp	SHORT $LN30@CAPI_GetPr
$LN3@CAPI_GetPr:

; 232  : 
; 233  : CAPI_WSASetLastError   = (WSFN_WSASetLastError)GetProcAddress(hWinSockDLL,"WSASetLastError");

	push	OFFSET ??_C@_0BA@JJKJLKCN@WSASetLastError?$AA@
	mov	eax, DWORD PTR _hWinSockDLL$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_WSASetLastError, eax

; 234  : if (CAPI_WSASetLastError == NULL )  return 0;

	cmp	DWORD PTR _CAPI_WSASetLastError, 0
	jne	SHORT $LN2@CAPI_GetPr
	xor	eax, eax
	jmp	SHORT $LN30@CAPI_GetPr
$LN2@CAPI_GetPr:

; 235  : 
; 236  : CAPI_WSAGetLastError   = (WSFN_WSAGetLastError)GetProcAddress(hWinSockDLL,"WSAGetLastError"); 

	push	OFFSET ??_C@_0BA@ONBHHGGB@WSAGetLastError?$AA@
	mov	ecx, DWORD PTR _hWinSockDLL$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _CAPI_WSAGetLastError, eax

; 237  : if (CAPI_WSAGetLastError == NULL )  return 0;

	cmp	DWORD PTR _CAPI_WSAGetLastError, 0
	jne	SHORT $LN1@CAPI_GetPr
	xor	eax, eax
	jmp	SHORT $LN30@CAPI_GetPr
$LN1@CAPI_GetPr:

; 238  : 
; 239  : 
; 240  : 
; 241  : #else
; 242  : CAPI_accept            = (WSFN_accept)accept;
; 243  : CAPI_bind              = (WSFN_bind)bind;
; 244  : 
; 245  : CAPI_closesocket       = (WSFN_closesocket)closesocket;
; 246  : 
; 247  : CAPI_connect           = (WSFN_connect)connect;;
; 248  : 
; 249  : CAPI_ioctlsocket       = (WSFN_ioctlsocket)ioctlsocket;
; 250  : 
; 251  : CAPI_getsockopt        = (WSFN_getsockopt)getsockopt;
; 252  : 
; 253  : CAPI_htonl             = (WSFN_htonl)htonl;
; 254  : 
; 255  : CAPI_htons             = (WSFN_htons)htons;
; 256  : 
; 257  : CAPI_inet_addr         = (WSFN_inet_addr)inet_addr;
; 258  : 
; 259  : CAPI_inet_ntoa         = (WSFN_inet_ntoa)inet_ntoa;
; 260  : 
; 261  : CAPI_listen            = (WSFN_listen)listen;
; 262  : 
; 263  : CAPI_ntohl             = (WSFN_ntohl)ntohl;
; 264  : 
; 265  : CAPI_ntohs             = (WSFN_ntohs)ntohs;
; 266  : 
; 267  : CAPI_recv              = (WSFN_recv)recv;
; 268  : 
; 269  : CAPI_recvfrom          = (WSFN_recvfrom)recvfrom;
; 270  : 
; 271  : CAPI_select            = (WSFN_select)select;
; 272  : 
; 273  : CAPI_send              = (WSFN_send)send;
; 274  : 
; 275  : CAPI_sendto            = (WSFN_sendto)sendto;
; 276  : 
; 277  : CAPI_setsockopt        = (WSFN_setsockopt)setsockopt;
; 278  : 
; 279  : CAPI_shutdown          = (WSFN_shutdown)shutdown;
; 280  : 
; 281  : CAPI_socket            = (WSFN_socket)socket;
; 282  : 
; 283  : CAPI_gethostbyaddr     = (WSFN_gethostbyaddr)gethostbyaddr;
; 284  : 
; 285  : CAPI_gethostbyname     = (WSFN_gethostbyname)gethostbyname; 
; 286  : 
; 287  : CAPI_gethostname       = (WSFN_gethostname)gethostname;
; 288  : 
; 289  : CAPI_getsockname       = (WSFN_getsockname)getsockname;
; 290  : 
; 291  : CAPI_WSAStartup        = (WSFN_WSAStartup)WSAStartup;
; 292  : 
; 293  : CAPI_WSACleanup        = (WSFN_WSACleanup )WSACleanup;
; 294  : 
; 295  : CAPI_WSASetLastError   = (WSFN_WSASetLastError)WSASetLastError;
; 296  : 
; 297  : CAPI_WSAGetLastError   = (WSFN_WSAGetLastError)WSAGetLastError; 
; 298  : 
; 299  : #endif
; 300  : 
; 301  : return 1;

	mov	eax, 1
$LN30@CAPI_GetPr:

; 302  : 
; 303  : }

	pop	ebp
	ret	0
_CAPI_GetProcAddresses ENDP
_TEXT	ENDS
END
