; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\comms\capi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_myReliableRecvPort
PUBLIC	_myRecvPort
PUBLIC	_CAPI_TimeStamp
PUBLIC	_ComAPILastError
_BSS	SEGMENT
_myReliableRecvPort DW 01H DUP (?)
	ALIGN	4

_myRecvPort DW	01H DUP (?)
	ALIGN	4

_CAPI_TimeStamp DD 01H DUP (?)
_ComAPILastError DD 01H DUP (?)
_info_callback DD 01H DUP (?)
_init_cs DD	01H DUP (?)
_BSS	ENDS
PUBLIC	_ComAPIInitComms
PUBLIC	_ComAPISetName
PUBLIC	_ComAPISetLocalPorts
PUBLIC	_ComAPIGetPeerIP
PUBLIC	_ComAPIGetRecvPort
PUBLIC	_ComAPIGetPeerRecvPort
PUBLIC	_ComAPIGetProtocol
PUBLIC	_ComAPIGetPeerId
PUBLIC	_ComAPIGetMyRecvPort
PUBLIC	_ComAPIGetMyReliableRecvPort
PUBLIC	_ComAPISetMyRecvPort
PUBLIC	_ComAPISetMyReliableRecvPort
PUBLIC	_ComAPIPrivateIP
PUBLIC	_ComAPIClose
PUBLIC	_ComAPISendOOB
PUBLIC	_ComAPISend
PUBLIC	_ComAPISendDummy
PUBLIC	_ComAPIGet
PUBLIC	_ComAPIRegisterInfoCallback
PUBLIC	_ComAPIBWStart
PUBLIC	_ComAPIBWPlayerJoined
PUBLIC	_ComAPIBWPlayerLeft
PUBLIC	_ComAPIBWEnterState
PUBLIC	_ComAPIGroupSet
PUBLIC	_ComAPIHostIDLen
PUBLIC	_ComAPIHostIDGet
PUBLIC	_ComAPISendBufferGet
PUBLIC	_ComAPIRecvBufferGet
PUBLIC	_ComAPIQuery
PUBLIC	_ComAPIinet_htoa
PUBLIC	_ComAPIinet_ntoa
PUBLIC	_ComAPIinet_haddr
PUBLIC	_ComAPIGetLastError
PUBLIC	_ComAPISetTimeStampFunction
PUBLIC	_ComAPIGetTimeStamp
PUBLIC	_ComAPIGetIP
PUBLIC	_enter_cs
PUBLIC	_leave_cs
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	_InitWS2:PROC
EXTRN	_start_bandwidth:PROC
EXTRN	_enter_state:PROC
EXTRN	_player_joined:PROC
EXTRN	_player_left:PROC
EXTRN	_F4IsBadReadPtrC:PROC
EXTRN	_F4IsBadCodePtrC:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_WS2Connections:DWORD
EXTRN	_CAPI_htonl:DWORD
EXTRN	_CAPI_htons:DWORD
EXTRN	_CAPI_inet_addr:DWORD
EXTRN	_CAPI_inet_ntoa:DWORD
EXTRN	_CAPI_ntohl:DWORD
EXTRN	_CAPI_ntohs:DWORD
EXTRN	_CAPI_gethostbyname:DWORD
EXTRN	_CAPI_WSACleanup:DWORD
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_cs	DB	018H DUP (?)
_BSS	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_leave_cs PROC

; 48   : void leave_cs (void){

	push	ebp
	mov	ebp, esp

; 49   : 	if (init_cs){

	cmp	DWORD PTR _init_cs, 0
	je	SHORT $LN2@leave_cs

; 50   : 		LeaveCriticalSection (&cs);

	push	OFFSET _cs
	call	DWORD PTR __imp__LeaveCriticalSection@4
$LN2@leave_cs:

; 51   : 	}
; 52   : }

	pop	ebp
	ret	0
_leave_cs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_enter_cs PROC

; 39   : void enter_cs (void){

	push	ebp
	mov	ebp, esp

; 40   : 	if (!init_cs){

	cmp	DWORD PTR _init_cs, 0
	jne	SHORT $LN1@enter_cs

; 41   : 		InitializeCriticalSection (&cs);

	push	OFFSET _cs
	call	DWORD PTR __imp__InitializeCriticalSection@4

; 42   : 		init_cs = TRUE;

	mov	DWORD PTR _init_cs, 1
$LN1@enter_cs:

; 43   : 	}
; 44   : 
; 45   : 	EnterCriticalSection (&cs);

	push	OFFSET _cs
	call	DWORD PTR __imp__EnterCriticalSection@4

; 46   : }

	pop	ebp
	ret	0
_enter_cs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_h$ = -4						; size = 4
_address$ = 8						; size = 4
_ComAPIGetIP PROC

; 500  : long ComAPIGetIP(const char *address){

	push	ebp
	mov	ebp, esp
	push	ecx

; 501  : 	struct hostent *h = CAPI_gethostbyname(address);

	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	DWORD PTR _CAPI_gethostbyname
	mov	DWORD PTR _h$[ebp], eax

; 502  : 	if ((h == NULL) || (h->h_addr_list == NULL)){

	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN2@ComAPIGetI
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN3@ComAPIGetI
$LN2@ComAPIGetI:

; 503  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN4@ComAPIGetI

; 504  : 	}
; 505  : 	else {

	jmp	SHORT $LN4@ComAPIGetI
$LN3@ComAPIGetI:

; 506  : 		return CAPI_ntohl(*((long*)h->h_addr_list[0]));

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR _CAPI_ntohl
$LN4@ComAPIGetI:

; 507  : 		
; 508  : 	}
; 509  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIGetIP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ret_val$ = -4						; size = 4
_c$ = 8							; size = 4
_ComAPIGetTimeStamp PROC

; 364  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 365  : 	unsigned long
; 366  : 		ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 367  : 	enter_cs ();

	call	_enter_cs

; 368  : 	if (c){

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@ComAPIGetT

; 369  : 		ret_val = (c->get_timestamp_func)(c);

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
	mov	DWORD PTR _ret_val$[ebp], eax
$LN1@ComAPIGetT:

; 370  :     }
; 371  : 	leave_cs ();

	call	_leave_cs

; 372  : 	return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 373  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIGetTimeStamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_TimeStamp$ = 8						; size = 4
_ComAPISetTimeStampFunction PROC

; 358  : {

	push	ebp
	mov	ebp, esp

; 359  : 	CAPI_TimeStamp = TimeStamp;

	mov	eax, DWORD PTR _TimeStamp$[ebp]
	mov	DWORD PTR _CAPI_TimeStamp, eax

; 360  :     CAPI_TimeStamp ();

	call	DWORD PTR _CAPI_TimeStamp

; 361  : }

	pop	ebp
	ret	0
_ComAPISetTimeStampFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ComAPIGetLastError PROC

; 353  : {

	push	ebp
	mov	ebp, esp

; 354  : 	return ComAPILastError;

	mov	eax, DWORD PTR _ComAPILastError

; 355  : }

	pop	ebp
	ret	0
_ComAPIGetLastError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ipaddress$ = -4					; size = 4
_IPAddress$ = 8						; size = 4
_ComAPIinet_haddr PROC

; 334  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 335  : 	unsigned long ipaddress;
; 336  : 	
; 337  : 	if(CAPI_inet_addr == NULL)

	cmp	DWORD PTR _CAPI_inet_addr, 0
	jne	SHORT $LN2@ComAPIinet

; 338  : 	{
; 339  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@ComAPIinet
$LN2@ComAPIinet:

; 340  : 	}
; 341  : 
; 342  : 	ipaddress = CAPI_inet_addr(IPAddress);

	mov	eax, DWORD PTR _IPAddress$[ebp]
	push	eax
	call	DWORD PTR _CAPI_inet_addr
	mov	DWORD PTR _ipaddress$[ebp], eax

; 343  : 	
; 344  : 	if(CAPI_ntohl == NULL)

	cmp	DWORD PTR _CAPI_ntohl, 0
	jne	SHORT $LN1@ComAPIinet

; 345  : 	{
; 346  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@ComAPIinet
$LN1@ComAPIinet:

; 347  : 	}
; 348  : 
; 349  : 	return CAPI_ntohl(ipaddress);

	mov	ecx, DWORD PTR _ipaddress$[ebp]
	push	ecx
	call	DWORD PTR _CAPI_ntohl
$LN3@ComAPIinet:

; 350  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIinet_haddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_addr$ = -4						; size = 4
_ip$ = 8						; size = 4
_ComAPIinet_ntoa PROC

; 318  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 319  : 	struct in_addr addr;
; 320  : 	
; 321  : 	addr.s_addr = ip;

	mov	eax, DWORD PTR _ip$[ebp]
	mov	DWORD PTR _addr$[ebp], eax

; 322  : 	
; 323  : 	if(CAPI_inet_ntoa == NULL)

	cmp	DWORD PTR _CAPI_inet_ntoa, 0
	jne	SHORT $LN1@ComAPIinet

; 324  : 	{
; 325  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@ComAPIinet
$LN1@ComAPIinet:

; 326  : 	}
; 327  : 
; 328  : 	return CAPI_inet_ntoa(addr);

	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	DWORD PTR _CAPI_inet_ntoa
$LN2@ComAPIinet:

; 329  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIinet_ntoa ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_addr$ = -4						; size = 4
_ip$ = 8						; size = 4
_ComAPIinet_htoa PROC

; 297  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 298  : 	struct in_addr addr;
; 299  : 	
; 300  : 	if(CAPI_htonl == NULL)

	cmp	DWORD PTR _CAPI_htonl, 0
	jne	SHORT $LN2@ComAPIinet

; 301  : 	{
; 302  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@ComAPIinet
$LN2@ComAPIinet:

; 303  : 	}
; 304  : 
; 305  : 	addr.s_addr = CAPI_htonl(ip);

	mov	eax, DWORD PTR _ip$[ebp]
	push	eax
	call	DWORD PTR _CAPI_htonl
	mov	DWORD PTR _addr$[ebp], eax

; 306  : 	
; 307  : 	if(CAPI_inet_ntoa == NULL)

	cmp	DWORD PTR _CAPI_inet_ntoa, 0
	jne	SHORT $LN1@ComAPIinet

; 308  : 	{
; 309  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@ComAPIinet
$LN1@ComAPIinet:

; 310  : 	}
; 311  : 
; 312  : 	return CAPI_inet_ntoa(addr);

	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	DWORD PTR _CAPI_inet_ntoa
$LN3@ComAPIinet:

; 313  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIinet_htoa ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
tv69 = -8						; size = 4
_ret_val$ = -4						; size = 4
_c$ = 8							; size = 4
_querytype$ = 12					; size = 4
_ComAPIQuery PROC

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 234  : 	unsigned long
; 235  : 		ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 236  : 	enter_cs ();

	call	_enter_cs

; 237  : 
; 238  : 	if(c){

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN7@ComAPIQuer

; 239  : 		ret_val = (*c->query_func)(c,querytype);

	mov	eax, DWORD PTR _querytype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 8
	mov	DWORD PTR _ret_val$[ebp], eax

; 240  : 	}
; 241  : 	else {

	jmp	SHORT $LN6@ComAPIQuer
$LN7@ComAPIQuer:

; 242  : 		switch (querytype){

	mov	ecx, DWORD PTR _querytype$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 20			; 00000014H
	je	SHORT $LN3@ComAPIQuer
	cmp	DWORD PTR tv69[ebp], 21			; 00000015H
	je	SHORT $LN2@ComAPIQuer
	cmp	DWORD PTR tv69[ebp], 22			; 00000016H
	je	SHORT $LN1@ComAPIQuer
	jmp	SHORT $LN6@ComAPIQuer
$LN3@ComAPIQuer:

; 243  : 			case COMAPI_TCP_HEADER_OVERHEAD:
; 244  : 			{
; 245  : 				ret_val = sizeof(tcpHeader) + 40;	// Size of underlying header.

	mov	DWORD PTR _ret_val$[ebp], 46		; 0000002eH

; 246  : 				break;

	jmp	SHORT $LN6@ComAPIQuer
$LN2@ComAPIQuer:

; 247  : 			}
; 248  : 
; 249  : 			case COMAPI_UDP_HEADER_OVERHEAD:
; 250  : 			{
; 251  : 				ret_val = sizeof(ComAPIHeader);

	mov	DWORD PTR _ret_val$[ebp], 8

; 252  : 				break;

	jmp	SHORT $LN6@ComAPIQuer
$LN1@ComAPIQuer:

; 253  : 			}
; 254  : 
; 255  : 			case COMAPI_RUDP_HEADER_OVERHEAD:
; 256  : 			{
; 257  : 				ret_val = MAX_RUDP_HEADER_SIZE;

	mov	DWORD PTR _ret_val$[ebp], 17		; 00000011H
$LN6@ComAPIQuer:

; 258  : 				break;
; 259  : 			}
; 260  : 		}
; 261  : 	}
; 262  : 	leave_cs ();

	call	_leave_cs

; 263  : 	return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIQuery ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_isBad$ = -12						; size = 4
_ret_val$ = -8						; size = 4
tv73 = -4						; size = 4
_c$ = 8							; size = 4
_ComAPIRecvBufferGet PROC

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 215  : 	char *ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 216  : 	int isBad;
; 217  : 	enter_cs ();

	call	_enter_cs

; 218  : 
; 219  : 	// sfr: another hack by JB...
; 220  : 	isBad = c && (F4IsBadReadPtrC(c, sizeof(ComAPI)) || F4IsBadCodePtrC((FARPROC)(*c->recv_buf_func)));

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN5@ComAPIRecv
	push	48					; 00000030H
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_F4IsBadReadPtrC
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@ComAPIRecv
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_F4IsBadCodePtrC
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ComAPIRecv
$LN4@ComAPIRecv:
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@ComAPIRecv
$LN5@ComAPIRecv:
	mov	DWORD PTR tv73[ebp], 0
$LN6@ComAPIRecv:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _isBad$[ebp], eax

; 221  : 
; 222  : 	if (c && !isBad){

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@ComAPIRecv
	cmp	DWORD PTR _isBad$[ebp], 0
	jne	SHORT $LN1@ComAPIRecv

; 223  : 		ret_val = (*c->recv_buf_func)(c);

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	mov	DWORD PTR _ret_val$[ebp], eax
$LN1@ComAPIRecv:

; 224  :     }
; 225  : 	leave_cs ();

	call	_leave_cs

; 226  : 
; 227  : 	return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 228  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIRecvBufferGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ret_val$ = -4						; size = 4
_c$ = 8							; size = 4
_ComAPISendBufferGet PROC

; 201  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 202  : 	char *ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 203  : 	enter_cs ();

	call	_enter_cs

; 204  : 
; 205  : 	if (c) {

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@ComAPISend

; 206  : 		ret_val = (*c->send_buf_func)(c);

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	mov	DWORD PTR _ret_val$[ebp], eax
$LN1@ComAPISend:

; 207  : 	}
; 208  : 	leave_cs ();

	call	_leave_cs

; 209  : 
; 210  : 	return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 211  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPISendBufferGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ret_val$ = -4						; size = 4
_c$ = 8							; size = 4
_buf$ = 12						; size = 4
_reset$ = 16						; size = 4
_ComAPIHostIDGet PROC

; 184  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 185  : 	int ret_val = 0;

	mov	DWORD PTR _ret_val$[ebp], 0

; 186  : 
; 187  : 	enter_cs ();

	call	_enter_cs

; 188  : 	
; 189  : 	if(c) {

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@ComAPIHost

; 190  : 		ret_val = (*c->addr_func)(c, buf, reset);

	mov	eax, DWORD PTR _reset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret_val$[ebp], eax
$LN1@ComAPIHost:

; 191  : 	}
; 192  : 
; 193  : 	leave_cs ();

	call	_leave_cs

; 194  : 	
; 195  : 	return ret_val;

	mov	eax, DWORD PTR _ret_val$[ebp]

; 196  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIHostIDGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIHostIDLen PROC

; 172  : {

	push	ebp
	mov	ebp, esp

; 173  : 	if(c) {

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN2@ComAPIHost

; 174  : 		return 4;

	mov	eax, 4
	jmp	SHORT $LN3@ComAPIHost

; 175  :     }
; 176  : 	else {

	jmp	SHORT $LN3@ComAPIHost
$LN2@ComAPIHost:

; 177  : 		return 0;

	xor	eax, eax
$LN3@ComAPIHost:

; 178  :     }
; 179  : }

	pop	ebp
	ret	0
_ComAPIHostIDLen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_group$ = 12						; size = 4
_ComAPIGroupSet PROC

; 164  : {

	push	ebp
	mov	ebp, esp

; 165  : 	c;
; 166  : 	group;
; 167  : }

	pop	ebp
	ret	0
_ComAPIGroupSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ComAPIBWEnterState PROC

; 396  : void ComAPIBWEnterState(int state){

	push	ebp
	mov	ebp, esp

; 397  : 	enter_state((bwstates)state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_enter_state
	add	esp, 4

; 398  : }

	pop	ebp
	ret	0
_ComAPIBWEnterState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ComAPIBWPlayerLeft PROC

; 392  : void ComAPIBWPlayerLeft(){

	push	ebp
	mov	ebp, esp

; 393  : 	player_left();

	call	_player_left

; 394  : }

	pop	ebp
	ret	0
_ComAPIBWPlayerLeft ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ComAPIBWPlayerJoined PROC

; 388  : void ComAPIBWPlayerJoined(){

	push	ebp
	mov	ebp, esp

; 389  : 	player_joined();

	call	_player_joined

; 390  : }

	pop	ebp
	ret	0
_ComAPIBWPlayerJoined ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ComAPIBWStart PROC

; 384  : void ComAPIBWStart(){

	push	ebp
	mov	ebp, esp

; 385  : 	start_bandwidth();

	call	_start_bandwidth

; 386  : }

	pop	ebp
	ret	0
_ComAPIBWStart ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_func$ = 8						; size = 4
_ComAPIRegisterInfoCallback PROC

; 376  : {

	push	ebp
	mov	ebp, esp

; 377  : 	info_callback = func;

	mov	eax, DWORD PTR _func$[ebp]
	mov	DWORD PTR _info_callback, eax

; 378  : }

	pop	ebp
	ret	0
_ComAPIRegisterInfoCallback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_isBad$ = -12						; size = 4
tv73 = -8						; size = 4
_size$ = -4						; size = 4
_c$ = 8							; size = 4
_ComAPIGet PROC

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 142  : 	int size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 143  : 	int isBad;
; 144  : 	
; 145  : 	enter_cs ();

	call	_enter_cs

; 146  : 	
; 147  : 	// sfr: another hack by JB...
; 148  : 	isBad = c && (F4IsBadReadPtrC(c, sizeof(ComAPI)) || F4IsBadCodePtrC((FARPROC)(*c->recv_func)));

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN6@ComAPIGet
	push	48					; 00000030H
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_F4IsBadReadPtrC
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@ComAPIGet
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_F4IsBadCodePtrC
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@ComAPIGet
$LN5@ComAPIGet:
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN7@ComAPIGet
$LN6@ComAPIGet:
	mov	DWORD PTR tv73[ebp], 0
$LN7@ComAPIGet:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _isBad$[ebp], eax

; 149  : 	if(c && !isBad){ // JB 010404 CTD

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN2@ComAPIGet
	cmp	DWORD PTR _isBad$[ebp], 0
	jne	SHORT $LN2@ComAPIGet

; 150  : 		size = (*c->recv_func)(c);

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 151  : 		if (info_callback){

	cmp	DWORD PTR _info_callback, 0
	je	SHORT $LN2@ComAPIGet

; 152  : 			info_callback (c, 0, size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	DWORD PTR _info_callback
	add	esp, 12					; 0000000cH
$LN2@ComAPIGet:

; 153  : 		}		
; 154  : 	}
; 155  : 
; 156  : 	leave_cs ();

	call	_leave_cs

; 157  : 	
; 158  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 159  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_c$ = 8							; size = 4
_ip$ = 12						; size = 4
_port$ = 16						; size = 2
_ComAPISendDummy PROC

; 89   : int ComAPISendDummy(ComAPIHandle c, unsigned long ip, unsigned short port){

	push	ebp
	mov	ebp, esp
	push	ecx

; 90   : 	int rc = 0;

	mov	DWORD PTR _rc$[ebp], 0

; 91   : 	enter_cs ();

	call	_enter_cs

; 92   : 	
; 93   : 	if (c != NULL){

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN2@ComAPISend

; 94   : 		if (c->send_dummy_func){

	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@ComAPISend

; 95   : 			rc = (*c->send_dummy_func)(c, ip, port);

	movzx	ecx, WORD PTR _port$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ip$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[ebp], eax
$LN2@ComAPISend:

; 96   : 		}
; 97   : 	}
; 98   : 	leave_cs ();

	call	_leave_cs

; 99   : 
; 100  : 	return rc;

	mov	eax, DWORD PTR _rc$[ebp]

; 101  : 
; 102  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPISendDummy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_isBad$ = -12						; size = 4
_rc$ = -8						; size = 4
tv72 = -4						; size = 4
_c$ = 8							; size = 4
_msgsize$ = 12						; size = 4
_type$ = 16						; size = 4
_ComAPISend PROC

; 67   : int ComAPISend(ComAPIHandle c, int msgsize, int type){

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 68   : 	int rc = 0;

	mov	DWORD PTR _rc$[ebp], 0

; 69   : 	int isBad;
; 70   : 	enter_cs ();

	call	_enter_cs

; 71   : 	
; 72   : 	// sfr: another hack by JB...
; 73   : 	isBad = F4IsBadReadPtrC(c, sizeof(ComAPI)) || F4IsBadCodePtrC((FARPROC)(*c->send_func));

	push	48					; 00000030H
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_F4IsBadReadPtrC
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@ComAPISend
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_F4IsBadCodePtrC
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@ComAPISend
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN7@ComAPISend
$LN6@ComAPISend:
	mov	DWORD PTR tv72[ebp], 1
$LN7@ComAPISend:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _isBad$[ebp], eax

; 74   : 	if (c && !isBad) {

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@ComAPISend
	cmp	DWORD PTR _isBad$[ebp], 0
	jne	SHORT $LN3@ComAPISend

; 75   : 		if (info_callback){

	cmp	DWORD PTR _info_callback, 0
	je	SHORT $LN2@ComAPISend

; 76   : 			info_callback (c, 1, msgsize);

	mov	ecx, DWORD PTR _msgsize$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	DWORD PTR _info_callback
	add	esp, 12					; 0000000cH
$LN2@ComAPISend:

; 77   : 		}
; 78   : 		
; 79   : 		if (c->send_func){

	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@ComAPISend

; 80   : 			rc = (*c->send_func)(c, msgsize, FALSE, type);

	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _msgsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
$LN3@ComAPISend:

; 81   : 		}
; 82   : 	}
; 83   : 	leave_cs ();

	call	_leave_cs

; 84   : 
; 85   : 	return rc;

	mov	eax, DWORD PTR _rc$[ebp]

; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPISend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_c$ = 8							; size = 4
_msgsize$ = 12						; size = 4
_type$ = 16						; size = 4
_ComAPISendOOB PROC

; 104  : int ComAPISendOOB(ComAPIHandle c, int msgsize, int type){

	push	ebp
	mov	ebp, esp
	push	ecx

; 105  : 	int rc = 0;

	mov	DWORD PTR _rc$[ebp], 0

; 106  : 	enter_cs (); // JB 010718

	call	_enter_cs

; 107  : 	if(c){

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@ComAPISend

; 108  : 		if (info_callback){

	cmp	DWORD PTR _info_callback, 0
	je	SHORT $LN2@ComAPISend

; 109  : 			info_callback (c, 1, msgsize);

	mov	eax, DWORD PTR _msgsize$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	DWORD PTR _info_callback
	add	esp, 12					; 0000000cH
$LN2@ComAPISend:

; 110  : 		}
; 111  : 		
; 112  : 		if (c->send_func){ // JB 010718

	mov	edx, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@ComAPISend

; 113  : 			rc = (*c->send_func)(c, msgsize, TRUE, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _msgsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
$LN3@ComAPISend:

; 114  : 		}
; 115  : 	}
; 116  : 	leave_cs ();

	call	_leave_cs

; 117  : 	return rc;

	mov	eax, DWORD PTR _rc$[ebp]

; 118  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPISendOOB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIClose PROC

; 57   : {

	push	ebp
	mov	ebp, esp

; 58   : 	enter_cs (); // JB 010718

	call	_enter_cs

; 59   : 
; 60   : 	if (c) {

	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@ComAPIClos

; 61   : 		(*c->close_func)(c);

	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
$LN1@ComAPIClos:

; 62   : 	}
; 63   : 
; 64   : 	leave_cs (); // JB 010718

	call	_leave_cs

; 65   : }

	pop	ebp
	ret	0
_ComAPIClose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_w$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_ip$ = 8						; size = 4
_ComAPIPrivateIP PROC

; 479  : int ComAPIPrivateIP(unsigned long ip){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 480  : 	// ip is composed 
; 481  : 	// XXX.YYY.ZZZ.WWW
; 482  : 	unsigned long x, y, z, w; //use long to avoid warning
; 483  : 	x = (ip & 0xFF000000) >> 24;

	mov	eax, DWORD PTR _ip$[ebp]
	and	eax, -16777216				; ff000000H
	shr	eax, 24					; 00000018H
	mov	DWORD PTR _x$[ebp], eax

; 484  : 	y = (ip & 0x00FF0000) >> 16;

	mov	ecx, DWORD PTR _ip$[ebp]
	and	ecx, 16711680				; 00ff0000H
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _y$[ebp], ecx

; 485  : 	z = (ip & 0x0000FF00) >> 8;

	mov	edx, DWORD PTR _ip$[ebp]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	DWORD PTR _z$[ebp], edx

; 486  : 	w = (ip & 0x000000FF);

	mov	eax, DWORD PTR _ip$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _w$[ebp], eax

; 487  : 	if (
; 488  : 		((x == 127) && (y == 0) && (z == 0) && (w == 1)) || // localhost
; 489  : 		(x == 10) || // class A reserved
; 490  : 		((x == 172) && ((y >= 16 ) && (y < 31))) || // class B reserver
; 491  : 		((x == 192) && (y == 168) && ((z >= 0) && (z < 255))) // class C reserved
; 492  : 	){

	cmp	DWORD PTR _x$[ebp], 127			; 0000007fH
	jne	SHORT $LN4@ComAPIPriv
	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN4@ComAPIPriv
	cmp	DWORD PTR _z$[ebp], 0
	jne	SHORT $LN4@ComAPIPriv
	cmp	DWORD PTR _w$[ebp], 1
	je	SHORT $LN5@ComAPIPriv
$LN4@ComAPIPriv:
	cmp	DWORD PTR _x$[ebp], 10			; 0000000aH
	je	SHORT $LN5@ComAPIPriv
	cmp	DWORD PTR _x$[ebp], 172			; 000000acH
	jne	SHORT $LN3@ComAPIPriv
	cmp	DWORD PTR _y$[ebp], 16			; 00000010H
	jb	SHORT $LN3@ComAPIPriv
	cmp	DWORD PTR _y$[ebp], 31			; 0000001fH
	jb	SHORT $LN5@ComAPIPriv
$LN3@ComAPIPriv:
	cmp	DWORD PTR _x$[ebp], 192			; 000000c0H
	jne	SHORT $LN6@ComAPIPriv
	cmp	DWORD PTR _y$[ebp], 168			; 000000a8H
	jne	SHORT $LN6@ComAPIPriv
	cmp	DWORD PTR _z$[ebp], 0
	jb	SHORT $LN6@ComAPIPriv
	cmp	DWORD PTR _z$[ebp], 255			; 000000ffH
	jae	SHORT $LN6@ComAPIPriv
$LN5@ComAPIPriv:

; 493  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN7@ComAPIPriv

; 494  : 	}
; 495  : 	else {

	jmp	SHORT $LN7@ComAPIPriv
$LN6@ComAPIPriv:

; 496  : 		return 0;

	xor	eax, eax
$LN7@ComAPIPriv:

; 497  : 	}
; 498  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIPrivateIP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_port$ = 8						; size = 2
_ComAPISetMyReliableRecvPort PROC

; 475  : void ComAPISetMyReliableRecvPort(unsigned short port){

	push	ebp
	mov	ebp, esp

; 476  : 	myReliableRecvPort = CAPI_htons(port);

	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR _CAPI_htons
	mov	WORD PTR _myReliableRecvPort, ax

; 477  : }

	pop	ebp
	ret	0
_ComAPISetMyReliableRecvPort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_port$ = 8						; size = 2
_ComAPISetMyRecvPort PROC

; 471  : void ComAPISetMyRecvPort(unsigned short port){

	push	ebp
	mov	ebp, esp

; 472  : 	myRecvPort = CAPI_htons(port);

	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR _CAPI_htons
	mov	WORD PTR _myRecvPort, ax

; 473  : }

	pop	ebp
	ret	0
_ComAPISetMyRecvPort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ComAPIGetMyReliableRecvPort PROC

; 467  : unsigned short ComAPIGetMyReliableRecvPort(){

	push	ebp
	mov	ebp, esp

; 468  : 	return CAPI_ntohs(myReliableRecvPort);

	movzx	eax, WORD PTR _myReliableRecvPort
	push	eax
	call	DWORD PTR _CAPI_ntohs

; 469  : }

	pop	ebp
	ret	0
_ComAPIGetMyReliableRecvPort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ComAPIGetMyRecvPort PROC

; 463  : unsigned short ComAPIGetMyRecvPort(){

	push	ebp
	mov	ebp, esp

; 464  : 	return CAPI_ntohs(myRecvPort);

	movzx	eax, WORD PTR _myRecvPort
	push	eax
	call	DWORD PTR _CAPI_ntohs

; 465  : }

	pop	ebp
	ret	0
_ComAPIGetMyRecvPort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIGetPeerId PROC

; 455  : unsigned long ComAPIGetPeerId(ComAPIHandle c){

	push	ebp
	mov	ebp, esp

; 456  : 	return CAPI_ntohl( ((ComIP*)c)->id );

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	call	DWORD PTR _CAPI_ntohl

; 457  : }

	pop	ebp
	ret	0
_ComAPIGetPeerId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIGetProtocol PROC

; 459  : int ComAPIGetProtocol(ComAPIHandle c){

	push	ebp
	mov	ebp, esp

; 460  : 	return c->protocol;

	mov	eax, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 461  : }

	pop	ebp
	ret	0
_ComAPIGetProtocol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIGetPeerRecvPort PROC

; 445  : unsigned short ComAPIGetPeerRecvPort(ComAPIHandle c){

	push	ebp
	mov	ebp, esp

; 446  : 	// we send to this address, so its his receive port
; 447  : 	return CAPI_ntohs( ((ComIP*)c)->sendAddress.sin_port );

	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax+482]
	push	ecx
	call	DWORD PTR _CAPI_ntohs

; 448  : }

	pop	ebp
	ret	0
_ComAPIGetPeerRecvPort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIGetRecvPort PROC

; 440  : unsigned short ComAPIGetRecvPort(ComAPIHandle c){

	push	ebp
	mov	ebp, esp

; 441  : 	// this is the same for all coms of same type
; 442  : 	return CAPI_ntohs( ((ComIP*)c)->recAddress.sin_port );

	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax+498]
	push	ecx
	call	DWORD PTR _CAPI_ntohs

; 443  : }

	pop	ebp
	ret	0
_ComAPIGetRecvPort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_ComAPIGetPeerIP PROC

; 450  : unsigned long ComAPIGetPeerIP(ComAPIHandle c){

	push	ebp
	mov	ebp, esp

; 451  : 	// we send to this address, so this is his IP
; 452  : 	return CAPI_ntohl( ((ComIP*)c)->sendAddress.sin_addr.S_un.S_addr );

	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+484]
	push	ecx
	call	DWORD PTR _CAPI_ntohl

; 453  : }

	pop	ebp
	ret	0
_ComAPIGetPeerIP ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_b$ = 8							; size = 2
_r$ = 12						; size = 2
_ComAPISetLocalPorts PROC

; 435  : void ComAPISetLocalPorts(unsigned short b, unsigned short r){

	push	ebp
	mov	ebp, esp

; 436  : 	myRecvPort =  CAPI_htons(b);

	movzx	eax, WORD PTR _b$[ebp]
	push	eax
	call	DWORD PTR _CAPI_htons
	mov	WORD PTR _myRecvPort, ax

; 437  : 	myReliableRecvPort = CAPI_htons(r);

	movzx	ecx, WORD PTR _r$[ebp]
	push	ecx
	call	DWORD PTR _CAPI_htons
	mov	WORD PTR _myReliableRecvPort, ax

; 438  : }

	pop	ebp
	ret	0
_ComAPISetLocalPorts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_c$ = 8							; size = 4
_name_in$ = 12						; size = 4
_ComAPISetName PROC

; 426  : {

	push	ebp
	mov	ebp, esp

; 427  : 	if (c->name)

	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@ComAPISetN

; 428  : 	{
; 429  : 		free(c->name);

	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_free
	add	esp, 4
$LN1@ComAPISetN:

; 430  : 	}
; 431  : 	c->name = (char*)malloc (strlen (name_in) + 1);

	mov	eax, DWORD PTR _name_in$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx], eax

; 432  : 	strcpy (c->name, name_in);

	mov	edx, DWORD PTR _name_in$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcpy
	add	esp, 8

; 433  : }

	pop	ebp
	ret	0
_ComAPISetName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\comms\capi.c
_TEXT	SEGMENT
_ret$ = -408						; size = 4
_wsaData$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
_ComAPIInitComms PROC

; 408  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 409  : 	WSADATA wsaData;
; 410  : 	int ret=1;

	mov	DWORD PTR _ret$[ebp], 1

; 411  : 	
; 412  : 	if(!WS2Connections) {

	cmp	DWORD PTR _WS2Connections, 0
	jne	SHORT $LN2@ComAPIInit

; 413  : 		ret = InitWS2(&wsaData);

	lea	eax, DWORD PTR _wsaData$[ebp]
	push	eax
	call	_InitWS2
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 414  : 		WS2Connections--;

	mov	ecx, DWORD PTR _WS2Connections
	sub	ecx, 1
	mov	DWORD PTR _WS2Connections, ecx

; 415  : 
; 416  : 		/* if No more connections then WSACleanup() */
; 417  : 		if (!WS2Connections) {

	jne	SHORT $LN2@ComAPIInit

; 418  :             CAPI_WSACleanup();

	call	DWORD PTR _CAPI_WSACleanup
$LN2@ComAPIInit:

; 419  : 		}
; 420  : 	}
; 421  : 
; 422  : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 423  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ComAPIInitComms ENDP
_TEXT	ENDS
END
