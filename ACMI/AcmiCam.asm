; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ACMI\src\AcmiCam.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?atan2@@YAMMM@Z					; atan2
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??0ACMICamera@@QAE@XZ				; ACMICamera::ACMICamera
PUBLIC	??1ACMICamera@@QAE@XZ				; ACMICamera::~ACMICamera
PUBLIC	?SetType@ACMICamera@@QAEXH@Z			; ACMICamera::SetType
PUBLIC	?SetRotateType@ACMICamera@@QAEXH@Z		; ACMICamera::SetRotateType
PUBLIC	?SetElDir@ACMICamera@@QAEXM@Z			; ACMICamera::SetElDir
PUBLIC	?SetAzDir@ACMICamera@@QAEXM@Z			; ACMICamera::SetAzDir
PUBLIC	?IncrementPannerAzEl@ACMICamera@@QAEXHMM@Z	; ACMICamera::IncrementPannerAzEl
PUBLIC	?SetLocalEl@ACMICamera@@QAEXM@Z			; ACMICamera::SetLocalEl
PUBLIC	?SetLocalAz@ACMICamera@@QAEXM@Z			; ACMICamera::SetLocalAz
PUBLIC	?SetObjectRange@ACMICamera@@QAEXMH@Z		; ACMICamera::SetObjectRange
PUBLIC	?TrackPoint@ACMICamera@@QAEXABUTpoint@@@Z	; ACMICamera::TrackPoint
PUBLIC	?UpdatePosition@ACMICamera@@QAEXXZ		; ACMICamera::UpdatePosition
PUBLIC	?UpdateChasePosition@ACMICamera@@QAEXM@Z	; ACMICamera::UpdateChasePosition
PUBLIC	?UpdatePannerPosition@ACMICamera@@QAEXXZ	; ACMICamera::UpdatePannerPosition
PUBLIC	?Tilt@ACMICamera@@QAEXMMMPAUTrotation@@@Z	; ACMICamera::Tilt
PUBLIC	?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z	; ACMICamera::Rotate
PUBLIC	?Translate@ACMICamera@@QAEXMMMPAUTpoint@@@Z	; ACMICamera::Translate
PUBLIC	?DoAction@ACMICamera@@AAEXXZ			; ACMICamera::DoAction
PUBLIC	??_C@_0M@FCGIMOBP@PannA?3?5?$CFlf?6?$AA@	; `string'
PUBLIC	??_C@_0M@NGCCMAOF@PannE?3?5?$CFlf?6?$AA@	; `string'
PUBLIC	??_C@_0M@DOLIOEDE@ObjeA?3?5?$CFlf?6?$AA@	; `string'
PUBLIC	??_C@_0M@LKPCOKMO@ObjeE?3?5?$CFlf?6?$AA@	; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e947ae1
PUBLIC	__real@3e99999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40490fdb
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
PUBLIC	__real@42480000
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@c0490fdb
PUBLIC	__real@c2480000
PUBLIC	__real@c3960000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_MonoPrint:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3960000
CONST	SEGMENT
__real@c3960000 DD 0c3960000r			; -300
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e947ae1
CONST	SEGMENT
__real@3e947ae1 DD 03e947ae1r			; 0.29
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0M@LKPCOKMO@ObjeE?3?5?$CFlf?6?$AA@
CONST	SEGMENT
??_C@_0M@LKPCOKMO@ObjeE?3?5?$CFlf?6?$AA@ DB 'ObjeE: %lf', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DOLIOEDE@ObjeA?3?5?$CFlf?6?$AA@
CONST	SEGMENT
??_C@_0M@DOLIOEDE@ObjeA?3?5?$CFlf?6?$AA@ DB 'ObjeA: %lf', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NGCCMAOF@PannE?3?5?$CFlf?6?$AA@
CONST	SEGMENT
??_C@_0M@NGCCMAOF@PannE?3?5?$CFlf?6?$AA@ DB 'PannE: %lf', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FCGIMOBP@PannA?3?5?$CFlf?6?$AA@
CONST	SEGMENT
??_C@_0M@FCGIMOBP@PannA?3?5?$CFlf?6?$AA@ DB 'PannA: %lf', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
tv172 = -16						; size = 4
tv67 = -12						; size = 4
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?DoAction@ACMICamera@@AAEXXZ PROC			; ACMICamera::DoAction
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	switch(_type)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	$LN8@DoAction
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN27@DoAction
	jmp	$LN28@DoAction
$LN27@DoAction:

; 98   : 	{
; 99   : 		case ATTACHED_CAM:
; 100  : 		{
; 101  : 			switch(_action)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 17			; 00000011H
	ja	$LN25@DoAction
	mov	ecx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN33@DoAction[ecx*4]
$LN24@DoAction:

; 102  : 			{
; 103  : 				case NO_ACTION:
; 104  : 				{
; 105  : 					SetAzDir(0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 106  : 					SetElDir(0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 107  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 108  : 					break;

	jmp	$LN25@DoAction
$LN23@DoAction:

; 109  : 				}
; 110  : 				case ZOOM_IN:
; 111  : 				{
; 112  : 					SetObjectRange(0.0F, ZOOM_IN);

	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectRange@ACMICamera@@QAEXMH@Z	; ACMICamera::SetObjectRange

; 113  : 					break;

	jmp	$LN25@DoAction
$LN22@DoAction:

; 114  : 				}
; 115  : 				case ZOOM_OUT:
; 116  : 				{
; 117  : 					SetObjectRange(10.0F, ZOOM_OUT);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectRange@ACMICamera@@QAEXMH@Z	; ACMICamera::SetObjectRange

; 118  : 					break;

	jmp	$LN25@DoAction
$LN21@DoAction:

; 119  : 				}
; 120  : 				case LOCAL_RIGHT_ROT:
; 121  : 				{
; 122  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 123  : 					SetAzDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 124  : 					break;

	jmp	$LN25@DoAction
$LN20@DoAction:

; 125  : 				}
; 126  : 				case LOCAL_LEFT_ROT:
; 127  : 				{
; 128  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 129  : 					SetAzDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 130  : 					break;

	jmp	$LN25@DoAction
$LN19@DoAction:

; 131  : 				}
; 132  : 				case LOCAL_UP_ROT:
; 133  : 				{
; 134  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 135  : 					SetElDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 136  : 					break;

	jmp	$LN25@DoAction
$LN18@DoAction:

; 137  : 				}
; 138  : 				case LOCAL_DOWN_ROT:
; 139  : 				{
; 140  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 141  : 					SetElDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 142  : 					break;

	jmp	$LN25@DoAction
$LN17@DoAction:

; 143  : 				}
; 144  : 				case OBJECT_RIGHT_ROT:
; 145  : 				{
; 146  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 147  : 					SetAzDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 148  : 					break;

	jmp	$LN25@DoAction
$LN16@DoAction:

; 149  : 				}
; 150  : 				case OBJECT_LEFT_ROT:
; 151  : 				{
; 152  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 153  : 					SetAzDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 154  : 					break;

	jmp	$LN25@DoAction
$LN15@DoAction:

; 155  : 				}
; 156  : 				case OBJECT_UP_ROT:
; 157  : 				{
; 158  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 159  : 					SetElDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 160  : 					break;

	jmp	$LN25@DoAction
$LN14@DoAction:

; 161  : 				}
; 162  : 				case OBJECT_DOWN_ROT:
; 163  : 				{
; 164  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 165  : 					SetElDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 166  : 					break;

	jmp	$LN25@DoAction
$LN13@DoAction:

; 167  : 				}
; 168  : 				case OBJECT_XRT_YUP_ROT:
; 169  : 				{
; 170  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 171  : 					SetAzDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 172  : 					SetElDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 173  : 					break;

	jmp	$LN25@DoAction
$LN12@DoAction:

; 174  : 				}
; 175  : 				case OBJECT_XLT_YDN_ROT:
; 176  : 				{
; 177  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 178  : 					SetAzDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 179  : 					SetElDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 180  : 					break;

	jmp	SHORT $LN25@DoAction
$LN11@DoAction:

; 181  : 				}
; 182  : 				case OBJECT_XRT_YDN_ROT:
; 183  : 				{
; 184  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 185  : 					SetAzDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 186  : 					SetElDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 187  : 					break;

	jmp	SHORT $LN25@DoAction
$LN10@DoAction:

; 188  : 				}
; 189  : 				case OBJECT_XLT_YUP_ROT:
; 190  : 				{
; 191  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 192  : 					SetAzDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 193  : 					SetElDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 194  : 					break;

	jmp	SHORT $LN25@DoAction
$LN9@DoAction:

; 195  : 				}
; 196  : 				case ACMI_PANNER:
; 197  : 				{
; 198  : 					SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType
$LN25@DoAction:

; 199  : 					break;
; 200  : 				}
; 201  : 			}
; 202  : 			break;

	jmp	$LN28@DoAction
$LN8@DoAction:

; 203  : 		}
; 204  : 		case DETTACHED_CAM:
; 205  : 		{
; 206  : 			switch(_action)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	DWORD PTR tv172[ebp], eax
	cmp	DWORD PTR tv172[ebp], 10		; 0000000aH
	ja	$LN6@DoAction
	mov	ecx, DWORD PTR tv172[ebp]
	movzx	edx, BYTE PTR $LN32@DoAction[ecx]
	jmp	DWORD PTR $LN34@DoAction[edx*4]
$LN5@DoAction:

; 207  : 			{
; 208  : 				case NO_ACTION:
; 209  : 				{
; 210  : 					SetAzDir(0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 211  : 					SetElDir(0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 212  : 			//		SetRotateType(OBJECT_ROTATION);
; 213  : 					break;

	jmp	$LN6@DoAction
$LN4@DoAction:

; 214  : 				}
; 215  : /*				case ZOOM_IN:
; 216  : 				{
; 217  : 			//		SetObjectRange(0.0F, ZOOM_IN);
; 218  : 					SetRotateType(NO_ROTATION);
; 219  : 					break;
; 220  : 				}
; 221  : 				case ZOOM_OUT:
; 222  : 				{
; 223  : 			//		SetObjectRange(10.0F, ZOOM_OUT);
; 224  : 					SetRotateType(NO_ROTATION);
; 225  : 					break;
; 226  : 				}
; 227  : 				case LOCAL_RIGHT_ROT:
; 228  : 				{
; 229  : 					SetRotateType(NO_ROTATION);
; 230  : 			//		SetAzDir(1.0F);
; 231  : 					break;
; 232  : 				}
; 233  : 				case LOCAL_LEFT_ROT:
; 234  : 				{
; 235  : 					SetRotateType(NO_ROTATION);
; 236  : 		//			SetAzDir(-1.0F);
; 237  : 					break;
; 238  : 				}
; 239  : 				case LOCAL_UP_ROT:
; 240  : 				{
; 241  : 					SetRotateType(NO_ROTATION);
; 242  : 		//			SetElDir(1.0F);
; 243  : 					break;
; 244  : 				}
; 245  : 				case LOCAL_DOWN_ROT:
; 246  : 				{
; 247  : 					SetRotateType(NO_ROTATION);
; 248  : 		//			SetElDir(-1.0F);
; 249  : 					break;
; 250  : 				} */
; 251  : 				case OBJECT_RIGHT_ROT:
; 252  : 				{
; 253  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 254  : 					SetAzDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 255  : 					break;

	jmp	SHORT $LN6@DoAction
$LN3@DoAction:

; 256  : 				}
; 257  : 				case OBJECT_LEFT_ROT:
; 258  : 				{
; 259  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 260  : 					SetAzDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 261  : 					break;

	jmp	SHORT $LN6@DoAction
$LN2@DoAction:

; 262  : 				}
; 263  : 				case OBJECT_UP_ROT:
; 264  : 				{
; 265  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 266  : 					SetElDir(1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 267  : 					break;

	jmp	SHORT $LN6@DoAction
$LN1@DoAction:

; 268  : 				}
; 269  : 				case OBJECT_DOWN_ROT:
; 270  : 				{
; 271  : 					SetRotateType(LOCAL_ROTATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 272  : 					SetElDir(-1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir
$LN6@DoAction:
$LN28@DoAction:

; 273  : 					break;
; 274  : 				}
; 275  : 			}
; 276  : 			break;
; 277  : 		}
; 278  : 	}
; 279  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@DoAction:
	DD	$LN24@DoAction
	DD	$LN23@DoAction
	DD	$LN22@DoAction
	DD	$LN21@DoAction
	DD	$LN20@DoAction
	DD	$LN19@DoAction
	DD	$LN18@DoAction
	DD	$LN17@DoAction
	DD	$LN16@DoAction
	DD	$LN15@DoAction
	DD	$LN14@DoAction
	DD	$LN13@DoAction
	DD	$LN12@DoAction
	DD	$LN11@DoAction
	DD	$LN10@DoAction
	DD	$LN25@DoAction
	DD	$LN25@DoAction
	DD	$LN9@DoAction
$LN34@DoAction:
	DD	$LN5@DoAction
	DD	$LN4@DoAction
	DD	$LN3@DoAction
	DD	$LN2@DoAction
	DD	$LN1@DoAction
	DD	$LN6@DoAction
$LN32@DoAction:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	4
?DoAction@ACMICamera@@AAEXXZ ENDP			; ACMICamera::DoAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmcminl.cpp
;	COMDAT ?Translate@ACMICamera@@QAEXMMMPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_camView$ = 20						; size = 4
?Translate@ACMICamera@@QAEXMMMPAUTpoint@@@Z PROC	; ACMICamera::Translate, COMDAT
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 	camView->x = x;

	mov	eax, DWORD PTR _camView$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 164  : 	camView->y = y;

	mov	ecx, DWORD PTR _camView$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 165  : 	camView->z = z;

	mov	edx, DWORD PTR _camView$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Translate@ACMICamera@@QAEXMMMPAUTpoint@@@Z ENDP	; ACMICamera::Translate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
_costha$ = -24						; size = 4
_cosphi$ = -20						; size = 4
_sintha$ = -16						; size = 4
_sinpsi$ = -12						; size = 4
_sinphi$ = -8						; size = 4
_cospsi$ = -4						; size = 4
_pitch$ = 8						; size = 4
_roll$ = 12						; size = 4
_yaw$ = 16						; size = 4
_viewRotation$ = 20					; size = 4
?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z PROC	; ACMICamera::Rotate
; _this$ = ecx

; 357  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 358  : 	float costha,sintha,cosphi,sinphi,cospsi,sinpsi;
; 359  : 
; 360  : 	costha = (float)cos(pitch);

	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _costha$[ebp]

; 361  : 	sintha = (float)sin(pitch);

	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sintha$[ebp]

; 362  : 	cosphi = (float)cos(roll);

	push	ecx
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cosphi$[ebp]

; 363  : 	sinphi = (float)sin(roll);

	push	ecx
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinphi$[ebp]

; 364  : 	cospsi = (float)cos(yaw);

	push	ecx
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cospsi$[ebp]

; 365  : 	sinpsi = (float)sin(yaw);

	push	ecx
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinpsi$[ebp]

; 366  : 
; 367  : 	viewRotation->M11 = cospsi*costha;

	movss	xmm0, DWORD PTR _cospsi$[ebp]
	mulss	xmm0, DWORD PTR _costha$[ebp]
	mov	eax, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [eax], xmm0

; 368  : 	viewRotation->M21 = sinpsi*costha;

	movss	xmm0, DWORD PTR _sinpsi$[ebp]
	mulss	xmm0, DWORD PTR _costha$[ebp]
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 369  : 	viewRotation->M31 = -sintha;

	movss	xmm0, DWORD PTR _sintha$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 370  : 
; 371  : 	viewRotation->M12 = -sinpsi*cosphi + cospsi*sintha*sinphi;

	movss	xmm0, DWORD PTR _sinpsi$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cosphi$[ebp]
	movss	xmm1, DWORD PTR _cospsi$[ebp]
	mulss	xmm1, DWORD PTR _sintha$[ebp]
	mulss	xmm1, DWORD PTR _sinphi$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 372  : 	viewRotation->M22 = cospsi*cosphi + sinpsi*sintha*sinphi;

	movss	xmm0, DWORD PTR _cospsi$[ebp]
	mulss	xmm0, DWORD PTR _cosphi$[ebp]
	movss	xmm1, DWORD PTR _sinpsi$[ebp]
	mulss	xmm1, DWORD PTR _sintha$[ebp]
	mulss	xmm1, DWORD PTR _sinphi$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 373  : 	viewRotation->M32 = costha*sinphi;

	movss	xmm0, DWORD PTR _costha$[ebp]
	mulss	xmm0, DWORD PTR _sinphi$[ebp]
	mov	edx, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 374  : 
; 375  : 	viewRotation->M13 = sinpsi*sinphi + cospsi*sintha*cosphi;

	movss	xmm0, DWORD PTR _sinpsi$[ebp]
	mulss	xmm0, DWORD PTR _sinphi$[ebp]
	movss	xmm1, DWORD PTR _cospsi$[ebp]
	mulss	xmm1, DWORD PTR _sintha$[ebp]
	mulss	xmm1, DWORD PTR _cosphi$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 376  : 	viewRotation->M23 = -cospsi*sinphi + sinpsi*sintha*cosphi;

	movss	xmm0, DWORD PTR _cospsi$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sinphi$[ebp]
	movss	xmm1, DWORD PTR _sinpsi$[ebp]
	mulss	xmm1, DWORD PTR _sintha$[ebp]
	mulss	xmm1, DWORD PTR _cosphi$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 377  : 	viewRotation->M33 = costha*cosphi;

	movss	xmm0, DWORD PTR _costha$[ebp]
	mulss	xmm0, DWORD PTR _cosphi$[ebp]
	mov	edx, DWORD PTR _viewRotation$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 378  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z ENDP	; ACMICamera::Rotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_sintha$ = -16						; size = 4
_sinpsi$ = -12						; size = 4
_cospsi$ = -8						; size = 4
_costha$ = -4						; size = 4
_pitch$ = 8						; size = 4
___formal$ = 12						; size = 4
_yaw$ = 16						; size = 4
_tilt$ = 20						; size = 4
?Tilt@ACMICamera@@QAEXMMMPAUTrotation@@@Z PROC		; ACMICamera::Tilt
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 
; 339  : 	float costha, sintha, cospsi, sinpsi;
; 340  : 
; 341  : 	// Be around ownship, looking at it
; 342  : 	costha = (float)cos(pitch);

	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _costha$[ebp]

; 343  : 	sintha = (float)sin(pitch);

	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sintha$[ebp]

; 344  : 	cospsi = (float)cos(yaw);

	push	ecx
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cospsi$[ebp]

; 345  : 	sinpsi = (float)sin(yaw);

	push	ecx
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sinpsi$[ebp]

; 346  : 
; 347  : 	tilt->M11 = cospsi * costha;

	movss	xmm0, DWORD PTR _cospsi$[ebp]
	mulss	xmm0, DWORD PTR _costha$[ebp]
	mov	eax, DWORD PTR _tilt$[ebp]
	movss	DWORD PTR [eax], xmm0

; 348  : 	tilt->M12 = sinpsi * costha;

	movss	xmm0, DWORD PTR _sinpsi$[ebp]
	mulss	xmm0, DWORD PTR _costha$[ebp]
	mov	ecx, DWORD PTR _tilt$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 349  : 	tilt->M13 = -sintha;

	movss	xmm0, DWORD PTR _sintha$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _tilt$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 350  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Tilt@ACMICamera@@QAEXMMMPAUTrotation@@@Z ENDP		; ACMICamera::Tilt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
_tilt$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?UpdatePannerPosition@ACMICamera@@QAEXXZ PROC		; ACMICamera::UpdatePannerPosition
; _this$ = ecx

; 321  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 	Trotation 
; 323  : 		tilt;
; 324  : 
; 325  : 	Rotate(_objectEl, 0.0F, _objectAz, &_rot);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+92]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+104]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Rotate

; 326  : 
; 327  : 	// Be around ownship, looking at it
; 328  : 	Tilt(_objectEl, 0.0F, _objectAz, &tilt);

	lea	eax, DWORD PTR _tilt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+92]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+104]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tilt@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Tilt

; 329  : 	Translate(_objectRange * tilt.M11, _objectRange * tilt.M12, _objectRange * tilt.M13, &_pos);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+120]
	mulss	xmm0, DWORD PTR _tilt$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+120]
	mulss	xmm0, DWORD PTR _tilt$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+120]
	mulss	xmm0, DWORD PTR _tilt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Translate@ACMICamera@@QAEXMMMPAUTpoint@@@Z ; ACMICamera::Translate

; 330  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdatePannerPosition@ACMICamera@@QAEXXZ ENDP		; ACMICamera::UpdatePannerPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
tv328 = -32						; size = 4
_dist$ = -28						; size = 4
_dRoll$ = -24						; size = 4
_this$ = -20						; size = 4
_dPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_dT$ = 8						; size = 4
?UpdateChasePosition@ACMICamera@@QAEXM@Z PROC		; ACMICamera::UpdateChasePosition
; _this$ = ecx

; 504  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 505  : 	Tpoint dPos;
; 506  : 	float dRoll;
; 507  : 	float dist;
; 508  : 
; 509  : 	DoAction();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoAction@ACMICamera@@AAEXXZ		; ACMICamera::DoAction

; 510  : 
; 511  : 	if ( dT < 0.0f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dT$[ebp]
	jbe	SHORT $LN12@UpdateChas

; 512  : 		dT = -dT;

	movss	xmm0, DWORD PTR _dT$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dT$[ebp], xmm0
	jmp	SHORT $LN10@UpdateChas
$LN12@UpdateChas:

; 513  : 	else if ( dT > 0.0f )

	movss	xmm0, DWORD PTR _dT$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@UpdateChas

; 514  : 		dT = dT;

	movss	xmm0, DWORD PTR _dT$[ebp]
	movss	DWORD PTR _dT$[ebp], xmm0
$LN10@UpdateChas:

; 515  : 
; 516  : 	if(_rotType == LOCAL_ROTATION)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN9@UpdateChas

; 517  : 	{
; 518  : 		_localAz += _azDir * _slewRate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+132]
	mulss	xmm0, DWORD PTR [edx+140]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+96], xmm0

; 519  : 		_localEl += _elDir * _slewRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+136]
	mulss	xmm0, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+108], xmm0

; 520  : 	}
; 521  : 	else

	jmp	SHORT $LN8@UpdateChas
$LN9@UpdateChas:

; 522  : 	{
; 523  : 		// Asmth and elevation angles
; 524  : 		_objectAz += _azDir * _slewRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	mulss	xmm0, DWORD PTR [ecx+140]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+92]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+92], xmm0

; 525  : 		_objectEl += _elDir * _slewRate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+136]
	mulss	xmm0, DWORD PTR [edx+140]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+104], xmm0
$LN8@UpdateChas:

; 526  : 	}
; 527  : 
; 528  : 	// Be around ownship, looking at it
; 529  : 	// Tilt(_objectEl, 0.0F, _objectAz, &tilt);
; 530  : 	// Translate(_objectRange * tilt.M11, _objectRange * tilt.M12, _objectRange * tilt.M13, &_pos);
; 531  : 
; 532  : 	/*
; 533  : 	if ( _tracking )
; 534  : 		Rotate(_localEl, 0.0F, _localAz, &_rot);
; 535  : 	else
; 536  : 		Rotate(_objectEl, _objectRoll, _objectAz, &_rot);
; 537  : 	*/
; 538  : 
; 539  : 	 // "spring" constants for camera roll and move
; 540  : 	 #define KMOVE			0.29f
; 541  : 	 #define KROLL			0.30f
; 542  : 
; 543  : 	 // convert frame loop time to secs from ms
; 544  : 	 // dT = (float)frameTime * 0.001;
; 545  : 
; 546  : 	 // get the diff between desired and current camera pos
; 547  : 	 dPos.x = _chasePos.x - _pos.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	subss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _dPos$[ebp], xmm0

; 548  : 	 dPos.y = _chasePos.y - _pos.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR [edx+36]
	movss	DWORD PTR _dPos$[ebp+4], xmm0

; 549  : 	 dPos.z = _chasePos.z - _pos.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+160]
	subss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR _dPos$[ebp+8], xmm0

; 550  : 
; 551  : 	 // send the camera thataway
; 552  : 	 _pos.x += dPos.x * dT * KMOVE;

	movss	xmm0, DWORD PTR _dPos$[ebp]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mulss	xmm0, DWORD PTR __real@3e947ae1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 553  : 	 _pos.y += dPos.y * dT * KMOVE;

	movss	xmm0, DWORD PTR _dPos$[ebp+4]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mulss	xmm0, DWORD PTR __real@3e947ae1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 554  : 	 _pos.z += dPos.z * dT * KMOVE;

	movss	xmm0, DWORD PTR _dPos$[ebp+8]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mulss	xmm0, DWORD PTR __real@3e947ae1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 555  : 
; 556  : 	 // "look at" vector
; 557  : 	 dPos.x = -_pos.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dPos$[ebp], xmm0

; 558  : 	 dPos.y = -_pos.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dPos$[ebp+4], xmm0

; 559  : 	 dPos.z = -_pos.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dPos$[ebp+8], xmm0

; 560  : 
; 561  : 	 // get new camera roll
; 562  : 	 if ( _objectRoll < -0.5f * PI && _chaseRoll > 0.5f * PI )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bfc90fdb
	comiss	xmm0, DWORD PTR [edx+116]
	jbe	SHORT $LN7@UpdateChas
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+176]
	comiss	xmm0, DWORD PTR __real@3fc90fdb
	jbe	SHORT $LN7@UpdateChas

; 563  : 	 {
; 564  : 		 dRoll = _objectRoll + (2.0f * PI) - _chaseRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+116]
	addss	xmm0, DWORD PTR __real@40c90fdb
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+176]
	movss	DWORD PTR _dRoll$[ebp], xmm0
	jmp	SHORT $LN4@UpdateChas
$LN7@UpdateChas:

; 565  : 	 }
; 566  : 	 else if ( _objectRoll > 0.5f * PI && _chaseRoll < -0.5f * PI )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+116]
	comiss	xmm0, DWORD PTR __real@3fc90fdb
	jbe	SHORT $LN5@UpdateChas
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bfc90fdb
	comiss	xmm0, DWORD PTR [ecx+176]
	jbe	SHORT $LN5@UpdateChas

; 567  : 	 {
; 568  : 		 dRoll = _objectRoll - (0.5f * PI) - _chaseRoll;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+116]
	subss	xmm0, DWORD PTR __real@3fc90fdb
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+176]
	movss	DWORD PTR _dRoll$[ebp], xmm0

; 569  : 	 }
; 570  : 	 else // same sign

	jmp	SHORT $LN4@UpdateChas
$LN5@UpdateChas:

; 571  : 	 {
; 572  : 		dRoll = _objectRoll - _chaseRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+116]
	subss	xmm0, DWORD PTR [edx+176]
	movss	DWORD PTR _dRoll$[ebp], xmm0
$LN4@UpdateChas:

; 573  : 	 }
; 574  : 
; 575  : 	 // apply roll
; 576  : 	 _chaseRoll += dRoll * dT * KROLL;

	movss	xmm0, DWORD PTR _dRoll$[ebp]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+176]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+176], xmm0

; 577  : 
; 578  : 	 // keep chase cam roll with +/- 180
; 579  : 	 if ( _chaseRoll > 1.0f * PI )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+176]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN3@UpdateChas

; 580  : 		_chaseRoll -= 2.0f * PI;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+176]
	subss	xmm0, DWORD PTR __real@40c90fdb
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+176], xmm0
	jmp	SHORT $LN1@UpdateChas
$LN3@UpdateChas:

; 581  : 	 else if ( _chaseRoll < -1.0f * PI )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR [edx+176]
	jbe	SHORT $LN1@UpdateChas

; 582  : 		_chaseRoll += 2.0f * PI;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+176]
	addss	xmm0, DWORD PTR __real@40c90fdb
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+176], xmm0
$LN1@UpdateChas:

; 583  : 
; 584  : 	 // now get yaw and pitch based on look at vector
; 585  : 	 dist = (float)sqrt( dPos.x * dPos.x + dPos.y * dPos.y + dPos.z * dPos.z );

	movss	xmm0, DWORD PTR _dPos$[ebp]
	mulss	xmm0, DWORD PTR _dPos$[ebp]
	movss	xmm1, DWORD PTR _dPos$[ebp+4]
	mulss	xmm1, DWORD PTR _dPos$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dPos$[ebp+8]
	mulss	xmm1, DWORD PTR _dPos$[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 586  : 	 _objectEl	= (float)-asin( dPos.z/dist );

	movss	xmm0, DWORD PTR _dPos$[ebp+8]
	divss	xmm0, DWORD PTR _dist$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR tv328[ebp]
	movss	xmm0, DWORD PTR tv328[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+104], xmm0

; 587  : 	 _objectAz	= (float)atan2( dPos.y, dPos.x );

	push	ecx
	movss	xmm0, DWORD PTR _dPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dPos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+92]

; 588  : 	 Rotate(_objectEl, _chaseRoll, _objectAz, &_rot);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+176]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+104]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Rotate

; 589  : 
; 590  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateChasePosition@ACMICamera@@QAEXM@Z ENDP		; ACMICamera::UpdateChasePosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
_tilt$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?UpdatePosition@ACMICamera@@QAEXXZ PROC			; ACMICamera::UpdatePosition
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 288  : 	Trotation tilt;
; 289  : 
; 290  : 	DoAction();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoAction@ACMICamera@@AAEXXZ		; ACMICamera::DoAction

; 291  : 
; 292  : 	if(_rotType == LOCAL_ROTATION)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN4@UpdatePosi

; 293  : 	{
; 294  : 		_localAz += _azDir * _slewRate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+132]
	mulss	xmm0, DWORD PTR [edx+140]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+96], xmm0

; 295  : 		_localEl += _elDir * _slewRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+136]
	mulss	xmm0, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+108], xmm0

; 296  : 		Rotate(_objectEl + _localEl, 0.0F, _objectAz + _localAz, &_rot);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+92]
	addss	xmm0, DWORD PTR [edx+96]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+104]
	addss	xmm0, DWORD PTR [ecx+108]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Rotate

; 297  : 	}
; 298  : 	else

	jmp	SHORT $LN3@UpdatePosi
$LN4@UpdatePosi:

; 299  : 	{
; 300  : 		// Asmth and elevation angles
; 301  : 		_objectAz += _azDir * _slewRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+132]
	mulss	xmm0, DWORD PTR [eax+140]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+92]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+92], xmm0

; 302  : 		_objectEl += _elDir * _slewRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+136]
	mulss	xmm0, DWORD PTR [ecx+140]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+104]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+104], xmm0
$LN3@UpdatePosi:

; 303  : 	}
; 304  : 
; 305  : 	// Be around ownship, looking at it
; 306  : 	Tilt(_objectEl, 0.0F, _objectAz, &tilt);

	lea	ecx, DWORD PTR _tilt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+104]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tilt@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Tilt

; 307  : 	Translate(_objectRange * tilt.M11, _objectRange * tilt.M12, _objectRange * tilt.M13, &_pos);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+120]
	mulss	xmm0, DWORD PTR _tilt$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+120]
	mulss	xmm0, DWORD PTR _tilt$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+120]
	mulss	xmm0, DWORD PTR _tilt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Translate@ACMICamera@@QAEXMMMPAUTpoint@@@Z ; ACMICamera::Translate

; 308  : 
; 309  : 	if ( _tracking )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+148], 0
	je	SHORT $LN2@UpdatePosi

; 310  : 		Rotate(_localEl, 0.0F, _localAz, &_rot);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+96]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Rotate

; 311  : 	else

	jmp	SHORT $LN1@UpdatePosi
$LN2@UpdatePosi:

; 312  : 		Rotate(_objectEl, _objectRoll, _objectAz, &_rot);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+92]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+116]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+104]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rotate@ACMICamera@@QAEXMMMPAUTrotation@@@Z ; ACMICamera::Rotate
$LN1@UpdatePosi:

; 313  : 
; 314  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdatePosition@ACMICamera@@QAEXXZ ENDP			; ACMICamera::UpdatePosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_trackingEl$ = -28					; size = 4
_trackingAz$ = -24					; size = 4
_deltaZ$ = -20						; size = 4
_deltaY$ = -16						; size = 4
_deltaRange$ = -12					; size = 4
_deltaX$ = -8						; size = 4
_this$ = -4						; size = 4
_trackingPt$ = 8					; size = 4
?TrackPoint@ACMICamera@@QAEXABUTpoint@@@Z PROC		; ACMICamera::TrackPoint
; _this$ = ecx

; 431  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 432  : 	float
; 433  : 		trackingAz,
; 434  : 		trackingEl;
; 435  : 
; 436  : 	float  
; 437  : 		deltaX,
; 438  : 		deltaY,
; 439  : 		deltaZ,
; 440  : 		deltaRange;
; 441  : 
; 442  : 	if(_tracking == NO_TRACKING)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jne	SHORT $LN4@TrackPoint

; 443  : 		return;

	jmp	$LN5@TrackPoint
$LN4@TrackPoint:

; 444  : 
; 445  : 	deltaX = trackingPt.x - (_worldPos.x + _pos.x );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _trackingPt$[ebp]
	movss	xmm1, DWORD PTR [eax]
	subss	xmm1, xmm0
	movss	DWORD PTR _deltaX$[ebp], xmm1

; 446  : 	deltaY = trackingPt.y - (_worldPos.y + _pos.y );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	addss	xmm0, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _trackingPt$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _deltaY$[ebp], xmm1

; 447  : 
; 448  :    if(deltaX)

	movss	xmm0, DWORD PTR _deltaX$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@TrackPoint

; 449  : 		trackingAz = (float)atan2(deltaY, deltaX);

	push	ecx
	movss	xmm0, DWORD PTR _deltaX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _deltaY$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?atan2@@YAMMM@Z				; atan2
	add	esp, 8
	fstp	DWORD PTR _trackingAz$[ebp]

; 450  : 	else

	jmp	SHORT $LN2@TrackPoint
$LN3@TrackPoint:

; 451  : 		trackingAz = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _trackingAz$[ebp], xmm0
$LN2@TrackPoint:

; 452  : 
; 453  : 	deltaZ = (_worldPos.z + _pos.z ) - trackingPt.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	addss	xmm0, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _trackingPt$[ebp]
	subss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _deltaZ$[ebp], xmm0

; 454  : 
; 455  : #if 1
; 456  : 	deltaRange = 
; 457  : 	(
; 458  : 		(float)sqrt
; 459  : 		(
; 460  : 			deltaX * deltaX +
; 461  : 			deltaY * deltaY + 
; 462  : 			deltaZ * deltaZ
; 463  : 		)
; 464  : 	);

	movss	xmm0, DWORD PTR _deltaX$[ebp]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	movss	xmm1, DWORD PTR _deltaY$[ebp]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _deltaZ$[ebp]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _deltaRange$[ebp]

; 465  : 
; 466  : 	if(deltaRange != 0.0F)

	movss	xmm0, DWORD PTR _deltaRange$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@TrackPoint

; 467  : 	{
; 468  : 		deltaRange = (deltaZ / deltaRange);

	movss	xmm0, DWORD PTR _deltaZ$[ebp]
	divss	xmm0, DWORD PTR _deltaRange$[ebp]
	movss	DWORD PTR _deltaRange$[ebp], xmm0
$LN1@TrackPoint:

; 469  : 	}
; 470  : 	
; 471  : 	trackingEl = (float)asin(deltaRange);

	push	ecx
	movss	xmm0, DWORD PTR _deltaRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR _trackingEl$[ebp]

; 472  : #else
; 473  : 	trackingEl = (float)atan2(sqrt(deltaX*deltaX+deltaY*deltaY), deltaZ);
; 474  : #endif
; 475  : 
; 476  : 	/*
; 477  : 	switch(_tracking)
; 478  : 	{
; 479  : 		case LOCAL_TRACKING:
; 480  : 		{
; 481  : 			SetLocalAz((float)trackingAz);
; 482  : 			SetLocalEl((float)trackingEl);
; 483  : 			break;
; 484  : 		}
; 485  : 		case GLOBAL_TRACKING:
; 486  : 		{
; 487  : 			SetObjectAz((float)trackingAz);
; 488  : 			SetObjectEl((float)trackingEl - TRACKING_OFFSET);
; 489  : 			break;
; 490  : 		}
; 491  : 	}
; 492  : 	*/
; 493  : 	SetLocalAz((float)trackingAz);

	push	ecx
	movss	xmm0, DWORD PTR _trackingAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocalAz@ACMICamera@@QAEXM@Z		; ACMICamera::SetLocalAz

; 494  : 	SetLocalEl((float)trackingEl);

	push	ecx
	movss	xmm0, DWORD PTR _trackingEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocalEl@ACMICamera@@QAEXM@Z		; ACMICamera::SetLocalEl
$LN5@TrackPoint:

; 495  : 	// SetObjectAz((float)trackingAz);
; 496  : 	// SetObjectEl((float)trackingEl);
; 497  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?TrackPoint@ACMICamera@@QAEXABUTpoint@@@Z ENDP		; ACMICamera::TrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
tv73 = -12						; size = 4
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_diff$ = 8						; size = 4
_instruction$ = 12					; size = 4
?SetObjectRange@ACMICamera@@QAEXMH@Z PROC		; ACMICamera::SetObjectRange
; _this$ = ecx

; 409  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 410  : 	switch(instruction)

	mov	eax, DWORD PTR _instruction$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@SetObjectR
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@SetObjectR
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	SHORT $LN1@SetObjectR
	jmp	SHORT $LN4@SetObjectR
$LN3@SetObjectR:

; 411  : 	{
; 412  : 		case ZOOM_IN:
; 413  : 			_objectRange = min(-50.0F, _objectRange + 50.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+120]
	addss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR __real@c2480000
	jbe	SHORT $LN8@SetObjectR
	movss	xmm0, DWORD PTR __real@c2480000
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN9@SetObjectR
$LN8@SetObjectR:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+120]
	addss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR tv73[ebp], xmm0
$LN9@SetObjectR:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR [eax+120], xmm0

; 414  : 			break;

	jmp	SHORT $LN4@SetObjectR
$LN2@SetObjectR:

; 415  : 		case ZOOM_OUT:
; 416  : 			_objectRange -= diff;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+120]
	subss	xmm0, DWORD PTR _diff$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+120], xmm0

; 417  : 			break;

	jmp	SHORT $LN4@SetObjectR
$LN1@SetObjectR:

; 418  : 		case HOME:
; 419  : 			_objectRange = diff;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR [eax+120], xmm0
$LN4@SetObjectR:

; 420  : 			break;
; 421  : 	}
; 422  : 	
; 423  : 	SetRotateType(OBJECT_ROTATION);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotateType@ACMICamera@@QAEXH@Z	; ACMICamera::SetRotateType

; 424  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetObjectRange@ACMICamera@@QAEXMH@Z ENDP		; ACMICamera::SetObjectRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmcminl.cpp
;	COMDAT ?SetLocalAz@ACMICamera@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_diff$ = 8						; size = 4
?SetLocalAz@ACMICamera@@QAEXM@Z PROC			; ACMICamera::SetLocalAz, COMDAT
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 	_localAz = diff;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR [eax+96], xmm0

; 239  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLocalAz@ACMICamera@@QAEXM@Z ENDP			; ACMICamera::SetLocalAz
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmcminl.cpp
;	COMDAT ?SetLocalEl@ACMICamera@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_diff$ = 8						; size = 4
?SetLocalEl@ACMICamera@@QAEXM@Z PROC			; ACMICamera::SetLocalEl, COMDAT
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 	_localEl = diff;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR [eax+108], xmm0

; 230  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLocalEl@ACMICamera@@QAEXM@Z ENDP			; ACMICamera::SetLocalEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_currentAction$ = 8					; size = 4
_az$ = 12						; size = 4
_el$ = 16						; size = 4
?IncrementPannerAzEl@ACMICamera@@QAEXHMM@Z PROC		; ACMICamera::IncrementPannerAzEl
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 391  : 	_action = currentAction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _currentAction$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 392  : 	_objectAz = _pannerAz + az;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+100]
	addss	xmm0, DWORD PTR _az$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+92], xmm0

; 393  : 	_objectEl = _pannerEl + el;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+112]
	addss	xmm0, DWORD PTR _el$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+104], xmm0

; 394  : 
; 395  : 	MonoPrint("PannA: %lf\n", _pannerAz);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+100]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@FCGIMOBP@PannA?3?5?$CFlf?6?$AA@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 396  : 	MonoPrint("PannE: %lf\n", _pannerEl);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+112]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@NGCCMAOF@PannE?3?5?$CFlf?6?$AA@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 397  : 	MonoPrint("ObjeA: %lf\n", _objectAz);

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+92]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@DOLIOEDE@ObjeA?3?5?$CFlf?6?$AA@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 398  : 	MonoPrint("ObjeE: %lf\n", _objectEl);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+104]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@LKPCOKMO@ObjeE?3?5?$CFlf?6?$AA@
	call	_MonoPrint

; 399  : 
; 400  : 	SetAzDir(0.0F);

	add	esp, 8
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAzDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetAzDir

; 401  : 	SetElDir(0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetElDir@ACMICamera@@QAEXM@Z		; ACMICamera::SetElDir

; 402  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?IncrementPannerAzEl@ACMICamera@@QAEXHMM@Z ENDP		; ACMICamera::IncrementPannerAzEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmcminl.cpp
;	COMDAT ?SetAzDir@ACMICamera@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_diff$ = 8						; size = 4
?SetAzDir@ACMICamera@@QAEXM@Z PROC			; ACMICamera::SetAzDir, COMDAT
; _this$ = ecx

; 182  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 	_azDir = diff;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR [eax+132], xmm0

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAzDir@ACMICamera@@QAEXM@Z ENDP			; ACMICamera::SetAzDir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmcminl.cpp
;	COMDAT ?SetElDir@ACMICamera@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_diff$ = 8						; size = 4
?SetElDir@ACMICamera@@QAEXM@Z PROC			; ACMICamera::SetElDir, COMDAT
; _this$ = ecx

; 173  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 	_elDir = diff;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR [eax+136], xmm0

; 175  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetElDir@ACMICamera@@QAEXM@Z ENDP			; ACMICamera::SetElDir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmcminl.cpp
;	COMDAT ?SetRotateType@ACMICamera@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?SetRotateType@ACMICamera@@QAEXH@Z PROC			; ACMICamera::SetRotateType, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 18   : //!	_rotType = _type;
; 19   : 	_rotType = type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 20   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRotateType@ACMICamera@@QAEXH@Z ENDP			; ACMICamera::SetRotateType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?SetType@ACMICamera@@QAEXH@Z PROC			; ACMICamera::SetType
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	_type = type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 64   : 	_objectAz = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+92], xmm0

; 65   : 	_objectEl = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+104], xmm0

; 66   : 	_objectRoll = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+116], xmm0

; 67   : 	_localAz = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+96], xmm0

; 68   : 	_localEl = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+108], xmm0

; 69   : 	_objectRange = HOME_RANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c3960000
	movss	DWORD PTR [ecx+120], xmm0

; 70   : 	_rotate = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+124], xmm0

; 71   : 	_azDir = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+132], xmm0

; 72   : 	_elDir = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+136], xmm0

; 73   : 	_slewRate = 0.1F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [edx+140], xmm0

; 74   : 	_tracking = NO_TRACKING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0

; 75   : 
; 76   : 	switch(_type)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv77[ebp], edx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN1@SetType
	cmp	DWORD PTR tv77[ebp], 1
	je	SHORT $LN2@SetType
	jmp	SHORT $LN3@SetType
$LN2@SetType:

; 77   : 	{
; 78   : 		case ATTACHED_CAM:
; 79   : 		{
; 80   : 			_rotType = OBJECT_ROTATION;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 1

; 81   : 			break;

	jmp	SHORT $LN3@SetType
$LN1@SetType:

; 82   : 		}
; 83   : 		case DETTACHED_CAM:
; 84   : 		{
; 85   : 			_rotType = LOCAL_ROTATION;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN3@SetType:

; 86   : 			break;
; 87   : 		}
; 88   : 	}
; 89   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@ACMICamera@@QAEXH@Z ENDP			; ACMICamera::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ACMICamera@@QAE@XZ PROC				; ACMICamera::~ACMICamera
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : //	fclose(debugData);
; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1ACMICamera@@QAE@XZ ENDP				; ACMICamera::~ACMICamera
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmicam.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ACMICamera@@QAE@XZ PROC				; ACMICamera::ACMICamera
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	_pos.x = 0.0F; _pos.y = 0.0F; _pos.z =  0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+36], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+40], xmm0

; 38   : 
; 39   : 	_rot.M11 = 1.0F; _rot.M12 = 0.0F; _rot.M13 = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+60], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+64], xmm0

; 40   : 	_rot.M21 = 0.0F; _rot.M22 = 1.0F; _rot.M23 = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+72], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+76], xmm0

; 41   : 	_rot.M31 = 0.0F; _rot.M32 = 0.0F; _rot.M33 = 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+80], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+84], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0

; 42   : 	_objectAz = _pannerAz = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+100], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+92], xmm0

; 43   : 	_objectEl = _pannerEl = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+112], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+104], xmm0

; 44   : 
; 45   : //	debugData = fopen("debugData.txt", "wb");
; 46   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ACMICamera@@QAE@XZ ENDP				; ACMICamera::ACMICamera
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan2@@YAMMM@Z
_TEXT	SEGMENT
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
?atan2@@YAMMM@Z PROC					; atan2, COMDAT

; 507  :         {return (atan2f(_Y, _X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	ebp
	ret	0
?atan2@@YAMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv77 = -12						; size = 8
tv79 = -4						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_asin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
END
