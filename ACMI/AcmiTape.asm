; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\ACMI\src\AcmiTape.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?tempTarget@@3JA				; tempTarget
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?importEntityList@@3PAULIST@@A			; importEntityList
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?importFeatList@@3PAULIST@@A			; importFeatList
PUBLIC	?importPosList@@3PAULIST@@A			; importPosList
PUBLIC	?importEventList@@3PAULIST@@A			; importEventList
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?importEntEventList@@3PAULIST@@A		; importEntEventList
PUBLIC	?importEntityListEnd@@3PAULIST@@A		; importEntityListEnd
PUBLIC	?importFeatListEnd@@3PAULIST@@A			; importFeatListEnd
PUBLIC	?importPosListEnd@@3PAULIST@@A			; importPosListEnd
PUBLIC	?importEventListEnd@@3PAULIST@@A		; importEventListEnd
PUBLIC	?importEntEventListEnd@@3PAULIST@@A		; importEntEventListEnd
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?importFeatEventList@@3PAULIST@@A		; importFeatEventList
PUBLIC	?importFeatEventListEnd@@3PAULIST@@A		; importFeatEventListEnd
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?importNumPos@@3HA				; importNumPos
PUBLIC	?importNumEnt@@3HA				; importNumEnt
PUBLIC	?importNumFeat@@3HA				; importNumFeat
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?importNumFeatEvents@@3HA			; importNumFeatEvents
PUBLIC	?importNumEvents@@3HA				; importNumEvents
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?importNumEntEvents@@3HA			; importNumEntEvents
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?importEntOffset@@3HA				; importEntOffset
PUBLIC	?importFeatOffset@@3HA				; importFeatOffset
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?importFeatEventOffset@@3HA			; importFeatEventOffset
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?ACMI_Callsigns@@3PAUACMI_CallRec@@A		; ACMI_Callsigns
PUBLIC	?importPosOffset@@3HA				; importPosOffset
PUBLIC	?importEventOffset@@3HA				; importEventOffset
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?importEntEventOffset@@3HA			; importEntEventOffset
PUBLIC	?importEventTrailerList@@3PAUACMIEventTrailer@@A ; importEventTrailerList
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?Import_Callsigns@@3PAUACMI_CallRec@@A		; Import_Callsigns
PUBLIC	?import_count@@3JA				; import_count
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
_BSS	SEGMENT
?tempTarget@@3JA DD 01H DUP (?)				; tempTarget
?importEntityList@@3PAULIST@@A DD 01H DUP (?)		; importEntityList
?importFeatList@@3PAULIST@@A DD 01H DUP (?)		; importFeatList
?importPosList@@3PAULIST@@A DD 01H DUP (?)		; importPosList
?importEventList@@3PAULIST@@A DD 01H DUP (?)		; importEventList
?importEntEventList@@3PAULIST@@A DD 01H DUP (?)		; importEntEventList
?importEntityListEnd@@3PAULIST@@A DD 01H DUP (?)	; importEntityListEnd
?importFeatListEnd@@3PAULIST@@A DD 01H DUP (?)		; importFeatListEnd
?importPosListEnd@@3PAULIST@@A DD 01H DUP (?)		; importPosListEnd
?importEventListEnd@@3PAULIST@@A DD 01H DUP (?)		; importEventListEnd
?importEntEventListEnd@@3PAULIST@@A DD 01H DUP (?)	; importEntEventListEnd
?importFeatEventList@@3PAULIST@@A DD 01H DUP (?)	; importFeatEventList
?importFeatEventListEnd@@3PAULIST@@A DD 01H DUP (?)	; importFeatEventListEnd
?importNumPos@@3HA DD 01H DUP (?)			; importNumPos
?importNumEnt@@3HA DD 01H DUP (?)			; importNumEnt
?importNumFeat@@3HA DD 01H DUP (?)			; importNumFeat
?importNumFeatEvents@@3HA DD 01H DUP (?)		; importNumFeatEvents
?importNumEvents@@3HA DD 01H DUP (?)			; importNumEvents
?importNumEntEvents@@3HA DD 01H DUP (?)			; importNumEntEvents
?importEntOffset@@3HA DD 01H DUP (?)			; importEntOffset
?importFeatOffset@@3HA DD 01H DUP (?)			; importFeatOffset
?importFeatEventOffset@@3HA DD 01H DUP (?)		; importFeatEventOffset
?ACMI_Callsigns@@3PAUACMI_CallRec@@A DD 01H DUP (?)	; ACMI_Callsigns
?importPosOffset@@3HA DD 01H DUP (?)			; importPosOffset
?importEventOffset@@3HA DD 01H DUP (?)			; importEventOffset
?importEntEventOffset@@3HA DD 01H DUP (?)		; importEntEventOffset
?importEventTrailerList@@3PAUACMIEventTrailer@@A DD 01H DUP (?) ; importEventTrailerList
?Import_Callsigns@@3PAUACMI_CallRec@@A DD 01H DUP (?)	; Import_Callsigns
?import_count@@3JA DD 01H DUP (?)			; import_count
_BSS	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
PUBLIC	__tcschr
PUBLIC	?_tcschr@@YAPADPADI@Z				; _tcschr
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_atanf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z	; DrawableObject::GetPosition
PUBLIC	?SetScale@DrawableObject@@QAEXM@Z		; DrawableObject::SetScale
PUBLIC	?InDisplayList@DrawableObject@@QAEHXZ		; DrawableObject::InDisplayList
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?KeepStaleSegs@DrawableTrail@@QAEXH@Z		; DrawableTrail::KeepStaleSegs
PUBLIC	?SetTextureSet@DrawableBSP@@QAEXK@Z		; DrawableBSP::SetTextureSet
PUBLIC	?Label@DrawableBSP@@QAEPADXZ			; DrawableBSP::Label
PUBLIC	?GetID@DrawableBSP@@QAEHXZ			; DrawableBSP::GetID
PUBLIC	?SetYPR@VuEntity@@QAEXMMM@Z			; VuEntity::SetYPR
PUBLIC	?SetYPRDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPRDelta
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	_DestroyACMIRawPositionDataList
PUBLIC	_DeleteACMIRawPositionData
PUBLIC	_DeleteACMIEntityPositionData
PUBLIC	_DeleteACMIEntityData
PUBLIC	_DeleteACMIEventHeader
PUBLIC	_DeleteACMIFeatEventImportData
PUBLIC	_CompareEventTrailer
PUBLIC	??0ACMITape@@QAE@PADPAVRenderOTW@@PAVRViewPoint@@@Z ; ACMITape::ACMITape
PUBLIC	??1ACMITape@@QAE@XZ				; ACMITape::~ACMITape
PUBLIC	?Import@ACMITape@@SAHPAD0@Z			; ACMITape::Import
PUBLIC	?WriteTapeFile@ACMITape@@SAXPADPAUACMITapeHeader@@@Z ; ACMITape::WriteTapeFile
PUBLIC	?NumEntities@ACMITape@@QAEHXZ			; ACMITape::NumEntities
PUBLIC	?EntityType@ACMITape@@QAEHH@Z			; ACMITape::EntityType
PUBLIC	?GetEntityPosition@ACMITape@@QAEHHAAM00000000@Z	; ACMITape::GetEntityPosition
PUBLIC	?SetGeneralEventCallbacks@ACMITape@@QAEXP6AXPAV1@UEventIdData@@PAX2@Z32@Z ; ACMITape::SetGeneralEventCallbacks
PUBLIC	?IsLoaded@ACMITape@@QAEHXZ			; ACMITape::IsLoaded
PUBLIC	?GetNewSimTime@ACMITape@@QAEMM@Z		; ACMITape::GetNewSimTime
PUBLIC	?SetHeadPosition@ACMITape@@QAEXM@Z		; ACMITape::SetHeadPosition
PUBLIC	?HeadPosition@ACMITape@@QAEMXZ			; ACMITape::HeadPosition
PUBLIC	?Update@ACMITape@@QAEXM@Z			; ACMITape::Update
PUBLIC	?AngleInterp@ACMITape@@QAEMMMM@Z		; ACMITape::AngleInterp
PUBLIC	?GetSimTapeEntity@ACMITape@@QAEPAUSimTapeEntity@@H@Z ; ACMITape::GetSimTapeEntity
PUBLIC	?IsEntityInFrame@ACMITape@@QAEHH@Z		; ACMITape::IsEntityInFrame
PUBLIC	?InsertEntityInFrame@ACMITape@@QAEXH@Z		; ACMITape::InsertEntityInFrame
PUBLIC	?RemoveEntityFromFrame@ACMITape@@QAEXH@Z	; ACMITape::RemoveEntityFromFrame
PUBLIC	?GetEntityCurrentTarget@ACMITape@@QAEHH@Z	; ACMITape::GetEntityCurrentTarget
PUBLIC	?UpdateSimTapeEntities@ACMITape@@QAEXXZ		; ACMITape::UpdateSimTapeEntities
PUBLIC	?ObjectSetData@ACMITape@@QAEXPAVSimBaseClass@@PAUTpoint@@PAUTrotation@@@Z ; ACMITape::ObjectSetData
PUBLIC	?SetWingTrails@ACMITape@@QAEXH@Z		; ACMITape::SetWingTrails
PUBLIC	?GetTextEvents@ACMITape@@QAEPAXPAH@Z		; ACMITape::GetTextEvents
PUBLIC	?GetCallsignList@ACMITape@@QAEPAXPAJ@Z		; ACMITape::GetCallsignList
PUBLIC	?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z	; ACMITape::EntityData
PUBLIC	?Init@ACMITape@@AAEXXZ				; ACMITape::Init
PUBLIC	?ParseEntities@ACMITape@@CAXXZ			; ACMITape::ParseEntities
PUBLIC	?ThreadEntityPositions@ACMITape@@CAXPAUACMITapeHeader@@@Z ; ACMITape::ThreadEntityPositions
PUBLIC	?ThreadEntityEvents@ACMITape@@CAXPAUACMITapeHeader@@@Z ; ACMITape::ThreadEntityEvents
PUBLIC	?ImportTextEventList@ACMITape@@CAXPAU_iobuf@@PAUACMITapeHeader@@@Z ; ACMITape::ImportTextEventList
PUBLIC	?FeatureData@ACMITape@@AAEPAUACMIEntityData@@H@Z ; ACMITape::FeatureData
PUBLIC	?CurrentFeaturePositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentFeaturePositionHead
PUBLIC	?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityPositionHead
PUBLIC	?CurrentEntityEventHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityEventHead
PUBLIC	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
PUBLIC	?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadPrev
PUBLIC	?GeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@XZ ; ACMITape::GeneralEventData
PUBLIC	?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z ; ACMITape::GetGeneralEventData
PUBLIC	?Next@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z	; ACMITape::Next
PUBLIC	?Prev@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z	; ACMITape::Prev
PUBLIC	?GeneralEventTrailer@ACMITape@@AAEPAUACMIEventTrailer@@XZ ; ACMITape::GeneralEventTrailer
PUBLIC	?Next@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z	; ACMITape::Next
PUBLIC	?Prev@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z	; ACMITape::Prev
PUBLIC	?CurrFeatEvent@ACMITape@@AAEPAUACMIFeatEvent@@XZ ; ACMITape::CurrFeatEvent
PUBLIC	?Next@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z	; ACMITape::Next
PUBLIC	?Prev@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z	; ACMITape::Prev
PUBLIC	?AdvanceEntityPositionHead@ACMITape@@AAEXH@Z	; ACMITape::AdvanceEntityPositionHead
PUBLIC	?AdvanceEntityEventHead@ACMITape@@AAEXH@Z	; ACMITape::AdvanceEntityEventHead
PUBLIC	?AdvanceGeneralEventHeadHeader@ACMITape@@AAEXXZ	; ACMITape::AdvanceGeneralEventHeadHeader
PUBLIC	?AdvanceGeneralEventHeadTrailer@ACMITape@@AAEXXZ ; ACMITape::AdvanceGeneralEventHeadTrailer
PUBLIC	?AdvanceFeatEventHead@ACMITape@@AAEXXZ		; ACMITape::AdvanceFeatEventHead
PUBLIC	?AdvanceAllHeads@ACMITape@@AAEXXZ		; ACMITape::AdvanceAllHeads
PUBLIC	?SetupSimTapeEntities@ACMITape@@AAEXXZ		; ACMITape::SetupSimTapeEntities
PUBLIC	?CleanupSimTapeEntities@ACMITape@@AAEXXZ	; ACMITape::CleanupSimTapeEntities
PUBLIC	?OpenTapeFile@ACMITape@@AAEJPAD@Z		; ACMITape::OpenTapeFile
PUBLIC	?CloseTapeFile@ACMITape@@AAEXXZ			; ACMITape::CloseTapeFile
PUBLIC	?CleanupEventList@ACMITape@@AAEXXZ		; ACMITape::CleanupEventList
PUBLIC	?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z ; ACMITape::InsertActiveEvent
PUBLIC	?RemoveActiveEvent@ACMITape@@AAEXPAPAU_ActiveEvent@@@Z ; ACMITape::RemoveActiveEvent
PUBLIC	?UpdateActiveEvents@ACMITape@@AAEXXZ		; ACMITape::UpdateActiveEvents
PUBLIC	?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z ; ACMITape::CreateFeatureDrawable
PUBLIC	?FindComponentFeature@ACMITape@@AAEPAVSimBaseClass@@JH@Z ; ACMITape::FindComponentFeature
PUBLIC	?UpdateTracerEvent@ACMITape@@AAEXPAUTracerEventData@@M@Z ; ACMITape::UpdateTracerEvent
PUBLIC	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetCampaignFlag
PUBLIC	?SetCampaignFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetCampaignFlag
PUBLIC	?Status@SimBaseClass@@QBEHXZ			; SimBaseClass::Status
PUBLIC	??_GSfxClass@@QAEPAXI@Z				; SfxClass::`scalar deleting destructor'
PUBLIC	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
PUBLIC	?DestroyTheList@@YAXPAULIST@@@Z			; DestroyTheList
PUBLIC	?DefaultForwardACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z ; DefaultForwardACMIGeneralEventCallback
PUBLIC	?DefaultReverseACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z ; DefaultReverseACMIGeneralEventCallback
PUBLIC	?ReadRawACMIPositionData@@YAHPAU_iobuf@@AAUACMIRawPositionData@@@Z ; ReadRawACMIPositionData
PUBLIC	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0EF@HDIDEHKI@General?5event?5occured?5in?5forward@ ; `string'
PUBLIC	??_C@_0EF@GKJIDJHD@General?5event?5occured?5in?5reverse@ ; `string'
PUBLIC	??_C@_08DIILMCIP@acmibin?2?$AA@			; `string'
PUBLIC	??_C@_0CM@JNEEFDOD@Entity?5?$CFd?3?5Type?5?$DN?5?$CFd?0?5Id?5?$DN?5?$CFd?0?5O@ ; `string'
PUBLIC	??_C@_0CI@GLDDLJCL@Unable?5to?5test?5memory?5mapped?5tap@ ; `string'
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BD@JECPNOK@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0BP@GDDCLOAC@Error?5opening?5acmi?5flight?5file?$AA@ ; `string'
PUBLIC	??_C@_0CI@FJDDFKJJ@ACMITape?5Import?3?5Reading?5Raw?5Dat@ ; `string'
PUBLIC	??_C@_0CI@POBDCJEJ@ACMITape?5Import?3?5Parsing?5Entitie@ ; `string'
PUBLIC	??_C@_0CL@MAGFLMAL@ACMITape?5Import?3?5Threading?5Posit@ ; `string'
PUBLIC	??_C@_0CP@NAKIBKKI@ACMITape?5Import?3?5Threading?5Entit@ ; `string'
PUBLIC	??_C@_0CJ@CBDOLJBO@ACMITape?5Import?3?5Writing?5Tape?5Fi@ ; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0BN@POLMAADA@Error?5opening?5new?5tape?5file?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@FBPPAKAM@Error?5writing?5new?5tape?5file?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@GKMGOOKA@Unable?5to?5Open?5Tape?5File?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@ONECOFNE@Unable?5to?5to?5read?5tape?5header?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@DGLPMPEG@Invalid?5Tape?5File?6?$AA@	; `string'
PUBLIC	??_C@_0CA@CJCMBNNE@CreateFile?5failed?5on?5tape?5open?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@LHLGEOPK@CreateFileMapping?5failed?5on?5tape@ ; `string'
PUBLIC	??_C@_0CD@FIBPIHAP@MapViewOfFile?5failed?5on?5tape?5ope@ ; `string'
PUBLIC	??_C@_0O@DFPLFLLG@Ejected?5Pilot?$AA@		; `string'
PUBLIC	??_C@_09MJDCFFNJ@?$CF0?40f?5Rng?$AA@		; `string'
PUBLIC	??_C@_09LABFLCHL@?$CF0?40f?5Deg?$AA@		; `string'
PUBLIC	??_C@_08HOOMBMBP@?$CF0?40f?5ft?$AA@		; `string'
PUBLIC	??_C@_09NLDMLMDP@?$CF0?40f?5Kts?$AA@		; `string'
PUBLIC	??_C@_0M@NJALOMFG@?$CF0?40f?5deg?1s?$AA@	; `string'
PUBLIC	??_C@_0CC@JEGADOOG@Error?5writing?5TAPE?5event?5element@ ; `string'
PUBLIC	??_C@_0BK@FLEPGJPC@Error?5seeking?5TAPE?5start?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@FMHONLIG@Error?5writing?5TAPE?5header?5again?6@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@392c987a
PUBLIC	__real@3a83126f
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d800000
PUBLIC	__real@3d924925
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3fa66666
PUBLIC	__real@40000000
PUBLIC	__real@40200000
PUBLIC	__real@40400000
PUBLIC	__real@40490fd9
PUBLIC	__real@40800000
PUBLIC	__real@40c90fd9
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@42652ee1
PUBLIC	__real@42f00000
PUBLIC	__real@43b40000
PUBLIC	__real@447a0000
PUBLIC	__real@44898000
PUBLIC	__real@bf800000
PUBLIC	__real@c0e00000
PUBLIC	__real@c1a00000
PUBLIC	__real@c1f00000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fscanf:PROC
EXTRN	_fseek:PROC
EXTRN	_fwrite:PROC
EXTRN	_remove:PROC
EXTRN	_sprintf:PROC
EXTRN	_qsort:PROC
EXTRN	__mbschr:PROC
EXTRN	_acos:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0DrawableTrail@@QAE@HM@Z:PROC			; DrawableTrail::DrawableTrail
EXTRN	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z:PROC ; DrawableTrail::AddPointAtHead
EXTRN	?RewindTrail@DrawableTrail@@QAEHK@Z:PROC	; DrawableTrail::RewindTrail
EXTRN	?TrimTrail@DrawableTrail@@QAEXH@Z:PROC		; DrawableTrail::TrimTrail
EXTRN	??0DrawableTracer@@QAE@M@Z:PROC			; DrawableTracer::DrawableTracer
EXTRN	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z:PROC ; RViewPoint::InsertObject
EXTRN	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z:PROC ; RViewPoint::RemoveObject
EXTRN	?SetTextureSet@ObjectInstance@@QAEXH@Z:PROC	; ObjectInstance::SetTextureSet
EXTRN	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z:PROC ; DrawableBSP::DrawableBSP
EXTRN	?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z:PROC ; DrawableBSP::Update
EXTRN	?SetDOFangle@DrawableBSP@@QAEXHM@Z:PROC		; DrawableBSP::SetDOFangle
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	??0Drawable2D@@QAE@HMPAUTpoint@@@Z:PROC		; Drawable2D::Drawable2D
EXTRN	?SetPosition@Drawable2D@@QAEXPAUTpoint@@@Z:PROC	; Drawable2D::SetPosition
EXTRN	??0DrawablePoled@@QAE@HPBUTpoint@@PBUTrotation@@M@Z:PROC ; DrawablePoled::DrawablePoled
EXTRN	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z:PROC	; DrawablePoled::SetDataLabel
EXTRN	??0DrawablePlatform@@QAE@M@Z:PROC		; DrawablePlatform::DrawablePlatform
EXTRN	?InsertStaticSurface@DrawablePlatform@@QAEXPAVDrawableBuilding@@@Z:PROC ; DrawablePlatform::InsertStaticSurface
EXTRN	?InsertStaticObject@DrawablePlatform@@QAEXPAVDrawableObject@@@Z:PROC ; DrawablePlatform::InsertStaticObject
EXTRN	??0DrawableBuilding@@QAE@HPAUTpoint@@MM@Z:PROC	; DrawableBuilding::DrawableBuilding
EXTRN	??0DrawableRoadbed@@QAE@HHPAUTpoint@@MMMM@Z:PROC ; DrawableRoadbed::DrawableRoadbed
EXTRN	??0DrawableBridge@@QAE@M@Z:PROC			; DrawableBridge::DrawableBridge
EXTRN	?AddSegment@DrawableBridge@@QAEXPAVDrawableRoadbed@@@Z:PROC ; DrawableBridge::AddSegment
EXTRN	?ReplacePiece@DrawableBridge@@QAEXPAVDrawableRoadbed@@0@Z:PROC ; DrawableBridge::ReplacePiece
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?SetDelta@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetDelta
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	?SetStatusBit@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::SetStatusBit
EXTRN	?ClearStatusBit@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::ClearStatusBit
EXTRN	??0SfxClass@@QAE@HPAUTpoint@@MM@Z:PROC		; SfxClass::SfxClass
EXTRN	??0SfxClass@@QAE@HHPAUTpoint@@0MM@Z:PROC	; SfxClass::SfxClass
EXTRN	??0SfxClass@@QAE@HHPAVSimBaseClass@@MM@Z:PROC	; SfxClass::SfxClass
EXTRN	??1SfxClass@@QAE@XZ:PROC			; SfxClass::~SfxClass
EXTRN	?ACMIStart@SfxClass@@QAEXPAVRViewPoint@@MM@Z:PROC ; SfxClass::ACMIStart
EXTRN	?ACMIExec@SfxClass@@QAEHM@Z:PROC		; SfxClass::ACMIExec
EXTRN	??0SimStaticClass@@QAE@H@Z:PROC			; SimStaticClass::SimStaticClass
EXTRN	??0SimFeatureClass@@QAE@H@Z:PROC		; SimFeatureClass::SimFeatureClass
EXTRN	?MapVisId@@YAKK@Z:PROC				; MapVisId
EXTRN	?GetTimeString@@YAPADKQADH@Z:PROC		; GetTimeString
EXTRN	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z:PROC ; CalcTransformMatrix
EXTRN	?CreateDrawable@@YAXPAVSimBaseClass@@M@Z:PROC	; CreateDrawable
EXTRN	?CalcKIAS@@YAMMM@Z:PROC				; CalcKIAS
EXTRN	?ProcessEventListForACMI@@YAPAVEventElement@@XZ:PROC ; ProcessEventListForACMI
EXTRN	?ClearSortedEventList@@YAXXZ:PROC		; ClearSortedEventList
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?IMatrix@@3UTrotation@@B:BYTE			; IMatrix
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TeamSimColorList@@3PAJA:BYTE			; TeamSimColorList
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c1f00000
CONST	SEGMENT
__real@c1f00000 DD 0c1f00000r			; -30
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c0e00000
CONST	SEGMENT
__real@c0e00000 DD 0c0e00000r			; -7
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44898000
CONST	SEGMENT
__real@44898000 DD 044898000r			; 1100
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d924925
CONST	SEGMENT
__real@3d924925 DD 03d924925r			; 0.0714286
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FMHONLIG@Error?5writing?5TAPE?5header?5again?6@
CONST	SEGMENT
??_C@_0CB@FMHONLIG@Error?5writing?5TAPE?5header?5again?6@ DB 'Error writi'
	DB	'ng TAPE header again', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FLEPGJPC@Error?5seeking?5TAPE?5start?6?$AA@
CONST	SEGMENT
??_C@_0BK@FLEPGJPC@Error?5seeking?5TAPE?5start?6?$AA@ DB 'Error seeking T'
	DB	'APE start', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JEGADOOG@Error?5writing?5TAPE?5event?5element@
CONST	SEGMENT
??_C@_0CC@JEGADOOG@Error?5writing?5TAPE?5event?5element@ DB 'Error writin'
	DB	'g TAPE event element', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJALOMFG@?$CF0?40f?5deg?1s?$AA@
CONST	SEGMENT
??_C@_0M@NJALOMFG@?$CF0?40f?5deg?1s?$AA@ DB '%0.0f deg/s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLDMLMDP@?$CF0?40f?5Kts?$AA@
CONST	SEGMENT
??_C@_09NLDMLMDP@?$CF0?40f?5Kts?$AA@ DB '%0.0f Kts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOOMBMBP@?$CF0?40f?5ft?$AA@
CONST	SEGMENT
??_C@_08HOOMBMBP@?$CF0?40f?5ft?$AA@ DB '%0.0f ft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LABFLCHL@?$CF0?40f?5Deg?$AA@
CONST	SEGMENT
??_C@_09LABFLCHL@?$CF0?40f?5Deg?$AA@ DB '%0.0f Deg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MJDCFFNJ@?$CF0?40f?5Rng?$AA@
CONST	SEGMENT
??_C@_09MJDCFFNJ@?$CF0?40f?5Rng?$AA@ DB '%0.0f Rng', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DFPLFLLG@Ejected?5Pilot?$AA@
CONST	SEGMENT
??_C@_0O@DFPLFLLG@Ejected?5Pilot?$AA@ DB 'Ejected Pilot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FIBPIHAP@MapViewOfFile?5failed?5on?5tape?5ope@
CONST	SEGMENT
??_C@_0CD@FIBPIHAP@MapViewOfFile?5failed?5on?5tape?5ope@ DB 'MapViewOfFil'
	DB	'e failed on tape open', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LHLGEOPK@CreateFileMapping?5failed?5on?5tape@
CONST	SEGMENT
??_C@_0CH@LHLGEOPK@CreateFileMapping?5failed?5on?5tape@ DB 'CreateFileMap'
	DB	'ping failed on tape open', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CJCMBNNE@CreateFile?5failed?5on?5tape?5open?6?$AA@
CONST	SEGMENT
??_C@_0CA@CJCMBNNE@CreateFile?5failed?5on?5tape?5open?6?$AA@ DB 'CreateFi'
	DB	'le failed on tape open', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DGLPMPEG@Invalid?5Tape?5File?6?$AA@
CONST	SEGMENT
??_C@_0BD@DGLPMPEG@Invalid?5Tape?5File?6?$AA@ DB 'Invalid Tape File', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ONECOFNE@Unable?5to?5to?5read?5tape?5header?6?$AA@
CONST	SEGMENT
??_C@_0BP@ONECOFNE@Unable?5to?5to?5read?5tape?5header?6?$AA@ DB 'Unable t'
	DB	'o to read tape header', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GKMGOOKA@Unable?5to?5Open?5Tape?5File?6?$AA@
CONST	SEGMENT
??_C@_0BK@GKMGOOKA@Unable?5to?5Open?5Tape?5File?6?$AA@ DB 'Unable to Open'
	DB	' Tape File', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FBPPAKAM@Error?5writing?5new?5tape?5file?6?$AA@
CONST	SEGMENT
??_C@_0BN@FBPPAKAM@Error?5writing?5new?5tape?5file?6?$AA@ DB 'Error writi'
	DB	'ng new tape file', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@POLMAADA@Error?5opening?5new?5tape?5file?6?$AA@
CONST	SEGMENT
??_C@_0BN@POLMAADA@Error?5opening?5new?5tape?5file?6?$AA@ DB 'Error openi'
	DB	'ng new tape file', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CBDOLJBO@ACMITape?5Import?3?5Writing?5Tape?5Fi@
CONST	SEGMENT
??_C@_0CJ@CBDOLJBO@ACMITape?5Import?3?5Writing?5Tape?5Fi@ DB 'ACMITape Im'
	DB	'port: Writing Tape File ....', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NAKIBKKI@ACMITape?5Import?3?5Threading?5Entit@
CONST	SEGMENT
??_C@_0CP@NAKIBKKI@ACMITape?5Import?3?5Threading?5Entit@ DB 'ACMITape Imp'
	DB	'ort: Threading Entity Events ....', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MAGFLMAL@ACMITape?5Import?3?5Threading?5Posit@
CONST	SEGMENT
??_C@_0CL@MAGFLMAL@ACMITape?5Import?3?5Threading?5Posit@ DB 'ACMITape Imp'
	DB	'ort: Threading Positions ....', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@POBDCJEJ@ACMITape?5Import?3?5Parsing?5Entitie@
CONST	SEGMENT
??_C@_0CI@POBDCJEJ@ACMITape?5Import?3?5Parsing?5Entitie@ DB 'ACMITape Imp'
	DB	'ort: Parsing Entities ....', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FJDDFKJJ@ACMITape?5Import?3?5Reading?5Raw?5Dat@
CONST	SEGMENT
??_C@_0CI@FJDDFKJJ@ACMITape?5Import?3?5Reading?5Raw?5Dat@ DB 'ACMITape Im'
	DB	'port: Reading Raw Data ....', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GDDCLOAC@Error?5opening?5acmi?5flight?5file?$AA@
CONST	SEGMENT
??_C@_0BP@GDDCLOAC@Error?5opening?5acmi?5flight?5file?$AA@ DB 'Error open'
	DB	'ing acmi flight file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JECPNOK@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BD@JECPNOK@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?6?$AA@ DB '%f '
	DB	'%f %f %f %f %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GLDDLJCL@Unable?5to?5test?5memory?5mapped?5tap@
CONST	SEGMENT
??_C@_0CI@GLDDLJCL@Unable?5to?5test?5memory?5mapped?5tap@ DB 'Unable to t'
	DB	'est memory mapped tape file', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JNEEFDOD@Entity?5?$CFd?3?5Type?5?$DN?5?$CFd?0?5Id?5?$DN?5?$CFd?0?5O@
CONST	SEGMENT
??_C@_0CM@JNEEFDOD@Entity?5?$CFd?3?5Type?5?$DN?5?$CFd?0?5Id?5?$DN?5?$CFd?0?5O@ DB 'E'
	DB	'ntity %d: Type = %d, Id = %d, Offset = %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DIILMCIP@acmibin?2?$AA@
CONST	SEGMENT
??_C@_08DIILMCIP@acmibin?2?$AA@ DB 'acmibin\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@GKJIDJHD@General?5event?5occured?5in?5reverse@
CONST	SEGMENT
??_C@_0EF@GKJIDJHD@General?5event?5occured?5in?5reverse@ DB 'General even'
	DB	't occured in reverse ACMI Tape play --> event type: %d.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@HDIDEHKI@General?5event?5occured?5in?5forward@
CONST	SEGMENT
??_C@_0EF@HDIDEHKI@General?5event?5occured?5in?5forward@ DB 'General even'
	DB	't occured in forward ACMI Tape play --> event type: %d.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetupSimTapeEntities@ACMITape@@AAEXXZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?SetupSimTapeEntities@ACMITape@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$5
__unwindtable$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$5
__unwindtable$?SetupSimTapeEntities@ACMITape@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$12
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
_flightFile$ = 8					; size = 4
_rawPositionData$ = 12					; size = 4
?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z PROC ; CleanupACMIImportPositionData

; 502  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 503  : 	if(flightFile != NULL)

	cmp	DWORD PTR _flightFile$[ebp], 0
	je	SHORT $LN10@CleanupACM

; 504  : 	{
; 505  : 		fclose(flightFile);

	mov	eax, DWORD PTR _flightFile$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN10@CleanupACM:

; 506  : 	}
; 507  : 
; 508  : 	if(rawPositionData != NULL)

	cmp	DWORD PTR _rawPositionData$[ebp], 0
	je	SHORT $LN9@CleanupACM

; 509  : 	{
; 510  : 		delete rawPositionData;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@CleanupACM:

; 511  : 	}
; 512  : 
; 513  : 	if ( importEntityList != NULL )

	cmp	DWORD PTR ?importEntityList@@3PAULIST@@A, 0 ; importEntityList
	je	SHORT $LN8@CleanupACM

; 514  : 	{
; 515  : 		DestroyTheList (importEntityList);

	mov	eax, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	push	eax
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 516  : 		importEntityList = NULL;

	mov	DWORD PTR ?importEntityList@@3PAULIST@@A, 0 ; importEntityList
$LN8@CleanupACM:

; 517  : 	}
; 518  : 
; 519  : 	if ( importFeatList != NULL )

	cmp	DWORD PTR ?importFeatList@@3PAULIST@@A, 0 ; importFeatList
	je	SHORT $LN7@CleanupACM

; 520  : 	{
; 521  : 		DestroyTheList (importFeatList);

	mov	ecx, DWORD PTR ?importFeatList@@3PAULIST@@A ; importFeatList
	push	ecx
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 522  : 		importFeatList = NULL;

	mov	DWORD PTR ?importFeatList@@3PAULIST@@A, 0 ; importFeatList
$LN7@CleanupACM:

; 523  : 	}
; 524  : 
; 525  : 	if ( importPosList != NULL )

	cmp	DWORD PTR ?importPosList@@3PAULIST@@A, 0 ; importPosList
	je	SHORT $LN6@CleanupACM

; 526  : 	{
; 527  : 		DestroyTheList (importPosList );

	mov	edx, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	push	edx
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 528  : 		importPosList = NULL;

	mov	DWORD PTR ?importPosList@@3PAULIST@@A, 0 ; importPosList
$LN6@CleanupACM:

; 529  : 	}
; 530  : 
; 531  : 	if ( importEntEventList != NULL )

	cmp	DWORD PTR ?importEntEventList@@3PAULIST@@A, 0 ; importEntEventList
	je	SHORT $LN5@CleanupACM

; 532  : 	{
; 533  : 		DestroyTheList (importEntEventList );

	mov	eax, DWORD PTR ?importEntEventList@@3PAULIST@@A ; importEntEventList
	push	eax
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 534  : 		importEntEventList = NULL;

	mov	DWORD PTR ?importEntEventList@@3PAULIST@@A, 0 ; importEntEventList
$LN5@CleanupACM:

; 535  : 	}
; 536  : 
; 537  : 	if ( importEventList != NULL )

	cmp	DWORD PTR ?importEventList@@3PAULIST@@A, 0 ; importEventList
	je	SHORT $LN4@CleanupACM

; 538  : 	{
; 539  : 		DestroyTheList (importEventList );

	mov	ecx, DWORD PTR ?importEventList@@3PAULIST@@A ; importEventList
	push	ecx
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 540  : 		importEventList = NULL;

	mov	DWORD PTR ?importEventList@@3PAULIST@@A, 0 ; importEventList
$LN4@CleanupACM:

; 541  : 	}
; 542  : 
; 543  : 	if ( importEventTrailerList != NULL )

	cmp	DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A, 0 ; importEventTrailerList
	je	SHORT $LN3@CleanupACM

; 544  : 	{
; 545  : 		delete [] importEventTrailerList;

	mov	edx, DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A ; importEventTrailerList
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 546  : 		importEventTrailerList = NULL;

	mov	DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A, 0 ; importEventTrailerList
$LN3@CleanupACM:

; 547  : 	}
; 548  : 
; 549  : 	if ( importFeatEventList != NULL )

	cmp	DWORD PTR ?importFeatEventList@@3PAULIST@@A, 0 ; importFeatEventList
	je	SHORT $LN2@CleanupACM

; 550  : 	{
; 551  : 		DestroyTheList (importFeatEventList );

	mov	ecx, DWORD PTR ?importFeatEventList@@3PAULIST@@A ; importFeatEventList
	push	ecx
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 552  : 		importFeatEventList = NULL;

	mov	DWORD PTR ?importFeatEventList@@3PAULIST@@A, 0 ; importFeatEventList
$LN2@CleanupACM:

; 553  : 	}
; 554  : 	if(Import_Callsigns)

	cmp	DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A, 0 ; Import_Callsigns
	je	SHORT $LN11@CleanupACM

; 555  : 	{
; 556  : 		delete Import_Callsigns;

	mov	edx, DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A ; Import_Callsigns
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 557  : 		Import_Callsigns=NULL;

	mov	DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A, 0 ; Import_Callsigns

; 558  : 		import_count=0;

	mov	DWORD PTR ?import_count@@3JA, 0		; import_count
$LN11@CleanupACM:

; 559  : 	}
; 560  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ENDP ; CleanupACMIImportPositionData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
tv131 = -8						; size = 4
_result$ = -4						; size = 4
_flightFile$ = 8					; size = 4
_rawPositionData$ = 12					; size = 4
?ReadRawACMIPositionData@@YAHPAU_iobuf@@AAUACMIRawPositionData@@@Z PROC ; ReadRawACMIPositionData

; 452  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 453  : 	int
; 454  : 		result;
; 455  : 
; 456  : 	fscanf
; 457  : 	(
; 458  : 		flightFile,
; 459  : 		"%d %d",
; 460  : 		&rawPositionData.type,
; 461  : 		&rawPositionData.uniqueID
; 462  : 	);

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	push	ecx
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	call	_fscanf
	add	esp, 16					; 00000010H

; 463  : 
; 464  : 	
; 465  : 	// We don't need to check the status of our last two fscanf calls, because
; 466  : 	// if they fail, this one will too.
; 467  : 	result = fscanf
; 468  : 	(
; 469  : 		flightFile,
; 470  : 		"%f %f %f %f %f %f\n",
; 471  : 		&rawPositionData.entityPosData.posData.x,
; 472  : 		&rawPositionData.entityPosData.posData.y,
; 473  : 		&rawPositionData.entityPosData.posData.z,
; 474  : 		&rawPositionData.entityPosData.posData.pitch,
; 475  : 		&rawPositionData.entityPosData.posData.roll,
; 476  : 		&rawPositionData.entityPosData.posData.yaw
; 477  : 	);

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	add	eax, 49					; 00000031H
	push	eax
	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	add	ecx, 45					; 0000002dH
	push	ecx
	mov	edx, DWORD PTR _rawPositionData$[ebp]
	add	edx, 41					; 00000029H
	push	edx
	mov	eax, DWORD PTR _rawPositionData$[ebp]
	add	eax, 37					; 00000025H
	push	eax
	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	add	ecx, 33					; 00000021H
	push	ecx
	mov	edx, DWORD PTR _rawPositionData$[ebp]
	add	edx, 29					; 0000001dH
	push	edx
	push	OFFSET ??_C@_0BD@JECPNOK@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?6?$AA@
	mov	eax, DWORD PTR _flightFile$[ebp]
	push	eax
	call	_fscanf
	add	esp, 32					; 00000020H
	mov	DWORD PTR _result$[ebp], eax

; 478  : 
; 479  : 	// insure pitch roll and yaw are positive (edg:?)
; 480  : 	// or in 0 - 2PI range
; 481  : 	/* nah, this ain't right....  need to fix songy's stuff
; 482  : 	if ( rawPositionData.entityPosData.pitch < 0.0f )
; 483  : 		rawPositionData.entityPosData.pitch += 2.0f * PI;
; 484  : 	if ( rawPositionData.entityPosData.roll < 0.0f )
; 485  : 		rawPositionData.entityPosData.roll += 2.0f * PI;
; 486  : 	if ( rawPositionData.entityPosData.yaw < 0.0f )
; 487  : 		rawPositionData.entityPosData.yaw += 2.0f * PI;
; 488  : 	*/
; 489  : 
; 490  : 	return (!result || result == EOF ? FALSE : TRUE);

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@ReadRawACM
	cmp	DWORD PTR _result$[ebp], -1
	je	SHORT $LN3@ReadRawACM
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN4@ReadRawACM
$LN3@ReadRawACM:
	mov	DWORD PTR tv131[ebp], 0
$LN4@ReadRawACM:
	mov	eax, DWORD PTR tv131[ebp]

; 491  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReadRawACMIPositionData@@YAHPAU_iobuf@@AAUACMIRawPositionData@@@Z ENDP ; ReadRawACMIPositionData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_eventId$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?DefaultReverseACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z PROC ; DefaultReverseACMIGeneralEventCallback

; 137  : {

	push	ebp
	mov	ebp, esp

; 138  : 	MonoPrint
; 139  : 	(
; 140  : 		"General event occured in reverse ACMI Tape play --> event type: %d.\n",
; 141  : 		eventId.type
; 142  : 	);

	movzx	eax, WORD PTR _eventId$[ebp+2]
	push	eax
	push	OFFSET ??_C@_0EF@GKJIDJHD@General?5event?5occured?5in?5reverse@
	call	_MonoPrint
	add	esp, 8

; 143  : }

	pop	ebp
	ret	0
?DefaultReverseACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z ENDP ; DefaultReverseACMIGeneralEventCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_eventId$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?DefaultForwardACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z PROC ; DefaultForwardACMIGeneralEventCallback

; 118  : {

	push	ebp
	mov	ebp, esp

; 119  : 	MonoPrint
; 120  : 	(
; 121  : 		"General event occured in forward ACMI Tape play --> event type: %d.\n",
; 122  : 		eventId.type
; 123  : 	);

	movzx	eax, WORD PTR _eventId$[ebp+2]
	push	eax
	push	OFFSET ??_C@_0EF@HDIDEHKI@General?5event?5occured?5in?5forward@
	call	_MonoPrint
	add	esp, 8

; 124  : }

	pop	ebp
	ret	0
?DefaultForwardACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z ENDP ; DefaultForwardACMIGeneralEventCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
_curr$ = -8						; size = 4
_prev$ = -4						; size = 4
_list$ = 8						; size = 4
?DestroyTheList@@YAXPAULIST@@@Z PROC			; DestroyTheList

; 3810 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3811 :    LIST * prev,
; 3812 :         * curr;
; 3813 : 
; 3814 :    if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN3@DestroyThe

; 3815 :       return;

	jmp	$LN4@DestroyThe
$LN3@DestroyThe:

; 3816 : 
; 3817 :    prev = list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 3818 :    curr = list -> next;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _curr$[ebp], edx
$LN2@DestroyThe:

; 3819 : 
; 3820 :    while ( curr )

	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN1@DestroyThe

; 3821 :    {
; 3822 :       // if ( destructor )
; 3823 :       //    (*destructor)(prev -> node);
; 3824 : 
; 3825 : 	  delete prev->node;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 3826 : 
; 3827 :       prev -> next = NULL;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax+8], 0

; 3828 : 
; 3829 :       delete prev;

	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 3830 : 
; 3831 :       prev = curr;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 3832 :       curr = curr -> next;

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _curr$[ebp], edx

; 3833 :    }

	jmp	SHORT $LN2@DestroyThe
$LN1@DestroyThe:

; 3834 : 
; 3835 :    // if( destructor )
; 3836 :    //    (*destructor)( prev -> node );
; 3837 : 
; 3838 :    delete prev->node;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 3839 : 
; 3840 :    prev -> next = NULL;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax+8], 0

; 3841 : 
; 3842 :    delete prev;

	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@DestroyThe:

; 3843 : 
; 3844 :    //ListGlobalPack();
; 3845 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyTheList@@YAXPAULIST@@@Z ENDP			; DestroyTheList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_newnode$ = -4						; size = 4
_list$ = 8						; size = 4
_end$ = 12						; size = 4
_node$ = 16						; size = 4
?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z PROC	; AppendToEndOfList

; 3777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3778 :    LIST * newnode;
; 3779 : 
; 3780 :    newnode = new LIST;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newnode$[ebp], eax

; 3781 : 
; 3782 :    newnode -> node = node;

	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx

; 3783 :    newnode -> next = NULL;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [eax+8], 0

; 3784 : 
; 3785 :    /* list was null */
; 3786 :    if ( !list ) 

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN2@AppendToEn

; 3787 :    {
; 3788 :      list = newnode;

	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR _list$[ebp], ecx

; 3789 : 	 *end = list;

	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx], eax

; 3790 :    }
; 3791 :    else 

	jmp	SHORT $LN1@AppendToEn
$LN2@AppendToEn:

; 3792 :    {
; 3793 :       /* chain in at end */
; 3794 :       (*end) -> next = newnode;

	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 3795 : 	  *end = newnode;

	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@AppendToEn:

; 3796 :    }
; 3797 : 
; 3798 :    return( list );

	mov	eax, DWORD PTR _list$[ebp]

; 3799 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ENDP	; AppendToEndOfList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSfxClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSfxClass@@QAEPAXI@Z PROC				; SfxClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SfxClass@@QAE@XZ			; SfxClass::~SfxClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSfxClass@@QAEPAXI@Z ENDP				; SfxClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Status@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Status@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::Status, COMDAT
; _this$ = ecx

; 192  : 	int Status() const { return specialData.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+176]
	mov	esp, ebp
	pop	ebp
	ret	0
?Status@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::Status
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetCampaignFlag@SimBaseClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetCampaignFlag@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetCampaignFlag, COMDAT
; _this$ = ecx

; 183  : 	void SetCampaignFlag(int flag){ campaignFlags |= flag; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCampaignFlag@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetCampaignFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z PROC		; SimBaseClass::IsSetCampaignFlag, COMDAT
; _this$ = ecx

; 182  : 	int  IsSetCampaignFlag(int flag) const { return ((campaignFlags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetCampa
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSetCampa
$LN3@IsSetCampa:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSetCampa:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ENDP		; SimBaseClass::IsSetCampaignFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -32						; size = 4
_end$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_td$ = 8						; size = 4
_dT$ = 12						; size = 4
?UpdateTracerEvent@ACMITape@@AAEXPAUTracerEventData@@M@Z PROC ; ACMITape::UpdateTracerEvent
; _this$ = ecx

; 3635 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3636 : 	Tpoint pos, end;
; 3637 : 
; 3638 : 	pos.x = td->x + td->dx * dT;

	mov	eax, DWORD PTR _td$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mov	ecx, DWORD PTR _td$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _pos$[ebp], xmm0

; 3639 : 	pos.y = td->y + td->dy * dT;

	mov	edx, DWORD PTR _td$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mov	eax, DWORD PTR _td$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 3640 : 	pos.z = td->z + td->dz * dT;

	mov	ecx, DWORD PTR _td$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	mov	edx, DWORD PTR _td$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 3641 : 
; 3642 : 	end.x = pos.x - td->dx * 0.05f;

	mov	eax, DWORD PTR _td$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	movss	xmm1, DWORD PTR _pos$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _end$[ebp], xmm1

; 3643 : 	end.y = pos.y - td->dy * 0.05f;

	mov	ecx, DWORD PTR _td$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _end$[ebp+4], xmm1

; 3644 : 	end.z = pos.z - td->dz * 0.05f;

	mov	edx, DWORD PTR _td$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _end$[ebp+8], xmm1

; 3645 : 
; 3646 : 	td->objTracer->Update( &pos, &end );

	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _td$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 3647 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateTracerEvent@ACMITape@@AAEXPAUTracerEventData@@M@Z ENDP ; ACMITape::UpdateTracerEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_leadIndex$ = 8						; size = 4
_slot$ = 12						; size = 4
?FindComponentFeature@ACMITape@@AAEPAVSimBaseClass@@JH@Z PROC ; ACMITape::FindComponentFeature
; _this$ = ecx

; 4160 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4161 : 	int i;
; 4162 : 
; 4163 : 	if ( leadIndex < 0 || slot < 0 )

	cmp	DWORD PTR _leadIndex$[ebp], 0
	jl	SHORT $LN5@FindCompon
	cmp	DWORD PTR _slot$[ebp], 0
	jge	SHORT $LN6@FindCompon
$LN5@FindCompon:

; 4164 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN7@FindCompon
$LN6@FindCompon:

; 4165 : 
; 4166 : 	for(i = 0; i < _tapeHdr.numFeat; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FindCompon
$LN3@FindCompon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FindCompon:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN2@FindCompon

; 4167 : 	{
; 4168 : 		if ( _simTapeFeatures[i].leadIndex == leadIndex &&
; 4169 : 			 _simTapeFeatures[i].slot == slot )

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR [edx+eax+80]
	cmp	eax, DWORD PTR _leadIndex$[ebp]
	jne	SHORT $LN1@FindCompon
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, DWORD PTR [eax+ecx+84]
	cmp	ecx, DWORD PTR _slot$[ebp]
	jne	SHORT $LN1@FindCompon

; 4170 : 		{
; 4171 : 			return _simTapeFeatures[i].objBase;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	eax, DWORD PTR [ecx+edx]
	jmp	SHORT $LN7@FindCompon
$LN1@FindCompon:

; 4172 : 		}
; 4173 : 	}

	jmp	SHORT $LN3@FindCompon
$LN2@FindCompon:

; 4174 : 	return NULL;

	xor	eax, eax
$LN7@FindCompon:

; 4175 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?FindComponentFeature@ACMITape@@AAEPAVSimBaseClass@@JH@Z ENDP ; ACMITape::FindComponentFeature
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T2 = -184						; size = 4
$T3 = -180						; size = 4
$T4 = -176						; size = 4
$T5 = -172						; size = 4
tv589 = -168						; size = 4
$T6 = -164						; size = 4
$T7 = -160						; size = 4
$T8 = -156						; size = 4
$T9 = -152						; size = 4
$T10 = -148						; size = 4
tv361 = -144						; size = 4
$T11 = -140						; size = 4
$T12 = -136						; size = 4
tv440 = -132						; size = 4
$T13 = -128						; size = 4
_idx$14 = -124						; size = 4
tv508 = -120						; size = 4
tv332 = -116						; size = 4
$T15 = -112						; size = 4
tv563 = -108						; size = 4
tv412 = -104						; size = 4
_prevObj$ = -100					; size = 4
$T16 = -96						; size = 4
_classPtr$ = -92					; size = 4
_nextObj$ = -88						; size = 4
_lastPointer$ = -84					; size = 4
_this$ = -80						; size = 4
_baseObject$ = -76					; size = 4
_visType$ = -72						; size = 2
_theObject$ = -68					; size = 4
_viewRotation$ = -64					; size = 36
_simView$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_feat$ = 8						; size = 4
?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z PROC ; ACMITape::CreateFeatureDrawable
; _this$ = ecx

; 3974 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3975 : 	short    visType = -1;

	or	eax, -1
	mov	WORD PTR _visType$[ebp], ax

; 3976 : 	Tpoint    simView;
; 3977 : 	Trotation viewRotation;
; 3978 : 	SimBaseClass* baseObject;
; 3979 : 	DrawableObject* lastPointer = NULL;

	mov	DWORD PTR _lastPointer$[ebp], 0

; 3980 : 	
; 3981 : 
; 3982 : 	// get the object and pointer to its classtbl entry
; 3983 : 	SimBaseClass* theObject = feat->objBase;

	mov	ecx, DWORD PTR _feat$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _theObject$[ebp], edx

; 3984 : 	Falcon4EntityClassType* classPtr = (Falcon4EntityClassType*)theObject->EntityType();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 3985 : 
; 3986 : 	// Set position and orientations
; 3987 : 	viewRotation.M11 = theObject->dmx[0][0];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _viewRotation$[ebp], xmm0

; 3988 : 	viewRotation.M21 = theObject->dmx[0][1];

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _viewRotation$[ebp+12], xmm0

; 3989 : 	viewRotation.M31 = theObject->dmx[0][2];

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _viewRotation$[ebp+24], xmm0

; 3990 : 
; 3991 : 	viewRotation.M12 = theObject->dmx[1][0];

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _viewRotation$[ebp+4], xmm0

; 3992 : 	viewRotation.M22 = theObject->dmx[1][1];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _viewRotation$[ebp+16], xmm0

; 3993 : 	viewRotation.M32 = theObject->dmx[1][2];

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _viewRotation$[ebp+28], xmm0

; 3994 : 
; 3995 : 	viewRotation.M13 = theObject->dmx[2][0];

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _viewRotation$[ebp+8], xmm0

; 3996 : 	viewRotation.M23 = theObject->dmx[2][1];

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _viewRotation$[ebp+20], xmm0

; 3997 : 	viewRotation.M33 = theObject->dmx[2][2];

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _viewRotation$[ebp+32], xmm0

; 3998 : 
; 3999 : 	// Update object position
; 4000 : 	simView.x     = theObject->XPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _simView$[ebp]

; 4001 : 	simView.y     = theObject->YPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _simView$[ebp+4]

; 4002 : 	simView.z     = theObject->ZPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _simView$[ebp+8]

; 4003 : 
; 4004 : 	visType = classPtr->visType[theObject->Status() & VIS_TYPE_MASK];

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	mov	ecx, DWORD PTR _classPtr$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+60]
	mov	WORD PTR _visType$[ebp], dx

; 4005 : 
; 4006 : 	// make sure things are sane
; 4007 : 	F4Assert(visType >= 0 || theObject->drawPointer);
; 4008 : 	F4Assert(classPtr->vuClassData.classInfo_[VU_DOMAIN] == DOMAIN_LAND );
; 4009 : 	F4Assert(classPtr->vuClassData.classInfo_[VU_CLASS] == CLASS_FEATURE);
; 4010 : 
; 4011 : 	// A feature thingy..
; 4012 : 	SimBaseClass	*prevObj = NULL, *nextObj = NULL;

	mov	DWORD PTR _prevObj$[ebp], 0
	mov	DWORD PTR _nextObj$[ebp], 0

; 4013 : 
; 4014 : 	// In many cases, our visType should be modified by our neighbors.
; 4015 : 	if ((theObject->Status() & VIS_TYPE_MASK) != VIS_DESTROYED &&
; 4016 : 	     (((SimFeatureClass*)theObject)->featureFlags & FEAT_NEXT_NORM ||
; 4017 : 		 ((SimFeatureClass*)theObject)->featureFlags & FEAT_PREV_NORM))

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	cmp	eax, 3
	je	$LN24@CreateFeat
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+600]
	and	ecx, 8
	jne	SHORT $LN29@CreateFeat
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+600]
	and	eax, 4
	je	$LN24@CreateFeat
$LN29@CreateFeat:

; 4018 : 	{
; 4019 : 		int	idx = feat->slot;

	mov	ecx, DWORD PTR _feat$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _idx$14[ebp], edx

; 4020 : 
; 4021 : 		prevObj = FindComponentFeature(feat->leadIndex, idx - 1);

	mov	eax, DWORD PTR _idx$14[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _feat$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindComponentFeature@ACMITape@@AAEPAVSimBaseClass@@JH@Z ; ACMITape::FindComponentFeature
	mov	DWORD PTR _prevObj$[ebp], eax

; 4022 : 		nextObj = FindComponentFeature(feat->leadIndex, idx + 1);

	mov	eax, DWORD PTR _idx$14[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _feat$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindComponentFeature@ACMITape@@AAEPAVSimBaseClass@@JH@Z ; ACMITape::FindComponentFeature
	mov	DWORD PTR _nextObj$[ebp], eax

; 4023 : 		if (prevObj &&
; 4024 : 		   (((SimFeatureClass*)theObject)->featureFlags & FEAT_PREV_NORM) &&
; 4025 : 		   (prevObj->Status() & VIS_TYPE_MASK) == VIS_DESTROYED)

	cmp	DWORD PTR _prevObj$[ebp], 0
	je	SHORT $LN28@CreateFeat
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+600]
	and	ecx, 4
	je	SHORT $LN28@CreateFeat
	mov	ecx, DWORD PTR _prevObj$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	cmp	eax, 3
	jne	SHORT $LN28@CreateFeat

; 4026 : 		{
; 4027 : 			if (nextObj &&
; 4028 : 			   (((SimFeatureClass*)theObject)->featureFlags & FEAT_NEXT_NORM) &&
; 4029 : 			   (nextObj->Status() & VIS_TYPE_MASK) == VIS_DESTROYED)

	cmp	DWORD PTR _nextObj$[ebp], 0
	je	SHORT $LN27@CreateFeat
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+600]
	and	eax, 8
	je	SHORT $LN27@CreateFeat
	mov	ecx, DWORD PTR _nextObj$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	cmp	eax, 3
	jne	SHORT $LN27@CreateFeat

; 4030 : 			{
; 4031 : 				visType = classPtr->visType[VIS_BOTH_DEST];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _classPtr$[ebp]
	mov	ax, WORD PTR [edx+ecx+60]
	mov	WORD PTR _visType$[ebp], ax

; 4032 : 			}
; 4033 : 			else

	jmp	SHORT $LN26@CreateFeat
$LN27@CreateFeat:

; 4034 : 			{
; 4035 : 				visType = classPtr->visType[VIS_LEFT_DEST];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _classPtr$[ebp]
	mov	ax, WORD PTR [edx+ecx+60]
	mov	WORD PTR _visType$[ebp], ax
$LN26@CreateFeat:

; 4036 : 			}
; 4037 : 		}
; 4038 : 		else if (nextObj &&

	jmp	SHORT $LN24@CreateFeat
$LN28@CreateFeat:

; 4039 : 		      (((SimFeatureClass*)theObject)->featureFlags & FEAT_NEXT_NORM) &&
; 4040 : 			  (nextObj->Status() & VIS_TYPE_MASK) == VIS_DESTROYED)

	cmp	DWORD PTR _nextObj$[ebp], 0
	je	SHORT $LN24@CreateFeat
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx+600]
	and	edx, 8
	je	SHORT $LN24@CreateFeat
	mov	ecx, DWORD PTR _nextObj$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	cmp	eax, 3
	jne	SHORT $LN24@CreateFeat

; 4041 : 		{
; 4042 : 			visType = classPtr->visType[VIS_RIGHT_DEST];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _classPtr$[ebp]
	mov	dx, WORD PTR [ecx+eax+60]
	mov	WORD PTR _visType$[ebp], dx
$LN24@CreateFeat:

; 4043 : 		}
; 4044 : 	}
; 4045 : 
; 4046 : 	// Check for change - and don't bother if there is none.
; 4047 : 	if (theObject->drawPointer &&
; 4048 : 	   ((DrawableBSP*)theObject->drawPointer)->GetID() == visType)

	mov	eax, DWORD PTR _theObject$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN23@CreateFeat
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?GetID@DrawableBSP@@QAEHXZ		; DrawableBSP::GetID
	movsx	edx, WORD PTR _visType$[ebp]
	cmp	eax, edx
	jne	SHORT $LN23@CreateFeat

; 4049 : 		return;

	jmp	$LN31@CreateFeat
$LN23@CreateFeat:

; 4050 : 
; 4051 : 	if (theObject->drawPointer && theObject->drawPointer->InDisplayList() )

	mov	eax, DWORD PTR _theObject$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN22@CreateFeat
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN22@CreateFeat

; 4052 : 	{
; 4053 : 		// KCK: In some cases we still need this pointer (specifically
; 4054 : 		// when we replace bridge segments), so let's save it here - we'll
; 4055 : 		// toss it out after we're done.
; 4056 : 		lastPointer = theObject->drawPointer;

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+332]
	mov	DWORD PTR _lastPointer$[ebp], eax

; 4057 : 		theObject->drawPointer = NULL;

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	DWORD PTR [ecx+332], 0
$LN22@CreateFeat:

; 4058 : 	}
; 4059 : 
; 4060 : 	// get the lead baseobject if any
; 4061 : 	// otherwise set base object to ourself
; 4062 : 	if ( feat->leadIndex >= 0 )

	mov	edx, DWORD PTR _feat$[ebp]
	cmp	DWORD PTR [edx+80], 0
	jl	SHORT $LN21@CreateFeat

; 4063 : 		baseObject = _simTapeFeatures[ feat->leadIndex ].objBase;

	mov	eax, DWORD PTR _feat$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _baseObject$[ebp], ecx

; 4064 : 	else

	jmp	SHORT $LN20@CreateFeat
$LN21@CreateFeat:

; 4065 : 		baseObject = theObject;

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	DWORD PTR _baseObject$[ebp], edx
$LN20@CreateFeat:

; 4066 : 
; 4067 : 	// Some things require Base Objects (like bridges and airbases)
; 4068 : 	if (!((SimFeatureClass*)baseObject)->baseObject)

	mov	eax, DWORD PTR _baseObject$[ebp]
	cmp	DWORD PTR [eax+596], 0
	jne	$LN16@CreateFeat

; 4069 : 	{
; 4070 : 		// Is this a bridge?
; 4071 : 		if (theObject->IsSetCampaignFlag(FEAT_ELEV_CONTAINER))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	$LN18@CreateFeat

; 4072 : 		{
; 4073 : 			// baseObject is the "container" object for all parts of the bridge
; 4074 : 			// There is only one container for the entire bridge, stored in the lead element
; 4075 : 			((SimFeatureClass*)baseObject)->baseObject = new DrawableBridge (1.0F);

	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN33@CreateFeat
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0DrawableBridge@@QAE@M@Z		; DrawableBridge::DrawableBridge
	mov	DWORD PTR tv332[ebp], eax
	jmp	SHORT $LN34@CreateFeat
$LN33@CreateFeat:
	mov	DWORD PTR tv332[ebp], 0
$LN34@CreateFeat:
	mov	ecx, DWORD PTR tv332[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _baseObject$[ebp]
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR [edx+596], eax

; 4076 : 
; 4077 : 			// Insert only the bridge drawable.
; 4078 : 			_viewPoint->InsertObject (((SimFeatureClass*)baseObject)->baseObject);

	mov	ecx, DWORD PTR _baseObject$[ebp]
	mov	edx, DWORD PTR [ecx+596]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
	jmp	$LN16@CreateFeat
$LN18@CreateFeat:

; 4079 : 		}
; 4080 : 		// Is this a big flat thing with things on it (like an airbase?)
; 4081 : 		else if (theObject->IsSetCampaignFlag(FEAT_FLAT_CONTAINER))

	push	256					; 00000100H
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	$LN16@CreateFeat

; 4082 : 		{
; 4083 : 			// baseObject is the "container" object for all parts of the platform
; 4084 : 			// There is only one container for the entire platform, stored in the 
; 4085 : 			// lead element.
; 4086 : 			((SimFeatureClass*)baseObject)->baseObject = new DrawablePlatform (1.0F);

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN35@CreateFeat
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0DrawablePlatform@@QAE@M@Z		; DrawablePlatform::DrawablePlatform
	mov	DWORD PTR tv361[ebp], eax
	jmp	SHORT $LN36@CreateFeat
$LN35@CreateFeat:
	mov	DWORD PTR tv361[ebp], 0
$LN36@CreateFeat:
	mov	ecx, DWORD PTR tv361[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _baseObject$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx+596], eax

; 4087 : 
; 4088 : 			// Insert only the platform drawable.
; 4089 : 			_viewPoint->InsertObject (((SimFeatureClass*)baseObject)->baseObject);

	mov	ecx, DWORD PTR _baseObject$[ebp]
	mov	edx, DWORD PTR [ecx+596]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN16@CreateFeat:

; 4090 : 		}
; 4091 : 	}
; 4092 : 
; 4093 : 	// Add another building to this grouping of buildings, or replace the drawable
; 4094 : 	// of one which is here.
; 4095 : 	// Is the container a bridge?
; 4096 : 	if (baseObject->IsSetCampaignFlag(FEAT_ELEV_CONTAINER))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _baseObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	$LN15@CreateFeat

; 4097 : 	{
; 4098 : 		// Make the new BRIDGE object
; 4099 : 		if (visType)

	movsx	ecx, WORD PTR _visType$[ebp]
	test	ecx, ecx
	je	$LN14@CreateFeat

; 4100 : 		{
; 4101 : 			if (theObject->IsSetCampaignFlag(FEAT_NEXT_IS_TOP) && theObject->Status() != VIS_DESTROYED)

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	$LN13@CreateFeat
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	cmp	eax, 3
	je	$LN13@CreateFeat

; 4102 : 				theObject->drawPointer = new DrawableRoadbed(visType, visType+1, &simView, theObject->Yaw(), 10.0f, (float)atan(20.0f/280.0f) );

	push	212					; 000000d4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN37@CreateFeat
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d924925
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _simView$[ebp]
	push	edx
	movsx	eax, WORD PTR _visType$[ebp]
	add	eax, 1
	push	eax
	movsx	ecx, WORD PTR _visType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0DrawableRoadbed@@QAE@HHPAUTpoint@@MMMM@Z ; DrawableRoadbed::DrawableRoadbed
	mov	DWORD PTR tv412[ebp], eax
	jmp	SHORT $LN38@CreateFeat
$LN37@CreateFeat:
	mov	DWORD PTR tv412[ebp], 0
$LN38@CreateFeat:
	mov	edx, DWORD PTR tv412[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+332], ecx

; 4103 : 			else

	jmp	$LN12@CreateFeat
$LN13@CreateFeat:

; 4104 : 				theObject->drawPointer = new DrawableRoadbed(visType, -1, &simView, theObject->Yaw(), 10.0f, (float)atan(20.0f/280.0f) );

	push	212					; 000000d4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN39@CreateFeat
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d924925
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _simView$[ebp]
	push	edx
	push	-1
	movsx	eax, WORD PTR _visType$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0DrawableRoadbed@@QAE@HHPAUTpoint@@MMMM@Z ; DrawableRoadbed::DrawableRoadbed
	mov	DWORD PTR tv440[ebp], eax
	jmp	SHORT $LN40@CreateFeat
$LN39@CreateFeat:
	mov	DWORD PTR tv440[ebp], 0
$LN40@CreateFeat:
	mov	ecx, DWORD PTR tv440[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR [edx+332], eax
$LN12@CreateFeat:

; 4105 : 		}
; 4106 : 		else

	jmp	SHORT $LN11@CreateFeat
$LN14@CreateFeat:

; 4107 : 			theObject->drawPointer = NULL;

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	DWORD PTR [ecx+332], 0
$LN11@CreateFeat:

; 4108 : 
; 4109 : 		// Check for replacement
; 4110 : 		if (lastPointer)

	cmp	DWORD PTR _lastPointer$[ebp], 0
	je	SHORT $LN10@CreateFeat

; 4111 : 		{
; 4112 : 			ShiAssert(lastPointer->GetClass() == DrawableObject::Roadbed);
; 4113 : 			ShiAssert(theObject->drawPointer->GetClass() == DrawableObject::Roadbed);
; 4114 : 			((DrawableBridge*)(((SimFeatureClass*)baseObject)->baseObject))->ReplacePiece ((DrawableRoadbed*)(lastPointer), (DrawableRoadbed*)(theObject->drawPointer));

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+332]
	push	eax
	mov	ecx, DWORD PTR _lastPointer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _baseObject$[ebp]
	mov	ecx, DWORD PTR [edx+596]
	call	?ReplacePiece@DrawableBridge@@QAEXPAVDrawableRoadbed@@0@Z ; DrawableBridge::ReplacePiece
	jmp	SHORT $LN8@CreateFeat
$LN10@CreateFeat:

; 4115 : 		}
; 4116 : 		else if (theObject->drawPointer)

	mov	eax, DWORD PTR _theObject$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN8@CreateFeat

; 4117 : 		{
; 4118 : 			ShiAssert(theObject->drawPointer->GetClass() == DrawableObject::Roadbed);
; 4119 : 			((DrawableBridge*)(((SimFeatureClass*)baseObject)->baseObject))->AddSegment((DrawableRoadbed*)(theObject->drawPointer));

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	eax, DWORD PTR _baseObject$[ebp]
	mov	ecx, DWORD PTR [eax+596]
	call	?AddSegment@DrawableBridge@@QAEXPAVDrawableRoadbed@@@Z ; DrawableBridge::AddSegment
$LN8@CreateFeat:

; 4120 : 		}
; 4121 : 	}

	jmp	$LN3@CreateFeat
$LN15@CreateFeat:

; 4122 : 	// Is the container a big flat thing (airbase)?
; 4123 : 	else if (baseObject->IsSetCampaignFlag(FEAT_FLAT_CONTAINER))

	push	256					; 00000100H
	mov	ecx, DWORD PTR _baseObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	$LN6@CreateFeat

; 4124 : 	{
; 4125 : 		// Everything on a platform is a Building
; 4126 : 		// That means it sticks straight up the -Z axis
; 4127 : 		theObject->drawPointer = new DrawableBuilding(visType, &simView, theObject->Yaw(), 1.0F);

	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN41@CreateFeat
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _simView$[ebp]
	push	ecx
	movsx	edx, WORD PTR _visType$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0DrawableBuilding@@QAE@HPAUTpoint@@MM@Z ; DrawableBuilding::DrawableBuilding
	mov	DWORD PTR tv508[ebp], eax
	jmp	SHORT $LN42@CreateFeat
$LN41@CreateFeat:
	mov	DWORD PTR tv508[ebp], 0
$LN42@CreateFeat:
	mov	eax, DWORD PTR tv508[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+332], edx

; 4128 : 
; 4129 : 		// Am I Flat (can things drive across it)?
; 4130 : 		if (theObject->IsSetCampaignFlag((FEAT_FLAT_CONTAINER | FEAT_ELEV_CONTAINER)))

	push	768					; 00000300H
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	SHORT $LN5@CreateFeat

; 4131 : 			((DrawablePlatform*)((SimFeatureClass*)baseObject)->baseObject)->InsertStaticSurface (((DrawableBuilding*)theObject->drawPointer));

	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR _baseObject$[ebp]
	mov	ecx, DWORD PTR [edx+596]
	call	?InsertStaticSurface@DrawablePlatform@@QAEXPAVDrawableBuilding@@@Z ; DrawablePlatform::InsertStaticSurface

; 4132 : 		else

	jmp	SHORT $LN4@CreateFeat
$LN5@CreateFeat:

; 4133 : 			((DrawablePlatform*)((SimFeatureClass*)baseObject)->baseObject)->InsertStaticObject (theObject->drawPointer);

	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR _baseObject$[ebp]
	mov	ecx, DWORD PTR [edx+596]
	call	?InsertStaticObject@DrawablePlatform@@QAEXPAVDrawableObject@@@Z ; DrawablePlatform::InsertStaticObject
$LN4@CreateFeat:

; 4134 : 	}
; 4135 : 	else 

	jmp	$LN3@CreateFeat
$LN6@CreateFeat:

; 4136 : 	{
; 4137 : 		// if we get here then this is just a loose collection of buildings, like a
; 4138 : 		// village or city, with no big flat objects between them
; 4139 : 		theObject->drawPointer = new DrawableBuilding(visType, &simView, theObject->Yaw(), 1.0F);

	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN43@CreateFeat
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _simView$[ebp]
	push	eax
	movsx	ecx, WORD PTR _visType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0DrawableBuilding@@QAE@HPAUTpoint@@MM@Z ; DrawableBuilding::DrawableBuilding
	mov	DWORD PTR tv563[ebp], eax
	jmp	SHORT $LN44@CreateFeat
$LN43@CreateFeat:
	mov	DWORD PTR tv563[ebp], 0
$LN44@CreateFeat:
	mov	edx, DWORD PTR tv563[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+332], ecx

; 4140 : 
; 4141 : 		// Insert the object
; 4142 : 		_viewPoint->InsertObject(((SimFeatureClass*)theObject)->drawPointer);

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+332]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN3@CreateFeat:

; 4143 : 	}
; 4144 : 	// KCK: Remove any previous drawable object
; 4145 : 	if (lastPointer)

	cmp	DWORD PTR _lastPointer$[ebp], 0
	je	SHORT $LN46@CreateFeat

; 4146 : 	{
; 4147 : 		if ( lastPointer->InDisplayList() )

	mov	ecx, DWORD PTR _lastPointer$[ebp]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN1@CreateFeat

; 4148 : 			_viewPoint->RemoveObject( lastPointer );

	mov	edx, DWORD PTR _lastPointer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN1@CreateFeat:

; 4149 : 		delete lastPointer;

	mov	ecx, DWORD PTR _lastPointer$[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T16[ebp], edx
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN45@CreateFeat
	push	1
	mov	eax, DWORD PTR $T16[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T16[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv589[ebp], eax
	jmp	SHORT $LN46@CreateFeat
$LN45@CreateFeat:
	mov	DWORD PTR tv589[ebp], 0
$LN46@CreateFeat:
$LN31@CreateFeat:

; 4150 : 	}
; 4151 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$1:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$2:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$3:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$4:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z$5:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z ENDP ; ACMITape::CreateFeatureDrawable
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_sfx$ = -20						; size = 4
_td$ = -16						; size = 4
tv67 = -12						; size = 4
_this$ = -8						; size = 4
_event$ = -4						; size = 4
?UpdateActiveEvents@ACMITape@@AAEXXZ PROC		; ACMITape::UpdateActiveEvents
; _this$ = ecx

; 3655 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3656 : 	ActiveEvent *event = NULL;

	mov	DWORD PTR _event$[ebp], 0

; 3657 : 	TracerEventData *td = NULL;

	mov	DWORD PTR _td$[ebp], 0

; 3658 : 	SfxClass *sfx;
; 3659 : 
; 3660 : 	event = _activeEventHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR _event$[ebp], ecx
$LN7@UpdateActi:

; 3661 : 
; 3662 : 	while( event )

	cmp	DWORD PTR _event$[ebp], 0
	je	SHORT $LN6@UpdateActi

; 3663 : 	{
; 3664 : 
; 3665 : 		// handle based on type
; 3666 : 		switch( event->eventType )

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 4
	je	SHORT $LN3@UpdateActi
	cmp	DWORD PTR tv67[ebp], 4
	jle	SHORT $LN1@UpdateActi
	cmp	DWORD PTR tv67[ebp], 6
	jle	SHORT $LN2@UpdateActi
	jmp	SHORT $LN1@UpdateActi
$LN3@UpdateActi:

; 3667 : 		{
; 3668 : 			case ACMIRecTracerStart:
; 3669 : 
; 3670 : 				// deref eventData
; 3671 : 				td = (TracerEventData *)event->eventData;

	mov	ecx, DWORD PTR _event$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _td$[ebp], edx

; 3672 : 				UpdateTracerEvent( td, _simTime - event->time );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _event$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _td$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTracerEvent@ACMITape@@AAEXPAUTracerEventData@@M@Z ; ACMITape::UpdateTracerEvent

; 3673 : 	
; 3674 : 				// remove from display list if event no longer exists
; 3675 : 				// blech, this is a very less than optimal solution
; 3676 : 				// the active event list is going to bloat over time
; 3677 : 				/*
; 3678 : 				if ( _simTime > event->timeEnd || event->time > _simTime )
; 3679 : 				{
; 3680 : 					if ( td->objTracer->InDisplayList() )
; 3681 : 						_viewPoint->RemoveObject( td->objTracer );
; 3682 : 				}
; 3683 : 				else
; 3684 : 				{
; 3685 : 					// the event is active....
; 3686 : 					if ( !td->objTracer->InDisplayList() )
; 3687 : 						_viewPoint->InsertObject( td->objTracer );
; 3688 : 					UpdateTracerEvent( td, _simTime - event->time );
; 3689 : 				}
; 3690 : 				*/
; 3691 : 				break;

	jmp	SHORT $LN4@UpdateActi
$LN2@UpdateActi:

; 3692 : 		case ACMIRecMovingSfx:
; 3693 : 		case ACMIRecStationarySfx:
; 3694 : 
; 3695 : 				// deref eventData
; 3696 : 				sfx = (SfxClass *)event->eventData;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _sfx$[ebp], ecx

; 3697 : 				sfx->ACMIExec( _simTime );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _sfx$[ebp]
	call	?ACMIExec@SfxClass@@QAEHM@Z		; SfxClass::ACMIExec
$LN1@UpdateActi:
$LN4@UpdateActi:

; 3698 : 
; 3699 : 				break;
; 3700 : 	
; 3701 : 			// currently don't handle anything else
; 3702 : 			default:
; 3703 : 				break;
; 3704 : 		}
; 3705 : 
; 3706 : 		event = event->next;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _event$[ebp], ecx

; 3707 : 	}

	jmp	SHORT $LN7@UpdateActi
$LN6@UpdateActi:

; 3708 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateActiveEvents@ACMITape@@AAEXXZ ENDP		; ACMITape::UpdateActiveEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 4
tv133 = -48						; size = 4
$T2 = -44						; size = 4
_sfx$ = -40						; size = 4
$T3 = -36						; size = 4
tv94 = -32						; size = 4
$T4 = -28						; size = 4
_this$ = -24						; size = 4
$T5 = -20						; size = 4
$T6 = -16						; size = 4
tv65 = -12						; size = 4
_td$ = -8						; size = 4
_event$ = -4						; size = 4
_eptrptr$ = 8						; size = 4
?RemoveActiveEvent@ACMITape@@AAEXPAPAU_ActiveEvent@@@Z PROC ; ACMITape::RemoveActiveEvent
; _this$ = ecx

; 3577 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 3578 : 	ActiveEvent *event = *eptrptr;

	mov	eax, DWORD PTR _eptrptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _event$[ebp], ecx

; 3579 : 	TracerEventData *td = NULL;

	mov	DWORD PTR _td$[ebp], 0

; 3580 : 	SfxClass *sfx;
; 3581 : 
; 3582 : 	// deletion based on type
; 3583 : 	switch( event->eventType )

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN7@RemoveActi
	cmp	DWORD PTR tv65[ebp], 4
	jle	$LN4@RemoveActi
	cmp	DWORD PTR tv65[ebp], 6
	jle	SHORT $LN5@RemoveActi
	jmp	$LN4@RemoveActi
$LN7@RemoveActi:

; 3584 : 	{
; 3585 : 		case ACMIRecTracerStart:
; 3586 : 
; 3587 : 			// cast eventData to appropriate type
; 3588 : 			td = (TracerEventData *)event->eventData;

	mov	ecx, DWORD PTR _event$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _td$[ebp], edx

; 3589 : 
; 3590 : 			// remove from draw list
; 3591 : 			if ( td->objTracer->InDisplayList() )

	mov	eax, DWORD PTR _td$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN6@RemoveActi

; 3592 : 				_viewPoint->RemoveObject( td->objTracer );

	mov	ecx, DWORD PTR _td$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN6@RemoveActi:

; 3593 : 
; 3594 : 			// free data memory
; 3595 : 			delete td->objTracer;

	mov	ecx, DWORD PTR _td$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN12@RemoveActi
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN13@RemoveActi
$LN12@RemoveActi:
	mov	DWORD PTR tv94[ebp], 0
$LN13@RemoveActi:

; 3596 : 			delete td;

	mov	ecx, DWORD PTR _td$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 3597 : 
; 3598 : 			break;

	jmp	SHORT $LN8@RemoveActi
$LN5@RemoveActi:

; 3599 : 
; 3600 : 		case ACMIRecMovingSfx:
; 3601 : 		case ACMIRecStationarySfx:
; 3602 : 
; 3603 : 			// cast eventData to appropriate type
; 3604 : 			sfx = (SfxClass *)event->eventData;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _sfx$[ebp], ecx

; 3605 : 
; 3606 : 			// free data memory
; 3607 : 			delete sfx;

	mov	edx, DWORD PTR _sfx$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN14@RemoveActi
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_GSfxClass@@QAEPAXI@Z
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN15@RemoveActi
$LN14@RemoveActi:
	mov	DWORD PTR tv133[ebp], 0
$LN15@RemoveActi:

; 3608 : 
; 3609 : 			break;

	jmp	SHORT $LN8@RemoveActi
$LN4@RemoveActi:

; 3610 : 
; 3611 : 		// current don't handle anything else
; 3612 : 		default:
; 3613 : 			return;

	jmp	SHORT $LN10@RemoveActi
$LN8@RemoveActi:

; 3614 : 	}
; 3615 : 
; 3616 : 	// take event out of active Event List
; 3617 : 	if ( event->prev )

	mov	ecx, DWORD PTR _event$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@RemoveActi

; 3618 : 		event->prev->next = event->next;

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _event$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 3619 : 	else

	jmp	SHORT $LN2@RemoveActi
$LN3@RemoveActi:

; 3620 : 		_activeEventHead = event->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _event$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+192], edx
$LN2@RemoveActi:

; 3621 : 
; 3622 : 	if ( event->next )

	mov	eax, DWORD PTR _event$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@RemoveActi

; 3623 : 		event->next->prev = event->prev;

	mov	ecx, DWORD PTR _event$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx
$LN1@RemoveActi:

; 3624 : 
; 3625 : 	// delete event data and set caller's pointer to NULL
; 3626 : 	delete event;

	mov	edx, DWORD PTR _event$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 3627 : 	*eptrptr =NULL;

	mov	ecx, DWORD PTR _eptrptr$[ebp]
	mov	DWORD PTR [ecx], 0
$LN10@RemoveActi:

; 3628 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveActiveEvent@ACMITape@@AAEXPAPAU_ActiveEvent@@@Z ENDP ; ACMITape::RemoveActiveEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T2 = -152						; size = 4
$T3 = -148						; size = 4
$T4 = -144						; size = 4
$T5 = -140						; size = 4
$T6 = -136						; size = 4
$T7 = -132						; size = 4
$T8 = -128						; size = 4
$T9 = -124						; size = 4
$T10 = -120						; size = 4
$T11 = -116						; size = 4
tv138 = -112						; size = 4
$T12 = -108						; size = 4
tv198 = -104						; size = 4
$T13 = -100						; size = 4
tv357 = -96						; size = 4
tv288 = -92						; size = 4
$T14 = -88						; size = 4
tv245 = -84						; size = 4
tv305 = -80						; size = 4
$T15 = -76						; size = 4
$T16 = -72						; size = 4
$T17 = -68						; size = 4
tv70 = -64						; size = 4
_simBase$ = -60						; size = 4
_sfx$ = -56						; size = 4
_this$ = -52						; size = 4
_td$ = -48						; size = 4
_event$ = -44						; size = 4
_vec$ = -40						; size = 12
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eh$ = 8						; size = 4
_dT$ = 12						; size = 4
?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z PROC ; ACMITape::InsertActiveEvent
; _this$ = ecx

; 3433 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3434 : 	ActiveEvent *event = NULL;

	mov	DWORD PTR _event$[ebp], 0

; 3435 : 	TracerEventData *td = NULL;

	mov	DWORD PTR _td$[ebp], 0

; 3436 : 	SfxClass *sfx = NULL;

	mov	DWORD PTR _sfx$[ebp], 0

; 3437 : 	SimBaseClass *simBase;
; 3438 : 	Tpoint pos;
; 3439 : 	Tpoint vec;
; 3440 : 
; 3441 : 	// don't insert if passed end time
; 3442 : 	if ( eh->time + dT > eh->timeEnd )

	mov	eax, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [eax+5]
	addss	xmm0, DWORD PTR _dT$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	comiss	xmm0, DWORD PTR [ecx+9]
	jbe	SHORT $LN10@InsertActi

; 3443 : 		return NULL;

	xor	eax, eax
	jmp	$LN11@InsertActi
$LN10@InsertActi:

; 3444 : 
; 3445 : 	// creation based on type
; 3446 : 	switch( eh->eventType )

	mov	edx, DWORD PTR _eh$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv70[ebp], al
	cmp	BYTE PTR tv70[ebp], 4
	je	SHORT $LN7@InsertActi
	cmp	BYTE PTR tv70[ebp], 5
	je	$LN6@InsertActi
	cmp	BYTE PTR tv70[ebp], 6
	je	$LN5@InsertActi
	jmp	$LN2@InsertActi
$LN7@InsertActi:

; 3447 : 	{
; 3448 : 		case ACMIRecTracerStart:
; 3449 : 			// create new event record
; 3450 : 			event = new ActiveEvent;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _event$[ebp], ecx

; 3451 : 			F4Assert( event );
; 3452 : 			event->eventType = eh->eventType;

	mov	edx, DWORD PTR _eh$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _event$[ebp]
	mov	DWORD PTR [ecx], eax

; 3453 : 			event->index = eh->index;

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [edx+4], ecx

; 3454 : 			event->time = eh->time;

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	DWORD PTR [edx+8], ecx

; 3455 : 			event->timeEnd = eh->timeEnd;

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+9]
	mov	DWORD PTR [edx+12], ecx

; 3456 : 
; 3457 : 			// create new tracer event record
; 3458 : 			td = new TracerEventData;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _td$[ebp], edx

; 3459 : 			F4Assert( td );
; 3460 : 			event->eventData = (void *)td;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _td$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 3461 : 
; 3462 : 			// init tracer data
; 3463 : 			td->x = eh->x;

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+29]
	mov	DWORD PTR [edx], ecx

; 3464 : 			td->y = eh->y;

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+33]
	mov	DWORD PTR [edx+4], ecx

; 3465 : 			td->z = eh->z;

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+37]
	mov	DWORD PTR [edx+8], ecx

; 3466 : 			td->dx = eh->dx;

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	mov	DWORD PTR [edx+12], ecx

; 3467 : 			td->dy = eh->dy;

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+45]
	mov	DWORD PTR [edx+16], ecx

; 3468 : 			td->dz = eh->dz;

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+49]
	mov	DWORD PTR [edx+20], ecx

; 3469 : 			// create tracer
; 3470 : 			td->objTracer = new DrawableTracer( 1.3f );

	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN13@InsertActi
	push	ecx
	movss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR $T16[ebp]
	call	??0DrawableTracer@@QAE@M@Z		; DrawableTracer::DrawableTracer
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN14@InsertActi
$LN13@InsertActi:
	mov	DWORD PTR tv138[ebp], 0
$LN14@InsertActi:
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _td$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3471 : 			td->objTracer->SetAlpha( 0.8f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _td$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 3472 : 			td->objTracer->SetRGB( 1.0f, 1.0f, 0.2f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _td$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _td$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 3473 : 
; 3474 : 			UpdateTracerEvent( td, dT );

	push	ecx
	movss	xmm0, DWORD PTR _dT$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _td$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTracerEvent@ACMITape@@AAEXPAUTracerEventData@@M@Z ; ACMITape::UpdateTracerEvent

; 3475 : 
; 3476 : 			// put it into the draw list
; 3477 : 			_viewPoint->InsertObject( td->objTracer );

	mov	edx, DWORD PTR _td$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject

; 3478 : 
; 3479 : 			break;

	jmp	$LN8@InsertActi
$LN6@InsertActi:

; 3480 : 
; 3481 : 		case ACMIRecStationarySfx:
; 3482 : 			// create new event record
; 3483 : 			event = new ActiveEvent;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR _event$[ebp], edx

; 3484 : 			F4Assert( event );
; 3485 : 			event->eventType = eh->eventType;

	mov	eax, DWORD PTR _eh$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _event$[ebp]
	mov	DWORD PTR [edx], ecx

; 3486 : 			event->index = eh->index;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax+4], edx

; 3487 : 			event->time = eh->time;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	DWORD PTR [eax+8], edx

; 3488 : 			event->timeEnd = eh->timeEnd;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+9]
	mov	DWORD PTR [eax+12], edx

; 3489 : 
; 3490 : 			pos.x = eh->x;

	mov	eax, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [eax+29]
	movss	DWORD PTR _pos$[ebp], xmm0

; 3491 : 			pos.y = eh->y;

	mov	ecx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [ecx+33]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 3492 : 			pos.z = eh->z;

	mov	edx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [edx+37]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 3493 : 
; 3494 : 			// create new tracer event record
; 3495 : 			sfx = new SfxClass( eh->type,
; 3496 : 								&pos,
; 3497 : 								(float)(eh->timeEnd - eh->time),
; 3498 : 								eh->scale );

	push	192					; 000000c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN15@InsertActi
	mov	eax, DWORD PTR _eh$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+25]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [ecx+9]
	subss	xmm0, DWORD PTR [edx+5]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+13]
	push	edx
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0SfxClass@@QAE@HPAUTpoint@@MM@Z	; SfxClass::SfxClass
	mov	DWORD PTR tv198[ebp], eax
	jmp	SHORT $LN16@InsertActi
$LN15@InsertActi:
	mov	DWORD PTR tv198[ebp], 0
$LN16@InsertActi:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _sfx$[ebp], ecx

; 3499 : 
; 3500 : 			F4Assert( sfx );
; 3501 : 			event->eventData = (void *)sfx;

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR _sfx$[ebp]
	mov	DWORD PTR [edx+16], eax

; 3502 : 
; 3503 : 			sfx->ACMIStart( _viewPoint, event->time, _simTime );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+108]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _event$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _sfx$[ebp]
	call	?ACMIStart@SfxClass@@QAEXPAVRViewPoint@@MM@Z ; SfxClass::ACMIStart

; 3504 : 
; 3505 : 			break;

	jmp	$LN8@InsertActi
$LN5@InsertActi:

; 3506 : 
; 3507 : 		case ACMIRecMovingSfx:
; 3508 : 			// create new event record
; 3509 : 			event = new ActiveEvent;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _event$[ebp], edx

; 3510 : 			F4Assert( event );
; 3511 : 			event->eventType = eh->eventType;

	mov	eax, DWORD PTR _eh$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _event$[ebp]
	mov	DWORD PTR [edx], ecx

; 3512 : 			event->index = eh->index;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax+4], edx

; 3513 : 			event->time = eh->time;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	DWORD PTR [eax+8], edx

; 3514 : 			event->timeEnd = eh->timeEnd;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	mov	edx, DWORD PTR [ecx+9]
	mov	DWORD PTR [eax+12], edx

; 3515 : 
; 3516 : 			pos.x = eh->x;

	mov	eax, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [eax+29]
	movss	DWORD PTR _pos$[ebp], xmm0

; 3517 : 			pos.y = eh->y;

	mov	ecx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [ecx+33]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 3518 : 			pos.z = eh->z;

	mov	edx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [edx+37]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 3519 : 			vec.x = eh->dx;

	mov	eax, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [eax+41]
	movss	DWORD PTR _vec$[ebp], xmm0

; 3520 : 			vec.y = eh->dy;

	mov	ecx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [ecx+45]
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 3521 : 			vec.z = eh->dz;

	mov	edx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [edx+49]
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 3522 : 
; 3523 : 			// create new sfx 
; 3524 : 			if ( eh->user < 0 )

	mov	eax, DWORD PTR _eh$[ebp]
	cmp	DWORD PTR [eax+17], 0
	jge	$LN4@InsertActi

; 3525 : 			{
; 3526 : 				sfx = new SfxClass( eh->type,
; 3527 : 								eh->flags,
; 3528 : 								&pos,
; 3529 : 								&vec,
; 3530 : 								(float)(eh->timeEnd - eh->time),
; 3531 : 								eh->scale );

	push	192					; 000000c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN17@InsertActi
	mov	ecx, DWORD PTR _eh$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+25]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _eh$[ebp]
	mov	eax, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [edx+9]
	subss	xmm0, DWORD PTR [eax+5]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+21]
	push	ecx
	mov	edx, DWORD PTR _eh$[ebp]
	mov	eax, DWORD PTR [edx+13]
	push	eax
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0SfxClass@@QAE@HHPAUTpoint@@0MM@Z	; SfxClass::SfxClass
	mov	DWORD PTR tv245[ebp], eax
	jmp	SHORT $LN18@InsertActi
$LN17@InsertActi:
	mov	DWORD PTR tv245[ebp], 0
$LN18@InsertActi:
	mov	ecx, DWORD PTR tv245[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _sfx$[ebp], edx

; 3532 : 			}
; 3533 : 			else {

	jmp	$LN3@InsertActi
$LN4@InsertActi:

; 3534 : 				// we need to build a base obj first
; 3535 : 				simBase = new SimStaticClass(0);// SimBaseClass( 0 );

	push	592					; 00000250H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN19@InsertActi
	push	0
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0SimStaticClass@@QAE@H@Z		; SimStaticClass::SimStaticClass
	mov	DWORD PTR tv288[ebp], eax
	jmp	SHORT $LN20@InsertActi
$LN19@InsertActi:
	mov	DWORD PTR tv288[ebp], 0
$LN20@InsertActi:
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR _simBase$[ebp], ecx

; 3536 : 				simBase->drawPointer = new DrawableBSP( eh->user, &pos, &IMatrix, 1.0f );

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN21@InsertActi
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ?IMatrix@@3UTrotation@@B		; IMatrix
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+17]
	push	ecx
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN22@InsertActi
$LN21@InsertActi:
	mov	DWORD PTR tv305[ebp], 0
$LN22@InsertActi:
	mov	edx, DWORD PTR tv305[ebp]
	mov	DWORD PTR $T8[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _simBase$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax+332], ecx

; 3537 : 				simBase->SetPosition(pos.x, pos.y, pos.z);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _simBase$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 3538 : 				simBase->SetDelta(vec.x, vec.y, vec.z);

	push	ecx
	movss	xmm0, DWORD PTR _vec$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vec$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vec$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _simBase$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 3539 : 				simBase->SetYPR(0.0f, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _simBase$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 3540 : 				simBase->SetYPRDelta(0.0f, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _simBase$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 3541 : 				sfx = new SfxClass( eh->type, eh->flags, simBase, (float)(eh->timeEnd - eh->time), eh->scale);

	push	192					; 000000c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN23@InsertActi
	mov	edx, DWORD PTR _eh$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+25]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR _eh$[ebp]
	movss	xmm0, DWORD PTR [eax+9]
	subss	xmm0, DWORD PTR [ecx+5]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _simBase$[ebp]
	push	edx
	mov	eax, DWORD PTR _eh$[ebp]
	mov	ecx, DWORD PTR [eax+21]
	push	ecx
	mov	edx, DWORD PTR _eh$[ebp]
	mov	eax, DWORD PTR [edx+13]
	push	eax
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0SfxClass@@QAE@HHPAVSimBaseClass@@MM@Z ; SfxClass::SfxClass
	mov	DWORD PTR tv357[ebp], eax
	jmp	SHORT $LN24@InsertActi
$LN23@InsertActi:
	mov	DWORD PTR tv357[ebp], 0
$LN24@InsertActi:
	mov	ecx, DWORD PTR tv357[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _sfx$[ebp], edx
$LN3@InsertActi:

; 3542 : 			}
; 3543 : 
; 3544 : 			F4Assert( sfx );
; 3545 : 			event->eventData = (void *)sfx;

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR _sfx$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 3546 : 
; 3547 : 			sfx->ACMIStart( _viewPoint, event->time, _simTime );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+108]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _event$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	push	edx
	mov	ecx, DWORD PTR _sfx$[ebp]
	call	?ACMIStart@SfxClass@@QAEXPAVRViewPoint@@MM@Z ; SfxClass::ACMIStart

; 3548 : 
; 3549 : 			break;

	jmp	SHORT $LN8@InsertActi
$LN2@InsertActi:

; 3550 : 
; 3551 : 		// current don't handle anything else
; 3552 : 		default:
; 3553 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN11@InsertActi
$LN8@InsertActi:

; 3554 : 	}
; 3555 : 
; 3556 : 	// now insert it into the active list
; 3557 : 	event->prev = NULL;

	mov	eax, DWORD PTR _event$[ebp]
	mov	DWORD PTR [eax+24], 0

; 3558 : 	if ( _activeEventHead )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN1@InsertActi

; 3559 : 	{
; 3560 : 		_activeEventHead->prev = event;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR _event$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN1@InsertActi:

; 3561 : 	}
; 3562 : 
; 3563 : 	event->next = _activeEventHead;

	mov	edx, DWORD PTR _event$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR [edx+20], ecx

; 3564 : 	_activeEventHead = event;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _event$[ebp]
	mov	DWORD PTR [edx+192], eax

; 3565 : 
; 3566 : 	return event;

	mov	eax, DWORD PTR _event$[ebp]
$LN11@InsertActi:

; 3567 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$0:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$1:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$2:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$3:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$4:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z$5:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z ENDP ; ACMITape::InsertActiveEvent
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?CleanupEventList@ACMITape@@AAEXXZ PROC			; ACMITape::CleanupEventList
; _this$ = ecx

; 3408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3409 : 	int i;
; 3410 : 
; 3411 : 	F4Assert( _eventList );
; 3412 : 
; 3413 : 	for ( i = 0; i < _tapeHdr.numEvents; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CleanupEve
$LN3@CleanupEve:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CleanupEve:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+56]
	jge	SHORT $LN2@CleanupEve

; 3414 : 	{
; 3415 : 		if ( _eventList[i] )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN1@CleanupEve

; 3416 : 		{
; 3417 : 			RemoveActiveEvent( &_eventList[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveActiveEvent@ACMITape@@AAEXPAPAU_ActiveEvent@@@Z ; ACMITape::RemoveActiveEvent
$LN1@CleanupEve:

; 3418 : 		}
; 3419 : 	}

	jmp	SHORT $LN3@CleanupEve
$LN2@CleanupEve:

; 3420 : 
; 3421 : 	delete [] _eventList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 3422 : 	_eventList = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0

; 3423 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupEventList@ACMITape@@AAEXXZ ENDP			; ACMITape::CleanupEventList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseTapeFile@ACMITape@@AAEXXZ PROC			; ACMITape::CloseTapeFile
; _this$ = ecx

; 2379 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2380 : 	UnmapViewOfFile( _tape );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	call	DWORD PTR __imp__UnmapViewOfFile@4

; 2381 : 	CloseHandle( _tapeMapHandle );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 2382 : 	CloseHandle( _tapeFileHandle );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4

; 2383 : 	_tape = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+156], 0

; 2384 : 	return;
; 2385 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CloseTapeFile@ACMITape@@AAEXXZ ENDP			; ACMITape::CloseTapeFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_length$ = -12						; size = 4
_fd$ = -8						; size = 4
_this$ = -4						; size = 4
_fname$ = 8						; size = 4
?OpenTapeFile@ACMITape@@AAEJPAD@Z PROC			; ACMITape::OpenTapeFile
; _this$ = ecx

; 2288 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2289 : 	FILE *fd;
; 2290 : 	long length=0;

	mov	DWORD PTR _length$[ebp], 0

; 2291 : 
; 2292 : 	// 1st get the header info and check it out
; 2293 : 	fd = fopen( fname, "rb" );

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _fname$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fd$[ebp], eax

; 2294 : 	if ( fd == NULL )

	cmp	DWORD PTR _fd$[ebp], 0
	jne	SHORT $LN6@OpenTapeFi

; 2295 : 	{
; 2296 : 		MonoPrint( "Unable to Open Tape File\n");

	push	OFFSET ??_C@_0BK@GKMGOOKA@Unable?5to?5Open?5Tape?5File?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 2297 : 		return(0);

	xor	eax, eax
	jmp	$LN7@OpenTapeFi
$LN6@OpenTapeFi:

; 2298 : 	}
; 2299 : 
; 2300 : 	// read in the tape header
; 2301 : 	if ( !fread( &_tapeHdr, sizeof( ACMITapeHeader), 1, fd ) )

	mov	ecx, DWORD PTR _fd$[ebp]
	push	ecx
	push	1
	push	80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@OpenTapeFi

; 2302 : 	{
; 2303 : 		MonoPrint( "Unable to to read tape header\n");

	push	OFFSET ??_C@_0BP@ONECOFNE@Unable?5to?5to?5read?5tape?5header?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 2304 : 		fclose( fd );

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 2305 : 		return(0);

	xor	eax, eax
	jmp	$LN7@OpenTapeFi
$LN5@OpenTapeFi:

; 2306 : 	}
; 2307 : 
; 2308 : 	// close the file
; 2309 : 	fclose( fd );

	mov	ecx, DWORD PTR _fd$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4

; 2310 : 
; 2311 : 	// check that we've got a valid file
; 2312 : 	if ( _tapeHdr.fileID != 'TAPE' )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 1413566533		; 54415045H
	je	SHORT $LN4@OpenTapeFi

; 2313 : 	{
; 2314 : 		MonoPrint( "Invalid Tape File\n");

	push	OFFSET ??_C@_0BD@DGLPMPEG@Invalid?5Tape?5File?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 2315 : 		return(0);

	xor	eax, eax
	jmp	$LN7@OpenTapeFi
$LN4@OpenTapeFi:

; 2316 : 	}
; 2317 : 
; 2318 : 	// Set up memory mapping
; 2319 : 
; 2320 : 	// open the tape file
; 2321 : 	_tapeFileHandle = CreateFile(
; 2322 : 						fname,
; 2323 : 						GENERIC_READ | GENERIC_WRITE,
; 2324 : 						FILE_SHARE_READ,
; 2325 : 						NULL,
; 2326 : 						OPEN_EXISTING,
; 2327 : 						FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
; 2328 : 						NULL );

	push	0
	push	268435584				; 10000080H
	push	3
	push	0
	push	1
	push	-1073741824				; c0000000H
	mov	eax, DWORD PTR _fname$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 2329 : 	if ( _tapeFileHandle == INVALID_HANDLE_VALUE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+88], -1
	jne	SHORT $LN3@OpenTapeFi

; 2330 : 	{
; 2331 : 		MonoPrint( "CreateFile failed on tape open\n" );

	push	OFFSET ??_C@_0CA@CJCMBNNE@CreateFile?5failed?5on?5tape?5open?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 2332 : 		return(0);

	xor	eax, eax
	jmp	$LN7@OpenTapeFi
$LN3@OpenTapeFi:

; 2333 : 	}
; 2334 : 	length=GetFileSize(_tapeFileHandle,NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	DWORD PTR __imp__GetFileSize@8
	mov	DWORD PTR _length$[ebp], eax

; 2335 : 
; 2336 : 	// create file mapping
; 2337 : 	_tapeMapHandle = CreateFileMapping(
; 2338 : 						_tapeFileHandle,
; 2339 : 						NULL,
; 2340 : 						PAGE_READONLY,
; 2341 : 						0,
; 2342 : 						0,
; 2343 : 						NULL );

	push	0
	push	0
	push	0
	push	2
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	DWORD PTR __imp__CreateFileMappingA@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 2344 : 	if ( _tapeMapHandle == NULL )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jne	SHORT $LN2@OpenTapeFi

; 2345 : 	{
; 2346 : 		MonoPrint( "CreateFileMapping failed on tape open\n" );

	push	OFFSET ??_C@_0CH@LHLGEOPK@CreateFileMapping?5failed?5on?5tape@
	call	_MonoPrint
	add	esp, 4

; 2347 : 		CloseHandle( _tapeFileHandle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 2348 : 		return(0);

	xor	eax, eax
	jmp	SHORT $LN7@OpenTapeFi
$LN2@OpenTapeFi:

; 2349 : 	}
; 2350 : 
; 2351 : 	// map view of file
; 2352 : 	_tape = MapViewOfFile(
; 2353 : 						_tapeMapHandle,
; 2354 : 						FILE_MAP_READ,
; 2355 : 						0,
; 2356 : 						0,
; 2357 : 						0 );

	push	0
	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	call	DWORD PTR __imp__MapViewOfFile@20
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+156], eax

; 2358 : 	if ( _tape == NULL )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+156], 0
	jne	SHORT $LN1@OpenTapeFi

; 2359 : 	{
; 2360 : 		MonoPrint( "MapViewOfFile failed on tape open\n" );

	push	OFFSET ??_C@_0CD@FIBPIHAP@MapViewOfFile?5failed?5on?5tape?5ope@
	call	_MonoPrint
	add	esp, 4

; 2361 : 		CloseHandle( _tapeMapHandle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4

; 2362 : 		CloseHandle( _tapeFileHandle );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 2363 : 		return(0);

	xor	eax, eax
	jmp	SHORT $LN7@OpenTapeFi
$LN1@OpenTapeFi:

; 2364 : 	}
; 2365 : 
; 2366 : 	// hunky dory
; 2367 : 	return(length);

	mov	eax, DWORD PTR _length$[ebp]
$LN7@OpenTapeFi:

; 2368 : 
; 2369 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?OpenTapeFile@ACMITape@@AAEJPAD@Z ENDP			; ACMITape::OpenTapeFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -156						; size = 4
$T2 = -152						; size = 4
tv422 = -148						; size = 4
$T3 = -144						; size = 4
$T4 = -140						; size = 4
$T5 = -136						; size = 4
tv404 = -132						; size = 4
$T6 = -128						; size = 4
$T7 = -124						; size = 4
_numEntities$ = -120					; size = 4
tv355 = -116						; size = 4
$T8 = -112						; size = 4
$T9 = -108						; size = 4
tv230 = -104						; size = 4
$T10 = -100						; size = 4
tv199 = -96						; size = 4
tv323 = -92						; size = 4
tv168 = -88						; size = 4
$T11 = -84						; size = 4
tv137 = -80						; size = 4
tv292 = -76						; size = 4
tv91 = -72						; size = 4
$T12 = -68						; size = 4
tv261 = -64						; size = 4
$T13 = -60						; size = 4
$T14 = -56						; size = 4
$T15 = -52						; size = 4
$T16 = -48						; size = 4
$T17 = -44						; size = 4
$T18 = -40						; size = 4
$T19 = -36						; size = 4
$T20 = -32						; size = 4
$T21 = -28						; size = 4
$T22 = -24						; size = 4
$T23 = -20						; size = 4
$T24 = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_ep$ = -4						; size = 4
?CleanupSimTapeEntities@ACMITape@@AAEXXZ PROC		; ACMITape::CleanupSimTapeEntities
; _this$ = ecx

; 2731 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 2732 : 	int				
; 2733 : 		i,
; 2734 : 		numEntities;
; 2735 : 	SimTapeEntity *ep;
; 2736 : 
; 2737 : 	F4Assert(_simTapeEntities != NULL);
; 2738 : 
; 2739 : 	// create array of SimTapeEntity
; 2740 : 	numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 2741 : 
; 2742 : 	// for each entity, create it's object stuff....
; 2743 : 	for(i = 0; i < numEntities; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@CleanupSim
$LN27@CleanupSim:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@CleanupSim:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEntities$[ebp]
	jge	$LN26@CleanupSim

; 2744 : 	{
; 2745 : 		// get pointer
; 2746 : 		ep = &_simTapeEntities[i];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _ep$[ebp], edx

; 2747 : 
; 2748 : 		// if there's a base object...
; 2749 : 		if ( ep->objBase )

	mov	ecx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN25@CleanupSim

; 2750 : 		{
; 2751 : 			// remove from display
; 2752 : 			if(ep->objBase->drawPointer->InDisplayList())

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN24@CleanupSim

; 2753 : 			{
; 2754 : 				_viewPoint->RemoveObject(ep->objBase->drawPointer);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+332]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN24@CleanupSim:

; 2755 : 			}
; 2756 : 			delete ep->objBase->drawPointer;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T17[ebp], edx
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN31@CleanupSim
	push	1
	mov	eax, DWORD PTR $T17[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T17[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN32@CleanupSim
$LN31@CleanupSim:
	mov	DWORD PTR tv91[ebp], 0
$LN32@CleanupSim:

; 2757 : 			ep->objBase->drawPointer = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+332], 0

; 2758 : 			delete ep->objBase;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T15[ebp], edx
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN33@CleanupSim
	push	1
	mov	eax, DWORD PTR $T15[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T15[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN34@CleanupSim
$LN33@CleanupSim:
	mov	DWORD PTR tv137[ebp], 0
$LN34@CleanupSim:

; 2759 : 			ep->objBase = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx], 0
$LN25@CleanupSim:

; 2760 : 		}
; 2761 : 
; 2762 : 		// if there's a trail object...
; 2763 : 		if ( ep->objTrail )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN23@CleanupSim

; 2764 : 		{
; 2765 : 			// remove from display
; 2766 : 			if(ep->objTrail->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN22@CleanupSim

; 2767 : 			{
; 2768 : 				_viewPoint->RemoveObject(ep->objTrail);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN22@CleanupSim:

; 2769 : 			}
; 2770 : 			delete ep->objTrail;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T13[ebp], edx
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR $T21[ebp], eax
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN35@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T21[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T21[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN36@CleanupSim
$LN35@CleanupSim:
	mov	DWORD PTR tv168[ebp], 0
$LN36@CleanupSim:

; 2771 : 			ep->objTrail = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN23@CleanupSim:

; 2772 : 		}
; 2773 : 
; 2774 : 		// if there's a 2d object...
; 2775 : 		if ( ep->obj2d )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN21@CleanupSim

; 2776 : 		{
; 2777 : 			// remove from display
; 2778 : 			if(ep->obj2d->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN20@CleanupSim

; 2779 : 			{
; 2780 : 				_viewPoint->RemoveObject(ep->obj2d);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN20@CleanupSim:

; 2781 : 			}
; 2782 : 			delete ep->obj2d;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T24[ebp], eax
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN37@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T24[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T24[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN38@CleanupSim
$LN37@CleanupSim:
	mov	DWORD PTR tv199[ebp], 0
$LN38@CleanupSim:

; 2783 : 			ep->obj2d = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+64], 0
$LN21@CleanupSim:

; 2784 : 		}
; 2785 : 
; 2786 : 		// if there's a bsp object...
; 2787 : 		if ( ep->objBsp1 )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN19@CleanupSim

; 2788 : 		{
; 2789 : 			// remove from display
; 2790 : 			if(ep->objBsp1->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN18@CleanupSim

; 2791 : 			{
; 2792 : 				_viewPoint->RemoveObject(ep->objBsp1);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN18@CleanupSim:

; 2793 : 			}
; 2794 : 			delete ep->objBsp1;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR $T6[ebp], edx
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T19[ebp], eax
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN39@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T19[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T19[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv230[ebp], eax
	jmp	SHORT $LN40@CleanupSim
$LN39@CleanupSim:
	mov	DWORD PTR tv230[ebp], 0
$LN40@CleanupSim:

; 2795 : 			ep->objBsp1 = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+56], 0
$LN19@CleanupSim:

; 2796 : 		}
; 2797 : 
; 2798 : 		// if there's a bsp object...
; 2799 : 		if ( ep->objBsp2 )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN17@CleanupSim

; 2800 : 		{
; 2801 : 			// remove from display
; 2802 : 			if(ep->objBsp2->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN16@CleanupSim

; 2803 : 			{
; 2804 : 				_viewPoint->RemoveObject(ep->objBsp2);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN16@CleanupSim:

; 2805 : 			}
; 2806 : 			delete ep->objBsp2;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T23[ebp], eax
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN41@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T23[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T23[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv261[ebp], eax
	jmp	SHORT $LN42@CleanupSim
$LN41@CleanupSim:
	mov	DWORD PTR tv261[ebp], 0
$LN42@CleanupSim:

; 2807 : 			ep->objBsp2 = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+60], 0
$LN17@CleanupSim:

; 2808 : 		}
; 2809 : 
; 2810 : 		// if there's a trail object...
; 2811 : 		if ( ep->wlTrail )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+72], 0
	je	SHORT $LN15@CleanupSim

; 2812 : 		{
; 2813 : 			// remove from display
; 2814 : 			if(ep->wlTrail->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN14@CleanupSim

; 2815 : 			{
; 2816 : 				_viewPoint->RemoveObject(ep->wlTrail);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN14@CleanupSim:

; 2817 : 			}
; 2818 : 			delete ep->wlTrail;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T12[ebp], edx
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T22[ebp], eax
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN43@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T22[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T22[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv292[ebp], eax
	jmp	SHORT $LN44@CleanupSim
$LN43@CleanupSim:
	mov	DWORD PTR tv292[ebp], 0
$LN44@CleanupSim:

; 2819 : 			ep->wlTrail = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+72], 0
$LN15@CleanupSim:

; 2820 : 		}
; 2821 : 
; 2822 : 		// if there's a trail object...
; 2823 : 		if ( ep->wrTrail )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN13@CleanupSim

; 2824 : 		{
; 2825 : 			// remove from display
; 2826 : 			if(ep->wrTrail->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN12@CleanupSim

; 2827 : 			{
; 2828 : 				_viewPoint->RemoveObject(ep->wrTrail);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN12@CleanupSim:

; 2829 : 			}
; 2830 : 			delete ep->wrTrail;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T11[ebp], edx
	mov	eax, DWORD PTR $T11[ebp]
	mov	DWORD PTR $T20[ebp], eax
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN45@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T20[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T20[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv323[ebp], eax
	jmp	SHORT $LN46@CleanupSim
$LN45@CleanupSim:
	mov	DWORD PTR tv323[ebp], 0
$LN46@CleanupSim:

; 2831 : 			ep->wrTrail = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+76], 0
$LN13@CleanupSim:

; 2832 : 		}
; 2833 : 	}

	jmp	$LN27@CleanupSim
$LN26@CleanupSim:

; 2834 : 
; 2835 : 	delete [] _simTapeEntities;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T10[ebp], eax
	mov	ecx, DWORD PTR $T10[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2836 : 	_simTapeEntities = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 2837 : 
; 2838 : 	// for each feature, remove its object stuff
; 2839 : 	// 1st pass do drawpointer
; 2840 : 	for(i = 0; i < _tapeHdr.numFeat; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@CleanupSim
$LN10@CleanupSim:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@CleanupSim:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	$LN9@CleanupSim

; 2841 : 	{
; 2842 : 		// get pointer
; 2843 : 		ep = &_simTapeFeatures[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+120]
	mov	DWORD PTR _ep$[ebp], eax

; 2844 : 
; 2845 : 		// if there's a base object...
; 2846 : 		if ( ep->objBase )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN8@CleanupSim

; 2847 : 		{
; 2848 : 			// remove from display
; 2849 : 			if(ep->objBase->drawPointer->InDisplayList())

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN7@CleanupSim

; 2850 : 			{
; 2851 : 				_viewPoint->RemoveObject(ep->objBase->drawPointer);

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN7@CleanupSim:

; 2852 : 			}
; 2853 : 			delete ep->objBase->drawPointer;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR $T9[ebp], edx
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR $T18[ebp], eax
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN47@CleanupSim
	push	1
	mov	ecx, DWORD PTR $T18[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T18[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv355[ebp], eax
	jmp	SHORT $LN48@CleanupSim
$LN47@CleanupSim:
	mov	DWORD PTR tv355[ebp], 0
$LN48@CleanupSim:

; 2854 : 			ep->objBase->drawPointer = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+332], 0
$LN8@CleanupSim:

; 2855 : 		}
; 2856 : 
; 2857 : 	}

	jmp	$LN10@CleanupSim
$LN9@CleanupSim:

; 2858 : 
; 2859 : 	// 2nd pass delete baseObj pointer and objBase
; 2860 : 	for(i = 0; i < _tapeHdr.numFeat; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CleanupSim
$LN5@CleanupSim:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CleanupSim:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	$LN4@CleanupSim

; 2861 : 	{
; 2862 : 		// get pointer
; 2863 : 		ep = &_simTapeFeatures[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+120]
	mov	DWORD PTR _ep$[ebp], eax

; 2864 : 
; 2865 : 		// if there's a base object...
; 2866 : 		if ( ep->objBase )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN3@CleanupSim

; 2867 : 		{
; 2868 : 			// remove from display
; 2869 : 			if( ((SimFeatureClass *)ep->objBase)->baseObject)

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+596], 0
	je	SHORT $LN2@CleanupSim

; 2870 : 			{
; 2871 : 				if( ((SimFeatureClass *)ep->objBase)->baseObject->InDisplayList())

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+596]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN1@CleanupSim

; 2872 : 				{
; 2873 : 					_viewPoint->RemoveObject( ((SimFeatureClass*)ep->objBase)->baseObject);

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+596]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN1@CleanupSim:

; 2874 : 				}
; 2875 : 				delete ((SimFeatureClass *)ep->objBase)->baseObject;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+596]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T16[ebp], edx
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN49@CleanupSim
	push	1
	mov	eax, DWORD PTR $T16[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T16[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv404[ebp], eax
	jmp	SHORT $LN50@CleanupSim
$LN49@CleanupSim:
	mov	DWORD PTR tv404[ebp], 0
$LN50@CleanupSim:

; 2876 : 				((SimFeatureClass *)ep->objBase)->baseObject = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+596], 0
$LN2@CleanupSim:

; 2877 : 			}
; 2878 : 
; 2879 : 			delete ep->objBase;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T14[ebp], edx
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN51@CleanupSim
	push	1
	mov	eax, DWORD PTR $T14[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T14[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	mov	DWORD PTR tv422[ebp], eax
	jmp	SHORT $LN52@CleanupSim
$LN51@CleanupSim:
	mov	DWORD PTR tv422[ebp], 0
$LN52@CleanupSim:

; 2880 : 			ep->objBase = NULL;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@CleanupSim:

; 2881 : 		}
; 2882 : 
; 2883 : 	}

	jmp	$LN5@CleanupSim
$LN4@CleanupSim:

; 2884 : 
; 2885 : 	delete [] _simTapeFeatures;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2886 : 	_simTapeFeatures = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 0

; 2887 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupSimTapeEntities@ACMITape@@AAEXXZ ENDP		; ACMITape::CleanupSimTapeEntities
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T2 = -256						; size = 4
$T3 = -252						; size = 4
_visType$4 = -248					; size = 2
$T5 = -244						; size = 4
_fc$6 = -240						; size = 4
$T7 = -236						; size = 4
_classPtr$8 = -232					; size = 4
$T9 = -228						; size = 4
$T10 = -224						; size = 4
$T11 = -220						; size = 4
$T12 = -216						; size = 4
$T13 = -212						; size = 4
$T14 = -208						; size = 4
_classPtr$15 = -204					; size = 4
$T16 = -200						; size = 4
$T17 = -196						; size = 4
$T18 = -192						; size = 4
$T19 = -188						; size = 4
$T20 = -184						; size = 4
_numEntities$ = -180					; size = 4
_classPtr$21 = -176					; size = 4
$T22 = -172						; size = 4
tv623 = -168						; size = 4
tv355 = -164						; size = 4
tv640 = -160						; size = 4
tv302 = -156						; size = 4
tv550 = -152						; size = 4
tv183 = -148						; size = 4
$T23 = -144						; size = 4
tv140 = -140						; size = 4
$T24 = -136						; size = 4
tv720 = -132						; size = 4
$T25 = -128						; size = 4
$T26 = -124						; size = 4
$T27 = -120						; size = 4
tv704 = -116						; size = 4
tv397 = -112						; size = 4
$T28 = -108						; size = 4
$T29 = -104						; size = 4
$T30 = -100						; size = 4
tv807 = -96						; size = 4
$T31 = -92						; size = 4
$T32 = -88						; size = 4
$T33 = -84						; size = 4
tv739 = -80						; size = 4
$T34 = -76						; size = 4
tv673 = -72						; size = 4
_visType$35 = -68					; size = 2
_theObject$36 = -64					; size = 4
_theObject$37 = -60					; size = 4
_e$ = -56						; size = 4
_p$ = -52						; size = 4
_this$ = -48						; size = 4
_i$ = -44						; size = 4
_origin$ = -40						; size = 12
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SetupSimTapeEntities@ACMITape@@AAEXXZ PROC		; ACMITape::SetupSimTapeEntities
; _this$ = ecx

; 2463 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetupSimTapeEntities@ACMITape@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2464 : 	int				
; 2465 : 		i,
; 2466 : 		numEntities;
; 2467 : 	Tpoint pos;
; 2468 : 	ACMIEntityData *e;
; 2469 : 	ACMIEntityPositionData *p;
; 2470 : 
; 2471 : 
; 2472 : 	Tpoint origin = { 0.0f, 0.0f, 0.0f };

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _origin$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _origin$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _origin$[ebp+8], xmm0

; 2473 : 
; 2474 : 	F4Assert(_simTapeEntities == NULL);
; 2475 : 	F4Assert(_tape != NULL );
; 2476 : 
; 2477 : 	// create array of SimTapeEntity
; 2478 : 	numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 2479 : 	_simTapeEntities = new SimTapeEntity [numEntities];

	xor	ecx, ecx
	mov	eax, DWORD PTR _numEntities$[ebp]
	mov	edx, 88					; 00000058H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T20[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T20[ebp]
	mov	DWORD PTR [eax], ecx

; 2480 : 	F4Assert(_simTapeEntities != NULL);
; 2481 : 
; 2482 : 	// for each entity, create it's object stuff....
; 2483 : 	for(i = 0; i < numEntities; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@SetupSimTa
$LN29@SetupSimTa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN30@SetupSimTa:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numEntities$[ebp]
	jge	$LN28@SetupSimTa

; 2484 : 	{
; 2485 : 
; 2486 : 		// get the tape entity data
; 2487 : 		e = EntityData( i );

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z ; ACMITape::EntityData
	mov	DWORD PTR _e$[ebp], eax

; 2488 : 
; 2489 : 		// get the 1st position data for the entity
; 2490 : 		p = CurrentEntityPositionHead( i );

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityPositionHead
	mov	DWORD PTR _p$[ebp], eax

; 2491 : 
; 2492 : 		_simTapeEntities[i].flags = e->flags;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+eax+8], ecx

; 2493 : 
; 2494 : 		if ( e->flags & ENTITY_FLAG_FEATURE )

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 2
	je	$LN27@SetupSimTa

; 2495 : 		{
; 2496 : 			// edg: I believe this code path should no longer be in use
; 2497 : 			// since features are in a different list
; 2498 : 			_simTapeEntities[i].objBase = new SimFeatureClass(EntityType(i));

	push	604					; 0000025cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T23[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN33@SetupSimTa
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@ACMITape@@QAEHH@Z		; ACMITape::EntityType
	push	eax
	mov	ecx, DWORD PTR $T23[ebp]
	call	??0SimFeatureClass@@QAE@H@Z		; SimFeatureClass::SimFeatureClass
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN34@SetupSimTa
$LN33@SetupSimTa:
	mov	DWORD PTR tv140[ebp], 0
$LN34@SetupSimTa:
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 2499 : 			_simTapeEntities[i].objBase->SetDelta( 0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edx]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 2500 : 			_simTapeEntities[i].objBase->SetYPRDelta( 0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edx]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 2501 : 		}
; 2502 : 		else

	jmp	$LN26@SetupSimTa
$LN27@SetupSimTa:

; 2503 : 		{
; 2504 : 			// create the base class
; 2505 : 			_simTapeEntities[i].objBase = new SimStaticClass(EntityType(i));// new SimBaseClass(EntityType(i));

	push	592					; 00000250H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T33[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T33[ebp], 0
	je	SHORT $LN35@SetupSimTa
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@ACMITape@@QAEHH@Z		; ACMITape::EntityType
	push	eax
	mov	ecx, DWORD PTR $T33[ebp]
	call	??0SimStaticClass@@QAE@H@Z		; SimStaticClass::SimStaticClass
	mov	DWORD PTR tv183[ebp], eax
	jmp	SHORT $LN36@SetupSimTa
$LN35@SetupSimTa:
	mov	DWORD PTR tv183[ebp], 0
$LN36@SetupSimTa:
	mov	eax, DWORD PTR tv183[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 2506 : 			GetEntityPosition ( i,
; 2507 : 								_simTapeEntities[i].x,
; 2508 : 								_simTapeEntities[i].y,
; 2509 : 								_simTapeEntities[i].z,
; 2510 : 								_simTapeEntities[i].yaw,
; 2511 : 								_simTapeEntities[i].pitch,
; 2512 : 								_simTapeEntities[i].roll,
; 2513 : 								_simTapeEntities[i].aveSpeed,
; 2514 : 								_simTapeEntities[i].aveTurnRate,
; 2515 : 								_simTapeEntities[i].aveTurnRadius );

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax+44]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx+40]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx+36]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax+32]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx+28]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx+24]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax+20]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx+16]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx+12]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntityPosition@ACMITape@@QAEHHAAM00000000@Z ; ACMITape::GetEntityPosition
$LN26@SetupSimTa:

; 2516 : 		}
; 2517 : 
; 2518 : 		// set the matrix
; 2519 : 		_simTapeEntities[i].objBase->SetYPR( p->posData.yaw, p->posData.pitch, p->posData.roll );

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+21]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+17]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+25]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 2520 : 		_simTapeEntities[i].objBase->SetPosition( p->posData.x, p->posData.y, p->posData.z);

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+13]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+9]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+5]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 2521 : 		CalcTransformMatrix(_simTapeEntities[i].objBase);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 2522 : 
; 2523 : 		// create thge drawable object
; 2524 : 		// special case chaff and flares
; 2525 : 		if ( e->flags & ENTITY_FLAG_CHAFF )

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 8
	je	$LN25@SetupSimTa

; 2526 : 		{
; 2527 : 			pos.x = p->posData.x;

	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+5]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2528 : 			pos.y = p->posData.y;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+9]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2529 : 			pos.z = p->posData.z;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+13]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2530 :        		_simTapeEntities[i].objBase->drawPointer =
; 2531 : 				 new DrawableBSP( MapVisId(VIS_CHAFF), &pos, &IMatrix, 1.0f );

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T31[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T31[ebp], 0
	je	SHORT $LN37@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ?IMatrix@@3UTrotation@@B		; IMatrix
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	986					; 000003daH
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T31[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv302[ebp], eax
	jmp	SHORT $LN38@SetupSimTa
$LN37@SetupSimTa:
	mov	DWORD PTR tv302[ebp], 0
$LN38@SetupSimTa:
	mov	edx, DWORD PTR tv302[ebp]
	mov	DWORD PTR $T17[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR $T17[ebp]
	mov	DWORD PTR [eax+332], ecx

; 2532 :        		((DrawableBSP *)_simTapeEntities[i].objBase->drawPointer)->SetLabel("", 0 );

	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx]
	mov	eax, DWORD PTR [edx+332]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	jmp	$LN18@SetupSimTa
$LN25@SetupSimTa:

; 2533 : 		}
; 2534 : 		else if ( e->flags & ENTITY_FLAG_FLARE )

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 16					; 00000010H
	je	$LN23@SetupSimTa

; 2535 : 		{
; 2536 : 
; 2537 : 			pos.x = p->posData.x;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+5]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2538 : 			pos.y = p->posData.y;

	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+9]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2539 : 			pos.z = p->posData.z;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+13]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2540 :        		_simTapeEntities[i].objBase->drawPointer =
; 2541 : 				new Drawable2D( DRAW2D_FLARE, 2.0f, &pos );

	push	296					; 00000128H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T30[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T30[ebp], 0
	je	SHORT $LN39@SetupSimTa
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR $T30[ebp]
	call	??0Drawable2D@@QAE@HMPAUTpoint@@@Z	; Drawable2D::Drawable2D
	mov	DWORD PTR tv355[ebp], eax
	jmp	SHORT $LN40@SetupSimTa
$LN39@SetupSimTa:
	mov	DWORD PTR tv355[ebp], 0
$LN40@SetupSimTa:
	mov	ecx, DWORD PTR tv355[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx+332], eax
	jmp	$LN18@SetupSimTa
$LN23@SetupSimTa:

; 2542 : 		}
; 2543 : 		// aircraft use special Drawable Poled class
; 2544 : 		else if ( e->flags & ENTITY_FLAG_AIRCRAFT )

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	$LN21@SetupSimTa

; 2545 : 		{
; 2546 : 			short visType;
; 2547 : 
; 2548 : 			SimBaseClass *theObject = _simTapeEntities[i].objBase;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _theObject$37[ebp], eax

; 2549 : 			// get the class pointer
; 2550 : 			Falcon4EntityClassType* classPtr =
; 2551 : 				(Falcon4EntityClassType*)theObject->EntityType();

	mov	ecx, DWORD PTR _theObject$37[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$15[ebp], eax

; 2552 : 			pos.x = p->posData.x;

	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+5]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2553 : 			pos.y = p->posData.y;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+9]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2554 : 			pos.z = p->posData.z;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+13]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2555 : 			visType = classPtr->visType[theObject->Status() & VIS_TYPE_MASK];

	mov	ecx, DWORD PTR _theObject$37[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	mov	ecx, DWORD PTR _classPtr$15[ebp]
	mov	dx, WORD PTR [ecx+eax*2+60]
	mov	WORD PTR _visType$35[ebp], dx

; 2556 : 			theObject->drawPointer = new DrawablePoled( visType, &pos, &IMatrix, 1.0f );

	push	396					; 0000018cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN41@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ?IMatrix@@3UTrotation@@B		; IMatrix
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	movsx	ecx, WORD PTR _visType$35[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0DrawablePoled@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawablePoled::DrawablePoled
	mov	DWORD PTR tv397[ebp], eax
	jmp	SHORT $LN42@SetupSimTa
$LN41@SetupSimTa:
	mov	DWORD PTR tv397[ebp], 0
$LN42@SetupSimTa:
	mov	edx, DWORD PTR tv397[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _theObject$37[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+332], ecx

; 2557 : 
; 2558 : 			F4Assert( theObject->drawPointer != NULL );
; 2559 : 			
; 2560 : 			if(ACMI_Callsigns) // we have callsigns

	cmp	DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A, 0 ; ACMI_Callsigns
	je	SHORT $LN20@SetupSimTa

; 2561 : 				theObject->drawPointer->SetLabel(ACMI_Callsigns[e->uniqueID].label, TeamSimColorList[ACMI_Callsigns[e->uniqueID].teamColor]);

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A ; ACMI_Callsigns
	mov	edx, DWORD PTR [ecx+eax+16]
	mov	eax, DWORD PTR ?TeamSimColorList@@3PAJA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A ; ACMI_Callsigns
	push	edx
	mov	eax, DWORD PTR _theObject$37[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	edx, DWORD PTR _theObject$37[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	mov	edx, DWORD PTR [eax+8]
	call	edx
$LN20@SetupSimTa:

; 2562 : 		}
; 2563 : 		else

	jmp	$LN18@SetupSimTa
$LN21@SetupSimTa:

; 2564 : 		{
; 2565 : 			CreateDrawable ( _simTapeEntities[i].objBase, 1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	call	?CreateDrawable@@YAXPAVSimBaseClass@@M@Z ; CreateDrawable
	add	esp, 8

; 2566 : 			if(ACMI_Callsigns)

	cmp	DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A, 0 ; ACMI_Callsigns
	je	SHORT $LN18@SetupSimTa

; 2567 : 				((DrawableBSP*)_simTapeEntities[i].objBase->drawPointer)->SetLabel(((DrawableBSP*)_simTapeEntities[i].objBase->drawPointer)->Label(),TeamSimColorList[ACMI_Callsigns[e->uniqueID].teamColor]);

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A ; ACMI_Callsigns
	mov	ecx, DWORD PTR [eax+edx+16]
	mov	edx, DWORD PTR ?TeamSimColorList@@3PAJA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [eax+332]
	call	?Label@DrawableBSP@@QAEPADXZ		; DrawableBSP::Label
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+eax]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN18@SetupSimTa:

; 2568 : 		}
; 2569 : 
; 2570 : 
; 2571 : 		// sigh.  hack for ejections
; 2572 : 		if (_simTapeEntities[i].objBase->drawPointer == NULL)

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	cmp	DWORD PTR [ecx+332], 0
	jne	$LN16@SetupSimTa

; 2573 : 		{
; 2574 : 			short visType;
; 2575 : 
; 2576 : 			SimBaseClass *theObject = _simTapeEntities[i].objBase;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _theObject$36[ebp], edx

; 2577 : 			// get the class pointer
; 2578 : 			Falcon4EntityClassType* classPtr =
; 2579 : 				(Falcon4EntityClassType*)theObject->EntityType();

	mov	ecx, DWORD PTR _theObject$36[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$21[ebp], eax

; 2580 : 			if (classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_EJECT)

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _classPtr$21[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 9
	jne	$LN16@SetupSimTa

; 2581 : 			{
; 2582 : 				pos.x = p->posData.x;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+5]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2583 : 				pos.y = p->posData.y;

	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+9]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2584 : 				pos.z = p->posData.z;

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+13]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2585 : 				visType = classPtr->visType[theObject->Status() & VIS_TYPE_MASK];

	mov	ecx, DWORD PTR _theObject$36[ebp]
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	mov	ecx, DWORD PTR _classPtr$21[ebp]
	mov	dx, WORD PTR [ecx+eax*2+60]
	mov	WORD PTR _visType$4[ebp], dx

; 2586 : 				theObject->drawPointer = new DrawableBSP( MapVisId(VIS_EJECT1), &pos, &IMatrix, 1.0f );

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T27[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T27[ebp], 0
	je	SHORT $LN43@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ?IMatrix@@3UTrotation@@B		; IMatrix
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	64					; 00000040H
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T27[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv550[ebp], eax
	jmp	SHORT $LN44@SetupSimTa
$LN43@SetupSimTa:
	mov	DWORD PTR tv550[ebp], 0
$LN44@SetupSimTa:
	mov	ecx, DWORD PTR tv550[ebp]
	mov	DWORD PTR $T13[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _theObject$36[ebp]
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR [edx+332], eax

; 2587 :        			((DrawableBSP *)theObject->drawPointer)->SetLabel("Ejected Pilot", 0x0000FF00 );

	push	65280					; 0000ff00H
	push	OFFSET ??_C@_0O@DFPLFLLG@Ejected?5Pilot?$AA@
	mov	ecx, DWORD PTR _theObject$36[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR _theObject$36[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN16@SetupSimTa:

; 2588 : 			}
; 2589 : 			F4Assert( theObject->drawPointer != NULL );
; 2590 : 		}
; 2591 : 
; 2592 : 		// features get put into draw list and positioned here.
; 2593 : 		if ( e->flags & ENTITY_FLAG_FEATURE )

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 2
	je	SHORT $LN15@SetupSimTa

; 2594 : 		{
; 2595 : 			// edg: I believe this code path should no longer be in use
; 2596 : 			// since features are in a different list
; 2597 : 			_viewPoint->InsertObject( _simTapeEntities[i].objBase->drawPointer );

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN15@SetupSimTa:

; 2598 : 		}
; 2599 : 
; 2600 : 
; 2601 : 		// create other stuff as needed by the object
; 2602 : 		// (ie, if this is missile, create the drawable trail for it...)
; 2603 : 		_simTapeEntities[i].objTrail = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+4], 0

; 2604 : 		_simTapeEntities[i].objBsp1 = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+56], 0

; 2605 : 		_simTapeEntities[i].objBsp2 = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+60], 0

; 2606 : 		_simTapeEntities[i].obj2d = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+64], 0

; 2607 : 		_simTapeEntities[i].wlTrail = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+72], 0

; 2608 : 		_simTapeEntities[i].wrTrail = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+76], 0

; 2609 : 		_simTapeEntities[i].wtLength = 0;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+68], 0

; 2610 : 
; 2611 : 
; 2612 : 		// a missile -- it needs drawable trail set up
; 2613 : 		if ( (e->flags & ENTITY_FLAG_MISSILE) )

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	$LN14@SetupSimTa

; 2614 : 		{
; 2615 : 			_simTapeEntities[i].objTrail = new DrawableTrail(TRAIL_SAM);

	push	320					; 00000140H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T25[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN45@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR $T25[ebp]
	call	??0DrawableTrail@@QAE@HM@Z		; DrawableTrail::DrawableTrail
	mov	DWORD PTR tv623[ebp], eax
	jmp	SHORT $LN46@SetupSimTa
$LN45@SetupSimTa:
	mov	DWORD PTR tv623[ebp], 0
$LN46@SetupSimTa:
	mov	edx, DWORD PTR tv623[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 2616 : 			_simTapeEntities[i].objBsp1 = new DrawableBSP( MapVisId(VIS_MFLAME_L), &origin, (struct Trotation *)&IMatrix, 1.0f );

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T24[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN47@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ?IMatrix@@3UTrotation@@B		; IMatrix
	lea	edx, DWORD PTR _origin$[ebp]
	push	edx
	push	672					; 000002a0H
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T24[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv640[ebp], eax
	jmp	SHORT $LN48@SetupSimTa
$LN47@SetupSimTa:
	mov	DWORD PTR tv640[ebp], 0
$LN48@SetupSimTa:
	mov	eax, DWORD PTR tv640[ebp]
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR [eax+ecx+56], edx

; 2617 : 			_simTapeEntities[i].objTrail->KeepStaleSegs( TRUE );

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+eax+4]
	call	?KeepStaleSegs@DrawableTrail@@QAEXH@Z	; DrawableTrail::KeepStaleSegs

; 2618 : 			_simTapeEntities[i].trailStartTime = p->time;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax+48], ecx

; 2619 : 			_simTapeEntities[i].trailEndTime = p->time + 120.0F; //me123 to 30 we wanna see the trials in acmi// trail lasts 3 sec

	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@42f00000
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movss	DWORD PTR [edx+eax+52], xmm0
	jmp	$LN10@SetupSimTa
$LN14@SetupSimTa:

; 2620 : 		}
; 2621 : 		// a flare -- it needs drawable trail set up and a glow sphere
; 2622 : 		else if ( (e->flags & ENTITY_FLAG_FLARE) )

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	$LN12@SetupSimTa

; 2623 : 		{
; 2624 : 			_simTapeEntities[i].objTrail = new DrawableTrail(TRAIL_SAM);

	push	320					; 00000140H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T29[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T29[ebp], 0
	je	SHORT $LN49@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR $T29[ebp]
	call	??0DrawableTrail@@QAE@HM@Z		; DrawableTrail::DrawableTrail
	mov	DWORD PTR tv673[ebp], eax
	jmp	SHORT $LN50@SetupSimTa
$LN49@SetupSimTa:
	mov	DWORD PTR tv673[ebp], 0
$LN50@SetupSimTa:
	mov	edx, DWORD PTR tv673[ebp]
	mov	DWORD PTR $T19[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T19[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 2625 : 			_simTapeEntities[i].objTrail->KeepStaleSegs( TRUE );

	push	1
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edx+4]
	call	?KeepStaleSegs@DrawableTrail@@QAEXH@Z	; DrawableTrail::KeepStaleSegs

; 2626 : 			_simTapeEntities[i].trailStartTime = p->time;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx+48], eax

; 2627 : 			_simTapeEntities[i].trailEndTime = p->time + 3.0F; // trail lasts 3 sec

	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@40400000
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movss	DWORD PTR [ecx+edx+52], xmm0

; 2628 : 			_simTapeEntities[i].obj2d =
; 2629 : 				new Drawable2D( DRAW2D_EXPLCIRC_GLOW, 8.0f, &origin );

	push	296					; 00000128H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T28[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T28[ebp], 0
	je	SHORT $LN51@SetupSimTa
	lea	edx, DWORD PTR _origin$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T28[ebp]
	call	??0Drawable2D@@QAE@HMPAUTpoint@@@Z	; Drawable2D::Drawable2D
	mov	DWORD PTR tv704[ebp], eax
	jmp	SHORT $LN52@SetupSimTa
$LN51@SetupSimTa:
	mov	DWORD PTR tv704[ebp], 0
$LN52@SetupSimTa:
	mov	eax, DWORD PTR tv704[ebp]
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T18[ebp]
	mov	DWORD PTR [eax+ecx+64], edx
	jmp	$LN10@SetupSimTa
$LN12@SetupSimTa:

; 2630 : 		}
; 2631 : 
; 2632 : 		// a aircraft -- it needs drawable wing trails set up
; 2633 : 		else if ( (e->flags & ENTITY_FLAG_AIRCRAFT) )

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	$LN10@SetupSimTa

; 2634 : 		{
; 2635 : 			_simTapeEntities[i].wlTrail = new DrawableTrail(TRAIL_LWING);

	push	320					; 00000140H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T26[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T26[ebp], 0
	je	SHORT $LN53@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T26[ebp]
	call	??0DrawableTrail@@QAE@HM@Z		; DrawableTrail::DrawableTrail
	mov	DWORD PTR tv720[ebp], eax
	jmp	SHORT $LN54@SetupSimTa
$LN53@SetupSimTa:
	mov	DWORD PTR tv720[ebp], 0
$LN54@SetupSimTa:
	mov	edx, DWORD PTR tv720[ebp]
	mov	DWORD PTR $T16[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T16[ebp]
	mov	DWORD PTR [edx+eax+72], ecx

; 2636 : 			_simTapeEntities[i].wlTrail->KeepStaleSegs( true ); // MLR 12/14/2003 - 

	push	1
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edx+72]
	call	?KeepStaleSegs@DrawableTrail@@QAEXH@Z	; DrawableTrail::KeepStaleSegs

; 2637 : 			_simTapeEntities[i].wrTrail = new DrawableTrail(TRAIL_RWING);

	push	320					; 00000140H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T34[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T34[ebp], 0
	je	SHORT $LN55@SetupSimTa
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	13					; 0000000dH
	mov	ecx, DWORD PTR $T34[ebp]
	call	??0DrawableTrail@@QAE@HM@Z		; DrawableTrail::DrawableTrail
	mov	DWORD PTR tv739[ebp], eax
	jmp	SHORT $LN56@SetupSimTa
$LN55@SetupSimTa:
	mov	DWORD PTR tv739[ebp], 0
$LN56@SetupSimTa:
	mov	edx, DWORD PTR tv739[ebp]
	mov	DWORD PTR $T14[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T14[ebp]
	mov	DWORD PTR [edx+eax+76], ecx

; 2638 : 			_simTapeEntities[i].wrTrail->KeepStaleSegs( true ); // MLR 12/14/2003 - 

	push	1
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edx+76]
	call	?KeepStaleSegs@DrawableTrail@@QAEXH@Z	; DrawableTrail::KeepStaleSegs
$LN10@SetupSimTa:

; 2639 : 			//_simTapeEntities[i].wlTrail = new DrawableTrail(TRAIL_AIM120);
; 2640 : 			//_simTapeEntities[i].wrTrail = new DrawableTrail(TRAIL_MAVERICK);
; 2641 : 																
; 2642 : 		}
; 2643 : 
; 2644 : 	}

	jmp	$LN29@SetupSimTa
$LN28@SetupSimTa:

; 2645 : 
; 2646 : 	F4Assert(_simTapeFeatures == NULL);
; 2647 : 
; 2648 : 
; 2649 : 	// create array of SimTapeEntity
; 2650 : 	if ( _tapeHdr.numFeat == 0 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN9@SetupSimTa

; 2651 : 		return;

	jmp	$LN31@SetupSimTa
$LN9@SetupSimTa:

; 2652 : 	_simTapeFeatures = new SimTapeEntity [_tapeHdr.numFeat];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, 88					; 00000058H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR [eax+120], ecx

; 2653 : 	F4Assert(_simTapeFeatures != NULL);
; 2654 : 
; 2655 : 	// for each feature, create it's object stuff....
; 2656 : 	for(i = 0; i < _tapeHdr.numFeat; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@SetupSimTa
$LN7@SetupSimTa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@SetupSimTa:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN6@SetupSimTa

; 2657 : 	{
; 2658 : 		// get the tape entity data
; 2659 : 		e = FeatureData( i );

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FeatureData@ACMITape@@AAEPAUACMIEntityData@@H@Z ; ACMITape::FeatureData
	mov	DWORD PTR _e$[ebp], eax

; 2660 : 
; 2661 : 		// get the 1st position data for the entity
; 2662 : 		p = CurrentFeaturePositionHead( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentFeaturePositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentFeaturePositionHead
	mov	DWORD PTR _p$[ebp], eax

; 2663 : 
; 2664 : 		_simTapeFeatures[i].flags = e->flags;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	edx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+ecx+8], edx

; 2665 : 
; 2666 : 		// protect against bad indices(!?)
; 2667 : 		// edg: I'm not sure what's going on but it seems like we
; 2668 : 		// occasionally get a bad lead VU ID.  The imported can't find
; 2669 : 		// it.  This is protected for in Import.  Also protect here...
; 2670 : 		if ( e->leadIndex >= _tapeHdr.numFeat )

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jl	SHORT $LN5@SetupSimTa

; 2671 : 			_simTapeFeatures[i].leadIndex = -1;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [edx+eax+80], -1

; 2672 : 		else

	jmp	SHORT $LN4@SetupSimTa
$LN5@SetupSimTa:

; 2673 : 			_simTapeFeatures[i].leadIndex = e->leadIndex;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+80], ecx
$LN4@SetupSimTa:

; 2674 : 		_simTapeFeatures[i].slot = e->slot;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+edx+84], eax

; 2675 : 
; 2676 : 		_simTapeFeatures[i].objBase = new SimFeatureClass(e->type);

	push	604					; 0000025cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T32[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	cmp	DWORD PTR $T32[ebp], 0
	je	SHORT $LN57@SetupSimTa
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR $T32[ebp]
	call	??0SimFeatureClass@@QAE@H@Z		; SimFeatureClass::SimFeatureClass
	mov	DWORD PTR tv807[ebp], eax
	jmp	SHORT $LN58@SetupSimTa
$LN57@SetupSimTa:
	mov	DWORD PTR tv807[ebp], 0
$LN58@SetupSimTa:
	mov	eax, DWORD PTR tv807[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 2677 : 		F4Assert(_simTapeFeatures[i].objBase != NULL);
; 2678 : 		_simTapeFeatures[i].objBase->SetDelta( 0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [edx+eax]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 2679 : 		_simTapeFeatures[i].objBase->SetYPRDelta( 0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [edx+eax]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 2680 : 		_simTapeFeatures[i].objBase->SetYPR( p->posData.yaw, p->posData.pitch, p->posData.roll );

	mov	eax, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+21]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+17]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+25]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [edx+eax]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 2681 : 		_simTapeFeatures[i].objBase->SetPosition( p->posData.x, p->posData.y, p->posData.z);

	mov	eax, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+13]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+9]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _p$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+5]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [edx+eax]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 2682 : 		((SimFeatureClass *)_simTapeFeatures[i].objBase)->featureFlags = e->specialFlags;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+600], edx

; 2683 : 
; 2684 : 		// get the class pointer
; 2685 : 		Falcon4EntityClassType* classPtr =
; 2686 : 			(Falcon4EntityClassType*)_simTapeFeatures[i].objBase->EntityType();

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [edx+eax]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$8[ebp], eax

; 2687 : 		// get the feature class data
; 2688 : 		FeatureClassDataType *fc = (FeatureClassDataType *)classPtr->dataPtr;

	mov	eax, DWORD PTR _classPtr$8[ebp]
	mov	ecx, DWORD PTR [eax+77]
	mov	DWORD PTR _fc$6[ebp], ecx

; 2689 : 		_simTapeFeatures[i].objBase->SetCampaignFlag( fc->Flags );

	mov	edx, DWORD PTR _fc$6[ebp]
	movzx	eax, WORD PTR [edx+6]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, DWORD PTR [eax+ecx]
	call	?SetCampaignFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetCampaignFlag

; 2690 : 		CalcTransformMatrix(_simTapeFeatures[i].objBase);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 2691 : 
; 2692 : 
; 2693 : 
; 2694 : 		// create other stuff as needed by the object
; 2695 : 		// (ie, if this is missile, create the drawable trail for it...)
; 2696 : 		_simTapeFeatures[i].objTrail = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [ecx+edx+4], 0

; 2697 : 		_simTapeFeatures[i].objBsp1 = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [ecx+edx+56], 0

; 2698 : 		_simTapeFeatures[i].objBsp2 = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [ecx+edx+60], 0

; 2699 : 		_simTapeFeatures[i].obj2d = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [ecx+edx+64], 0

; 2700 : 
; 2701 : 	}

	jmp	$LN7@SetupSimTa
$LN6@SetupSimTa:

; 2702 : 
; 2703 : 	// for each feature, create it's drawable object
; 2704 : 	// we do this in a different loop because we want to make sure all the
; 2705 : 	// objbase's are created first since some feature objects are actually
; 2706 : 	// subcomponents of others and have thier drawpointer inserted into
; 2707 : 	// the drawpointer list of another rather than the main drawlist
; 2708 : 	for(i = 0; i < _tapeHdr.numFeat; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SetupSimTa
$LN2@SetupSimTa:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@SetupSimTa:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN1@SetupSimTa

; 2709 : 	{
; 2710 : 		// create the drawable object
; 2711 :        	CreateFeatureDrawable ( &_simTapeFeatures[i] );

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+120]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z ; ACMITape::CreateFeatureDrawable

; 2712 : 		F4Assert(_simTapeFeatures[i].objBase->drawPointer != NULL);
; 2713 : 
; 2714 : 		// NOTE: insertion into draw list should now be done in
; 2715 : 		// CreateFeatureDrawable
; 2716 : 		// features get put into draw list and positioned here.
; 2717 : 		// _viewPoint->InsertObject( _simTapeFeatures[i].objBase->drawPointer );
; 2718 : 	}

	jmp	SHORT $LN2@SetupSimTa
$LN1@SetupSimTa:
$LN31@SetupSimTa:

; 2719 : 
; 2720 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$0:
	mov	eax, DWORD PTR $T23[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$1:
	mov	eax, DWORD PTR $T33[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$2:
	mov	eax, DWORD PTR $T31[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$3:
	mov	eax, DWORD PTR $T30[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$4:
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$5:
	mov	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$6:
	mov	eax, DWORD PTR $T25[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$7:
	mov	eax, DWORD PTR $T24[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$8:
	mov	eax, DWORD PTR $T29[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$9:
	mov	eax, DWORD PTR $T28[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$10:
	mov	eax, DWORD PTR $T26[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$11:
	mov	eax, DWORD PTR $T34[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupSimTapeEntities@ACMITape@@AAEXXZ$12:
	mov	eax, DWORD PTR $T32[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetupSimTapeEntities@ACMITape@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetupSimTapeEntities@ACMITape@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetupSimTapeEntities@ACMITape@@AAEXXZ ENDP		; ACMITape::SetupSimTapeEntities
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_numEntities$ = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?AdvanceAllHeads@ACMITape@@AAEXXZ PROC			; ACMITape::AdvanceAllHeads
; _this$ = ecx

; 2430 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2431 : 	int
; 2432 : 		i,
; 2433 : 		numEntities;
; 2434 : 
; 2435 : 	// Advance all entity read heads.
; 2436 : 	numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 2437 : 	for(i = 0; i < numEntities; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@AdvanceAll
$LN2@AdvanceAll:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@AdvanceAll:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEntities$[ebp]
	jge	SHORT $LN1@AdvanceAll

; 2438 : 	{
; 2439 : 		// Advance entity position head.
; 2440 : 		AdvanceEntityPositionHead(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceEntityPositionHead@ACMITape@@AAEXH@Z ; ACMITape::AdvanceEntityPositionHead

; 2441 : 		AdvanceEntityEventHead(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceEntityEventHead@ACMITape@@AAEXH@Z ; ACMITape::AdvanceEntityEventHead

; 2442 : 	}

	jmp	SHORT $LN2@AdvanceAll
$LN1@AdvanceAll:

; 2443 : 
; 2444 : 	// Advance general event head, and apply events that are encountered.
; 2445 : 	AdvanceGeneralEventHeadHeader();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceGeneralEventHeadHeader@ACMITape@@AAEXXZ ; ACMITape::AdvanceGeneralEventHeadHeader

; 2446 : 	AdvanceGeneralEventHeadTrailer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceGeneralEventHeadTrailer@ACMITape@@AAEXXZ ; ACMITape::AdvanceGeneralEventHeadTrailer

; 2447 : 
; 2448 : 	// advance head for any feature events
; 2449 : 	AdvanceFeatEventHead();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceFeatEventHead@ACMITape@@AAEXXZ	; ACMITape::AdvanceFeatEventHead

; 2450 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdvanceAllHeads@ACMITape@@AAEXXZ ENDP			; ACMITape::AdvanceAllHeads
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_prev$ = -20						; size = 4
_next$ = -16						; size = 4
_feat$ = -12						; size = 4
_this$ = -8						; size = 4
_curr$ = -4						; size = 4
?AdvanceFeatEventHead@ACMITape@@AAEXXZ PROC		; ACMITape::AdvanceFeatEventHead
; _this$ = ecx

; 2141 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2142 : 	ACMIFeatEvent
; 2143 : 		*curr,
; 2144 : 		*next,
; 2145 : 		*prev;
; 2146 : 	SimTapeEntity *feat;
; 2147 : 
; 2148 : 	// Reverse.
; 2149 : 	curr = CurrFeatEvent();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrFeatEvent@ACMITape@@AAEPAUACMIFeatEvent@@XZ ; ACMITape::CurrFeatEvent
	mov	DWORD PTR _curr$[ebp], eax

; 2150 : 	if(curr == NULL) return;

	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN14@AdvanceFea
	jmp	$LN15@AdvanceFea
$LN14@AdvanceFea:

; 2151 : 	while(_simTime < curr->time)

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx+108]
	jbe	$LN12@AdvanceFea

; 2152 : 	{
; 2153 : 		prev = Prev(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Prev@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z ; ACMITape::Prev
	mov	DWORD PTR _prev$[ebp], eax

; 2154 : 		if(prev == NULL) return;

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN11@AdvanceFea
	jmp	$LN15@AdvanceFea
$LN11@AdvanceFea:

; 2155 : 
; 2156 : 		// do stuff
; 2157 : 
; 2158 : 		// sanity check that we have the right index
; 2159 : 		if ( curr->index >= 0 )

	mov	eax, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN9@AdvanceFea

; 2160 : 		{
; 2161 : 			// get the feature entity
; 2162 : 			feat = &_simTapeFeatures[ curr->index ];

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+120]
	mov	DWORD PTR _feat$[ebp], edx

; 2163 : 
; 2164 : 			// create the new drawable object
; 2165 : 			// set new status
; 2166 : 			feat->objBase->ClearStatusBit( VIS_TYPE_MASK );

	push	7
	mov	ecx, DWORD PTR _feat$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ClearStatusBit@SimBaseClass@@QAEXH@Z	; SimBaseClass::ClearStatusBit

; 2167 : 			feat->objBase->SetStatusBit( curr->prevStatus );

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _feat$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetStatusBit@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetStatusBit

; 2168 : 
; 2169 : 			// this function now handles inserts and removes from
; 2170 : 			// drawlist
; 2171 :        		CreateFeatureDrawable ( feat );

	mov	edx, DWORD PTR _feat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z ; ACMITape::CreateFeatureDrawable

; 2172 : 			F4Assert(feat->objBase->drawPointer != NULL);
; 2173 : 			if ( curr->prevStatus == VIS_DAMAGED )

	mov	eax, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [eax+12], 2
	jne	SHORT $LN9@AdvanceFea

; 2174 : 			{
; 2175 : 				((DrawableBSP *)feat->objBase->drawPointer)->SetTextureSet( 1 );

	push	1
	mov	ecx, DWORD PTR _feat$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetTextureSet@DrawableBSP@@QAEXK@Z	; DrawableBSP::SetTextureSet
$LN9@AdvanceFea:

; 2176 : 			}
; 2177 : 
; 2178 : 			// remove old from display and delete
; 2179 : 			/*
; 2180 : 			if(feat->objBase->drawPointer->InDisplayList())
; 2181 : 			{
; 2182 : 				_viewPoint->RemoveObject(feat->objBase->drawPointer);
; 2183 : 			}
; 2184 : 			delete feat->objBase->drawPointer;
; 2185 : 			feat->objBase->drawPointer = NULL;
; 2186 : 
; 2187 : 			// set new status
; 2188 : 			feat->objBase->ClearStatusBit( VIS_TYPE_MASK );
; 2189 : 			feat->objBase->SetStatusBit( curr->prevStatus );
; 2190 : 
; 2191 :        		CreateDrawable ( feat->objBase, 1.0F);
; 2192 : 			F4Assert(feat->objBase->drawPointer != NULL);
; 2193 : 
; 2194 : 			// set damaged texture set if needed
; 2195 : 			if ( curr->prevStatus == VIS_DAMAGED )
; 2196 : 			{
; 2197 : 				((DrawableBSP *)feat->objBase->drawPointer)->SetTextureSet( 1 );
; 2198 : 			}
; 2199 : 
; 2200 : 			// features get put into draw list and positioned here.
; 2201 : 			_viewPoint->InsertObject( feat->objBase->drawPointer );
; 2202 : 			*/
; 2203 : 		}
; 2204 : 
; 2205 : 		// Advance the head.
; 2206 : 		curr = prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _curr$[ebp], eax

; 2207 : 		_featEventReadHead = curr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [ecx+184], edx

; 2208 : 	}

	jmp	$LN14@AdvanceFea
$LN12@AdvanceFea:

; 2209 : 	
; 2210 : 	// Forward.
; 2211 : 	next = Next(curr);

	mov	eax, DWORD PTR _curr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z ; ACMITape::Next
	mov	DWORD PTR _next$[ebp], eax

; 2212 : 	if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN8@AdvanceFea
	jmp	$LN15@AdvanceFea
$LN8@AdvanceFea:

; 2213 : 	if (F4IsBadReadPtr(curr, sizeof(ACMIFeatEvent)))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@AdvanceFea

; 2214 : 		return;

	jmp	$LN15@AdvanceFea
$LN7@AdvanceFea:

; 2215 : 
; 2216 : 	while(_simTime >= next->time)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	comiss	xmm0, DWORD PTR [ecx]
	jb	$LN5@AdvanceFea

; 2217 : 	{
; 2218 : 		if (F4IsBadReadPtr(next, sizeof(ACMIFeatEvent)))

	push	16					; 00000010H
	mov	edx, DWORD PTR _next$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@AdvanceFea

; 2219 : 			return;

	jmp	$LN15@AdvanceFea
$LN4@AdvanceFea:

; 2220 : 
; 2221 : 		// Advance the head.
; 2222 : 		curr = next;

	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], ecx

; 2223 : 		_featEventReadHead = curr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [edx+184], eax

; 2224 : 
; 2225 : 		// do stuff
; 2226 : 
; 2227 : 		// sanity check that we have the right index
; 2228 : 		if ( curr->index >= 0 )

	mov	ecx, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN2@AdvanceFea

; 2229 : 		{
; 2230 : 			// get the feature entity
; 2231 : 			feat = &_simTapeFeatures[ curr->index ];

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+120]
	mov	DWORD PTR _feat$[ebp], eax

; 2232 : 
; 2233 : 			// create the new drawable object
; 2234 : 			// set new status
; 2235 : 			feat->objBase->ClearStatusBit( VIS_TYPE_MASK );

	push	7
	mov	edx, DWORD PTR _feat$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?ClearStatusBit@SimBaseClass@@QAEXH@Z	; SimBaseClass::ClearStatusBit

; 2236 : 			feat->objBase->SetStatusBit( curr->newStatus );

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _feat$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetStatusBit@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetStatusBit

; 2237 : 
; 2238 :        		CreateFeatureDrawable ( feat );

	mov	eax, DWORD PTR _feat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFeatureDrawable@ACMITape@@AAEXPAUSimTapeEntity@@@Z ; ACMITape::CreateFeatureDrawable

; 2239 : 			F4Assert(feat->objBase->drawPointer != NULL);
; 2240 : 			// set damaged texture set if needed
; 2241 : 			if ( curr->newStatus == VIS_DAMAGED )

	mov	ecx, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [ecx+8], 2
	jne	SHORT $LN2@AdvanceFea

; 2242 : 			{
; 2243 : 				((DrawableBSP *)feat->objBase->drawPointer)->SetTextureSet( 1 );

	push	1
	mov	edx, DWORD PTR _feat$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetTextureSet@DrawableBSP@@QAEXK@Z	; DrawableBSP::SetTextureSet
$LN2@AdvanceFea:

; 2244 : 			}
; 2245 : 
; 2246 : 			/*
; 2247 : 			// remove old from display and delete
; 2248 : 			if(feat->objBase->drawPointer->InDisplayList())
; 2249 : 			{
; 2250 : 				_viewPoint->RemoveObject(feat->objBase->drawPointer);
; 2251 : 			}
; 2252 : 			delete feat->objBase->drawPointer;
; 2253 : 			feat->objBase->drawPointer = NULL;
; 2254 : 
; 2255 : 			// set new status
; 2256 : 			feat->objBase->ClearStatusBit( VIS_TYPE_MASK );
; 2257 : 			feat->objBase->SetStatusBit( curr->newStatus );
; 2258 : 
; 2259 :        		CreateDrawable ( feat->objBase, 1.0F);
; 2260 : 			F4Assert(feat->objBase->drawPointer != NULL);
; 2261 : 
; 2262 : 			// set damaged texture set if needed
; 2263 : 			if ( curr->newStatus == VIS_DAMAGED )
; 2264 : 			{
; 2265 : 				((DrawableBSP *)feat->objBase->drawPointer)->SetTextureSet( 1 );
; 2266 : 			}
; 2267 : 
; 2268 : 			// features get put into draw list and positioned here.
; 2269 : 			_viewPoint->InsertObject( feat->objBase->drawPointer );
; 2270 : 			*/
; 2271 : 		}
; 2272 : 
; 2273 : 		next = Next(curr);

	mov	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z ; ACMITape::Next
	mov	DWORD PTR _next$[ebp], eax

; 2274 : 		if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN1@AdvanceFea
	jmp	SHORT $LN15@AdvanceFea
$LN1@AdvanceFea:

; 2275 : 	}

	jmp	$LN7@AdvanceFea
$LN5@AdvanceFea:
$LN15@AdvanceFea:

; 2276 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdvanceFeatEventHead@ACMITape@@AAEXXZ ENDP		; ACMITape::AdvanceFeatEventHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_prev$ = -20						; size = 4
_e$ = -16						; size = 4
_next$ = -12						; size = 4
_curr$ = -8						; size = 4
_this$ = -4						; size = 4
?AdvanceGeneralEventHeadTrailer@ACMITape@@AAEXXZ PROC	; ACMITape::AdvanceGeneralEventHeadTrailer
; _this$ = ecx

; 2090 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2091 : 	ACMIEventHeader *e;
; 2092 : 	ACMIEventTrailer
; 2093 : 		*curr,
; 2094 : 		*next,
; 2095 : 		*prev;
; 2096 : 
; 2097 : 	// Reverse.
; 2098 : 	curr = GeneralEventTrailer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GeneralEventTrailer@ACMITape@@AAEPAUACMIEventTrailer@@XZ ; ACMITape::GeneralEventTrailer
	mov	DWORD PTR _curr$[ebp], eax

; 2099 : 	if(curr == NULL) return;

	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN10@AdvanceGen
	jmp	$LN11@AdvanceGen
$LN10@AdvanceGen:

; 2100 : 	while(_simTime < curr->timeEnd)

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx+108]
	jbe	$LN8@AdvanceGen

; 2101 : 	{
; 2102 : 		prev = Prev(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Prev@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z ; ACMITape::Prev
	mov	DWORD PTR _prev$[ebp], eax

; 2103 : 		if(prev == NULL) return;

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN7@AdvanceGen
	jmp	$LN11@AdvanceGen
$LN7@AdvanceGen:

; 2104 : 
; 2105 : 		if ( !_eventList[ curr->index ] )

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	cmp	DWORD PTR [eax+ecx*4], 0
	jne	SHORT $LN6@AdvanceGen

; 2106 : 		{
; 2107 : 			e = GetGeneralEventData( curr->index );

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z ; ACMITape::GetGeneralEventData
	mov	DWORD PTR _e$[ebp], eax

; 2108 : 			_eventList[curr->index] = InsertActiveEvent( e, _simTime - e->time  );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	subss	xmm0, DWORD PTR [ecx+5]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z ; ACMITape::InsertActiveEvent
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+188]
	mov	DWORD PTR [ecx+edx*4], eax
$LN6@AdvanceGen:

; 2109 : 		}
; 2110 : 
; 2111 : 
; 2112 : 		// Advance the head.
; 2113 : 		curr = prev;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _curr$[ebp], edx

; 2114 : 		_generalEventReadHeadTrailer = curr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [eax+168], ecx

; 2115 : 	}

	jmp	$LN10@AdvanceGen
$LN8@AdvanceGen:

; 2116 : 	
; 2117 : 	// Forward.
; 2118 : 	next = Next(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z ; ACMITape::Next
	mov	DWORD PTR _next$[ebp], eax

; 2119 : 	if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN5@AdvanceGen
	jmp	SHORT $LN11@AdvanceGen
$LN5@AdvanceGen:

; 2120 : 	while(_simTime >= next->timeEnd)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	comiss	xmm0, DWORD PTR [ecx]
	jb	SHORT $LN3@AdvanceGen

; 2121 : 	{
; 2122 : 
; 2123 : 		// Advance the head.
; 2124 : 		curr = next;

	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], edx

; 2125 : 		_generalEventReadHeadTrailer = curr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [eax+168], ecx

; 2126 : 
; 2127 : 		if ( _eventList[ curr->index ] )

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN2@AdvanceGen

; 2128 : 			RemoveActiveEvent( &_eventList[ curr->index ] );

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveActiveEvent@ACMITape@@AAEXPAPAU_ActiveEvent@@@Z ; ACMITape::RemoveActiveEvent
$LN2@AdvanceGen:

; 2129 : 
; 2130 : 
; 2131 : 		next = Next(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z ; ACMITape::Next
	mov	DWORD PTR _next$[ebp], eax

; 2132 : 		if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN1@AdvanceGen
	jmp	SHORT $LN11@AdvanceGen
$LN1@AdvanceGen:

; 2133 : 	}

	jmp	SHORT $LN5@AdvanceGen
$LN3@AdvanceGen:
$LN11@AdvanceGen:

; 2134 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdvanceGeneralEventHeadTrailer@ACMITape@@AAEXXZ ENDP	; ACMITape::AdvanceGeneralEventHeadTrailer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_prev$ = -16						; size = 4
_next$ = -12						; size = 4
_this$ = -8						; size = 4
_curr$ = -4						; size = 4
?AdvanceGeneralEventHeadHeader@ACMITape@@AAEXXZ PROC	; ACMITape::AdvanceGeneralEventHeadHeader
; _this$ = ecx

; 2041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2042 : 	ACMIEventHeader
; 2043 : 		*curr,
; 2044 : 		*next,
; 2045 : 		*prev;
; 2046 : 
; 2047 : 	// Reverse.
; 2048 : 	curr = GeneralEventData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@XZ ; ACMITape::GeneralEventData
	mov	DWORD PTR _curr$[ebp], eax

; 2049 : 	if(curr == NULL) return;

	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN10@AdvanceGen
	jmp	$LN11@AdvanceGen
$LN10@AdvanceGen:

; 2050 : 	while(_simTime < curr->time)

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+5]
	comiss	xmm0, DWORD PTR [ecx+108]
	jbe	SHORT $LN8@AdvanceGen

; 2051 : 	{
; 2052 : 		prev = Prev(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Prev@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z ; ACMITape::Prev
	mov	DWORD PTR _prev$[ebp], eax

; 2053 : 		if(prev == NULL) return;

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN7@AdvanceGen
	jmp	$LN11@AdvanceGen
$LN7@AdvanceGen:

; 2054 : 
; 2055 : 		if ( _eventList[ curr->index ] )

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+1]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN6@AdvanceGen

; 2056 : 			RemoveActiveEvent( &_eventList[ curr->index ] );

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveActiveEvent@ACMITape@@AAEXPAPAU_ActiveEvent@@@Z ; ACMITape::RemoveActiveEvent
$LN6@AdvanceGen:

; 2057 : 
; 2058 : 
; 2059 : 		// Advance the head.
; 2060 : 		curr = prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _curr$[ebp], eax

; 2061 : 		_generalEventReadHeadHeader = curr->index;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [ecx+164], eax

; 2062 : 	}

	jmp	SHORT $LN10@AdvanceGen
$LN8@AdvanceGen:

; 2063 : 	
; 2064 : 	// Forward.
; 2065 : 	next = Next(curr);

	mov	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z ; ACMITape::Next
	mov	DWORD PTR _next$[ebp], eax

; 2066 : 	if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN5@AdvanceGen
	jmp	$LN11@AdvanceGen
$LN5@AdvanceGen:

; 2067 : 	while(_simTime >= next->time)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	comiss	xmm0, DWORD PTR [eax+5]
	jb	SHORT $LN3@AdvanceGen

; 2068 : 	{
; 2069 : 
; 2070 : 		// Advance the head.
; 2071 : 		curr = next;

	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], ecx

; 2072 : 		_generalEventReadHeadHeader = curr->index;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [edx+164], ecx

; 2073 : 
; 2074 : 		if ( !_eventList[ curr->index ] )

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN2@AdvanceGen

; 2075 : 		{
; 2076 : 			_eventList[curr->index] = InsertActiveEvent( curr, _simTime - curr->time  );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curr$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	subss	xmm0, DWORD PTR [ecx+5]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertActiveEvent@ACMITape@@AAEPAU_ActiveEvent@@PAUACMIEventHeader@@M@Z ; ACMITape::InsertActiveEvent
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+188]
	mov	DWORD PTR [ecx+edx*4], eax
$LN2@AdvanceGen:

; 2077 : 		}
; 2078 : 
; 2079 : 
; 2080 : 		next = Next(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z ; ACMITape::Next
	mov	DWORD PTR _next$[ebp], eax

; 2081 : 		if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN1@AdvanceGen
	jmp	SHORT $LN11@AdvanceGen
$LN1@AdvanceGen:

; 2082 : 	}

	jmp	$LN5@AdvanceGen
$LN3@AdvanceGen:
$LN11@AdvanceGen:

; 2083 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdvanceGeneralEventHeadHeader@ACMITape@@AAEXXZ ENDP	; ACMITape::AdvanceGeneralEventHeadHeader
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_prev$ = -20						; size = 4
_e$ = -16						; size = 4
_next$ = -12						; size = 4
_this$ = -8						; size = 4
_curr$ = -4						; size = 4
_index$ = 8						; size = 4
?AdvanceEntityEventHead@ACMITape@@AAEXH@Z PROC		; ACMITape::AdvanceEntityEventHead
; _this$ = ecx

; 1976 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1977 : 	ACMIEntityPositionData
; 1978 : 		*curr,
; 1979 : 		*next,
; 1980 : 		*prev;
; 1981 : 	SimTapeEntity *e;
; 1982 : 
; 1983 : 	F4Assert(index >= 0 && index < NumEntities());
; 1984 : 
; 1985 : 	// get the entity if we need to change switch settings
; 1986 : 	e = &_simTapeEntities[ index ];

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _e$[ebp], eax

; 1987 : 
; 1988 : 	// Backward.
; 1989 : 	curr = CurrentEntityEventHead(index);

	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentEntityEventHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityEventHead
	mov	DWORD PTR _curr$[ebp], eax

; 1990 : 	if(curr == NULL) return;

	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN14@AdvanceEnt
	jmp	$LN15@AdvanceEnt
$LN14@AdvanceEnt:

; 1991 : 	while(_simTime < curr->time)

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx+108]
	jbe	$LN12@AdvanceEnt

; 1992 : 	{
; 1993 : 		prev = HeadPrev(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadPrev
	mov	DWORD PTR _prev$[ebp], eax

; 1994 : 		if(prev == NULL) return;

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN11@AdvanceEnt
	jmp	$LN15@AdvanceEnt
$LN11@AdvanceEnt:

; 1995 : 
; 1996 : 		// handle switch settings
; 1997 : 		if ( curr->type == PosTypeSwitch )

	mov	eax, DWORD PTR _curr$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 1
	jne	SHORT $LN10@AdvanceEnt

; 1998 : 		{
; 1999 : 			((DrawableBSP *)e->objBase->drawPointer)->SetSwitchMask( curr->switchData.switchNum, curr->switchData.prevSwitchVal );

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+13]
	push	eax
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
	jmp	SHORT $LN8@AdvanceEnt
$LN10@AdvanceEnt:

; 2000 : 		}
; 2001 : 		else if ( curr->type == PosTypeDOF )

	mov	edx, DWORD PTR _curr$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	cmp	eax, 2
	jne	SHORT $LN8@AdvanceEnt

; 2002 : 		{
; 2003 : 			((DrawableBSP *)e->objBase->drawPointer)->SetDOFangle( curr->dofData.DOFNum, curr->dofData.prevDOFVal );

	mov	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+13]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+5]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN8@AdvanceEnt:

; 2004 : 		}
; 2005 : 		
; 2006 : 		// Advance the head.
; 2007 : 		_entityReadHeads[index].eventDataOffset = curr->prevPositionUpdateOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [eax+37]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2008 : 		curr = prev;

	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _curr$[ebp], ecx

; 2009 : 	}

	jmp	$LN14@AdvanceEnt
$LN12@AdvanceEnt:

; 2010 : 	
; 2011 : 	// Forward.
; 2012 : 	next = HeadNext(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _next$[ebp], eax

; 2013 : 	if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN7@AdvanceEnt
	jmp	$LN15@AdvanceEnt
$LN7@AdvanceEnt:

; 2014 : 	while(_simTime >= next->time)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	comiss	xmm0, DWORD PTR [ecx]
	jb	$LN5@AdvanceEnt

; 2015 : 	{
; 2016 : 		// Advance the head.
; 2017 : 		_entityReadHeads[index].eventDataOffset = curr->nextPositionUpdateOffset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [edx+33]
	mov	DWORD PTR [eax+ecx*8+4], edx

; 2018 : 
; 2019 : 		// handle switch settings
; 2020 : 		if ( curr->type == PosTypeSwitch )

	mov	eax, DWORD PTR _curr$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 1
	jne	SHORT $LN4@AdvanceEnt

; 2021 : 		{
; 2022 : 			((DrawableBSP *)e->objBase->drawPointer)->SetSwitchMask( curr->switchData.switchNum, curr->switchData.switchVal );

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
	jmp	SHORT $LN2@AdvanceEnt
$LN4@AdvanceEnt:

; 2023 : 		}
; 2024 : 		else if ( curr->type == PosTypeDOF )

	mov	edx, DWORD PTR _curr$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	cmp	eax, 2
	jne	SHORT $LN2@AdvanceEnt

; 2025 : 		{
; 2026 : 			((DrawableBSP *)e->objBase->drawPointer)->SetDOFangle( curr->dofData.DOFNum, curr->dofData.DOFVal );

	mov	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+9]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+5]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN2@AdvanceEnt:

; 2027 : 		}
; 2028 : 
; 2029 : 		curr = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], eax

; 2030 : 		next = HeadNext(curr);

	mov	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _next$[ebp], eax

; 2031 : 		if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN1@AdvanceEnt
	jmp	SHORT $LN15@AdvanceEnt
$LN1@AdvanceEnt:

; 2032 : 	}

	jmp	$LN7@AdvanceEnt
$LN5@AdvanceEnt:
$LN15@AdvanceEnt:

; 2033 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdvanceEntityEventHead@ACMITape@@AAEXH@Z ENDP		; ACMITape::AdvanceEntityEventHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_prev$ = -16						; size = 4
_next$ = -12						; size = 4
_this$ = -8						; size = 4
_curr$ = -4						; size = 4
_index$ = 8						; size = 4
?AdvanceEntityPositionHead@ACMITape@@AAEXH@Z PROC	; ACMITape::AdvanceEntityPositionHead
; _this$ = ecx

; 1936 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 	ACMIEntityPositionData
; 1938 : 		*curr,
; 1939 : 		*next,
; 1940 : 		*prev;
; 1941 : 
; 1942 : 	F4Assert(index >= 0 && index < NumEntities());
; 1943 : 
; 1944 : 	// Backward.
; 1945 : 	curr = CurrentEntityPositionHead(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityPositionHead
	mov	DWORD PTR _curr$[ebp], eax

; 1946 : 	if(curr == NULL) return;

	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN8@AdvanceEnt
	jmp	$LN9@AdvanceEnt
$LN8@AdvanceEnt:

; 1947 : 	while(_simTime < curr->time)

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx+108]
	jbe	SHORT $LN6@AdvanceEnt

; 1948 : 	{
; 1949 : 		prev = HeadPrev(curr);

	mov	eax, DWORD PTR _curr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadPrev
	mov	DWORD PTR _prev$[ebp], eax

; 1950 : 		if(prev == NULL) return;

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN5@AdvanceEnt
	jmp	SHORT $LN9@AdvanceEnt
$LN5@AdvanceEnt:

; 1951 : 
; 1952 : 		// Advance the head.
; 1953 : 		_entityReadHeads[index].positionDataOffset = curr->prevPositionUpdateOffset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [ecx+37]
	mov	DWORD PTR [edx+eax*8], ecx

; 1954 : 		curr = prev;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _curr$[ebp], edx

; 1955 : 	}

	jmp	SHORT $LN8@AdvanceEnt
$LN6@AdvanceEnt:

; 1956 : 	
; 1957 : 	// Forward.
; 1958 : 	next = HeadNext(curr);

	mov	eax, DWORD PTR _curr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _next$[ebp], eax

; 1959 : 	if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN4@AdvanceEnt
	jmp	SHORT $LN9@AdvanceEnt
$LN4@AdvanceEnt:

; 1960 : 	while(_simTime >= next->time)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	comiss	xmm0, DWORD PTR [edx]
	jb	SHORT $LN2@AdvanceEnt

; 1961 : 	{
; 1962 : 		// Advance the head.
; 1963 : 		_entityReadHeads[index].positionDataOffset = curr->nextPositionUpdateOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [eax+33]
	mov	DWORD PTR [ecx+edx*8], eax

; 1964 : 		curr = next;

	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], ecx

; 1965 : 
; 1966 : 		next = HeadNext(curr);

	mov	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _next$[ebp], eax

; 1967 : 		if(next == NULL) return;

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN1@AdvanceEnt
	jmp	SHORT $LN9@AdvanceEnt
$LN1@AdvanceEnt:

; 1968 : 	}

	jmp	SHORT $LN4@AdvanceEnt
$LN2@AdvanceEnt:
$LN9@AdvanceEnt:

; 1969 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdvanceEntityPositionHead@ACMITape@@AAEXH@Z ENDP	; ACMITape::AdvanceEntityPositionHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?Prev@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
?Prev@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z PROC	; ACMITape::Prev, COMDAT
; _this$ = ecx

; 481  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 482  : 	// F4Assert(_tape != NULL);
; 483  : 
; 484  : 	if(current == NULL || current == _firstFeatEvent )

	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN1@Prev
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR [eax+204]
	jne	SHORT $LN2@Prev
$LN1@Prev:

; 485  : 	{
; 486  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@Prev
$LN2@Prev:

; 487  : 	}
; 488  : 
; 489  : 	return current - 1;

	mov	eax, DWORD PTR _current$[ebp]
	sub	eax, 16					; 00000010H
$LN3@Prev:

; 490  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Prev@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z ENDP	; ACMITape::Prev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?Next@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
?Next@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z PROC	; ACMITape::Next, COMDAT
; _this$ = ecx

; 463  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 	// F4Assert(_tape != NULL);
; 465  : 
; 466  : 	if(current == NULL || current == _lastFeatEvent )

	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN1@Next
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR [eax+208]
	jne	SHORT $LN2@Next
$LN1@Next:

; 467  : 	{
; 468  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@Next
$LN2@Next:

; 469  : 	}
; 470  : 
; 471  : 
; 472  : 	return  current + 1;

	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 16					; 00000010H
$LN3@Next:

; 473  : 	
; 474  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Next@ACMITape@@AAEPAUACMIFeatEvent@@PAU2@@Z ENDP	; ACMITape::Next
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?CurrFeatEvent@ACMITape@@AAEPAUACMIFeatEvent@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrFeatEvent@ACMITape@@AAEPAUACMIFeatEvent@@XZ PROC	; ACMITape::CurrFeatEvent, COMDAT
; _this$ = ecx

; 451  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 452  : 	// F4Assert(_tape != NULL);
; 453  : 		
; 454  : 	return  _featEventReadHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+184]

; 455  : 	
; 456  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CurrFeatEvent@ACMITape@@AAEPAUACMIFeatEvent@@XZ ENDP	; ACMITape::CurrFeatEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?Prev@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
?Prev@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z PROC	; ACMITape::Prev, COMDAT
; _this$ = ecx

; 430  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 431  : 	// F4Assert(_tape != NULL);
; 432  : 
; 433  : 	if(current == NULL || current == _firstEventTrailer )

	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN1@Prev
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR [eax+196]
	jne	SHORT $LN2@Prev
$LN1@Prev:

; 434  : 	{
; 435  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@Prev
$LN2@Prev:

; 436  : 	}
; 437  : 
; 438  : 	return current - 1;

	mov	eax, DWORD PTR _current$[ebp]
	sub	eax, 8
$LN3@Prev:

; 439  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Prev@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z ENDP	; ACMITape::Prev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?Next@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
?Next@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z PROC	; ACMITape::Next, COMDAT
; _this$ = ecx

; 412  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 	// F4Assert(_tape != NULL);
; 414  : 
; 415  : 	if(current == NULL || current == _lastEventTrailer )

	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN1@Next
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR [eax+200]
	jne	SHORT $LN2@Next
$LN1@Next:

; 416  : 	{
; 417  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@Next
$LN2@Next:

; 418  : 	}
; 419  : 
; 420  : 
; 421  : 	return  current + 1;

	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 8
$LN3@Next:

; 422  : 	
; 423  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Next@ACMITape@@AAEPAUACMIEventTrailer@@PAU2@@Z ENDP	; ACMITape::Next
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?GeneralEventTrailer@ACMITape@@AAEPAUACMIEventTrailer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GeneralEventTrailer@ACMITape@@AAEPAUACMIEventTrailer@@XZ PROC ; ACMITape::GeneralEventTrailer, COMDAT
; _this$ = ecx

; 400  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  : 	// F4Assert(_tape != NULL);
; 402  : 		
; 403  : 	return  _generalEventReadHeadTrailer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]

; 404  : 	
; 405  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GeneralEventTrailer@ACMITape@@AAEPAUACMIEventTrailer@@XZ ENDP ; ACMITape::GeneralEventTrailer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?Prev@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
?Prev@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z PROC	; ACMITape::Prev, COMDAT
; _this$ = ecx

; 384  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 	// F4Assert(_tape != NULL);
; 386  : 
; 387  : 	if(current == NULL)

	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN1@Prev

; 388  : 	{
; 389  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@Prev
$LN1@Prev:

; 390  : 	}
; 391  : 
; 392  : 	return GetGeneralEventData( current->index - 1 );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+1]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z ; ACMITape::GetGeneralEventData
$LN2@Prev:

; 393  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Prev@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z ENDP	; ACMITape::Prev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?Next@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_current$ = 8						; size = 4
?Next@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z PROC	; ACMITape::Next, COMDAT
; _this$ = ecx

; 367  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 368  : 	// F4Assert(_tape != NULL);
; 369  : 
; 370  : 	if(current == NULL)

	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN1@Next

; 371  : 	{
; 372  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@Next
$LN1@Next:

; 373  : 	}
; 374  : 
; 375  : 	return GetGeneralEventData( current->index + 1 );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+1]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z ; ACMITape::GetGeneralEventData
$LN2@Next:

; 376  : 	
; 377  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Next@ACMITape@@AAEPAUACMIEventHeader@@PAU2@@Z ENDP	; ACMITape::Next
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z
_TEXT	SEGMENT
_result$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z PROC ; ACMITape::GetGeneralEventData, COMDAT
; _this$ = ecx

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 328  : 	ACMIEventHeader 
; 329  : 		*result;
; 330  : 
; 331  : 	// F4Assert(_tape != NULL);
; 332  : 		
; 333  : 	if(i < 0 || i >= _tapeHdr.numEvents )

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@GetGeneral
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+56]
	jl	SHORT $LN3@GetGeneral
$LN2@GetGeneral:

; 334  : 	{
; 335  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@GetGeneral

; 336  : 	}
; 337  : 	else

	jmp	SHORT $LN4@GetGeneral
$LN3@GetGeneral:

; 338  : 	{
; 339  : 		result = (ACMIEventHeader *)
; 340  : 		(
; 341  : 			((char *)_tape) +
; 342  : 			_tapeHdr.firstGeneralEventOffset +
; 343  : 			sizeof( ACMIEventHeader ) * i
; 344  : 		);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 65					; 00000041H
	add	eax, edx
	mov	DWORD PTR _result$[ebp], eax

; 345  : 
; 346  : 		return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN4@GetGeneral:

; 347  : 	}
; 348  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z ENDP ; ACMITape::GetGeneralEventData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?GeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@XZ PROC ; ACMITape::GeneralEventData, COMDAT
; _this$ = ecx

; 355  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  : 	// F4Assert(_tape != NULL);
; 357  : 		
; 358  : 	return GetGeneralEventData( _generalEventReadHeadHeader );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@H@Z ; ACMITape::GetGeneralEventData

; 359  : 	
; 360  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GeneralEventData@ACMITape@@AAEPAUACMIEventHeader@@XZ ENDP ; ACMITape::GeneralEventData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z
_TEXT	SEGMENT
_pd$ = -16						; size = 4
_this$ = -12						; size = 4
tv69 = -8						; size = 4
_positionOffset$ = -4					; size = 4
_current$ = 8						; size = 4
?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z PROC ; ACMITape::HeadPrev, COMDAT
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 	long
; 305  : 		positionOffset;
; 306  : 	ACMIEntityPositionData *pd;
; 307  : 
; 308  : 	// F4Assert(_tape != NULL);
; 309  : 	// F4Assert(_entityReadHeads != NULL);
; 310  : 
; 311  : 	if(current == NULL) return NULL;

	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN1@HeadPrev
	xor	eax, eax
	jmp	SHORT $LN2@HeadPrev
$LN1@HeadPrev:

; 312  : 	
; 313  : 	positionOffset = current->prevPositionUpdateOffset;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+37]
	mov	DWORD PTR _positionOffset$[ebp], ecx

; 314  : 	pd = positionOffset == 0 ? NULL : (ACMIEntityPositionData *)
; 315  : 		(
; 316  : 			((char *)_tape) +
; 317  : 			positionOffset
; 318  : 		);

	cmp	DWORD PTR _positionOffset$[ebp], 0
	jne	SHORT $LN4@HeadPrev
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN5@HeadPrev
$LN4@HeadPrev:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	add	eax, DWORD PTR _positionOffset$[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN5@HeadPrev:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _pd$[ebp], ecx

; 319  : 	return pd;

	mov	eax, DWORD PTR _pd$[ebp]
$LN2@HeadPrev:

; 320  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ENDP ; ACMITape::HeadPrev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z
_TEXT	SEGMENT
_pd$ = -16						; size = 4
_this$ = -12						; size = 4
tv69 = -8						; size = 4
_positionOffset$ = -4					; size = 4
_current$ = 8						; size = 4
?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z PROC ; ACMITape::HeadNext, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 	long
; 280  : 		positionOffset;
; 281  : 	ACMIEntityPositionData *pd;
; 282  : 
; 283  : 	// F4Assert(_tape != NULL);
; 284  : 	// F4Assert(_entityReadHeads != NULL);
; 285  : 
; 286  : 	if(current == NULL) return NULL;

	cmp	DWORD PTR _current$[ebp], 0
	jne	SHORT $LN1@HeadNext
	xor	eax, eax
	jmp	SHORT $LN2@HeadNext
$LN1@HeadNext:

; 287  : 	
; 288  : 	positionOffset = current->nextPositionUpdateOffset;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+33]
	mov	DWORD PTR _positionOffset$[ebp], ecx

; 289  : 	pd = positionOffset == 0 ? NULL : (ACMIEntityPositionData *)
; 290  : 		(
; 291  : 			((char *)_tape) +
; 292  : 			positionOffset
; 293  : 		);

	cmp	DWORD PTR _positionOffset$[ebp], 0
	jne	SHORT $LN4@HeadNext
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN5@HeadNext
$LN4@HeadNext:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	add	eax, DWORD PTR _positionOffset$[ebp]
	mov	DWORD PTR tv69[ebp], eax
$LN5@HeadNext:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _pd$[ebp], ecx

; 294  : 	return pd;

	mov	eax, DWORD PTR _pd$[ebp]
$LN2@HeadNext:

; 295  : 
; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ENDP ; ACMITape::HeadNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?CurrentEntityEventHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z
_TEXT	SEGMENT
_pd$ = -16						; size = 4
tv71 = -12						; size = 4
_positionOffset$ = -8					; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?CurrentEntityEventHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z PROC ; ACMITape::CurrentEntityEventHead, COMDAT
; _this$ = ecx

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 	long
; 256  : 		positionOffset;
; 257  : 	ACMIEntityPositionData *pd;
; 258  : 
; 259  : 	// F4Assert(_tape != NULL);
; 260  : 	// F4Assert(_entityReadHeads != NULL);
; 261  : 	// F4Assert(index >= 0 && index < NumEntities());
; 262  : 
; 263  : 	positionOffset = _entityReadHeads[index].eventDataOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _positionOffset$[ebp], eax

; 264  : 	pd = positionOffset == 0 ? NULL : (ACMIEntityPositionData *)
; 265  : 		(
; 266  : 			((char *)_tape) +
; 267  : 			positionOffset
; 268  : 		);

	cmp	DWORD PTR _positionOffset$[ebp], 0
	jne	SHORT $LN3@CurrentEnt
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN4@CurrentEnt
$LN3@CurrentEnt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, DWORD PTR _positionOffset$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@CurrentEnt:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pd$[ebp], eax

; 269  : 	return pd;

	mov	eax, DWORD PTR _pd$[ebp]

; 270  : 
; 271  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CurrentEntityEventHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ENDP ; ACMITape::CurrentEntityEventHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z
_TEXT	SEGMENT
_pd$ = -16						; size = 4
tv71 = -12						; size = 4
_positionOffset$ = -8					; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z PROC ; ACMITape::CurrentEntityPositionHead, COMDAT
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 	long
; 232  : 		positionOffset;
; 233  : 	ACMIEntityPositionData *pd;
; 234  : 
; 235  : 	// F4Assert(_tape != NULL);
; 236  : 	// F4Assert(_entityReadHeads != NULL);
; 237  : 	// F4Assert(index >= 0 && index < NumEntities());
; 238  : 
; 239  : 	positionOffset = _entityReadHeads[index].positionDataOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _positionOffset$[ebp], eax

; 240  : 	pd = positionOffset == 0 ? NULL : (ACMIEntityPositionData *)
; 241  : 		(
; 242  : 			((char *)_tape) +
; 243  : 			positionOffset
; 244  : 		);

	cmp	DWORD PTR _positionOffset$[ebp], 0
	jne	SHORT $LN3@CurrentEnt
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN4@CurrentEnt
$LN3@CurrentEnt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, DWORD PTR _positionOffset$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@CurrentEnt:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pd$[ebp], eax

; 245  : 	return pd;

	mov	eax, DWORD PTR _pd$[ebp]

; 246  : 
; 247  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ENDP ; ACMITape::CurrentEntityPositionHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?CurrentFeaturePositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z
_TEXT	SEGMENT
_pd$ = -20						; size = 4
_e$ = -16						; size = 4
tv71 = -12						; size = 4
_positionOffset$ = -8					; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?CurrentFeaturePositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z PROC ; ACMITape::CurrentFeaturePositionHead, COMDAT
; _this$ = ecx

; 205  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 206  : 	long
; 207  : 		positionOffset;
; 208  : 	ACMIEntityPositionData *pd;
; 209  : 	ACMIEntityData *e;
; 210  : 
; 211  : 	// F4Assert(_tape != NULL);
; 212  : 	// F4Assert(index >= 0 && index < _tapeHdr.numFeat);
; 213  : 
; 214  : 	e = FeatureData( index );

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FeatureData@ACMITape@@AAEPAUACMIEntityData@@H@Z ; ACMITape::FeatureData
	mov	DWORD PTR _e$[ebp], eax

; 215  : 
; 216  : 	positionOffset = e->firstPositionDataOffset;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _positionOffset$[ebp], edx

; 217  : 	pd = positionOffset == 0 ? NULL : (ACMIEntityPositionData *)
; 218  : 		(
; 219  : 			((char *)_tape) +
; 220  : 			positionOffset
; 221  : 		);

	cmp	DWORD PTR _positionOffset$[ebp], 0
	jne	SHORT $LN3@CurrentFea
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN4@CurrentFea
$LN3@CurrentFea:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	add	ecx, DWORD PTR _positionOffset$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@CurrentFea:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pd$[ebp], edx

; 222  : 	return pd;

	mov	eax, DWORD PTR _pd$[ebp]

; 223  : 
; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CurrentFeaturePositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ENDP ; ACMITape::CurrentFeaturePositionHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?FeatureData@ACMITape@@AAEPAUACMIEntityData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?FeatureData@ACMITape@@AAEPAUACMIEntityData@@H@Z PROC	; ACMITape::FeatureData, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	// F4Assert(_tape != NULL);
; 187  : 	// F4Assert(index >= 0 && index < _tapeHdr.numFeat);
; 188  : 
; 189  : 	return
; 190  : 	(
; 191  : 		(ACMIEntityData *)
; 192  : 		(
; 193  : 			((char *)_tape) +
; 194  : 			_tapeHdr.featBlockOffset +
; 195  : 			index * sizeof(ACMIEntityData)
; 196  : 		)
; 197  : 	);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+156]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _index$[ebp]
	imul	edx, 36					; 00000024H
	add	eax, edx

; 198  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FeatureData@ACMITape@@AAEPAUACMIEntityData@@H@Z ENDP	; ACMITape::FeatureData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_strptr$1 = -160					; size = 4
_cur$ = -156						; size = 4
_ret$ = -152						; size = 4
_te$ = -148						; size = 124
_timestr$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_tapeHdr$ = 12						; size = 4
?ImportTextEventList@ACMITape@@CAXPAU_iobuf@@PAUACMITapeHeader@@@Z PROC ; ACMITape::ImportTextEventList

; 3857 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3858 : 	EventElement *cur;
; 3859 : 	long ret;
; 3860 : 	ACMITextEvent te;
; 3861 : 	char timestr[20];
; 3862 : 
; 3863 : 	tapeHdr->numTextEvents = 0;

	mov	eax, DWORD PTR _tapeHdr$[ebp]
	mov	DWORD PTR [eax+60], 0

; 3864 : 
; 3865 : 	cur = ProcessEventListForACMI();

	call	?ProcessEventListForACMI@@YAPAVEventElement@@XZ ; ProcessEventListForACMI
	mov	DWORD PTR _cur$[ebp], eax

; 3866 : 
; 3867 : 	memset(&te,0,sizeof(ACMITextEvent));

	push	124					; 0000007cH
	push	0
	lea	ecx, DWORD PTR _te$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN12@ImportText:

; 3868 : 
; 3869 : 	// PJW Totally rewrote event debriefing stuff... thus the new code
; 3870 : 	while ( cur )

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN11@ImportText

; 3871 : 	{
; 3872 : 		te.intTime = cur->eventTime;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _te$[ebp], eax

; 3873 : 		GetTimeString(cur->eventTime, timestr);

	push	1
	lea	ecx, DWORD PTR _timestr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?GetTimeString@@YAPADKQADH@Z		; GetTimeString
	add	esp, 12					; 0000000cH

; 3874 : 
; 3875 : 		_tcscpy(te.timeStr,timestr + 3);

	lea	ecx, DWORD PTR _timestr$[ebp+3]
	push	ecx
	lea	edx, DWORD PTR _te$[ebp+4]
	push	edx
	call	_strcpy
	add	esp, 8

; 3876 : 		_tcscpy(te.msgStr,cur->eventString);

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	lea	ecx, DWORD PTR _te$[ebp+24]
	push	ecx
	call	_strcpy
	add	esp, 8

; 3877 : 
; 3878 : 		// KCK: Edit out some script info which is used in debreiefings
; 3879 : 		_TCHAR	*strptr = _tcschr(te.msgStr,'@');

	push	64					; 00000040H
	lea	edx, DWORD PTR _te$[ebp+24]
	push	edx
	call	?_tcschr@@YAPADPADI@Z			; _tcschr
	add	esp, 8
	mov	DWORD PTR _strptr$1[ebp], eax

; 3880 : 		if (strptr)

	cmp	DWORD PTR _strptr$1[ebp], 0
	je	SHORT $LN10@ImportText

; 3881 : 		{
; 3882 : 			strptr[0] = ' ';

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _strptr$1[ebp]
	mov	BYTE PTR [ecx+eax], 32			; 00000020H

; 3883 : 			strptr[1] = '-';

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _strptr$1[ebp]
	mov	BYTE PTR [eax+edx], 45			; 0000002dH

; 3884 : 			strptr[2] = ' ';

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _strptr$1[ebp]
	mov	BYTE PTR [edx+ecx], 32			; 00000020H
$LN10@ImportText:

; 3885 : 		}
; 3886 : 
; 3887 : 		ret = fwrite( &te, sizeof( ACMITextEvent ), 1, fd );

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	push	1
	push	124					; 0000007cH
	lea	ecx, DWORD PTR _te$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 3888 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN9@ImportText

; 3889 : 		{
; 3890 : 			MonoPrint( "Error writing TAPE event element\n" );

	push	OFFSET ??_C@_0CC@JEGADOOG@Error?5writing?5TAPE?5event?5element@
	call	_MonoPrint
	add	esp, 4

; 3891 : 			break;

	jmp	SHORT $LN11@ImportText
$LN9@ImportText:

; 3892 : 		}
; 3893 : 		tapeHdr->numTextEvents++;

	mov	edx, DWORD PTR _tapeHdr$[ebp]
	mov	eax, DWORD PTR [edx+60]
	add	eax, 1
	mov	ecx, DWORD PTR _tapeHdr$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 3894 : 
; 3895 : 		// next one
; 3896 : 		cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR _cur$[ebp], eax

; 3897 : 
; 3898 : 	} // end for events loop

	jmp	$LN12@ImportText
$LN11@ImportText:

; 3899 : 
; 3900 : 
; 3901 : 	// write callsign list
; 3902 : 	if(Import_Callsigns)

	cmp	DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A, 0 ; Import_Callsigns
	je	SHORT $LN8@ImportText

; 3903 : 	{
; 3904 : 		ret = fwrite(&import_count, sizeof(long),1, fd );

	mov	ecx, DWORD PTR _fd$[ebp]
	push	ecx
	push	1
	push	4
	push	OFFSET ?import_count@@3JA		; import_count
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 3905 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@ImportText

; 3906 : 	 		goto error_exit;

	jmp	$error_exit$15
	jmp	$error_exit$15
$LN7@ImportText:

; 3907 : 
; 3908 : 		ret = fwrite(Import_Callsigns, import_count * sizeof(ACMI_CallRec),1, fd );

	mov	edx, DWORD PTR _fd$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR ?import_count@@3JA	; import_count
	imul	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A ; Import_Callsigns
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 3909 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN8@ImportText

; 3910 : 	 		goto error_exit;

	jmp	SHORT $error_exit$15
	jmp	SHORT $error_exit$15
$LN8@ImportText:

; 3911 : 	}
; 3912 : 
; 3913 : 	// write the header again (bleck)
; 3914 : 	ret = fseek( fd, 0, SEEK_SET );

	push	0
	push	0
	mov	edx, DWORD PTR _fd$[ebp]
	push	edx
	call	_fseek
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 3915 : 	if ( ret )

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN3@ImportText

; 3916 : 	{
; 3917 : 		MonoPrint( "Error seeking TAPE start\n" );

	push	OFFSET ??_C@_0BK@FLEPGJPC@Error?5seeking?5TAPE?5start?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 3918 : 		goto error_exit;

	jmp	SHORT $error_exit$15
	jmp	SHORT $error_exit$15
$LN3@ImportText:

; 3919 : 	}
; 3920 : 	ret = fwrite( tapeHdr, sizeof( ACMITapeHeader ), 1, fd );

	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	push	1
	push	80					; 00000050H
	mov	ecx, DWORD PTR _tapeHdr$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 3921 : 	if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $error_exit$15

; 3922 : 	{
; 3923 : 		MonoPrint( "Error writing TAPE header again\n" );

	push	OFFSET ??_C@_0CB@FMHONLIG@Error?5writing?5TAPE?5header?5again?6@
	call	_MonoPrint
	add	esp, 4
$error_exit$15:

; 3924 : 	}
; 3925 : 
; 3926 : error_exit:
; 3927 : 	// free up mem
; 3928 : 	// DisposeEventList(evList);
; 3929 : 	ClearSortedEventList();

	call	?ClearSortedEventList@@YAXXZ		; ClearSortedEventList

; 3930 : 
; 3931 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ImportTextEventList@ACMITape@@CAXPAU_iobuf@@PAUACMITapeHeader@@@Z ENDP ; ACMITape::ImportTextEventList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_prevOffset$ = -40					; size = 4
_foundFirst$ = -36					; size = 4
_entityListPtr$ = -32					; size = 4
_prevPosPtr$ = -28					; size = 4
_currOffset$ = -24					; size = 4
_entityPtr$ = -20					; size = 4
_i$ = -16						; size = 4
_posPtr$ = -12						; size = 4
_j$ = -8						; size = 4
_posListPtr$ = -4					; size = 4
_tapeHdr$ = 8						; size = 4
?ThreadEntityEvents@ACMITape@@CAXPAUACMITapeHeader@@@Z PROC ; ACMITape::ThreadEntityEvents

; 1377 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 1378 : 	int i, j;
; 1379 : 	long prevOffset;
; 1380 : 	LIST *entityListPtr, *posListPtr;
; 1381 : 	ACMIEntityData *entityPtr;
; 1382 : 	ACMIRawPositionData *posPtr;
; 1383 : 	ACMIRawPositionData *prevPosPtr;
; 1384 : 	BOOL foundFirst;
; 1385 : 	long currOffset;
; 1386 : 
; 1387 : 	// we run an outer and inner loop here.
; 1388 : 	// the outer loops steps thru each entity
; 1389 : 	// the inner loop searches each position update for one owned by the
; 1390 : 	// entity and chains them together
; 1391 : 
; 1392 : 	entityListPtr = importEntityList;

	mov	eax, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1393 : 	for ( i = 0; i < importNumEnt; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@ThreadEnti
$LN8@ThreadEnti:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@ThreadEnti:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jge	$LN10@ThreadEnti

; 1394 : 	{
; 1395 : 		// entityListPtr = LIST_NTH(importEntityList, i);
; 1396 : 		entityPtr = (ACMIEntityData *)entityListPtr->node;

	mov	eax, DWORD PTR _entityListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1397 : 		foundFirst = FALSE;

	mov	DWORD PTR _foundFirst$[ebp], 0

; 1398 : 		prevOffset = 0;

	mov	DWORD PTR _prevOffset$[ebp], 0

; 1399 : 		prevPosPtr = NULL;

	mov	DWORD PTR _prevPosPtr$[ebp], 0

; 1400 : 		entityPtr->firstEventDataOffset = 0;

	mov	edx, DWORD PTR _entityPtr$[ebp]
	mov	DWORD PTR [edx+32], 0

; 1401 : 
; 1402 : 		posListPtr = importEntEventList;

	mov	eax, DWORD PTR ?importEntEventList@@3PAULIST@@A ; importEntEventList
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1403 : 		for ( j = 0; j < importNumEntEvents; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@ThreadEnti
$LN5@ThreadEnti:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN6@ThreadEnti:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	jge	$LN4@ThreadEnti

; 1404 : 		{
; 1405 : 			// posListPtr = LIST_NTH(importPosList, j);
; 1406 : 			posPtr = (ACMIRawPositionData *)posListPtr->node;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _posPtr$[ebp], ecx

; 1407 : 
; 1408 : 			// check the id to see if this position belongs to the entity
; 1409 : 			if ( posPtr->uniqueID != entityPtr->uniqueID )

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@ThreadEnti

; 1410 : 			{
; 1411 : 				// nope
; 1412 : 				posListPtr = posListPtr->next;

	mov	edx, DWORD PTR _posListPtr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1413 : 				continue;

	jmp	SHORT $LN5@ThreadEnti
$LN3@ThreadEnti:

; 1414 : 			}
; 1415 : 
; 1416 : 			// calculate the offset of this positional record
; 1417 : 			currOffset = tapeHdr->firstEntEventOffset +
; 1418 : 					   sizeof( ACMIEntityPositionData ) * j;

	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 41					; 00000029H
	mov	edx, DWORD PTR _tapeHdr$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _currOffset$[ebp], ecx

; 1419 : 
; 1420 : 			// if it's the 1st in the chain, set the offset to it in
; 1421 : 			// the entity's record
; 1422 : 			if ( foundFirst == FALSE )

	cmp	DWORD PTR _foundFirst$[ebp], 0
	jne	SHORT $LN2@ThreadEnti

; 1423 : 			{
; 1424 : 				entityPtr->firstEventDataOffset = currOffset;

	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1425 : 				foundFirst = TRUE;

	mov	DWORD PTR _foundFirst$[ebp], 1
$LN2@ThreadEnti:

; 1426 : 			}
; 1427 : 
; 1428 : 			// thread current to previous
; 1429 : 			posPtr->entityPosData.prevPositionUpdateOffset = prevOffset;

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	eax, DWORD PTR _prevOffset$[ebp]
	mov	DWORD PTR [edx+61], eax

; 1430 : 			posPtr->entityPosData.nextPositionUpdateOffset = 0;

	mov	ecx, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR [ecx+57], 0

; 1431 : 
; 1432 : 			// thread previous to current
; 1433 : 			if ( prevPosPtr )

	cmp	DWORD PTR _prevPosPtr$[ebp], 0
	je	SHORT $LN1@ThreadEnti

; 1434 : 			{
; 1435 : 				prevPosPtr->entityPosData.nextPositionUpdateOffset = currOffset;

	mov	edx, DWORD PTR _prevPosPtr$[ebp]
	mov	eax, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR [edx+57], eax
$LN1@ThreadEnti:

; 1436 : 			}
; 1437 : 
; 1438 : 			// set vals for next time thru loop
; 1439 : 			prevOffset = currOffset;

	mov	ecx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR _prevOffset$[ebp], ecx

; 1440 : 			prevPosPtr = posPtr;

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR _prevPosPtr$[ebp], edx

; 1441 : 
; 1442 : 			// next in list
; 1443 : 			posListPtr = posListPtr->next;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _posListPtr$[ebp], ecx

; 1444 : 
; 1445 : 		} // end for position loop

	jmp	$LN5@ThreadEnti
$LN4@ThreadEnti:

; 1446 : 
; 1447 : 		entityListPtr = entityListPtr->next;

	mov	edx, DWORD PTR _entityListPtr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1448 : 	} // end for entity loop

	jmp	$LN8@ThreadEnti
$LN10@ThreadEnti:

; 1449 : 
; 1450 : 
; 1451 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ThreadEntityEvents@ACMITape@@CAXPAUACMITapeHeader@@@Z ENDP ; ACMITape::ThreadEntityEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_featPtr$ = -52						; size = 4
_fePtr$ = -48						; size = 4
_featListPtr$ = -44					; size = 4
_prevOffset$ = -40					; size = 4
_foundFirst$ = -36					; size = 4
_entityListPtr$ = -32					; size = 4
_prevPosPtr$ = -28					; size = 4
_currOffset$ = -24					; size = 4
_i$ = -20						; size = 4
_posPtr$ = -16						; size = 4
_entityPtr$ = -12					; size = 4
_posListPtr$ = -8					; size = 4
_j$ = -4						; size = 4
_tapeHdr$ = 8						; size = 4
?ThreadEntityPositions@ACMITape@@CAXPAUACMITapeHeader@@@Z PROC ; ACMITape::ThreadEntityPositions

; 1182 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 1183 : 	int i, j;
; 1184 : 	long prevOffset;
; 1185 : 	LIST *entityListPtr, *posListPtr, *featListPtr;
; 1186 : 	ACMIEntityData *entityPtr, *featPtr;
; 1187 : 	ACMIRawPositionData *posPtr;
; 1188 : 	ACMIRawPositionData *prevPosPtr;
; 1189 : 	ACMIFeatEventImportData *fePtr;
; 1190 : 	BOOL foundFirst;
; 1191 : 	long currOffset;
; 1192 : 
; 1193 : 	// we run an outer and inner loop here.
; 1194 : 	// the outer loops steps thru each entity
; 1195 : 	// the inner loop searches each position update for one owned by the
; 1196 : 	// entity and chains them together
; 1197 : 
; 1198 : 	entityListPtr = importEntityList;

	mov	eax, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1199 : 	for ( i = 0; i < importNumEnt; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN29@ThreadEnti
$LN28@ThreadEnti:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN29@ThreadEnti:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jge	$LN27@ThreadEnti

; 1200 : 	{
; 1201 : 		// entityListPtr = LIST_NTH(importEntityList, i);
; 1202 : 		entityPtr = (ACMIEntityData *)entityListPtr->node;

	mov	eax, DWORD PTR _entityListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1203 : 		foundFirst = FALSE;

	mov	DWORD PTR _foundFirst$[ebp], 0

; 1204 : 		prevOffset = 0;

	mov	DWORD PTR _prevOffset$[ebp], 0

; 1205 : 		prevPosPtr = NULL;

	mov	DWORD PTR _prevPosPtr$[ebp], 0

; 1206 : 		entityPtr->firstPositionDataOffset = 0;

	mov	edx, DWORD PTR _entityPtr$[ebp]
	mov	DWORD PTR [edx+28], 0

; 1207 : 
; 1208 : 		posListPtr = importPosList;

	mov	eax, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1209 : 		for ( j = 0; j < importNumPos; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN26@ThreadEnti
$LN25@ThreadEnti:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN26@ThreadEnti:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR ?importNumPos@@3HA	; importNumPos
	jge	$LN24@ThreadEnti

; 1210 : 		{
; 1211 : 			// posListPtr = LIST_NTH(importPosList, j);
; 1212 : 			posPtr = (ACMIRawPositionData *)posListPtr->node;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _posPtr$[ebp], ecx

; 1213 : 
; 1214 : 			// check the id to see if this position belongs to the entity
; 1215 : 			if ( posPtr->uniqueID != entityPtr->uniqueID )

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN23@ThreadEnti

; 1216 : 			{
; 1217 : 				// nope
; 1218 : 				posListPtr = posListPtr->next;

	mov	edx, DWORD PTR _posListPtr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1219 : 				continue;

	jmp	SHORT $LN25@ThreadEnti
$LN23@ThreadEnti:

; 1220 : 			}
; 1221 : 
; 1222 : 			// calculate the offset of this positional record
; 1223 : 			currOffset = tapeHdr->timelineBlockOffset +
; 1224 : 					   sizeof( ACMIEntityPositionData ) * j;

	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 41					; 00000029H
	mov	edx, DWORD PTR _tapeHdr$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _currOffset$[ebp], ecx

; 1225 : 
; 1226 : 			// if it's the 1st in the chain, set the offset to it in
; 1227 : 			// the entity's record
; 1228 : 			if ( foundFirst == FALSE )

	cmp	DWORD PTR _foundFirst$[ebp], 0
	jne	SHORT $LN22@ThreadEnti

; 1229 : 			{
; 1230 : 				entityPtr->firstPositionDataOffset = currOffset;

	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1231 : 				foundFirst = TRUE;

	mov	DWORD PTR _foundFirst$[ebp], 1
$LN22@ThreadEnti:

; 1232 : 			}
; 1233 : 
; 1234 : 			// thread current to previous
; 1235 : 			posPtr->entityPosData.prevPositionUpdateOffset = prevOffset;

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	eax, DWORD PTR _prevOffset$[ebp]
	mov	DWORD PTR [edx+61], eax

; 1236 : 			posPtr->entityPosData.nextPositionUpdateOffset = 0;

	mov	ecx, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR [ecx+57], 0

; 1237 : 
; 1238 : 			// thread previous to current
; 1239 : 			if ( prevPosPtr )

	cmp	DWORD PTR _prevPosPtr$[ebp], 0
	je	SHORT $LN21@ThreadEnti

; 1240 : 			{
; 1241 : 				prevPosPtr->entityPosData.nextPositionUpdateOffset = currOffset;

	mov	edx, DWORD PTR _prevPosPtr$[ebp]
	mov	eax, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR [edx+57], eax
$LN21@ThreadEnti:

; 1242 : 			}
; 1243 : 
; 1244 : 			// set vals for next time thru loop
; 1245 : 			prevOffset = currOffset;

	mov	ecx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR _prevOffset$[ebp], ecx

; 1246 : 			prevPosPtr = posPtr;

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR _prevPosPtr$[ebp], edx

; 1247 : 
; 1248 : 			// next in list
; 1249 : 			posListPtr = posListPtr->next;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _posListPtr$[ebp], ecx

; 1250 : 
; 1251 : 		} // end for position loop

	jmp	$LN25@ThreadEnti
$LN24@ThreadEnti:

; 1252 : 
; 1253 : 		entityListPtr = entityListPtr->next;

	mov	edx, DWORD PTR _entityListPtr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1254 : 	} // end for entity loop

	jmp	$LN28@ThreadEnti
$LN27@ThreadEnti:

; 1255 : 
; 1256 : 	entityListPtr = importFeatList;

	mov	ecx, DWORD PTR ?importFeatList@@3PAULIST@@A ; importFeatList
	mov	DWORD PTR _entityListPtr$[ebp], ecx

; 1257 : 	for ( i = 0; i < importNumFeat; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@ThreadEnti
$LN19@ThreadEnti:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN20@ThreadEnti:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	jge	$LN30@ThreadEnti

; 1258 : 	{
; 1259 : 		entityPtr = (ACMIEntityData *)entityListPtr->node;

	mov	ecx, DWORD PTR _entityListPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _entityPtr$[ebp], edx

; 1260 : 		foundFirst = FALSE;

	mov	DWORD PTR _foundFirst$[ebp], 0

; 1261 : 		prevOffset = 0;

	mov	DWORD PTR _prevOffset$[ebp], 0

; 1262 : 		prevPosPtr = NULL;

	mov	DWORD PTR _prevPosPtr$[ebp], 0

; 1263 : 		entityPtr->firstPositionDataOffset = 0;

	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1264 : 
; 1265 : 		posListPtr = importPosList;

	mov	ecx, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	mov	DWORD PTR _posListPtr$[ebp], ecx

; 1266 : 		for ( j = 0; j < importNumPos; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN17@ThreadEnti
$LN16@ThreadEnti:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN17@ThreadEnti:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR ?importNumPos@@3HA	; importNumPos
	jge	$LN15@ThreadEnti

; 1267 : 		{
; 1268 : 			// posListPtr = LIST_NTH(importPosList, j);
; 1269 : 			posPtr = (ACMIRawPositionData *)posListPtr->node;

	mov	ecx, DWORD PTR _posListPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _posPtr$[ebp], edx

; 1270 : 
; 1271 : 			// check the id to see if this position belongs to the entity
; 1272 : 			if ( posPtr->uniqueID != entityPtr->uniqueID )

	mov	eax, DWORD PTR _posPtr$[ebp]
	mov	ecx, DWORD PTR _entityPtr$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN14@ThreadEnti

; 1273 : 			{
; 1274 : 				// nope
; 1275 : 				posListPtr = posListPtr->next;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _posListPtr$[ebp], ecx

; 1276 : 				continue;

	jmp	SHORT $LN16@ThreadEnti
$LN14@ThreadEnti:

; 1277 : 			}
; 1278 : 
; 1279 : 			// calculate the offset of this positional record
; 1280 : 			currOffset = tapeHdr->timelineBlockOffset +
; 1281 : 					   sizeof( ACMIEntityPositionData ) * j;

	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 41					; 00000029H
	mov	eax, DWORD PTR _tapeHdr$[ebp]
	add	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _currOffset$[ebp], edx

; 1282 : 
; 1283 : 			// if it's the 1st in the chain, set the offset to it in
; 1284 : 			// the entity's record
; 1285 : 			if ( foundFirst == FALSE )

	cmp	DWORD PTR _foundFirst$[ebp], 0
	jne	SHORT $LN13@ThreadEnti

; 1286 : 			{
; 1287 : 				entityPtr->firstPositionDataOffset = currOffset;

	mov	ecx, DWORD PTR _entityPtr$[ebp]
	mov	edx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 1288 : 				foundFirst = TRUE;

	mov	DWORD PTR _foundFirst$[ebp], 1
$LN13@ThreadEnti:

; 1289 : 			}
; 1290 : 
; 1291 : 			// thread current to previous
; 1292 : 			posPtr->entityPosData.prevPositionUpdateOffset = prevOffset;

	mov	eax, DWORD PTR _posPtr$[ebp]
	mov	ecx, DWORD PTR _prevOffset$[ebp]
	mov	DWORD PTR [eax+61], ecx

; 1293 : 			posPtr->entityPosData.nextPositionUpdateOffset = 0;

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR [edx+57], 0

; 1294 : 
; 1295 : 			// thread previous to current
; 1296 : 			if ( prevPosPtr )

	cmp	DWORD PTR _prevPosPtr$[ebp], 0
	je	SHORT $LN12@ThreadEnti

; 1297 : 			{
; 1298 : 				prevPosPtr->entityPosData.nextPositionUpdateOffset = currOffset;

	mov	eax, DWORD PTR _prevPosPtr$[ebp]
	mov	ecx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR [eax+57], ecx
$LN12@ThreadEnti:

; 1299 : 			}
; 1300 : 
; 1301 : 			// set vals for next time thru loop
; 1302 : 			prevOffset = currOffset;

	mov	edx, DWORD PTR _currOffset$[ebp]
	mov	DWORD PTR _prevOffset$[ebp], edx

; 1303 : 			prevPosPtr = posPtr;

	mov	eax, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR _prevPosPtr$[ebp], eax

; 1304 : 
; 1305 : 			// next in list
; 1306 : 			posListPtr = posListPtr->next;

	mov	ecx, DWORD PTR _posListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _posListPtr$[ebp], edx

; 1307 : 
; 1308 : 		} // end for position loop

	jmp	$LN16@ThreadEnti
$LN15@ThreadEnti:

; 1309 : 
; 1310 : 		// while we're doing the features, for each one, go thru the
; 1311 : 		// feature event list looking for our unique ID in the events
; 1312 : 		// and setting the index value of our feature in the event
; 1313 : 		posListPtr = importFeatEventList;

	mov	eax, DWORD PTR ?importFeatEventList@@3PAULIST@@A ; importFeatEventList
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1314 : 		for ( j = 0; j < importNumFeatEvents; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN11@ThreadEnti
$LN10@ThreadEnti:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN11@ThreadEnti:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR ?importNumFeatEvents@@3HA ; importNumFeatEvents
	jge	SHORT $LN9@ThreadEnti

; 1315 : 		{
; 1316 : 			// posListPtr = LIST_NTH(importPosList, j);
; 1317 : 			fePtr = (ACMIFeatEventImportData *)posListPtr->node;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fePtr$[ebp], ecx

; 1318 : 
; 1319 : 			// check the id to see if this event belongs to the entity
; 1320 : 			if ( fePtr->uniqueID == entityPtr->uniqueID )

	mov	edx, DWORD PTR _fePtr$[ebp]
	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN8@ThreadEnti

; 1321 : 			{
; 1322 : 				fePtr->data.index = i;

	mov	edx, DWORD PTR _fePtr$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN8@ThreadEnti:

; 1323 : 			}
; 1324 : 
; 1325 : 			// next in list
; 1326 : 			posListPtr = posListPtr->next;

	mov	ecx, DWORD PTR _posListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _posListPtr$[ebp], edx

; 1327 : 
; 1328 : 		} // end for feature event loop

	jmp	SHORT $LN10@ThreadEnti
$LN9@ThreadEnti:

; 1329 : 
; 1330 : 		// now go thru the feature list again and find lead unique ID's and
; 1331 : 		// change them to indices into the list
; 1332 : 
; 1333 : 		// actually NOW, go through and just make sure they exist... otherwise, clear
; 1334 : 		if ( entityPtr->leadIndex != -1)

	mov	eax, DWORD PTR _entityPtr$[ebp]
	cmp	DWORD PTR [eax+16], -1
	je	SHORT $LN7@ThreadEnti

; 1335 : 		{
; 1336 : 			featListPtr = importFeatList;

	mov	ecx, DWORD PTR ?importFeatList@@3PAULIST@@A ; importFeatList
	mov	DWORD PTR _featListPtr$[ebp], ecx

; 1337 : 			for ( j = 0; j < importNumFeat; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@ThreadEnti
$LN5@ThreadEnti:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN6@ThreadEnti:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	jge	SHORT $LN4@ThreadEnti

; 1338 : 			{
; 1339 : 				// we don't compare ourselves
; 1340 : 				if ( j != i )

	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _i$[ebp]
	je	SHORT $LN3@ThreadEnti

; 1341 : 				{
; 1342 : 					featPtr = (ACMIEntityData *)featListPtr->node;

	mov	edx, DWORD PTR _featListPtr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _featPtr$[ebp], eax

; 1343 : 					if ( entityPtr->leadIndex == featPtr->uniqueID )

	mov	ecx, DWORD PTR _entityPtr$[ebp]
	mov	edx, DWORD PTR _featPtr$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ThreadEnti

; 1344 : 					{
; 1345 : 						entityPtr->leadIndex = j;

	mov	ecx, DWORD PTR _entityPtr$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1346 : 						break;

	jmp	SHORT $LN4@ThreadEnti
$LN3@ThreadEnti:

; 1347 : 					}
; 1348 : 	
; 1349 : 				}
; 1350 : 				// next in list
; 1351 : 				featListPtr = featListPtr->next;

	mov	eax, DWORD PTR _featListPtr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _featListPtr$[ebp], ecx

; 1352 : 			}

	jmp	SHORT $LN5@ThreadEnti
$LN4@ThreadEnti:

; 1353 : 
; 1354 : 			// if we're gone thru the whole list and haven't found
; 1355 : 			// a lead index, we're in trouble.  To protect, set the
; 1356 : 			// lead index to -1
; 1357 : 			if ( j == importNumFeat )

	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	jne	SHORT $LN7@ThreadEnti

; 1358 : 			{
; 1359 : 				entityPtr->leadIndex = -1;

	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	DWORD PTR [eax+16], -1
$LN7@ThreadEnti:

; 1360 : 			}
; 1361 : 		}
; 1362 : 
; 1363 : 		entityListPtr = entityListPtr->next;

	mov	ecx, DWORD PTR _entityListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _entityListPtr$[ebp], edx

; 1364 : 	} // end for feature entity loop

	jmp	$LN19@ThreadEnti
$LN30@ThreadEnti:

; 1365 : 
; 1366 : 
; 1367 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ThreadEntityPositions@ACMITape@@CAXPAUACMITapeHeader@@@Z ENDP ; ACMITape::ThreadEntityPositions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
_objCount$ = -44					; size = 4
_thing2$ = -40						; size = 4
_thing1$ = -36						; size = 4
_rawList$ = -32						; size = 4
_list2$ = -28						; size = 4
_count$ = -24						; size = 4
_list1$ = -20						; size = 4
_entityPtr$ = -16					; size = 4
_i$ = -12						; size = 4
_entityType$ = -8					; size = 4
_importEntityInfo$ = -4					; size = 4
?ParseEntities@ACMITape@@CAXXZ PROC			; ACMITape::ParseEntities

; 1041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 1042 : 	int
; 1043 : 		i = 0,

	mov	DWORD PTR _i$[ebp], 0

; 1044 : 		count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 1045 : 	
; 1046 : 	LIST			
; 1047 : 		*entityPtr,
; 1048 : 		*rawList;
; 1049 : 
; 1050 : 	ACMIRawPositionData
; 1051 : 		*entityType;
; 1052 : 
; 1053 : 	ACMIEntityData
; 1054 : 		*importEntityInfo;
; 1055 : 
; 1056 : 	importEntityList = NULL;

	mov	DWORD PTR ?importEntityList@@3PAULIST@@A, 0 ; importEntityList

; 1057 : 
; 1058 : 	rawList = importPosList;

	mov	eax, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	mov	DWORD PTR _rawList$[ebp], eax

; 1059 : 	for (count = 0; count < importNumPos; count++)

	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN21@ParseEntit
$LN20@ParseEntit:
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN21@ParseEntit:
	mov	edx, DWORD PTR _count$[ebp]
	cmp	edx, DWORD PTR ?importNumPos@@3HA	; importNumPos
	jge	$LN19@ParseEntit

; 1060 : 	{
; 1061 : 		// rawList = LIST_NTH(importPosList, count);
; 1062 : 		entityType = (ACMIRawPositionData *)rawList->node;

	mov	eax, DWORD PTR _rawList$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entityType$[ebp], ecx

; 1063 : 
; 1064 : 		if ( entityType->flags & ENTITY_FLAG_FEATURE )

	mov	edx, DWORD PTR _entityType$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 2
	je	$LN18@ParseEntit

; 1065 : 		{
; 1066 : 			// look for existing entity
; 1067 : 			entityPtr = importFeatList;

	mov	ecx, DWORD PTR ?importFeatList@@3PAULIST@@A ; importFeatList
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1068 : 			for (i = 0; i < importNumFeat; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@ParseEntit
$LN16@ParseEntit:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN17@ParseEntit:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	jge	SHORT $LN15@ParseEntit

; 1069 : 			{
; 1070 : 				// entityPtr = LIST_NTH(importEntityList, i);
; 1071 : 				importEntityInfo = ( ACMIEntityData * )entityPtr->node;

	mov	ecx, DWORD PTR _entityPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _importEntityInfo$[ebp], edx

; 1072 : 				if(entityType->uniqueID == importEntityInfo->uniqueID)

	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR _importEntityInfo$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN14@ParseEntit

; 1073 : 				{
; 1074 : 					break;

	jmp	SHORT $LN15@ParseEntit
$LN14@ParseEntit:

; 1075 : 				}
; 1076 : 	
; 1077 : 				entityPtr = entityPtr->next;

	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1078 : 			}

	jmp	SHORT $LN16@ParseEntit
$LN15@ParseEntit:

; 1079 : 	
; 1080 : 			// create new import entity record
; 1081 : 			if(i == importNumFeat)

	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	jne	$LN13@ParseEntit

; 1082 : 			{
; 1083 : 				importEntityInfo = new ACMIEntityData;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _importEntityInfo$[ebp], eax

; 1084 : 				importEntityInfo->count =0;

	mov	ecx, DWORD PTR _importEntityInfo$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 1085 : 
; 1086 : 				F4Assert( importEntityInfo );
; 1087 : 				importEntityInfo->uniqueID = entityType->uniqueID;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx

; 1088 : 				importEntityInfo->type = entityType->type;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+4], ecx

; 1089 : 				importEntityInfo->flags = entityType->flags;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+12], ecx

; 1090 : 				importEntityInfo->leadIndex = entityType->leadIndex;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx

; 1091 : 				importEntityInfo->specialFlags = entityType->specialFlags;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+24], ecx

; 1092 : 				importEntityInfo->slot = entityType->slot;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR _entityType$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+20], ecx

; 1093 : 				importFeatList = AppendToEndOfList(importFeatList, &importFeatListEnd, importEntityInfo);

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	push	edx
	push	OFFSET ?importFeatListEnd@@3PAULIST@@A	; importFeatListEnd
	mov	eax, DWORD PTR ?importFeatList@@3PAULIST@@A ; importFeatList
	push	eax
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importFeatList@@3PAULIST@@A, eax ; importFeatList

; 1094 : 				importNumFeat++;

	mov	ecx, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	add	ecx, 1
	mov	DWORD PTR ?importNumFeat@@3HA, ecx	; importNumFeat
$LN13@ParseEntit:

; 1095 : 			}
; 1096 : 		}
; 1097 : 		else

	jmp	$LN12@ParseEntit
$LN18@ParseEntit:

; 1098 : 		{
; 1099 : 			// not a feature
; 1100 : 
; 1101 : 			// look for existing entity
; 1102 : 			entityPtr = importEntityList;

	mov	edx, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	mov	DWORD PTR _entityPtr$[ebp], edx

; 1103 : 
; 1104 : 			for (i = 0; i < importNumEnt; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@ParseEntit
$LN10@ParseEntit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ParseEntit:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jge	SHORT $LN9@ParseEntit

; 1105 : 			{
; 1106 : 				// entityPtr = LIST_NTH(importEntityList, i);
; 1107 : 				importEntityInfo = ( ACMIEntityData * )entityPtr->node;

	mov	edx, DWORD PTR _entityPtr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _importEntityInfo$[ebp], eax

; 1108 : 				if(entityType->uniqueID == importEntityInfo->uniqueID)

	mov	ecx, DWORD PTR _entityType$[ebp]
	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN8@ParseEntit

; 1109 : 				{
; 1110 : 					break;

	jmp	SHORT $LN9@ParseEntit
$LN8@ParseEntit:

; 1111 : 				}
; 1112 : 	
; 1113 : 				entityPtr = entityPtr->next;

	mov	ecx, DWORD PTR _entityPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _entityPtr$[ebp], edx

; 1114 : 			}

	jmp	SHORT $LN10@ParseEntit
$LN9@ParseEntit:

; 1115 : 	
; 1116 : 			// create new import entity record
; 1117 : 			if(i == importNumEnt)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jne	SHORT $LN12@ParseEntit

; 1118 : 			{
; 1119 : 				importEntityInfo = new ACMIEntityData;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _importEntityInfo$[ebp], ecx

; 1120 : 				importEntityInfo->count =0;

	mov	edx, DWORD PTR _importEntityInfo$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1121 : 
; 1122 : 				F4Assert( importEntityInfo );
; 1123 : 				importEntityInfo->uniqueID = entityType->uniqueID;

	mov	eax, DWORD PTR _importEntityInfo$[ebp]
	mov	ecx, DWORD PTR _entityType$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1124 : 				importEntityInfo->type = entityType->type;

	mov	eax, DWORD PTR _importEntityInfo$[ebp]
	mov	ecx, DWORD PTR _entityType$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1125 : 				importEntityInfo->flags = entityType->flags;

	mov	eax, DWORD PTR _importEntityInfo$[ebp]
	mov	ecx, DWORD PTR _entityType$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1126 : // remove				importEntityInfo->teamColor = entityType->entityPosData.teamColor;
; 1127 : // remove				strcpy((importEntityInfo->label), (char*) entityType->entityPosData.label);
; 1128 : 
; 1129 : 				importEntityList = AppendToEndOfList(importEntityList, &importEntityListEnd, importEntityInfo);

	mov	eax, DWORD PTR _importEntityInfo$[ebp]
	push	eax
	push	OFFSET ?importEntityListEnd@@3PAULIST@@A ; importEntityListEnd
	mov	ecx, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	push	ecx
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importEntityList@@3PAULIST@@A, eax ; importEntityList

; 1130 : 				importNumEnt++;

	mov	edx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	add	edx, 1
	mov	DWORD PTR ?importNumEnt@@3HA, edx	; importNumEnt
$LN12@ParseEntit:

; 1131 : 			}
; 1132 : 		}
; 1133 : 
; 1134 : 		rawList = rawList->next;

	mov	eax, DWORD PTR _rawList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rawList$[ebp], ecx

; 1135 : 	}

	jmp	$LN20@ParseEntit
$LN19@ParseEntit:

; 1136 : 
; 1137 : 	// Count instances of each unique type
; 1138 : 	LIST* list1 = importEntityList;

	mov	edx, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	mov	DWORD PTR _list1$[ebp], edx
$LN6@ParseEntit:

; 1139 : 	LIST* list2;
; 1140 : 	ACMIEntityData* thing1;
; 1141 : 	ACMIEntityData* thing2;
; 1142 : 	int objCount;
; 1143 : 
; 1144 : 	while (list1)

	cmp	DWORD PTR _list1$[ebp], 0
	je	SHORT $LN22@ParseEntit

; 1145 : 	{
; 1146 : 		thing1 = (ACMIEntityData*)list1->node;

	mov	eax, DWORD PTR _list1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _thing1$[ebp], ecx

; 1147 : 		if (thing1->count == 0)

	mov	edx, DWORD PTR _thing1$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN4@ParseEntit

; 1148 : 		{
; 1149 : 			thing1->count = 1;

	mov	eax, DWORD PTR _thing1$[ebp]
	mov	DWORD PTR [eax+8], 1

; 1150 : 			objCount = 2;

	mov	DWORD PTR _objCount$[ebp], 2

; 1151 : 			list2 = list1->next;

	mov	ecx, DWORD PTR _list1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _list2$[ebp], edx
$LN3@ParseEntit:

; 1152 : 			while (list2)

	cmp	DWORD PTR _list2$[ebp], 0
	je	SHORT $LN4@ParseEntit

; 1153 : 			{
; 1154 : 				thing2 = (ACMIEntityData*)list2->node;

	mov	eax, DWORD PTR _list2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _thing2$[ebp], ecx

; 1155 : 				if (thing2->type == thing1->type && thing2->count == 0)

	mov	edx, DWORD PTR _thing2$[ebp]
	mov	eax, DWORD PTR _thing1$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN1@ParseEntit
	mov	edx, DWORD PTR _thing2$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN1@ParseEntit

; 1156 : 				{
; 1157 : 					thing2->count = objCount;

	mov	eax, DWORD PTR _thing2$[ebp]
	mov	ecx, DWORD PTR _objCount$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1158 : 					objCount ++;

	mov	edx, DWORD PTR _objCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _objCount$[ebp], edx
$LN1@ParseEntit:

; 1159 : 				}
; 1160 : 				list2 = list2->next;

	mov	eax, DWORD PTR _list2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _list2$[ebp], ecx

; 1161 : 			}

	jmp	SHORT $LN3@ParseEntit
$LN4@ParseEntit:

; 1162 : 		}
; 1163 : 		list1 = list1->next;

	mov	edx, DWORD PTR _list1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _list1$[ebp], eax

; 1164 : 	}

	jmp	SHORT $LN6@ParseEntit
$LN22@ParseEntit:

; 1165 : 
; 1166 : 
; 1167 : 
; 1168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ParseEntities@ACMITape@@CAXXZ ENDP			; ACMITape::ParseEntities
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Init@ACMITape@@AAEXXZ PROC				; ACMITape::Init
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 
; 393  : 	if(_entityReadHeads)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN4@Init

; 394  : 	{
; 395  : 		delete [] _entityReadHeads;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 396  : 		_entityReadHeads = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], 0
$LN4@Init:

; 397  : 	}
; 398  : 
; 399  : 	if(_simTapeEntities)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Init

; 400  : 	{
; 401  : 		CleanupSimTapeEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupSimTapeEntities@ACMITape@@AAEXXZ ; ACMITape::CleanupSimTapeEntities
$LN3@Init:

; 402  : 	}
; 403  : 
; 404  : 	if ( _eventList )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+188], 0
	je	SHORT $LN2@Init

; 405  : 	{
; 406  : 		CleanupEventList( );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupEventList@ACMITape@@AAEXXZ	; ACMITape::CleanupEventList
$LN2@Init:

; 407  : 	}
; 408  : 
; 409  : 	SetGeneralEventCallbacks
; 410  : 	(
; 411  : 		NULL,
; 412  : 		NULL,
; 413  : 		NULL
; 414  : 	);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGeneralEventCallbacks@ACMITape@@QAEXP6AXPAV1@UEventIdData@@PAX2@Z32@Z ; ACMITape::SetGeneralEventCallbacks

; 415  : 
; 416  : 	if(_tape)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+156], 0
	je	SHORT $LN1@Init

; 417  : 	{
; 418  : 		// close file mapping.
; 419  : 		CloseTapeFile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseTapeFile@ACMITape@@AAEXXZ		; ACMITape::CloseTapeFile
$LN1@Init:

; 420  : 	}
; 421  : 
; 422  : 	_playVelocity = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+96], xmm0

; 423  : 	_playAcceleration = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+100], xmm0

; 424  : 	_maxPlaySpeed = 4.0;	

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [ecx+104], xmm0

; 425  : 
; 426  : 	_simTime = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+108], xmm0

; 427  : 	_stepTrail = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+112], xmm0

; 428  : 
; 429  : 	_lastRealTime = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+132], xmm0

; 430  : 
; 431  : 
; 432  : 	_unpause = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], 0

; 433  : 	_paused = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 1

; 434  : 	_simulateOnly = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 435  : 
; 436  : 	_generalEventReadHeadHeader = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], 0

; 437  : 	_featEventReadHead = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+184], 0

; 438  : 	_generalEventReadHeadTrailer = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 0

; 439  : 
; 440  : 
; 441  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Init@ACMITape@@AAEXXZ ENDP				; ACMITape::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z PROC	; ACMITape::EntityData, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 	// F4Assert(_tape != NULL);
; 167  : 	// F4Assert(index >= 0 && index < NumEntities());
; 168  : 
; 169  : 	return
; 170  : 	(
; 171  : 		(ACMIEntityData *)
; 172  : 		(
; 173  : 			((char *)_tape) +
; 174  : 			sizeof(ACMITapeHeader) +
; 175  : 			index * sizeof(ACMIEntityData)
; 176  : 		)
; 177  : 	);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _index$[ebp]
	imul	edx, 36					; 00000024H
	lea	eax, DWORD PTR [ecx+edx+80]

; 178  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z ENDP	; ACMITape::EntityData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_count$ = 8						; size = 4
?GetCallsignList@ACMITape@@QAEPAXPAJ@Z PROC		; ACMITape::GetCallsignList
; _this$ = ecx

; 3953 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3954 : 	if (_tapeHdr.numTextEvents > 1048576) // Sanity check

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 1048576		; 00100000H
	jle	SHORT $LN1@GetCallsig

; 3955 : 	{
; 3956 : 		count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 3957 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetCallsig
$LN1@GetCallsig:

; 3958 : 	}
; 3959 : 
; 3960 : 	*count = (long)(*(long*)((char*)_tape + _tapeHdr.firstTextEventOffset + _tapeHdr.numTextEvents * sizeof(ACMITextEvent)));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	imul	eax, 124				; 0000007cH
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], edx

; 3961 : 	return((void *)((char*)_tape + _tapeHdr.firstTextEventOffset + _tapeHdr.numTextEvents * sizeof(ACMITextEvent)+sizeof(long)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	imul	edx, 124				; 0000007cH
	lea	eax, DWORD PTR [ecx+edx+4]
$LN2@GetCallsig:

; 3962 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCallsignList@ACMITape@@QAEPAXPAJ@Z ENDP		; ACMITape::GetCallsignList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_count$ = 8						; size = 4
?GetTextEvents@ACMITape@@QAEPAXPAH@Z PROC		; ACMITape::GetTextEvents
; _this$ = ecx

; 3941 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3942 : 	if (_tapeHdr.numTextEvents > 1048576) // Sanity check

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 1048576		; 00100000H
	jle	SHORT $LN1@GetTextEve

; 3943 : 	{
; 3944 : 		count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 3945 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetTextEve
$LN1@GetTextEve:

; 3946 : 	}
; 3947 : 
; 3948 : 	*count = _tapeHdr.numTextEvents;

	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx], eax

; 3949 : 	return (void *)((char *)_tape + _tapeHdr.firstTextEventOffset);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+156]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+48]
$LN2@GetTextEve:

; 3950 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextEvents@ACMITape@@QAEPAXPAH@Z ENDP		; ACMITape::GetTextEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_numEntities$ = -16					; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_ep$ = -4						; size = 4
_turnOn$ = 8						; size = 4
?SetWingTrails@ACMITape@@QAEXH@Z PROC			; ACMITape::SetWingTrails
; _this$ = ecx

; 3718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3719 : 	int				
; 3720 : 		i,
; 3721 : 		numEntities;
; 3722 : 
; 3723 : 	SimTapeEntity *ep;
; 3724 : 
; 3725 : 	F4Assert(_simTapeEntities != NULL);
; 3726 : 	F4Assert(_tape != NULL );
; 3727 : 
; 3728 : 	// set flag
; 3729 : 	_wingTrails = turnOn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _turnOn$[ebp]
	mov	DWORD PTR [eax+148], ecx

; 3730 : 
; 3731 : 	// create array of SimTapeEntity
; 3732 : 	numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 3733 : 
; 3734 : 	// for each entity, create it's object stuff....
; 3735 : 	for(i = 0; i < numEntities; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@SetWingTra
$LN9@SetWingTra:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@SetWingTra:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numEntities$[ebp]
	jge	$LN11@SetWingTra

; 3736 : 	{
; 3737 : 		// get the tape entity data
; 3738 : 		ep = &_simTapeEntities[i];

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _ep$[ebp], ecx

; 3739 : 
; 3740 : 		if ( !(ep->flags & ENTITY_FLAG_AIRCRAFT) )

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 4
	jne	SHORT $LN7@SetWingTra

; 3741 : 		{
; 3742 : 			continue;

	jmp	SHORT $LN9@SetWingTra
$LN7@SetWingTra:

; 3743 : 		}
; 3744 : 
; 3745 : 		if ( turnOn )

	cmp	DWORD PTR _turnOn$[ebp], 0
	je	SHORT $LN6@SetWingTra

; 3746 : 		{
; 3747 : 			// turn trails on
; 3748 : 			if ( !ep->wrTrail->InDisplayList() )

	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN5@SetWingTra

; 3749 : 				_viewPoint->InsertObject( ep->wrTrail );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN5@SetWingTra:

; 3750 : 			if ( !ep->wlTrail->InDisplayList() )

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN4@SetWingTra

; 3751 : 				_viewPoint->InsertObject( ep->wlTrail );

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN4@SetWingTra:

; 3752 : 		}
; 3753 : 		else

	jmp	SHORT $LN3@SetWingTra
$LN6@SetWingTra:

; 3754 : 		{
; 3755 : 			// turn trails off
; 3756 : 			if ( ep->wrTrail->InDisplayList() )

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN2@SetWingTra

; 3757 : 				_viewPoint->RemoveObject( ep->wrTrail );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN2@SetWingTra:

; 3758 : 			if ( ep->wlTrail->InDisplayList() )

	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN3@SetWingTra

; 3759 : 				_viewPoint->RemoveObject( ep->wlTrail );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN3@SetWingTra:

; 3760 : 		}
; 3761 : 
; 3762 : 		ep->wrTrail->TrimTrail( 0 );

	push	0
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3763 : 		ep->wlTrail->TrimTrail( 0 );

	push	0
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3764 : 		ep->wtLength = 0;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [edx+68], 0

; 3765 : 
; 3766 : 	}

	jmp	$LN9@SetWingTra
$LN11@SetWingTra:

; 3767 : 
; 3768 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetWingTrails@ACMITape@@QAEXH@Z ENDP			; ACMITape::SetWingTrails
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
_simView$ = 12						; size = 4
_viewRotation$ = 16					; size = 4
?ObjectSetData@ACMITape@@QAEXPAVSimBaseClass@@PAUTpoint@@PAUTrotation@@@Z PROC ; ACMITape::ObjectSetData
; _this$ = ecx

; 3384 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3385 :    viewRotation->M11 = obj->dmx[0][0];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], edx

; 3386 :    viewRotation->M21 = obj->dmx[0][1];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+12], edx

; 3387 :    viewRotation->M31 = obj->dmx[0][2];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+24], edx

; 3388 : 
; 3389 :    viewRotation->M12 = obj->dmx[1][0];

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], edx

; 3390 :    viewRotation->M22 = obj->dmx[1][1];

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+16], edx

; 3391 :    viewRotation->M32 = obj->dmx[1][2];

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+28], edx

; 3392 : 
; 3393 :    viewRotation->M13 = obj->dmx[2][0];

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], edx

; 3394 :    viewRotation->M23 = obj->dmx[2][1];

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+20], edx

; 3395 :    viewRotation->M33 = obj->dmx[2][2];

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _obj$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _viewRotation$[ebp]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+32], edx

; 3396 : 
; 3397 :    // Update object position
; 3398 :    simView->x     = obj->XPos();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _simView$[ebp]
	fstp	DWORD PTR [eax]

; 3399 :    simView->y     = obj->YPos();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	ecx, DWORD PTR _simView$[ebp]
	fstp	DWORD PTR [ecx+4]

; 3400 :    simView->z     = obj->ZPos();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _simView$[ebp]
	fstp	DWORD PTR [edx+8]

; 3401 : 
; 3402 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ObjectSetData@ACMITape@@QAEXPAVSimBaseClass@@PAUTpoint@@PAUTrotation@@@Z ENDP ; ACMITape::ObjectSetData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
tv1381 = -380						; size = 8
tv1541 = -372						; size = 8
tv1346 = -364						; size = 8
tv1574 = -356						; size = 8
tv1329 = -348						; size = 8
tv1589 = -340						; size = 8
tv1313 = -332						; size = 8
tv1558 = -324						; size = 8
tv1281 = -316						; size = 8
tv1413 = -308						; size = 8
tv1244 = -300						; size = 8
tv1227 = -292						; size = 8
tv1225 = -284						; size = 4
tv1374 = -280						; size = 4
tv1220 = -276						; size = 4
tv1534 = -272						; size = 4
tv1206 = -268						; size = 4
tv1322 = -264						; size = 4
tv1101 = -260						; size = 4
tv1406 = -256						; size = 4
_targep$1 = -252					; size = 4
tv1339 = -248						; size = 4
tv1311 = -244						; size = 4
tv1539 = -240						; size = 4
tv1306 = -236						; size = 4
tv1411 = -232						; size = 4
tv1274 = -228						; size = 4
tv1379 = -224						; size = 4
tv1572 = -220						; size = 4
tv1344 = -216						; size = 4
tv1567 = -212						; size = 4
_numEntities$ = -208					; size = 4
tv1556 = -204						; size = 4
tv1237 = -200						; size = 4
tv1551 = -196						; size = 4
tv1279 = -192						; size = 4
tv1587 = -188						; size = 4
tv1242 = -184						; size = 4
tv1582 = -180						; size = 4
tv1327 = -176						; size = 4
_distance$2 = -172					; size = 4
_tgt$3 = -168						; size = 4
tv1341 = -164						; size = 2
tv1536 = -162						; size = 2
tv1324 = -160						; size = 2
tv1408 = -158						; size = 2
tv1308 = -156						; size = 2
tv1584 = -154						; size = 2
tv1276 = -152						; size = 2
tv1553 = -150						; size = 2
tv1222 = -148						; size = 2
tv1239 = -146						; size = 2
tv1569 = -144						; size = 2
tv1376 = -142						; size = 2
_dp$4 = -140						; size = 4
_i$ = -136						; size = 4
_tmp$5 = -132						; size = 4
_this$ = -128						; size = 4
_ep$ = -124						; size = 4
_rot$ = -120						; size = 36
_posb$6 = -84						; size = 12
_pos$ = -72						; size = 12
_wtpos$ = -60						; size = 12
_newPoint$ = -48					; size = 12
_tmpstr$7 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
?UpdateSimTapeEntities@ACMITape@@QAEXXZ PROC		; ACMITape::UpdateSimTapeEntities
; _this$ = ecx

; 3019 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3020 : 	int				
; 3021 : 		i,
; 3022 : 		numEntities;
; 3023 : 
; 3024 : 	SimTapeEntity *ep;
; 3025 : 
; 3026 : 	Tpoint pos;	
; 3027 : 	Tpoint wtpos;
; 3028 : 	Trotation rot;
; 3029 : 	Tpoint newPoint;
; 3030 : 
; 3031 : 
; 3032 : 
; 3033 : 
; 3034 : 	F4Assert(_simTapeEntities != NULL);
; 3035 : 
; 3036 : 	// create array of SimTapeEntity
; 3037 : 	numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 3038 : 	_renderer->SetColor (0xffff0000);

	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+128]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 3039 : 
; 3040 : 	// for each entity, create it's object stuff....
; 3041 : 	for(i = 0; i < numEntities; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN53@UpdateSimT
$LN52@UpdateSimT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN53@UpdateSimT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEntities$[ebp]
	jge	$LN51@UpdateSimT

; 3042 : 	{
; 3043 : 		// get pointer
; 3044 : 		ep = &_simTapeEntities[i];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _ep$[ebp], edx

; 3045 : 
; 3046 : 
; 3047 : 		if ( GetEntityPosition ( i, ep->x, ep->y, ep->z, ep->yaw, ep->pitch, ep->roll, ep->aveSpeed, ep->aveTurnRate, ep->aveTurnRadius  ) == FALSE )

	mov	ecx, DWORD PTR _ep$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntityPosition@ACMITape@@QAEHHAAM00000000@Z ; ACMITape::GetEntityPosition
	test	eax, eax
	jne	$LN50@UpdateSimT

; 3048 : 		{
; 3049 : 			// make sure we remove from draw list
; 3050 : 			if ( ep->objBase->drawPointer->InDisplayList() )

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	$LN45@UpdateSimT

; 3051 : 			{
; 3052 : 				_viewPoint->RemoveObject( ep->objBase->drawPointer );

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+332]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject

; 3053 : 				// remove trail too
; 3054 : 				if ( ep->objTrail && ep->objTrail->InDisplayList() && _simTime < ep->trailStartTime )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN48@UpdateSimT
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN48@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	comiss	xmm0, DWORD PTR [edx+108]
	jbe	SHORT $LN48@UpdateSimT

; 3055 : 				{
; 3056 : 					ep->objTrail->TrimTrail( 0 );

	push	0
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3057 : 					_viewPoint->RemoveObject( ep->objTrail );

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN48@UpdateSimT:

; 3058 : 				}
; 3059 : 				// remove Bsp1 too
; 3060 : 				if ( ep->objBsp1 && ep->objBsp1->InDisplayList() && _simTime < ep->trailStartTime )

	mov	ecx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN47@UpdateSimT
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN47@UpdateSimT
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	comiss	xmm0, DWORD PTR [ecx+108]
	jbe	SHORT $LN47@UpdateSimT

; 3061 : 				{
; 3062 : 					_viewPoint->RemoveObject( ep->objBsp1 );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN47@UpdateSimT:

; 3063 : 				}
; 3064 : 				// remove Bsp2 too
; 3065 : 				if ( ep->objBsp2 && ep->objBsp2->InDisplayList() && _simTime < ep->trailStartTime )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN46@UpdateSimT
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN46@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	comiss	xmm0, DWORD PTR [edx+108]
	jbe	SHORT $LN46@UpdateSimT

; 3066 : 				{
; 3067 : 					_viewPoint->RemoveObject( ep->objBsp2 );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN46@UpdateSimT:

; 3068 : 				}
; 3069 : 				// remove 2d too
; 3070 : 				if ( ep->obj2d && ep->obj2d->InDisplayList() )

	mov	eax, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN45@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN45@UpdateSimT

; 3071 : 				{
; 3072 : 					_viewPoint->RemoveObject( ep->obj2d );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN45@UpdateSimT:

; 3073 : 				}
; 3074 : 			}
; 3075 : 			continue;

	jmp	$LN52@UpdateSimT
$LN50@UpdateSimT:

; 3076 : 		}
; 3077 : 
; 3078 : 					
; 3079 : 		////////////////////////////////////////////////////////////////////////
; 3080 : 										
; 3081 : 		
; 3082 : 
; 3083 : 		////////////////////////////////////////////////////////////
; 3084 : 
; 3085 : 
; 3086 : 		// set the scalar value...// put check in if Isometric view
; 3087 : 		ep->objBase->drawPointer->SetScale(_tapeObjScale);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+212]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetScale@DrawableObject@@QAEXM@Z	; DrawableObject::SetScale

; 3088 : 
; 3089 : 		// if the entity is an aircraft we set its labels
; 3090 : 		if (ep->flags & ENTITY_FLAG_AIRCRAFT )

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 4
	je	$LN44@UpdateSimT

; 3091 : 		{
; 3092 : 			float tmp;
; 3093 : 			char tmpstr[32];
; 3094 : 
; 3095 : 			DrawablePoled *dp = (DrawablePoled *)ep->objBase->drawPointer;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+332]
	mov	DWORD PTR _dp$4[ebp], eax

; 3096 : 				
; 3097 : 			
; 3098 : 			// LOCK RANGES
; 3099 : 			// get the target entity
; 3100 : 			Tpoint posb;
; 3101 : 			int tgt = GetEntityCurrentTarget(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntityCurrentTarget@ACMITape@@QAEHH@Z ; ACMITape::GetEntityCurrentTarget
	mov	DWORD PTR _tgt$3[ebp], eax

; 3102 : 			float distance;
; 3103 : 			if (tgt >0)

	cmp	DWORD PTR _tgt$3[ebp], 0
	jle	$LN43@UpdateSimT

; 3104 : 			{
; 3105 : 			SimTapeEntity *targep = GetSimTapeEntity(tgt);

	mov	edx, DWORD PTR _tgt$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSimTapeEntity@ACMITape@@QAEPAUSimTapeEntity@@H@Z ; ACMITape::GetSimTapeEntity
	mov	DWORD PTR _targep$1[ebp], eax

; 3106 : 			ep->objBase->drawPointer->GetPosition(&pos);

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 3107 : 			targep->objBase->drawPointer->GetPosition(&posb);

	lea	eax, DWORD PTR _posb$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _targep$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 3108 : 			distance =  (float)(FT_TO_NM * (float)sqrt(((pos.x-posb.x)*(pos.x-posb.x) + (pos.y-posb.y)*(pos.y-posb.y))));

	movss	xmm0, DWORD PTR _pos$[ebp]
	subss	xmm0, DWORD PTR _posb$6[ebp]
	movss	xmm1, DWORD PTR _pos$[ebp]
	subss	xmm1, DWORD PTR _posb$6[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	subss	xmm1, DWORD PTR _posb$6[ebp+4]
	movss	xmm2, DWORD PTR _pos$[ebp+4]
	subss	xmm2, DWORD PTR _posb$6[ebp+4]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1101[ebp]
	movss	xmm0, DWORD PTR tv1101[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _distance$2[ebp], xmm0
	jmp	SHORT $LN42@UpdateSimT
$LN43@UpdateSimT:

; 3109 : 			}
; 3110 : 			else distance = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _distance$2[ebp], xmm0
$LN42@UpdateSimT:

; 3111 : 
; 3112 : 			tmp = distance;

	movss	xmm0, DWORD PTR _distance$2[ebp]
	movss	DWORD PTR _tmp$5[ebp], xmm0

; 3113 : 			sprintf(tmpstr,"%0.0f Rng",tmp);

	cvtss2sd xmm0, DWORD PTR _tmp$5[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09MJDCFFNJ@?$CF0?40f?5Rng?$AA@
	lea	eax, DWORD PTR _tmpstr$7[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 3114 : 			dp->SetDataLabel( DP_LABEL_LOCK_RANGE, tmpstr );

	lea	ecx, DWORD PTR _tmpstr$7[ebp]
	push	ecx
	push	5
	mov	ecx, DWORD PTR _dp$4[ebp]
	call	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z	; DrawablePoled::SetDataLabel

; 3115 : 				
; 3116 : 				
; 3117 : 
; 3118 : 				{
; 3119 : 			// heading
; 3120 : 			tmp = ep->yaw * RTD;

	mov	edx, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _tmp$5[ebp], xmm0

; 3121 : 			if ( tmp < 0.0f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tmp$5[ebp]
	jbe	SHORT $LN41@UpdateSimT

; 3122 : 				tmp += 360.0f;

	movss	xmm0, DWORD PTR _tmp$5[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _tmp$5[ebp], xmm0
$LN41@UpdateSimT:

; 3123 : 			sprintf(tmpstr,"%0.0f Deg",tmp);

	cvtss2sd xmm0, DWORD PTR _tmp$5[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09LABFLCHL@?$CF0?40f?5Deg?$AA@
	lea	eax, DWORD PTR _tmpstr$7[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 3124 : 			dp->SetDataLabel( DP_LABEL_HEADING, tmpstr );

	lea	ecx, DWORD PTR _tmpstr$7[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _dp$4[ebp]
	call	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z	; DrawablePoled::SetDataLabel

; 3125 : 				}
; 3126 : 			// alt
; 3127 : 			sprintf(tmpstr,"%0.0f ft", -ep->z);

	mov	edx, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08HOOMBMBP@?$CF0?40f?5ft?$AA@
	lea	eax, DWORD PTR _tmpstr$7[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 3128 : 			dp->SetDataLabel( DP_LABEL_ALT, tmpstr );

	lea	ecx, DWORD PTR _tmpstr$7[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _dp$4[ebp]
	call	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z	; DrawablePoled::SetDataLabel

; 3129 : 
; 3130 : 			// speed
; 3131 : 			// tmp=ep->aveSpeed * FTPSEC_TO_KNOTS;
; 3132 : 			tmp=CalcKIAS( ep->aveSpeed, -ep->z );

	mov	edx, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR [esp], xmm0
	call	?CalcKIAS@@YAMMM@Z			; CalcKIAS
	add	esp, 8
	fstp	DWORD PTR _tmp$5[ebp]

; 3133 : 			sprintf(tmpstr,"%0.0f Kts", tmp);

	cvtss2sd xmm0, DWORD PTR _tmp$5[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09NLDMLMDP@?$CF0?40f?5Kts?$AA@
	lea	ecx, DWORD PTR _tmpstr$7[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 3134 : 			dp->SetDataLabel( DP_LABEL_SPEED, tmpstr );

	lea	edx, DWORD PTR _tmpstr$7[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _dp$4[ebp]
	call	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z	; DrawablePoled::SetDataLabel

; 3135 : 
; 3136 : 			// turn rate
; 3137 : 			tmp=ep->aveTurnRate;

	mov	eax, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR _tmp$5[ebp], xmm0

; 3138 : 			sprintf(tmpstr,"%0.0f deg/s", tmp);

	cvtss2sd xmm0, DWORD PTR _tmp$5[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@NJALOMFG@?$CF0?40f?5deg?1s?$AA@
	lea	ecx, DWORD PTR _tmpstr$7[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 3139 : 			dp->SetDataLabel( DP_LABEL_TURNRATE, tmpstr );

	lea	edx, DWORD PTR _tmpstr$7[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _dp$4[ebp]
	call	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z	; DrawablePoled::SetDataLabel

; 3140 : 
; 3141 : 			// turn radius
; 3142 : 			tmp=ep->aveTurnRadius;

	mov	eax, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR _tmp$5[ebp], xmm0

; 3143 : 			sprintf(tmpstr,"%0.0f ft", tmp);

	cvtss2sd xmm0, DWORD PTR _tmp$5[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08HOOMBMBP@?$CF0?40f?5ft?$AA@
	lea	ecx, DWORD PTR _tmpstr$7[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 3144 : 			dp->SetDataLabel( DP_LABEL_TURNRADIUS, tmpstr );

	lea	edx, DWORD PTR _tmpstr$7[ebp]
	push	edx
	push	4
	mov	ecx, DWORD PTR _dp$4[ebp]
	call	?SetDataLabel@DrawablePoled@@QAEXKPAD@Z	; DrawablePoled::SetDataLabel
$LN44@UpdateSimT:

; 3145 : 		}
; 3146 : 
; 3147 : 
; 3148 : 		// update object's position
; 3149 : 		ep->objBase->SetPosition
; 3150 : 		(
; 3151 : 			ep->x,
; 3152 : 			ep->y,
; 3153 : 			ep->z
; 3154 : 		);

	mov	eax, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 3155 : 		ep->objBase->SetYPR
; 3156 : 		(
; 3157 : 			ep->yaw,
; 3158 : 			ep->pitch,
; 3159 : 			ep->roll
; 3160 : 		);

	mov	ecx, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 3161 : 		// just to make sure....
; 3162 : 		ep->objBase->SetYPRDelta
; 3163 : 		(
; 3164 : 			0.0f,
; 3165 : 			0.0f,
; 3166 : 			0.0f
; 3167 : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 3168 : 
; 3169 : 		// set the matrix
; 3170 : 		CalcTransformMatrix(ep->objBase);

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 3171 : 
; 3172 : 		// get position and matrix for drawable BSP
; 3173 : 		ObjectSetData( ep->objBase, &pos, &rot );

	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ObjectSetData@ACMITape@@QAEXPAVSimBaseClass@@PAUTpoint@@PAUTrotation@@@Z ; ACMITape::ObjectSetData

; 3174 : 
; 3175 : 		// update the BSP
; 3176 : 		if ( ep->flags & ENTITY_FLAG_FLARE )

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 16					; 00000010H
	je	SHORT $LN40@UpdateSimT

; 3177 : 			((Drawable2D *)ep->objBase->drawPointer)->SetPosition( &pos );

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetPosition@Drawable2D@@QAEXPAUTpoint@@@Z ; Drawable2D::SetPosition

; 3178 : 		else

	jmp	SHORT $LN39@UpdateSimT
$LN40@UpdateSimT:

; 3179 : 			((DrawableBSP *)ep->objBase->drawPointer)->Update( &pos, &rot );

	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	call	?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z ; DrawableBSP::Update
$LN39@UpdateSimT:

; 3180 : 
; 3181 : 		////////////////////////////////////////////////////////////////////////////////////
; 3182 : 
; 3183 : 		// BING 3-20-98
; 3184 : 		// TURN ON LABELS FOR ENTITIES.
; 3185 : 		//	acmiView->GetObjectName(acmiView->Tape()->GetSimTapeEntity(i)->objBase,tmpStr);
; 3186 : 	//		((DrawableBSP *)ep->objBase->drawPointer)->SetLabel(ep->name , labelColor );
; 3187 : 																																	
; 3188 : 		/////////////////////////////////////////////////////////////////////////////////////
; 3189 : 			
; 3190 : 			
; 3191 : 		// entity is in the frame .....
; 3192 : 		// make sure we tell draw loop to draw it
; 3193 : 		if ( !ep->objBase->drawPointer->InDisplayList() )

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN38@UpdateSimT

; 3194 : 		{
; 3195 : 			_viewPoint->InsertObject( ep->objBase->drawPointer );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN38@UpdateSimT:

; 3196 : 		}
; 3197 : 
; 3198 : 		// likewise for 2d portion
; 3199 : 		if ( ep->obj2d )

	mov	eax, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN37@UpdateSimT

; 3200 : 		{
; 3201 : 			if ( !ep->obj2d->InDisplayList() )

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN36@UpdateSimT

; 3202 : 				_viewPoint->InsertObject( ep->obj2d );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN36@UpdateSimT:

; 3203 : 
; 3204 : 			ep->obj2d->SetPosition( &pos );

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	?SetPosition@Drawable2D@@QAEXPAUTpoint@@@Z ; Drawable2D::SetPosition
$LN37@UpdateSimT:

; 3205 : 		}
; 3206 : 
; 3207 : 		// do the wing trails if turned on
; 3208 : 		// edg: partial hack.  For regen in dogfight the wingtrails are
; 3209 : 		// continue from dead pos to new position.  Since we don't have the
; 3210 : 		// info to detect a regen, if we see that the airspeed is too high
; 3211 : 		// trim the trails back to 0
; 3212 : 		if ( _wingTrails && (ep->flags & ENTITY_FLAG_AIRCRAFT ) && CalcKIAS( ep->aveSpeed, -ep->z ) > 1100.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+148], 0
	je	SHORT $LN35@UpdateSimT
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 4
	je	SHORT $LN35@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ep$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+36]
	movss	DWORD PTR [esp], xmm0
	call	?CalcKIAS@@YAMMM@Z			; CalcKIAS
	add	esp, 8
	fstp	DWORD PTR tv1206[ebp]
	movss	xmm0, DWORD PTR tv1206[ebp]
	comiss	xmm0, DWORD PTR __real@44898000
	jbe	SHORT $LN35@UpdateSimT

; 3213 : 		{
; 3214 : 			ep->wrTrail->TrimTrail( 0 );

	push	0
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3215 : 			ep->wlTrail->TrimTrail( 0 );

	push	0
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3216 : 			ep->wtLength = 0;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [edx+68], 0
	jmp	$LN23@UpdateSimT
$LN35@UpdateSimT:

; 3217 : 		}
; 3218 : 		else if ( _wingTrails && (ep->flags & ENTITY_FLAG_AIRCRAFT ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	$LN23@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 4
	je	$LN23@UpdateSimT

; 3219 : 		{
; 3220 : 			if ( _playVelocity < 0.0f && (!_paused || _simulateOnly) )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+96]
	jbe	$LN32@UpdateSimT
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN31@UpdateSimT
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+136], 0
	je	$LN32@UpdateSimT
$LN31@UpdateSimT:

; 3221 : 			{
; 3222 : 				ep->wtLength -= ep->wrTrail->RewindTrail( (DWORD)(_simTime * 1000) );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1220[ebp], xmm0
	fld	DWORD PTR tv1220[ebp]
	fnstcw	WORD PTR tv1222[ebp]
	movzx	eax, WORD PTR tv1222[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1225[ebp], eax
	fldcw	WORD PTR tv1225[ebp]
	fistp	QWORD PTR tv1227[ebp]
	fldcw	WORD PTR tv1222[ebp]
	mov	ecx, DWORD PTR tv1227[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	call	?RewindTrail@DrawableTrail@@QAEHK@Z	; DrawableTrail::RewindTrail
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, eax
	mov	eax, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [eax+68], edx

; 3223 : 				ep->wlTrail->RewindTrail( (DWORD)(_simTime * 1000) );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1237[ebp], xmm0
	fld	DWORD PTR tv1237[ebp]
	fnstcw	WORD PTR tv1239[ebp]
	movzx	eax, WORD PTR tv1239[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1242[ebp], eax
	fldcw	WORD PTR tv1242[ebp]
	fistp	QWORD PTR tv1244[ebp]
	fldcw	WORD PTR tv1239[ebp]
	mov	edx, DWORD PTR tv1244[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?RewindTrail@DrawableTrail@@QAEHK@Z	; DrawableTrail::RewindTrail
	jmp	$LN24@UpdateSimT
$LN32@UpdateSimT:

; 3224 : 			}
; 3225 : 			else if ( _playVelocity > 0.0f && (!_paused || _simulateOnly) )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+96]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN29@UpdateSimT
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 0
	je	SHORT $LN28@UpdateSimT
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	$LN29@UpdateSimT
$LN28@UpdateSimT:

; 3226 : 			{
; 3227 : 				ep->wtLength++;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	add	edx, 1
	mov	eax, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [eax+68], edx

; 3228 : 				wtpos.x = ep->objBase->dmx[1][0] * -20.0f * _tapeObjScale+ ep->x;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR __real@c1a00000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+212]
	mov	ecx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _wtpos$[ebp], xmm0

; 3229 : 				wtpos.y = ep->objBase->dmx[1][1] * -20.0f * _tapeObjScale+ ep->y;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@c1a00000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+212]
	mov	edx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR _wtpos$[ebp+4], xmm0

; 3230 : 				wtpos.z = ep->objBase->dmx[1][2] * -20.0f * _tapeObjScale+ ep->z;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@c1a00000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+212]
	mov	eax, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _wtpos$[ebp+8], xmm0

; 3231 : 				ep->wlTrail->AddPointAtHead( &wtpos, (DWORD)(_simTime * 1000) );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1274[ebp], xmm0
	fld	DWORD PTR tv1274[ebp]
	fnstcw	WORD PTR tv1276[ebp]
	movzx	eax, WORD PTR tv1276[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1279[ebp], eax
	fldcw	WORD PTR tv1279[ebp]
	fistp	QWORD PTR tv1281[ebp]
	fldcw	WORD PTR tv1276[ebp]
	mov	edx, DWORD PTR tv1281[ebp]
	push	edx
	lea	eax, DWORD PTR _wtpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z ; DrawableTrail::AddPointAtHead

; 3232 : 				wtpos.x = ep->objBase->dmx[1][0] * 20.0f * _tapeObjScale+ ep->x;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+212]
	mov	edx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _wtpos$[ebp], xmm0

; 3233 : 				wtpos.y = ep->objBase->dmx[1][1] * 20.0f * _tapeObjScale+ ep->y;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+212]
	mov	eax, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _wtpos$[ebp+4], xmm0

; 3234 : 				wtpos.z = ep->objBase->dmx[1][2] * 20.0f * _tapeObjScale+ ep->z;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+212]
	mov	ecx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _wtpos$[ebp+8], xmm0

; 3235 : 				ep->wrTrail->AddPointAtHead( &wtpos, (DWORD)(_simTime * 1000) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1306[ebp], xmm0
	fld	DWORD PTR tv1306[ebp]
	fnstcw	WORD PTR tv1308[ebp]
	movzx	eax, WORD PTR tv1308[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1311[ebp], eax
	fldcw	WORD PTR tv1311[ebp]
	fistp	QWORD PTR tv1313[ebp]
	fldcw	WORD PTR tv1308[ebp]
	mov	eax, DWORD PTR tv1313[ebp]
	push	eax
	lea	ecx, DWORD PTR _wtpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	call	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z ; DrawableTrail::AddPointAtHead
	jmp	$LN24@UpdateSimT
$LN29@UpdateSimT:

; 3236 : 
; 3237 : /*				ep->wtLength++;
; 3238 : 				wtpos.x = ep->objBase->dmx[1][0] * -40.0f + ep->x;
; 3239 : 				wtpos.y = ep->objBase->dmx[1][1] * -40.0f + ep->y;
; 3240 : 				wtpos.z = ep->objBase->dmx[1][2] * -40.0f + ep->z;
; 3241 : 				ep->wlTrail->AddPointAtHead( &wtpos, (DWORD)(_simTime * 1000) );
; 3242 : 				wtpos.x = ep->objBase->dmx[1][0] * 40.0f + ep->x;
; 3243 : 				wtpos.y = ep->objBase->dmx[1][1] * 40.0f + ep->y;
; 3244 : 				wtpos.z = ep->objBase->dmx[1][2] * 40.0f + ep->z;
; 3245 : 				ep->wrTrail->AddPointAtHead( &wtpos, (DWORD)(_simTime * 1000) );
; 3246 : */		
; 3247 : 			
; 3248 : 			
; 3249 : 			
; 3250 : 			}
; 3251 : 			else if ( _stepTrail < 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+112]
	jbe	$LN26@UpdateSimT

; 3252 : 			{
; 3253 : 				ep->wtLength -= ep->wrTrail->RewindTrail( (DWORD)(_simTime * 1000) );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1322[ebp], xmm0
	fld	DWORD PTR tv1322[ebp]
	fnstcw	WORD PTR tv1324[ebp]
	movzx	eax, WORD PTR tv1324[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1327[ebp], eax
	fldcw	WORD PTR tv1327[ebp]
	fistp	QWORD PTR tv1329[ebp]
	fldcw	WORD PTR tv1324[ebp]
	mov	edx, DWORD PTR tv1329[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?RewindTrail@DrawableTrail@@QAEHK@Z	; DrawableTrail::RewindTrail
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, eax
	mov	eax, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [eax+68], edx

; 3254 : 				ep->wlTrail->RewindTrail( (DWORD)(_simTime * 1000) );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1339[ebp], xmm0
	fld	DWORD PTR tv1339[ebp]
	fnstcw	WORD PTR tv1341[ebp]
	movzx	eax, WORD PTR tv1341[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1344[ebp], eax
	fldcw	WORD PTR tv1344[ebp]
	fistp	QWORD PTR tv1346[ebp]
	fldcw	WORD PTR tv1341[ebp]
	mov	edx, DWORD PTR tv1346[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?RewindTrail@DrawableTrail@@QAEHK@Z	; DrawableTrail::RewindTrail
	jmp	$LN24@UpdateSimT
$LN26@UpdateSimT:

; 3255 : 			}
; 3256 : 			else if ( _stepTrail > 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+112]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN24@UpdateSimT

; 3257 : 			{
; 3258 : 				ep->wtLength++;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+68]
	add	eax, 1
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 3259 : 				wtpos.x = ep->objBase->dmx[1][0] * -20.0f * _tapeObjScale+ ep->x;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@c1a00000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+212]
	mov	edx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR _wtpos$[ebp], xmm0

; 3260 : 				wtpos.y = ep->objBase->dmx[1][1] * -20.0f * _tapeObjScale+ ep->y;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@c1a00000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+212]
	mov	eax, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _wtpos$[ebp+4], xmm0

; 3261 : 				wtpos.z = ep->objBase->dmx[1][2] * -20.0f * _tapeObjScale+ ep->z;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR __real@c1a00000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+212]
	mov	ecx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _wtpos$[ebp+8], xmm0

; 3262 : 				ep->wlTrail->AddPointAtHead( &wtpos, (DWORD)(_simTime * 1000) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1374[ebp], xmm0
	fld	DWORD PTR tv1374[ebp]
	fnstcw	WORD PTR tv1376[ebp]
	movzx	eax, WORD PTR tv1376[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1379[ebp], eax
	fldcw	WORD PTR tv1379[ebp]
	fistp	QWORD PTR tv1381[ebp]
	fldcw	WORD PTR tv1376[ebp]
	mov	eax, DWORD PTR tv1381[ebp]
	push	eax
	lea	ecx, DWORD PTR _wtpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z ; DrawableTrail::AddPointAtHead

; 3263 : 				wtpos.x = ep->objBase->dmx[1][0] * 20.0f * _tapeObjScale+ ep->x;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+212]
	mov	eax, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _wtpos$[ebp], xmm0

; 3264 : 				wtpos.y = ep->objBase->dmx[1][1] * 20.0f * _tapeObjScale+ ep->y;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+212]
	mov	ecx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR _wtpos$[ebp+4], xmm0

; 3265 : 				wtpos.z = ep->objBase->dmx[1][2] * 20.0f * _tapeObjScale+ ep->z;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+212]
	mov	edx, DWORD PTR _ep$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _wtpos$[ebp+8], xmm0

; 3266 : 				ep->wrTrail->AddPointAtHead( &wtpos, (DWORD)(_simTime * 1000) );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1406[ebp], xmm0
	fld	DWORD PTR tv1406[ebp]
	fnstcw	WORD PTR tv1408[ebp]
	movzx	eax, WORD PTR tv1408[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1411[ebp], eax
	fldcw	WORD PTR tv1411[ebp]
	fistp	QWORD PTR tv1413[ebp]
	fldcw	WORD PTR tv1408[ebp]
	mov	ecx, DWORD PTR tv1413[ebp]
	push	ecx
	lea	edx, DWORD PTR _wtpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z ; DrawableTrail::AddPointAtHead
$LN24@UpdateSimT:

; 3267 : 
; 3268 : 			
; 3269 : 			}
; 3270 : 
; 3271 : 			if ( ep->wtLength != _wtMaxLength ) // MLR 12/14/2003 - 

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	cmp	eax, DWORD PTR [edx+152]
	je	SHORT $LN23@UpdateSimT

; 3272 : 			{
; 3273 : 				ep->wrTrail->TrimTrail( _wtMaxLength );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3274 : 				ep->wlTrail->TrimTrail( _wtMaxLength );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3275 : 				ep->wtLength = _wtMaxLength;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	DWORD PTR [ecx+68], eax
$LN23@UpdateSimT:

; 3276 : 			}
; 3277 : 		}
; 3278 : 
; 3279 : 		// check for trail
; 3280 : 		if ( !ep->objTrail )

	mov	ecx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN22@UpdateSimT

; 3281 : 			continue;

	jmp	$LN52@UpdateSimT
$LN22@UpdateSimT:

; 3282 : 
; 3283 : 		// we need to deal with the trail....
; 3284 : 
; 3285 : 		// if the trail end time is before the read head, we do nothing
; 3286 : 		if ( _simTime > ep->trailEndTime )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ep$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	comiss	xmm0, DWORD PTR [eax+52]
	jbe	SHORT $LN21@UpdateSimT

; 3287 : 		{
; 3288 : 			// remove Bsp1 too
; 3289 : 			if ( ep->objBsp1 && ep->objBsp1->InDisplayList() )

	mov	ecx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN20@UpdateSimT
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN20@UpdateSimT

; 3290 : 			{
; 3291 : 				_viewPoint->RemoveObject( ep->objBsp1 );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN20@UpdateSimT:

; 3292 : 			}
; 3293 : 			// remove Bsp2 too
; 3294 : 			if ( ep->objBsp2 && ep->objBsp2->InDisplayList() )

	mov	eax, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN19@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN19@UpdateSimT

; 3295 : 			{
; 3296 : 				_viewPoint->RemoveObject( ep->objBsp2 );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN19@UpdateSimT:

; 3297 : 			}
; 3298 : 			continue;

	jmp	$LN52@UpdateSimT
$LN21@UpdateSimT:

; 3299 : 		}
; 3300 : 
; 3301 : 		// if the trail start time is after the current read head,
; 3302 : 		// make sure trail is no longer in display list
; 3303 : 		if ( _simTime < ep->trailStartTime )

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	comiss	xmm0, DWORD PTR [eax+108]
	jbe	$LN18@UpdateSimT

; 3304 : 		{
; 3305 : 			if ( ep->objTrail->InDisplayList() )

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN17@UpdateSimT

; 3306 : 			{
; 3307 : 				ep->objTrail->TrimTrail( 0 );

	push	0
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?TrimTrail@DrawableTrail@@QAEXH@Z	; DrawableTrail::TrimTrail

; 3308 : 				_viewPoint->RemoveObject( ep->objTrail );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN17@UpdateSimT:

; 3309 : 			}
; 3310 : 			// remove Bsp1 too
; 3311 : 			if ( ep->objBsp1 && ep->objBsp1->InDisplayList() )

	mov	eax, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN16@UpdateSimT
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN16@UpdateSimT

; 3312 : 			{
; 3313 : 				_viewPoint->RemoveObject( ep->objBsp1 );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN16@UpdateSimT:

; 3314 : 			}
; 3315 : 			// remove Bsp2 too
; 3316 : 			if ( ep->objBsp2 && ep->objBsp2->InDisplayList() )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN15@UpdateSimT
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN15@UpdateSimT

; 3317 : 			{
; 3318 : 				_viewPoint->RemoveObject( ep->objBsp2 );

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN15@UpdateSimT:

; 3319 : 			}
; 3320 : 			continue;

	jmp	$LN52@UpdateSimT
$LN18@UpdateSimT:

; 3321 : 		}
; 3322 : 
; 3323 : 		// the read head is between trail start and end times
; 3324 : 		// we need need to determine if we're moving forwards or
; 3325 : 		// backwards in time, if back we rewind the trail, otherwise
; 3326 : 		// add a new point
; 3327 : 		if ( !ep->objTrail->InDisplayList() )

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN14@UpdateSimT

; 3328 : 		{
; 3329 : 			_viewPoint->InsertObject( ep->objTrail );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN14@UpdateSimT:

; 3330 : 		}
; 3331 : 		// insert Bsp1 too
; 3332 : 		if ( ep->objBsp1 && !ep->objBsp1->InDisplayList() )

	mov	edx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN13@UpdateSimT
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN13@UpdateSimT

; 3333 : 		{
; 3334 : 			_viewPoint->InsertObject( ep->objBsp1 );

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN13@UpdateSimT:

; 3335 : 		}
; 3336 : 		// insert Bsp2 too
; 3337 : 		if ( ep->objBsp2 && !ep->objBsp2->InDisplayList() )

	mov	ecx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN12@UpdateSimT
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN12@UpdateSimT

; 3338 : 		{
; 3339 : 			_viewPoint->InsertObject( ep->objBsp2 );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN12@UpdateSimT:

; 3340 : 		}
; 3341 : 
; 3342 : 		// update the BSPs
; 3343 : 	    // placement a bit behind the missile
; 3344 : 		newPoint = pos;

	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _newPoint$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR _newPoint$[ebp+4], ecx
	mov	edx, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR _newPoint$[ebp+8], edx

; 3345 :     	newPoint.x += ep->objBase->dmx[0][0]*-7.0f;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@c0e00000
	addss	xmm0, DWORD PTR _newPoint$[ebp]
	movss	DWORD PTR _newPoint$[ebp], xmm0

; 3346 :     	newPoint.y += ep->objBase->dmx[0][1]*-7.0f;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@c0e00000
	addss	xmm0, DWORD PTR _newPoint$[ebp+4]
	movss	DWORD PTR _newPoint$[ebp+4], xmm0

; 3347 :     	newPoint.z += ep->objBase->dmx[0][2]*-7.0f;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR __real@c0e00000
	addss	xmm0, DWORD PTR _newPoint$[ebp+8]
	movss	DWORD PTR _newPoint$[ebp+8], xmm0

; 3348 : 		if ( ep->objBsp1 )

	mov	eax, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN11@UpdateSimT

; 3349 : 			ep->objBsp1->Update( &newPoint, &rot  );

	lea	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _newPoint$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z ; DrawableBSP::Update
$LN11@UpdateSimT:

; 3350 : 		if ( ep->objBsp2 )

	mov	ecx, DWORD PTR _ep$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN10@UpdateSimT

; 3351 : 			ep->objBsp2->Update( &newPoint, &rot  );

	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	lea	eax, DWORD PTR _newPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?Update@DrawableBSP@@QAEXPBUTpoint@@PBUTrotation@@@Z ; DrawableBSP::Update
$LN10@UpdateSimT:

; 3352 :     	newPoint.x += ep->objBase->dmx[0][0]*-30.0f;

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@c1f00000
	addss	xmm0, DWORD PTR _newPoint$[ebp]
	movss	DWORD PTR _newPoint$[ebp], xmm0

; 3353 :     	newPoint.y += ep->objBase->dmx[0][1]*-30.0f;

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR __real@c1f00000
	addss	xmm0, DWORD PTR _newPoint$[ebp+4]
	movss	DWORD PTR _newPoint$[ebp+4], xmm0

; 3354 :     	newPoint.z += ep->objBase->dmx[0][2]*-30.0f;

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@c1f00000
	addss	xmm0, DWORD PTR _newPoint$[ebp+8]
	movss	DWORD PTR _newPoint$[ebp+8], xmm0

; 3355 : 
; 3356 : 					
; 3357 : 
; 3358 : 		if ( _playVelocity < 0.0f && (!_paused || _simulateOnly) )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+96]
	jbe	SHORT $LN9@UpdateSimT
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN8@UpdateSimT
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	je	SHORT $LN9@UpdateSimT
$LN8@UpdateSimT:

; 3359 : 		{
; 3360 : 			ep->objTrail->RewindTrail( (DWORD)(_simTime * 1000) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1534[ebp], xmm0
	fld	DWORD PTR tv1534[ebp]
	fnstcw	WORD PTR tv1536[ebp]
	movzx	eax, WORD PTR tv1536[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1539[ebp], eax
	fldcw	WORD PTR tv1539[ebp]
	fistp	QWORD PTR tv1541[ebp]
	fldcw	WORD PTR tv1536[ebp]
	mov	eax, DWORD PTR tv1541[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?RewindTrail@DrawableTrail@@QAEHK@Z	; DrawableTrail::RewindTrail
	jmp	$LN1@UpdateSimT
$LN9@UpdateSimT:

; 3361 : 		}
; 3362 : 		else if ( _playVelocity > 0.0f && (!_paused || _simulateOnly ) )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+96]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@UpdateSimT
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN5@UpdateSimT
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	je	SHORT $LN6@UpdateSimT
$LN5@UpdateSimT:

; 3363 : 		{
; 3364 : 			ep->objTrail->AddPointAtHead( &newPoint, (DWORD)(_simTime * 1000) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1551[ebp], xmm0
	fld	DWORD PTR tv1551[ebp]
	fnstcw	WORD PTR tv1553[ebp]
	movzx	eax, WORD PTR tv1553[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1556[ebp], eax
	fldcw	WORD PTR tv1556[ebp]
	fistp	QWORD PTR tv1558[ebp]
	fldcw	WORD PTR tv1553[ebp]
	mov	eax, DWORD PTR tv1558[ebp]
	push	eax
	lea	ecx, DWORD PTR _newPoint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z ; DrawableTrail::AddPointAtHead
	jmp	$LN1@UpdateSimT
$LN6@UpdateSimT:

; 3365 : 		}
; 3366 : 		else if ( _stepTrail < 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+112]
	jbe	SHORT $LN3@UpdateSimT

; 3367 : 		{
; 3368 : 			ep->objTrail->RewindTrail( (DWORD)(_simTime * 1000) );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1567[ebp], xmm0
	fld	DWORD PTR tv1567[ebp]
	fnstcw	WORD PTR tv1569[ebp]
	movzx	eax, WORD PTR tv1569[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1572[ebp], eax
	fldcw	WORD PTR tv1572[ebp]
	fistp	QWORD PTR tv1574[ebp]
	fldcw	WORD PTR tv1569[ebp]
	mov	edx, DWORD PTR tv1574[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?RewindTrail@DrawableTrail@@QAEHK@Z	; DrawableTrail::RewindTrail
	jmp	SHORT $LN1@UpdateSimT
$LN3@UpdateSimT:

; 3369 : 		}
; 3370 : 		else if ( _stepTrail > 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+112]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@UpdateSimT

; 3371 : 		{
; 3372 : 			ep->objTrail->AddPointAtHead( &newPoint, (DWORD)(_simTime * 1000) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1582[ebp], xmm0
	fld	DWORD PTR tv1582[ebp]
	fnstcw	WORD PTR tv1584[ebp]
	movzx	eax, WORD PTR tv1584[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1587[ebp], eax
	fldcw	WORD PTR tv1587[ebp]
	fistp	QWORD PTR tv1589[ebp]
	fldcw	WORD PTR tv1584[ebp]
	mov	eax, DWORD PTR tv1589[ebp]
	push	eax
	lea	ecx, DWORD PTR _newPoint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?AddPointAtHead@DrawableTrail@@QAEXPAUTpoint@@K@Z ; DrawableTrail::AddPointAtHead
$LN1@UpdateSimT:

; 3373 : 		}
; 3374 : 
; 3375 : 
; 3376 : 	}

	jmp	$LN52@UpdateSimT
$LN51@UpdateSimT:

; 3377 : 	_stepTrail = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+112], xmm0

; 3378 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateSimTapeEntities@ACMITape@@QAEXXZ ENDP		; ACMITape::UpdateSimTapeEntities
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_pos2$ = -12						; size = 4
_pos1$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetEntityCurrentTarget@ACMITape@@QAEHH@Z PROC		; ACMITape::GetEntityCurrentTarget
; _this$ = ecx

; 2948 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2949 : 	ACMIEntityPositionData
; 2950 : 		*pos1,
; 2951 : 		*pos2;
; 2952 : 
; 2953 : 	F4Assert(index >= 0 && index < NumEntities());
; 2954 : 
; 2955 : 	pos1 = CurrentEntityPositionHead(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityPositionHead
	mov	DWORD PTR _pos1$[ebp], eax

; 2956 : 
; 2957 : 	// If there is not at least 1 positional update, the entity doesn't exist.
; 2958 : 	F4Assert(pos1 != NULL);
; 2959 : 
; 2960 : 	if(pos1->time > _simTime)

	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx+108]
	jbe	SHORT $LN3@GetEntityC

; 2961 : 	{
; 2962 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN4@GetEntityC
$LN3@GetEntityC:

; 2963 : 	}
; 2964 : 
; 2965 : 	pos2 = HeadNext(pos1);

	mov	eax, DWORD PTR _pos1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _pos2$[ebp], eax

; 2966 : 	if(pos2 == NULL || pos2->time < _simTime )

	cmp	DWORD PTR _pos2$[ebp], 0
	je	SHORT $LN1@GetEntityC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos2$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN2@GetEntityC
$LN1@GetEntityC:

; 2967 : 	{
; 2968 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN4@GetEntityC
$LN2@GetEntityC:

; 2969 : 	}
; 2970 : 
; 2971 : 	return pos1->posData.radarTarget;

	mov	eax, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [eax+29]
$LN4@GetEntityC:

; 2972 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEntityCurrentTarget@ACMITape@@QAEHH@Z ENDP		; ACMITape::GetEntityCurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?RemoveEntityFromFrame@ACMITape@@QAEXH@Z PROC		; ACMITape::RemoveEntityFromFrame
; _this$ = ecx

; 3000 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3001 : 	F4Assert(_simTapeEntities != NULL);
; 3002 : 	F4Assert(index < NumEntities() );
; 3003 : 
; 3004 : 	if (!_simTapeEntities[index].objBase->drawPointer->InDisplayList() )

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [eax+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	jne	SHORT $LN1@RemoveEnti

; 3005 : 		return;

	jmp	SHORT $LN2@RemoveEnti
$LN1@RemoveEnti:

; 3006 : 
; 3007 : 	_viewPoint->RemoveObject( _simTapeEntities[index].objBase->drawPointer );

	mov	ecx, DWORD PTR _index$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?RemoveObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::RemoveObject
$LN2@RemoveEnti:

; 3008 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveEntityFromFrame@ACMITape@@QAEXH@Z ENDP		; ACMITape::RemoveEntityFromFrame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?InsertEntityInFrame@ACMITape@@QAEXH@Z PROC		; ACMITape::InsertEntityInFrame
; _this$ = ecx

; 2982 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2983 : 	F4Assert(_simTapeEntities != NULL);
; 2984 : 	F4Assert(index < NumEntities() );
; 2985 : 
; 2986 : 	if (_simTapeEntities[index].objBase->drawPointer->InDisplayList() )

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [eax+332]
	call	?InDisplayList@DrawableObject@@QAEHXZ	; DrawableObject::InDisplayList
	test	eax, eax
	je	SHORT $LN1@InsertEnti

; 2987 : 		return;

	jmp	SHORT $LN2@InsertEnti
$LN1@InsertEnti:

; 2988 : 
; 2989 : 	_viewPoint->InsertObject( _simTapeEntities[index].objBase->drawPointer );

	mov	ecx, DWORD PTR _index$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	call	?InsertObject@RViewPoint@@QAEXPAVDrawableObject@@@Z ; RViewPoint::InsertObject
$LN2@InsertEnti:

; 2990 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InsertEntityInFrame@ACMITape@@QAEXH@Z ENDP		; ACMITape::InsertEntityInFrame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_pos2$ = -12						; size = 4
_pos1$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsEntityInFrame@ACMITape@@QAEHH@Z PROC			; ACMITape::IsEntityInFrame
; _this$ = ecx

; 2913 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2914 : 	ACMIEntityPositionData
; 2915 : 		*pos1,
; 2916 : 		*pos2;
; 2917 : 
; 2918 : 	F4Assert(index >= 0 && index < NumEntities());
; 2919 : 
; 2920 : 	pos1 = CurrentEntityPositionHead(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityPositionHead
	mov	DWORD PTR _pos1$[ebp], eax

; 2921 : 
; 2922 : 	// If there is not at least 1 positional update, the entity doesn't exist.
; 2923 : 	F4Assert(pos1 != NULL);
; 2924 : 
; 2925 : 	if(pos1->time > _simTime)

	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx+108]
	jbe	SHORT $LN3@IsEntityIn

; 2926 : 	{
; 2927 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@IsEntityIn
$LN3@IsEntityIn:

; 2928 : 	}
; 2929 : 
; 2930 : 	pos2 = HeadNext(pos1);

	mov	eax, DWORD PTR _pos1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _pos2$[ebp], eax

; 2931 : 	if(pos2 == NULL || pos2->time < _simTime )

	cmp	DWORD PTR _pos2$[ebp], 0
	je	SHORT $LN1@IsEntityIn
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos2$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN2@IsEntityIn
$LN1@IsEntityIn:

; 2932 : 	{
; 2933 : 		return FALSE;		

	xor	eax, eax
	jmp	SHORT $LN4@IsEntityIn
$LN2@IsEntityIn:

; 2934 : 	}
; 2935 : 
; 2936 : 	return TRUE;

	mov	eax, 1
$LN4@IsEntityIn:

; 2937 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsEntityInFrame@ACMITape@@QAEHH@Z ENDP			; ACMITape::IsEntityInFrame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetSimTapeEntity@ACMITape@@QAEPAUSimTapeEntity@@H@Z PROC ; ACMITape::GetSimTapeEntity
; _this$ = ecx

; 2898 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2899 : 	F4Assert(_simTapeEntities != NULL);
; 2900 : 	F4Assert(index < NumEntities() );
; 2901 : 
; 2902 : 	return &_simTapeEntities[index];

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 2903 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSimTapeEntity@ACMITape@@QAEPAUSimTapeEntity@@H@Z ENDP ; ACMITape::GetSimTapeEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv90 = -12						; size = 4
tv82 = -8						; size = 4
_dAng$ = -4						; size = 4
_begAng$ = 8						; size = 4
_endAng$ = 12						; size = 4
_dT$ = 16						; size = 4
?AngleInterp@ACMITape@@QAEMMMM@Z PROC			; ACMITape::AngleInterp
; _this$ = ecx

; 2396 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2397 : 	float dAng;
; 2398 : 
; 2399 : 	// get the delta angle
; 2400 : 	dAng = endAng - begAng;

	movss	xmm0, DWORD PTR _endAng$[ebp]
	subss	xmm0, DWORD PTR _begAng$[ebp]
	movss	DWORD PTR _dAng$[ebp], xmm0

; 2401 : 
; 2402 : 	// always rotate in shortest direction (ie when delta > 180 deg in mag)
; 2403 : 	if ( fabs( dAng ) > 180.0f * DTR )

	push	ecx
	movss	xmm0, DWORD PTR _dAng$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv82[ebp]
	movss	xmm0, DWORD PTR tv82[ebp]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN3@AngleInter

; 2404 : 	{
; 2405 : 		if ( dAng >= 0.0f )

	movss	xmm0, DWORD PTR _dAng$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@AngleInter

; 2406 : 			endAng -= 360.0f * DTR;

	movss	xmm0, DWORD PTR _endAng$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _endAng$[ebp], xmm0

; 2407 : 		else

	jmp	SHORT $LN1@AngleInter
$LN2@AngleInter:

; 2408 : 			endAng += 360.0f * DTR;

	movss	xmm0, DWORD PTR _endAng$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _endAng$[ebp], xmm0
$LN1@AngleInter:

; 2409 : 
; 2410 : 		dAng = endAng - begAng;

	movss	xmm0, DWORD PTR _endAng$[ebp]
	subss	xmm0, DWORD PTR _begAng$[ebp]
	movss	DWORD PTR _dAng$[ebp], xmm0
$LN3@AngleInter:

; 2411 : 	}
; 2412 : 
; 2413 : 
; 2414 : 	/*
; 2415 : 	if ( endAng < -0.5f * PI && begAng > 0.5f * PI )
; 2416 : 		dAng = endAng + ( 2.0f * PI ) - begAng;
; 2417 : 	else if ( endAng > 0.5f * PI && begAng < -0.5f * PI )
; 2418 : 		dAng = endAng - ( 2.0f * PI ) - begAng;
; 2419 : 	else
; 2420 : 		dAng = endAng - begAng;
; 2421 : 	*/
; 2422 : 
; 2423 : 	return (float)(begAng + dAng * dT);

	movss	xmm0, DWORD PTR _dAng$[ebp]
	mulss	xmm0, DWORD PTR _dT$[ebp]
	addss	xmm0, DWORD PTR _begAng$[ebp]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]

; 2424 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AngleInterp@ACMITape@@QAEMMMM@Z ENDP			; ACMITape::AngleInterp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
tv180 = -28						; size = 8
_realTime$ = -20					; size = 4
tv177 = -16						; size = 4
_deltaRealTime$ = -12					; size = 4
_deltaLimit$ = -8					; size = 4
_this$ = -4						; size = 4
_newSimTime$ = 8					; size = 4
?Update@ACMITape@@QAEXM@Z PROC				; ACMITape::Update
; _this$ = ecx

; 1845 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1846 : 	float
; 1847 : 		realTime,
; 1848 : 		deltaRealTime;
; 1849 : 	float
; 1850 : 		deltaLimit;
; 1851 : 
; 1852 : 	if ( _screenCapturing )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN18@Update

; 1853 : 		deltaLimit = 0.0625f;

	movss	xmm0, DWORD PTR __real@3d800000
	movss	DWORD PTR _deltaLimit$[ebp], xmm0

; 1854 : 	else

	jmp	SHORT $LN17@Update
$LN18@Update:

; 1855 : 		deltaLimit = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _deltaLimit$[ebp], xmm0
$LN17@Update:

; 1856 : 
; 1857 : 	// Update active events
; 1858 : 	UpdateActiveEvents();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateActiveEvents@ACMITape@@AAEXXZ	; ACMITape::UpdateActiveEvents

; 1859 : 
; 1860 : 	// Calculate delta time and unpause us if necessary.
; 1861 : 	realTime = timeGetTime() * 0.001F;

	call	DWORD PTR __imp__timeGetTime@0
	mov	DWORD PTR tv177[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR tv177[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv180[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv180[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _realTime$[ebp], xmm0

; 1862 : 
; 1863 : 	// if new sim time is not negative, we are trying to
; 1864 : 	// reach a new play position that the user has set with the slider
; 1865 : 	// we'll be going in steps until _simTime = newSimTime
; 1866 : 	_simulateOnly = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 0

; 1867 : 	if ( newSimTime >= 0.0f )

	movss	xmm0, DWORD PTR _newSimTime$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN16@Update

; 1868 : 	{
; 1869 : 		_simulateOnly = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 1

; 1870 : 		deltaLimit = newSimTime - _simTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newSimTime$[ebp]
	subss	xmm0, DWORD PTR [ecx+108]
	movss	DWORD PTR _deltaLimit$[ebp], xmm0

; 1871 : 		deltaRealTime = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0

; 1872 : 		if ( deltaLimit > 0.0f )

	movss	xmm0, DWORD PTR _deltaLimit$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN15@Update

; 1873 : 		{
; 1874 : 			_playVelocity = 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+96], xmm0
	jmp	SHORT $LN12@Update
$LN15@Update:

; 1875 : 		}
; 1876 : 		else if ( deltaLimit < 0.0f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _deltaLimit$[ebp]
	jbe	SHORT $LN13@Update

; 1877 : 		{
; 1878 : 			_playVelocity = -1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+96], xmm0

; 1879 : 		}
; 1880 : 		else

	jmp	SHORT $LN12@Update
$LN13@Update:

; 1881 : 		{
; 1882 : 			_playVelocity = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+96], xmm0
$LN12@Update:

; 1883 : 		}
; 1884 : 		if ( deltaLimit < 0.0f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _deltaLimit$[ebp]
	jbe	SHORT $LN11@Update

; 1885 : 			deltaLimit = -deltaLimit;

	movss	xmm0, DWORD PTR _deltaLimit$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _deltaLimit$[ebp], xmm0
$LN11@Update:

; 1886 : 		
; 1887 : 		if ( deltaRealTime > deltaLimit )

	movss	xmm0, DWORD PTR _deltaRealTime$[ebp]
	comiss	xmm0, DWORD PTR _deltaLimit$[ebp]
	jbe	SHORT $LN10@Update

; 1888 : 			deltaRealTime = deltaLimit;

	movss	xmm0, DWORD PTR _deltaLimit$[ebp]
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0
$LN10@Update:

; 1889 : 
; 1890 : 	}

	jmp	$LN3@Update
$LN16@Update:

; 1891 : 	else if(_unpause && _paused)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+144], 0
	je	SHORT $LN8@Update
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN8@Update

; 1892 : 	{
; 1893 : 		deltaRealTime = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0

; 1894 : 		_paused = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0
	jmp	SHORT $LN3@Update
$LN8@Update:

; 1895 : 	}
; 1896 : 	else if(_paused)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 0
	je	SHORT $LN6@Update

; 1897 : 	{
; 1898 : 		deltaRealTime = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0

; 1899 : 	}
; 1900 : 	else

	jmp	SHORT $LN3@Update
$LN6@Update:

; 1901 : 	{
; 1902 : 		deltaRealTime = realTime - _lastRealTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _realTime$[ebp]
	subss	xmm0, DWORD PTR [eax+132]
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0

; 1903 : 
; 1904 : 		// for debugger stops, make sure delta never is larger
; 1905 : 		// than 1/5 second
; 1906 : 		if ( deltaRealTime < -deltaLimit )

	movss	xmm0, DWORD PTR _deltaLimit$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR _deltaRealTime$[ebp]
	jbe	SHORT $LN4@Update

; 1907 : 			deltaRealTime = -deltaLimit;

	movss	xmm0, DWORD PTR _deltaLimit$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0
$LN4@Update:

; 1908 : 		if ( deltaRealTime > deltaLimit )

	movss	xmm0, DWORD PTR _deltaRealTime$[ebp]
	comiss	xmm0, DWORD PTR _deltaLimit$[ebp]
	jbe	SHORT $LN3@Update

; 1909 : 			deltaRealTime = deltaLimit;

	movss	xmm0, DWORD PTR _deltaLimit$[ebp]
	movss	DWORD PTR _deltaRealTime$[ebp], xmm0
$LN3@Update:

; 1910 : 	}
; 1911 : 	_lastRealTime = realTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _realTime$[ebp]
	movss	DWORD PTR [ecx+132], xmm0

; 1912 : 	_unpause = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], 0

; 1913 : 
; 1914 : 	// Advance time.
; 1915 : 	_deltaSimTime = _playVelocity * deltaRealTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+96]
	mulss	xmm0, DWORD PTR _deltaRealTime$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+116], xmm0

; 1916 : 	_simTime += _deltaSimTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	addss	xmm0, DWORD PTR [eax+116]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+108], xmm0

; 1917 : 
; 1918 : 	// sanity check -- don't allow the head to go beyond tape ends
; 1919 : 	if ( _simTime < _tapeHdr.startTime )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+72]
	comiss	xmm0, DWORD PTR [eax+108]
	jbe	SHORT $LN2@Update

; 1920 : 		_simTime = _tapeHdr.startTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx+108], eax
$LN2@Update:

; 1921 : 	if ( _simTime > _tapeHdr.startTime + _tapeHdr.totPlayTime - 0.1f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+72]
	addss	xmm0, DWORD PTR [edx+76]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+108]
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@Update

; 1922 : 		_simTime = _tapeHdr.startTime + _tapeHdr.totPlayTime - 0.1f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+72]
	addss	xmm0, DWORD PTR [edx+76]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+108], xmm0
$LN1@Update:

; 1923 : 
; 1924 : 	_playVelocity += _playAcceleration * deltaRealTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR _deltaRealTime$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+96], xmm0

; 1925 : 	Clamp((float)(-_maxPlaySpeed), _playVelocity, (float)_maxPlaySpeed);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+104]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+96]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+104]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fstp	ST(0)
	add	esp, 12					; 0000000cH

; 1926 : 
; 1927 : 	// Advance all entity read heads.
; 1928 : 	AdvanceAllHeads();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceAllHeads@ACMITape@@AAEXXZ	; ACMITape::AdvanceAllHeads

; 1929 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Update@ACMITape@@QAEXM@Z ENDP				; ACMITape::Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HeadPosition@ACMITape@@QAEMXZ PROC			; ACMITape::HeadPosition
; _this$ = ecx

; 1836 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1837 : 	return _simTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+108]

; 1838 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HeadPosition@ACMITape@@QAEMXZ ENDP			; ACMITape::HeadPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_newSimTime$ = -8					; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetHeadPosition@ACMITape@@QAEXM@Z PROC			; ACMITape::SetHeadPosition
; _this$ = ecx

; 1805 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1806 : 	float newSimTime;
; 1807 : 
; 1808 : 	// t should be normalized from 0 to 1
; 1809 : 	newSimTime = _tapeHdr.startTime + (_tapeHdr.totPlayTime - 0.1f) * t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+72]
	movss	DWORD PTR _newSimTime$[ebp], xmm0
$LN2@SetHeadPos:

; 1810 : 
; 1811 : 	// run the update cycle until we've reached the new sim time
; 1812 : 	while( _simTime != newSimTime )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	ucomiss	xmm0, DWORD PTR _newSimTime$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetHeadPos

; 1813 : 		Update( newSimTime );

	push	ecx
	movss	xmm0, DWORD PTR _newSimTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@ACMITape@@QAEXM@Z		; ACMITape::Update
	jmp	SHORT $LN2@SetHeadPos
$LN1@SetHeadPos:

; 1814 : 
; 1815 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetHeadPosition@ACMITape@@QAEXM@Z ENDP			; ACMITape::SetHeadPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_newSimTime$ = -8					; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?GetNewSimTime@ACMITape@@QAEMM@Z PROC			; ACMITape::GetNewSimTime
; _this$ = ecx

; 1822 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1823 : 	float newSimTime;
; 1824 : 
; 1825 : 	// t should be normalized from 0 to 1
; 1826 : 	newSimTime = _tapeHdr.startTime + (_tapeHdr.totPlayTime - 0.1f) * t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+72]
	movss	DWORD PTR _newSimTime$[ebp], xmm0

; 1827 : 
; 1828 : 	return newSimTime;

	fld	DWORD PTR _newSimTime$[ebp]

; 1829 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNewSimTime@ACMITape@@QAEMM@Z ENDP			; ACMITape::GetNewSimTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?IsLoaded@ACMITape@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLoaded@ACMITape@@QAEHXZ PROC				; ACMITape::IsLoaded, COMDAT
; _this$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	if ( _tape == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+156], 0
	jne	SHORT $LN1@IsLoaded

; 42   : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN2@IsLoaded
$LN1@IsLoaded:

; 43   : 	return TRUE;

	mov	eax, 1
$LN2@IsLoaded:

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsLoaded@ACMITape@@QAEHXZ ENDP				; ACMITape::IsLoaded
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_forwardEventCallback$ = 8				; size = 4
_reverseEventCallback$ = 12				; size = 4
_userData$ = 16						; size = 4
?SetGeneralEventCallbacks@ACMITape@@QAEXP6AXPAV1@UEventIdData@@PAX2@Z32@Z PROC ; ACMITape::SetGeneralEventCallbacks
; _this$ = ecx

; 1794 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1795 : 	_generalEventCallbacks.forwardCallback = forwardEventCallback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _forwardEventCallback$[ebp]
	mov	DWORD PTR [eax+172], ecx

; 1796 : 	_generalEventCallbacks.reverseCallback = reverseEventCallback;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _reverseEventCallback$[ebp]
	mov	DWORD PTR [edx+176], eax

; 1797 : 	_generalEventCallbacks.userData = userData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _userData$[ebp]
	mov	DWORD PTR [ecx+180], edx

; 1798 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetGeneralEventCallbacks@ACMITape@@QAEXP6AXPAV1@UEventIdData@@PAX2@Z32@Z ENDP ; ACMITape::SetGeneralEventCallbacks
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_circum$1 = -72						; size = 4
_secs$2 = -68						; size = 4
tv466 = -64						; size = 4
tv495 = -60						; size = 4
tv440 = -56						; size = 4
tv427 = -52						; size = 4
_dz1$ = -48						; size = 4
_dy1$ = -44						; size = 4
_dx1$ = -40						; size = 4
_pos3$ = -36						; size = 4
_dz$ = -32						; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_dAng$3 = -20						; size = 4
_deltaTime$ = -16					; size = 4
_this$ = -12						; size = 4
_pos2$ = -8						; size = 4
_pos1$ = -4						; size = 4
_index$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_yaw$ = 24						; size = 4
_pitch$ = 28						; size = 4
_roll$ = 32						; size = 4
_speed$ = 36						; size = 4
_turnrate$ = 40						; size = 4
_turnradius$ = 44					; size = 4
?GetEntityPosition@ACMITape@@QAEHHAAM00000000@Z PROC	; ACMITape::GetEntityPosition
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 1657 : 	float
; 1658 : 		deltaTime;
; 1659 : 
; 1660 : 	float dx, dy, dz;
; 1661 : 	float dx1, dy1, dz1;
; 1662 : 
; 1663 : 	ACMIEntityPositionData
; 1664 : 		*pos1,
; 1665 : 		*pos2,
; 1666 : 		*pos3;
; 1667 : 
; 1668 : 	// init speed to 0.0
; 1669 : 	speed = 0.0f;

	mov	eax, DWORD PTR _speed$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1670 : 	turnrate = 0.0f;

	mov	ecx, DWORD PTR _turnrate$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0

; 1671 : 	turnradius = 0.0f;

	mov	edx, DWORD PTR _turnradius$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 1672 : 
; 1673 : 	F4Assert(index >= 0 && index < NumEntities());
; 1674 : 
; 1675 : 	pos1 = CurrentEntityPositionHead(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CurrentEntityPositionHead@ACMITape@@AAEPAUACMIEntityPositionData@@H@Z ; ACMITape::CurrentEntityPositionHead
	mov	DWORD PTR _pos1$[ebp], eax

; 1676 : 
; 1677 : 	// If there is not at least 1 positional update, the entity doesn't exist.
; 1678 : 	F4Assert(pos1 != NULL);
; 1679 : 
; 1680 : 	if(pos1->time > _simTime)

	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx+108]
	jbe	SHORT $LN9@GetEntityP

; 1681 : 	{
; 1682 : 		x = pos1->posData.x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	DWORD PTR [eax], edx

; 1683 : 		y = pos1->posData.y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR [ecx+9]
	mov	DWORD PTR [eax], edx

; 1684 : 		z = pos1->posData.z;

	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR [ecx+13]
	mov	DWORD PTR [eax], edx

; 1685 : 		yaw = pos1->posData.yaw;

	mov	eax, DWORD PTR _yaw$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR [ecx+25]
	mov	DWORD PTR [eax], edx

; 1686 : 		pitch = pos1->posData.pitch;

	mov	eax, DWORD PTR _pitch$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR [ecx+17]
	mov	DWORD PTR [eax], edx

; 1687 : 		roll = pos1->posData.roll;

	mov	eax, DWORD PTR _roll$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR [eax], edx

; 1688 : 		return FALSE;

	xor	eax, eax
	jmp	$LN10@GetEntityP
$LN9@GetEntityP:

; 1689 : 	}
; 1690 : 
; 1691 : 	pos2 = HeadNext(pos1);

	mov	eax, DWORD PTR _pos1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNext@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadNext
	mov	DWORD PTR _pos2$[ebp], eax

; 1692 : 	if(pos2 == NULL)

	cmp	DWORD PTR _pos2$[ebp], 0
	jne	SHORT $LN8@GetEntityP

; 1693 : 	{
; 1694 : 		x = pos1->posData.x;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	DWORD PTR [ecx], eax

; 1695 : 		y = pos1->posData.y;

	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [edx+9]
	mov	DWORD PTR [ecx], eax

; 1696 : 		z = pos1->posData.z;

	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [edx+13]
	mov	DWORD PTR [ecx], eax

; 1697 : 		yaw = pos1->posData.yaw;

	mov	ecx, DWORD PTR _yaw$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [edx+25]
	mov	DWORD PTR [ecx], eax

; 1698 : 		pitch = pos1->posData.pitch;

	mov	ecx, DWORD PTR _pitch$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [edx+17]
	mov	DWORD PTR [ecx], eax

; 1699 : 		roll = pos1->posData.roll;

	mov	ecx, DWORD PTR _roll$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR [edx+21]
	mov	DWORD PTR [ecx], eax

; 1700 : 		return FALSE;		

	xor	eax, eax
	jmp	$LN10@GetEntityP

; 1701 : 	}
; 1702 : 	else

	jmp	$LN1@GetEntityP
$LN8@GetEntityP:

; 1703 : 	{
; 1704 :    	pos3 = HeadPrev(pos1);

	mov	ecx, DWORD PTR _pos1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadPrev@ACMITape@@AAEPAUACMIEntityPositionData@@PAU2@@Z ; ACMITape::HeadPrev
	mov	DWORD PTR _pos3$[ebp], eax

; 1705 : 		F4Assert(pos1->time <= _simTime);
; 1706 : 		F4Assert(pos2->time > _simTime);
; 1707 : 
; 1708 : 		dx = pos2->posData.x - pos1->posData.x;

	mov	edx, DWORD PTR _pos2$[ebp]
	mov	eax, DWORD PTR _pos1$[ebp]
	movss	xmm0, DWORD PTR [edx+5]
	subss	xmm0, DWORD PTR [eax+5]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1709 : 		dy = pos2->posData.y - pos1->posData.y;

	mov	ecx, DWORD PTR _pos2$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	movss	xmm0, DWORD PTR [ecx+9]
	subss	xmm0, DWORD PTR [edx+9]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1710 : 		dz = pos2->posData.z - pos1->posData.z;

	mov	eax, DWORD PTR _pos2$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	movss	xmm0, DWORD PTR [eax+13]
	subss	xmm0, DWORD PTR [ecx+13]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1711 : 
; 1712 : 		// Interpolate.
; 1713 : 		deltaTime = 
; 1714 : 		(
; 1715 : 			(_simTime - pos1->time) /
; 1716 : 			(pos2->time - pos1->time)
; 1717 : 		);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pos1$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	subss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pos2$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, DWORD PTR [edx]
	divss	xmm0, xmm1
	movss	DWORD PTR _deltaTime$[ebp], xmm0

; 1718 : 
; 1719 : 		x = 
; 1720 : 		(
; 1721 : 			pos1->posData.x + dx * deltaTime
; 1722 : 		);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _deltaTime$[ebp]
	mov	eax, DWORD PTR _pos1$[ebp]
	addss	xmm0, DWORD PTR [eax+5]
	mov	ecx, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1723 : 
; 1724 : 		y = 
; 1725 : 		(
; 1726 : 			pos1->posData.y + dy * deltaTime
; 1727 : 		);

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _deltaTime$[ebp]
	mov	edx, DWORD PTR _pos1$[ebp]
	addss	xmm0, DWORD PTR [edx+9]
	mov	eax, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1728 : 
; 1729 : 		z = 
; 1730 : 		(
; 1731 : 			pos1->posData.z + dz * deltaTime
; 1732 : 		);

	movss	xmm0, DWORD PTR _dz$[ebp]
	mulss	xmm0, DWORD PTR _deltaTime$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	addss	xmm0, DWORD PTR [ecx+13]
	mov	edx, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1733 : 
; 1734 : 		yaw = AngleInterp( pos1->posData.yaw, pos2->posData.yaw, deltaTime );

	push	ecx
	movss	xmm0, DWORD PTR _deltaTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+25]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+25]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AngleInterp@ACMITape@@QAEMMMM@Z	; ACMITape::AngleInterp
	mov	edx, DWORD PTR _yaw$[ebp]
	fstp	DWORD PTR [edx]

; 1735 : 		pitch = AngleInterp( pos1->posData.pitch, pos2->posData.pitch, deltaTime );

	push	ecx
	movss	xmm0, DWORD PTR _deltaTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+17]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+17]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AngleInterp@ACMITape@@QAEMMMM@Z	; ACMITape::AngleInterp
	mov	edx, DWORD PTR _pitch$[ebp]
	fstp	DWORD PTR [edx]

; 1736 : 		roll = AngleInterp( pos1->posData.roll, pos2->posData.roll, deltaTime );

	push	ecx
	movss	xmm0, DWORD PTR _deltaTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+21]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+21]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AngleInterp@ACMITape@@QAEMMMM@Z	; ACMITape::AngleInterp
	mov	edx, DWORD PTR _roll$[ebp]
	fstp	DWORD PTR [edx]

; 1737 : 
; 1738 : 		// get the average speed
; 1739 : 		speed = (float)sqrt( dx * dx + dy * dy + dz * dz ) / ( pos2->time - pos1->time );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv427[ebp]
	movss	xmm0, DWORD PTR tv427[ebp]
	mov	eax, DWORD PTR _pos2$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	movss	xmm1, DWORD PTR [eax]
	subss	xmm1, DWORD PTR [ecx]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1740 : 		float dAng = pos2->posData.yaw - pos1->posData.yaw;

	mov	eax, DWORD PTR _pos2$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	movss	xmm0, DWORD PTR [eax+25]
	subss	xmm0, DWORD PTR [ecx+25]
	movss	DWORD PTR _dAng$3[ebp], xmm0

; 1741 : 		if ( fabs( dAng ) > 180.0f * DTR )

	push	ecx
	movss	xmm0, DWORD PTR _dAng$3[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv440[ebp]
	movss	xmm0, DWORD PTR tv440[ebp]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN4@GetEntityP

; 1742 : 		{
; 1743 : 			if ( dAng >= 0.0f )

	movss	xmm0, DWORD PTR _dAng$3[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN5@GetEntityP

; 1744 : 				dAng -= 360.0f * DTR;

	movss	xmm0, DWORD PTR _dAng$3[ebp]
	subss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _dAng$3[ebp], xmm0

; 1745 : 			else

	jmp	SHORT $LN4@GetEntityP
$LN5@GetEntityP:

; 1746 : 				dAng += 360.0f * DTR;

	movss	xmm0, DWORD PTR _dAng$3[ebp]
	addss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _dAng$3[ebp], xmm0
$LN4@GetEntityP:

; 1747 : 
; 1748 : 		}
; 1749 : 
; 1750 :       if (pos3)

	cmp	DWORD PTR _pos3$[ebp], 0
	je	$LN3@GetEntityP

; 1751 :       {
; 1752 : 		   dx1 = pos1->posData.x - pos3->posData.x;

	mov	edx, DWORD PTR _pos1$[ebp]
	mov	eax, DWORD PTR _pos3$[ebp]
	movss	xmm0, DWORD PTR [edx+5]
	subss	xmm0, DWORD PTR [eax+5]
	movss	DWORD PTR _dx1$[ebp], xmm0

; 1753 : 		   dy1 = pos1->posData.y - pos3->posData.y;

	mov	ecx, DWORD PTR _pos1$[ebp]
	mov	edx, DWORD PTR _pos3$[ebp]
	movss	xmm0, DWORD PTR [ecx+9]
	subss	xmm0, DWORD PTR [edx+9]
	movss	DWORD PTR _dy1$[ebp], xmm0

; 1754 : 		   dz1 = pos1->posData.z - pos3->posData.z;

	mov	eax, DWORD PTR _pos1$[ebp]
	mov	ecx, DWORD PTR _pos3$[ebp]
	movss	xmm0, DWORD PTR [eax+13]
	subss	xmm0, DWORD PTR [ecx+13]
	movss	DWORD PTR _dz1$[ebp], xmm0

; 1755 : 
; 1756 :          // Turn rate = solid angle delta between velocity vectors
; 1757 :          turnrate = (float)acos ((dx*dx1 + dy*dy1 + dz*dz1)/
; 1758 :             (float)sqrt((dx*dx + dy*dy + dz*dz) * (dx1*dx1 + dy1*dy1 + dz1*dz1)));

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx1$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy1$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz1$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	movss	xmm2, DWORD PTR _dy$[ebp]
	mulss	xmm2, DWORD PTR _dy$[ebp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR _dz$[ebp]
	mulss	xmm2, DWORD PTR _dz$[ebp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR _dx1$[ebp]
	mulss	xmm2, DWORD PTR _dx1$[ebp]
	movss	xmm3, DWORD PTR _dy1$[ebp]
	mulss	xmm3, DWORD PTR _dy1$[ebp]
	addss	xmm2, xmm3
	movss	xmm3, DWORD PTR _dz1$[ebp]
	mulss	xmm3, DWORD PTR _dz1$[ebp]
	addss	xmm2, xmm3
	mulss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv495[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv466[ebp]
	movss	xmm0, DWORD PTR tv495[ebp]
	divss	xmm0, DWORD PTR tv466[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	mov	edx, DWORD PTR _turnrate$[ebp]
	fstp	DWORD PTR [edx]

; 1759 :          turnrate *= RTD / ( pos2->time - pos1->time );

	mov	eax, DWORD PTR _pos2$[ebp]
	mov	ecx, DWORD PTR _pos1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR __real@42652ee1
	divss	xmm1, xmm0
	mov	edx, DWORD PTR _turnrate$[ebp]
	mulss	xmm1, DWORD PTR [edx]
	mov	eax, DWORD PTR _turnrate$[ebp]
	movss	DWORD PTR [eax], xmm1

; 1760 : //		   turnrate = RTD * fabs( dAng ) / ( pos2->time - pos1->time );
; 1761 : 
; 1762 : 		   if ( turnrate != 0.0f )

	mov	ecx, DWORD PTR _turnrate$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@GetEntityP

; 1763 : 		   {
; 1764 : 			   // sec to turn 360 deg
; 1765 : 			   float secs = 360.0f/turnrate;

	mov	edx, DWORD PTR _turnrate$[ebp]
	movss	xmm0, DWORD PTR __real@43b40000
	divss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _secs$2[ebp], xmm0

; 1766 : 
; 1767 : 			   // get circumference
; 1768 : 			   float circum = speed * secs;

	mov	eax, DWORD PTR _speed$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _secs$2[ebp]
	movss	DWORD PTR _circum$1[ebp], xmm0

; 1769 : 
; 1770 : 			   // now we get turn radius ( circum = 2 * PI * R )
; 1771 : 			   turnradius = circum/( 2.0f * PI );

	movss	xmm0, DWORD PTR _circum$1[ebp]
	divss	xmm0, DWORD PTR __real@40c90fdb
	mov	ecx, DWORD PTR _turnradius$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN2@GetEntityP:

; 1772 : 		   }
; 1773 :       }
; 1774 :       else

	jmp	SHORT $LN1@GetEntityP
$LN3@GetEntityP:

; 1775 :       {
; 1776 :          turnrate = 0.0F;

	mov	edx, DWORD PTR _turnrate$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 1777 :          turnradius = 0.0F;

	mov	eax, DWORD PTR _turnradius$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
$LN1@GetEntityP:

; 1778 :       }
; 1779 : 	}
; 1780 : 
; 1781 : 	return TRUE;

	mov	eax, 1
$LN10@GetEntityP:

; 1782 : }

	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?GetEntityPosition@ACMITape@@QAEHHAAM00000000@Z ENDP	; ACMITape::GetEntityPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?EntityType@ACMITape@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?EntityType@ACMITape@@QAEHH@Z PROC			; ACMITape::EntityType, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	return (int)(EntityData(index)->type);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z ; ACMITape::EntityData
	mov	eax, DWORD PTR [eax+4]

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EntityType@ACMITape@@QAEHH@Z ENDP			; ACMITape::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmtpinl.cpp
;	COMDAT ?NumEntities@ACMITape@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumEntities@ACMITape@@QAEHXZ PROC			; ACMITape::NumEntities, COMDAT
; _this$ = ecx

; 10   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 11   : 	// F4Assert(_tape != NULL);
; 12   : 
; 13   : 	return _tapeHdr.numEntities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 14   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NumEntities@ACMITape@@QAEHXZ ENDP			; ACMITape::NumEntities
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_fePtr$ = -48						; size = 4
$T1 = -44						; size = 4
_eventPtr$ = -40					; size = 4
_eventListPtr$ = -36					; size = 4
_j$ = -32						; size = 4
_entityPtr$ = -28					; size = 4
_posPtr$ = -24						; size = 4
_posListPtr$ = -20					; size = 4
_entityListPtr$ = -16					; size = 4
_tapeFile$ = -12					; size = 4
_ret$ = -8						; size = 4
_i$ = -4						; size = 4
_fname$ = 8						; size = 4
_tapeHdr$ = 12						; size = 4
?WriteTapeFile@ACMITape@@SAXPADPAUACMITapeHeader@@@Z PROC ; ACMITape::WriteTapeFile

; 1464 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 1465 : 	int i,j;
; 1466 : 	LIST *entityListPtr, *posListPtr, *eventListPtr;
; 1467 : 	ACMIEntityData *entityPtr;
; 1468 : 	ACMIEventHeader *eventPtr;
; 1469 : 	ACMIRawPositionData *posPtr;
; 1470 : 	ACMIFeatEventImportData *fePtr;
; 1471 : 	FILE *tapeFile;
; 1472 : 	long ret;
; 1473 : 
; 1474 : 	tapeFile = fopen(fname, "wb");

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	mov	eax, DWORD PTR _fname$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _tapeFile$[ebp], eax

; 1475 : 	if (tapeFile == NULL)

	cmp	DWORD PTR _tapeFile$[ebp], 0
	jne	SHORT $LN45@WriteTapeF

; 1476 : 	{
; 1477 : 		MonoPrint("Error opening new tape file\n");

	push	OFFSET ??_C@_0BN@POLMAADA@Error?5opening?5new?5tape?5file?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 1478 : 		return;

	jmp	$LN46@WriteTapeF
$LN45@WriteTapeF:

; 1479 : 	}
; 1480 : 
; 1481 : 	// write the header
; 1482 : 	ret = fwrite( tapeHdr, sizeof( ACMITapeHeader ), 1, tapeFile );

	mov	ecx, DWORD PTR _tapeFile$[ebp]
	push	ecx
	push	1
	push	80					; 00000050H
	mov	edx, DWORD PTR _tapeHdr$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1483 : 	if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN44@WriteTapeF

; 1484 : 	 	goto error_exit;

	jmp	$LN43@WriteTapeF
	jmp	$error_exit$48
$LN44@WriteTapeF:

; 1485 : 
; 1486 : 
; 1487 : 	// write out the entities
; 1488 : 	entityListPtr = importEntityList;

	mov	eax, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1489 : 	for ( i = 0; i < importNumEnt; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN42@WriteTapeF
$LN41@WriteTapeF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN42@WriteTapeF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jge	SHORT $LN40@WriteTapeF

; 1490 : 	{
; 1491 : 		// entityListPtr = LIST_NTH(importEntityList, i);
; 1492 : 		entityPtr = (ACMIEntityData *)entityListPtr->node;

	mov	eax, DWORD PTR _entityListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1493 : 
; 1494 : 		ret = fwrite( entityPtr, sizeof( ACMIEntityData ), 1, tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	push	1
	push	36					; 00000024H
	mov	eax, DWORD PTR _entityPtr$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1495 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN39@WriteTapeF

; 1496 : 	 		goto error_exit;

	jmp	$LN38@WriteTapeF
	jmp	$error_exit$48
$LN39@WriteTapeF:

; 1497 : 		entityListPtr = entityListPtr->next;

	mov	ecx, DWORD PTR _entityListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _entityListPtr$[ebp], edx

; 1498 : 	} // end for entity loop

	jmp	SHORT $LN41@WriteTapeF
$LN40@WriteTapeF:

; 1499 : 
; 1500 : 	// write out the features
; 1501 : 	entityListPtr = importFeatList;

	mov	eax, DWORD PTR ?importFeatList@@3PAULIST@@A ; importFeatList
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1502 : 	for ( i = 0; i < importNumFeat; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN37@WriteTapeF
$LN36@WriteTapeF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN37@WriteTapeF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	jge	SHORT $LN35@WriteTapeF

; 1503 : 	{
; 1504 : 		// entityListPtr = LIST_NTH(importEntityList, i);
; 1505 : 		entityPtr = (ACMIEntityData *)entityListPtr->node;

	mov	eax, DWORD PTR _entityListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1506 : 
; 1507 : 		ret = fwrite( entityPtr, sizeof( ACMIEntityData ), 1, tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	push	1
	push	36					; 00000024H
	mov	eax, DWORD PTR _entityPtr$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1508 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN34@WriteTapeF

; 1509 : 	 		goto error_exit;

	jmp	$LN33@WriteTapeF
	jmp	$error_exit$48
$LN34@WriteTapeF:

; 1510 : 		entityListPtr = entityListPtr->next;

	mov	ecx, DWORD PTR _entityListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _entityListPtr$[ebp], edx

; 1511 : 	} // end for entity loop

	jmp	SHORT $LN36@WriteTapeF
$LN35@WriteTapeF:

; 1512 : 
; 1513 : 	// write out the entitiy positions
; 1514 : 	posListPtr = importPosList;

	mov	eax, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1515 : 	for ( i = 0; i < importNumPos; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN32@WriteTapeF
$LN31@WriteTapeF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN32@WriteTapeF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumPos@@3HA	; importNumPos
	jge	$LN30@WriteTapeF

; 1516 : 	{
; 1517 : 		// posListPtr = LIST_NTH(importPosList, i);
; 1518 : 		posPtr = (ACMIRawPositionData *)posListPtr->node;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _posPtr$[ebp], ecx

; 1519 : 
; 1520 : 		// we now want to do a "fixup" of the radar targets.  These are
; 1521 : 		// currently in "uniqueIDs" and we want to convert them into
; 1522 : 		// an index into the entity list
; 1523 : 		if ( posPtr->entityPosData.posData.radarTarget != -1 )

	mov	edx, DWORD PTR _posPtr$[ebp]
	cmp	DWORD PTR [edx+53], -1
	je	SHORT $LN24@WriteTapeF

; 1524 : 		{
; 1525 : 			entityListPtr = importEntityList;

	mov	eax, DWORD PTR ?importEntityList@@3PAULIST@@A ; importEntityList
	mov	DWORD PTR _entityListPtr$[ebp], eax

; 1526 : 			for ( j = 0; j < importNumEnt; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN28@WriteTapeF
$LN27@WriteTapeF:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN28@WriteTapeF:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jge	SHORT $LN26@WriteTapeF

; 1527 : 			{
; 1528 : 				entityPtr = (ACMIEntityData *)entityListPtr->node;

	mov	eax, DWORD PTR _entityListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entityPtr$[ebp], ecx

; 1529 : 
; 1530 : 				if ( posPtr->entityPosData.posData.radarTarget == entityPtr->uniqueID )

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	eax, DWORD PTR _entityPtr$[ebp]
	mov	ecx, DWORD PTR [edx+53]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN25@WriteTapeF

; 1531 : 				{
; 1532 : 					posPtr->entityPosData.posData.radarTarget = j;

	mov	edx, DWORD PTR _posPtr$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR [edx+53], eax

; 1533 : 					break;

	jmp	SHORT $LN26@WriteTapeF
$LN25@WriteTapeF:

; 1534 : 				}
; 1535 : 
; 1536 : 				entityListPtr = entityListPtr->next;

	mov	ecx, DWORD PTR _entityListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _entityListPtr$[ebp], edx

; 1537 : 			} // end for entity loop

	jmp	SHORT $LN27@WriteTapeF
$LN26@WriteTapeF:

; 1538 : 
; 1539 : 			// did we find it?
; 1540 : 			if ( j == importNumEnt )

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	jne	SHORT $LN24@WriteTapeF

; 1541 : 			{
; 1542 : 				// nope
; 1543 : 				posPtr->entityPosData.posData.radarTarget = -1;

	mov	ecx, DWORD PTR _posPtr$[ebp]
	mov	DWORD PTR [ecx+53], -1
$LN24@WriteTapeF:

; 1544 : 			}
; 1545 : 		} // end if there's a radar target
; 1546 : 
; 1547 : 		ret = fwrite( &posPtr->entityPosData, sizeof( ACMIEntityPositionData ), 1, tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	push	1
	push	41					; 00000029H
	mov	eax, DWORD PTR _posPtr$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1548 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN23@WriteTapeF

; 1549 : 	 		goto error_exit;

	jmp	$LN22@WriteTapeF
	jmp	$error_exit$48
$LN23@WriteTapeF:

; 1550 : 
; 1551 : 		posListPtr = posListPtr->next;

	mov	ecx, DWORD PTR _posListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _posListPtr$[ebp], edx

; 1552 : 	}

	jmp	$LN31@WriteTapeF
$LN30@WriteTapeF:

; 1553 : 
; 1554 : 	// write out the entitiy events
; 1555 : 	posListPtr = importEntEventList;

	mov	eax, DWORD PTR ?importEntEventList@@3PAULIST@@A ; importEntEventList
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1556 : 	for ( i = 0; i < importNumEntEvents; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@WriteTapeF
$LN20@WriteTapeF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN21@WriteTapeF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	jge	SHORT $LN19@WriteTapeF

; 1557 : 	{
; 1558 : 		// posListPtr = LIST_NTH(importPosList, i);
; 1559 : 		posPtr = (ACMIRawPositionData *)posListPtr->node;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _posPtr$[ebp], ecx

; 1560 : 
; 1561 : 		ret = fwrite( &posPtr->entityPosData, sizeof( ACMIEntityPositionData ), 1, tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	push	1
	push	41					; 00000029H
	mov	eax, DWORD PTR _posPtr$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1562 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN18@WriteTapeF

; 1563 : 	 		goto error_exit;

	jmp	$LN17@WriteTapeF
	jmp	$error_exit$48
$LN18@WriteTapeF:

; 1564 : 
; 1565 : 		posListPtr = posListPtr->next;

	mov	ecx, DWORD PTR _posListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _posListPtr$[ebp], edx

; 1566 : 	}

	jmp	SHORT $LN20@WriteTapeF
$LN19@WriteTapeF:

; 1567 : 
; 1568 : 
; 1569 : 	// allocate the trailer list
; 1570 : 	importEventTrailerList = new ACMIEventTrailer[importNumEvents];

	xor	ecx, ecx
	mov	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A, eax ; importEventTrailerList

; 1571 : 	F4Assert( importEventTrailerList );
; 1572 : 
; 1573 : 	// write out the events
; 1574 : 	eventListPtr = importEventList;

	mov	ecx, DWORD PTR ?importEventList@@3PAULIST@@A ; importEventList
	mov	DWORD PTR _eventListPtr$[ebp], ecx

; 1575 : 	for ( i = 0; i < importNumEvents; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@WriteTapeF
$LN15@WriteTapeF:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN16@WriteTapeF:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	jge	SHORT $LN14@WriteTapeF

; 1576 : 	{
; 1577 : 		// eventListPtr = LIST_NTH(importEventList, i);
; 1578 : 		eventPtr = (ACMIEventHeader *)eventListPtr->node;

	mov	ecx, DWORD PTR _eventListPtr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _eventPtr$[ebp], edx

; 1579 : 
; 1580 : 		// set the trailer data
; 1581 : 		importEventTrailerList[i].index = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A ; importEventTrailerList
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx

; 1582 : 		importEventTrailerList[i].timeEnd = eventPtr->timeEnd;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A ; importEventTrailerList
	mov	edx, DWORD PTR _eventPtr$[ebp]
	mov	edx, DWORD PTR [edx+9]
	mov	DWORD PTR [ecx+eax*8], edx

; 1583 : 
; 1584 : 		ret = fwrite( eventPtr, sizeof( ACMIEventHeader ), 1, tapeFile );

	mov	eax, DWORD PTR _tapeFile$[ebp]
	push	eax
	push	1
	push	65					; 00000041H
	mov	ecx, DWORD PTR _eventPtr$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1585 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN13@WriteTapeF

; 1586 : 	 		goto error_exit;

	jmp	$LN12@WriteTapeF
	jmp	$error_exit$48
$LN13@WriteTapeF:

; 1587 : 
; 1588 : 		eventListPtr = eventListPtr->next;

	mov	edx, DWORD PTR _eventListPtr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _eventListPtr$[ebp], eax

; 1589 : 
; 1590 : 	} // end for events loop

	jmp	SHORT $LN15@WriteTapeF
$LN14@WriteTapeF:

; 1591 : 
; 1592 : 	// now sort the trailers in ascending order by endTime and
; 1593 : 	// write them out
; 1594 : 	qsort( importEventTrailerList,
; 1595 : 		   importNumEvents,
; 1596 : 		   sizeof( ACMIEventTrailer ),
; 1597 : 		   CompareEventTrailer );

	push	OFFSET _CompareEventTrailer
	push	8
	mov	ecx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	push	ecx
	mov	edx, DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A ; importEventTrailerList
	push	edx
	call	_qsort
	add	esp, 16					; 00000010H

; 1598 : 
; 1599 : 	for ( i = 0; i < importNumEvents; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@WriteTapeF
$LN10@WriteTapeF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@WriteTapeF:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	jge	SHORT $LN9@WriteTapeF

; 1600 : 	{
; 1601 : 		ret = fwrite( &importEventTrailerList[i], sizeof( ACMIEventTrailer ), 1, tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	push	1
	push	8
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A ; importEventTrailerList
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1602 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN8@WriteTapeF

; 1603 : 	 		goto error_exit;

	jmp	SHORT $LN7@WriteTapeF
	jmp	SHORT $error_exit$48
$LN8@WriteTapeF:

; 1604 : 
; 1605 : 	} // end for events loop

	jmp	SHORT $LN10@WriteTapeF
$LN9@WriteTapeF:

; 1606 : 
; 1607 : 	// write out the feature events
; 1608 : 	posListPtr = importFeatEventList;

	mov	eax, DWORD PTR ?importFeatEventList@@3PAULIST@@A ; importFeatEventList
	mov	DWORD PTR _posListPtr$[ebp], eax

; 1609 : 	for ( i = 0; i < importNumFeatEvents; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@WriteTapeF
$LN5@WriteTapeF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@WriteTapeF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?importNumFeatEvents@@3HA ; importNumFeatEvents
	jge	SHORT $LN4@WriteTapeF

; 1610 : 	{
; 1611 : 		// posListPtr = LIST_NTH(importPosList, i);
; 1612 : 		fePtr = (ACMIFeatEventImportData *)posListPtr->node;

	mov	eax, DWORD PTR _posListPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fePtr$[ebp], ecx

; 1613 : 
; 1614 : 		ret = fwrite( &fePtr->data, sizeof( ACMIFeatEvent ), 1, tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _fePtr$[ebp]
	add	eax, 4
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1615 : 		if ( !ret )

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@WriteTapeF

; 1616 : 	 		goto error_exit;

	jmp	SHORT $LN2@WriteTapeF
	jmp	SHORT $error_exit$48
$LN3@WriteTapeF:

; 1617 : 
; 1618 : 		posListPtr = posListPtr->next;

	mov	ecx, DWORD PTR _posListPtr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _posListPtr$[ebp], edx

; 1619 : 	}

	jmp	SHORT $LN5@WriteTapeF
$LN4@WriteTapeF:

; 1620 : 
; 1621 : 	// finally import and write out the text events
; 1622 : 	ImportTextEventList( tapeFile, tapeHdr );

	mov	eax, DWORD PTR _tapeHdr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tapeFile$[ebp]
	push	ecx
	call	?ImportTextEventList@ACMITape@@CAXPAU_iobuf@@PAUACMITapeHeader@@@Z ; ACMITape::ImportTextEventList
	add	esp, 8

; 1623 : 
; 1624 : 	// normal exit
; 1625 : 	fclose( tapeFile );

	mov	edx, DWORD PTR _tapeFile$[ebp]
	push	edx
	call	_fclose
	add	esp, 4

; 1626 : 	return;

	jmp	SHORT $LN46@WriteTapeF
$LN2@WriteTapeF:
$LN7@WriteTapeF:
$LN12@WriteTapeF:
$LN17@WriteTapeF:
$LN22@WriteTapeF:
$LN33@WriteTapeF:
$LN38@WriteTapeF:
$LN43@WriteTapeF:
$error_exit$48:

; 1627 : 
; 1628 : error_exit:
; 1629 : 	MonoPrint("Error writing new tape file\n");

	push	OFFSET ??_C@_0BN@FBPPAKAM@Error?5writing?5new?5tape?5file?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 1630 : 	if ( tapeFile )

	cmp	DWORD PTR _tapeFile$[ebp], 0
	je	SHORT $LN1@WriteTapeF

; 1631 : 		fclose( tapeFile );

	mov	eax, DWORD PTR _tapeFile$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN1@WriteTapeF:
$LN46@WriteTapeF:

; 1632 : 	return;
; 1633 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WriteTapeFile@ACMITape@@SAXPADPAUACMITapeHeader@@@Z ENDP ; ACMITape::WriteTapeFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -376						; size = 4
$T2 = -372						; size = 4
$T3 = -368						; size = 4
$T4 = -364						; size = 4
$T5 = -360						; size = 4
$T6 = -356						; size = 4
$T7 = -352						; size = 4
$T8 = -348						; size = 4
$T9 = -344						; size = 4
tv77 = -340						; size = 4
_endTime$ = -336					; size = 4
_begTime$ = -332					; size = 4
_fedata$ = -328						; size = 4
_hdr$ = -324						; size = 5
_flightFile$ = -316					; size = 4
_ehdr$ = -312						; size = 4
_rawPositionData$ = -308				; size = 4
_featpos$ = -304					; size = 44
_msfx$ = -260						; size = 44
_genpos$ = -216						; size = 32
_sfx$ = -184						; size = 24
_tracer$ = -160						; size = 24
_dd$ = -136						; size = 20
_sd$ = -116						; size = 20
_fs$ = -96						; size = 12
_tapeHdr$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_inFltFile$ = 8						; size = 4
_outTapeFileName$ = 12					; size = 4
?Import@ACMITape@@SAHPAD0@Z PROC			; ACMITape::Import

; 567  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 568  : 	FILE
; 569  : 		*flightFile;
; 570  : 
; 571  : 	ACMIRawPositionData
; 572  : 		*rawPositionData = NULL;

	mov	DWORD PTR _rawPositionData$[ebp], 0

; 573  : 
; 574  : 	ACMIEventHeader
; 575  : 		*ehdr = NULL;

	mov	DWORD PTR _ehdr$[ebp], 0

; 576  : 
; 577  : 	ACMIFeatEventImportData
; 578  : 		*fedata = NULL;

	mov	DWORD PTR _fedata$[ebp], 0

; 579  : 
; 580  : 	float
; 581  : 		begTime,
; 582  : 		endTime;
; 583  : 
; 584  : 	ACMITapeHeader tapeHdr;
; 585  : 	ACMIRecHeader  hdr;
; 586  : 	ACMIGenPositionData genpos;
; 587  : 	ACMIFeaturePositionData featpos;
; 588  : 	ACMITracerStartData tracer;
; 589  : 	ACMIStationarySfxData sfx;
; 590  : 	ACMIMovingSfxData msfx;
; 591  : 	ACMISwitchData sd;
; 592  : 	ACMIDOFData dd;
; 593  : 	ACMIFeatureStatusData fs;
; 594  : 		
; 595  : 
; 596  : 	// zero our counters
; 597  : 	importNumFeat = 0;

	mov	DWORD PTR ?importNumFeat@@3HA, 0	; importNumFeat

; 598  : 	importNumPos = 0;

	mov	DWORD PTR ?importNumPos@@3HA, 0		; importNumPos

; 599  : 	importNumEnt = 0;

	mov	DWORD PTR ?importNumEnt@@3HA, 0		; importNumEnt

; 600  : 	importNumEvents = 0;

	mov	DWORD PTR ?importNumEvents@@3HA, 0	; importNumEvents

; 601  : 	importNumFeatEvents = 0;

	mov	DWORD PTR ?importNumFeatEvents@@3HA, 0	; importNumFeatEvents

; 602  : 	importNumEntEvents = 0;

	mov	DWORD PTR ?importNumEntEvents@@3HA, 0	; importNumEntEvents

; 603  : 
; 604  : 	// zero out position list
; 605  : 	importFeatList = NULL;

	mov	DWORD PTR ?importFeatList@@3PAULIST@@A, 0 ; importFeatList

; 606  : 	importFeatEventList = NULL;

	mov	DWORD PTR ?importFeatEventList@@3PAULIST@@A, 0 ; importFeatEventList

; 607  : 	importPosList = NULL;

	mov	DWORD PTR ?importPosList@@3PAULIST@@A, 0 ; importPosList

; 608  : 	importEventList = NULL;

	mov	DWORD PTR ?importEventList@@3PAULIST@@A, 0 ; importEventList

; 609  : 	importEntEventList = NULL;

	mov	DWORD PTR ?importEntEventList@@3PAULIST@@A, 0 ; importEntEventList

; 610  : 	importEventTrailerList = NULL;

	mov	DWORD PTR ?importEventTrailerList@@3PAUACMIEventTrailer@@A, 0 ; importEventTrailerList

; 611  : 
; 612  : 	// this value comes from tod type record
; 613  : 	tapeHdr.todOffset =  0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tapeHdr$[ebp+76], xmm0

; 614  : 
; 615  : 
; 616  : 	// Load flight file for positional data.
; 617  : 	//flightFile = fopen("campaign\\save\\fltfiles\\acmi.flt", "rb");
; 618  : 	flightFile = fopen(inFltFile, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _inFltFile$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _flightFile$[ebp], eax

; 619  : 						
; 620  : 	if (flightFile == NULL)

	cmp	DWORD PTR _flightFile$[ebp], 0
	jne	SHORT $LN39@Import

; 621  : 	{
; 622  : 		MonoPrint("Error opening acmi flight file");

	push	OFFSET ??_C@_0BP@GDDCLOAC@Error?5opening?5acmi?5flight?5file?$AA@
	call	_MonoPrint
	add	esp, 4

; 623  : 		return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN39@Import:

; 624  : 	}
; 625  : 
; 626  : 	begTime = -1.0;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _begTime$[ebp], xmm0

; 627  : 	endTime = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _endTime$[ebp], xmm0

; 628  : 	MonoPrint("ACMITape Import: Reading Raw Data ....\n");

	push	OFFSET ??_C@_0CI@FJDDFKJJ@ACMITape?5Import?3?5Reading?5Raw?5Dat@
	call	_MonoPrint
	add	esp, 4
$LN38@Import:

; 629  : 	while( fread(&hdr, sizeof( ACMIRecHeader ), 1, flightFile ) )

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	push	5
	lea	edx, DWORD PTR _hdr$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN37@Import

; 630  : 	{
; 631  : 		// now read in the rest of the record depending on type
; 632  : 		switch( hdr.type )

	movzx	eax, BYTE PTR _hdr$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	cmp	DWORD PTR tv77[ebp], 13			; 0000000dH
	ja	$LN4@Import
	mov	ecx, DWORD PTR tv77[ebp]
	jmp	DWORD PTR $LN42@Import[ecx*4]
$LN34@Import:

; 633  : 		{
; 634  : 			case ACMIRecTodOffset:
; 635  : 				tapeHdr.todOffset =  hdr.time;

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR _tapeHdr$[ebp+76], xmm0

; 636  : 				break;

	jmp	$LN35@Import
$LN33@Import:

; 637  : 
; 638  : 			case ACMIRecGenPosition:
; 639  : 			case ACMIRecMissilePosition:
; 640  : 			case ACMIRecChaffPosition:
; 641  : 			case ACMIRecFlarePosition:
; 642  : 			case ACMIRecAircraftPosition:
; 643  : 		
; 644  : 				// Read the data
; 645  : 				if ( !fread( &genpos, sizeof( ACMIGenPositionData ), 1, flightFile ) )

	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _genpos$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN32@Import

; 646  : 				{
; 647  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 648  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN32@Import:

; 649  : 				}
; 650  : 				if (hdr.type == ACMIRecAircraftPosition)

	movzx	eax, BYTE PTR _hdr$[ebp]
	cmp	eax, 3
	jne	SHORT $LN31@Import

; 651  : 					fread(&tempTarget, sizeof(tempTarget),1,flightFile);

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	push	4
	push	OFFSET ?tempTarget@@3JA			; tempTarget
	call	_fread
	add	esp, 16					; 00000010H

; 652  : 				else

	jmp	SHORT $LN30@Import
$LN31@Import:

; 653  : 					tempTarget = -1;

	mov	DWORD PTR ?tempTarget@@3JA, -1		; tempTarget
$LN30@Import:

; 654  : 				// Allocate a new data node.
; 655  : 				F4Assert(rawPositionData == NULL);
; 656  : 				rawPositionData = new ACMIRawPositionData;

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _rawPositionData$[ebp], edx

; 657  : 				F4Assert(rawPositionData != NULL);
; 658  : 		
; 659  : 				// fill in raw position data
; 660  : 				rawPositionData->uniqueID = genpos.uniqueID;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR _genpos$[ebp+4]
	mov	DWORD PTR [eax+4], ecx

; 661  : 				rawPositionData->type = genpos.type;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	eax, DWORD PTR _genpos$[ebp]
	mov	DWORD PTR [edx], eax

; 662  : 				if ( hdr.type == ACMIRecMissilePosition )

	movzx	ecx, BYTE PTR _hdr$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN29@Import

; 663  : 					rawPositionData->flags = ENTITY_FLAG_MISSILE;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [edx+8], 1
	jmp	SHORT $LN22@Import
$LN29@Import:

; 664  : 				else if ( hdr.type == ACMIRecAircraftPosition )

	movzx	eax, BYTE PTR _hdr$[ebp]
	cmp	eax, 3
	jne	SHORT $LN27@Import

; 665  : 					rawPositionData->flags = ENTITY_FLAG_AIRCRAFT;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [ecx+8], 4
	jmp	SHORT $LN22@Import
$LN27@Import:

; 666  : 				else if ( hdr.type == ACMIRecChaffPosition )

	movzx	edx, BYTE PTR _hdr$[ebp]
	cmp	edx, 9
	jne	SHORT $LN25@Import

; 667  : 					rawPositionData->flags = ENTITY_FLAG_CHAFF;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [eax+8], 8
	jmp	SHORT $LN22@Import
$LN25@Import:

; 668  : 				else if ( hdr.type == ACMIRecFlarePosition )

	movzx	ecx, BYTE PTR _hdr$[ebp]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN23@Import

; 669  : 					rawPositionData->flags = ENTITY_FLAG_FLARE;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [edx+8], 16			; 00000010H

; 670  : 				else

	jmp	SHORT $LN22@Import
$LN23@Import:

; 671  : 					rawPositionData->flags = 0;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN22@Import:

; 672  : 
; 673  : 				rawPositionData->entityPosData.time = hdr.time;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [ecx+24], xmm0

; 674  : 				rawPositionData->entityPosData.type = PosTypePos;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	BYTE PTR [edx+28], 0

; 675  : // remove				rawPositionData->entityPosData.teamColor = genpos.teamColor;
; 676  : // remove				strcpy((char*)rawPositionData->entityPosData.label, (char*)genpos.label);
; 677  : 				rawPositionData->entityPosData.posData.x = genpos.x;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _genpos$[ebp+8]
	movss	DWORD PTR [eax+29], xmm0

; 678  : 				rawPositionData->entityPosData.posData.y = genpos.y;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _genpos$[ebp+12]
	movss	DWORD PTR [ecx+33], xmm0

; 679  : 				rawPositionData->entityPosData.posData.z = genpos.z;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _genpos$[ebp+16]
	movss	DWORD PTR [edx+37], xmm0

; 680  : 				rawPositionData->entityPosData.posData.roll = genpos.roll;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _genpos$[ebp+28]
	movss	DWORD PTR [eax+45], xmm0

; 681  : 				rawPositionData->entityPosData.posData.pitch = genpos.pitch;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _genpos$[ebp+24]
	movss	DWORD PTR [ecx+41], xmm0

; 682  : 				rawPositionData->entityPosData.posData.yaw = genpos.yaw;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _genpos$[ebp+20]
	movss	DWORD PTR [edx+49], xmm0

; 683  : 				rawPositionData->entityPosData.posData.radarTarget= tempTarget;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR ?tempTarget@@3JA		; tempTarget
	mov	DWORD PTR [eax+53], ecx

; 684  : 
; 685  : 																																
; 686  : 				// Append our new position data.
; 687  : 				importPosList = AppendToEndOfList(importPosList, &importPosListEnd, rawPositionData);

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	push	edx
	push	OFFSET ?importPosListEnd@@3PAULIST@@A	; importPosListEnd
	mov	eax, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	push	eax
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importPosList@@3PAULIST@@A, eax ; importPosList

; 688  : 				rawPositionData = NULL;

	mov	DWORD PTR _rawPositionData$[ebp], 0

; 689  : 		
; 690  : 				// bump counter
; 691  : 				importNumPos++;

	mov	ecx, DWORD PTR ?importNumPos@@3HA	; importNumPos
	add	ecx, 1
	mov	DWORD PTR ?importNumPos@@3HA, ecx	; importNumPos

; 692  : 
; 693  : 				break;

	jmp	$LN35@Import
$LN21@Import:

; 694  : 			case ACMIRecTracerStart:
; 695  : 
; 696  : 				// Read the data
; 697  : 				if ( !fread( &tracer, sizeof( ACMITracerStartData ), 1, flightFile ) )

	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	push	1
	push	24					; 00000018H
	lea	eax, DWORD PTR _tracer$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN20@Import

; 698  : 				{
; 699  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 700  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN20@Import:

; 701  : 				}
; 702  : 
; 703  : 				// Allocate a new data node.
; 704  : 				F4Assert(ehdr == NULL);
; 705  : 				ehdr = new ACMIEventHeader;

	push	65					; 00000041H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _ehdr$[ebp], eax

; 706  : 				F4Assert(ehdr != NULL);
; 707  : 
; 708  : 				// fill in data
; 709  : 				ehdr->eventType = hdr.type;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	mov	dl, BYTE PTR _hdr$[ebp]
	mov	BYTE PTR [ecx], dl

; 710  : 				ehdr->time = hdr.time;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [eax+5], xmm0

; 711  : 				ehdr->timeEnd = hdr.time + 2.5F;

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	addss	xmm0, DWORD PTR __real@40200000
	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	DWORD PTR [ecx+9], xmm0

; 712  : 				ehdr->index = importNumEvents;

	mov	edx, DWORD PTR _ehdr$[ebp]
	mov	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	mov	DWORD PTR [edx+1], eax

; 713  : 				ehdr->x = tracer.x;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _tracer$[ebp]
	movss	DWORD PTR [ecx+29], xmm0

; 714  : 				ehdr->y = tracer.y;

	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _tracer$[ebp+4]
	movss	DWORD PTR [edx+33], xmm0

; 715  : 				ehdr->z = tracer.z;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _tracer$[ebp+8]
	movss	DWORD PTR [eax+37], xmm0

; 716  : 				ehdr->dx = tracer.dx;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _tracer$[ebp+12]
	movss	DWORD PTR [ecx+41], xmm0

; 717  : 				ehdr->dy = tracer.dy;

	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _tracer$[ebp+16]
	movss	DWORD PTR [edx+45], xmm0

; 718  : 				ehdr->dz = tracer.dz;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _tracer$[ebp+20]
	movss	DWORD PTR [eax+49], xmm0

; 719  : 
; 720  : 				
; 721  : 				// Append our new data.
; 722  : 				importEventList = AppendToEndOfList(importEventList, &importEventListEnd, ehdr );

	mov	ecx, DWORD PTR _ehdr$[ebp]
	push	ecx
	push	OFFSET ?importEventListEnd@@3PAULIST@@A	; importEventListEnd
	mov	edx, DWORD PTR ?importEventList@@3PAULIST@@A ; importEventList
	push	edx
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importEventList@@3PAULIST@@A, eax ; importEventList

; 723  : 				ehdr = NULL;

	mov	DWORD PTR _ehdr$[ebp], 0

; 724  : 		
; 725  : 				// bump counter
; 726  : 				importNumEvents++;

	mov	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	add	eax, 1
	mov	DWORD PTR ?importNumEvents@@3HA, eax	; importNumEvents

; 727  : 				break;

	jmp	$LN35@Import
$LN19@Import:

; 728  : 			case ACMIRecStationarySfx:
; 729  : 				// Read the data
; 730  : 				if ( !fread( &sfx, sizeof( ACMIStationarySfxData ), 1, flightFile ) )

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	push	24					; 00000018H
	lea	edx, DWORD PTR _sfx$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN18@Import

; 731  : 				{
; 732  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 733  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN18@Import:

; 734  : 				}
; 735  : 
; 736  : 				// Allocate a new data node.
; 737  : 				F4Assert(ehdr == NULL);
; 738  : 				ehdr = new ACMIEventHeader;

	push	65					; 00000041H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _ehdr$[ebp], edx

; 739  : 				F4Assert(ehdr != NULL);
; 740  : 
; 741  : 				// fill in data
; 742  : 				ehdr->eventType = hdr.type;

	mov	eax, DWORD PTR _ehdr$[ebp]
	mov	cl, BYTE PTR _hdr$[ebp]
	mov	BYTE PTR [eax], cl

; 743  : 				ehdr->index = importNumEvents;

	mov	edx, DWORD PTR _ehdr$[ebp]
	mov	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	mov	DWORD PTR [edx+1], eax

; 744  : 				ehdr->time = hdr.time;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [ecx+5], xmm0

; 745  : 				ehdr->timeEnd = hdr.time + sfx.timeToLive;

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	addss	xmm0, DWORD PTR _sfx$[ebp+16]
	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	DWORD PTR [edx+9], xmm0

; 746  : 				ehdr->x = sfx.x;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _sfx$[ebp+4]
	movss	DWORD PTR [eax+29], xmm0

; 747  : 				ehdr->y = sfx.y;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _sfx$[ebp+8]
	movss	DWORD PTR [ecx+33], xmm0

; 748  : 				ehdr->z = sfx.z;

	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _sfx$[ebp+12]
	movss	DWORD PTR [edx+37], xmm0

; 749  : 				ehdr->type = sfx.type;

	mov	eax, DWORD PTR _ehdr$[ebp]
	mov	ecx, DWORD PTR _sfx$[ebp]
	mov	DWORD PTR [eax+13], ecx

; 750  : 				ehdr->scale = sfx.scale;

	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _sfx$[ebp+20]
	movss	DWORD PTR [edx+25], xmm0

; 751  : 
; 752  : 				
; 753  : 				// Append our new data.
; 754  : 				importEventList = AppendToEndOfList(importEventList, &importEventListEnd, ehdr );

	mov	eax, DWORD PTR _ehdr$[ebp]
	push	eax
	push	OFFSET ?importEventListEnd@@3PAULIST@@A	; importEventListEnd
	mov	ecx, DWORD PTR ?importEventList@@3PAULIST@@A ; importEventList
	push	ecx
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importEventList@@3PAULIST@@A, eax ; importEventList

; 755  : 				ehdr = NULL;

	mov	DWORD PTR _ehdr$[ebp], 0

; 756  : 		
; 757  : 				// bump counter
; 758  : 				importNumEvents++;

	mov	edx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	add	edx, 1
	mov	DWORD PTR ?importNumEvents@@3HA, edx	; importNumEvents

; 759  : 				break;

	jmp	$LN35@Import
$LN17@Import:

; 760  : 
; 761  : 			case ACMIRecFeatureStatus:
; 762  : 				// Read the data
; 763  : 				if ( !fread( &fs, sizeof( ACMIFeatureStatusData ), 1, flightFile ) )

	mov	eax, DWORD PTR _flightFile$[ebp]
	push	eax
	push	1
	push	12					; 0000000cH
	lea	ecx, DWORD PTR _fs$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN16@Import

; 764  : 				{
; 765  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	push	edx
	mov	eax, DWORD PTR _flightFile$[ebp]
	push	eax
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 766  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN16@Import:

; 767  : 				}
; 768  : 
; 769  : 				// Allocate a new data node.
; 770  : 				F4Assert(fedata == NULL);
; 771  : 				fedata = new ACMIFeatEventImportData;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _fedata$[ebp], ecx

; 772  : 				F4Assert(fedata != NULL);
; 773  : 
; 774  : 				// fill in data
; 775  : 				fedata->uniqueID = fs.uniqueID;

	mov	edx, DWORD PTR _fedata$[ebp]
	mov	eax, DWORD PTR _fs$[ebp]
	mov	DWORD PTR [edx], eax

; 776  : 				fedata->data.index = -1;	// will be filled in later

	mov	ecx, DWORD PTR _fedata$[ebp]
	mov	DWORD PTR [ecx+8], -1

; 777  : 				fedata->data.time = hdr.time;

	mov	edx, DWORD PTR _fedata$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [edx+4], xmm0

; 778  : 				fedata->data.newStatus = fs.newStatus;

	mov	eax, DWORD PTR _fedata$[ebp]
	mov	ecx, DWORD PTR _fs$[ebp+4]
	mov	DWORD PTR [eax+12], ecx

; 779  : 				fedata->data.prevStatus = fs.prevStatus;

	mov	edx, DWORD PTR _fedata$[ebp]
	mov	eax, DWORD PTR _fs$[ebp+8]
	mov	DWORD PTR [edx+16], eax

; 780  : 
; 781  : 				
; 782  : 				// Append our new data.
; 783  : 				importFeatEventList = AppendToEndOfList(importFeatEventList, &importFeatEventListEnd, fedata );

	mov	ecx, DWORD PTR _fedata$[ebp]
	push	ecx
	push	OFFSET ?importFeatEventListEnd@@3PAULIST@@A ; importFeatEventListEnd
	mov	edx, DWORD PTR ?importFeatEventList@@3PAULIST@@A ; importFeatEventList
	push	edx
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importFeatEventList@@3PAULIST@@A, eax ; importFeatEventList

; 784  : 				fedata = NULL;

	mov	DWORD PTR _fedata$[ebp], 0

; 785  : 		
; 786  : 				// bump counter
; 787  : 				importNumFeatEvents++;

	mov	eax, DWORD PTR ?importNumFeatEvents@@3HA ; importNumFeatEvents
	add	eax, 1
	mov	DWORD PTR ?importNumFeatEvents@@3HA, eax ; importNumFeatEvents

; 788  : 				break;

	jmp	$LN35@Import
$LN15@Import:

; 789  : 
; 790  : 			// not ready for these yet
; 791  : 			case ACMIRecMovingSfx:
; 792  : 				// Read the data
; 793  : 				if ( !fread( &msfx, sizeof( ACMIMovingSfxData ), 1, flightFile ) )

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	push	44					; 0000002cH
	lea	edx, DWORD PTR _msfx$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@Import

; 794  : 				{
; 795  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 796  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN14@Import:

; 797  : 				}
; 798  : 
; 799  : 				// Allocate a new data node.
; 800  : 				F4Assert(ehdr == NULL);
; 801  : 				ehdr = new ACMIEventHeader;

	push	65					; 00000041H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _ehdr$[ebp], edx

; 802  : 				F4Assert(ehdr != NULL);
; 803  : 
; 804  : 				// fill in data
; 805  : 				ehdr->eventType = hdr.type;

	mov	eax, DWORD PTR _ehdr$[ebp]
	mov	cl, BYTE PTR _hdr$[ebp]
	mov	BYTE PTR [eax], cl

; 806  : 				ehdr->index = importNumEvents;

	mov	edx, DWORD PTR _ehdr$[ebp]
	mov	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	mov	DWORD PTR [edx+1], eax

; 807  : 				ehdr->time = hdr.time;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [ecx+5], xmm0

; 808  : 				ehdr->timeEnd = hdr.time + msfx.timeToLive;

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	addss	xmm0, DWORD PTR _msfx$[ebp+36]
	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	DWORD PTR [edx+9], xmm0

; 809  : 				ehdr->x = msfx.x;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+12]
	movss	DWORD PTR [eax+29], xmm0

; 810  : 				ehdr->y = msfx.y;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+16]
	movss	DWORD PTR [ecx+33], xmm0

; 811  : 				ehdr->z = msfx.z;

	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+20]
	movss	DWORD PTR [edx+37], xmm0

; 812  : 				ehdr->dx = msfx.dx;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+24]
	movss	DWORD PTR [eax+41], xmm0

; 813  : 				ehdr->dy = msfx.dy;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+28]
	movss	DWORD PTR [ecx+45], xmm0

; 814  : 				ehdr->dz = msfx.dz;

	mov	edx, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+32]
	movss	DWORD PTR [edx+49], xmm0

; 815  : 				ehdr->flags = msfx.flags;

	mov	eax, DWORD PTR _ehdr$[ebp]
	mov	ecx, DWORD PTR _msfx$[ebp+8]
	mov	DWORD PTR [eax+21], ecx

; 816  : 				ehdr->user = msfx.user;

	mov	edx, DWORD PTR _ehdr$[ebp]
	mov	eax, DWORD PTR _msfx$[ebp+4]
	mov	DWORD PTR [edx+17], eax

; 817  : 				ehdr->type = msfx.type;

	mov	ecx, DWORD PTR _ehdr$[ebp]
	mov	edx, DWORD PTR _msfx$[ebp]
	mov	DWORD PTR [ecx+13], edx

; 818  : 				ehdr->scale = msfx.scale;

	mov	eax, DWORD PTR _ehdr$[ebp]
	movss	xmm0, DWORD PTR _msfx$[ebp+40]
	movss	DWORD PTR [eax+25], xmm0

; 819  : 
; 820  : 				
; 821  : 				// Append our new data.
; 822  : 				importEventList = AppendToEndOfList(importEventList, &importEventListEnd, ehdr );

	mov	ecx, DWORD PTR _ehdr$[ebp]
	push	ecx
	push	OFFSET ?importEventListEnd@@3PAULIST@@A	; importEventListEnd
	mov	edx, DWORD PTR ?importEventList@@3PAULIST@@A ; importEventList
	push	edx
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importEventList@@3PAULIST@@A, eax ; importEventList

; 823  : 				ehdr = NULL;

	mov	DWORD PTR _ehdr$[ebp], 0

; 824  : 		
; 825  : 				// bump counter
; 826  : 				importNumEvents++;

	mov	eax, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	add	eax, 1
	mov	DWORD PTR ?importNumEvents@@3HA, eax	; importNumEvents

; 827  : 				break;

	jmp	$LN35@Import
$LN13@Import:

; 828  : 
; 829  : 			case ACMIRecSwitch:
; 830  : 		
; 831  : 				// Read the data
; 832  : 				if ( !fread( &sd, sizeof( ACMISwitchData ), 1, flightFile ) )

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	push	20					; 00000014H
	lea	edx, DWORD PTR _sd$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@Import

; 833  : 				{
; 834  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 835  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN12@Import:

; 836  : 				}
; 837  : 
; 838  : 				// Allocate a new data node.
; 839  : 				F4Assert(rawPositionData == NULL);
; 840  : 				rawPositionData = new ACMIRawPositionData;

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR _rawPositionData$[ebp], edx

; 841  : 				F4Assert(rawPositionData != NULL);
; 842  : 		
; 843  : 				// fill in raw position data
; 844  : 				rawPositionData->uniqueID = sd.uniqueID;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR _sd$[ebp+4]
	mov	DWORD PTR [eax+4], ecx

; 845  : 				rawPositionData->type = sd.type;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	eax, DWORD PTR _sd$[ebp]
	mov	DWORD PTR [edx], eax

; 846  : 				rawPositionData->flags = 0;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 847  : 
; 848  : 
; 849  : 				rawPositionData->entityPosData.time = hdr.time;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [edx+24], xmm0

; 850  : 				rawPositionData->entityPosData.type = PosTypeSwitch;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	BYTE PTR [eax+28], 1

; 851  : 				rawPositionData->entityPosData.switchData.switchNum = sd.switchNum;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	edx, DWORD PTR _sd$[ebp+8]
	mov	DWORD PTR [ecx+29], edx

; 852  : 				rawPositionData->entityPosData.switchData.switchVal = sd.switchVal;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR _sd$[ebp+12]
	mov	DWORD PTR [eax+33], ecx

; 853  : 				rawPositionData->entityPosData.switchData.prevSwitchVal = sd.prevSwitchVal;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	eax, DWORD PTR _sd$[ebp+16]
	mov	DWORD PTR [edx+37], eax

; 854  : 				
; 855  : 				// Append our new position data.
; 856  : 				importEntEventList = AppendToEndOfList(importEntEventList, &importEntEventListEnd, rawPositionData);

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	push	ecx
	push	OFFSET ?importEntEventListEnd@@3PAULIST@@A ; importEntEventListEnd
	mov	edx, DWORD PTR ?importEntEventList@@3PAULIST@@A ; importEntEventList
	push	edx
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importEntEventList@@3PAULIST@@A, eax ; importEntEventList

; 857  : 				rawPositionData = NULL;

	mov	DWORD PTR _rawPositionData$[ebp], 0

; 858  : 		
; 859  : 				// bump counter
; 860  : 				importNumEntEvents++;

	mov	eax, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	add	eax, 1
	mov	DWORD PTR ?importNumEntEvents@@3HA, eax	; importNumEntEvents

; 861  : 
; 862  : 				break;

	jmp	$LN35@Import
$LN11@Import:

; 863  : 
; 864  : 			case ACMIRecDOF:
; 865  : 		
; 866  : 				// Read the data
; 867  : 				if ( !fread( &dd, sizeof( ACMIDOFData ), 1, flightFile ) )

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	push	20					; 00000014H
	lea	edx, DWORD PTR _dd$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN10@Import

; 868  : 				{
; 869  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 870  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN10@Import:

; 871  : 				}
; 872  : 
; 873  : 				// Allocate a new data node.
; 874  : 				F4Assert(rawPositionData == NULL);
; 875  : 				rawPositionData = new ACMIRawPositionData;

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _rawPositionData$[ebp], edx

; 876  : 				F4Assert(rawPositionData != NULL);
; 877  : 		
; 878  : 				// fill in raw position data
; 879  : 				rawPositionData->uniqueID = dd.uniqueID;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR _dd$[ebp+4]
	mov	DWORD PTR [eax+4], ecx

; 880  : 				rawPositionData->type = dd.type;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	eax, DWORD PTR _dd$[ebp]
	mov	DWORD PTR [edx], eax

; 881  : 				rawPositionData->flags = 0;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 882  : 
; 883  : 
; 884  : 				rawPositionData->entityPosData.time = hdr.time;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [edx+24], xmm0

; 885  : 				rawPositionData->entityPosData.type = PosTypeDOF;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	BYTE PTR [eax+28], 2

; 886  : 				rawPositionData->entityPosData.dofData.DOFNum = dd.DOFNum;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	edx, DWORD PTR _dd$[ebp+8]
	mov	DWORD PTR [ecx+29], edx

; 887  : 				rawPositionData->entityPosData.dofData.DOFVal = dd.DOFVal;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _dd$[ebp+12]
	movss	DWORD PTR [eax+33], xmm0

; 888  : 				rawPositionData->entityPosData.dofData.prevDOFVal = dd.prevDOFVal;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _dd$[ebp+16]
	movss	DWORD PTR [ecx+37], xmm0

; 889  : 				
; 890  : 				// Append our new position data.
; 891  : 				importEntEventList = AppendToEndOfList(importEntEventList, &importEntEventListEnd, rawPositionData);

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	push	edx
	push	OFFSET ?importEntEventListEnd@@3PAULIST@@A ; importEntEventListEnd
	mov	eax, DWORD PTR ?importEntEventList@@3PAULIST@@A ; importEntEventList
	push	eax
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importEntEventList@@3PAULIST@@A, eax ; importEntEventList

; 892  : 				rawPositionData = NULL;

	mov	DWORD PTR _rawPositionData$[ebp], 0

; 893  : 		
; 894  : 				// bump counter
; 895  : 				importNumEntEvents++;

	mov	ecx, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	add	ecx, 1
	mov	DWORD PTR ?importNumEntEvents@@3HA, ecx	; importNumEntEvents

; 896  : 
; 897  : 				break;

	jmp	$LN35@Import
$LN9@Import:

; 898  : 
; 899  : 			case ACMIRecFeaturePosition:
; 900  : 		
; 901  : 				// Read the data
; 902  : 				if ( !fread( &featpos, sizeof( ACMIFeaturePositionData ), 1, flightFile ) )

	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	push	1
	push	44					; 0000002cH
	lea	eax, DWORD PTR _featpos$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN8@Import

; 903  : 				{
; 904  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 905  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN8@Import:

; 906  : 				}
; 907  : 
; 908  : 				// Allocate a new data node.
; 909  : 				F4Assert(rawPositionData == NULL);
; 910  : 				rawPositionData = new ACMIRawPositionData;

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR _rawPositionData$[ebp], eax

; 911  : 				F4Assert(rawPositionData != NULL);
; 912  : 		
; 913  : 				// fill in raw position data
; 914  : 				rawPositionData->uniqueID = featpos.uniqueID;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	edx, DWORD PTR _featpos$[ebp+4]
	mov	DWORD PTR [ecx+4], edx

; 915  : 				rawPositionData->leadIndex = featpos.leadUniqueID;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR _featpos$[ebp+8]
	mov	DWORD PTR [eax+12], ecx

; 916  : 				rawPositionData->specialFlags = featpos.specialFlags;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	eax, DWORD PTR _featpos$[ebp+16]
	mov	DWORD PTR [edx+20], eax

; 917  : 				rawPositionData->slot = featpos.slot;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	edx, DWORD PTR _featpos$[ebp+12]
	mov	DWORD PTR [ecx+16], edx

; 918  : 				rawPositionData->type = featpos.type;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	ecx, DWORD PTR _featpos$[ebp]
	mov	DWORD PTR [eax], ecx

; 919  : 				rawPositionData->flags = ENTITY_FLAG_FEATURE;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR [edx+8], 2

; 920  : 
; 921  : 				rawPositionData->entityPosData.time = hdr.time;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR [eax+24], xmm0

; 922  : 				rawPositionData->entityPosData.type = PosTypePos;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	mov	BYTE PTR [ecx+28], 0

; 923  : 				rawPositionData->entityPosData.posData.x = featpos.x;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _featpos$[ebp+20]
	movss	DWORD PTR [edx+29], xmm0

; 924  : 				rawPositionData->entityPosData.posData.y = featpos.y;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _featpos$[ebp+24]
	movss	DWORD PTR [eax+33], xmm0

; 925  : 				rawPositionData->entityPosData.posData.z = featpos.z;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _featpos$[ebp+28]
	movss	DWORD PTR [ecx+37], xmm0

; 926  : 				rawPositionData->entityPosData.posData.roll = featpos.roll;

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _featpos$[ebp+40]
	movss	DWORD PTR [edx+45], xmm0

; 927  : 				rawPositionData->entityPosData.posData.pitch = featpos.pitch;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _featpos$[ebp+36]
	movss	DWORD PTR [eax+41], xmm0

; 928  : 				rawPositionData->entityPosData.posData.yaw = featpos.yaw;

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	movss	xmm0, DWORD PTR _featpos$[ebp+32]
	movss	DWORD PTR [ecx+49], xmm0

; 929  : 				
; 930  : 				// Append our new position data.
; 931  : 				importPosList = AppendToEndOfList(importPosList, &importPosListEnd, rawPositionData);

	mov	edx, DWORD PTR _rawPositionData$[ebp]
	push	edx
	push	OFFSET ?importPosListEnd@@3PAULIST@@A	; importPosListEnd
	mov	eax, DWORD PTR ?importPosList@@3PAULIST@@A ; importPosList
	push	eax
	call	?AppendToEndOfList@@YAPAULIST@@PAU1@PAPAU1@PAX@Z ; AppendToEndOfList
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?importPosList@@3PAULIST@@A, eax ; importPosList

; 932  : 				rawPositionData = NULL;

	mov	DWORD PTR _rawPositionData$[ebp], 0

; 933  : 		
; 934  : 				// bump counter
; 935  : 				importNumPos++;

	mov	ecx, DWORD PTR ?importNumPos@@3HA	; importNumPos
	add	ecx, 1
	mov	DWORD PTR ?importNumPos@@3HA, ecx	; importNumPos

; 936  : 
; 937  : 				break;

	jmp	$LN35@Import
$LN7@Import:

; 938  : 			case ACMICallsignList:
; 939  : 		
; 940  : 				// Read the data
; 941  : 				if ( !fread( &import_count, sizeof( long ), 1, flightFile ) )

	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	push	1
	push	4
	push	OFFSET ?import_count@@3JA		; import_count
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN6@Import

; 942  : 				{
; 943  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 944  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN6@Import:

; 945  : 				}
; 946  : 
; 947  : 				F4Assert(Import_Callsigns == NULL);
; 948  : 				Import_Callsigns=new ACMI_CallRec[import_count];

	xor	ecx, ecx
	mov	eax, DWORD PTR ?import_count@@3JA	; import_count
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A, eax ; Import_Callsigns

; 949  : 				F4Assert(Import_Callsigns != NULL);
; 950  : 
; 951  : 				if(!fread(Import_Callsigns,import_count * sizeof(ACMI_CallRec),1,flightFile))

	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ?import_count@@3JA	; import_count
	imul	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR ?Import_Callsigns@@3PAUACMI_CallRec@@A ; Import_Callsigns
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@Import

; 952  : 				{
; 953  : 					CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	ecx, DWORD PTR _rawPositionData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flightFile$[ebp]
	push	edx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 954  : 					return FALSE;

	xor	eax, eax
	jmp	$LN40@Import
$LN5@Import:
$LN4@Import:
$LN35@Import:

; 955  : 				}
; 956  : 				break;
; 957  : 
; 958  : 			default:
; 959  : 				// KCK: I was hitting this repeatidly.. So I'm making it a ShiAssert (and therefore ignorable)
; 960  : //				ShiAssert(0);
; 961  : 				break;
; 962  : 		}
; 963  : 
; 964  : 		// save begin and end times
; 965  : 		if ( hdr.type != ACMIRecTodOffset )

	movzx	eax, BYTE PTR _hdr$[ebp]
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN1@Import

; 966  : 		{
; 967  : 			if ( begTime < 0.0 )

	cvtss2sd xmm0, DWORD PTR _begTime$[ebp]
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN2@Import

; 968  : 				begTime = hdr.time;

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR _begTime$[ebp], xmm0
$LN2@Import:

; 969  : 			if ( hdr.time > endTime )

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	comiss	xmm0, DWORD PTR _endTime$[ebp]
	jbe	SHORT $LN1@Import

; 970  : 				endTime = hdr.time;

	movss	xmm0, DWORD PTR _hdr$[ebp+1]
	movss	DWORD PTR _endTime$[ebp], xmm0
$LN1@Import:

; 971  : 		}
; 972  : 	}

	jmp	$LN38@Import
$LN37@Import:

; 973  : 
; 974  : 	// build the importEntityList
; 975  : 	MonoPrint("ACMITape Import: Parsing Entities ....\n");

	push	OFFSET ??_C@_0CI@POBDCJEJ@ACMITape?5Import?3?5Parsing?5Entitie@
	call	_MonoPrint
	add	esp, 4

; 976  : 	ParseEntities();

	call	?ParseEntities@ACMITape@@CAXXZ		; ACMITape::ParseEntities

; 977  : 
; 978  : 	// setup the tape header
; 979  : 	tapeHdr.fileID = 'TAPE';

	mov	DWORD PTR _tapeHdr$[ebp], 1413566533	; 54415045H

; 980  : 	tapeHdr.numEntities = importNumEnt;

	mov	ecx, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	mov	DWORD PTR _tapeHdr$[ebp+8], ecx

; 981  : 	tapeHdr.numFeat = importNumFeat;

	mov	edx, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	mov	DWORD PTR _tapeHdr$[ebp+12], edx

; 982  : 	tapeHdr.entityBlockOffset = sizeof( ACMITapeHeader );

	mov	DWORD PTR _tapeHdr$[ebp+16], 80		; 00000050H

; 983  : 	tapeHdr.featBlockOffset = tapeHdr.entityBlockOffset +
; 984  : 								  sizeof( ACMIEntityData ) * importNumEnt;

	mov	eax, DWORD PTR ?importNumEnt@@3HA	; importNumEnt
	imul	eax, 36					; 00000024H
	add	eax, DWORD PTR _tapeHdr$[ebp+16]
	mov	DWORD PTR _tapeHdr$[ebp+20], eax

; 985  : 	tapeHdr.timelineBlockOffset = tapeHdr.featBlockOffset +
; 986  : 								  sizeof( ACMIEntityData ) * importNumFeat;

	mov	ecx, DWORD PTR ?importNumFeat@@3HA	; importNumFeat
	imul	ecx, 36					; 00000024H
	add	ecx, DWORD PTR _tapeHdr$[ebp+20]
	mov	DWORD PTR _tapeHdr$[ebp+28], ecx

; 987  : 	tapeHdr.firstEntEventOffset = tapeHdr.timelineBlockOffset +
; 988  : 								  sizeof( ACMIEntityPositionData ) * importNumPos;

	mov	edx, DWORD PTR ?importNumPos@@3HA	; importNumPos
	imul	edx, 41					; 00000029H
	add	edx, DWORD PTR _tapeHdr$[ebp+28]
	mov	DWORD PTR _tapeHdr$[ebp+32], edx

; 989  : 	tapeHdr.firstGeneralEventOffset = tapeHdr.firstEntEventOffset +
; 990  : 								  sizeof( ACMIEntityPositionData ) * importNumEntEvents;

	mov	eax, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	imul	eax, 41					; 00000029H
	add	eax, DWORD PTR _tapeHdr$[ebp+32]
	mov	DWORD PTR _tapeHdr$[ebp+36], eax

; 991  : 	tapeHdr.firstEventTrailerOffset = tapeHdr.firstGeneralEventOffset +
; 992  : 								  sizeof( ACMIEventHeader ) * importNumEvents;

	mov	ecx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	imul	ecx, 65					; 00000041H
	add	ecx, DWORD PTR _tapeHdr$[ebp+36]
	mov	DWORD PTR _tapeHdr$[ebp+40], ecx

; 993  : 	tapeHdr.firstFeatEventOffset = tapeHdr.firstEventTrailerOffset +
; 994  : 								  sizeof( ACMIEventTrailer ) * importNumEvents;

	mov	edx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	mov	eax, DWORD PTR _tapeHdr$[ebp+40]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _tapeHdr$[ebp+48], ecx

; 995  : 	tapeHdr.firstTextEventOffset = tapeHdr.firstFeatEventOffset +
; 996  : 								  sizeof( ACMIFeatEvent ) * importNumFeatEvents;

	mov	edx, DWORD PTR ?importNumFeatEvents@@3HA ; importNumFeatEvents
	shl	edx, 4
	add	edx, DWORD PTR _tapeHdr$[ebp+48]
	mov	DWORD PTR _tapeHdr$[ebp+44], edx

; 997  : 	tapeHdr.numEntityPositions = importNumPos;

	mov	eax, DWORD PTR ?importNumPos@@3HA	; importNumPos
	mov	DWORD PTR _tapeHdr$[ebp+24], eax

; 998  : 	tapeHdr.numEvents = importNumEvents;

	mov	ecx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	mov	DWORD PTR _tapeHdr$[ebp+52], ecx

; 999  : 	tapeHdr.numFeatEvents = importNumFeatEvents;

	mov	edx, DWORD PTR ?importNumFeatEvents@@3HA ; importNumFeatEvents
	mov	DWORD PTR _tapeHdr$[ebp+64], edx

; 1000 : 	tapeHdr.numEntEvents = importNumEntEvents;

	mov	eax, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	mov	DWORD PTR _tapeHdr$[ebp+56], eax

; 1001 : 	tapeHdr.totPlayTime = endTime - begTime;

	movss	xmm0, DWORD PTR _endTime$[ebp]
	subss	xmm0, DWORD PTR _begTime$[ebp]
	movss	DWORD PTR _tapeHdr$[ebp+72], xmm0

; 1002 : 	tapeHdr.startTime =  begTime;

	movss	xmm0, DWORD PTR _begTime$[ebp]
	movss	DWORD PTR _tapeHdr$[ebp+68], xmm0

; 1003 : 
; 1004 : 
; 1005 : 	// set up the chain offsets of entity positions
; 1006 : 	MonoPrint("ACMITape Import: Threading Positions ....\n");

	push	OFFSET ??_C@_0CL@MAGFLMAL@ACMITape?5Import?3?5Threading?5Posit@
	call	_MonoPrint
	add	esp, 4

; 1007 : 	ThreadEntityPositions( &tapeHdr );

	lea	ecx, DWORD PTR _tapeHdr$[ebp]
	push	ecx
	call	?ThreadEntityPositions@ACMITape@@CAXPAUACMITapeHeader@@@Z ; ACMITape::ThreadEntityPositions
	add	esp, 4

; 1008 : 
; 1009 : 	// set up the chain offsets of entity events
; 1010 : 	MonoPrint("ACMITape Import: Threading Entity Events ....\n");

	push	OFFSET ??_C@_0CP@NAKIBKKI@ACMITape?5Import?3?5Threading?5Entit@
	call	_MonoPrint
	add	esp, 4

; 1011 : 	ThreadEntityEvents( &tapeHdr );

	lea	edx, DWORD PTR _tapeHdr$[ebp]
	push	edx
	call	?ThreadEntityEvents@ACMITape@@CAXPAUACMITapeHeader@@@Z ; ACMITape::ThreadEntityEvents
	add	esp, 4

; 1012 : 
; 1013 : 	// Calculate size of .vhs file.
; 1014 : 	tapeHdr.fileSize = tapeHdr.timelineBlockOffset +
; 1015 : 					   sizeof( ACMIEntityPositionData ) * importNumPos +
; 1016 : 					   sizeof( ACMIEntityPositionData ) * importNumEntEvents +
; 1017 : 					   sizeof( ACMIEventHeader ) * importNumEvents +
; 1018 : 					   sizeof( ACMIFeatEvent ) * importNumFeatEvents +
; 1019 : 					   sizeof( ACMIEventTrailer ) * importNumEvents;

	mov	eax, DWORD PTR ?importNumPos@@3HA	; importNumPos
	imul	eax, 41					; 00000029H
	add	eax, DWORD PTR _tapeHdr$[ebp+28]
	mov	ecx, DWORD PTR ?importNumEntEvents@@3HA	; importNumEntEvents
	imul	ecx, 41					; 00000029H
	add	eax, ecx
	mov	edx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	imul	edx, 65					; 00000041H
	add	eax, edx
	mov	ecx, DWORD PTR ?importNumFeatEvents@@3HA ; importNumFeatEvents
	shl	ecx, 4
	add	eax, ecx
	mov	edx, DWORD PTR ?importNumEvents@@3HA	; importNumEvents
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _tapeHdr$[ebp+4], eax

; 1020 : 
; 1021 : 	// Open a writecopy file mapping.
; 1022 : 	// Write out file in .vhs format.
; 1023 : 	MonoPrint("ACMITape Import: Writing Tape File ....\n");

	push	OFFSET ??_C@_0CJ@CBDOLJBO@ACMITape?5Import?3?5Writing?5Tape?5Fi@
	call	_MonoPrint
	add	esp, 4

; 1024 : 	WriteTapeFile( outTapeFileName, &tapeHdr );

	lea	ecx, DWORD PTR _tapeHdr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outTapeFileName$[ebp]
	push	edx
	call	?WriteTapeFile@ACMITape@@SAXPADPAUACMITapeHeader@@@Z ; ACMITape::WriteTapeFile
	add	esp, 8

; 1025 : 
; 1026 : 	// Cleanup import data.
; 1027 : 	CleanupACMIImportPositionData ( flightFile, rawPositionData );

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightFile$[ebp]
	push	ecx
	call	?CleanupACMIImportPositionData@@YAXPAU_iobuf@@PAUACMIRawPositionData@@@Z ; CleanupACMIImportPositionData
	add	esp, 8

; 1028 : 
; 1029 : 	// now delete the acmi.flt file
; 1030 : 	//remove("campaign\\save\\fltfiles\\acmi.flt");
; 1031 : 	remove(inFltFile);

	mov	edx, DWORD PTR _inFltFile$[ebp]
	push	edx
	call	_remove
	add	esp, 4

; 1032 : 				
; 1033 : 	return TRUE;

	mov	eax, 1
$LN40@Import:

; 1034 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN42@Import:
	DD	$LN33@Import
	DD	$LN33@Import
	DD	$LN9@Import
	DD	$LN33@Import
	DD	$LN21@Import
	DD	$LN19@Import
	DD	$LN15@Import
	DD	$LN13@Import
	DD	$LN11@Import
	DD	$LN33@Import
	DD	$LN33@Import
	DD	$LN34@Import
	DD	$LN17@Import
	DD	$LN7@Import
?Import@ACMITape@@SAHPAD0@Z ENDP			; ACMITape::Import
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
??1ACMITape@@QAE@XZ PROC				; ACMITape::~ACMITape
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 	// Delete Callsigns
; 374  : 	if(ACMI_Callsigns)

	cmp	DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A, 0 ; ACMI_Callsigns
	je	SHORT $LN1@ACMITape

; 375  : 	{
; 376  : 		delete ACMI_Callsigns;

	mov	eax, DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A ; ACMI_Callsigns
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 377  : 		ACMI_Callsigns=NULL;

	mov	DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A, 0 ; ACMI_Callsigns
$LN1@ACMITape:

; 378  : 	}
; 379  : 	Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@ACMITape@@AAEXXZ			; ACMITape::Init

; 380  : 
; 381  : 	#ifdef USE_SH_POOLS
; 382  : 	DrawablePoled::ReleaseStorage();
; 383  : 	#endif
; 384  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1ACMITape@@QAE@XZ ENDP				; ACMITape::~ACMITape
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -304						; size = 4
$T2 = -300						; size = 4
$T3 = -296						; size = 4
_length$ = -292						; size = 4
_callsigns$ = -288					; size = 4
_numcalls$ = -284					; size = 4
_numEntities$ = -280					; size = 4
_e$ = -276						; size = 4
_i$ = -272						; size = 4
_this$ = -268						; size = 4
_fullName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_renderer$ = 12						; size = 4
_viewPoint$ = 16					; size = 4
??0ACMITape@@QAE@PADPAVRenderOTW@@PAVRViewPoint@@@Z PROC ; ACMITape::ACMITape
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	int i, numEntities;
; 227  : 	char fullName[MAX_PATH];
; 228  : 	ACMIEntityData *e;
; 229  : 	long length=0;

	mov	DWORD PTR _length$[ebp], 0

; 230  : 	char *callsigns=NULL;

	mov	DWORD PTR _callsigns$[ebp], 0

; 231  : 	long numcalls=0;

	mov	DWORD PTR _numcalls$[ebp], 0

; 232  : 
; 233  : 
; 234  : 	// initialize storage for drawable poled objects
; 235  : 	#ifdef USE_SH_POOLS
; 236  : 	DrawablePoled::InitializeStorage();
; 237  : 	#endif
; 238  : 
; 239  : 	F4Assert(name != NULL);
; 240  : 
; 241  : 	_tape = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+156], 0

; 242  : 	_entityReadHeads = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], 0

; 243  : 	_simTapeEntities = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 244  : 	_simTapeFeatures = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 0

; 245  : 	_activeEventHead = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 0

; 246  : 	_eventList = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], 0

; 247  : 	_screenCapturing = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 248  : 	_wingTrails = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 249  : 	_tapeObjScale = 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+212], xmm0

; 250  : 
; 251  : 	// set our render and viewpoint
; 252  : 	_renderer = renderer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	DWORD PTR [eax+128], ecx

; 253  : 	_viewPoint = viewPoint;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _viewPoint$[ebp]
	mov	DWORD PTR [edx+124], eax

; 254  : 	
; 255  : 	Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@ACMITape@@AAEXXZ			; ACMITape::Init

; 256  : 
; 257  : 	// Open up a map file with the given name.
; 258  : 
; 259  : 	// edg note on hack: right now, ALWAYS do an import from the acmi.flt
; 260  : 	// file to convert to a tape file.  Later we'll probably want to import
; 261  : 	// right after an ACMIU record session to get into .vhs format
; 262  : 	//strcpy( fullName, "campaign\\save\\fltfiles\\" );
; 263  : 	strcpy( fullName, "acmibin\\" );

	push	OFFSET ??_C@_08DIILMCIP@acmibin?2?$AA@
	lea	ecx, DWORD PTR _fullName$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 264  : 	strcat( fullName, name );

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	lea	eax, DWORD PTR _fullName$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 265  : 
; 266  : 	// commented out if statement for quick testing....
; 267  :  	// if ( Import( fullName ) )
; 268  : 	{
; 269  : 		// create the memory mapping
; 270  : 		length=OpenTapeFile( fullName );

	lea	ecx, DWORD PTR _fullName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenTapeFile@ACMITape@@AAEJPAD@Z	; ACMITape::OpenTapeFile
	mov	DWORD PTR _length$[ebp], eax

; 271  : 
; 272  : 		// just test
; 273  : 		if ( IsLoaded() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLoaded@ACMITape@@QAEHXZ		; ACMITape::IsLoaded
	test	eax, eax
	je	$LN14@ACMITape

; 274  : 		{
; 275  : 			numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 276  : 
; 277  : 			for ( i= 0; i < numEntities; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@ACMITape
$LN12@ACMITape:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@ACMITape:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numEntities$[ebp]
	jge	SHORT $LN11@ACMITape

; 278  : 			{
; 279  : 				e = EntityData( i );

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z ; ACMITape::EntityData
	mov	DWORD PTR _e$[ebp], eax

; 280  : 				MonoPrint( "Entity %d: Type = %d, Id = %d, Offset = %d\n",
; 281  : 							i,
; 282  : 							e->type,
; 283  : 							e->uniqueID,
; 284  : 							e->firstPositionDataOffset );

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@JNEEFDOD@Entity?5?$CFd?3?5Type?5?$DN?5?$CFd?0?5Id?5?$DN?5?$CFd?0?5O@
	call	_MonoPrint
	add	esp, 20					; 00000014H

; 285  : 	
; 286  : 			
; 287  : 			}

	jmp	SHORT $LN12@ACMITape
$LN11@ACMITape:

; 288  : 
; 289  : 			// CloseTapeFile();
; 290  : 		}
; 291  : 		else

	jmp	SHORT $LN10@ACMITape
$LN14@ACMITape:

; 292  : 		{
; 293  : 			MonoPrint( "Unable to test memory mapped tape file\n" );

	push	OFFSET ??_C@_0CI@GLDDLJCL@Unable?5to?5test?5memory?5mapped?5tap@
	call	_MonoPrint
	add	esp, 4
$LN10@ACMITape:

; 294  : 		}
; 295  : 	}
; 296  : 
; 297  : 	// If it loaded, do any additional setup.
; 298  : 	if(IsLoaded())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLoaded@ACMITape@@QAEHXZ		; ACMITape::IsLoaded
	test	eax, eax
	je	$LN9@ACMITape

; 299  : 	{
; 300  : 		// Setup Callsigns...
; 301  : 		callsigns=(char*)GetCallsignList(&numcalls);

	lea	eax, DWORD PTR _numcalls$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCallsignList@ACMITape@@QAEPAXPAJ@Z	; ACMITape::GetCallsignList
	mov	DWORD PTR _callsigns$[ebp], eax

; 302  : 		if(((char *)callsigns - (char *)_tape) < length && numcalls > 0) // there are callsigns...

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _callsigns$[ebp]
	sub	edx, DWORD PTR [ecx+156]
	cmp	edx, DWORD PTR _length$[ebp]
	jge	SHORT $LN8@ACMITape
	cmp	DWORD PTR _numcalls$[ebp], 0
	jle	SHORT $LN8@ACMITape

; 303  : 		{
; 304  : 			ACMI_Callsigns=new ACMI_CallRec[numcalls];

	xor	ecx, ecx
	mov	eax, DWORD PTR _numcalls$[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A, eax ; ACMI_Callsigns

; 305  : 			memcpy(ACMI_Callsigns,callsigns,sizeof(ACMI_CallRec)*numcalls);

	mov	ecx, DWORD PTR _numcalls$[ebp]
	imul	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _callsigns$[ebp]
	push	edx
	mov	eax, DWORD PTR ?ACMI_Callsigns@@3PAUACMI_CallRec@@A ; ACMI_Callsigns
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@ACMITape:

; 306  : 		}
; 307  : 
; 308  : 		numEntities = NumEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumEntities@ACMITape@@QAEHXZ		; ACMITape::NumEntities
	mov	DWORD PTR _numEntities$[ebp], eax

; 309  : 
; 310  : 		// Setup entity event callbacks. and read heads
; 311  : 		_entityReadHeads = new ACMIEntityReadHead[numEntities];

	xor	ecx, ecx
	mov	eax, DWORD PTR _numEntities$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+160], ecx

; 312  : 		F4Assert(_entityReadHeads != NULL);
; 313  : 
; 314  : 		for(i = 0; i < numEntities; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@ACMITape
$LN6@ACMITape:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@ACMITape:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numEntities$[ebp]
	jge	SHORT $LN5@ACMITape

; 315  : 		{
; 316  : 			// set the read heads to the first position
; 317  : 			e = EntityData( i );

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityData@ACMITape@@QAEPAUACMIEntityData@@H@Z ; ACMITape::EntityData
	mov	DWORD PTR _e$[ebp], eax

; 318  : 			_entityReadHeads[i].positionDataOffset = e->firstPositionDataOffset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+ecx*8], edx

; 319  : 			_entityReadHeads[i].eventDataOffset = e->firstEventDataOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 320  : 		}

	jmp	SHORT $LN6@ACMITape
$LN5@ACMITape:

; 321  : 
; 322  : 		// Setup general event callbacks.
; 323  : 		SetGeneralEventCallbacks
; 324  : 		(
; 325  : 			DefaultForwardACMIGeneralEventCallback,
; 326  : 			DefaultReverseACMIGeneralEventCallback,
; 327  : 			NULL
; 328  : 		);

	push	0
	push	OFFSET ?DefaultReverseACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z ; DefaultReverseACMIGeneralEventCallback
	push	OFFSET ?DefaultForwardACMIGeneralEventCallback@@YAXPAVACMITape@@UEventIdData@@PAX2@Z ; DefaultForwardACMIGeneralEventCallback
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGeneralEventCallbacks@ACMITape@@QAEXP6AXPAV1@UEventIdData@@PAX2@Z32@Z ; ACMITape::SetGeneralEventCallbacks

; 329  : 
; 330  : 		// setup the sim tape entities
; 331  : 		SetupSimTapeEntities();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupSimTapeEntities@ACMITape@@AAEXXZ	; ACMITape::SetupSimTapeEntities

; 332  : 
; 333  : 		// create an array of ActiveEvent pointers -- 1 for every event
; 334  : 		_eventList = new ActiveEvent * [ _tapeHdr.numEvents ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+188], ecx

; 335  : 		// make sure they're null
; 336  : 		memset( _eventList, 0, sizeof( ActiveEvent * ) * _tapeHdr.numEvents );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 337  : 
; 338  : 		// set the first and last event trailer pointers
; 339  : 		if ( _tapeHdr.numEvents == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN4@ACMITape

; 340  : 		{
; 341  : 			_firstEventTrailer = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0

; 342  : 			_lastEventTrailer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], 0

; 343  : 		}
; 344  : 		else

	jmp	SHORT $LN3@ACMITape
$LN4@ACMITape:

; 345  : 		{
; 346  : 			_firstEventTrailer = (ACMIEventTrailer *)( (char *)_tape + _tapeHdr.firstEventTrailerOffset );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], ecx

; 347  : 			_lastEventTrailer = _firstEventTrailer + (_tapeHdr.numEvents - 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	lea	edx, DWORD PTR [ecx+edx*8-8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], edx
$LN3@ACMITape:

; 348  : 		}
; 349  : 
; 350  : 		_generalEventReadHeadTrailer = _firstEventTrailer;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR [ecx+168], eax

; 351  : 
; 352  : 		if ( _tapeHdr.numFeatEvents == 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $LN2@ACMITape

; 353  : 		{
; 354  : 			_firstFeatEvent = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+204], 0

; 355  : 			_lastFeatEvent = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], 0

; 356  : 		}
; 357  : 		else

	jmp	SHORT $LN1@ACMITape
$LN2@ACMITape:

; 358  : 		{
; 359  : 			_firstFeatEvent = (ACMIFeatEvent *)( (char *)_tape + _tapeHdr.firstFeatEventOffset );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], edx

; 360  : 			_lastFeatEvent = _firstFeatEvent + (_tapeHdr.numFeatEvents - 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+204]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+208], eax
$LN1@ACMITape:

; 361  : 		}
; 362  : 
; 363  : 		_featEventReadHead = _firstFeatEvent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR [eax+184], edx
$LN9@ACMITape:

; 364  : 	}
; 365  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0ACMITape@@QAE@PADPAVRenderOTW@@PAVRViewPoint@@@Z ENDP ; ACMITape::ACMITape
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_t2$ = -8						; size = 4
_t1$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_CompareEventTrailer PROC

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 154  : 	ACMIEventTrailer *t1 = (ACMIEventTrailer *)p1;

	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _t1$[ebp], eax

; 155  : 	ACMIEventTrailer *t2 = (ACMIEventTrailer *)p2;

	mov	ecx, DWORD PTR _p2$[ebp]
	mov	DWORD PTR _t2$[ebp], ecx

; 156  : 
; 157  : 	if ( t1->timeEnd < t2->timeEnd )

	mov	edx, DWORD PTR _t2$[ebp]
	mov	eax, DWORD PTR _t1$[ebp]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN4@CompareEve

; 158  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN1@CompareEve
	jmp	SHORT $LN1@CompareEve
$LN4@CompareEve:

; 159  : 	else if ( t1->timeEnd > t2->timeEnd )

	mov	ecx, DWORD PTR _t1$[ebp]
	mov	edx, DWORD PTR _t2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN2@CompareEve

; 160  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@CompareEve

; 161  : 	else

	jmp	SHORT $LN1@CompareEve
$LN2@CompareEve:

; 162  : 		return 0;

	xor	eax, eax
$LN1@CompareEve:

; 163  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CompareEventTrailer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_data$ = 8						; size = 4
_DeleteACMIFeatEventImportData PROC

; 216  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 217  : 	delete data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 218  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteACMIFeatEventImportData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_data$ = 8						; size = 4
_DeleteACMIEventHeader PROC

; 198  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 199  : 	delete data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 200  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteACMIEventHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_data$ = 8						; size = 4
_DeleteACMIEntityData PROC

; 189  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 190  : 	delete data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 191  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteACMIEntityData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_data$ = 8						; size = 4
_DeleteACMIEntityPositionData PROC

; 207  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 208  : 	delete data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 209  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteACMIEntityPositionData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
_rawPositionData$ = 8					; size = 4
_DeleteACMIRawPositionData PROC

; 180  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 181  : 	delete rawPositionData;

	mov	eax, DWORD PTR _rawPositionData$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 182  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DeleteACMIRawPositionData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\acmitape.cpp
_TEXT	SEGMENT
_list$ = 8						; size = 4
_DestroyACMIRawPositionDataList PROC

; 170  : {

	push	ebp
	mov	ebp, esp

; 171  : 	// LIST_DESTROY (list, (PFV)DeleteACMIRawPositionData);
; 172  : 	DestroyTheList (list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	?DestroyTheList@@YAXPAULIST@@@Z		; DestroyTheList
	add	esp, 4

; 173  : }

	pop	ebp
	ret	0
_DestroyACMIRawPositionDataList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPRDelta@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dyaw$ = 8						; size = 4
_dpitch$ = 12						; size = 4
_droll$ = 16						; size = 4
?SetYPRDelta@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPRDelta, COMDAT
; _this$ = ecx

; 116  : 	void SetYPRDelta(SM_SCALAR dyaw, SM_SCALAR dpitch,SM_SCALAR droll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		orient_.dyaw_ = dyaw; orient_.dpitch_ = dpitch; orient_.droll_=droll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dyaw$[ebp]
	movss	DWORD PTR [eax+72], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dpitch$[ebp]
	movss	DWORD PTR [ecx+76], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [edx+80], xmm0

; 118  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPRDelta@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPRDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPR@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?SetYPR@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPR, COMDAT
; _this$ = ecx

; 113  : 	void SetYPR(SM_SCALAR yaw, SM_SCALAR pitch, SM_SCALAR roll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		orient_.yaw_ = yaw; orient_.pitch_ = pitch; orient_.roll_ = roll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [ecx+64], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 115  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPR@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetID@DrawableBSP@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@DrawableBSP@@QAEHXZ PROC				; DrawableBSP::GetID, COMDAT
; _this$ = ecx

; 72   : 	int  GetID( void )			{ return id; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+120]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@DrawableBSP@@QAEHXZ ENDP				; DrawableBSP::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?Label@DrawableBSP@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Label@DrawableBSP@@QAEPADXZ PROC			; DrawableBSP::Label, COMDAT
; _this$ = ecx

; 62   : 	char *Label()											{ return label; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?Label@DrawableBSP@@QAEPADXZ ENDP			; DrawableBSP::Label
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?SetTextureSet@DrawableBSP@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?SetTextureSet@DrawableBSP@@QAEXK@Z PROC		; DrawableBSP::SetTextureSet, COMDAT
; _this$ = ecx

; 49   : 	void SetTextureSet( UInt32 set )	{ instance.SetTextureSet( set ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?SetTextureSet@ObjectInstance@@QAEXH@Z	; ObjectInstance::SetTextureSet
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextureSet@DrawableBSP@@QAEXK@Z ENDP		; DrawableBSP::SetTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawsgmt.h
;	COMDAT ?KeepStaleSegs@DrawableTrail@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?KeepStaleSegs@DrawableTrail@@QAEXH@Z PROC		; DrawableTrail::KeepStaleSegs, COMDAT
; _this$ = ecx

; 133  : 	void	KeepStaleSegs( BOOL val ) { keepStaleSegs = val; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+84], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?KeepStaleSegs@DrawableTrail@@QAEXH@Z ENDP		; DrawableTrail::KeepStaleSegs
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?InDisplayList@DrawableObject@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?InDisplayList@DrawableObject@@QAEHXZ PROC		; DrawableObject::InDisplayList, COMDAT
; _this$ = ecx

; 51   : 	BOOL	InDisplayList( void )	{ return (parentList != NULL); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@InDisplayL
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@InDisplayL
$LN3@InDisplayL:
	mov	DWORD PTR tv66[ebp], 0
$LN4@InDisplayL:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InDisplayList@DrawableObject@@QAEHXZ ENDP		; DrawableObject::InDisplayList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetScale@DrawableObject@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetScale@DrawableObject@@QAEXM@Z PROC			; DrawableObject::SetScale, COMDAT
; _this$ = ecx

; 34   :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   :         radius = (s/scale)*radius; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	divss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 36   :         scale = s; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 37   :     };

	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@DrawableObject@@QAEXM@Z ENDP			; DrawableObject::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z PROC	; DrawableObject::GetPosition, COMDAT
; _this$ = ecx

; 28   : 	void GetPosition(Tpoint* pos){ *pos = position; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ENDP	; DrawableObject::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_val$ = 8						; size = 4
_lower$ = 12						; size = 4
_upper$ = 16						; size = 4
?Clamp@@YAMMMM@Z PROC					; Clamp

; 236  : static inline float Clamp(float val, float lower, float upper){

	push	ebp
	mov	ebp, esp

; 237  :     if(val < lower) return lower;

	movss	xmm0, DWORD PTR _lower$[ebp]
	comiss	xmm0, DWORD PTR _val$[ebp]
	jbe	SHORT $LN4@Clamp
	fld	DWORD PTR _lower$[ebp]
	jmp	SHORT $LN1@Clamp
	jmp	SHORT $LN1@Clamp
$LN4@Clamp:

; 238  :     else if(val > upper) return upper;

	movss	xmm0, DWORD PTR _val$[ebp]
	comiss	xmm0, DWORD PTR _upper$[ebp]
	jbe	SHORT $LN2@Clamp
	fld	DWORD PTR _upper$[ebp]
	jmp	SHORT $LN1@Clamp
	jmp	SHORT $LN1@Clamp
$LN2@Clamp:

; 239  :     else return val;

	fld	DWORD PTR _val$[ebp]
$LN1@Clamp:

; 240  : }

	pop	ebp
	ret	0
?Clamp@@YAMMMM@Z ENDP					; Clamp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT ?_tcschr@@YAPADPADI@Z
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 4
?_tcschr@@YAPADPADI@Z PROC				; _tcschr, COMDAT

; 2005 :         {return ((char *)_tcschr((const char *)_S, _C)); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __C$[ebp]
	push	eax
	mov	ecx, DWORD PTR __S$[ebp]
	push	ecx
	call	__tcschr
	add	esp, 8
	pop	ebp
	ret	0
?_tcschr@@YAPADPADI@Z ENDP				; _tcschr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcschr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcschr PROC						; COMDAT

; 1479 : __inline _CRPC _tcschr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbschr((_CPUC)_s1,_c);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __c$[ebp]
	push	eax
	mov	ecx, DWORD PTR __s1$[ebp]
	push	ecx
	call	__mbschr
	add	esp, 8
	pop	ebp
	ret	0
__tcschr ENDP
_TEXT	ENDS
END
