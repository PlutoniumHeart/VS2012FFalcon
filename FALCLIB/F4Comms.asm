; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\F4Comms.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_IID_IDirectSoundNotify
PUBLIC	_IID_IKsPropertySet
PUBLIC	_IID_IDirectSoundFXGargle
PUBLIC	_CLSID_DirectDraw
PUBLIC	_CLSID_DirectDraw7
PUBLIC	_CLSID_DirectDrawClipper
PUBLIC	_IID_IDirectDraw
PUBLIC	_IID_IDirectDraw2
PUBLIC	_IID_IDirectDraw4
PUBLIC	_IID_IDirectDraw7
PUBLIC	_IID_IDirectDrawSurface
PUBLIC	_IID_IDirectDrawSurface2
PUBLIC	_IID_IDirectDrawSurface3
PUBLIC	_IID_IDirectDrawSurface4
PUBLIC	_IID_IDirectDrawSurface7
PUBLIC	_IID_IDirectDrawPalette
PUBLIC	_IID_IDirectDrawClipper
PUBLIC	_IID_IDirectDrawColorControl
PUBLIC	_IID_IDirectDrawGammaControl
PUBLIC	_IID_IDirectSoundFXChorus
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	_IID_IDirectSoundFXFlanger
PUBLIC	_CLSID_DirectSound
PUBLIC	_CLSID_DirectSound8
PUBLIC	_CLSID_DirectSoundCapture
PUBLIC	_CLSID_DirectSoundCapture8
PUBLIC	_CLSID_DirectSoundFullDuplex
PUBLIC	_DSDEVID_DefaultPlayback
PUBLIC	_DSDEVID_DefaultCapture
PUBLIC	_DSDEVID_DefaultVoicePlayback
PUBLIC	_DSDEVID_DefaultVoiceCapture
PUBLIC	_IID_IDirectSoundFXEcho
PUBLIC	_IID_IDirectSoundFXDistortion
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	_IID_IDirectSoundFXCompressor
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	_IID_IDirectSoundFXParamEq
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	_IID_IDirectSoundFXI3DL2Reverb
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	_IID_IDirectSoundFXWavesReverb
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	_IID_IDirectSoundCaptureFXAec
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	_IID_IDirectSoundCaptureFXNoiseSuppress
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	_IID_IDirectSoundFullDuplex
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	_IID_IReferenceClock
PUBLIC	_DS3DALG_NO_VIRTUALIZATION
PUBLIC	_DS3DALG_HRTF_FULL
PUBLIC	_DS3DALG_HRTF_LIGHT
PUBLIC	_GUID_DSFX_STANDARD_GARGLE
PUBLIC	_GUID_DSFX_STANDARD_CHORUS
PUBLIC	_GUID_DSFX_STANDARD_FLANGER
PUBLIC	_GUID_DSFX_STANDARD_ECHO
PUBLIC	_GUID_DSFX_STANDARD_DISTORTION
PUBLIC	_GUID_DSFX_STANDARD_COMPRESSOR
PUBLIC	_GUID_DSFX_STANDARD_PARAMEQ
PUBLIC	_GUID_DSFX_STANDARD_I3DL2REVERB
PUBLIC	_GUID_DSFX_WAVES_REVERB
PUBLIC	_GUID_DSCFX_CLASS_AEC
PUBLIC	_GUID_DSCFX_MS_AEC
PUBLIC	_GUID_DSCFX_SYSTEM_AEC
PUBLIC	_GUID_DSCFX_CLASS_NS
PUBLIC	_GUID_DSCFX_MS_NS
PUBLIC	_GUID_DSCFX_SYSTEM_NS
PUBLIC	_CLSID_DirectPlayVoiceClient
PUBLIC	_CLSID_DirectPlayVoiceServer
PUBLIC	_CLSID_DirectPlayVoiceTest
PUBLIC	_IID_IDirectPlayVoiceClient
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	_IID_IDirectPlayVoiceServer
PUBLIC	_IID_IDirectPlayVoiceTest
PUBLIC	_DPVCTGUID_ADPCM
PUBLIC	_IID_IDirectSound
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	_DPVCTGUID_GSM
PUBLIC	_DPVCTGUID_NONE
PUBLIC	_DPVCTGUID_SC03
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	_DPVCTGUID_SC06
PUBLIC	_DPVCTGUID_TRUESPEECH
PUBLIC	_DPVCTGUID_VR12
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	_IID_IDirectSound8
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	_IID_IDirectSoundBuffer
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	_CLSID_DirectPlay8LobbiedApplication
PUBLIC	_CLSID_DirectPlay8LobbyClient
PUBLIC	?F4CommsIdealPacketSize@@3HA			; F4CommsIdealPacketSize
PUBLIC	_IID_IDirectPlay8LobbiedApplication
PUBLIC	?F4CommsIdealTCPPacketSize@@3HA			; F4CommsIdealTCPPacketSize
PUBLIC	_IID_IDirectPlay8LobbyClient
PUBLIC	?F4CommsIdealUDPPacketSize@@3HA			; F4CommsIdealUDPPacketSize
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?F4CommsMaxTCPMessageSize@@3HA			; F4CommsMaxTCPMessageSize
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?F4CommsMaxUDPMessageSize@@3HA			; F4CommsMaxUDPMessageSize
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?F4VuMaxTCPMessageSize@@3HA			; F4VuMaxTCPMessageSize
PUBLIC	?F4VuMaxUDPMessageSize@@3HA			; F4VuMaxUDPMessageSize
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?F4VuMaxTCPPackSize@@3HA			; F4VuMaxTCPPackSize
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?F4VuMaxUDPPackSize@@3HA			; F4VuMaxUDPPackSize
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?F4CommsBandwidth@@3HA				; F4CommsBandwidth
PUBLIC	?F4CommsLatency@@3HA				; F4CommsLatency
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?F4CommsDropInterval@@3HA			; F4CommsDropInterval
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?F4CommsSwapInterval@@3HA			; F4CommsSwapInterval
PUBLIC	_IID_IDirect3D
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?F4SessionUpdateTime@@3HA			; F4SessionUpdateTime
PUBLIC	_IID_IDirect3D2
PUBLIC	?F4SessionAliveTimeout@@3HA			; F4SessionAliveTimeout
PUBLIC	_IID_IDirect3D3
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?F4CommsMTU@@3HA				; F4CommsMTU
PUBLIC	_IID_IDirect3D7
PUBLIC	_IID_IDirect3DRampDevice
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	_IID_IDirect3DRGBDevice
PUBLIC	?FalconServerTCPStatus@@3HA			; FalconServerTCPStatus
PUBLIC	_IID_IDirect3DHALDevice
PUBLIC	?FalconConnectionProtocol@@3HA			; FalconConnectionProtocol
PUBLIC	?FalconConnectionType@@3HA			; FalconConnectionType
PUBLIC	_IID_IDirect3DMMXDevice
PUBLIC	?FalconConnectionDescription@@3HA		; FalconConnectionDescription
PUBLIC	_IID_IDirect3DRefDevice
PUBLIC	_IID_IDirect3DNullDevice
PUBLIC	?gConnectionStatus@@3HA				; gConnectionStatus
PUBLIC	_IID_IDirect3DTnLHalDevice
PUBLIC	?gTimeModeServer@@3HA				; gTimeModeServer
PUBLIC	_IID_IDirect3DDevice
PUBLIC	?DanglingSessionsList@@3PAVFalconPrivateList@@A	; DanglingSessionsList
PUBLIC	?FalconTCPListenHandle@@3PAUcomapihandle@@A	; FalconTCPListenHandle
PUBLIC	_IID_IDirect3DDevice2
PUBLIC	_IID_IDirect3DDevice3
PUBLIC	?FalconGlobalUDPHandle@@3PAUcomapihandle@@A	; FalconGlobalUDPHandle
PUBLIC	_IID_IDirect3DDevice7
PUBLIC	?FalconGlobalTCPHandle@@3PAUcomapihandle@@A	; FalconGlobalTCPHandle
PUBLIC	_IID_IDirect3DTexture
PUBLIC	?g_b_forcebandwidth@@3HA			; g_b_forcebandwidth
PUBLIC	?g_ipadress@@3PADA				; g_ipadress
PUBLIC	_IID_IDirect3DTexture2
PUBLIC	_IID_IDirect3DLight
PUBLIC	_IID_IDirect3DMaterial
PUBLIC	_IID_IDirect3DMaterial2
PUBLIC	_IID_IDirect3DMaterial3
PUBLIC	_IID_IDirect3DExecuteBuffer
PUBLIC	_IID_IDirect3DViewport
PUBLIC	_IID_IDirectSoundBuffer8
PUBLIC	_IID_IDirect3DViewport2
PUBLIC	_IID_IDirect3DViewport3
PUBLIC	_IID_IDirect3DVertexBuffer
PUBLIC	_IID_IDirect3DVertexBuffer7
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	_GUID_All_Objects
PUBLIC	_IID_IDirectSound3DListener
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	_OVERRIDE_GUID
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	_IID_IDirectSound3DBuffer
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	_IID_IDirectSoundCapture
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	_IID_IDirectSoundCaptureBuffer
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	_IID_IDirectSoundCaptureBuffer8
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
_BSS	SEGMENT
?F4CommsIdealPacketSize@@3HA DD 01H DUP (?)		; F4CommsIdealPacketSize
?F4CommsIdealTCPPacketSize@@3HA DD 01H DUP (?)		; F4CommsIdealTCPPacketSize
?F4CommsIdealUDPPacketSize@@3HA DD 01H DUP (?)		; F4CommsIdealUDPPacketSize
?F4CommsMaxTCPMessageSize@@3HA DD 01H DUP (?)		; F4CommsMaxTCPMessageSize
?F4CommsMaxUDPMessageSize@@3HA DD 01H DUP (?)		; F4CommsMaxUDPMessageSize
?F4VuMaxTCPMessageSize@@3HA DD 01H DUP (?)		; F4VuMaxTCPMessageSize
?F4VuMaxUDPMessageSize@@3HA DD 01H DUP (?)		; F4VuMaxUDPMessageSize
?F4VuMaxTCPPackSize@@3HA DD 01H DUP (?)			; F4VuMaxTCPPackSize
?F4VuMaxUDPPackSize@@3HA DD 01H DUP (?)			; F4VuMaxUDPPackSize
?F4CommsBandwidth@@3HA DD 01H DUP (?)			; F4CommsBandwidth
?F4CommsDropInterval@@3HA DD 01H DUP (?)		; F4CommsDropInterval
?F4CommsSwapInterval@@3HA DD 01H DUP (?)		; F4CommsSwapInterval
?F4SessionUpdateTime@@3HA DD 01H DUP (?)		; F4SessionUpdateTime
?F4SessionAliveTimeout@@3HA DD 01H DUP (?)		; F4SessionAliveTimeout
?F4CommsMTU@@3HA DD 01H DUP (?)				; F4CommsMTU
?FalconServerTCPStatus@@3HA DD 01H DUP (?)		; FalconServerTCPStatus
?FalconConnectionProtocol@@3HA DD 01H DUP (?)		; FalconConnectionProtocol
?FalconConnectionType@@3HA DD 01H DUP (?)		; FalconConnectionType
?FalconConnectionDescription@@3HA DD 01H DUP (?)	; FalconConnectionDescription
?gConnectionStatus@@3HA DD 01H DUP (?)			; gConnectionStatus
?gTimeModeServer@@3HA DD 01H DUP (?)			; gTimeModeServer
?DanglingSessionsList@@3PAVFalconPrivateList@@A DD 01H DUP (?) ; DanglingSessionsList
?FalconTCPListenHandle@@3PAUcomapihandle@@A DD 01H DUP (?) ; FalconTCPListenHandle
?FalconGlobalUDPHandle@@3PAUcomapihandle@@A DD 01H DUP (?) ; FalconGlobalUDPHandle
?FalconGlobalTCPHandle@@3PAUcomapihandle@@A DD 01H DUP (?) ; FalconGlobalTCPHandle
?g_b_forcebandwidth@@3HA DD 01H DUP (?)			; g_b_forcebandwidth
?g_ipadress@@3PADA DD 01H DUP (?)			; g_ipadress
_BSS	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT _IID_IDirectSoundCaptureBuffer8
CONST	SEGMENT
_IID_IDirectSoundCaptureBuffer8 DD 0990df4H
	DW	0dbbH
	DW	04872H
	DB	083H
	DB	03eH
	DB	06dH
	DB	030H
	DB	03eH
	DB	080H
	DB	0aeH
	DB	0b6H
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT _IID_IDirectSoundCaptureBuffer
CONST	SEGMENT
_IID_IDirectSoundCaptureBuffer DD 0b0210782H
	DW	089cdH
	DW	011d0H
	DB	0afH
	DB	08H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	025H
	DB	0cdH
	DB	016H
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT _IID_IDirectSoundCapture
CONST	SEGMENT
_IID_IDirectSoundCapture DD 0b0210781H
	DW	089cdH
	DW	011d0H
	DB	0afH
	DB	08H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	025H
	DB	0cdH
	DB	016H
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT _IID_IDirectSound3DBuffer
CONST	SEGMENT
_IID_IDirectSound3DBuffer DD 0279afa86H
	DW	04981H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT _OVERRIDE_GUID
CONST	SEGMENT
_OVERRIDE_GUID DD 0126e6180H
	DW	0d307H
	DW	011d0H
	DB	09cH
	DB	04fH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	042H
	DB	05eH
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT _IID_IDirectSound3DListener
CONST	SEGMENT
_IID_IDirectSound3DListener DD 0279afa84H
	DW	04981H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT _GUID_All_Objects
CONST	SEGMENT
_GUID_All_Objects DD 0aa114de5H
	DW	0c262H
	DW	04169H
	DB	0a1H
	DB	0c8H
	DB	023H
	DB	0d6H
	DB	098H
	DB	0ccH
	DB	073H
	DB	0b5H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexBuffer7
CONST	SEGMENT
_IID_IDirect3DVertexBuffer7 DD 0f5049e7dH
	DW	04861H
	DW	011d2H
	DB	0a4H
	DB	07H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	06H
	DB	029H
	DB	0a8H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexBuffer
CONST	SEGMENT
_IID_IDirect3DVertexBuffer DD 07a503555H
	DW	04a83H
	DW	011d1H
	DB	0a5H
	DB	0dbH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	067H
	DB	0f8H
CONST	ENDS
;	COMDAT _IID_IDirect3DViewport3
CONST	SEGMENT
_IID_IDirect3DViewport3 DD 0b0ab3b61H
	DW	033d7H
	DW	011d1H
	DB	0a9H
	DB	081H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0d7H
	DB	0b1H
	DB	074H
CONST	ENDS
;	COMDAT _IID_IDirect3DViewport2
CONST	SEGMENT
_IID_IDirect3DViewport2 DD 093281500H
	DW	08cf8H
	DW	011d0H
	DB	089H
	DB	0abH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirectSoundBuffer8
CONST	SEGMENT
_IID_IDirectSoundBuffer8 DD 06825a449H
	DW	07524H
	DW	04d82H
	DB	092H
	DB	0fH
	DB	050H
	DB	0e3H
	DB	06aH
	DB	0b3H
	DB	0abH
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IDirect3DViewport
CONST	SEGMENT
_IID_IDirect3DViewport DD 04417c146H
	DW	033adH
	DW	011cfH
	DB	081H
	DB	06fH
	DB	00H
	DB	00H
	DB	0c0H
	DB	020H
	DB	015H
	DB	06eH
CONST	ENDS
;	COMDAT _IID_IDirect3DExecuteBuffer
CONST	SEGMENT
_IID_IDirect3DExecuteBuffer DD 04417c145H
	DW	033adH
	DW	011cfH
	DB	081H
	DB	06fH
	DB	00H
	DB	00H
	DB	0c0H
	DB	020H
	DB	015H
	DB	06eH
CONST	ENDS
;	COMDAT _IID_IDirect3DMaterial3
CONST	SEGMENT
_IID_IDirect3DMaterial3 DD 0ca9c46f4H
	DW	0d3c5H
	DW	011d1H
	DB	0b7H
	DB	05aH
	DB	00H
	DB	060H
	DB	08H
	DB	052H
	DB	0b3H
	DB	012H
CONST	ENDS
;	COMDAT _IID_IDirect3DMaterial2
CONST	SEGMENT
_IID_IDirect3DMaterial2 DD 093281503H
	DW	08cf8H
	DW	011d0H
	DB	089H
	DB	0abH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirect3DMaterial
CONST	SEGMENT
_IID_IDirect3DMaterial DD 04417c144H
	DW	033adH
	DW	011cfH
	DB	081H
	DB	06fH
	DB	00H
	DB	00H
	DB	0c0H
	DB	020H
	DB	015H
	DB	06eH
CONST	ENDS
;	COMDAT _IID_IDirect3DLight
CONST	SEGMENT
_IID_IDirect3DLight DD 04417c142H
	DW	033adH
	DW	011cfH
	DB	081H
	DB	06fH
	DB	00H
	DB	00H
	DB	0c0H
	DB	020H
	DB	015H
	DB	06eH
CONST	ENDS
;	COMDAT _IID_IDirect3DTexture2
CONST	SEGMENT
_IID_IDirect3DTexture2 DD 093281502H
	DW	08cf8H
	DW	011d0H
	DB	089H
	DB	0abH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirect3DTexture
CONST	SEGMENT
_IID_IDirect3DTexture DD 02cdcd9e0H
	DW	025a0H
	DW	011cfH
	DB	0a3H
	DB	01aH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b9H
	DB	033H
	DB	056H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice7
CONST	SEGMENT
_IID_IDirect3DDevice7 DD 0f5049e79H
	DW	04861H
	DW	011d2H
	DB	0a4H
	DB	07H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	06H
	DB	029H
	DB	0a8H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice3
CONST	SEGMENT
_IID_IDirect3DDevice3 DD 0b0ab3b60H
	DW	033d7H
	DW	011d1H
	DB	0a9H
	DB	081H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0d7H
	DB	0b1H
	DB	074H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice2
CONST	SEGMENT
_IID_IDirect3DDevice2 DD 093281501H
	DW	08cf8H
	DW	011d0H
	DB	089H
	DB	0abH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice
CONST	SEGMENT
_IID_IDirect3DDevice DD 064108800H
	DW	0957dH
	DW	011d0H
	DB	089H
	DB	0abH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirect3DTnLHalDevice
CONST	SEGMENT
_IID_IDirect3DTnLHalDevice DD 0f5049e78H
	DW	04861H
	DW	011d2H
	DB	0a4H
	DB	07H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	06H
	DB	029H
	DB	0a8H
CONST	ENDS
;	COMDAT _IID_IDirect3DNullDevice
CONST	SEGMENT
_IID_IDirect3DNullDevice DD 08767df22H
	DW	0baccH
	DW	011d1H
	DB	089H
	DB	069H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	06H
	DB	029H
	DB	0a8H
CONST	ENDS
;	COMDAT _IID_IDirect3DRefDevice
CONST	SEGMENT
_IID_IDirect3DRefDevice DD 050936643H
	DW	013e9H
	DW	011d1H
	DB	089H
	DB	0aaH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirect3DMMXDevice
CONST	SEGMENT
_IID_IDirect3DMMXDevice DD 0881949a1H
	DW	0d6f3H
	DW	011d0H
	DB	089H
	DB	0abH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	05H
	DB	041H
	DB	029H
CONST	ENDS
;	COMDAT _IID_IDirect3DHALDevice
CONST	SEGMENT
_IID_IDirect3DHALDevice DD 084e63de0H
	DW	046aaH
	DW	011cfH
	DB	081H
	DB	06fH
	DB	00H
	DB	00H
	DB	0c0H
	DB	020H
	DB	015H
	DB	06eH
CONST	ENDS
;	COMDAT _IID_IDirect3DRGBDevice
CONST	SEGMENT
_IID_IDirect3DRGBDevice DD 0a4665c60H
	DW	02673H
	DW	011cfH
	DB	0a3H
	DB	01aH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b9H
	DB	033H
	DB	056H
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT _IID_IDirect3DRampDevice
CONST	SEGMENT
_IID_IDirect3DRampDevice DD 0f2086b20H
	DW	0259fH
	DW	011cfH
	DB	0a3H
	DB	01aH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b9H
	DB	033H
	DB	056H
CONST	ENDS
;	COMDAT _IID_IDirect3D7
CONST	SEGMENT
_IID_IDirect3D7 DD 0f5049e77H
	DW	04861H
	DW	011d2H
	DB	0a4H
	DB	07H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	06H
	DB	029H
	DB	0a8H
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT _IID_IDirect3D3
CONST	SEGMENT
_IID_IDirect3D3 DD 0bb223240H
	DW	0e72bH
	DW	011d0H
	DB	0a9H
	DB	0b4H
	DB	00H
	DB	0aaH
	DB	00H
	DB	0c0H
	DB	099H
	DB	03eH
CONST	ENDS
;	COMDAT _IID_IDirect3D2
CONST	SEGMENT
_IID_IDirect3D2 DD 06aae1ec1H
	DW	0662aH
	DW	011d0H
	DB	088H
	DB	09dH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0bbH
	DB	0b7H
	DB	06aH
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT _IID_IDirect3D
CONST	SEGMENT
_IID_IDirect3D DD 03bba0080H
	DW	02421H
	DW	011cfH
	DB	0a3H
	DB	01aH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b9H
	DB	033H
	DB	056H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
_DATA	SEGMENT
?F4CommsLatency@@3HA DD 064H				; F4CommsLatency
_DATA	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT _IID_IDirectPlay8LobbyClient
CONST	SEGMENT
_IID_IDirectPlay8LobbyClient DD 0819074a2H
	DW	016cH
	DW	011d3H
	DB	0aeH
	DB	014H
	DB	00H
	DB	060H
	DB	097H
	DB	0b0H
	DB	014H
	DB	011H
CONST	ENDS
;	COMDAT _IID_IDirectPlay8LobbiedApplication
CONST	SEGMENT
_IID_IDirectPlay8LobbiedApplication DD 0819074a3H
	DW	016cH
	DW	011d3H
	DB	0aeH
	DB	014H
	DB	00H
	DB	060H
	DB	097H
	DB	0b0H
	DB	014H
	DB	011H
CONST	ENDS
;	COMDAT _CLSID_DirectPlay8LobbyClient
CONST	SEGMENT
_CLSID_DirectPlay8LobbyClient DD 03b2b6775H
	DW	070b6H
	DW	045afH
	DB	08dH
	DB	0eaH
	DB	0a2H
	DB	09H
	DB	0c6H
	DB	095H
	DB	059H
	DB	0f3H
CONST	ENDS
;	COMDAT _CLSID_DirectPlay8LobbiedApplication
CONST	SEGMENT
_CLSID_DirectPlay8LobbiedApplication DD 0667955adH
	DW	06b3bH
	DW	043caH
	DB	0b9H
	DB	049H
	DB	0bcH
	DB	069H
	DB	0b5H
	DB	0baH
	DB	0ffH
	DB	07fH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT _IID_IDirectSoundBuffer
CONST	SEGMENT
_IID_IDirectSoundBuffer DD 0279afa85H
	DW	04981H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT _IID_IDirectSound8
CONST	SEGMENT
_IID_IDirectSound8 DD 0c50a7e93H
	DW	0f395H
	DW	04834H
	DB	09eH
	DB	0f6H
	DB	07fH
	DB	0a9H
	DB	09dH
	DB	0e5H
	DB	09H
	DB	066H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT _DPVCTGUID_VR12
CONST	SEGMENT
_DPVCTGUID_VR12 DD 0fe44a9feH
	DW	08ed4H
	DW	048bfH
	DB	09dH
	DB	066H
	DB	01bH
	DB	01aH
	DB	0dfH
	DB	0f9H
	DB	0ffH
	DB	06dH
CONST	ENDS
;	COMDAT _DPVCTGUID_TRUESPEECH
CONST	SEGMENT
_DPVCTGUID_TRUESPEECH DD 0d7954361H
	DW	05a0bH
	DW	011d3H
	DB	09bH
	DB	0e4H
	DB	052H
	DB	054H
	DB	00H
	DB	0d9H
	DB	085H
	DB	0e7H
CONST	ENDS
;	COMDAT _DPVCTGUID_SC06
CONST	SEGMENT
_DPVCTGUID_SC06 DD 053def900H
	DW	07168H
	DW	04633H
	DB	0b4H
	DB	07fH
	DB	0d1H
	DB	043H
	DB	091H
	DB	06aH
	DB	013H
	DB	0c7H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT _DPVCTGUID_SC03
CONST	SEGMENT
_DPVCTGUID_SC03 DD 07d82a29bH
	DW	02242H
	DW	04f82H
	DB	08fH
	DB	039H
	DB	05dH
	DB	011H
	DB	053H
	DB	0dfH
	DB	03eH
	DB	041H
CONST	ENDS
;	COMDAT _DPVCTGUID_NONE
CONST	SEGMENT
_DPVCTGUID_NONE DD 08de12fd4H
	DW	07cb3H
	DW	048ceH
	DB	0a7H
	DB	0e8H
	DB	09cH
	DB	047H
	DB	0a2H
	DB	02eH
	DB	08aH
	DB	0c5H
CONST	ENDS
;	COMDAT _DPVCTGUID_GSM
CONST	SEGMENT
_DPVCTGUID_GSM DD 024768c60H
	DW	05a0dH
	DW	011d3H
	DB	09bH
	DB	0e4H
	DB	052H
	DB	054H
	DB	00H
	DB	0d9H
	DB	085H
	DB	0e7H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT _IID_IDirectSound
CONST	SEGMENT
_IID_IDirectSound DD 0279afa83H
	DW	04981H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT _DPVCTGUID_ADPCM
CONST	SEGMENT
_DPVCTGUID_ADPCM DD 0699b52c1H
	DW	0a885H
	DW	046a8H
	DB	0a3H
	DB	08H
	DB	097H
	DB	017H
	DB	024H
	DB	019H
	DB	0adH
	DB	0c7H
CONST	ENDS
;	COMDAT _IID_IDirectPlayVoiceTest
CONST	SEGMENT
_IID_IDirectPlayVoiceTest DD 0d26af734H
	DW	0208bH
	DW	041daH
	DB	082H
	DB	024H
	DB	0e0H
	DB	0ceH
	DB	079H
	DB	081H
	DB	0bH
	DB	0e1H
CONST	ENDS
;	COMDAT _IID_IDirectPlayVoiceServer
CONST	SEGMENT
_IID_IDirectPlayVoiceServer DD 0faa1c173H
	DW	0468H
	DW	043b6H
	DB	08aH
	DB	02aH
	DB	0eaH
	DB	08aH
	DB	04fH
	DB	020H
	DB	076H
	DB	0c9H
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT _IID_IDirectPlayVoiceClient
CONST	SEGMENT
_IID_IDirectPlayVoiceClient DD 01dfdc8eaH
	DW	0bcf7H
	DW	041d6H
	DB	0b2H
	DB	095H
	DB	0abH
	DB	064H
	DB	0b3H
	DB	0b2H
	DB	033H
	DB	06H
CONST	ENDS
;	COMDAT _CLSID_DirectPlayVoiceTest
CONST	SEGMENT
_CLSID_DirectPlayVoiceTest DD 0f0f094bH
	DW	0b01cH
	DW	04091H
	DB	0a1H
	DB	04dH
	DB	0ddH
	DB	0cH
	DB	0d8H
	DB	07H
	DB	071H
	DB	01aH
CONST	ENDS
;	COMDAT _CLSID_DirectPlayVoiceServer
CONST	SEGMENT
_CLSID_DirectPlayVoiceServer DD 0d3f5b8e6H
	DW	09b78H
	DW	04a4cH
	DB	094H
	DB	0eaH
	DB	0caH
	DB	023H
	DB	097H
	DB	0b6H
	DB	063H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_DirectPlayVoiceClient
CONST	SEGMENT
_CLSID_DirectPlayVoiceClient DD 0b9f3eb85H
	DW	0b781H
	DW	04ac1H
	DB	08dH
	DB	090H
	DB	093H
	DB	0a0H
	DB	05eH
	DB	0e3H
	DB	07dH
	DB	07dH
CONST	ENDS
;	COMDAT _GUID_DSCFX_SYSTEM_NS
CONST	SEGMENT
_GUID_DSCFX_SYSTEM_NS DD 05ab0882eH
	DW	07274H
	DW	04516H
	DB	087H
	DB	07dH
	DB	04eH
	DB	0eeH
	DB	099H
	DB	0baH
	DB	04fH
	DB	0d0H
CONST	ENDS
;	COMDAT _GUID_DSCFX_MS_NS
CONST	SEGMENT
_GUID_DSCFX_MS_NS DD 011c5c73bH
	DW	066e9H
	DW	04ba1H
	DB	0a0H
	DB	0baH
	DB	0e8H
	DB	014H
	DB	0c6H
	DB	0eeH
	DB	0d9H
	DB	02dH
CONST	ENDS
;	COMDAT _GUID_DSCFX_CLASS_NS
CONST	SEGMENT
_GUID_DSCFX_CLASS_NS DD 0e07f903fH
	DW	062fdH
	DW	04e60H
	DB	08cH
	DB	0ddH
	DB	0deH
	DB	0a7H
	DB	023H
	DB	066H
	DB	065H
	DB	0b5H
CONST	ENDS
;	COMDAT _GUID_DSCFX_SYSTEM_AEC
CONST	SEGMENT
_GUID_DSCFX_SYSTEM_AEC DD 01c22c56dH
	DW	09879H
	DW	04f5bH
	DB	0a3H
	DB	089H
	DB	027H
	DB	099H
	DB	06dH
	DB	0dcH
	DB	028H
	DB	010H
CONST	ENDS
;	COMDAT _GUID_DSCFX_MS_AEC
CONST	SEGMENT
_GUID_DSCFX_MS_AEC DD 0cdebb919H
	DW	0379aH
	DW	0488aH
	DB	087H
	DB	065H
	DB	0f5H
	DB	03cH
	DB	0fdH
	DB	036H
	DB	0deH
	DB	040H
CONST	ENDS
;	COMDAT _GUID_DSCFX_CLASS_AEC
CONST	SEGMENT
_GUID_DSCFX_CLASS_AEC DD 0bf963d80H
	DW	0c559H
	DW	011d0H
	DB	08aH
	DB	02bH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	025H
	DB	05aH
	DB	0c1H
CONST	ENDS
;	COMDAT _GUID_DSFX_WAVES_REVERB
CONST	SEGMENT
_GUID_DSFX_WAVES_REVERB DD 087fc0268H
	DW	09a55H
	DW	04360H
	DB	095H
	DB	0aaH
	DB	00H
	DB	04aH
	DB	01dH
	DB	09dH
	DB	0e2H
	DB	06cH
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_I3DL2REVERB
CONST	SEGMENT
_GUID_DSFX_STANDARD_I3DL2REVERB DD 0ef985e71H
	DW	0d5c7H
	DW	042d4H
	DB	0baH
	DB	04dH
	DB	02dH
	DB	07H
	DB	03eH
	DB	02eH
	DB	096H
	DB	0f4H
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_PARAMEQ
CONST	SEGMENT
_GUID_DSFX_STANDARD_PARAMEQ DD 0120ced89H
	DW	03bf4H
	DW	04173H
	DB	0a1H
	DB	032H
	DB	03cH
	DB	0b4H
	DB	06H
	DB	0cfH
	DB	032H
	DB	031H
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_COMPRESSOR
CONST	SEGMENT
_GUID_DSFX_STANDARD_COMPRESSOR DD 0ef011f79H
	DW	04000H
	DW	0406dH
	DB	087H
	DB	0afH
	DB	0bfH
	DB	0fbH
	DB	03fH
	DB	0c3H
	DB	09dH
	DB	057H
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_DISTORTION
CONST	SEGMENT
_GUID_DSFX_STANDARD_DISTORTION DD 0ef114c90H
	DW	0cd1dH
	DW	0484eH
	DB	096H
	DB	0e5H
	DB	09H
	DB	0cfH
	DB	0afH
	DB	091H
	DB	02aH
	DB	021H
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_ECHO
CONST	SEGMENT
_GUID_DSFX_STANDARD_ECHO DD 0ef3e932cH
	DW	0d40bH
	DW	04f51H
	DB	08cH
	DB	0cfH
	DB	03fH
	DB	098H
	DB	0f1H
	DB	0b2H
	DB	09dH
	DB	05dH
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_FLANGER
CONST	SEGMENT
_GUID_DSFX_STANDARD_FLANGER DD 0efca3d92H
	DW	0dfd8H
	DW	04672H
	DB	0a6H
	DB	03H
	DB	074H
	DB	020H
	DB	089H
	DB	04bH
	DB	0adH
	DB	098H
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_CHORUS
CONST	SEGMENT
_GUID_DSFX_STANDARD_CHORUS DD 0efe6629cH
	DW	081f7H
	DW	04281H
	DB	0bdH
	DB	091H
	DB	0c9H
	DB	0d6H
	DB	04H
	DB	0a9H
	DB	05aH
	DB	0f6H
CONST	ENDS
;	COMDAT _GUID_DSFX_STANDARD_GARGLE
CONST	SEGMENT
_GUID_DSFX_STANDARD_GARGLE DD 0dafd8210H
	DW	05711H
	DW	04b91H
	DB	09fH
	DB	0e3H
	DB	0f7H
	DB	05bH
	DB	07aH
	DB	0e2H
	DB	079H
	DB	0bfH
CONST	ENDS
;	COMDAT _DS3DALG_HRTF_LIGHT
CONST	SEGMENT
_DS3DALG_HRTF_LIGHT DD 0c2413342H
	DW	01c1bH
	DW	011d2H
	DB	094H
	DB	0f5H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	08aH
	DB	0caH
CONST	ENDS
;	COMDAT _DS3DALG_HRTF_FULL
CONST	SEGMENT
_DS3DALG_HRTF_FULL DD 0c2413340H
	DW	01c1bH
	DW	011d2H
	DB	094H
	DB	0f5H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	08aH
	DB	0caH
CONST	ENDS
;	COMDAT _DS3DALG_NO_VIRTUALIZATION
CONST	SEGMENT
_DS3DALG_NO_VIRTUALIZATION DD 0c241333fH
	DW	01c1bH
	DW	011d2H
	DB	094H
	DB	0f5H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	08aH
	DB	0caH
CONST	ENDS
;	COMDAT _IID_IReferenceClock
CONST	SEGMENT
_IID_IReferenceClock DD 056a86897H
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	03aH
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT _IID_IDirectSoundFullDuplex
CONST	SEGMENT
_IID_IDirectSoundFullDuplex DD 0edcb4c7aH
	DW	0daabH
	DW	04216H
	DB	0a4H
	DB	02eH
	DB	06cH
	DB	050H
	DB	059H
	DB	06dH
	DB	0dcH
	DB	01dH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT _IID_IDirectSoundCaptureFXNoiseSuppress
CONST	SEGMENT
_IID_IDirectSoundCaptureFXNoiseSuppress DD 0ed311e41H
	DW	0fbaeH
	DW	04175H
	DB	096H
	DB	025H
	DB	0cdH
	DB	08H
	DB	054H
	DB	0f6H
	DB	093H
	DB	0caH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT _IID_IDirectSoundCaptureFXAec
CONST	SEGMENT
_IID_IDirectSoundCaptureFXAec DD 0ad74143dH
	DW	0903dH
	DW	04ab7H
	DB	080H
	DB	066H
	DB	028H
	DB	0d3H
	DB	063H
	DB	03H
	DB	06dH
	DB	065H
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXWavesReverb
CONST	SEGMENT
_IID_IDirectSoundFXWavesReverb DD 046858c3aH
	DW	0dc6H
	DW	045e3H
	DB	0b7H
	DB	060H
	DB	0d4H
	DB	0eeH
	DB	0f1H
	DB	06cH
	DB	0b3H
	DB	025H
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXI3DL2Reverb
CONST	SEGMENT
_IID_IDirectSoundFXI3DL2Reverb DD 04b166a6aH
	DW	0d66H
	DW	043f3H
	DB	080H
	DB	0e3H
	DB	0eeH
	DB	062H
	DB	080H
	DB	0deH
	DB	0e1H
	DB	0a4H
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXParamEq
CONST	SEGMENT
_IID_IDirectSoundFXParamEq DD 0c03ca9feH
	DW	0fe90H
	DW	04204H
	DB	080H
	DB	078H
	DB	082H
	DB	033H
	DB	04cH
	DB	0d1H
	DB	077H
	DB	0daH
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXCompressor
CONST	SEGMENT
_IID_IDirectSoundFXCompressor DD 04bbd1154H
	DW	062f6H
	DW	04e2cH
	DB	0a1H
	DB	05cH
	DB	0d3H
	DB	0b6H
	DB	0c4H
	DB	017H
	DB	0f7H
	DB	0a0H
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXDistortion
CONST	SEGMENT
_IID_IDirectSoundFXDistortion DD 08ecf4326H
	DW	0455fH
	DW	04d8bH
	DB	0bdH
	DB	0a9H
	DB	08dH
	DB	05dH
	DB	03eH
	DB	09eH
	DB	03eH
	DB	0bH
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXEcho
CONST	SEGMENT
_IID_IDirectSoundFXEcho DD 08bd28edfH
	DW	050dbH
	DW	04e92H
	DB	0a2H
	DB	0bdH
	DB	044H
	DB	054H
	DB	088H
	DB	0d1H
	DB	0edH
	DB	042H
CONST	ENDS
;	COMDAT _DSDEVID_DefaultVoiceCapture
CONST	SEGMENT
_DSDEVID_DefaultVoiceCapture DD 0def00003H
	DW	09c6dH
	DW	047edH
	DB	0aaH
	DB	0f1H
	DB	04dH
	DB	0daH
	DB	08fH
	DB	02bH
	DB	05cH
	DB	03H
CONST	ENDS
;	COMDAT _DSDEVID_DefaultVoicePlayback
CONST	SEGMENT
_DSDEVID_DefaultVoicePlayback DD 0def00002H
	DW	09c6dH
	DW	047edH
	DB	0aaH
	DB	0f1H
	DB	04dH
	DB	0daH
	DB	08fH
	DB	02bH
	DB	05cH
	DB	03H
CONST	ENDS
;	COMDAT _DSDEVID_DefaultCapture
CONST	SEGMENT
_DSDEVID_DefaultCapture DD 0def00001H
	DW	09c6dH
	DW	047edH
	DB	0aaH
	DB	0f1H
	DB	04dH
	DB	0daH
	DB	08fH
	DB	02bH
	DB	05cH
	DB	03H
CONST	ENDS
;	COMDAT _DSDEVID_DefaultPlayback
CONST	SEGMENT
_DSDEVID_DefaultPlayback DD 0def00000H
	DW	09c6dH
	DW	047edH
	DB	0aaH
	DB	0f1H
	DB	04dH
	DB	0daH
	DB	08fH
	DB	02bH
	DB	05cH
	DB	03H
CONST	ENDS
;	COMDAT _CLSID_DirectSoundFullDuplex
CONST	SEGMENT
_CLSID_DirectSoundFullDuplex DD 0fea4300cH
	DW	07959H
	DW	04147H
	DB	0b2H
	DB	06aH
	DB	023H
	DB	077H
	DB	0b9H
	DB	0e7H
	DB	0a9H
	DB	01dH
CONST	ENDS
;	COMDAT _CLSID_DirectSoundCapture8
CONST	SEGMENT
_CLSID_DirectSoundCapture8 DD 0e4bcac13H
	DW	07f99H
	DW	04908H
	DB	09aH
	DB	08eH
	DB	074H
	DB	0e3H
	DB	0bfH
	DB	024H
	DB	0b6H
	DB	0e1H
CONST	ENDS
;	COMDAT _CLSID_DirectSoundCapture
CONST	SEGMENT
_CLSID_DirectSoundCapture DD 0b0210780H
	DW	089cdH
	DW	011d0H
	DB	0afH
	DB	08H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	025H
	DB	0cdH
	DB	016H
CONST	ENDS
;	COMDAT _CLSID_DirectSound8
CONST	SEGMENT
_CLSID_DirectSound8 DD 03901cc3fH
	DW	084b5H
	DW	04fa4H
	DB	0baH
	DB	035H
	DB	0aaH
	DB	081H
	DB	072H
	DB	0b8H
	DB	0a0H
	DB	09bH
CONST	ENDS
;	COMDAT _CLSID_DirectSound
CONST	SEGMENT
_CLSID_DirectSound DD 047d4d946H
	DW	062e8H
	DW	011cfH
	DB	093H
	DB	0bcH
	DB	044H
	DB	045H
	DB	053H
	DB	054H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXFlanger
CONST	SEGMENT
_IID_IDirectSoundFXFlanger DD 0903e9878H
	DW	02c92H
	DW	04072H
	DB	09bH
	DB	02cH
	DB	0eaH
	DB	068H
	DB	0f5H
	DB	039H
	DB	067H
	DB	083H
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXChorus
CONST	SEGMENT
_IID_IDirectSoundFXChorus DD 0880842e3H
	DW	0145fH
	DW	043e6H
	DB	0a9H
	DB	034H
	DB	0a7H
	DB	018H
	DB	06H
	DB	0e5H
	DB	05H
	DB	047H
CONST	ENDS
;	COMDAT _IID_IDirectDrawGammaControl
CONST	SEGMENT
_IID_IDirectDrawGammaControl DD 069c11c3eH
	DW	0b46bH
	DW	011d1H
	DB	0adH
	DB	07aH
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	09bH
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDirectDrawColorControl
CONST	SEGMENT
_IID_IDirectDrawColorControl DD 04b9f0ee0H
	DW	0d7eH
	DW	011d0H
	DB	09bH
	DB	06H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	0a3H
	DB	0b8H
CONST	ENDS
;	COMDAT _IID_IDirectDrawClipper
CONST	SEGMENT
_IID_IDirectDrawClipper DD 06c14db85H
	DW	0a733H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT _IID_IDirectDrawPalette
CONST	SEGMENT
_IID_IDirectDrawPalette DD 06c14db84H
	DW	0a733H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT _IID_IDirectDrawSurface7
CONST	SEGMENT
_IID_IDirectDrawSurface7 DD 06675a80H
	DW	03b9bH
	DW	011d2H
	DB	0b9H
	DB	02fH
	DB	00H
	DB	060H
	DB	097H
	DB	097H
	DB	0eaH
	DB	05bH
CONST	ENDS
;	COMDAT _IID_IDirectDrawSurface4
CONST	SEGMENT
_IID_IDirectDrawSurface4 DD 0b2b8630H
	DW	0ad35H
	DW	011d0H
	DB	08eH
	DB	0a6H
	DB	00H
	DB	060H
	DB	097H
	DB	097H
	DB	0eaH
	DB	05bH
CONST	ENDS
;	COMDAT _IID_IDirectDrawSurface3
CONST	SEGMENT
_IID_IDirectDrawSurface3 DD 0da044e00H
	DW	069b2H
	DW	011d0H
	DB	0a1H
	DB	0d5H
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b8H
	DB	0dfH
	DB	0bbH
CONST	ENDS
;	COMDAT _IID_IDirectDrawSurface2
CONST	SEGMENT
_IID_IDirectDrawSurface2 DD 057805885H
	DW	06eecH
	DW	011cfH
	DB	094H
	DB	041H
	DB	0a8H
	DB	023H
	DB	03H
	DB	0c1H
	DB	0eH
	DB	027H
CONST	ENDS
;	COMDAT _IID_IDirectDrawSurface
CONST	SEGMENT
_IID_IDirectDrawSurface DD 06c14db81H
	DW	0a733H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT _IID_IDirectDraw7
CONST	SEGMENT
_IID_IDirectDraw7 DD 015e65ec0H
	DW	03b9cH
	DW	011d2H
	DB	0b9H
	DB	02fH
	DB	00H
	DB	060H
	DB	097H
	DB	097H
	DB	0eaH
	DB	05bH
CONST	ENDS
;	COMDAT _IID_IDirectDraw4
CONST	SEGMENT
_IID_IDirectDraw4 DD 09c59509aH
	DW	039bdH
	DW	011d1H
	DB	08cH
	DB	04aH
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0d9H
	DB	030H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_IDirectDraw2
CONST	SEGMENT
_IID_IDirectDraw2 DD 0b3a6f3e0H
	DW	02b43H
	DW	011cfH
	DB	0a2H
	DB	0deH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b9H
	DB	033H
	DB	056H
CONST	ENDS
;	COMDAT _IID_IDirectDraw
CONST	SEGMENT
_IID_IDirectDraw DD 06c14db80H
	DW	0a733H
	DW	011ceH
	DB	0a5H
	DB	021H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0e5H
	DB	060H
CONST	ENDS
;	COMDAT _CLSID_DirectDrawClipper
CONST	SEGMENT
_CLSID_DirectDrawClipper DD 0593817a0H
	DW	07db3H
	DW	011cfH
	DB	0a2H
	DB	0deH
	DB	00H
	DB	0aaH
	DB	00H
	DB	0b9H
	DB	033H
	DB	056H
CONST	ENDS
;	COMDAT _CLSID_DirectDraw7
CONST	SEGMENT
_CLSID_DirectDraw7 DD 03c305196H
	DW	050dbH
	DW	011d3H
	DB	09cH
	DB	0feH
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0d9H
	DB	030H
	DB	0c5H
CONST	ENDS
;	COMDAT _CLSID_DirectDraw
CONST	SEGMENT
_CLSID_DirectDraw DD 0d7b70ee0H
	DW	04340H
	DW	011cfH
	DB	0b0H
	DB	063H
	DB	00H
	DB	020H
	DB	0afH
	DB	0c2H
	DB	0cdH
	DB	035H
CONST	ENDS
;	COMDAT _IID_IDirectSoundFXGargle
CONST	SEGMENT
_IID_IDirectSoundFXGargle DD 0d616f352H
	DW	0d622H
	DW	011ceH
	DB	0aaH
	DB	0c5H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	099H
	DB	0a3H
CONST	ENDS
;	COMDAT _IID_IKsPropertySet
CONST	SEGMENT
_IID_IKsPropertySet DD 031efac30H
	DW	0515cH
	DW	011d0H
	DB	0a9H
	DB	0aaH
	DB	00H
	DB	0aaH
	DB	00H
	DB	061H
	DB	0beH
	DB	093H
CONST	ENDS
;	COMDAT _IID_IDirectSoundNotify
CONST	SEGMENT
_IID_IDirectSoundNotify DD 0b0210783H
	DW	089cdH
	DW	011d0H
	DB	0afH
	DB	08H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	025H
	DB	0cdH
	DB	016H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@VVU_SESSION_ID@@K@Z		; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	??0VU_ADDRESS@@QAE@KGG@Z			; VU_ADDRESS::VU_ADDRESS
PUBLIC	??8VU_ADDRESS@@QBE_NABV0@@Z			; VU_ADDRESS::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z		; VuEntity::SetVuState
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?VuxAddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ; VuxAddDanglingSession
PUBLIC	?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z	; VuxSessionConnect
PUBLIC	?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z ; VuxSessionDisconnect
PUBLIC	?VuxGroupConnect@@YAHPAVVuGroupEntity@@@Z	; VuxGroupConnect
PUBLIC	?VuxGroupDisconnect@@YAXPAVVuGroupEntity@@@Z	; VuxGroupDisconnect
PUBLIC	?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z ; VuxGroupAddSession
PUBLIC	?VuxGroupRemoveSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z ; VuxGroupRemoveSession
PUBLIC	?VuxAdjustLatency@@YAXKK@Z			; VuxAdjustLatency
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	?GetCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ; VuTargetEntity::GetCommsStatus
PUBLIC	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
PUBLIC	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
PUBLIC	?GetReliableCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ; VuTargetEntity::GetReliableCommsStatus
PUBLIC	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
PUBLIC	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus
PUBLIC	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress
PUBLIC	?SetAddress@VuSessionEntity@@QAEXVVU_ADDRESS@@@Z ; VuSessionEntity::SetAddress
PUBLIC	?GameAction@VuSessionEntity@@QAE?AW4VU_GAME_ACTION@@XZ ; VuSessionEntity::GameAction
PUBLIC	?GroupName@VuGroupEntity@@QAEPADXZ		; VuGroupEntity::GroupName
PUBLIC	?SessionCount@VuGroupEntity@@QAEHXZ		; VuGroupEntity::SessionCount
PUBLIC	?GameName@VuGameEntity@@QAEPADXZ		; VuGameEntity::GameName
PUBLIC	?InitCommsStuff@@YAHPAVComDataClass@@@Z		; InitCommsStuff
PUBLIC	?EndCommsStuff@@YAHXZ				; EndCommsStuff
PUBLIC	?SetupMessageSizes@@YAXH@Z			; SetupMessageSizes
PUBLIC	?ResyncTimes@@YAXXZ				; ResyncTimes
PUBLIC	?CleanupDanglingList@@YAXXZ			; CleanupDanglingList
PUBLIC	?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ; AddDanglingSession
PUBLIC	?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z ; RemoveDanglingSession
PUBLIC	?F4CommsConnectionCallback@@YAHH@Z		; F4CommsConnectionCallback
PUBLIC	?CleanupComms@@YAHXZ				; CleanupComms
PUBLIC	?TimeStampFunction@@YAKXZ			; TimeStampFunction
PUBLIC	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ; FalconSessionEntity::GetPlayerCallsign
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
PUBLIC	?GetCountry@FalconSessionEntity@@QBEEXZ		; FalconSessionEntity::GetCountry
PUBLIC	?GetAircraftNum@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetAircraftNum
PUBLIC	?GetPilotSlot@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetPilotSlot
PUBLIC	?GetReqCompression@FalconSessionEntity@@QBEFXZ	; FalconSessionEntity::GetReqCompression
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAssignedAircraftNum
PUBLIC	?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetAssignedPlayerFlight
PUBLIC	?SetVuStateAccess@FalconSessionEntity@@QAEXW4VU_MEM@@@Z ; FalconSessionEntity::SetVuStateAccess
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?InitDanglingList@@YAXXZ			; InitDanglingList
PUBLIC	?UpdateDanglingSessions@@YAHXZ			; UpdateDanglingSessions
PUBLIC	??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z ; operator==<VuSessionEntity>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?gOurGUID@@3U_GUID@@A				; gOurGUID
PUBLIC	??_C@_0CH@EDFEJDFE@CreateGroup?5WAN?5FalconGlobalUDPH@ ; `string'
PUBLIC	??_C@_0P@JLGHKJPH@WAN?5RUDP?5GROUP?$AA@		; `string'
PUBLIC	??_C@_03FFNGDGKN@tmp?$AA@			; `string'
PUBLIC	??_C@_0N@EEGAKJLG@Dangling?5UDP?$AA@		; `string'
PUBLIC	??_C@_06ICJKOBAJ@?$CFs?5UDP?$AA@		; `string'
PUBLIC	??_C@_07ICEPJIFH@?$CFs?5RUDP?$AA@		; `string'
PUBLIC	??_C@_0BI@GIMJLIEC@Connecting?5to?5game?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MDBBKFND@Connecting?5to?5group?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@IDADAGKK@CreateGroup?5?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0BL@HDIEAGFK@Disconnecting?5to?5game?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@NAGGHADL@Disconnecting?5to?5group?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_07OHKHACFK@0?40?40?40?$AA@		; `string'
PUBLIC	??_C@_0BO@BJNACDAE@Disconnecting?5to?5session?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strcmpi:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?SetOwnerId@VuEntity@@QAEXVVU_ID@@@Z:PROC	; VuEntity::SetOwnerId
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	_ComAPISetName:PROC
EXTRN	_ComAPISetLocalPorts:PROC
EXTRN	_ComAPIGetMyRecvPort:PROC
EXTRN	_ComAPIGetMyReliableRecvPort:PROC
EXTRN	_ComAPIClose:PROC
EXTRN	_ComAPIBWStart:PROC
EXTRN	_ComAPIBWPlayerJoined:PROC
EXTRN	_ComAPIBWPlayerLeft:PROC
EXTRN	_ComAPIBWEnterState:PROC
EXTRN	_ComAPICreateGroup:PROC
EXTRN	_ComAPIAddToGroup:PROC
EXTRN	_ComAPIDeleteFromGroup:PROC
EXTRN	_ComAPIinet_htoa:PROC
EXTRN	_ComAPISetTimeStampFunction:PROC
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	?LeaveGame@VuMainThread@@QAEHXZ:PROC		; VuMainThread::LeaveGame
EXTRN	?InitComms@VuMainThread@@QAEHPAUcomapihandle@@HH0HHH@Z:PROC ; VuMainThread::InitComms
EXTRN	?DeinitComms@VuMainThread@@QAEHXZ:PROC		; VuMainThread::DeinitComms
EXTRN	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z:PROC ; VuMessageQueue::PostVuMessage
EXTRN	??0VuSessionFilter@@QAE@VVU_ID@@@Z:PROC		; VuSessionFilter::VuSessionFilter
EXTRN	??1VuSessionFilter@@UAE@XZ:PROC			; VuSessionFilter::~VuSessionFilter
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z:PROC ; VuSessionsIterator::VuSessionsIterator
EXTRN	??1VuSessionsIterator@@UAE@XZ:PROC		; VuSessionsIterator::~VuSessionsIterator
EXTRN	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetFirst
EXTRN	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetNext
EXTRN	?VuEnterCriticalSection@@YAXXZ:PROC		; VuEnterCriticalSection
EXTRN	?VuExitCriticalSection@@YAXXZ:PROC		; VuExitCriticalSection
EXTRN	??0VuGetRequest@@QAE@W4VU_SPECIAL_GET_TYPE@@PAVVuSessionEntity@@@Z:PROC ; VuGetRequest::VuGetRequest
EXTRN	??0VuFullUpdateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z:PROC ; VuFullUpdateEvent::VuFullUpdateEvent
EXTRN	?FlushOutboundMessageBuffer@VuTargetEntity@@QAEHXZ:PROC ; VuTargetEntity::FlushOutboundMessageBuffer
EXTRN	?GetMessages@VuTargetEntity@@QAEHXZ:PROC	; VuTargetEntity::GetMessages
EXTRN	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z:PROC ; VuTargetEntity::SetCommsHandle
EXTRN	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z:PROC ; VuTargetEntity::SetReliableCommsHandle
EXTRN	?GameId@VuSessionEntity@@QAE?AVVU_ID@@XZ:PROC	; VuSessionEntity::GameId
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?JoinGame@VuSessionEntity@@QAEHPAVVuGameEntity@@@Z:PROC ; VuSessionEntity::JoinGame
EXTRN	?SessionInGroup@VuGroupEntity@@QAEEPAVVuSessionEntity@@@Z:PROC ; VuGroupEntity::SessionInGroup
EXTRN	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z:PROC	; FalconPrivateList::FalconPrivateList
EXTRN	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z:PROC ; FalconPrivateList::ForcedInsert
EXTRN	_MonoPrint:PROC
EXTRN	_ComUDPOpen:PROC
EXTRN	_ComRUDPOpen:PROC
EXTRN	??0FalconSessionEntity@@QAE@KPAD@Z:PROC		; FalconSessionEntity::FalconSessionEntity
EXTRN	?SetPlayerSquadron@FalconSessionEntity@@QAEXPAVSquadronClass@@@Z:PROC ; FalconSessionEntity::SetPlayerSquadron
EXTRN	?SetPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z:PROC ; FalconSessionEntity::SetPlayerFlight
EXTRN	?SetPlayerEntity@FalconSessionEntity@@QAEXPAVFalconEntity@@@Z:PROC ; FalconSessionEntity::SetPlayerEntity
EXTRN	?SetAircraftNum@FalconSessionEntity@@QAEXE@Z:PROC ; FalconSessionEntity::SetAircraftNum
EXTRN	?SetPilotSlot@FalconSessionEntity@@QAEXE@Z:PROC	; FalconSessionEntity::SetPilotSlot
EXTRN	?SetFlyState@FalconSessionEntity@@QAEXE@Z:PROC	; FalconSessionEntity::SetFlyState
EXTRN	?SetAssignedAircraftNum@FalconSessionEntity@@QAEXE@Z:PROC ; FalconSessionEntity::SetAssignedAircraftNum
EXTRN	?SetAssignedPilotSlot@FalconSessionEntity@@QAEXE@Z:PROC ; FalconSessionEntity::SetAssignedPilotSlot
EXTRN	?SetAssignedPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z:PROC ; FalconSessionEntity::SetAssignedPlayerFlight
EXTRN	?StartCommsDoneCB@UIComms@@QAEXH@Z:PROC		; UIComms::StartCommsDoneCB
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??0FalconTimingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconTimingMessage::FalconTimingMessage
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?Add@CommsQueue@@QAEXFVVU_ID@@0@Z:PROC		; CommsQueue::Add
EXTRN	?LeaveACSlot@@YAXPAVFlightClass@@E@Z:PROC	; LeaveACSlot
EXTRN	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentEntity
EXTRN	?startupvoice@@YAXPAD@Z:PROC			; startupvoice
EXTRN	??0FalconPlayerStatusMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconPlayerStatusMessage::FalconPlayerStatusMessage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuGlobalGroup@@3PAVVuGlobalGroup@@A:DWORD	; vuGlobalGroup
EXTRN	?vuPlayerPoolGroup@@3PAVVuGameEntity@@A:DWORD	; vuPlayerPoolGroup
EXTRN	?vuKnownConnectionId@@3VVU_SESSION_ID@@A:DWORD	; vuKnownConnectionId
EXTRN	?vuLocalSession@@3VVU_ID@@A:QWORD		; vuLocalSession
EXTRN	?vuxWorldName@@3PADA:DWORD			; vuxWorldName
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?gMainThread@@3PAVVuMainThread@@A:DWORD		; gMainThread
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?gCommsMgr@@3PAVUIComms@@A:DWORD		; gCommsMgr
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?gUICommsQ@@3PAVCommsQueue@@A:DWORD		; gUICommsQ
EXTRN	?lastStartTime@@3KA:DWORD			; lastStartTime
EXTRN	?targetCompressionRatio@@3HA:DWORD		; targetCompressionRatio
EXTRN	?remoteCompressionRequests@@3HA:DWORD		; remoteCompressionRequests
EXTRN	?g_bServer@@3_NA:BYTE				; g_bServer
EXTRN	?g_bF4CommsMTU@@3_NA:BYTE			; g_bF4CommsMTU
EXTRN	?g_pDPServer@@3PAUIDirectPlay8Server@@A:DWORD	; g_pDPServer
EXTRN	?g_pDPClient@@3PAUIDirectPlay8Client@@A:DWORD	; g_pDPClient
EXTRN	?g_bVoiceCom@@3_NA:BYTE				; g_bVoiceCom
EXTRN	?g_strVoiceHostIP@@3PADA:BYTE			; g_strVoiceHostIP
EXTRN	?stoppingvoice@@3_NA:BYTE			; stoppingvoice
EXTRN	?g_bACPlayerCTDFix@@3_NA:BYTE			; g_bACPlayerCTDFix
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?gOurGUID@@3U_GUID@@A DB 010H DUP (?)			; gOurGUID
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BJNACDAE@Disconnecting?5to?5session?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BO@BJNACDAE@Disconnecting?5to?5session?3?5?$CFs?6?$AA@ DB 'Disconn'
	DB	'ecting to session: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKHACFK@0?40?40?40?$AA@
CONST	SEGMENT
??_C@_07OHKHACFK@0?40?40?40?$AA@ DB '0.0.0.0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NAGGHADL@Disconnecting?5to?5group?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BM@NAGGHADL@Disconnecting?5to?5group?3?5?$CFs?6?$AA@ DB 'Disconnec'
	DB	'ting to group: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HDIEAGFK@Disconnecting?5to?5game?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BL@HDIEAGFK@Disconnecting?5to?5game?3?5?$CFs?6?$AA@ DB 'Disconnect'
	DB	'ing to game: %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDADAGKK@CreateGroup?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@IDADAGKK@CreateGroup?5?$CFs?6?$AA@ DB 'CreateGroup %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MDBBKFND@Connecting?5to?5group?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MDBBKFND@Connecting?5to?5group?3?5?$CFs?6?$AA@ DB 'Connecting t'
	DB	'o group: %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GIMJLIEC@Connecting?5to?5game?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BI@GIMJLIEC@Connecting?5to?5game?3?5?$CFs?6?$AA@ DB 'Connecting to'
	DB	' game: %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICEPJIFH@?$CFs?5RUDP?$AA@
CONST	SEGMENT
??_C@_07ICEPJIFH@?$CFs?5RUDP?$AA@ DB '%s RUDP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICJKOBAJ@?$CFs?5UDP?$AA@
CONST	SEGMENT
??_C@_06ICJKOBAJ@?$CFs?5UDP?$AA@ DB '%s UDP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EEGAKJLG@Dangling?5UDP?$AA@
CONST	SEGMENT
??_C@_0N@EEGAKJLG@Dangling?5UDP?$AA@ DB 'Dangling UDP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFNGDGKN@tmp?$AA@
CONST	SEGMENT
??_C@_03FFNGDGKN@tmp?$AA@ DB 'tmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JLGHKJPH@WAN?5RUDP?5GROUP?$AA@
CONST	SEGMENT
??_C@_0P@JLGHKJPH@WAN?5RUDP?5GROUP?$AA@ DB 'WAN RUDP GROUP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EDFEJDFE@CreateGroup?5WAN?5FalconGlobalUDPH@
CONST	SEGMENT
??_C@_0CH@EDFEJDFE@CreateGroup?5WAN?5FalconGlobalUDPH@ DB 'CreateGroup WA'
	DB	'N FalconGlobalUDPHandle', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?UpdateDanglingSessions@@YAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateDanglingSessions@@YAHXZ$0
__unwindtable$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z$0
__unwindtable$?EndCommsStuff@@YAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EndCommsStuff@@YAHXZ$0
__unwindtable$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z$0
__unwindtable$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z$0
__unwindtable$?InitDanglingList@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitDanglingList@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InitDanglingList@@YAXXZ$1
__unwindtable$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z$1
__unwindtable$?ResyncTimes@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResyncTimes@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ResyncTimes@@YAXXZ$1
__unwindtable$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z$1
__ehfuncinfo$?UpdateDanglingSessions@@YAHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateDanglingSessions@@YAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InitDanglingList@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitDanglingList@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ResyncTimes@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ResyncTimes@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?EndCommsStuff@@YAHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EndCommsStuff@@YAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gOurGUID$initializer$ DD FLAT:??__EgOurGUID@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_le$ = 8						; size = 4
_re$ = 12						; size = 4
??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z PROC ; operator==<VuSessionEntity>, COMDAT

; 72   : template <class E> bool operator==(const void* le, const VuBin<E> &re){ return ((void*)re.get()) == le; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	ecx, DWORD PTR _re$[ebp]
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	eax, DWORD PTR _le$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z ENDP ; operator==<VuSessionEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_dsit$2 = -36						; size = 12
$T3 = -24						; size = 4
_count$4 = -20						; size = 4
_session$5 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?UpdateDanglingSessions@@YAHXZ PROC			; UpdateDanglingSessions

; 477  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateDanglingSessions@@YAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 478  : 	if (gConnectionStatus)

	cmp	DWORD PTR ?gConnectionStatus@@3HA, 0	; gConnectionStatus
	je	SHORT $LN4@UpdateDang

; 479  : 	{
; 480  : 		VuEnterCriticalSection();

	call	?VuEnterCriticalSection@@YAXXZ		; VuEnterCriticalSection

; 481  : 		VuListIterator		dsit(DanglingSessionsList);

	mov	eax, DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A ; DanglingSessionsList
	push	eax
	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 482  : 		VuSessionEntity		*session;
; 483  : 		int					count = 0;

	mov	DWORD PTR _count$4[ebp], 0

; 484  : 
; 485  : 		for (session = (VuSessionEntity*)dsit.GetFirst(); session; session = (VuSessionEntity*)dsit.GetNext()){

	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _session$5[ebp], eax
	jmp	SHORT $LN3@UpdateDang
$LN2@UpdateDang:
	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _session$5[ebp], eax
$LN3@UpdateDang:
	cmp	DWORD PTR _session$5[ebp], 0
	je	SHORT $LN1@UpdateDang

; 486  : 			count += session->GetMessages();

	mov	ecx, DWORD PTR _session$5[ebp]
	call	?GetMessages@VuTargetEntity@@QAEHXZ	; VuTargetEntity::GetMessages
	add	eax, DWORD PTR _count$4[ebp]
	mov	DWORD PTR _count$4[ebp], eax

; 487  : 			// attempt to send one packet of each type
; 488  : 			session->FlushOutboundMessageBuffer();

	mov	ecx, DWORD PTR _session$5[ebp]
	call	?FlushOutboundMessageBuffer@VuTargetEntity@@QAEHXZ ; VuTargetEntity::FlushOutboundMessageBuffer

; 489  : 		}

	jmp	SHORT $LN2@UpdateDang
$LN1@UpdateDang:

; 490  : 
; 491  : 		VuExitCriticalSection();

	call	?VuExitCriticalSection@@YAXXZ		; VuExitCriticalSection

; 492  : 		return count;

	mov	ecx, DWORD PTR _count$4[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN5@UpdateDang
$LN4@UpdateDang:

; 493  : 	}
; 494  : 	return 0;

	xor	eax, eax
$LN5@UpdateDang:

; 495  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateDanglingSessions@@YAHXZ$0:
	lea	ecx, DWORD PTR _dsit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?UpdateDanglingSessions@@YAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateDanglingSessions@@YAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateDanglingSessions@@YAHXZ ENDP			; UpdateDanglingSessions
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_DanglingSessionFilter$ = -36				; size = 12
$T2 = -24						; size = 4
tv80 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitDanglingList@@YAXXZ PROC				; InitDanglingList

; 328  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitDanglingList@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 329  : //	VuEnterCriticalSection();
; 330  : 	VuSessionFilter		DanglingSessionFilter(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	lea	ecx, DWORD PTR _DanglingSessionFilter$[ebp]
	call	??0VuSessionFilter@@QAE@VVU_ID@@@Z	; VuSessionFilter::VuSessionFilter
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 331  : 	DanglingSessionsList = new FalconPrivateList(&DanglingSessionFilter);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@InitDangli
	lea	edx, DWORD PTR _DanglingSessionFilter$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0FalconPrivateList@@QAE@PAVVuFilter@@@Z ; FalconPrivateList::FalconPrivateList
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@InitDangli
$LN3@InitDangli:
	mov	DWORD PTR tv80[ebp], 0
$LN4@InitDangli:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A, ecx ; DanglingSessionsList

; 332  : //	VuExitCriticalSection();
; 333  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _DanglingSessionFilter$[ebp]
	call	??1VuSessionFilter@@UAE@XZ		; VuSessionFilter::~VuSessionFilter
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitDanglingList@@YAXXZ$0:
	lea	ecx, DWORD PTR _DanglingSessionFilter$[ebp]
	jmp	??1VuSessionFilter@@UAE@XZ		; VuSessionFilter::~VuSessionFilter
__unwindfunclet$?InitDanglingList@@YAXXZ$1:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitDanglingList@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitDanglingList@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitDanglingList@@YAXXZ ENDP				; InitDanglingList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
;	COMDAT ??__EgOurGUID@@YAXXZ
text$yc	SEGMENT
??__EgOurGUID@@YAXXZ PROC				; `dynamic initializer for 'gOurGUID'', COMDAT

; 41   : GUID	gOurGUID = OVERRIDE_GUID;

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _OVERRIDE_GUID
	mov	DWORD PTR ?gOurGUID@@3U_GUID@@A, eax
	mov	ecx, DWORD PTR _OVERRIDE_GUID+4
	mov	DWORD PTR ?gOurGUID@@3U_GUID@@A+4, ecx
	mov	edx, DWORD PTR _OVERRIDE_GUID+8
	mov	DWORD PTR ?gOurGUID@@3U_GUID@@A+8, edx
	mov	eax, DWORD PTR _OVERRIDE_GUID+12
	mov	DWORD PTR ?gOurGUID@@3U_GUID@@A+12, eax
	pop	ebp
	ret	0
??__EgOurGUID@@YAXXZ ENDP				; `dynamic initializer for 'gOurGUID''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?SetVuStateAccess@FalconSessionEntity@@QAEXW4VU_MEM@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetVuStateAccess@FalconSessionEntity@@QAEXW4VU_MEM@@@Z PROC ; FalconSessionEntity::SetVuStateAccess, COMDAT
; _this$ = ecx

; 181  : 	void SetVuStateAccess (VU_MEM state)	{ SetVuState(state); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z	; VuEntity::SetVuState
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVuStateAccess@FalconSessionEntity@@QAEXW4VU_MEM@@@Z ENDP ; FalconSessionEntity::SetVuStateAccess
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ PROC ; FalconSessionEntity::GetAssignedPlayerFlight, COMDAT
; _this$ = ecx

; 158  : 	FlightClass* GetAssignedPlayerFlight(void) const { return assignedPlayerFlightPtr; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+528]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ENDP ; FalconSessionEntity::GetAssignedPlayerFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ PROC ; FalconSessionEntity::GetAssignedAircraftNum, COMDAT
; _this$ = ecx

; 156  : 	uchar GetAssignedAircraftNum (void) const     { return assignedAircraftNum; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+523]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ ENDP ; FalconSessionEntity::GetAssignedAircraftNum
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetReqCompression@FalconSessionEntity@@QBEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReqCompression@FalconSessionEntity@@QBEFXZ PROC	; FalconSessionEntity::GetReqCompression, COMDAT
; _this$ = ecx

; 148  : 	short GetReqCompression (void) const          { return reqCompression; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+514]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReqCompression@FalconSessionEntity@@QBEFXZ ENDP	; FalconSessionEntity::GetReqCompression
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPilotSlot@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPilotSlot@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetPilotSlot, COMDAT
; _this$ = ecx

; 146  : 	uchar GetPilotSlot (void) const               { return pilotSlot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+512]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotSlot@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetPilotSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetAircraftNum@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAircraftNum@FalconSessionEntity@@QBEEXZ PROC	; FalconSessionEntity::GetAircraftNum, COMDAT
; _this$ = ecx

; 145  : 	uchar GetAircraftNum (void) const             { return aircraftNum; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+511]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAircraftNum@FalconSessionEntity@@QBEEXZ ENDP	; FalconSessionEntity::GetAircraftNum
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetCountry@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetCountry, COMDAT
; _this$ = ecx

; 144  : 	uchar GetCountry (void) const                 { return country; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+510]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ PROC ; FalconSessionEntity::GetPlayerFlight, COMDAT
; _this$ = ecx

; 139  : 	FlightClass* GetPlayerFlight(void) const      { return playerFlightPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 480				; 000001e0H
	call	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ENDP ; FalconSessionEntity::GetPlayerFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ PROC	; FalconSessionEntity::GetPlayerCallsign, COMDAT
; _this$ = ecx

; 132  : 	_TCHAR* GetPlayerCallsign(void)               { return callSign; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 437				; 000001b5H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ENDP	; FalconSessionEntity::GetPlayerCallsign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ PROC	; VuBin<FlightClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ENDP	; VuBin<FlightClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
?TimeStampFunction@@YAKXZ PROC				; TimeStampFunction

; 736  : ulong TimeStampFunction(){

	push	ebp
	mov	ebp, esp

; 737  : 	return vuxRealTime;

	mov	eax, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime

; 738  : }

	pop	ebp
	ret	0
?TimeStampFunction@@YAKXZ ENDP				; TimeStampFunction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
?CleanupComms@@YAHXZ PROC				; CleanupComms

; 250  : {

	push	ebp
	mov	ebp, esp

; 251  : 	gConnectionStatus = 0;

	mov	DWORD PTR ?gConnectionStatus@@3HA, 0	; gConnectionStatus

; 252  : 
; 253  : 	if (FalconGlobalUDPHandle)

	cmp	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalUDPHandle
	je	SHORT $LN3@CleanupCom

; 254  : 		ComAPIClose(FalconGlobalUDPHandle);

	mov	eax, DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A ; FalconGlobalUDPHandle
	push	eax
	call	_ComAPIClose
	add	esp, 4
$LN3@CleanupCom:

; 255  : 	if (FalconGlobalTCPHandle)

	cmp	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalTCPHandle
	je	SHORT $LN2@CleanupCom

; 256  : 		ComAPIClose(FalconGlobalTCPHandle);

	mov	ecx, DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A ; FalconGlobalTCPHandle
	push	ecx
	call	_ComAPIClose
	add	esp, 4
$LN2@CleanupCom:

; 257  : 	if (FalconTCPListenHandle)

	cmp	DWORD PTR ?FalconTCPListenHandle@@3PAUcomapihandle@@A, 0 ; FalconTCPListenHandle
	je	SHORT $LN1@CleanupCom

; 258  : 		ComAPIClose(FalconTCPListenHandle);

	mov	edx, DWORD PTR ?FalconTCPListenHandle@@3PAUcomapihandle@@A ; FalconTCPListenHandle
	push	edx
	call	_ComAPIClose
	add	esp, 4
$LN1@CleanupCom:

; 259  : 	//	if (FalconInitialUDPHandle)
; 260  : 	//		ComAPIClose(FalconInitialUDPHandle);
; 261  : 
; 262  : 	// Kill off any dangling sessions
; 263  : 	CleanupDanglingList();

	call	?CleanupDanglingList@@YAXXZ		; CleanupDanglingList

; 264  : 
; 265  : 	//	FalconInitialUDPHandle = NULL;
; 266  : 	FalconTCPListenHandle = NULL;

	mov	DWORD PTR ?FalconTCPListenHandle@@3PAUcomapihandle@@A, 0 ; FalconTCPListenHandle

; 267  : 	FalconGlobalUDPHandle = NULL;

	mov	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalUDPHandle

; 268  : 	FalconGlobalTCPHandle = NULL;

	mov	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalTCPHandle

; 269  : 	FalconServerTCPStatus = VU_CONN_INACTIVE;

	mov	DWORD PTR ?FalconServerTCPStatus@@3HA, 0 ; FalconServerTCPStatus

; 270  : 	return (TRUE);

	mov	eax, 1

; 271  : }

	pop	ebp
	ret	0
?CleanupComms@@YAHXZ ENDP				; CleanupComms
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_vures$1 = -4						; size = 4
_result$ = 8						; size = 4
?F4CommsConnectionCallback@@YAHH@Z PROC			; F4CommsConnectionCallback

; 214  : int F4CommsConnectionCallback (int result){

	push	ebp
	mov	ebp, esp
	push	ecx

; 215  : 	if (result == F4COMMS_CONNECTED){

	cmp	DWORD PTR _result$[ebp], 1
	jne	$LN5@F4CommsCon

; 216  : 		int vures;
; 217  : 
; 218  : 		// Init vu's comms
; 219  : 		if (!FalconGlobalTCPHandle){

	cmp	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalTCPHandle
	jne	SHORT $LN4@F4CommsCon

; 220  : 			vures = gMainThread->InitComms(
; 221  : 				FalconGlobalUDPHandle, F4CommsMaxTCPMessageSize, F4CommsIdealTCPPacketSize, 
; 222  : 				FalconGlobalUDPHandle, F4CommsMaxTCPMessageSize, F4CommsIdealTCPPacketSize, 
; 223  : 				F4_EVENT_QUEUE_SIZE
; 224  : 			);

	push	2000					; 000007d0H
	mov	eax, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	push	eax
	mov	ecx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	ecx
	mov	edx, DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A ; FalconGlobalUDPHandle
	push	edx
	mov	eax, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	push	eax
	mov	ecx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	ecx
	mov	edx, DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A ; FalconGlobalUDPHandle
	push	edx
	mov	ecx, DWORD PTR ?gMainThread@@3PAVVuMainThread@@A ; gMainThread
	call	?InitComms@VuMainThread@@QAEHPAUcomapihandle@@HH0HHH@Z ; VuMainThread::InitComms
	mov	DWORD PTR _vures$1[ebp], eax

; 225  : 		}
; 226  : 		else {

	jmp	SHORT $LN3@F4CommsCon
$LN4@F4CommsCon:

; 227  : 			vures = gMainThread->InitComms(
; 228  : 				FalconGlobalUDPHandle, F4CommsMaxUDPMessageSize, F4CommsIdealUDPPacketSize, 
; 229  : 				FalconGlobalTCPHandle, F4CommsMaxTCPMessageSize, F4CommsIdealTCPPacketSize,
; 230  : 				F4_EVENT_QUEUE_SIZE
; 231  : 			);

	push	2000					; 000007d0H
	mov	eax, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	push	eax
	mov	ecx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	ecx
	mov	edx, DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A ; FalconGlobalTCPHandle
	push	edx
	mov	eax, DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA ; F4CommsIdealUDPPacketSize
	push	eax
	mov	ecx, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	ecx
	mov	edx, DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A ; FalconGlobalUDPHandle
	push	edx
	mov	ecx, DWORD PTR ?gMainThread@@3PAVVuMainThread@@A ; gMainThread
	call	?InitComms@VuMainThread@@QAEHPAUcomapihandle@@HH0HHH@Z ; VuMainThread::InitComms
	mov	DWORD PTR _vures$1[ebp], eax
$LN3@F4CommsCon:

; 232  : 		}
; 233  : 
; 234  : 		if (vures == VU_ERROR){

	cmp	DWORD PTR _vures$1[ebp], -1
	jne	SHORT $LN2@F4CommsCon

; 235  : 			// KCK: Vu often doesn't clean up after itself in this case!
; 236  : 			CleanupComms();

	call	?CleanupComms@@YAHXZ			; CleanupComms

; 237  : 			return F4COMMS_ERROR_UDP_NOT_AVAILABLE;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN6@F4CommsCon
$LN2@F4CommsCon:

; 238  : 		}
; 239  : 		gConnectionStatus = F4COMMS_CONNECTED;

	mov	DWORD PTR ?gConnectionStatus@@3HA, 1	; gConnectionStatus

; 240  : 	}
; 241  : 	else {

	jmp	SHORT $LN1@F4CommsCon
$LN5@F4CommsCon:

; 242  : 		CleanupComms();

	call	?CleanupComms@@YAHXZ			; CleanupComms
$LN1@F4CommsCon:

; 243  : 	}
; 244  : 	// KCK: Call UI Comms connect callback
; 245  : 	gCommsMgr->StartCommsDoneCB(result);

	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?StartCommsDoneCB@UIComms@@QAEXH@Z	; UIComms::StartCommsDoneCB

; 246  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN6@F4CommsCon:

; 247  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?F4CommsConnectionCallback@@YAHH@Z ENDP			; F4CommsConnectionCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T2 = -180						; size = 8
$T3 = -172						; size = 8
_newAdd$4 = -164					; size = 8
$T5 = -156						; size = 8
_oldAdd$6 = -148					; size = 8
_dsit$ = -140						; size = 12
$T7 = -128						; size = 4
_retval$ = -124						; size = 4
_session$8 = -120					; size = 4
_buffer$ = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newSess$ = 8						; size = 4
?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z PROC	; RemoveDanglingSession

; 420  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 421  : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 422  : 	char buffer[100];
; 423  : 
; 424  : 	// no dangling sessions
; 425  : 	if (!DanglingSessionsList){

	cmp	DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A, 0 ; DanglingSessionsList
	jne	SHORT $LN8@RemoveDang

; 426  : 		return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	jmp	$LN9@RemoveDang
$LN8@RemoveDang:

; 427  : 	}
; 428  : 
; 429  : 	VuEnterCriticalSection();

	call	?VuEnterCriticalSection@@YAXXZ		; VuEnterCriticalSection

; 430  : 	// iterate over dangling sessions
; 431  : 	VuListIterator		dsit(DanglingSessionsList);

	mov	eax, DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A ; DanglingSessionsList
	push	eax
	lea	ecx, DWORD PTR _dsit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 432  : 	for (

	lea	ecx, DWORD PTR _dsit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _session$8[ebp], eax

; 433  : 		VuSessionEntity	*session = (VuSessionEntity*)dsit.GetFirst(); 
; 434  : 		session != NULL; 

	jmp	SHORT $LN7@RemoveDang
$LN6@RemoveDang:

; 435  : 		session = (VuSessionEntity*)dsit.GetNext()
; 436  : 	){

	lea	ecx, DWORD PTR _dsit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _session$8[ebp], eax
$LN7@RemoveDang:
	cmp	DWORD PTR _session$8[ebp], 0
	je	$LN5@RemoveDang

; 437  : 		VU_ADDRESS newAdd = newSess->GetAddress();

	lea	ecx, DWORD PTR _newAdd$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress

; 438  : 		VU_ADDRESS oldAdd = session->GetAddress();

	lea	edx, DWORD PTR _oldAdd$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress

; 439  : 		if (
; 440  : 				(session->OwnerId().creator_.value_ == CAPI_DANGLING_ID) ||
; 441  : 				(newSess->OwnerId().creator_.value_ == session->OwnerId().creator_)
; 442  : 		   ){

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN3@RemoveDang
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	esi, eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	add	eax, 4
	mov	ecx, eax
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	cmp	DWORD PTR [esi+4], eax
	jne	$LN4@RemoveDang
$LN3@RemoveDang:

; 443  : 			// new sessions have no handle and old one does. exchange them
; 444  : 			if ((newSess->GetCommsHandle() == NULL) && (session->GetCommsHandle() != NULL)){

	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	test	eax, eax
	jne	SHORT $LN2@RemoveDang
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	test	eax, eax
	je	SHORT $LN2@RemoveDang

; 445  : 				newSess->SetCommsHandle(
; 446  : 					session->GetCommsHandle(), F4CommsMaxUDPMessageSize, F4CommsIdealUDPPacketSize
; 447  : 				);

	mov	eax, DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA ; F4CommsIdealUDPPacketSize
	push	eax
	mov	ecx, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	ecx
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	push	eax
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 448  : 				sprintf(buffer, "%s UDP", ((FalconSessionEntity*)newSess)->GetPlayerCallsign());

	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ; FalconSessionEntity::GetPlayerCallsign
	push	eax
	push	OFFSET ??_C@_06ICJKOBAJ@?$CFs?5UDP?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 449  : 				ComAPISetName(newSess->GetCommsHandle(), buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	push	eax
	call	_ComAPISetName
	add	esp, 8

; 450  : 				// inherit status from session
; 451  : 				newSess->SetCommsStatus(session->GetCommsStatus());

	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ; VuTargetEntity::GetCommsStatus
	push	eax
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus

; 452  : 				session->SetCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle
$LN2@RemoveDang:

; 453  : 			}
; 454  : 			if ((newSess->GetReliableCommsHandle()==NULL) && (session->GetReliableCommsHandle() != NULL)){

	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	test	eax, eax
	jne	SHORT $LN1@RemoveDang
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	test	eax, eax
	je	SHORT $LN1@RemoveDang

; 455  : 				newSess->SetReliableCommsHandle(
; 456  : 					session->GetReliableCommsHandle(), F4CommsMaxTCPMessageSize, F4CommsIdealTCPPacketSize
; 457  : 				);				

	mov	ecx, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	push	ecx
	mov	edx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	edx
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	push	eax
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 458  : 				sprintf(buffer, "%s RUDP", ((FalconSessionEntity*)newSess)->GetPlayerCallsign());

	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ; FalconSessionEntity::GetPlayerCallsign
	push	eax
	push	OFFSET ??_C@_07ICEPJIFH@?$CFs?5RUDP?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 459  : 				ComAPISetName(newSess->GetReliableCommsHandle(), buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	push	eax
	call	_ComAPISetName
	add	esp, 8

; 460  : 				// inherity status from session
; 461  : 				newSess->SetReliableCommsStatus(session->GetReliableCommsStatus());

	mov	ecx, DWORD PTR _session$8[ebp]
	call	?GetReliableCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ; VuTargetEntity::GetReliableCommsStatus
	push	eax
	mov	ecx, DWORD PTR _newSess$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus

; 462  : 				session->SetReliableCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _session$8[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle
$LN1@RemoveDang:

; 463  : 			}
; 464  : 			// remove old dangling session
; 465  : 			DanglingSessionsList->Remove(session);

	mov	edx, DWORD PTR _session$8[ebp]
	push	edx
	mov	ecx, DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A ; DanglingSessionsList
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove

; 466  : 			// sfr: no need to delete this anymore, since its derefed from list
; 467  : 			//delete session;
; 468  : 			retval = 1;

	mov	DWORD PTR _retval$[ebp], 1

; 469  : 			break;

	jmp	SHORT $LN5@RemoveDang
$LN4@RemoveDang:

; 470  : 		}
; 471  : 	}

	jmp	$LN6@RemoveDang
$LN5@RemoveDang:

; 472  : 	VuExitCriticalSection();

	call	?VuExitCriticalSection@@YAXXZ		; VuExitCriticalSection

; 473  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dsit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T7[ebp]
$LN9@RemoveDang:

; 474  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z$0:
	lea	ecx, DWORD PTR _dsit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z ENDP	; RemoveDanglingSession
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_dsit$2 = -88						; size = 12
$T3 = -76						; size = 8
$T4 = -68						; size = 8
_sAdd$5 = -60						; size = 8
tv189 = -52						; size = 4
$T6 = -48						; size = 4
$T7 = -44						; size = 4
tv150 = -40						; size = 4
$T8 = -36						; size = 4
_udpHandle$ = -32					; size = 4
$T9 = -28						; size = 4
_session$10 = -24					; size = 4
_tempSess$ = -20					; size = 4
$T11 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_owner$ = 8						; size = 8
_address$ = 16						; size = 8
?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z PROC	; AddDanglingSession

; 348  : bool AddDanglingSession(VU_ID owner, VU_ADDRESS address){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 349  : 	VuEnterCriticalSection();

	call	?VuEnterCriticalSection@@YAXXZ		; VuEnterCriticalSection

; 350  : 	FalconSessionEntity	*tempSess = NULL;

	mov	DWORD PTR _tempSess$[ebp], 0

; 351  : 
; 352  : 	// first time in dangling session, why not use a default constructor
; 353  : 	if (!DanglingSessionsList){

	cmp	DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A, 0 ; DanglingSessionsList
	jne	SHORT $LN6@AddDanglin

; 354  : 		InitDanglingList();

	call	?InitDanglingList@@YAXXZ		; InitDanglingList
$LN6@AddDanglin:

; 355  : 	}
; 356  : 
; 357  : 	// Check if it's already in our list
; 358  : 	{
; 359  : 		VuListIterator dsit(DanglingSessionsList);

	mov	eax, DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A ; DanglingSessionsList
	push	eax
	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 360  : 		for (

	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _session$10[ebp], eax

; 361  : 			FalconSessionEntity	*session = (FalconSessionEntity*)dsit.GetFirst(); 
; 362  : 			session != NULL; 

	jmp	SHORT $LN5@AddDanglin
$LN4@AddDanglin:

; 363  : 			session = (FalconSessionEntity*)dsit.GetNext()
; 364  : 		){

	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _session$10[ebp], eax
$LN5@AddDanglin:
	cmp	DWORD PTR _session$10[ebp], 0
	je	SHORT $LN3@AddDanglin

; 365  : 			VU_ADDRESS sAdd = session->GetAddress();

	lea	ecx, DWORD PTR _sAdd$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _session$10[ebp]
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress

; 366  : 			if (
; 367  : 					//(session->OwnerId().creator_.value_ == CAPI_DANGLING_ID) ||
; 368  : 					(session->OwnerId().creator_.value_ == owner.creator_) &&
; 369  : 					(sAdd == address)
; 370  : 			){

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$10[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	esi, eax
	lea	ecx, DWORD PTR _owner$[ebp+4]
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN2@AddDanglin
	lea	eax, DWORD PTR _address$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sAdd$5[ebp]
	call	??8VU_ADDRESS@@QBE_NABV0@@Z		; VU_ADDRESS::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@AddDanglin

; 371  : 				// found one
; 372  : 				VuExitCriticalSection();

	call	?VuExitCriticalSection@@YAXXZ		; VuExitCriticalSection

; 373  : 				return true;

	mov	BYTE PTR $T11[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	al, BYTE PTR $T11[ebp]
	jmp	$LN7@AddDanglin
$LN2@AddDanglin:

; 374  : 				//tempSess = session;
; 375  : 				//break;
; 376  : 			}
; 377  : 		}

	jmp	SHORT $LN4@AddDanglin
$LN3@AddDanglin:

; 378  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dsit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 379  : 
; 380  : 	// session is not in list, create a new one and insert in list
; 381  : 	tempSess = new FalconSessionEntity(CAPI_DANGLING_ID, "tmp");

	push	660					; 00000294H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AddDanglin
	push	OFFSET ??_C@_03FFNGDGKN@tmp?$AA@
	push	-1
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconSessionEntity@@QAE@KPAD@Z	; FalconSessionEntity::FalconSessionEntity
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN10@AddDanglin
$LN9@AddDanglin:
	mov	DWORD PTR tv150[ebp], 0
$LN10@AddDanglin:
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR _tempSess$[ebp], eax

; 382  : 	tempSess->SetOwnerId(owner);

	mov	ecx, DWORD PTR _owner$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _owner$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tempSess$[ebp]
	call	?SetOwnerId@VuEntity@@QAEXVVU_ID@@@Z	; VuEntity::SetOwnerId

; 383  : 	tempSess->SetAddress(address);

	mov	eax, DWORD PTR _address$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tempSess$[ebp]
	call	?SetAddress@VuSessionEntity@@QAEXVVU_ADDRESS@@@Z ; VuSessionEntity::SetAddress

; 384  : 	// KCK: Hackish. Need to trick VU into this is already inserted into DB, otherwise
; 385  : 	// it won't insert it into our list.
; 386  : 	tempSess->SetVuStateAccess(VU_MEM_ACTIVE);

	push	3
	mov	ecx, DWORD PTR _tempSess$[ebp]
	call	?SetVuStateAccess@FalconSessionEntity@@QAEXW4VU_MEM@@@Z ; FalconSessionEntity::SetVuStateAccess

; 387  : 
; 388  : 	// temp session handle
; 389  : 	ComAPIHandle udpHandle = ComUDPOpen(
; 390  : 		"Dangling UDP", 
; 391  : 		F4CommsMaxUDPMessageSize, 
; 392  : 		vuxWorldName,
; 393  : 		vuLocalSessionEntity->GetAddress().recvPort,
; 394  : 		address.recvPort,
; 395  : 		address.ip,
; 396  : 		owner.creator_.value_
; 397  : 	);

	mov	edx, DWORD PTR _owner$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _address$[ebp+4]
	push	eax
	movzx	ecx, WORD PTR _address$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress
	mov	ax, WORD PTR [eax]
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR ?vuxWorldName@@3PADA	; vuxWorldName
	push	edx
	mov	eax, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	eax
	push	OFFSET ??_C@_0N@EEGAKJLG@Dangling?5UDP?$AA@
	call	_ComUDPOpen
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _udpHandle$[ebp], eax

; 398  : 	if (udpHandle == NULL){

	cmp	DWORD PTR _udpHandle$[ebp], 0
	jne	SHORT $LN1@AddDanglin

; 399  : 		delete tempSess;

	mov	ecx, DWORD PTR _tempSess$[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN11@AddDanglin
	push	1
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN12@AddDanglin
$LN11@AddDanglin:
	mov	DWORD PTR tv189[ebp], 0
$LN12@AddDanglin:

; 400  : 		VuExitCriticalSection();

	call	?VuExitCriticalSection@@YAXXZ		; VuExitCriticalSection

; 401  : 		return false;

	xor	al, al
	jmp	SHORT $LN7@AddDanglin
$LN1@AddDanglin:

; 402  : 	}
; 403  : 
; 404  : 	// handlers for this session
; 405  : 	tempSess->SetCommsHandle(udpHandle, F4CommsMaxUDPMessageSize, F4CommsIdealUDPPacketSize);

	mov	ecx, DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA ; F4CommsIdealUDPPacketSize
	push	ecx
	mov	edx, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	edx
	mov	eax, DWORD PTR _udpHandle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempSess$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 406  : 	tempSess->SetCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _tempSess$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus

; 407  : 
; 408  : 	// add handlers to UDP group handler (so we can send and receive data from it)
; 409  : 	ComAPIAddToGroup(FalconGlobalUDPHandle, udpHandle);

	mov	ecx, DWORD PTR _udpHandle$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A ; FalconGlobalUDPHandle
	push	edx
	call	_ComAPIAddToGroup
	add	esp, 8

; 410  : 
; 411  : 	DanglingSessionsList->ForcedInsert(tempSess);

	mov	eax, DWORD PTR _tempSess$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A ; DanglingSessionsList
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert

; 412  : 	VuExitCriticalSection();

	call	?VuExitCriticalSection@@YAXXZ		; VuExitCriticalSection

; 413  : 	return true;

	mov	al, 1
$LN7@AddDanglin:

; 414  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z$0:
	lea	ecx, DWORD PTR _dsit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ENDP	; AddDanglingSession
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
tv75 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
?CleanupDanglingList@@YAXXZ PROC			; CleanupDanglingList

; 336  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 337  : //	VuEnterCriticalSection();
; 338  : 	if (DanglingSessionsList){

	cmp	DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A, 0 ; DanglingSessionsList
	je	SHORT $LN1@CleanupDan

; 339  : 		delete DanglingSessionsList;

	mov	eax, DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A ; DanglingSessionsList
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@CleanupDan
	push	1
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN1@CleanupDan
$LN4@CleanupDan:
	mov	DWORD PTR tv75[ebp], 0
$LN1@CleanupDan:

; 340  : 	}
; 341  : 	DanglingSessionsList = NULL;

	mov	DWORD PTR ?DanglingSessionsList@@3PAVFalconPrivateList@@A, 0 ; DanglingSessionsList

; 342  : //	VuExitCriticalSection();
; 343  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupDanglingList@@YAXXZ ENDP			; CleanupDanglingList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_sit$ = -72						; size = 12
$T2 = -60						; size = 4
_g$ = -56						; size = 4
_msg$3 = -52						; size = 4
tv294 = -48						; size = 4
$T4 = -44						; size = 4
tv290 = -40						; size = 4
tv261 = -36						; size = 4
tv244 = -32						; size = 4
tv79 = -28						; size = 4
_count$ = -24						; size = 4
_best_comp$ = -20					; size = 4
_session$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ResyncTimes@@YAXXZ PROC				; ResyncTimes

; 656  : void ResyncTimes(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResyncTimes@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 657  : 	int count, 	best_comp;
; 658  : 	VuGroupEntity *g = FalconLocalGame;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@ResyncTime
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN21@ResyncTime
$LN20@ResyncTime:
	mov	DWORD PTR tv79[ebp], 0
$LN21@ResyncTime:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _g$[ebp], ecx

; 659  : 	VuEnterCriticalSection ();

	call	?VuEnterCriticalSection@@YAXXZ		; VuEnterCriticalSection

; 660  : 	VuSessionsIterator	sit(g);

	mov	edx, DWORD PTR _g$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sit$[ebp]
	call	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z ; VuSessionsIterator::VuSessionsIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 661  : 	FalconSessionEntity *session;
; 662  : 
; 663  : 	best_comp = 1;

	mov	DWORD PTR _best_comp$[ebp], 1

; 664  : 
; 665  : 	if (gTimeModeServer||g_bServer){

	cmp	DWORD PTR ?gTimeModeServer@@3HA, 0	; gTimeModeServer
	jne	SHORT $LN16@ResyncTime
	movzx	eax, BYTE PTR ?g_bServer@@3_NA		; g_bServer
	test	eax, eax
	je	SHORT $LN17@ResyncTime
$LN16@ResyncTime:

; 666  : 		session = (FalconSessionEntity*)sit.GetFirst();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _session$[ebp], eax

; 667  : 		count = 0;

	mov	DWORD PTR _count$[ebp], 0
$LN15@ResyncTime:

; 668  : 
; 669  : 		while (session){

	cmp	DWORD PTR _session$[ebp], 0
	je	SHORT $LN14@ResyncTime

; 670  : 			if (!session->IsLocal ()){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@ResyncTime

; 671  : 				count ++;

	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 672  : 				best_comp = session->GetReqCompression();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	cwde
	mov	DWORD PTR _best_comp$[ebp], eax

; 673  : 				break;

	jmp	SHORT $LN14@ResyncTime
$LN13@ResyncTime:

; 674  : 			}
; 675  : 			session = (FalconSessionEntity*)sit.GetNext();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _session$[ebp], eax

; 676  : 		}

	jmp	SHORT $LN15@ResyncTime
$LN14@ResyncTime:

; 677  : 
; 678  : 		if (count == 0){

	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN12@ResyncTime

; 679  : 			best_comp = FalconLocalSession->GetReqCompression();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	ecx, ax
	mov	DWORD PTR _best_comp$[ebp], ecx
$LN12@ResyncTime:

; 680  : 		}
; 681  : 	}
; 682  : 	else {

	jmp	SHORT $LN11@ResyncTime
$LN17@ResyncTime:

; 683  : 		best_comp = FalconLocalSession->GetReqCompression();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	edx, ax
	mov	DWORD PTR _best_comp$[ebp], edx
$LN11@ResyncTime:

; 684  : 	}
; 685  : 
; 686  : 	// KCK: Currently, everyone polls locally, but only sets time compression upon
; 687  : 	// notice from the host. We may prefer to send the host's poll data with the timing
; 688  : 	// message.
; 689  : 	remoteCompressionRequests = 0;

	mov	DWORD PTR ?remoteCompressionRequests@@3HA, 0 ; remoteCompressionRequests

; 690  : 
; 691  : 	session = (FalconSessionEntity*)sit.GetFirst();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _session$[ebp], eax
$LN10@ResyncTime:

; 692  : 	while (session){

	cmp	DWORD PTR _session$[ebp], 0
	je	$LN9@ResyncTime

; 693  : 		if (gTimeModeServer||g_bServer){

	cmp	DWORD PTR ?gTimeModeServer@@3HA, 0	; gTimeModeServer
	jne	SHORT $LN7@ResyncTime
	movzx	eax, BYTE PTR ?g_bServer@@3_NA		; g_bServer
	test	eax, eax
	je	SHORT $LN8@ResyncTime
$LN7@ResyncTime:

; 694  : 			if (session->IsLocal ()){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@ResyncTime

; 695  : 				session = (FalconSessionEntity *) sit.GetNext ();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _session$[ebp], eax

; 696  : 				continue;

	jmp	SHORT $LN10@ResyncTime
$LN8@ResyncTime:

; 697  : 			}
; 698  : 		}
; 699  : 
; 700  : 		if (session->GetReqCompression() > 1 && session->GetReqCompression() < best_comp){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	edx, ax
	cmp	edx, 1
	jle	SHORT $LN5@ResyncTime
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	cwde
	cmp	eax, DWORD PTR _best_comp$[ebp]
	jge	SHORT $LN5@ResyncTime

; 701  : 			best_comp = session->GetReqCompression();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	ecx, ax
	mov	DWORD PTR _best_comp$[ebp], ecx

; 702  : 			remoteCompressionRequests |= 1 << (best_comp-1);

	mov	ecx, DWORD PTR _best_comp$[ebp]
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	or	edx, DWORD PTR ?remoteCompressionRequests@@3HA ; remoteCompressionRequests
	mov	DWORD PTR ?remoteCompressionRequests@@3HA, edx ; remoteCompressionRequests
$LN5@ResyncTime:

; 703  : 		}
; 704  : 
; 705  : 		if (session->GetReqCompression() < 1 && session->GetReqCompression() > best_comp){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	cwde
	cmp	eax, 1
	jge	SHORT $LN4@ResyncTime
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	ecx, ax
	cmp	ecx, DWORD PTR _best_comp$[ebp]
	jle	SHORT $LN4@ResyncTime

; 706  : 			best_comp = session->GetReqCompression();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	edx, ax
	mov	DWORD PTR _best_comp$[ebp], edx

; 707  : 			remoteCompressionRequests |= REMOTE_REQUEST_PAUSE;

	mov	eax, DWORD PTR ?remoteCompressionRequests@@3HA ; remoteCompressionRequests
	or	eax, 1
	mov	DWORD PTR ?remoteCompressionRequests@@3HA, eax ; remoteCompressionRequests
$LN4@ResyncTime:

; 708  : 		}
; 709  : 
; 710  : 		if (session->GetReqCompression() == 1){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN3@ResyncTime

; 711  : 			best_comp = session->GetReqCompression();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	movsx	edx, ax
	mov	DWORD PTR _best_comp$[ebp], edx
$LN3@ResyncTime:

; 712  : 		}
; 713  : 
; 714  : 		if (session->GetReqCompression() == 0 && best_comp > 1){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReqCompression@FalconSessionEntity@@QBEFXZ ; FalconSessionEntity::GetReqCompression
	cwde
	test	eax, eax
	jne	SHORT $LN2@ResyncTime
	cmp	DWORD PTR _best_comp$[ebp], 1
	jle	SHORT $LN2@ResyncTime

; 715  : 			best_comp = 1;

	mov	DWORD PTR _best_comp$[ebp], 1
$LN2@ResyncTime:

; 716  : 		}
; 717  : 
; 718  : 		session = (FalconSessionEntity*)sit.GetNext();

	lea	ecx, DWORD PTR _sit$[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _session$[ebp], eax

; 719  : 	}

	jmp	$LN10@ResyncTime
$LN9@ResyncTime:

; 720  : 	VuExitCriticalSection ();

	call	?VuExitCriticalSection@@YAXXZ		; VuExitCriticalSection

; 721  : 
; 722  : 	if (FalconLocalGame && FalconLocalGame->IsLocal()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN22@ResyncTime
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN23@ResyncTime
$LN22@ResyncTime:
	mov	DWORD PTR tv244[ebp], 0
$LN23@ResyncTime:
	cmp	DWORD PTR tv244[ebp], 0
	je	$LN1@ResyncTime
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN24@ResyncTime
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv261[ebp], eax
	jmp	SHORT $LN25@ResyncTime
$LN24@ResyncTime:
	mov	DWORD PTR tv261[ebp], 0
$LN25@ResyncTime:
	mov	ecx, DWORD PTR tv261[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	$LN1@ResyncTime

; 723  : 		lastStartTime = vuxRealTime;

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	mov	DWORD PTR ?lastStartTime@@3KA, ecx	; lastStartTime

; 724  : 
; 725  : 		// Let the Campaign adjust itself to the target compression ratio
; 726  : 		targetCompressionRatio = best_comp;

	mov	edx, DWORD PTR _best_comp$[ebp]
	mov	DWORD PTR ?targetCompressionRatio@@3HA, edx ; targetCompressionRatio

; 727  : 
; 728  : 		//MonoPrint ("Sending Timing Message %08x %d\n", vuxGameTime, targetCompressionRatio);
; 729  : 		FalconTimingMessage	*msg = new FalconTimingMessage(FalconNullId,FalconLocalGame);

	push	53					; 00000035H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN28@ResyncTime
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@ResyncTime
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv290[ebp], eax
	jmp	SHORT $LN27@ResyncTime
$LN26@ResyncTime:
	mov	DWORD PTR tv290[ebp], 0
$LN27@ResyncTime:
	push	1
	mov	ecx, DWORD PTR tv290[ebp]
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0FalconTimingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconTimingMessage::FalconTimingMessage
	mov	DWORD PTR tv294[ebp], eax
	jmp	SHORT $LN29@ResyncTime
$LN28@ResyncTime:
	mov	DWORD PTR tv294[ebp], 0
$LN29@ResyncTime:
	mov	ecx, DWORD PTR tv294[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _msg$3[ebp], edx

; 730  : 		msg->RequestOutOfBandTransmit();

	mov	ecx, DWORD PTR _msg$3[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 731  : 		FalconSendMessage(msg,TRUE);

	push	1
	mov	eax, DWORD PTR _msg$3[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN1@ResyncTime:

; 732  : 	}
; 733  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sit$[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ResyncTimes@@YAXXZ$0:
	lea	ecx, DWORD PTR _sit$[ebp]
	jmp	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
__unwindfunclet$?ResyncTimes@@YAXXZ$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResyncTimes@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResyncTimes@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResyncTimes@@YAXXZ ENDP				; ResyncTimes
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
tv90 = -16						; size = 4
tv84 = -12						; size = 4
tv78 = -8						; size = 4
tv72 = -4						; size = 4
_protocol$ = 8						; size = 4
?SetupMessageSizes@@YAXH@Z PROC				; SetupMessageSizes

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 300  : 	// Ideal packet size comms will send over the wire
; 301  : 	if (g_bF4CommsMTU){

	movzx	eax, BYTE PTR ?g_bF4CommsMTU@@3_NA	; g_bF4CommsMTU
	test	eax, eax
	je	SHORT $LN2@SetupMessa

; 302  : 		F4CommsIdealPacketSize = F4CommsMTU;  // Unz and Booster MTU tweek

	mov	ecx, DWORD PTR ?F4CommsMTU@@3HA		; F4CommsMTU
	mov	DWORD PTR ?F4CommsIdealPacketSize@@3HA, ecx ; F4CommsIdealPacketSize

; 303  : 	}
; 304  : 	else {

	jmp	SHORT $LN1@SetupMessa
$LN2@SetupMessa:

; 305  : 		F4CommsIdealPacketSize = 500;

	mov	DWORD PTR ?F4CommsIdealPacketSize@@3HA, 500 ; F4CommsIdealPacketSize, 000001f4H
$LN1@SetupMessa:

; 306  : 	}
; 307  : 
; 308  : 	// Corrisponding content sizes
; 309  : 	F4CommsIdealTCPPacketSize = F4CommsIdealPacketSize - COMMS_TCP_OVERHEAD;

	mov	edx, DWORD PTR ?F4CommsIdealPacketSize@@3HA ; F4CommsIdealPacketSize
	sub	edx, 40					; 00000028H
	mov	DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA, edx ; F4CommsIdealTCPPacketSize

; 310  : 	F4CommsIdealUDPPacketSize = F4CommsIdealPacketSize - COMMS_UDP_OVERHEAD;

	mov	eax, DWORD PTR ?F4CommsIdealPacketSize@@3HA ; F4CommsIdealPacketSize
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA, eax ; F4CommsIdealUDPPacketSize

; 311  : 	// Corrisponding messages sizes
; 312  : 	F4CommsMaxTCPMessageSize = F4CommsIdealTCPPacketSize * F4COMMS_MAX_PACKETS;

	mov	ecx, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	shl	ecx, 5
	mov	DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA, ecx ; F4CommsMaxTCPMessageSize

; 313  : 	F4CommsMaxUDPMessageSize = F4CommsIdealUDPPacketSize;

	mov	edx, DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA ; F4CommsIdealUDPPacketSize
	mov	DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA, edx ; F4CommsMaxUDPMessageSize

; 314  : 	// Maximum sized message vu can accept
; 315  : 	F4VuMaxTCPMessageSize = F4CommsMaxTCPMessageSize - PACKET_HDR_SIZE - MAX_MSG_HDR_SIZE;

	mov	ecx, OFFSET ?vuKnownConnectionId@@3VVU_SESSION_ID@@A ; vuKnownConnectionId
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN5@SetupMessa
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN6@SetupMessa
$LN5@SetupMessa:
	mov	DWORD PTR tv72[ebp], 8
$LN6@SetupMessa:
	mov	eax, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	sub	eax, DWORD PTR tv72[ebp]
	sub	eax, 3
	mov	DWORD PTR ?F4VuMaxTCPMessageSize@@3HA, eax ; F4VuMaxTCPMessageSize

; 316  : 	F4VuMaxUDPMessageSize = F4CommsMaxUDPMessageSize - PACKET_HDR_SIZE - MAX_MSG_HDR_SIZE;

	mov	ecx, OFFSET ?vuKnownConnectionId@@3VVU_SESSION_ID@@A ; vuKnownConnectionId
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN7@SetupMessa
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN8@SetupMessa
$LN7@SetupMessa:
	mov	DWORD PTR tv78[ebp], 8
$LN8@SetupMessa:
	mov	ecx, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	sub	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 3
	mov	DWORD PTR ?F4VuMaxUDPMessageSize@@3HA, ecx ; F4VuMaxUDPMessageSize

; 317  : 	// Maximum sized packet vu with pack messages into
; 318  : 	F4VuMaxTCPPackSize = F4CommsIdealTCPPacketSize - PACKET_HDR_SIZE - MAX_MSG_HDR_SIZE;

	mov	ecx, OFFSET ?vuKnownConnectionId@@3VVU_SESSION_ID@@A ; vuKnownConnectionId
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN9@SetupMessa
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN10@SetupMessa
$LN9@SetupMessa:
	mov	DWORD PTR tv84[ebp], 8
$LN10@SetupMessa:
	mov	edx, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	sub	edx, DWORD PTR tv84[ebp]
	sub	edx, 3
	mov	DWORD PTR ?F4VuMaxTCPPackSize@@3HA, edx	; F4VuMaxTCPPackSize

; 319  : 	F4VuMaxUDPPackSize = F4CommsIdealUDPPacketSize - PACKET_HDR_SIZE - MAX_MSG_HDR_SIZE;

	mov	ecx, OFFSET ?vuKnownConnectionId@@3VVU_SESSION_ID@@A ; vuKnownConnectionId
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN11@SetupMessa
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN12@SetupMessa
$LN11@SetupMessa:
	mov	DWORD PTR tv90[ebp], 8
$LN12@SetupMessa:
	mov	eax, DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA ; F4CommsIdealUDPPacketSize
	sub	eax, DWORD PTR tv90[ebp]
	sub	eax, 3
	mov	DWORD PTR ?F4VuMaxUDPPackSize@@3HA, eax	; F4VuMaxUDPPackSize

; 320  : 	protocol;
; 321  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetupMessageSizes@@YAXH@Z ENDP				; SetupMessageSizes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_siter$ = -36						; size = 12
$T2 = -24						; size = 4
_oldCs$3 = -20						; size = 4
_cs$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?EndCommsStuff@@YAHXZ PROC				; EndCommsStuff

; 274  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EndCommsStuff@@YAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 275  : 	if (gMainThread){

	cmp	DWORD PTR ?gMainThread@@3PAVVuMainThread@@A, 0 ; gMainThread
	je	SHORT $LN4@EndCommsSt

; 276  : 		gMainThread->LeaveGame();

	mov	ecx, DWORD PTR ?gMainThread@@3PAVVuMainThread@@A ; gMainThread
	call	?LeaveGame@VuMainThread@@QAEHXZ		; VuMainThread::LeaveGame
$LN4@EndCommsSt:

; 277  : 	}
; 278  : 
; 279  : 	// KCK HACK: To avoid vu's problem with shutting down comms when remote sessions are active
; 280  : 	VuSessionsIterator	siter(vuGlobalGroup);

	mov	eax, DWORD PTR ?vuGlobalGroup@@3PAVVuGlobalGroup@@A ; vuGlobalGroup
	push	eax
	lea	ecx, DWORD PTR _siter$[ebp]
	call	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z ; VuSessionsIterator::VuSessionsIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 281  : 	FalconSessionEntity	*cs;
; 282  : 	for (cs = (FalconSessionEntity*) siter.GetFirst(); cs != NULL;){

	lea	ecx, DWORD PTR _siter$[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _cs$[ebp], eax
$LN3@EndCommsSt:
	cmp	DWORD PTR _cs$[ebp], 0
	je	SHORT $LN2@EndCommsSt

; 283  : 		FalconSessionEntity	*oldCs = cs;

	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR _oldCs$3[ebp], ecx

; 284  : 		cs = (FalconSessionEntity*) siter.GetNext();

	lea	ecx, DWORD PTR _siter$[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _cs$[ebp], eax

; 285  : 		oldCs->JoinGame(NULL);

	push	0
	mov	ecx, DWORD PTR _oldCs$3[ebp]
	call	?JoinGame@VuSessionEntity@@QAEHPAVVuGameEntity@@@Z ; VuSessionEntity::JoinGame

; 286  : 	}

	jmp	SHORT $LN3@EndCommsSt
$LN2@EndCommsSt:

; 287  : 	// END HACK
; 288  : 
; 289  : 	if (gConnectionStatus == F4COMMS_CONNECTED){

	cmp	DWORD PTR ?gConnectionStatus@@3HA, 1	; gConnectionStatus
	jne	SHORT $LN1@EndCommsSt

; 290  : 		gMainThread->DeinitComms();

	mov	ecx, DWORD PTR ?gMainThread@@3PAVVuMainThread@@A ; gMainThread
	call	?DeinitComms@VuMainThread@@QAEHXZ	; VuMainThread::DeinitComms
$LN1@EndCommsSt:

; 291  : 	}
; 292  : 
; 293  : 	CleanupComms();

	call	?CleanupComms@@YAHXZ			; CleanupComms

; 294  : 
; 295  : 	return (TRUE);

	mov	DWORD PTR $T2[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _siter$[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
	mov	eax, DWORD PTR $T2[ebp]

; 296  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EndCommsStuff@@YAHXZ$0:
	lea	ecx, DWORD PTR _siter$[ebp]
	jmp	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
__ehhandler$?EndCommsStuff@@YAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EndCommsStuff@@YAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EndCommsStuff@@YAHXZ ENDP				; EndCommsStuff
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T1 = -60						; size = 8
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 8
$T5 = -28						; size = 8
_smallPipeBandwidth$ = -20				; size = 4
_bigPipeBandwidth$ = -16				; size = 4
_tmpHandle2$ = -12					; size = 4
_tmpHandle$ = -8					; size = 4
_ret$6 = -2						; size = 1
_ret$7 = -1						; size = 1
_comData$ = 8						; size = 4
?InitCommsStuff@@YAHPAVComDataClass@@@Z PROC		; InitCommsStuff

; 138  : int InitCommsStuff(ComDataClass *comData) {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 139  : 	g_ipadress = ComAPIinet_htoa(comData->ip_address);//me123

	mov	eax, DWORD PTR _comData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ComAPIinet_htoa
	add	esp, 4
	mov	DWORD PTR ?g_ipadress@@3PADA, eax	; g_ipadress

; 140  : 
; 141  : 	// we need to create both handles on startup, so as to haev the ports available
; 142  : 	ComAPIHandle tmpHandle = NULL, tmpHandle2 = NULL;

	mov	DWORD PTR _tmpHandle$[ebp], 0
	mov	DWORD PTR _tmpHandle2$[ebp], 0

; 143  : 	int bigPipeBandwidth = -1;

	mov	DWORD PTR _bigPipeBandwidth$[ebp], -1

; 144  : 	int smallPipeBandwidth = 2000;

	mov	DWORD PTR _smallPipeBandwidth$[ebp], 2000 ; 000007d0H

; 145  : 	FalconTCPListenHandle = NULL;

	mov	DWORD PTR ?FalconTCPListenHandle@@3PAUcomapihandle@@A, 0 ; FalconTCPListenHandle

; 146  : 	FalconGlobalUDPHandle = NULL;

	mov	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalUDPHandle

; 147  : 	FalconGlobalTCPHandle = NULL;

	mov	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalTCPHandle

; 148  : 	//	FalconInitialUDPHandle = NULL;
; 149  : 	FalconServerTCPStatus = VU_CONN_INACTIVE;

	mov	DWORD PTR ?FalconServerTCPStatus@@3HA, 0 ; FalconServerTCPStatus

; 150  : 	//	DanglingConnections = NULL;
; 151  : 
; 152  : 	// Shutdown any current games/connections
; 153  : 	SendMessage(FalconDisplay.appWin,FM_SHUTDOWN_CAMPAIGN,0,0);

	push	0
	push	0
	push	1042					; 00000412H
	mov	edx, DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+108
	push	edx
	call	DWORD PTR __imp__SendMessageA@16

; 154  : 	if (gConnectionStatus){

	cmp	DWORD PTR ?gConnectionStatus@@3HA, 0	; gConnectionStatus
	je	SHORT $LN7@InitCommsS

; 155  : 		EndCommsStuff();

	call	?EndCommsStuff@@YAHXZ			; EndCommsStuff
$LN7@InitCommsS:

; 156  : 	}
; 157  : 	gConnectionStatus = F4COMMS_ERROR_UDP_NOT_AVAILABLE;

	mov	DWORD PTR ?gConnectionStatus@@3HA, -2	; gConnectionStatus, fffffffeH

; 158  : 	FalconConnectionDescription = FCT_WAN;

	mov	DWORD PTR ?FalconConnectionDescription@@3HA, 4 ; FalconConnectionDescription

; 159  : 	SetupMessageSizes (FCT_WAN);

	push	4
	call	?SetupMessageSizes@@YAXH@Z		; SetupMessageSizes
	add	esp, 4

; 160  : 	// start BW FSM and set our ports
; 161  : 	ComAPIBWStart();

	call	_ComAPIBWStart

; 162  : 	ComAPISetLocalPorts(comData->localPort, comData->localPort+1);

	mov	eax, DWORD PTR _comData$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _comData$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ComAPISetLocalPorts
	add	esp, 8

; 163  : 	vuLocalSessionEntity->SetAddress(VU_ADDRESS(0, ComAPIGetMyRecvPort(), ComAPIGetMyReliableRecvPort()));

	call	_ComAPIGetMyReliableRecvPort
	movzx	ecx, ax
	push	ecx
	call	_ComAPIGetMyRecvPort
	movzx	edx, ax
	push	edx
	push	0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0VU_ADDRESS@@QAE@KGG@Z		; VU_ADDRESS::VU_ADDRESS
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?SetAddress@VuSessionEntity@@QAEXVVU_ADDRESS@@@Z ; VuSessionEntity::SetAddress

; 164  : 
; 165  : 	// group handles
; 166  : 	// UDP
; 167  : 	FalconGlobalUDPHandle = ComAPICreateGroup("CreateGroup WAN FalconGlobalUDPHandle\n", F4CommsMaxUDPMessageSize,0);

	push	0
	mov	eax, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	eax
	push	OFFSET ??_C@_0CH@EDFEJDFE@CreateGroup?5WAN?5FalconGlobalUDPH@
	call	_ComAPICreateGroup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, eax ; FalconGlobalUDPHandle

; 168  : 	if (!FalconGlobalUDPHandle){

	cmp	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalUDPHandle
	jne	SHORT $LN6@InitCommsS

; 169  : 		return F4CommsConnectionCallback(F4COMMS_ERROR_UDP_NOT_AVAILABLE);

	push	-2					; fffffffeH
	call	?F4CommsConnectionCallback@@YAHH@Z	; F4CommsConnectionCallback
	add	esp, 4
	jmp	$LN8@InitCommsS
$LN6@InitCommsS:

; 170  : 	}
; 171  : 	// TCP
; 172  : 	FalconGlobalTCPHandle = ComAPICreateGroup("WAN RUDP GROUP", F4CommsMaxTCPMessageSize,0);

	push	0
	mov	ecx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	ecx
	push	OFFSET ??_C@_0P@JLGHKJPH@WAN?5RUDP?5GROUP?$AA@
	call	_ComAPICreateGroup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, eax ; FalconGlobalTCPHandle

; 173  : 	if (!FalconGlobalTCPHandle){

	cmp	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalTCPHandle
	jne	SHORT $LN5@InitCommsS

; 174  : 		return F4CommsConnectionCallback(F4COMMS_ERROR_MULTICAST_NOT_AVAILABLE);

	push	-3					; fffffffdH
	call	?F4CommsConnectionCallback@@YAHH@Z	; F4CommsConnectionCallback
	add	esp, 4
	jmp	$LN8@InitCommsS
$LN5@InitCommsS:

; 175  : 	}
; 176  : 
; 177  : 	// server
; 178  : 	if (comData->ip_address == 0){

	mov	edx, DWORD PTR _comData$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN4@InitCommsS

; 179  : 		// this dangling represents the first client to connect to server
; 180  : 		// well receive initial data through it
; 181  : 		bool ret = AddDanglingSession(
; 182  : 			VU_ID(CAPI_DANGLING_ID, VU_SESSION_ENTITY_ID),
; 183  : 			VU_ADDRESS(CAPI_DANGLING_IP, ComAPIGetMyRecvPort(), ComAPIGetMyReliableRecvPort())
; 184  : 		);

	call	_ComAPIGetMyReliableRecvPort
	movzx	eax, ax
	push	eax
	call	_ComAPIGetMyRecvPort
	movzx	ecx, ax
	push	ecx
	push	-1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0VU_ADDRESS@@QAE@KGG@Z		; VU_ADDRESS::VU_ADDRESS
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	push	3
	push	ecx
	mov	ecx, esp
	push	-1
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0VU_ID@@QAE@VVU_SESSION_ID@@K@Z	; VU_ID::VU_ID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ; AddDanglingSession
	add	esp, 16					; 00000010H
	mov	BYTE PTR _ret$7[ebp], al

; 185  : 		if (!(ret)) {

	movzx	eax, BYTE PTR _ret$7[ebp]
	test	eax, eax
	jne	SHORT $LN3@InitCommsS

; 186  : 			return F4CommsConnectionCallback(F4COMMS_ERROR_UDP_NOT_AVAILABLE);

	push	-2					; fffffffeH
	call	?F4CommsConnectionCallback@@YAHH@Z	; F4CommsConnectionCallback
	add	esp, 4
	jmp	$LN8@InitCommsS
$LN3@InitCommsS:

; 187  : 		}
; 188  : 	}
; 189  : 	// client 
; 190  : 	else {		

	jmp	SHORT $LN2@InitCommsS
$LN4@InitCommsS:

; 191  : 		// this is a dangling session representing server, so we can send first message
; 192  : 		bool ret = AddDanglingSession(
; 193  : 				VU_ID(CAPI_DANGLING_ID, VU_SESSION_ENTITY_ID),
; 194  : 				VU_ADDRESS(comData->ip_address, comData->remotePort, comData->remotePort+1)
; 195  : 		);

	mov	ecx, DWORD PTR _comData$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _comData$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _comData$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0VU_ADDRESS@@QAE@KGG@Z		; VU_ADDRESS::VU_ADDRESS
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	push	3
	push	ecx
	mov	ecx, esp
	push	-1
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0VU_ID@@QAE@VVU_SESSION_ID@@K@Z	; VU_ID::VU_ID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ; AddDanglingSession
	add	esp, 16					; 00000010H
	mov	BYTE PTR _ret$6[ebp], al

; 196  : 		if (!(ret)) {

	movzx	eax, BYTE PTR _ret$6[ebp]
	test	eax, eax
	jne	SHORT $LN2@InitCommsS

; 197  : 			return F4CommsConnectionCallback(F4COMMS_ERROR_UDP_NOT_AVAILABLE);

	push	-2					; fffffffeH
	call	?F4CommsConnectionCallback@@YAHH@Z	; F4CommsConnectionCallback
	add	esp, 4
	jmp	SHORT $LN8@InitCommsS
$LN2@InitCommsS:

; 198  : 		}
; 199  : 	}
; 200  : 
; 201  : 	// We have UDP & RUDP and PTOP
; 202  : 	FalconConnectionProtocol = FCP_UDP_AVAILABLE | FCP_RUDP_AVAILABLE;

	mov	DWORD PTR ?FalconConnectionProtocol@@3HA, 17 ; FalconConnectionProtocol, 00000011H

; 203  : 	FalconConnectionType = FCT_PTOP_AVAILABLE;

	mov	DWORD PTR ?FalconConnectionType@@3HA, 1	; FalconConnectionType

; 204  : 	F4CommsConnectionCallback(F4COMMS_CONNECTED);

	push	1
	call	?F4CommsConnectionCallback@@YAHH@Z	; F4CommsConnectionCallback
	add	esp, 4

; 205  : 
; 206  : 
; 207  : 	ComAPISetTimeStampFunction(TimeStampFunction);

	push	OFFSET ?TimeStampFunction@@YAKXZ	; TimeStampFunction
	call	_ComAPISetTimeStampFunction
	add	esp, 4

; 208  : 	return gConnectionStatus;

	mov	eax, DWORD PTR ?gConnectionStatus@@3HA	; gConnectionStatus
$LN8@InitCommsS:

; 209  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitCommsStuff@@YAHPAVComDataClass@@@Z ENDP		; InitCommsStuff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GameName@VuGameEntity@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GameName@VuGameEntity@@QAEPADXZ PROC			; VuGameEntity::GameName, COMDAT
; _this$ = ecx

; 400  : 	char *GameName()		{ return gameName_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]
	mov	esp, ebp
	pop	ebp
	ret	0
?GameName@VuGameEntity@@QAEPADXZ ENDP			; VuGameEntity::GameName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?SessionCount@VuGroupEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SessionCount@VuGroupEntity@@QAEHXZ PROC		; VuGroupEntity::SessionCount, COMDAT
; _this$ = ecx

; 341  : 	int SessionCount()    { return sessionCollection_->Count(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+336]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	0
?SessionCount@VuGroupEntity@@QAEHXZ ENDP		; VuGroupEntity::SessionCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GroupName@VuGroupEntity@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GroupName@VuGroupEntity@@QAEPADXZ PROC			; VuGroupEntity::GroupName, COMDAT
; _this$ = ecx

; 339  : 	char *GroupName()     { return groupName_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]
	mov	esp, ebp
	pop	ebp
	ret	0
?GroupName@VuGroupEntity@@QAEPADXZ ENDP			; VuGroupEntity::GroupName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GameAction@VuSessionEntity@@QAE?AW4VU_GAME_ACTION@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GameAction@VuSessionEntity@@QAE?AW4VU_GAME_ACTION@@XZ PROC ; VuSessionEntity::GameAction, COMDAT
; _this$ = ecx

; 197  : 	VU_GAME_ACTION GameAction() { return action_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+412]
	mov	esp, ebp
	pop	ebp
	ret	0
?GameAction@VuSessionEntity@@QAE?AW4VU_GAME_ACTION@@XZ ENDP ; VuSessionEntity::GameAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?SetAddress@VuSessionEntity@@QAEXVVU_ADDRESS@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_add$ = 8						; size = 8
?SetAddress@VuSessionEntity@@QAEXVVU_ADDRESS@@@Z PROC	; VuSessionEntity::SetAddress, COMDAT
; _this$ = ecx

; 190  : 	void SetAddress(VU_ADDRESS add){address_ = add;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _add$[ebp]
	mov	DWORD PTR [eax+332], ecx
	mov	edx, DWORD PTR _add$[ebp+4]
	mov	DWORD PTR [eax+336], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAddress@VuSessionEntity@@QAEXVVU_ADDRESS@@@Z ENDP	; VuSessionEntity::SetAddress
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ PROC	; VuSessionEntity::GetAddress, COMDAT
; _this$ = ecx

; 179  : 	VU_ADDRESS GetAddress()   { return address_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	edx, DWORD PTR [eax+336]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ENDP	; VuSessionEntity::GetAddress
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cs$ = 8						; size = 4
?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z PROC ; VuTargetEntity::SetReliableCommsStatus, COMDAT
; _this$ = ecx

; 116  : 	void SetReliableCommsStatus(VuCommsConnectStatus cs) { reliableComms_.status_ = cs; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+228], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ENDP ; VuTargetEntity::SetReliableCommsStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ PROC ; VuTargetEntity::GetReliableCommsHandle, COMDAT
; _this$ = ecx

; 115  : 	ComAPIHandle GetReliableCommsHandle() { return reliableComms_.handle_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+224]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ENDP ; VuTargetEntity::GetReliableCommsHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GetReliableCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReliableCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ PROC ; VuTargetEntity::GetReliableCommsStatus, COMDAT
; _this$ = ecx

; 114  : 	VuCommsConnectStatus GetReliableCommsStatus() {return reliableComms_.status_;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+228]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReliableCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ENDP ; VuTargetEntity::GetReliableCommsStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cs$ = 8						; size = 4
?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z PROC ; VuTargetEntity::SetCommsStatus, COMDAT
; _this$ = ecx

; 110  : 	void SetCommsStatus(VuCommsConnectStatus cs) { bestEffortComms_.status_ = cs;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+128], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ENDP ; VuTargetEntity::SetCommsStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ PROC ; VuTargetEntity::GetCommsHandle, COMDAT
; _this$ = ecx

; 109  : 	ComAPIHandle GetCommsHandle() { return bestEffortComms_.handle_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ENDP ; VuTargetEntity::GetCommsHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GetCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ PROC ; VuTargetEntity::GetCommsStatus, COMDAT
; _this$ = ecx

; 108  : 	VuCommsConnectStatus GetCommsStatus() { return bestEffortComms_.status_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+128]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ENDP ; VuTargetEntity::GetCommsStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?VuxAdjustLatency@@YAXKK@Z PROC				; VuxAdjustLatency

; 1211 : {

	push	ebp
	mov	ebp, esp

; 1212 : 	// KCK NOTE: This is stubbed 'cause we're not using VU's latency checking
; 1213 : 	//	SynchronizeTime(vuLocalSessionEntity->Group());
; 1214 : 	//	MonoPrint("Called VuxAdjustLatency(%d, %d)\n", t1, t2);
; 1215 : }

	pop	ebp
	ret	0
?VuxAdjustLatency@@YAXKK@Z ENDP				; VuxAdjustLatency
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 8
$T2 = -36						; size = 8
_game$3 = -28						; size = 4
_flight$4 = -24						; size = 4
tv221 = -20						; size = 4
tv203 = -16						; size = 4
tv132 = -12						; size = 4
_gh$ = -8						; size = 4
_sh$ = -4						; size = 4
_group$ = 8						; size = 4
_session$ = 12						; size = 4
?VuxGroupRemoveSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z PROC ; VuxGroupRemoveSession

; 977  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 978  : 	// check if session is in group
; 979  : 	if (!group->SessionInGroup(session)){

	mov	eax, DWORD PTR _session$[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SessionInGroup@VuGroupEntity@@QAEEPAVVuSessionEntity@@@Z ; VuGroupEntity::SessionInGroup
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@VuxGroupRe

; 980  : 		return VU_NO_OP;

	xor	eax, eax
	jmp	$LN11@VuxGroupRe
$LN10@VuxGroupRe:

; 981  : 	}
; 982  : 
; 983  : 	ComAPIHandle gh,sh;
; 984  : 
; 985  : 	if (group->IsGame()){

	mov	edx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@VuxGroupRe

; 986  : 		FalconGameEntity *game = static_cast<FalconGameEntity*>(group);

	mov	ecx, DWORD PTR _group$[ebp]
	mov	DWORD PTR _game$3[ebp], ecx

; 987  : 		if (session == vuLocalSessionEntity){

	push	OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	mov	edx, DWORD PTR _session$[ebp]
	push	edx
	call	??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z ; operator==<VuSessionEntity>
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@VuxGroupRe

; 988  : 			// were leaving game
; 989  : 			ComAPIBWEnterState(CAPI_LOBBY_ST);

	push	0
	call	_ComAPIBWEnterState
	add	esp, 4
	jmp	SHORT $LN9@VuxGroupRe
$LN8@VuxGroupRe:

; 990  : 		}
; 991  : 		else if (group == vuLocalGame){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@VuxGroupRe
	mov	DWORD PTR tv132[ebp], 0
	jmp	SHORT $LN14@VuxGroupRe
$LN13@VuxGroupRe:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	DWORD PTR tv132[ebp], eax
$LN14@VuxGroupRe:
	mov	edx, DWORD PTR _group$[ebp]
	cmp	edx, DWORD PTR tv132[ebp]
	jne	SHORT $LN9@VuxGroupRe

; 992  : 			// player left game were in
; 993  : 			ComAPIBWPlayerLeft();

	call	_ComAPIBWPlayerLeft
$LN9@VuxGroupRe:

; 994  : 		}
; 995  : 	}
; 996  : 
; 997  : 	gh = group->GetCommsHandle();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	mov	DWORD PTR _gh$[ebp], eax

; 998  : 	sh = session->GetCommsHandle();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	mov	DWORD PTR _sh$[ebp], eax

; 999  : 	if (gh && sh && (gh != sh)){

	cmp	DWORD PTR _gh$[ebp], 0
	je	SHORT $LN5@VuxGroupRe
	cmp	DWORD PTR _sh$[ebp], 0
	je	SHORT $LN5@VuxGroupRe
	mov	eax, DWORD PTR _gh$[ebp]
	cmp	eax, DWORD PTR _sh$[ebp]
	je	SHORT $LN5@VuxGroupRe

; 1000 : 		ComAPIDeleteFromGroup(gh,sh);

	mov	ecx, DWORD PTR _sh$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gh$[ebp]
	push	edx
	call	_ComAPIDeleteFromGroup
	add	esp, 8
$LN5@VuxGroupRe:

; 1001 : 	}
; 1002 : 	//	if (sh == FalconInitialUDPHandle && gh == FalconGlobalUDPHandle)
; 1003 : 	//		FalconInitialUDPHandle = NULL;
; 1004 : 	gh = group->GetReliableCommsHandle();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	mov	DWORD PTR _gh$[ebp], eax

; 1005 : 	sh = session->GetReliableCommsHandle();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	mov	DWORD PTR _sh$[ebp], eax

; 1006 : 	if (gh && sh && gh != sh){

	cmp	DWORD PTR _gh$[ebp], 0
	je	SHORT $LN4@VuxGroupRe
	cmp	DWORD PTR _sh$[ebp], 0
	je	SHORT $LN4@VuxGroupRe
	mov	eax, DWORD PTR _gh$[ebp]
	cmp	eax, DWORD PTR _sh$[ebp]
	je	SHORT $LN4@VuxGroupRe

; 1007 : 		ComAPIDeleteFromGroup(gh,sh);

	mov	ecx, DWORD PTR _sh$[ebp]
	push	ecx
	mov	edx, DWORD PTR _gh$[ebp]
	push	edx
	call	_ComAPIDeleteFromGroup
	add	esp, 8
$LN4@VuxGroupRe:

; 1008 : 	}
; 1009 : 
; 1010 : 	if(gUICommsQ){

	cmp	DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A, 0 ; gUICommsQ
	je	SHORT $LN3@VuxGroupRe

; 1011 : 		gUICommsQ->Add(_Q_SESSION_REMOVE_,session->Id(),group->Id());

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	push	2
	mov	ecx, DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A ; gUICommsQ
	call	?Add@CommsQueue@@QAEXFVVU_ID@@0@Z	; CommsQueue::Add
$LN3@VuxGroupRe:

; 1012 : 	}
; 1013 : 
; 1014 : 	// VWF 12/1/98: Added this to clean up player's flight when he leaves game
; 1015 : 	if ((FalconLocalGame == group) && (FalconLocalGame->IsLocal()))

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@VuxGroupRe
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN16@VuxGroupRe
$LN15@VuxGroupRe:
	mov	DWORD PTR tv203[ebp], 0
$LN16@VuxGroupRe:
	mov	ecx, DWORD PTR tv203[ebp]
	cmp	ecx, DWORD PTR _group$[ebp]
	jne	SHORT $LN2@VuxGroupRe
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN17@VuxGroupRe
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv221[ebp], eax
	jmp	SHORT $LN18@VuxGroupRe
$LN17@VuxGroupRe:
	mov	DWORD PTR tv221[ebp], 0
$LN18@VuxGroupRe:
	mov	ecx, DWORD PTR tv221[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@VuxGroupRe

; 1016 : 	{
; 1017 : 		Flight flight = ((FalconSessionEntity*)session)->GetAssignedPlayerFlight();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetAssignedPlayerFlight
	mov	DWORD PTR _flight$4[ebp], eax

; 1018 : 		if(flight){

	cmp	DWORD PTR _flight$4[ebp], 0
	je	SHORT $LN2@VuxGroupRe

; 1019 : 			LeaveACSlot(
; 1020 : 				((FalconSessionEntity*)session)->GetAssignedPlayerFlight(), 
; 1021 : 				((FalconSessionEntity*)session)->GetAssignedAircraftNum()
; 1022 : 			);

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAssignedAircraftNum
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetAssignedPlayerFlight
	push	eax
	call	?LeaveACSlot@@YAXPAVFlightClass@@E@Z	; LeaveACSlot
	add	esp, 8
$LN2@VuxGroupRe:

; 1023 : 			// Make sure this session doesn't have any old information
; 1024 : 		}
; 1025 : 	}
; 1026 : 	// END VWF
; 1027 : 
; 1028 : 	((FalconSessionEntity*)session)->SetPlayerSquadron (NULL);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetPlayerSquadron@FalconSessionEntity@@QAEXPAVSquadronClass@@@Z ; FalconSessionEntity::SetPlayerSquadron

; 1029 : 	((FalconSessionEntity*)session)->SetPlayerFlight (NULL);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z ; FalconSessionEntity::SetPlayerFlight

; 1030 : 	((FalconSessionEntity*)session)->SetPlayerEntity (NULL);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetPlayerEntity@FalconSessionEntity@@QAEXPAVFalconEntity@@@Z ; FalconSessionEntity::SetPlayerEntity

; 1031 : 	((FalconSessionEntity*)session)->SetAircraftNum (255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetAircraftNum@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetAircraftNum

; 1032 : 	((FalconSessionEntity*)session)->SetPilotSlot (255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetPilotSlot@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetPilotSlot

; 1033 : 	((FalconSessionEntity*)session)->SetAssignedAircraftNum (255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetAssignedAircraftNum@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetAssignedAircraftNum

; 1034 : 	((FalconSessionEntity*)session)->SetAssignedPilotSlot (255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetAssignedPilotSlot@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetAssignedPilotSlot

; 1035 : 	((FalconSessionEntity*)session)->SetAssignedPlayerFlight (NULL);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetAssignedPlayerFlight@FalconSessionEntity@@QAEXPAVFlightClass@@@Z ; FalconSessionEntity::SetAssignedPlayerFlight

; 1036 : 
; 1037 : 	return 1;

	mov	eax, 1
$LN11@VuxGroupRe:

; 1038 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VuxGroupRemoveSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z ENDP ; VuxGroupRemoveSession
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T2 = -112						; size = 8
$T3 = -104						; size = 8
$T4 = -96						; size = 8
$T5 = -88						; size = 8
$T6 = -80						; size = 8
$T7 = -72						; size = 8
$T8 = -64						; size = 8
$T9 = -56						; size = 4
_msg$10 = -52						; size = 4
tv315 = -48						; size = 4
$T11 = -44						; size = 4
tv200 = -40						; size = 4
tv154 = -36						; size = 4
_players$12 = -32					; size = 4
tv140 = -28						; size = 4
_game$13 = -24						; size = 4
_gh$ = -20						; size = 4
_sh$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_group$ = 8						; size = 4
_session$ = 12						; size = 4
?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z PROC ; VuxGroupAddSession

; 891  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 892  : 	ComAPIHandle	gh,sh;
; 893  : 	if (g_bVoiceCom)

	movzx	eax, BYTE PTR ?g_bVoiceCom@@3_NA	; g_bVoiceCom
	test	eax, eax
	je	SHORT $LN23@VuxGroupAd

; 894  : 	{
; 895  : 		if (strcmpi(g_strVoiceHostIP, "")){

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ?g_strVoiceHostIP@@3PADA		; g_strVoiceHostIP
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@VuxGroupAd

; 896  : 			g_ipadress = g_strVoiceHostIP;

	mov	DWORD PTR ?g_ipadress@@3PADA, OFFSET ?g_strVoiceHostIP@@3PADA ; g_ipadress, g_strVoiceHostIP
$LN22@VuxGroupAd:

; 897  : 		}
; 898  : 		if (
; 899  : 			(gConnectionStatus == F4COMMS_CONNECTED || 
; 900  : 			(g_ipadress && !strcmpi(g_ipadress, "0.0.0.0"))) && 
; 901  : 			!stoppingvoice && !g_pDPServer && !g_pDPClient  && (g_ipadress)
; 902  : 		){ 

	cmp	DWORD PTR ?gConnectionStatus@@3HA, 1	; gConnectionStatus
	je	SHORT $LN20@VuxGroupAd
	cmp	DWORD PTR ?g_ipadress@@3PADA, 0		; g_ipadress
	je	SHORT $LN23@VuxGroupAd
	push	OFFSET ??_C@_07OHKHACFK@0?40?40?40?$AA@
	mov	ecx, DWORD PTR ?g_ipadress@@3PADA	; g_ipadress
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@VuxGroupAd
$LN20@VuxGroupAd:
	movzx	edx, BYTE PTR ?stoppingvoice@@3_NA	; stoppingvoice
	test	edx, edx
	jne	SHORT $LN23@VuxGroupAd
	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	jne	SHORT $LN23@VuxGroupAd
	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	jne	SHORT $LN23@VuxGroupAd
	cmp	DWORD PTR ?g_ipadress@@3PADA, 0		; g_ipadress
	je	SHORT $LN23@VuxGroupAd

; 903  : 			startupvoice(g_ipadress);//me123

	mov	eax, DWORD PTR ?g_ipadress@@3PADA	; g_ipadress
	push	eax
	call	?startupvoice@@YAXPAD@Z			; startupvoice
	add	esp, 4
$LN23@VuxGroupAd:

; 904  : 		}
; 905  : 	}
; 906  : 
; 907  : 	// sfr bw control
; 908  : 	// adjusted only for games
; 909  : 	if (group->IsGame()){

	mov	ecx, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN19@VuxGroupAd

; 910  : 		FalconGameEntity *game = static_cast<FalconGameEntity*>(group);

	mov	edx, DWORD PTR _group$[ebp]
	mov	DWORD PTR _game$13[ebp], edx

; 911  : 		if (session == vuLocalSessionEntity){

	push	OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	mov	eax, DWORD PTR _session$[ebp]
	push	eax
	call	??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z ; operator==<VuSessionEntity>
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN18@VuxGroupAd

; 912  : 			// adding ourselves to group
; 913  : 			if (game == vuPlayerPoolGroup){

	mov	edx, DWORD PTR _game$13[ebp]
	cmp	edx, DWORD PTR ?vuPlayerPoolGroup@@3PAVVuGameEntity@@A ; vuPlayerPoolGroup
	jne	SHORT $LN17@VuxGroupAd

; 914  : 				ComAPIBWEnterState(CAPI_LOBBY_ST);

	push	0
	call	_ComAPIBWEnterState
	add	esp, 4

; 915  : 			}
; 916  : 			else {

	jmp	SHORT $LN16@VuxGroupAd
$LN17@VuxGroupAd:

; 917  : 				switch (game->gameType){

	mov	eax, DWORD PTR _game$13[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	DWORD PTR tv140[ebp], ecx
	cmp	DWORD PTR tv140[ebp], 2
	je	SHORT $LN13@VuxGroupAd
	cmp	DWORD PTR tv140[ebp], 2
	jle	SHORT $LN16@VuxGroupAd
	cmp	DWORD PTR tv140[ebp], 4
	jle	SHORT $LN12@VuxGroupAd
	jmp	SHORT $LN16@VuxGroupAd
$LN13@VuxGroupAd:

; 918  : 					//case game_PlayerPool:
; 919  : 					//	ComAPIBWEnterState(CAPI_LOBBY_ST);
; 920  : 					//break;
; 921  : 					case game_Dogfight:
; 922  : 						ComAPIBWEnterState(CAPI_DF_ST);

	push	3
	call	_ComAPIBWEnterState
	add	esp, 4

; 923  : 					break;

	jmp	SHORT $LN16@VuxGroupAd
$LN12@VuxGroupAd:

; 924  : 					case game_TacticalEngagement:
; 925  : 					case game_Campaign:
; 926  : 						// here is different if we are host, for others its the same
; 927  : 						ComAPIBWEnterState((game->OwnerId() == vuLocalSession) ? CAPI_CAS_ST : CAPI_CAC_ST);

	push	OFFSET ?vuLocalSession@@3VVU_ID@@A	; vuLocalSession
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR _game$13[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@VuxGroupAd
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN27@VuxGroupAd
$LN26@VuxGroupAd:
	mov	DWORD PTR tv154[ebp], 2
$LN27@VuxGroupAd:
	mov	ecx, DWORD PTR tv154[ebp]
	push	ecx
	call	_ComAPIBWEnterState
	add	esp, 4
$LN16@VuxGroupAd:

; 928  : 					break;
; 929  : 					default:
; 930  : 						; // do nothing
; 931  : 				}
; 932  : 			}
; 933  : 			// if game is not ours, we need to update bw to reflect other players already in	
; 934  : 			if (game->OwnerId() != vuLocalSessionEntity->Id()){

	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _game$13[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@VuxGroupAd

; 935  : 				for (unsigned int players = game->SessionCount();players>0;--players){

	mov	ecx, DWORD PTR _game$13[ebp]
	call	?SessionCount@VuGroupEntity@@QAEHXZ	; VuGroupEntity::SessionCount
	mov	DWORD PTR _players$12[ebp], eax
	jmp	SHORT $LN9@VuxGroupAd
$LN8@VuxGroupAd:
	mov	edx, DWORD PTR _players$12[ebp]
	sub	edx, 1
	mov	DWORD PTR _players$12[ebp], edx
$LN9@VuxGroupAd:
	cmp	DWORD PTR _players$12[ebp], 0
	jbe	SHORT $LN10@VuxGroupAd

; 936  : 					ComAPIBWPlayerJoined();

	call	_ComAPIBWPlayerJoined

; 937  : 				}

	jmp	SHORT $LN8@VuxGroupAd
$LN10@VuxGroupAd:

; 938  : 			}
; 939  : 		}

	jmp	SHORT $LN19@VuxGroupAd
$LN18@VuxGroupAd:

; 940  : 		else if (game == vuLocalGame) {

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN28@VuxGroupAd
	mov	DWORD PTR tv200[ebp], 0
	jmp	SHORT $LN29@VuxGroupAd
$LN28@VuxGroupAd:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	DWORD PTR tv200[ebp], eax
$LN29@VuxGroupAd:
	mov	ecx, DWORD PTR _game$13[ebp]
	cmp	ecx, DWORD PTR tv200[ebp]
	jne	SHORT $LN19@VuxGroupAd

; 941  : 			// adding others to group
; 942  : 			ComAPIBWPlayerJoined();

	call	_ComAPIBWPlayerJoined
$LN19@VuxGroupAd:

; 943  : 		}
; 944  : 	}
; 945  : 
; 946  : 	gh = group->GetCommsHandle();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	mov	DWORD PTR _gh$[ebp], eax

; 947  : 	sh = session->GetCommsHandle();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	mov	DWORD PTR _sh$[ebp], eax

; 948  : 	if (gh && sh && gh != sh){

	cmp	DWORD PTR _gh$[ebp], 0
	je	SHORT $LN4@VuxGroupAd
	cmp	DWORD PTR _sh$[ebp], 0
	je	SHORT $LN4@VuxGroupAd
	mov	edx, DWORD PTR _gh$[ebp]
	cmp	edx, DWORD PTR _sh$[ebp]
	je	SHORT $LN4@VuxGroupAd

; 949  : 		ComAPIAddToGroup(gh,sh);

	mov	eax, DWORD PTR _sh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gh$[ebp]
	push	ecx
	call	_ComAPIAddToGroup
	add	esp, 8
$LN4@VuxGroupAd:

; 950  : 	}
; 951  : 	gh = group->GetReliableCommsHandle();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	mov	DWORD PTR _gh$[ebp], eax

; 952  : 	sh = session->GetReliableCommsHandle();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	mov	DWORD PTR _sh$[ebp], eax

; 953  : 	if (gh && sh && gh != sh){

	cmp	DWORD PTR _gh$[ebp], 0
	je	SHORT $LN3@VuxGroupAd
	cmp	DWORD PTR _sh$[ebp], 0
	je	SHORT $LN3@VuxGroupAd
	mov	edx, DWORD PTR _gh$[ebp]
	cmp	edx, DWORD PTR _sh$[ebp]
	je	SHORT $LN3@VuxGroupAd

; 954  : 		ComAPIAddToGroup(gh,sh);

	mov	eax, DWORD PTR _sh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gh$[ebp]
	push	ecx
	call	_ComAPIAddToGroup
	add	esp, 8
$LN3@VuxGroupAd:

; 955  : 	}
; 956  : 
; 957  : 	// UI Related
; 958  : 	if(gUICommsQ && group->IsGame()){

	cmp	DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A, 0 ; gUICommsQ
	je	SHORT $LN2@VuxGroupAd
	mov	edx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@VuxGroupAd

; 959  : 		gUICommsQ->Add(_Q_SESSION_ADD_,session->Id(),group->Id());

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _group$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A ; gUICommsQ
	call	?Add@CommsQueue@@QAEXFVVU_ID@@0@Z	; CommsQueue::Add
$LN2@VuxGroupAd:

; 960  : 	}
; 961  : 
; 962  : 	// Send FullUpdate for session if this is our game
; 963  : 	if (
; 964  : 		(group->IsGame ()) &&
; 965  : 		(group->Id() == vuLocalSessionEntity->GameId()) &&
; 966  : 		(vuLocalSessionEntity.get() != session)
; 967  : 	){

	mov	ecx, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@VuxGroupAd
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?GameId@VuSessionEntity@@QAE?AVVU_ID@@XZ ; VuSessionEntity::GameId
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@VuxGroupAd
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	eax, DWORD PTR _session$[ebp]
	je	SHORT $LN1@VuxGroupAd

; 968  : 		VuFullUpdateEvent *msg = new VuFullUpdateEvent (vuLocalSessionEntity.get(), session);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN30@VuxGroupAd
	push	0
	mov	edx, DWORD PTR _session$[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0VuFullUpdateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z ; VuFullUpdateEvent::VuFullUpdateEvent
	mov	DWORD PTR tv315[ebp], eax
	jmp	SHORT $LN31@VuxGroupAd
$LN30@VuxGroupAd:
	mov	DWORD PTR tv315[ebp], 0
$LN31@VuxGroupAd:
	mov	eax, DWORD PTR tv315[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR _msg$10[ebp], ecx

; 969  : 		msg->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _msg$10[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 970  : 		VuMessageQueue::PostVuMessage(msg);

	mov	edx, DWORD PTR _msg$10[ebp]
	push	edx
	call	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z ; VuMessageQueue::PostVuMessage
	add	esp, 4
$LN1@VuxGroupAd:

; 971  : 	}
; 972  : 
; 973  : 	return 1;

	mov	eax, 1

; 974  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z$0:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z ENDP ; VuxGroupAddSession
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 8
_ch$ = -4						; size = 4
_group$ = 8						; size = 4
?VuxGroupDisconnect@@YAXPAVVuGroupEntity@@@Z PROC	; VuxGroupDisconnect

; 860  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 861  : 	ComAPIHandle ch;
; 862  : 
; 863  : 	if (group->IsGame())

	mov	eax, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@VuxGroupDi

; 864  : 	{
; 865  : 		MonoPrint("Disconnecting to game: %s\n",((VuGameEntity*)group)->GameName());

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	push	eax
	push	OFFSET ??_C@_0BL@HDIEAGFK@Disconnecting?5to?5game?3?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 866  : 	}
; 867  : 	else

	jmp	SHORT $LN4@VuxGroupDi
$LN5@VuxGroupDi:

; 868  : 	{
; 869  : 		MonoPrint("Disconnecting to group: %s\n",group->GroupName());

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GroupName@VuGroupEntity@@QAEPADXZ	; VuGroupEntity::GroupName
	push	eax
	push	OFFSET ??_C@_0BM@NAGGHADL@Disconnecting?5to?5group?3?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN4@VuxGroupDi:

; 870  : 	}
; 871  : 
; 872  : 	// Disconnect UDP
; 873  : 	ch = group->GetCommsHandle();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	mov	DWORD PTR _ch$[ebp], eax

; 874  : 	group->SetCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 875  : 	group->SetCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus

; 876  : 	if (ch && ch != FalconGlobalUDPHandle)

	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN3@VuxGroupDi
	mov	edx, DWORD PTR _ch$[ebp]
	cmp	edx, DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A ; FalconGlobalUDPHandle
	je	SHORT $LN3@VuxGroupDi

; 877  : 		ComAPIClose(ch);

	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	call	_ComAPIClose
	add	esp, 4
$LN3@VuxGroupDi:

; 878  : 	// Disconnect TCP
; 879  : 	ch = group->GetReliableCommsHandle();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	mov	DWORD PTR _ch$[ebp], eax

; 880  : 	group->SetReliableCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 881  : 	group->SetReliableCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus

; 882  : 	if (ch && ch != FalconGlobalTCPHandle)

	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN2@VuxGroupDi
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A ; FalconGlobalTCPHandle
	je	SHORT $LN2@VuxGroupDi

; 883  : 		ComAPIClose(ch);

	mov	edx, DWORD PTR _ch$[ebp]
	push	edx
	call	_ComAPIClose
	add	esp, 4
$LN2@VuxGroupDi:

; 884  : 
; 885  : 	if(gUICommsQ && group->IsGame())

	cmp	DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A, 0 ; gUICommsQ
	je	SHORT $LN6@VuxGroupDi
	mov	eax, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@VuxGroupDi

; 886  : 		gUICommsQ->Add(_Q_GAME_REMOVE_,FalconNullId,group->Id());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _group$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	push	5
	mov	ecx, DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A ; gUICommsQ
	call	?Add@CommsQueue@@QAEXFVVU_ID@@0@Z	; CommsQueue::Add
$LN6@VuxGroupDi:

; 887  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VuxGroupDisconnect@@YAXPAVVuGroupEntity@@@Z ENDP	; VuxGroupDisconnect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T1 = -124						; size = 8
_gh$2 = -116						; size = 4
_gh$3 = -112						; size = 4
_name$ = -108						; size = 4
_buffer$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_group$ = 8						; size = 4
?VuxGroupConnect@@YAHPAVVuGroupEntity@@@Z PROC		; VuxGroupConnect

; 754  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 755  : 	char
; 756  : 		buffer[100],
; 757  : 		*name;
; 758  : 
; 759  : 	if (group->IsGame())

	mov	eax, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN27@VuxGroupCo

; 760  : 	{
; 761  : 		name = ((VuGameEntity*)group)->GameName();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	mov	DWORD PTR _name$[ebp], eax

; 762  : 		MonoPrint("Connecting to game: %s\n",((VuGameEntity*)group)->GameName());

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	push	eax
	push	OFFSET ??_C@_0BI@GIMJLIEC@Connecting?5to?5game?3?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 763  : 	}
; 764  : 	else

	jmp	SHORT $LN26@VuxGroupCo
$LN27@VuxGroupCo:

; 765  : 	{
; 766  : 		name = group->GroupName();

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GroupName@VuGroupEntity@@QAEPADXZ	; VuGroupEntity::GroupName
	mov	DWORD PTR _name$[ebp], eax

; 767  : 		MonoPrint("Connecting to group: %s\n",group->GroupName());

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GroupName@VuGroupEntity@@QAEPADXZ	; VuGroupEntity::GroupName
	push	eax
	push	OFFSET ??_C@_0BJ@MDBBKFND@Connecting?5to?5group?3?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN26@VuxGroupCo:

; 768  : 	}
; 769  : 
; 770  : 	// Check for existing connections
; 771  : 	if (!group->GetCommsHandle())

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetCommsHandle
	test	eax, eax
	jne	$LN25@VuxGroupCo

; 772  : 	{
; 773  : 		if (!(FalconConnectionProtocol & FCP_UDP_AVAILABLE) && !(FalconConnectionProtocol & FCP_SERIAL_AVAILABLE))

	mov	edx, DWORD PTR ?FalconConnectionProtocol@@3HA ; FalconConnectionProtocol
	and	edx, 1
	jne	SHORT $LN24@VuxGroupCo
	mov	eax, DWORD PTR ?FalconConnectionProtocol@@3HA ; FalconConnectionProtocol
	and	eax, 4
	jne	SHORT $LN24@VuxGroupCo

; 774  : 		{
; 775  : 			// No udp connections available
; 776  : 			group->SetCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 777  : 			group->SetCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
	jmp	$LN25@VuxGroupCo
$LN24@VuxGroupCo:

; 778  : 		}
; 779  : 		else if (FalconConnectionType & FCT_SERIAL_AVAILABLE)

	mov	ecx, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	ecx, 8
	je	SHORT $LN22@VuxGroupCo

; 780  : 		{
; 781  : 			group->SetCommsHandle(NULL);		// We'll inherit from our global group

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 782  : 			group->SetCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
	jmp	$LN25@VuxGroupCo
$LN22@VuxGroupCo:

; 783  : 		}
; 784  : 		else if (FalconConnectionType & FCT_SERVER_AVAILABLE && FalconGlobalUDPHandle)

	mov	edx, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	edx, 4
	je	SHORT $LN20@VuxGroupCo
	cmp	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalUDPHandle
	je	SHORT $LN20@VuxGroupCo

; 785  : 		{
; 786  : 			// Point us to our server's UDP connection
; 787  : 			group->SetCommsHandle(NULL);		// We'll inherit from our global group

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 788  : 			group->SetCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
	jmp	$LN25@VuxGroupCo
$LN20@VuxGroupCo:

; 789  : 		}
; 790  : 		else if (FalconConnectionType & FCT_BCAST_AVAILABLE && FalconGlobalUDPHandle)

	mov	eax, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	eax, 2
	je	SHORT $LN18@VuxGroupCo
	cmp	DWORD PTR ?FalconGlobalUDPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalUDPHandle
	je	SHORT $LN18@VuxGroupCo

; 791  : 		{
; 792  : 			// Since we have broadcast available, pass our broadcast handle
; 793  : 			group->SetCommsHandle(NULL);		// We'll inherit from our global group

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 794  : 			group->SetCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
	jmp	$LN25@VuxGroupCo
$LN18@VuxGroupCo:

; 795  : 		}
; 796  : 		else if (FalconConnectionType & FCT_PTOP_AVAILABLE)

	mov	ecx, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	ecx, 1
	je	SHORT $LN16@VuxGroupCo

; 797  : 		{
; 798  : 			// Point to Point only - Create a new comms group which we will add shit to.
; 799  : 			sprintf (buffer, "%s UDP", name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_06ICJKOBAJ@?$CFs?5UDP?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 800  : 			MonoPrint ("CreateGroup %s\n", buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@IDADAGKK@CreateGroup?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 801  : 			ComAPIHandle	gh = ComAPICreateGroup(buffer, F4CommsMaxUDPMessageSize,0);

	push	0
	mov	edx, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_ComAPICreateGroup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gh$2[ebp], eax

; 802  : 			group->SetCommsHandle(gh, F4CommsMaxUDPMessageSize, F4CommsIdealUDPPacketSize);

	mov	ecx, DWORD PTR ?F4CommsIdealUDPPacketSize@@3HA ; F4CommsIdealUDPPacketSize
	push	ecx
	mov	edx, DWORD PTR ?F4CommsMaxUDPMessageSize@@3HA ; F4CommsMaxUDPMessageSize
	push	edx
	mov	eax, DWORD PTR _gh$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 803  : 			if (gh)

	cmp	DWORD PTR _gh$2[ebp], 0
	je	SHORT $LN15@VuxGroupCo

; 804  : 				group->SetCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus

; 805  : 			else

	jmp	SHORT $LN14@VuxGroupCo
$LN15@VuxGroupCo:

; 806  : 				group->SetCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
$LN14@VuxGroupCo:

; 807  : 		}
; 808  : 		else

	jmp	SHORT $LN25@VuxGroupCo
$LN16@VuxGroupCo:

; 809  : 		{
; 810  : 			// No communication available.
; 811  : 			group->SetCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 812  : 			group->SetCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
$LN25@VuxGroupCo:

; 813  : 		}
; 814  : 	}
; 815  : 	if (!group->GetReliableCommsHandle())

	mov	ecx, DWORD PTR _group$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	test	eax, eax
	jne	$LN12@VuxGroupCo

; 816  : 	{
; 817  : 		if (!(FalconConnectionProtocol & FCP_TCP_AVAILABLE) && !(FalconConnectionProtocol & FCP_SERIAL_AVAILABLE) && !(FalconConnectionProtocol & FCP_RUDP_AVAILABLE))

	mov	ecx, DWORD PTR ?FalconConnectionProtocol@@3HA ; FalconConnectionProtocol
	and	ecx, 2
	jne	SHORT $LN11@VuxGroupCo
	mov	edx, DWORD PTR ?FalconConnectionProtocol@@3HA ; FalconConnectionProtocol
	and	edx, 4
	jne	SHORT $LN11@VuxGroupCo
	mov	eax, DWORD PTR ?FalconConnectionProtocol@@3HA ; FalconConnectionProtocol
	and	eax, 16					; 00000010H
	jne	SHORT $LN11@VuxGroupCo

; 818  : 		{
; 819  : 			// No reliable connections available
; 820  : 			group->SetReliableCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 821  : 			group->SetReliableCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus
	jmp	$LN12@VuxGroupCo
$LN11@VuxGroupCo:

; 822  : 		}
; 823  : 		else if (FalconConnectionType & FCT_SERIAL_AVAILABLE)

	mov	ecx, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	ecx, 8
	je	SHORT $LN9@VuxGroupCo

; 824  : 		{
; 825  : 			group->SetCommsHandle(NULL);		// We'll inherit from our global group

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 826  : 			group->SetCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus
	jmp	$LN12@VuxGroupCo
$LN9@VuxGroupCo:

; 827  : 		}
; 828  : 		else if (FalconConnectionType & FCT_SERVER_AVAILABLE && FalconGlobalTCPHandle)

	mov	edx, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	edx, 4
	je	SHORT $LN7@VuxGroupCo
	cmp	DWORD PTR ?FalconGlobalTCPHandle@@3PAUcomapihandle@@A, 0 ; FalconGlobalTCPHandle
	je	SHORT $LN7@VuxGroupCo

; 829  : 		{
; 830  : 			// Point us to our server's tcp connection
; 831  : 			group->SetCommsHandle(NULL);		// We'll inherit from our global group

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 832  : 			group->SetReliableCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus
	jmp	$LN12@VuxGroupCo
$LN7@VuxGroupCo:

; 833  : 		}
; 834  : 		else if (FalconConnectionType & FCT_PTOP_AVAILABLE)

	mov	eax, DWORD PTR ?FalconConnectionType@@3HA ; FalconConnectionType
	and	eax, 1
	je	SHORT $LN5@VuxGroupCo

; 835  : 		{
; 836  : 			// Point to Point only - Create a new comms group which we will add shit to.
; 837  : 			sprintf (buffer, "%s RUDP", name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_07ICEPJIFH@?$CFs?5RUDP?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 838  : 			MonoPrint ("CreateGroup %s\n", buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@IDADAGKK@CreateGroup?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 839  : 			ComAPIHandle	gh = ComAPICreateGroup(buffer, F4CommsMaxTCPMessageSize,0);

	push	0
	mov	ecx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_ComAPICreateGroup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gh$3[ebp], eax

; 840  : 			group->SetReliableCommsHandle(gh, F4CommsMaxTCPMessageSize, F4CommsIdealTCPPacketSize);

	mov	eax, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	push	eax
	mov	ecx, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	ecx
	mov	edx, DWORD PTR _gh$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 841  : 			if (gh)

	cmp	DWORD PTR _gh$3[ebp], 0
	je	SHORT $LN4@VuxGroupCo

; 842  : 				group->SetReliableCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus

; 843  : 			else

	jmp	SHORT $LN3@VuxGroupCo
$LN4@VuxGroupCo:

; 844  : 				group->SetReliableCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus
$LN3@VuxGroupCo:

; 845  : 		}
; 846  : 		else

	jmp	SHORT $LN12@VuxGroupCo
$LN5@VuxGroupCo:

; 847  : 		{
; 848  : 			// No reliable group communication available.
; 849  : 			group->SetReliableCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 850  : 			group->SetReliableCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _group$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus
$LN12@VuxGroupCo:

; 851  : 		}
; 852  : 	}
; 853  : 	if(gUICommsQ && group->IsGame())

	cmp	DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A, 0 ; gUICommsQ
	je	SHORT $LN1@VuxGroupCo
	mov	eax, DWORD PTR _group$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _group$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@VuxGroupCo

; 854  : 		gUICommsQ->Add(_Q_GAME_ADD_,FalconNullId,group->Id());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _group$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	push	4
	mov	ecx, DWORD PTR ?gUICommsQ@@3PAVCommsQueue@@A ; gUICommsQ
	call	?Add@CommsQueue@@QAEXFVVU_ID@@0@Z	; CommsQueue::Add
$LN1@VuxGroupCo:

; 855  : 
; 856  : 	return 0;

	xor	eax, eax

; 857  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?VuxGroupConnect@@YAHPAVVuGroupEntity@@@Z ENDP		; VuxGroupConnect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 8
$T3 = -64						; size = 8
_acnumber$ = -56					; size = 4
$T4 = -52						; size = 4
_playerEntity$5 = -48					; size = 4
tv215 = -44						; size = 4
tv185 = -40						; size = 4
$T6 = -36						; size = 4
tv170 = -32						; size = 4
tv141 = -28						; size = 4
_playerFlight$ = -24					; size = 4
_playerAircraft$7 = -20					; size = 4
_msg$8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_session$ = 8						; size = 4
?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z PROC	; VuxSessionDisconnect

; 1112 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1113 : 
; 1114 : 	if (session == FalconLocalSession)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$[ebp], eax
	jne	SHORT $LN10@VuxSession

; 1115 : 		return; 

	jmp	$LN11@VuxSession
$LN10@VuxSession:

; 1116 : 
; 1117 : 	// We only want to do this if we're leaving a game (i.e: This session is going away)
; 1118 : 	if (session->GameAction() != VU_LEAVE_GAME_ACTION)

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GameAction@VuSessionEntity@@QAE?AW4VU_GAME_ACTION@@XZ ; VuSessionEntity::GameAction
	cmp	eax, 3
	je	SHORT $LN9@VuxSession

; 1119 : 		return;

	jmp	$LN11@VuxSession
$LN9@VuxSession:

; 1120 : 
; 1121 : 
; 1122 : 	Flight playerFlight = (Flight)((FalconSessionEntity*)session)->GetAssignedPlayerFlight();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetAssignedPlayerFlight
	mov	DWORD PTR _playerFlight$[ebp], eax

; 1123 : 	int acnumber = ((FalconSessionEntity*)session)->GetAssignedAircraftNum();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAssignedAircraftNum
	movzx	eax, al
	mov	DWORD PTR _acnumber$[ebp], eax

; 1124 : 
; 1125 : 	if (g_bACPlayerCTDFix && playerFlight && FalconLocalGame->IsLocal()) // only the host...

	movzx	ecx, BYTE PTR ?g_bACPlayerCTDFix@@3_NA	; g_bACPlayerCTDFix
	test	ecx, ecx
	je	$LN8@VuxSession
	cmp	DWORD PTR _playerFlight$[ebp], 0
	je	$LN8@VuxSession
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@VuxSession
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN14@VuxSession
$LN13@VuxSession:
	mov	DWORD PTR tv141[ebp], 0
$LN14@VuxSession:
	mov	ecx, DWORD PTR tv141[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	$LN8@VuxSession

; 1126 : 	{
; 1127 : 		FalconPlayerStatusMessage	*msg = new FalconPlayerStatusMessage(((FalconSessionEntity*)session)->Id(), FalconLocalGame);

	push	93					; 0000005dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN17@VuxSession
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@VuxSession
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN16@VuxSession
$LN15@VuxSession:
	mov	DWORD PTR tv170[ebp], 0
$LN16@VuxSession:
	push	1
	mov	edx, DWORD PTR tv170[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconPlayerStatusMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconPlayerStatusMessage::FalconPlayerStatusMessage
	mov	DWORD PTR tv185[ebp], eax
	jmp	SHORT $LN18@VuxSession
$LN17@VuxSession:
	mov	DWORD PTR tv185[ebp], 0
$LN18@VuxSession:
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _msg$8[ebp], ecx

; 1128 : 		SimBaseClass				*playerEntity = (SimBaseClass*) ((FalconSessionEntity*)session)->GetPlayerEntity();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	mov	DWORD PTR _playerEntity$5[ebp], eax

; 1129 : 
; 1130 : 		// first change the deag owner of our disconnected player back to the host
; 1131 : 		/*	if (playerEntity)
; 1132 : 			{
; 1133 : 			FalconSimCampMessage	*simmsg = new FalconSimCampMessage (playerEntity->Id(), FalconLocalGame); // target);
; 1134 : 			simmsg->dataBlock.from = FalconLocalGame->OwnerId();
; 1135 : 			simmsg->dataBlock.message = FalconSimCampMessage::simcampChangeOwner;
; 1136 : 			FalconSendMessage(simmsg);
; 1137 : 			}
; 1138 : 			*/
; 1139 : 		if (((FalconSessionEntity*)session)->GetPlayerFlight())

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
	test	eax, eax
	je	SHORT $LN7@VuxSession

; 1140 : 		{
; 1141 : 			msg->dataBlock.campID		= ((FalconSessionEntity*)session)->GetPlayerFlight()->GetCampID();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
	mov	DWORD PTR tv215[ebp], eax
	mov	edx, DWORD PTR tv215[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv215[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _msg$8[ebp]
	mov	WORD PTR [ecx+84], ax

; 1142 : 		}
; 1143 : 		else

	jmp	SHORT $LN6@VuxSession
$LN7@VuxSession:

; 1144 : 		{
; 1145 : 			msg->dataBlock.campID		= 0;

	xor	edx, edx
	mov	eax, DWORD PTR _msg$8[ebp]
	mov	WORD PTR [eax+84], dx
$LN6@VuxSession:

; 1146 : 		}
; 1147 : 
; 1148 : 		if (playerEntity)

	cmp	DWORD PTR _playerEntity$5[ebp], 0
	je	SHORT $LN5@VuxSession

; 1149 : 		{
; 1150 : 			msg->dataBlock.playerID         = playerEntity->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _playerEntity$5[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _msg$8[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
$LN5@VuxSession:

; 1151 : 		}
; 1152 : 
; 1153 : 		_tcscpy(msg->dataBlock.callsign,((FalconSessionEntity*)session)->GetPlayerCallsign()); 

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ; FalconSessionEntity::GetPlayerCallsign
	push	eax
	mov	edx, DWORD PTR _msg$8[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_strcpy
	add	esp, 8

; 1154 : 
; 1155 : 		msg->dataBlock.side             = ((FalconSessionEntity*)session)->GetCountry();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetCountry@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetCountry
	mov	ecx, DWORD PTR _msg$8[ebp]
	mov	BYTE PTR [ecx+88], al

; 1156 : 		msg->dataBlock.pilotID          = ((FalconSessionEntity*)session)->GetPilotSlot();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPilotSlot@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetPilotSlot
	mov	edx, DWORD PTR _msg$8[ebp]
	mov	BYTE PTR [edx+87], al

; 1157 : 		msg->dataBlock.vehicleID		= ((FalconSessionEntity*)session)->GetAircraftNum();

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAircraftNum
	mov	ecx, DWORD PTR _msg$8[ebp]
	mov	BYTE PTR [ecx+86], al

; 1158 : 		msg->dataBlock.state            = PSM_STATE_LEFT_SIM;

	mov	edx, DWORD PTR _msg$8[ebp]
	mov	DWORD PTR [edx+89], 4

; 1159 : 
; 1160 : 		FalconSendMessage(msg, TRUE);

	push	1
	mov	eax, DWORD PTR _msg$8[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1161 : 		((FalconSessionEntity*)session)->SetFlyState(FLYSTATE_IN_UI);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetFlyState@FalconSessionEntity@@QAEXE@Z ; FalconSessionEntity::SetFlyState

; 1162 : 
; 1163 : 		// and now we need to do some hacking... the current code doesn't really support to change ownership
; 1164 : 		// of single aircraft
; 1165 : 
; 1166 : 
; 1167 : 		// Get the Aircraftclass entity
; 1168 : 		AircraftClass *playerAircraft = NULL;

	mov	DWORD PTR _playerAircraft$7[ebp], 0

; 1169 : 
; 1170 : 		if (playerFlight)

	cmp	DWORD PTR _playerFlight$[ebp], 0
	je	SHORT $LN4@VuxSession

; 1171 : 			playerAircraft = (AircraftClass *)playerFlight->GetComponentEntity(acnumber);

	mov	ecx, DWORD PTR _acnumber$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _playerFlight$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _playerAircraft$7[ebp], eax
$LN4@VuxSession:

; 1172 : 
; 1173 : 		// when we still have one, just make local to the host
; 1174 : 		if (playerAircraft)

	cmp	DWORD PTR _playerAircraft$7[ebp], 0
	je	SHORT $LN8@VuxSession

; 1175 : 		{
; 1176 : 			playerAircraft->MakeLocal();

	mov	edx, DWORD PTR _playerAircraft$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _playerAircraft$7[ebp]
	mov	edx, DWORD PTR [eax+332]
	call	edx
$LN8@VuxSession:

; 1177 : 		}
; 1178 : 	}
; 1179 : 
; 1180 : 	// 2002-04-14 MN remove the disconnected (CTD'ed, Internet connection lost) player from its slot so it can be occupied again
; 1181 : 	LeaveACSlot (((FalconSessionEntity*)session)->GetAssignedPlayerFlight(), ((FalconSessionEntity*)session)->GetAssignedAircraftNum());

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedAircraftNum@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetAssignedAircraftNum
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAssignedPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetAssignedPlayerFlight
	push	eax
	call	?LeaveACSlot@@YAXPAVFlightClass@@E@Z	; LeaveACSlot
	add	esp, 8

; 1182 : 
; 1183 : 	// Remove from the global group
; 1184 : 	VuxGroupRemoveSession(vuGlobalGroup,session);

	mov	ecx, DWORD PTR _session$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?vuGlobalGroup@@3PAVVuGlobalGroup@@A ; vuGlobalGroup
	push	edx
	call	?VuxGroupRemoveSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z ; VuxGroupRemoveSession
	add	esp, 8

; 1185 : 
; 1186 : 	if (session->GetCommsStatus() != VU_CONN_INACTIVE || session->GetReliableCommsStatus() != VU_CONN_INACTIVE)

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ; VuTargetEntity::GetCommsStatus
	test	eax, eax
	jne	SHORT $LN1@VuxSession
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReliableCommsStatus@VuTargetEntity@@QAE?AW4VuCommsConnectStatus@@XZ ; VuTargetEntity::GetReliableCommsStatus
	test	eax, eax
	je	SHORT $LN11@VuxSession
$LN1@VuxSession:

; 1187 : 	{
; 1188 : 		MonoPrint("Disconnecting to session: %s\n",((FalconSessionEntity*)session)->GetPlayerCallsign());

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ; FalconSessionEntity::GetPlayerCallsign
	push	eax
	push	OFFSET ??_C@_0BO@BJNACDAE@Disconnecting?5to?5session?3?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN11@VuxSession:

; 1189 : 	}
; 1190 : 
; 1191 : 	/* me123 commented this out
; 1192 : 	   it prevents us from removing the session from other lists then the global group.
; 1193 : 	   it should not matter since the session will be removed totaly right after this.	
; 1194 : 	// Disconnect UDP
; 1195 : 	ch = session->GetCommsHandle();
; 1196 : 	session->SetCommsHandle(NULL);
; 1197 : 	session->SetCommsStatus(VU_CONN_INACTIVE);
; 1198 : 	if (session && ch && ch != FalconGlobalUDPHandle) 
; 1199 : 	ComAPIClose(ch);
; 1200 : 	// Disconnect TCP
; 1201 : 	ch = session->GetReliableCommsHandle();
; 1202 : 	session->SetReliableCommsHandle(NULL);
; 1203 : 	session->SetReliableCommsStatus(VU_CONN_INACTIVE);
; 1204 : 	if (session && ch && ch != FalconGlobalTCPHandle)
; 1205 : 	ComAPIClose(ch);
; 1206 : 	*/
; 1207 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?VuxSessionDisconnect@@YAXPAVVuSessionEntity@@@Z ENDP	; VuxSessionDisconnect
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
$T2 = -116						; size = 8
$T3 = -108						; size = 8
$T4 = -100						; size = 8
$T5 = -92						; size = 8
_wait_for_connection$ = -84				; size = 4
_add$6 = -80						; size = 8
$T7 = -72						; size = 4
$T8 = -68						; size = 4
_rudpHandle$9 = -64					; size = 4
tv237 = -60						; size = 4
_req$10 = -56						; size = 4
$T11 = -52						; size = 4
tv252 = -48						; size = 4
$T12 = -44						; size = 4
_req$13 = -40						; size = 4
_buffer$14 = -36					; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_session$ = 8						; size = 4
?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z PROC	; VuxSessionConnect

; 1042 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1043 : 	//	char buffer[100];
; 1044 : 	int wait_for_connection = 0;

	mov	DWORD PTR _wait_for_connection$[ebp], 0

; 1045 : 
; 1046 : 	// We only want to connect here during our initial insertion
; 1047 : 	if (session->GameAction() != VU_NO_GAME_ACTION){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GameAction@VuSessionEntity@@QAE?AW4VU_GAME_ACTION@@XZ ; VuSessionEntity::GameAction
	test	eax, eax
	je	SHORT $LN5@VuxSession

; 1048 : 		return 0;

	xor	eax, eax
	jmp	$LN6@VuxSession
$LN5@VuxSession:

; 1049 : 	}
; 1050 : 
; 1051 : 	if (session == vuLocalSessionEntity)

	push	OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	mov	eax, DWORD PTR _session$[ebp]
	push	eax
	call	??$?8VVuSessionEntity@@@@YA_NPBXABV?$VuBin@VVuSessionEntity@@@@@Z ; operator==<VuSessionEntity>
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@VuxSession

; 1052 : 	{
; 1053 : 		// This is us.. We don't need to connect
; 1054 : 		session->SetCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetCommsHandle

; 1055 : 		session->SetCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetCommsStatus

; 1056 : 		session->SetReliableCommsHandle(NULL);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 1057 : 		session->SetReliableCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus

; 1058 : 		return 0;

	xor	eax, eax
	jmp	$LN6@VuxSession
$LN4@VuxSession:

; 1059 : 	}
; 1060 : 	// add dangling session now if it doesnt exist
; 1061 : 	AddDanglingSession(session->Id(), session->GetAddress());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ; AddDanglingSession
	add	esp, 16					; 00000010H

; 1062 : 	RemoveDanglingSession(session);

	mov	eax, DWORD PTR _session$[ebp]
	push	eax
	call	?RemoveDanglingSession@@YAHPAVVuSessionEntity@@@Z ; RemoveDanglingSession
	add	esp, 4

; 1063 : 	// now create the reliable handle if we dont have one
; 1064 : 	if (session->GetReliableCommsHandle() == NULL){

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetReliableCommsHandle@VuTargetEntity@@QAEPAUcomapihandle@@XZ ; VuTargetEntity::GetReliableCommsHandle
	test	eax, eax
	jne	$LN3@VuxSession

; 1065 : 		char buffer[20];
; 1066 : 		sprintf (buffer, "%s RUDP", ((FalconSessionEntity*)session)->GetPlayerCallsign());

	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetPlayerCallsign@FalconSessionEntity@@QAEPADXZ ; FalconSessionEntity::GetPlayerCallsign
	push	eax
	push	OFFSET ??_C@_07ICEPJIFH@?$CFs?5RUDP?$AA@
	lea	ecx, DWORD PTR _buffer$14[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1067 : 		//sfr: vu change converts
; 1068 : 		VU_ADDRESS add = session->GetAddress();

	lea	edx, DWORD PTR _add$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress

; 1069 : 		ComAPIHandle rudpHandle = ComRUDPOpen(
; 1070 : 				buffer, 
; 1071 : 				F4CommsMaxTCPMessageSize, 
; 1072 : 				vuxWorldName,
; 1073 : 				vuLocalSessionEntity->GetAddress().reliableRecvPort,
; 1074 : 				add.reliableRecvPort, 
; 1075 : 				add.ip,
; 1076 : 				session->Id().creator_.value_,
; 1077 : 				F4CommsIdealPacketSize
; 1078 : 		);

	mov	eax, DWORD PTR ?F4CommsIdealPacketSize@@3HA ; F4CommsIdealPacketSize
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR _add$6[ebp+4]
	push	eax
	movzx	ecx, WORD PTR _add$6[ebp+2]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?GetAddress@VuSessionEntity@@QAE?AVVU_ADDRESS@@XZ ; VuSessionEntity::GetAddress
	mov	ax, WORD PTR [eax+2]
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR ?vuxWorldName@@3PADA	; vuxWorldName
	push	edx
	mov	eax, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	eax
	lea	ecx, DWORD PTR _buffer$14[ebp]
	push	ecx
	call	_ComRUDPOpen
	add	esp, 32					; 00000020H
	mov	DWORD PTR _rudpHandle$9[ebp], eax

; 1079 : 		session->SetReliableCommsHandle(rudpHandle, F4CommsMaxTCPMessageSize, F4CommsIdealTCPPacketSize);

	mov	edx, DWORD PTR ?F4CommsIdealTCPPacketSize@@3HA ; F4CommsIdealTCPPacketSize
	push	edx
	mov	eax, DWORD PTR ?F4CommsMaxTCPMessageSize@@3HA ; F4CommsMaxTCPMessageSize
	push	eax
	mov	ecx, DWORD PTR _rudpHandle$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetReliableCommsHandle@VuTargetEntity@@QAEXPAUcomapihandle@@HH@Z ; VuTargetEntity::SetReliableCommsHandle

; 1080 : 		if (rudpHandle){

	cmp	DWORD PTR _rudpHandle$9[ebp], 0
	je	SHORT $LN2@VuxSession

; 1081 : 			session->SetReliableCommsStatus(VU_CONN_ACTIVE);

	push	2
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus

; 1082 : 		}
; 1083 : 		else{

	jmp	SHORT $LN3@VuxSession
$LN2@VuxSession:

; 1084 : 			session->SetReliableCommsStatus(VU_CONN_INACTIVE);

	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	call	?SetReliableCommsStatus@VuTargetEntity@@QAEXW4VuCommsConnectStatus@@@Z ; VuTargetEntity::SetReliableCommsStatus
$LN3@VuxSession:

; 1085 : 		}
; 1086 : 	}
; 1087 : 	// Add to the global group
; 1088 : 	VuxGroupAddSession(vuGlobalGroup, session);

	mov	edx, DWORD PTR _session$[ebp]
	push	edx
	mov	eax, DWORD PTR ?vuGlobalGroup@@3PAVVuGlobalGroup@@A ; vuGlobalGroup
	push	eax
	call	?VuxGroupAddSession@@YAHPAVVuGroupEntity@@PAVVuSessionEntity@@@Z ; VuxGroupAddSession
	add	esp, 8

; 1089 : 
; 1090 : 	//sfr: this can be a duplicated message (see function VuxGroupAddSession)
; 1091 : 	{
; 1092 : 		//send ourselves to session we are opening connection
; 1093 : 		VuMessage *req = new VuFullUpdateEvent(vuLocalSessionEntity.get(), session);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN8@VuxSession
	push	0
	mov	ecx, DWORD PTR _session$[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0VuFullUpdateEvent@@QAE@PAVVuEntity@@PAVVuTargetEntity@@E@Z ; VuFullUpdateEvent::VuFullUpdateEvent
	mov	DWORD PTR tv237[ebp], eax
	jmp	SHORT $LN9@VuxSession
$LN8@VuxSession:
	mov	DWORD PTR tv237[ebp], 0
$LN9@VuxSession:
	mov	edx, DWORD PTR tv237[ebp]
	mov	DWORD PTR $T8[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR _req$13[ebp], eax

; 1094 : 		req->RequestOutOfBandTransmit();

	mov	ecx, DWORD PTR _req$13[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 1095 : 		//req->Send();
; 1096 : 		VuMessageQueue::PostVuMessage(req);

	mov	ecx, DWORD PTR _req$13[ebp]
	push	ecx
	call	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z ; VuMessageQueue::PostVuMessage
	add	esp, 4

; 1097 : 	}
; 1098 : 	{
; 1099 : 		// and request all global ents
; 1100 : 		VuMessage *req = new VuGetRequest(VU_GET_GLOBAL_ENTS,session);

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN10@VuxSession
	mov	edx, DWORD PTR _session$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0VuGetRequest@@QAE@W4VU_SPECIAL_GET_TYPE@@PAVVuSessionEntity@@@Z ; VuGetRequest::VuGetRequest
	mov	DWORD PTR tv252[ebp], eax
	jmp	SHORT $LN11@VuxSession
$LN10@VuxSession:
	mov	DWORD PTR tv252[ebp], 0
$LN11@VuxSession:
	mov	eax, DWORD PTR tv252[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _req$10[ebp], ecx

; 1101 : 		//req->RequestReliableTransmit();
; 1102 : 		req->RequestOutOfBandTransmit();

	mov	ecx, DWORD PTR _req$10[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 1103 : 		//req->Send();
; 1104 : 		VuMessageQueue::PostVuMessage(req);

	mov	edx, DWORD PTR _req$10[ebp]
	push	edx
	call	?PostVuMessage@VuMessageQueue@@SAHPAVVuMessage@@@Z ; VuMessageQueue::PostVuMessage
	add	esp, 4

; 1105 : 	}
; 1106 : 
; 1107 : 
; 1108 : 	return 0;

	xor	eax, eax
$LN6@VuxSession:

; 1109 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z$0:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z$1:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?VuxSessionConnect@@YAHPAVVuSessionEntity@@@Z ENDP	; VuxSessionConnect
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\f4comms.cpp
_TEXT	SEGMENT
_owner$ = 8						; size = 8
_address$ = 16						; size = 8
?VuxAddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z PROC ; VuxAddDanglingSession

; 744  : bool VuxAddDanglingSession (VU_ID owner, VU_ADDRESS address){

	push	ebp
	mov	ebp, esp

; 745  : 	return AddDanglingSession(owner, address);

	mov	eax, DWORD PTR _address$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	mov	edx, DWORD PTR _owner$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _owner$[ebp]
	push	eax
	call	?AddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ; AddDanglingSession
	add	esp, 16					; 00000010H

; 746  : }

	pop	ebp
	ret	0
?VuxAddDanglingSession@@YA_NVVU_ID@@VVU_ADDRESS@@@Z ENDP ; VuxAddDanglingSession
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newState$ = 8						; size = 4
?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z PROC		; VuEntity::SetVuState, COMDAT
; _this$ = ecx

; 229  : 	void SetVuState(VU_MEM newState){ vuState_ = newState; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newState$[ebp]
	mov	DWORD PTR [eax+92], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVuState@VuEntity@@IAEXW4VU_MEM@@@Z ENDP		; VuEntity::SetVuState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ADDRESS@@QBE_NABV0@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_ADDRESS@@QBE_NABV0@@Z PROC			; VU_ADDRESS::operator==, COMDAT
; _this$ = ecx

; 206  : 	bool operator==(const VU_ADDRESS & rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		return (
; 208  : 			(this->ip == rhs.ip) && 
; 209  : 			(this->recvPort == rhs.recvPort) &&
; 210  : 			(this->reliableRecvPort == rhs.reliableRecvPort)
; 211  : 		);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _rhs$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	edx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]

; 212  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ADDRESS@@QBE_NABV0@@Z ENDP			; VU_ADDRESS::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ADDRESS@@QAE@KGG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ip$ = 8						; size = 4
_recvPort$ = 12						; size = 2
_reliableRecvPort$ = 16					; size = 2
??0VU_ADDRESS@@QAE@KGG@Z PROC				; VU_ADDRESS::VU_ADDRESS, COMDAT
; _this$ = ecx

; 189  : 	VU_ADDRESS(

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 		unsigned long ip = 0,                                //< entity IP
; 191  : 		unsigned short recvPort = 0,//CAPI_UDP_PORT,         //< port where he receives
; 192  : 		unsigned short reliableRecvPort = 0 //CAPI_TCP_PORT  //< port where he receives reliable data
; 193  : 	){
; 194  : 		this->ip = ip;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ip$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 195  : 		this->recvPort = recvPort;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _recvPort$[ebp]
	mov	WORD PTR [edx], ax

; 196  : 		this->reliableRecvPort = reliableRecvPort;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR _reliableRecvPort$[ebp]
	mov	WORD PTR [ecx+2], dx

; 197  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0VU_ADDRESS@@QAE@KGG@Z ENDP				; VU_ADDRESS::VU_ADDRESS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@VVU_SESSION_ID@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sessionpart$ = 8					; size = 4
_idpart$ = 12						; size = 4
??0VU_ID@@QAE@VVU_SESSION_ID@@K@Z PROC			; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 101  : 	VU_ID(VU_SESSION_ID sessionpart, VU_ID_NUMBER idpart) : num_(idpart), creator_(sessionpart){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _idpart$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _sessionpart$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0VU_ID@@QAE@VVU_SESSION_ID@@K@Z ENDP			; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
