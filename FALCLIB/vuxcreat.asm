; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\vuxcreat.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z	; VuxCreateMessage
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0FalconCampEventMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconCampEventMessage::FalconCampEventMessage
EXTRN	??0FalconCampMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconCampMessage::FalconCampMessage
EXTRN	??0FalconDeathMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconDeathMessage::FalconDeathMessage
EXTRN	??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z:PROC	; FalconCampWeaponsFire::FalconCampWeaponsFire
EXTRN	??0FalconUnitMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconUnitMessage::FalconUnitMessage
EXTRN	??0FalconUnitAssignmentMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconUnitAssignmentMessage::FalconUnitAssignmentMessage
EXTRN	??0FalconTeamMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconTeamMessage::FalconTeamMessage
EXTRN	??0FalconDamageMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconDamageMessage::FalconDamageMessage
EXTRN	??0FalconWeaponsFire@@QAE@EVVU_ID@@0@Z:PROC	; FalconWeaponsFire::FalconWeaponsFire
EXTRN	??0FalconSimCampMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconSimCampMessage::FalconSimCampMessage
EXTRN	??0FalconObjectiveMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconObjectiveMessage::FalconObjectiveMessage
EXTRN	??0FalconSendCampaign@@QAE@EVVU_ID@@0@Z:PROC	; FalconSendCampaign::FalconSendCampaign
EXTRN	??0FalconTimingMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconTimingMessage::FalconTimingMessage
EXTRN	??0FalconCampTaskingMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconCampTaskingMessage::FalconCampTaskingMessage
EXTRN	??0FalconAirTaskingMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconAirTaskingMessage::FalconAirTaskingMessage
EXTRN	??0FalconGndTaskingMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconGndTaskingMessage::FalconGndTaskingMessage
EXTRN	??0FalconNavalTaskingMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconNavalTaskingMessage::FalconNavalTaskingMessage
EXTRN	??0FalconWingmanMsg@@QAE@EVVU_ID@@0@Z:PROC	; FalconWingmanMsg::FalconWingmanMsg
EXTRN	??0AirAIModeMsg@@QAE@EVVU_ID@@0@Z:PROC		; AirAIModeMsg::AirAIModeMsg
EXTRN	??0FalconMissionRequestMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconMissionRequestMessage::FalconMissionRequestMessage
EXTRN	??0FalconDivertMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconDivertMessage::FalconDivertMessage
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0FalconWeatherMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconWeatherMessage::FalconWeatherMessage
EXTRN	??0FalconMissileEndMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconMissileEndMessage::FalconMissileEndMessage
EXTRN	??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconAWACSMessage::FalconAWACSMessage
EXTRN	??0FalconFACMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconFACMessage::FalconFACMessage
EXTRN	??0FalconATCMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconATCMessage::FalconATCMessage
EXTRN	??0FalconLandingMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconLandingMessage::FalconLandingMessage
EXTRN	??0FalconControlSurfaceMsg@@QAE@EVVU_ID@@0@Z:PROC ; FalconControlSurfaceMsg::FalconControlSurfaceMsg
EXTRN	??0FalconSimDataToggle@@QAE@EVVU_ID@@0@Z:PROC	; FalconSimDataToggle::FalconSimDataToggle
EXTRN	??0UI_RequestDogfightInfo@@QAE@EVVU_ID@@0@Z:PROC ; UI_RequestDogfightInfo::UI_RequestDogfightInfo
EXTRN	??0UI_SendDogfightInfo@@QAE@EVVU_ID@@0@Z:PROC	; UI_SendDogfightInfo::UI_SendDogfightInfo
EXTRN	??0UI_RequestAircraftSlot@@QAE@EVVU_ID@@0@Z:PROC ; UI_RequestAircraftSlot::UI_RequestAircraftSlot
EXTRN	??0UI_SendAircraftSlot@@QAE@EVVU_ID@@0@Z:PROC	; UI_SendAircraftSlot::UI_SendAircraftSlot
EXTRN	??0GraphicsTextDisplay@@QAE@EVVU_ID@@0@Z:PROC	; GraphicsTextDisplay::GraphicsTextDisplay
EXTRN	??0FalconAddSFXMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconAddSFXMessage::FalconAddSFXMessage
EXTRN	??0FalconSendPersistantList@@QAE@EVVU_ID@@0@Z:PROC ; FalconSendPersistantList::FalconSendPersistantList
EXTRN	??0FalconSendObjData@@QAE@EVVU_ID@@0@Z:PROC	; FalconSendObjData::FalconSendObjData
EXTRN	??0FalconSendUnitData@@QAE@EVVU_ID@@0@Z:PROC	; FalconSendUnitData::FalconSendUnitData
EXTRN	??0FalconRequestCampaignData@@QAE@EVVU_ID@@0@Z:PROC ; FalconRequestCampaignData::FalconRequestCampaignData
EXTRN	??0UI_SendChatMessage@@QAE@EVVU_ID@@0@Z:PROC	; UI_SendChatMessage::UI_SendChatMessage
EXTRN	??0FalconTankerMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconTankerMessage::FalconTankerMessage
EXTRN	??0FalconEjectMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconEjectMessage::FalconEjectMessage
EXTRN	??0FalconTrackMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconTrackMessage::FalconTrackMessage
EXTRN	??0FalconCampDataMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconCampDataMessage::FalconCampDataMessage
EXTRN	??0FalconVoiceDataMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconVoiceDataMessage::FalconVoiceDataMessage
EXTRN	??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	??0FalconPlayerStatusMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconPlayerStatusMessage::FalconPlayerStatusMessage
EXTRN	??0FalconLaserDesignateMsg@@QAE@EVVU_ID@@0@Z:PROC ; FalconLaserDesignateMsg::FalconLaserDesignateMsg
EXTRN	??0FalconATCCmdMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconATCCmdMessage::FalconATCCmdMessage
EXTRN	??0FalconDLinkMessage@@QAE@EVVU_ID@@0@Z:PROC	; FalconDLinkMessage::FalconDLinkMessage
EXTRN	??0FalconRequestObject@@QAE@EVVU_ID@@0@Z:PROC	; FalconRequestObject::FalconRequestObject
EXTRN	??0FalconRegenerationMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconRegenerationMessage::FalconRegenerationMessage
EXTRN	??0UI_RequestLogbook@@QAE@EVVU_ID@@0@Z:PROC	; UI_RequestLogbook::UI_RequestLogbook
EXTRN	??0UI_SendLogbook@@QAE@EVVU_ID@@0@Z:PROC	; UI_SendLogbook::UI_SendLogbook
EXTRN	??0UI_SendImage@@QAE@EVVU_ID@@0@Z:PROC		; UI_SendImage::UI_SendImage
EXTRN	??0FalconFlightPlanMessage@@QAE@EVVU_ID@@0@Z:PROC ; FalconFlightPlanMessage::FalconFlightPlanMessage
EXTRN	??0SimDirtyData@@QAE@EVVU_ID@@0@Z:PROC		; SimDirtyData::SimDirtyData
EXTRN	??0CampDirtyData@@QAE@EVVU_ID@@0@Z:PROC		; CampDirtyData::CampDirtyData
EXTRN	??0CampEventDataMessage@@QAE@EVVU_ID@@0@Z:PROC	; CampEventDataMessage::CampEventDataMessage
EXTRN	??0FalconSendVC@@QAE@EVVU_ID@@0@Z:PROC		; FalconSendVC::FalconSendVC
EXTRN	??0UISendMsg@@QAE@EVVU_ID@@0@Z:PROC		; UISendMsg::UISendMsg
EXTRN	??0SendEvalMessage@@QAE@EVVU_ID@@0@Z:PROC	; SendEvalMessage::SendEvalMessage
EXTRN	??0RequestSimMoverPosition@@QAE@VVU_ID@@0@Z:PROC ; RequestSimMoverPosition::RequestSimMoverPosition
EXTRN	??0SendSimMoverPosition@@QAE@VVU_ID@@0@Z:PROC	; SendSimMoverPosition::SendSimMoverPosition
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z DD 019930522H
	DD	040H
	DD	FLAT:__unwindtable$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$17
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$25
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$27
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$28
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$29
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$30
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$31
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$32
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$33
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$34
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$35
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$36
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$37
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$38
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$39
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$40
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$41
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$42
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$43
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$44
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$45
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$46
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$47
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$48
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$49
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$50
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$51
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$52
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$53
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$54
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$55
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$56
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$57
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$58
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$59
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$60
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$61
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$62
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$63
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\vuxcreat.cpp
_TEXT	SEGMENT
$T2 = -788						; size = 4
$T3 = -784						; size = 4
$T4 = -780						; size = 4
$T5 = -776						; size = 4
$T6 = -772						; size = 4
$T7 = -768						; size = 4
$T8 = -764						; size = 4
$T9 = -760						; size = 4
$T10 = -756						; size = 4
$T11 = -752						; size = 4
$T12 = -748						; size = 4
$T13 = -744						; size = 4
$T14 = -740						; size = 4
$T15 = -736						; size = 4
$T16 = -732						; size = 4
$T17 = -728						; size = 4
$T18 = -724						; size = 4
$T19 = -720						; size = 4
$T20 = -716						; size = 4
$T21 = -712						; size = 4
$T22 = -708						; size = 4
$T23 = -704						; size = 4
$T24 = -700						; size = 4
$T25 = -696						; size = 4
$T26 = -692						; size = 4
$T27 = -688						; size = 4
$T28 = -684						; size = 4
$T29 = -680						; size = 4
$T30 = -676						; size = 4
$T31 = -672						; size = 4
$T32 = -668						; size = 4
$T33 = -664						; size = 4
$T34 = -660						; size = 4
$T35 = -656						; size = 4
$T36 = -652						; size = 4
$T37 = -648						; size = 4
$T38 = -644						; size = 4
$T39 = -640						; size = 4
$T40 = -636						; size = 4
$T41 = -632						; size = 4
$T42 = -628						; size = 4
$T43 = -624						; size = 4
$T44 = -620						; size = 4
$T45 = -616						; size = 4
$T46 = -612						; size = 4
$T47 = -608						; size = 4
$T48 = -604						; size = 4
$T49 = -600						; size = 4
$T50 = -596						; size = 4
$T51 = -592						; size = 4
$T52 = -588						; size = 4
$T53 = -584						; size = 4
$T54 = -580						; size = 4
$T55 = -576						; size = 4
$T56 = -572						; size = 4
$T57 = -568						; size = 4
$T58 = -564						; size = 4
$T59 = -560						; size = 4
$T60 = -556						; size = 4
$T61 = -552						; size = 4
$T62 = -548						; size = 4
$T63 = -544						; size = 4
$T64 = -540						; size = 4
$T65 = -536						; size = 4
$T66 = -532						; size = 4
$T67 = -528						; size = 4
$T68 = -524						; size = 4
$T69 = -520						; size = 4
$T70 = -516						; size = 4
$T71 = -512						; size = 4
$T72 = -508						; size = 4
$T73 = -504						; size = 4
$T74 = -500						; size = 4
$T75 = -496						; size = 4
$T76 = -492						; size = 4
$T77 = -488						; size = 4
$T78 = -484						; size = 4
$T79 = -480						; size = 4
$T80 = -476						; size = 4
$T81 = -472						; size = 4
$T82 = -468						; size = 4
$T83 = -464						; size = 4
$T84 = -460						; size = 4
$T85 = -456						; size = 4
$T86 = -452						; size = 4
$T87 = -448						; size = 4
$T88 = -444						; size = 4
$T89 = -440						; size = 4
$T90 = -436						; size = 4
$T91 = -432						; size = 4
$T92 = -428						; size = 4
$T93 = -424						; size = 4
$T94 = -420						; size = 4
$T95 = -416						; size = 4
$T96 = -412						; size = 4
tv865 = -408						; size = 4
$T97 = -404						; size = 4
tv851 = -400						; size = 4
$T98 = -396						; size = 4
tv837 = -392						; size = 4
$T99 = -388						; size = 4
tv791 = -384						; size = 4
$T100 = -380						; size = 4
tv777 = -376						; size = 4
$T101 = -372						; size = 4
tv763 = -368						; size = 4
$T102 = -364						; size = 4
tv749 = -360						; size = 4
$T103 = -356						; size = 4
tv735 = -352						; size = 4
$T104 = -348						; size = 4
tv721 = -344						; size = 4
$T105 = -340						; size = 4
tv707 = -336						; size = 4
$T106 = -332						; size = 4
tv693 = -328						; size = 4
$T107 = -324						; size = 4
tv679 = -320						; size = 4
$T108 = -316						; size = 4
tv665 = -312						; size = 4
$T109 = -308						; size = 4
tv651 = -304						; size = 4
$T110 = -300						; size = 4
tv637 = -296						; size = 4
$T111 = -292						; size = 4
tv623 = -288						; size = 4
$T112 = -284						; size = 4
tv609 = -280						; size = 4
tv1119 = -276						; size = 4
tv595 = -272						; size = 4
$T113 = -268						; size = 4
tv581 = -264						; size = 4
tv1106 = -260						; size = 4
tv535 = -256						; size = 4
$T114 = -252						; size = 4
tv521 = -248						; size = 4
tv1093 = -244						; size = 4
tv507 = -240						; size = 4
$T115 = -236						; size = 4
tv493 = -232						; size = 4
tv1047 = -228						; size = 4
tv479 = -224						; size = 4
$T116 = -220						; size = 4
tv465 = -216						; size = 4
tv1033 = -212						; size = 4
tv451 = -208						; size = 4
$T117 = -204						; size = 4
tv437 = -200						; size = 4
tv1019 = -196						; size = 4
tv423 = -192						; size = 4
$T118 = -188						; size = 4
tv409 = -184						; size = 4
tv1005 = -180						; size = 4
tv395 = -176						; size = 4
$T119 = -172						; size = 4
tv381 = -168						; size = 4
tv991 = -164						; size = 4
tv367 = -160						; size = 4
$T120 = -156						; size = 4
tv353 = -152						; size = 4
tv977 = -148						; size = 4
tv339 = -144						; size = 4
$T121 = -140						; size = 4
tv325 = -136						; size = 4
tv963 = -132						; size = 4
tv279 = -128						; size = 4
$T122 = -124						; size = 4
tv265 = -120						; size = 4
tv949 = -116						; size = 4
tv251 = -112						; size = 4
$T123 = -108						; size = 4
tv237 = -104						; size = 4
tv935 = -100						; size = 4
tv223 = -96						; size = 4
$T124 = -92						; size = 4
tv209 = -88						; size = 4
tv921 = -84						; size = 4
tv195 = -80						; size = 4
$T125 = -76						; size = 4
tv181 = -72						; size = 4
tv907 = -68						; size = 4
tv167 = -64						; size = 4
$T126 = -60						; size = 4
tv153 = -56						; size = 4
tv893 = -52						; size = 4
tv139 = -48						; size = 4
$T127 = -44						; size = 4
tv93 = -40						; size = 4
tv879 = -36						; size = 4
tv79 = -32						; size = 4
$T128 = -28						; size = 4
$T129 = -24						; size = 4
tv65 = -20						; size = 4
_retval$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 1
_senderid$ = 12						; size = 8
_target$ = 20						; size = 8
?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z PROC	; VuxCreateMessage

; 85   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 776				; 00000308H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 86   : 	VuMessage* retval = NULL;

	mov	DWORD PTR _retval$[ebp], 0

; 87   : 
; 88   : #ifdef F4_DEBUG_COMMS
; 89   : 	MonoPrint("Received Message type: %d - ", type);
; 90   : #endif
; 91   : 
; 92   : 	switch (type)

	movzx	eax, BYTE PTR _type$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 23					; 00000017H
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 66			; 00000042H
	ja	$LN65@VuxCreateM
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN262@VuxCreateM[edx*4]
$LN64@VuxCreateM:

; 93   : 	{
; 94   : 			case DamageMsg:
; 95   : #ifdef F4_DEBUG_COMMS
; 96   : 					MonoPrint ("DamageMsg\n");
; 97   : #endif
; 98   : 					retval = new FalconDamageMessage(type, senderid, target);

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67[ebp], 0
	je	SHORT $LN69@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T67[ebp]
	call	??0FalconDamageMessage@@QAE@EVVU_ID@@0@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN70@VuxCreateM
$LN69@VuxCreateM:
	mov	DWORD PTR tv79[ebp], 0
$LN70@VuxCreateM:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T65[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T65[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 99   : 					break;

	jmp	$LN65@VuxCreateM
$LN63@VuxCreateM:

; 100  : 			case WeaponFireMsg:
; 101  : #ifdef F4_DEBUG_COMMS
; 102  : 					MonoPrint ("WeaponFireMsg\n");
; 103  : #endif
; 104  : 					retval = new FalconWeaponsFire(type, senderid, target);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T112[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T112[ebp], 0
	je	SHORT $LN71@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T112[ebp]
	call	??0FalconWeaponsFire@@QAE@EVVU_ID@@0@Z	; FalconWeaponsFire::FalconWeaponsFire
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN72@VuxCreateM
$LN71@VuxCreateM:
	mov	DWORD PTR tv93[ebp], 0
$LN72@VuxCreateM:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T63[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T63[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 105  : 					break;

	jmp	$LN65@VuxCreateM
$LN62@VuxCreateM:

; 106  : 			case CampWeaponFireMsg:
; 107  : #ifdef F4_DEBUG_COMMS
; 108  : 					MonoPrint ("CampWeaponFireMsg\n");
; 109  : #endif
; 110  : 					retval = new FalconCampWeaponsFire(type, senderid, target);

	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T111[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T111[ebp], 0
	je	SHORT $LN73@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T111[ebp]
	call	??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z ; FalconCampWeaponsFire::FalconCampWeaponsFire
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN74@VuxCreateM
$LN73@VuxCreateM:
	mov	DWORD PTR tv139[ebp], 0
$LN74@VuxCreateM:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T17[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T17[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 111  : 					break;

	jmp	$LN65@VuxCreateM
$LN61@VuxCreateM:

; 112  : 			case CampMsg:
; 113  : #ifdef F4_DEBUG_COMMS
; 114  : 					MonoPrint ("CampMsg\n");
; 115  : #endif
; 116  : 					retval = new FalconCampMessage(type, senderid, target);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T110[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T110[ebp], 0
	je	SHORT $LN75@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T110[ebp]
	call	??0FalconCampMessage@@QAE@EVVU_ID@@0@Z	; FalconCampMessage::FalconCampMessage
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN76@VuxCreateM
$LN75@VuxCreateM:
	mov	DWORD PTR tv153[ebp], 0
$LN76@VuxCreateM:
	mov	edx, DWORD PTR tv153[ebp]
	mov	DWORD PTR $T61[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T61[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 117  : 					break;

	jmp	$LN65@VuxCreateM
$LN60@VuxCreateM:

; 118  : 			case SimCampMsg:
; 119  : #ifdef F4_DEBUG_COMMS
; 120  : 					MonoPrint ("SimCampMsg\n");
; 121  : #endif
; 122  : 					retval = new FalconSimCampMessage(type, senderid, target);

	push	66					; 00000042H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T109[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T109[ebp], 0
	je	SHORT $LN77@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T109[ebp]
	call	??0FalconSimCampMessage@@QAE@EVVU_ID@@0@Z ; FalconSimCampMessage::FalconSimCampMessage
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN78@VuxCreateM
$LN77@VuxCreateM:
	mov	DWORD PTR tv167[ebp], 0
$LN78@VuxCreateM:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR $T31[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T31[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 123  : 					break;

	jmp	$LN65@VuxCreateM
$LN59@VuxCreateM:

; 124  : 			case UnitMsg:
; 125  : #ifdef F4_DEBUG_COMMS
; 126  : 					MonoPrint ("UnitMsg\n");
; 127  : #endif
; 128  : 					retval = new FalconUnitMessage(type, senderid, target);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T108[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T108[ebp], 0
	je	SHORT $LN79@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T108[ebp]
	call	??0FalconUnitMessage@@QAE@EVVU_ID@@0@Z	; FalconUnitMessage::FalconUnitMessage
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN80@VuxCreateM
$LN79@VuxCreateM:
	mov	DWORD PTR tv181[ebp], 0
$LN80@VuxCreateM:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR $T59[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T59[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 129  : 					break;

	jmp	$LN65@VuxCreateM
$LN58@VuxCreateM:

; 130  : 			case ObjectiveMsg:
; 131  : #ifdef F4_DEBUG_COMMS
; 132  : 					MonoPrint ("ObjectiveMsg\n");
; 133  : #endif
; 134  : 					retval = new FalconObjectiveMessage(type, senderid, target);

	push	74					; 0000004aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T107[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T107[ebp], 0
	je	SHORT $LN81@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T107[ebp]
	call	??0FalconObjectiveMessage@@QAE@EVVU_ID@@0@Z ; FalconObjectiveMessage::FalconObjectiveMessage
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN82@VuxCreateM
$LN81@VuxCreateM:
	mov	DWORD PTR tv195[ebp], 0
$LN82@VuxCreateM:
	mov	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 135  : 					break;

	jmp	$LN65@VuxCreateM
$LN57@VuxCreateM:

; 136  : 			case UnitAssignmentMsg:
; 137  : #ifdef F4_DEBUG_COMMS
; 138  : 					MonoPrint ("UnitAssignmentMsg\n");
; 139  : #endif
; 140  : 					retval = new FalconUnitAssignmentMessage(type, senderid, target);

	push	74					; 0000004aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T106[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T106[ebp], 0
	je	SHORT $LN83@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T106[ebp]
	call	??0FalconUnitAssignmentMessage@@QAE@EVVU_ID@@0@Z ; FalconUnitAssignmentMessage::FalconUnitAssignmentMessage
	mov	DWORD PTR tv209[ebp], eax
	jmp	SHORT $LN84@VuxCreateM
$LN83@VuxCreateM:
	mov	DWORD PTR tv209[ebp], 0
$LN84@VuxCreateM:
	mov	eax, DWORD PTR tv209[ebp]
	mov	DWORD PTR $T57[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T57[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 141  : 					break;

	jmp	$LN65@VuxCreateM
$LN56@VuxCreateM:

; 142  : 			case SendCampaignMsg:
; 143  : #ifdef F4_DEBUG_COMMS
; 144  : 					MonoPrint ("SendCampaignMsg\n");
; 145  : #endif
; 146  : 					retval = new FalconSendCampaign(type, senderid, target);

	push	66					; 00000042H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T105[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T105[ebp], 0
	je	SHORT $LN85@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T105[ebp]
	call	??0FalconSendCampaign@@QAE@EVVU_ID@@0@Z	; FalconSendCampaign::FalconSendCampaign
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN86@VuxCreateM
$LN85@VuxCreateM:
	mov	DWORD PTR tv223[ebp], 0
$LN86@VuxCreateM:
	mov	ecx, DWORD PTR tv223[ebp]
	mov	DWORD PTR $T29[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T29[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 147  : 					break;

	jmp	$LN65@VuxCreateM
$LN55@VuxCreateM:

; 148  : 			case TimingMsg:
; 149  : #ifdef F4_DEBUG_COMMS
; 150  : 					MonoPrint ("TimingMsg\n");
; 151  : #endif
; 152  : 					retval = new FalconTimingMessage(type, senderid, target);

	push	53					; 00000035H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T104[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T104[ebp], 0
	je	SHORT $LN87@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T104[ebp]
	call	??0FalconTimingMessage@@QAE@EVVU_ID@@0@Z ; FalconTimingMessage::FalconTimingMessage
	mov	DWORD PTR tv237[ebp], eax
	jmp	SHORT $LN88@VuxCreateM
$LN87@VuxCreateM:
	mov	DWORD PTR tv237[ebp], 0
$LN88@VuxCreateM:
	mov	edx, DWORD PTR tv237[ebp]
	mov	DWORD PTR $T55[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T55[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 153  : 					break;

	jmp	$LN65@VuxCreateM
$LN54@VuxCreateM:

; 154  : 			case CampTaskingMsg:
; 155  : #ifdef F4_DEBUG_COMMS
; 156  : 					MonoPrint ("CampTaskingMsg\n");
; 157  : #endif
; 158  : 					retval = new FalconCampTaskingMessage(type, senderid, target);

	push	77					; 0000004dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T103[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T103[ebp], 0
	je	SHORT $LN89@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T103[ebp]
	call	??0FalconCampTaskingMessage@@QAE@EVVU_ID@@0@Z ; FalconCampTaskingMessage::FalconCampTaskingMessage
	mov	DWORD PTR tv251[ebp], eax
	jmp	SHORT $LN90@VuxCreateM
$LN89@VuxCreateM:
	mov	DWORD PTR tv251[ebp], 0
$LN90@VuxCreateM:
	mov	eax, DWORD PTR tv251[ebp]
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T15[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 159  : 					break;

	jmp	$LN65@VuxCreateM
$LN53@VuxCreateM:

; 160  : 			case AirTaskingMsg:
; 161  : #ifdef F4_DEBUG_COMMS
; 162  : 					MonoPrint ("AirTaskingMsg\n");
; 163  : #endif
; 164  : 					retval = new FalconAirTaskingMessage(type, senderid, target);

	push	77					; 0000004dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T102[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T102[ebp], 0
	je	SHORT $LN91@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T102[ebp]
	call	??0FalconAirTaskingMessage@@QAE@EVVU_ID@@0@Z ; FalconAirTaskingMessage::FalconAirTaskingMessage
	mov	DWORD PTR tv265[ebp], eax
	jmp	SHORT $LN92@VuxCreateM
$LN91@VuxCreateM:
	mov	DWORD PTR tv265[ebp], 0
$LN92@VuxCreateM:
	mov	ecx, DWORD PTR tv265[ebp]
	mov	DWORD PTR $T53[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T53[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 165  : 					break;

	jmp	$LN65@VuxCreateM
$LN52@VuxCreateM:

; 166  : 			case GndTaskingMsg:
; 167  : #ifdef F4_DEBUG_COMMS
; 168  : 					MonoPrint ("GndTaskingMsg\n");
; 169  : #endif
; 170  : 					retval = new FalconGndTaskingMessage(type, senderid, target);

	push	81					; 00000051H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	cmp	DWORD PTR $T101[ebp], 0
	je	SHORT $LN93@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T101[ebp]
	call	??0FalconGndTaskingMessage@@QAE@EVVU_ID@@0@Z ; FalconGndTaskingMessage::FalconGndTaskingMessage
	mov	DWORD PTR tv279[ebp], eax
	jmp	SHORT $LN94@VuxCreateM
$LN93@VuxCreateM:
	mov	DWORD PTR tv279[ebp], 0
$LN94@VuxCreateM:
	mov	edx, DWORD PTR tv279[ebp]
	mov	DWORD PTR $T27[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T27[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 171  : 					break;

	jmp	$LN65@VuxCreateM
$LN51@VuxCreateM:

; 172  : 			case NavalTaskingMsg:
; 173  : #ifdef F4_DEBUG_COMMS
; 174  : 					MonoPrint ("NavalTaskingMsg\n");
; 175  : #endif
; 176  : 					retval = new FalconNavalTaskingMessage(type, senderid, target);

	push	81					; 00000051H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T100[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	cmp	DWORD PTR $T100[ebp], 0
	je	SHORT $LN95@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T100[ebp]
	call	??0FalconNavalTaskingMessage@@QAE@EVVU_ID@@0@Z ; FalconNavalTaskingMessage::FalconNavalTaskingMessage
	mov	DWORD PTR tv325[ebp], eax
	jmp	SHORT $LN96@VuxCreateM
$LN95@VuxCreateM:
	mov	DWORD PTR tv325[ebp], 0
$LN96@VuxCreateM:
	mov	eax, DWORD PTR tv325[ebp]
	mov	DWORD PTR $T51[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T51[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 177  : 					break;

	jmp	$LN65@VuxCreateM
$LN50@VuxCreateM:

; 178  : 			case TeamMsg:
; 179  : #ifdef F4_DEBUG_COMMS
; 180  : 					MonoPrint ("TeamMsg\n");
; 181  : #endif
; 182  : 					retval = new FalconTeamMessage(type, senderid, target);

	push	66					; 00000042H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T99[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T99[ebp], 0
	je	SHORT $LN97@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T99[ebp]
	call	??0FalconTeamMessage@@QAE@EVVU_ID@@0@Z	; FalconTeamMessage::FalconTeamMessage
	mov	DWORD PTR tv339[ebp], eax
	jmp	SHORT $LN98@VuxCreateM
$LN97@VuxCreateM:
	mov	DWORD PTR tv339[ebp], 0
$LN98@VuxCreateM:
	mov	ecx, DWORD PTR tv339[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 183  : 					break;

	jmp	$LN65@VuxCreateM
$LN49@VuxCreateM:

; 184  : 			case WingmanMsg:
; 185  : #ifdef F4_DEBUG_COMMS
; 186  : 					MonoPrint ("WingmanMsg\n");
; 187  : #endif
; 188  : 					retval = new FalconWingmanMsg(type, senderid, target);

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T98[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	cmp	DWORD PTR $T98[ebp], 0
	je	SHORT $LN99@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T98[ebp]
	call	??0FalconWingmanMsg@@QAE@EVVU_ID@@0@Z	; FalconWingmanMsg::FalconWingmanMsg
	mov	DWORD PTR tv353[ebp], eax
	jmp	SHORT $LN100@VuxCreateM
$LN99@VuxCreateM:
	mov	DWORD PTR tv353[ebp], 0
$LN100@VuxCreateM:
	mov	edx, DWORD PTR tv353[ebp]
	mov	DWORD PTR $T49[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T49[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 189  : 					break;

	jmp	$LN65@VuxCreateM
$LN48@VuxCreateM:

; 190  : 			case AirAIModeChange:
; 191  : #ifdef F4_DEBUG_COMMS
; 192  : 					MonoPrint ("AirAIModeChange\n");
; 193  : #endif
; 194  : 					retval = new AirAIModeMsg(type, senderid, target);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T97[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T97[ebp], 0
	je	SHORT $LN101@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T97[ebp]
	call	??0AirAIModeMsg@@QAE@EVVU_ID@@0@Z	; AirAIModeMsg::AirAIModeMsg
	mov	DWORD PTR tv367[ebp], eax
	jmp	SHORT $LN102@VuxCreateM
$LN101@VuxCreateM:
	mov	DWORD PTR tv367[ebp], 0
$LN102@VuxCreateM:
	mov	eax, DWORD PTR tv367[ebp]
	mov	DWORD PTR $T25[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T25[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 195  : 					break;

	jmp	$LN65@VuxCreateM
$LN47@VuxCreateM:

; 196  : 			case MissionRequestMsg:
; 197  : #ifdef F4_DEBUG_COMMS
; 198  : 					MonoPrint ("MissionRequestMsg\n");
; 199  : #endif
; 200  : 					retval = new FalconMissionRequestMessage(type, senderid, target);

	push	126					; 0000007eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T96[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T96[ebp], 0
	je	SHORT $LN103@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T96[ebp]
	call	??0FalconMissionRequestMessage@@QAE@EVVU_ID@@0@Z ; FalconMissionRequestMessage::FalconMissionRequestMessage
	mov	DWORD PTR tv381[ebp], eax
	jmp	SHORT $LN104@VuxCreateM
$LN103@VuxCreateM:
	mov	DWORD PTR tv381[ebp], 0
$LN104@VuxCreateM:
	mov	ecx, DWORD PTR tv381[ebp]
	mov	DWORD PTR $T47[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T47[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 201  : 					break;

	jmp	$LN65@VuxCreateM
$LN46@VuxCreateM:

; 202  : 			case DivertMsg:
; 203  : #ifdef F4_DEBUG_COMMS
; 204  : 					MonoPrint ("DivertMsg\n");
; 205  : #endif
; 206  : 					retval = new FalconDivertMessage(type, senderid, target);

	push	78					; 0000004eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T94[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T94[ebp], 0
	je	SHORT $LN105@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T94[ebp]
	call	??0FalconDivertMessage@@QAE@EVVU_ID@@0@Z ; FalconDivertMessage::FalconDivertMessage
	mov	DWORD PTR tv395[ebp], eax
	jmp	SHORT $LN106@VuxCreateM
$LN105@VuxCreateM:
	mov	DWORD PTR tv395[ebp], 0
$LN106@VuxCreateM:
	mov	edx, DWORD PTR tv395[ebp]
	mov	DWORD PTR $T13[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 207  : 					break;

	jmp	$LN65@VuxCreateM
$LN45@VuxCreateM:

; 208  : 			case WeatherMsg:
; 209  : #ifdef F4_DEBUG_COMMS
; 210  : 					MonoPrint ("WeatherMsg\n");
; 211  : #endif
; 212  : 					retval = new FalconWeatherMessage(type, senderid, target);

	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T92[ebp], 0
	je	SHORT $LN107@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T92[ebp]
	call	??0FalconWeatherMessage@@QAE@EVVU_ID@@0@Z ; FalconWeatherMessage::FalconWeatherMessage
	mov	DWORD PTR tv409[ebp], eax
	jmp	SHORT $LN108@VuxCreateM
$LN107@VuxCreateM:
	mov	DWORD PTR tv409[ebp], 0
$LN108@VuxCreateM:
	mov	eax, DWORD PTR tv409[ebp]
	mov	DWORD PTR $T45[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T45[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 213  : 					break;

	jmp	$LN65@VuxCreateM
$LN44@VuxCreateM:

; 214  : 			case MissileEndMsg:
; 215  : #ifdef F4_DEBUG_COMMS
; 216  : 					MonoPrint ("MissileEndMsg\n");
; 217  : #endif
; 218  : 					retval = new FalconMissileEndMessage(type, senderid, target);

	push	285					; 0000011dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T90[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 20		; 00000014H
	cmp	DWORD PTR $T90[ebp], 0
	je	SHORT $LN109@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T90[ebp]
	call	??0FalconMissileEndMessage@@QAE@EVVU_ID@@0@Z ; FalconMissileEndMessage::FalconMissileEndMessage
	mov	DWORD PTR tv423[ebp], eax
	jmp	SHORT $LN110@VuxCreateM
$LN109@VuxCreateM:
	mov	DWORD PTR tv423[ebp], 0
$LN110@VuxCreateM:
	mov	ecx, DWORD PTR tv423[ebp]
	mov	DWORD PTR $T23[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T23[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 219  : 					break;

	jmp	$LN65@VuxCreateM
$LN43@VuxCreateM:

; 220  : 			case AWACSMsg:
; 221  : #ifdef F4_DEBUG_COMMS
; 222  : 					MonoPrint ("AWACSMsg\n");
; 223  : #endif
; 224  : 					retval = new FalconAWACSMessage(type, senderid, target);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 21		; 00000015H
	cmp	DWORD PTR $T88[ebp], 0
	je	SHORT $LN111@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T88[ebp]
	call	??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z	; FalconAWACSMessage::FalconAWACSMessage
	mov	DWORD PTR tv437[ebp], eax
	jmp	SHORT $LN112@VuxCreateM
$LN111@VuxCreateM:
	mov	DWORD PTR tv437[ebp], 0
$LN112@VuxCreateM:
	mov	edx, DWORD PTR tv437[ebp]
	mov	DWORD PTR $T43[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T43[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 225  : 					break;

	jmp	$LN65@VuxCreateM
$LN42@VuxCreateM:

; 226  : 			case FACMsg:
; 227  : #ifdef F4_DEBUG_COMMS
; 228  : 					MonoPrint ("FACMsg\n");
; 229  : #endif
; 230  : 					retval = new FalconFACMessage(type, senderid, target);

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T86[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 22		; 00000016H
	cmp	DWORD PTR $T86[ebp], 0
	je	SHORT $LN113@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T86[ebp]
	call	??0FalconFACMessage@@QAE@EVVU_ID@@0@Z	; FalconFACMessage::FalconFACMessage
	mov	DWORD PTR tv451[ebp], eax
	jmp	SHORT $LN114@VuxCreateM
$LN113@VuxCreateM:
	mov	DWORD PTR tv451[ebp], 0
$LN114@VuxCreateM:
	mov	eax, DWORD PTR tv451[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 231  : 					break;

	jmp	$LN65@VuxCreateM
$LN41@VuxCreateM:

; 232  : 			case ATCMsg:
; 233  : #ifdef F4_DEBUG_COMMS
; 234  : 					MonoPrint ("ATCMsg\n");
; 235  : #endif
; 236  : 					retval = new FalconATCMessage(type, senderid, target);

	push	62					; 0000003eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T84[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 23		; 00000017H
	cmp	DWORD PTR $T84[ebp], 0
	je	SHORT $LN115@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T84[ebp]
	call	??0FalconATCMessage@@QAE@EVVU_ID@@0@Z	; FalconATCMessage::FalconATCMessage
	mov	DWORD PTR tv465[ebp], eax
	jmp	SHORT $LN116@VuxCreateM
$LN115@VuxCreateM:
	mov	DWORD PTR tv465[ebp], 0
$LN116@VuxCreateM:
	mov	ecx, DWORD PTR tv465[ebp]
	mov	DWORD PTR $T41[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T41[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 237  : 					break;

	jmp	$LN65@VuxCreateM
$LN40@VuxCreateM:

; 238  : 			case DeathMessage:
; 239  : #ifdef F4_DEBUG_COMMS
; 240  : 					MonoPrint ("DeathMessage\n");
; 241  : #endif
; 242  : 					retval = new FalconDeathMessage(type, senderid, target);

	push	94					; 0000005eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T82[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 24		; 00000018H
	cmp	DWORD PTR $T82[ebp], 0
	je	SHORT $LN117@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T82[ebp]
	call	??0FalconDeathMessage@@QAE@EVVU_ID@@0@Z	; FalconDeathMessage::FalconDeathMessage
	mov	DWORD PTR tv479[ebp], eax
	jmp	SHORT $LN118@VuxCreateM
$LN117@VuxCreateM:
	mov	DWORD PTR tv479[ebp], 0
$LN118@VuxCreateM:
	mov	edx, DWORD PTR tv479[ebp]
	mov	DWORD PTR $T21[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T21[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 243  : 					break;

	jmp	$LN65@VuxCreateM
$LN39@VuxCreateM:

; 244  : 			case CampEventMsg:
; 245  : #ifdef F4_DEBUG_COMMS
; 246  : 					MonoPrint ("CampEventMsg\n");
; 247  : #endif
; 248  : 					retval = new FalconCampEventMessage(type, senderid, target);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 25		; 00000019H
	cmp	DWORD PTR $T80[ebp], 0
	je	SHORT $LN119@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T80[ebp]
	call	??0FalconCampEventMessage@@QAE@EVVU_ID@@0@Z ; FalconCampEventMessage::FalconCampEventMessage
	mov	DWORD PTR tv493[ebp], eax
	jmp	SHORT $LN120@VuxCreateM
$LN119@VuxCreateM:
	mov	DWORD PTR tv493[ebp], 0
$LN120@VuxCreateM:
	mov	eax, DWORD PTR tv493[ebp]
	mov	DWORD PTR $T39[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T39[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 249  : 					break;

	jmp	$LN65@VuxCreateM
$LN38@VuxCreateM:

; 250  : 			case LandingMessage:
; 251  : #ifdef F4_DEBUG_COMMS
; 252  : 					MonoPrint ("LandingMessage\n");
; 253  : #endif
; 254  : 					retval = new FalconLandingMessage(type, senderid, target);

	push	51					; 00000033H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 26		; 0000001aH
	cmp	DWORD PTR $T78[ebp], 0
	je	SHORT $LN121@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78[ebp]
	call	??0FalconLandingMessage@@QAE@EVVU_ID@@0@Z ; FalconLandingMessage::FalconLandingMessage
	mov	DWORD PTR tv507[ebp], eax
	jmp	SHORT $LN122@VuxCreateM
$LN121@VuxCreateM:
	mov	DWORD PTR tv507[ebp], 0
$LN122@VuxCreateM:
	mov	ecx, DWORD PTR tv507[ebp]
	mov	DWORD PTR $T11[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 255  : 					break;

	jmp	$LN65@VuxCreateM
$LN37@VuxCreateM:

; 256  : 			case ControlSurfaceMsg:
; 257  : #ifdef F4_DEBUG_COMMS
; 258  : 					MonoPrint ("ControlSurfaceMsg\n");
; 259  : #endif
; 260  : 					retval = new FalconControlSurfaceMsg(type, senderid, target);

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 27		; 0000001bH
	cmp	DWORD PTR $T76[ebp], 0
	je	SHORT $LN123@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T76[ebp]
	call	??0FalconControlSurfaceMsg@@QAE@EVVU_ID@@0@Z ; FalconControlSurfaceMsg::FalconControlSurfaceMsg
	mov	DWORD PTR tv521[ebp], eax
	jmp	SHORT $LN124@VuxCreateM
$LN123@VuxCreateM:
	mov	DWORD PTR tv521[ebp], 0
$LN124@VuxCreateM:
	mov	edx, DWORD PTR tv521[ebp]
	mov	DWORD PTR $T37[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T37[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 261  : 					break;

	jmp	$LN65@VuxCreateM
$LN36@VuxCreateM:

; 262  : 			case SimDataToggle:
; 263  : #ifdef F4_DEBUG_COMMS
; 264  : 					MonoPrint ("SimDataToggle\n");
; 265  : #endif
; 266  : 					retval = new FalconSimDataToggle(type, senderid, target);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 28		; 0000001cH
	cmp	DWORD PTR $T74[ebp], 0
	je	SHORT $LN125@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T74[ebp]
	call	??0FalconSimDataToggle@@QAE@EVVU_ID@@0@Z ; FalconSimDataToggle::FalconSimDataToggle
	mov	DWORD PTR tv535[ebp], eax
	jmp	SHORT $LN126@VuxCreateM
$LN125@VuxCreateM:
	mov	DWORD PTR tv535[ebp], 0
$LN126@VuxCreateM:
	mov	eax, DWORD PTR tv535[ebp]
	mov	DWORD PTR $T19[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T19[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 267  : 					break;

	jmp	$LN65@VuxCreateM
$LN35@VuxCreateM:

; 268  : 			case RequestDogfightInfo:
; 269  : #ifdef F4_DEBUG_COMMS
; 270  : 					MonoPrint ("RequestDogfightInfo\n");
; 271  : #endif
; 272  : 					retval = new UI_RequestDogfightInfo(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 29		; 0000001dH
	cmp	DWORD PTR $T72[ebp], 0
	je	SHORT $LN127@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72[ebp]
	call	??0UI_RequestDogfightInfo@@QAE@EVVU_ID@@0@Z ; UI_RequestDogfightInfo::UI_RequestDogfightInfo
	mov	DWORD PTR tv581[ebp], eax
	jmp	SHORT $LN128@VuxCreateM
$LN127@VuxCreateM:
	mov	DWORD PTR tv581[ebp], 0
$LN128@VuxCreateM:
	mov	ecx, DWORD PTR tv581[ebp]
	mov	DWORD PTR $T35[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T35[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 273  : 					break;

	jmp	$LN65@VuxCreateM
$LN34@VuxCreateM:

; 274  : 			case SendDogfightInfo:
; 275  : #ifdef F4_DEBUG_COMMS
; 276  : 					MonoPrint ("SendDogfightInfo\n");
; 277  : #endif
; 278  : 					retval = new UI_SendDogfightInfo(type, senderid, target);

	push	124					; 0000007cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 30		; 0000001eH
	cmp	DWORD PTR $T70[ebp], 0
	je	SHORT $LN129@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T70[ebp]
	call	??0UI_SendDogfightInfo@@QAE@EVVU_ID@@0@Z ; UI_SendDogfightInfo::UI_SendDogfightInfo
	mov	DWORD PTR tv595[ebp], eax
	jmp	SHORT $LN130@VuxCreateM
$LN129@VuxCreateM:
	mov	DWORD PTR tv595[ebp], 0
$LN130@VuxCreateM:
	mov	edx, DWORD PTR tv595[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 279  : 					break;

	jmp	$LN65@VuxCreateM
$LN33@VuxCreateM:

; 280  : 			case RequestAircraftSlot:
; 281  : #ifdef F4_DEBUG_COMMS
; 282  : 					MonoPrint ("RequestAircraftSlot\n");
; 283  : #endif
; 284  : 					retval = new UI_RequestAircraftSlot(type, senderid, target);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 31		; 0000001fH
	cmp	DWORD PTR $T68[ebp], 0
	je	SHORT $LN131@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T68[ebp]
	call	??0UI_RequestAircraftSlot@@QAE@EVVU_ID@@0@Z ; UI_RequestAircraftSlot::UI_RequestAircraftSlot
	mov	DWORD PTR tv609[ebp], eax
	jmp	SHORT $LN132@VuxCreateM
$LN131@VuxCreateM:
	mov	DWORD PTR tv609[ebp], 0
$LN132@VuxCreateM:
	mov	eax, DWORD PTR tv609[ebp]
	mov	DWORD PTR $T33[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T33[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 285  : 					break;

	jmp	$LN65@VuxCreateM
$LN32@VuxCreateM:

; 286  : 			case SendAircraftSlot:
; 287  : #ifdef F4_DEBUG_COMMS
; 288  : 					MonoPrint ("SendAircraftSlot\n");
; 289  : #endif
; 290  : 					retval = new UI_SendAircraftSlot(type, senderid, target);

	push	78					; 0000004eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 32		; 00000020H
	cmp	DWORD PTR $T66[ebp], 0
	je	SHORT $LN133@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T66[ebp]
	call	??0UI_SendAircraftSlot@@QAE@EVVU_ID@@0@Z ; UI_SendAircraftSlot::UI_SendAircraftSlot
	mov	DWORD PTR tv623[ebp], eax
	jmp	SHORT $LN134@VuxCreateM
$LN133@VuxCreateM:
	mov	DWORD PTR tv623[ebp], 0
$LN134@VuxCreateM:
	mov	ecx, DWORD PTR tv623[ebp]
	mov	DWORD PTR $T64[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T64[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 291  : 					break;

	jmp	$LN65@VuxCreateM
$LN31@VuxCreateM:

; 292  : 			case GraphicsTextDisplayMsg:
; 293  : #ifdef F4_DEBUG_COMMS
; 294  : 					MonoPrint ("GraphicsTextDisplayMsg\n");
; 295  : #endif
; 296  : 					retval = new GraphicsTextDisplay(type, senderid, target);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T81[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 33		; 00000021H
	cmp	DWORD PTR $T81[ebp], 0
	je	SHORT $LN135@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T81[ebp]
	call	??0GraphicsTextDisplay@@QAE@EVVU_ID@@0@Z ; GraphicsTextDisplay::GraphicsTextDisplay
	mov	DWORD PTR tv637[ebp], eax
	jmp	SHORT $LN136@VuxCreateM
$LN135@VuxCreateM:
	mov	DWORD PTR tv637[ebp], 0
$LN136@VuxCreateM:
	mov	edx, DWORD PTR tv637[ebp]
	mov	DWORD PTR $T62[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T62[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 297  : 					break;

	jmp	$LN65@VuxCreateM
$LN30@VuxCreateM:

; 298  : 			case AddSFXMessage:
; 299  : #ifdef F4_DEBUG_COMMS
; 300  : 					MonoPrint ("AddSFXMessage\n");
; 301  : #endif
; 302  : 					retval = new FalconAddSFXMessage(type, senderid, target);

	push	82					; 00000052H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T95[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 34		; 00000022H
	cmp	DWORD PTR $T95[ebp], 0
	je	SHORT $LN137@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T95[ebp]
	call	??0FalconAddSFXMessage@@QAE@EVVU_ID@@0@Z ; FalconAddSFXMessage::FalconAddSFXMessage
	mov	DWORD PTR tv651[ebp], eax
	jmp	SHORT $LN138@VuxCreateM
$LN137@VuxCreateM:
	mov	DWORD PTR tv651[ebp], 0
$LN138@VuxCreateM:
	mov	eax, DWORD PTR tv651[ebp]
	mov	DWORD PTR $T60[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T60[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 303  : 					break;

	jmp	$LN65@VuxCreateM
$LN29@VuxCreateM:

; 304  : 			case SendPersistantList:
; 305  : #ifdef F4_DEBUG_COMMS
; 306  : 					MonoPrint ("SendPersistantList\n");
; 307  : #endif
; 308  : 					retval = new FalconSendPersistantList(type, senderid, target);

	push	54					; 00000036H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 35		; 00000023H
	cmp	DWORD PTR $T73[ebp], 0
	je	SHORT $LN139@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T73[ebp]
	call	??0FalconSendPersistantList@@QAE@EVVU_ID@@0@Z ; FalconSendPersistantList::FalconSendPersistantList
	mov	DWORD PTR tv665[ebp], eax
	jmp	SHORT $LN140@VuxCreateM
$LN139@VuxCreateM:
	mov	DWORD PTR tv665[ebp], 0
$LN140@VuxCreateM:
	mov	ecx, DWORD PTR tv665[ebp]
	mov	DWORD PTR $T58[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T58[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 309  : 					break;

	jmp	$LN65@VuxCreateM
$LN28@VuxCreateM:

; 310  : 			case SendObjData:
; 311  : #ifdef F4_DEBUG_COMMS
; 312  : 					MonoPrint ("SendObjData\n");
; 313  : #endif
; 314  : 					retval = new FalconSendObjData(type, senderid, target);

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T93[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 36		; 00000024H
	cmp	DWORD PTR $T93[ebp], 0
	je	SHORT $LN141@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T93[ebp]
	call	??0FalconSendObjData@@QAE@EVVU_ID@@0@Z	; FalconSendObjData::FalconSendObjData
	mov	DWORD PTR tv679[ebp], eax
	jmp	SHORT $LN142@VuxCreateM
$LN141@VuxCreateM:
	mov	DWORD PTR tv679[ebp], 0
$LN142@VuxCreateM:
	mov	edx, DWORD PTR tv679[ebp]
	mov	DWORD PTR $T56[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T56[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 315  : 					break;

	jmp	$LN65@VuxCreateM
$LN27@VuxCreateM:

; 316  : 			case SendUnitData:
; 317  : #ifdef F4_DEBUG_COMMS
; 318  : 					MonoPrint ("SendUnitData\n");
; 319  : #endif
; 320  : 					retval = new FalconSendUnitData(type, senderid, target);

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 37		; 00000025H
	cmp	DWORD PTR $T79[ebp], 0
	je	SHORT $LN143@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T79[ebp]
	call	??0FalconSendUnitData@@QAE@EVVU_ID@@0@Z	; FalconSendUnitData::FalconSendUnitData
	mov	DWORD PTR tv693[ebp], eax
	jmp	SHORT $LN144@VuxCreateM
$LN143@VuxCreateM:
	mov	DWORD PTR tv693[ebp], 0
$LN144@VuxCreateM:
	mov	eax, DWORD PTR tv693[ebp]
	mov	DWORD PTR $T54[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T54[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 321  : 					break;

	jmp	$LN65@VuxCreateM
$LN26@VuxCreateM:

; 322  : 			case RequestCampaignData:
; 323  : #ifdef F4_DEBUG_COMMS
; 324  : 					MonoPrint ("RequestCampaignData\n");
; 325  : #endif
; 326  : 					retval = new FalconRequestCampaignData(type, senderid, target);

	push	69					; 00000045H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T91[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 38		; 00000026H
	cmp	DWORD PTR $T91[ebp], 0
	je	SHORT $LN145@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T91[ebp]
	call	??0FalconRequestCampaignData@@QAE@EVVU_ID@@0@Z ; FalconRequestCampaignData::FalconRequestCampaignData
	mov	DWORD PTR tv707[ebp], eax
	jmp	SHORT $LN146@VuxCreateM
$LN145@VuxCreateM:
	mov	DWORD PTR tv707[ebp], 0
$LN146@VuxCreateM:
	mov	ecx, DWORD PTR tv707[ebp]
	mov	DWORD PTR $T52[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T52[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 327  : 					break;

	jmp	$LN65@VuxCreateM
$LN25@VuxCreateM:

; 328  : 			case SendChatMessage:
; 329  : #ifdef F4_DEBUG_COMMS
; 330  : 					MonoPrint ("SendChatMessage\n");
; 331  : #endif
; 332  : 					retval = new UI_SendChatMessage(type, senderid, target);

	push	62					; 0000003eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 39		; 00000027H
	cmp	DWORD PTR $T69[ebp], 0
	je	SHORT $LN147@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T69[ebp]
	call	??0UI_SendChatMessage@@QAE@EVVU_ID@@0@Z	; UI_SendChatMessage::UI_SendChatMessage
	mov	DWORD PTR tv721[ebp], eax
	jmp	SHORT $LN148@VuxCreateM
$LN147@VuxCreateM:
	mov	DWORD PTR tv721[ebp], 0
$LN148@VuxCreateM:
	mov	edx, DWORD PTR tv721[ebp]
	mov	DWORD PTR $T50[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T50[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 333  : 					break;

	jmp	$LN65@VuxCreateM
$LN24@VuxCreateM:

; 334  : 			case TankerMsg:
; 335  : #ifdef F4_DEBUG_COMMS
; 336  : 					MonoPrint ("TankerMsg\n");
; 337  : #endif
; 338  : 					retval = new FalconTankerMessage(type, senderid, target);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T89[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 40		; 00000028H
	cmp	DWORD PTR $T89[ebp], 0
	je	SHORT $LN149@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T89[ebp]
	call	??0FalconTankerMessage@@QAE@EVVU_ID@@0@Z ; FalconTankerMessage::FalconTankerMessage
	mov	DWORD PTR tv735[ebp], eax
	jmp	SHORT $LN150@VuxCreateM
$LN149@VuxCreateM:
	mov	DWORD PTR tv735[ebp], 0
$LN150@VuxCreateM:
	mov	eax, DWORD PTR tv735[ebp]
	mov	DWORD PTR $T48[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T48[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 339  : 					break;

	jmp	$LN65@VuxCreateM
$LN23@VuxCreateM:

; 340  : 			case EjectMsg:
; 341  : #ifdef F4_DEBUG_COMMS
; 342  : 					MonoPrint ("EjectMsg\n");
; 343  : #endif
; 344  : 					retval = new FalconEjectMessage(type, senderid, target);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 41		; 00000029H
	cmp	DWORD PTR $T77[ebp], 0
	je	SHORT $LN151@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T77[ebp]
	call	??0FalconEjectMessage@@QAE@EVVU_ID@@0@Z	; FalconEjectMessage::FalconEjectMessage
	mov	DWORD PTR tv749[ebp], eax
	jmp	SHORT $LN152@VuxCreateM
$LN151@VuxCreateM:
	mov	DWORD PTR tv749[ebp], 0
$LN152@VuxCreateM:
	mov	ecx, DWORD PTR tv749[ebp]
	mov	DWORD PTR $T46[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T46[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 345  : 					break;

	jmp	$LN65@VuxCreateM
$LN22@VuxCreateM:

; 346  : 			case TrackMsg:
; 347  : #ifdef F4_DEBUG_COMMS
; 348  : 					MonoPrint ("TrackMsg\n");
; 349  : #endif
; 350  : 					retval = new FalconTrackMessage(type, senderid, target);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T87[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 42		; 0000002aH
	cmp	DWORD PTR $T87[ebp], 0
	je	SHORT $LN153@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T87[ebp]
	call	??0FalconTrackMessage@@QAE@EVVU_ID@@0@Z	; FalconTrackMessage::FalconTrackMessage
	mov	DWORD PTR tv763[ebp], eax
	jmp	SHORT $LN154@VuxCreateM
$LN153@VuxCreateM:
	mov	DWORD PTR tv763[ebp], 0
$LN154@VuxCreateM:
	mov	edx, DWORD PTR tv763[ebp]
	mov	DWORD PTR $T44[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T44[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 351  : 					break;

	jmp	$LN65@VuxCreateM
$LN21@VuxCreateM:

; 352  : 			case CampDataMsg:
; 353  : #ifdef F4_DEBUG_COMMS
; 354  : 					MonoPrint ("CampDataMsg\n");
; 355  : #endif
; 356  : 					retval = new FalconCampDataMessage(type, senderid, target);

	push	58					; 0000003aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 43		; 0000002bH
	cmp	DWORD PTR $T71[ebp], 0
	je	SHORT $LN155@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T71[ebp]
	call	??0FalconCampDataMessage@@QAE@EVVU_ID@@0@Z ; FalconCampDataMessage::FalconCampDataMessage
	mov	DWORD PTR tv777[ebp], eax
	jmp	SHORT $LN156@VuxCreateM
$LN155@VuxCreateM:
	mov	DWORD PTR tv777[ebp], 0
$LN156@VuxCreateM:
	mov	eax, DWORD PTR tv777[ebp]
	mov	DWORD PTR $T42[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T42[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 357  : 					break;

	jmp	$LN65@VuxCreateM
$LN20@VuxCreateM:

; 358  : 			case VoiceDataMsg:
; 359  : #ifdef F4_DEBUG_COMMS
; 360  : 					MonoPrint ("VoiceDataMsg\n");
; 361  : #endif
; 362  : 					retval = new FalconVoiceDataMessage(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T85[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 44		; 0000002cH
	cmp	DWORD PTR $T85[ebp], 0
	je	SHORT $LN157@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T85[ebp]
	call	??0FalconVoiceDataMessage@@QAE@EVVU_ID@@0@Z ; FalconVoiceDataMessage::FalconVoiceDataMessage
	mov	DWORD PTR tv791[ebp], eax
	jmp	SHORT $LN158@VuxCreateM
$LN157@VuxCreateM:
	mov	DWORD PTR tv791[ebp], 0
$LN158@VuxCreateM:
	mov	ecx, DWORD PTR tv791[ebp]
	mov	DWORD PTR $T40[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T40[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 363  : 					break;

	jmp	$LN65@VuxCreateM
$LN19@VuxCreateM:

; 364  : 			case RadioChatterMsg:
; 365  : #ifdef F4_DEBUG_COMMS
; 366  : 					MonoPrint ("RadioChatterMsg\n");
; 367  : #endif
; 368  : 					retval = new FalconRadioChatterMessage(type, senderid, target);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 45		; 0000002dH
	cmp	DWORD PTR $T75[ebp], 0
	je	SHORT $LN159@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T75[ebp]
	call	??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv837[ebp], eax
	jmp	SHORT $LN160@VuxCreateM
$LN159@VuxCreateM:
	mov	DWORD PTR tv837[ebp], 0
$LN160@VuxCreateM:
	mov	edx, DWORD PTR tv837[ebp]
	mov	DWORD PTR $T38[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T38[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 369  : 					break;

	jmp	$LN65@VuxCreateM
$LN18@VuxCreateM:

; 370  : 			case PlayerStatusMsg:
; 371  : #ifdef F4_DEBUG_COMMS
; 372  : 					MonoPrint ("PlayerStatusMsg\n");
; 373  : #endif
; 374  : 					retval = new FalconPlayerStatusMessage(type, senderid, target);

	push	93					; 0000005dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T83[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 46		; 0000002eH
	cmp	DWORD PTR $T83[ebp], 0
	je	SHORT $LN161@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T83[ebp]
	call	??0FalconPlayerStatusMessage@@QAE@EVVU_ID@@0@Z ; FalconPlayerStatusMessage::FalconPlayerStatusMessage
	mov	DWORD PTR tv851[ebp], eax
	jmp	SHORT $LN162@VuxCreateM
$LN161@VuxCreateM:
	mov	DWORD PTR tv851[ebp], 0
$LN162@VuxCreateM:
	mov	eax, DWORD PTR tv851[ebp]
	mov	DWORD PTR $T36[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T36[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 375  : 					break;

	jmp	$LN65@VuxCreateM
$LN17@VuxCreateM:

; 376  : 			case LaserDesignateMsg:
; 377  : #ifdef F4_DEBUG_COMMS
; 378  : 					MonoPrint ("LaserDesignateMsg\n");
; 379  : #endif
; 380  : 					retval = new FalconLaserDesignateMsg(type, senderid, target);

	push	65					; 00000041H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T129[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 47		; 0000002fH
	cmp	DWORD PTR $T129[ebp], 0
	je	SHORT $LN163@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T129[ebp]
	call	??0FalconLaserDesignateMsg@@QAE@EVVU_ID@@0@Z ; FalconLaserDesignateMsg::FalconLaserDesignateMsg
	mov	DWORD PTR tv865[ebp], eax
	jmp	SHORT $LN164@VuxCreateM
$LN163@VuxCreateM:
	mov	DWORD PTR tv865[ebp], 0
$LN164@VuxCreateM:
	mov	ecx, DWORD PTR tv865[ebp]
	mov	DWORD PTR $T34[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T34[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 381  : 					break;

	jmp	$LN65@VuxCreateM
$LN16@VuxCreateM:

; 382  : 			case ATCCmdMsg:
; 383  : #ifdef F4_DEBUG_COMMS
; 384  : 					MonoPrint ("ATCCmdMsg\n");
; 385  : #endif
; 386  : 					retval = new FalconATCCmdMessage(type, senderid, target);

	push	74					; 0000004aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T128[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 48		; 00000030H
	cmp	DWORD PTR $T128[ebp], 0
	je	SHORT $LN165@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T128[ebp]
	call	??0FalconATCCmdMessage@@QAE@EVVU_ID@@0@Z ; FalconATCCmdMessage::FalconATCCmdMessage
	mov	DWORD PTR tv879[ebp], eax
	jmp	SHORT $LN166@VuxCreateM
$LN165@VuxCreateM:
	mov	DWORD PTR tv879[ebp], 0
$LN166@VuxCreateM:
	mov	edx, DWORD PTR tv879[ebp]
	mov	DWORD PTR $T32[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T32[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 387  : 					break;

	jmp	$LN65@VuxCreateM
$LN15@VuxCreateM:

; 388  : 			case DLinkMsg:
; 389  : #ifdef F4_DEBUG_COMMS
; 390  : 					MonoPrint ("DLinkMsg\n");
; 391  : #endif
; 392  : 					retval = new FalconDLinkMessage(type, senderid, target);

	push	123					; 0000007bH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T127[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 49		; 00000031H
	cmp	DWORD PTR $T127[ebp], 0
	je	SHORT $LN167@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T127[ebp]
	call	??0FalconDLinkMessage@@QAE@EVVU_ID@@0@Z	; FalconDLinkMessage::FalconDLinkMessage
	mov	DWORD PTR tv893[ebp], eax
	jmp	SHORT $LN168@VuxCreateM
$LN167@VuxCreateM:
	mov	DWORD PTR tv893[ebp], 0
$LN168@VuxCreateM:
	mov	eax, DWORD PTR tv893[ebp]
	mov	DWORD PTR $T30[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T30[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 393  : 					break;

	jmp	$LN65@VuxCreateM
$LN14@VuxCreateM:

; 394  : 			case RequestObject:
; 395  : #ifdef F4_DEBUG_COMMS
; 396  : 					MonoPrint ("RequestObject\n");
; 397  : #endif
; 398  : 					retval = new FalconRequestObject(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T126[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 50		; 00000032H
	cmp	DWORD PTR $T126[ebp], 0
	je	SHORT $LN169@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T126[ebp]
	call	??0FalconRequestObject@@QAE@EVVU_ID@@0@Z ; FalconRequestObject::FalconRequestObject
	mov	DWORD PTR tv907[ebp], eax
	jmp	SHORT $LN170@VuxCreateM
$LN169@VuxCreateM:
	mov	DWORD PTR tv907[ebp], 0
$LN170@VuxCreateM:
	mov	ecx, DWORD PTR tv907[ebp]
	mov	DWORD PTR $T28[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T28[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 399  : 					break;

	jmp	$LN65@VuxCreateM
$LN13@VuxCreateM:

; 400  : 			case RegenerationMsg:
; 401  : #ifdef F4_DEBUG_COMMS
; 402  : 					MonoPrint ("RegenerationMsg\n");
; 403  : #endif
; 404  : 					retval = new FalconRegenerationMessage(type, senderid, target);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T125[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 51		; 00000033H
	cmp	DWORD PTR $T125[ebp], 0
	je	SHORT $LN171@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T125[ebp]
	call	??0FalconRegenerationMessage@@QAE@EVVU_ID@@0@Z ; FalconRegenerationMessage::FalconRegenerationMessage
	mov	DWORD PTR tv921[ebp], eax
	jmp	SHORT $LN172@VuxCreateM
$LN171@VuxCreateM:
	mov	DWORD PTR tv921[ebp], 0
$LN172@VuxCreateM:
	mov	edx, DWORD PTR tv921[ebp]
	mov	DWORD PTR $T26[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T26[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 405  : 					break;

	jmp	$LN65@VuxCreateM
$LN12@VuxCreateM:

; 406  : 			case RequestLogbook:
; 407  : #ifdef F4_DEBUG_COMMS
; 408  : 					MonoPrint ("RequestLogbook\n");
; 409  : #endif
; 410  : 					retval = new UI_RequestLogbook(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T124[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 52		; 00000034H
	cmp	DWORD PTR $T124[ebp], 0
	je	SHORT $LN173@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T124[ebp]
	call	??0UI_RequestLogbook@@QAE@EVVU_ID@@0@Z	; UI_RequestLogbook::UI_RequestLogbook
	mov	DWORD PTR tv935[ebp], eax
	jmp	SHORT $LN174@VuxCreateM
$LN173@VuxCreateM:
	mov	DWORD PTR tv935[ebp], 0
$LN174@VuxCreateM:
	mov	eax, DWORD PTR tv935[ebp]
	mov	DWORD PTR $T24[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T24[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 411  : 					break;

	jmp	$LN65@VuxCreateM
$LN11@VuxCreateM:

; 412  : 			case SendLogbook:
; 413  : #ifdef F4_DEBUG_COMMS
; 414  : 					MonoPrint ("SendLogbook\n");
; 415  : #endif
; 416  : 					retval = new UI_SendLogbook(type, senderid, target);

	push	432					; 000001b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T123[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 53		; 00000035H
	cmp	DWORD PTR $T123[ebp], 0
	je	SHORT $LN175@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T123[ebp]
	call	??0UI_SendLogbook@@QAE@EVVU_ID@@0@Z	; UI_SendLogbook::UI_SendLogbook
	mov	DWORD PTR tv949[ebp], eax
	jmp	SHORT $LN176@VuxCreateM
$LN175@VuxCreateM:
	mov	DWORD PTR tv949[ebp], 0
$LN176@VuxCreateM:
	mov	ecx, DWORD PTR tv949[ebp]
	mov	DWORD PTR $T22[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T22[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 417  : 					break;

	jmp	$LN65@VuxCreateM
$LN10@VuxCreateM:

; 418  : 			case SendImage:
; 419  : #ifdef F4_DEBUG_COMMS
; 420  : 					MonoPrint ("SendImage\n");
; 421  : #endif
; 422  : 					retval = new UI_SendImage(type, senderid, target);

	push	73					; 00000049H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T122[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 54		; 00000036H
	cmp	DWORD PTR $T122[ebp], 0
	je	SHORT $LN177@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T122[ebp]
	call	??0UI_SendImage@@QAE@EVVU_ID@@0@Z	; UI_SendImage::UI_SendImage
	mov	DWORD PTR tv963[ebp], eax
	jmp	SHORT $LN178@VuxCreateM
$LN177@VuxCreateM:
	mov	DWORD PTR tv963[ebp], 0
$LN178@VuxCreateM:
	mov	edx, DWORD PTR tv963[ebp]
	mov	DWORD PTR $T20[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T20[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 423  : 					break;

	jmp	$LN65@VuxCreateM
$LN9@VuxCreateM:

; 424  : 			case FalconFlightPlanMsg:
; 425  : #ifdef F4_DEBUG_COMMS
; 426  : 					MonoPrint ("FalconFlightPlanMsg\n");
; 427  : #endif
; 428  : 					retval = new FalconFlightPlanMessage(type, senderid, target);

	push	57					; 00000039H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T121[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 55		; 00000037H
	cmp	DWORD PTR $T121[ebp], 0
	je	SHORT $LN179@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T121[ebp]
	call	??0FalconFlightPlanMessage@@QAE@EVVU_ID@@0@Z ; FalconFlightPlanMessage::FalconFlightPlanMessage
	mov	DWORD PTR tv977[ebp], eax
	jmp	SHORT $LN180@VuxCreateM
$LN179@VuxCreateM:
	mov	DWORD PTR tv977[ebp], 0
$LN180@VuxCreateM:
	mov	eax, DWORD PTR tv977[ebp]
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T18[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 429  : 					break;

	jmp	$LN65@VuxCreateM
$LN8@VuxCreateM:

; 430  : 			case SimDirtyDataMsg:
; 431  : #ifdef F4_DEBUG_COMMS
; 432  : 					MonoPrint ("SimDirtyDataMsg\n");
; 433  : #endif
; 434  : 					retval = new SimDirtyData(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T120[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 56		; 00000038H
	cmp	DWORD PTR $T120[ebp], 0
	je	SHORT $LN181@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T120[ebp]
	call	??0SimDirtyData@@QAE@EVVU_ID@@0@Z	; SimDirtyData::SimDirtyData
	mov	DWORD PTR tv991[ebp], eax
	jmp	SHORT $LN182@VuxCreateM
$LN181@VuxCreateM:
	mov	DWORD PTR tv991[ebp], 0
$LN182@VuxCreateM:
	mov	ecx, DWORD PTR tv991[ebp]
	mov	DWORD PTR $T16[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T16[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 435  : 					break;

	jmp	$LN65@VuxCreateM
$LN7@VuxCreateM:

; 436  : 			case CampDirtyDataMsg:
; 437  : #ifdef F4_DEBUG_COMMS
; 438  : 					MonoPrint ("CampDirtyDataMsg\n");
; 439  : #endif
; 440  : 					retval = new CampDirtyData(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T119[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 57		; 00000039H
	cmp	DWORD PTR $T119[ebp], 0
	je	SHORT $LN183@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T119[ebp]
	call	??0CampDirtyData@@QAE@EVVU_ID@@0@Z	; CampDirtyData::CampDirtyData
	mov	DWORD PTR tv1005[ebp], eax
	jmp	SHORT $LN184@VuxCreateM
$LN183@VuxCreateM:
	mov	DWORD PTR tv1005[ebp], 0
$LN184@VuxCreateM:
	mov	edx, DWORD PTR tv1005[ebp]
	mov	DWORD PTR $T14[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T14[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 441  : 					break;

	jmp	$LN65@VuxCreateM
$LN6@VuxCreateM:

; 442  : 			case CampEventDataMsg:
; 443  : #ifdef F4_DEBUG_COMMS
; 444  : 					MonoPrint ("CampEventDataMsg\n");
; 445  : #endif
; 446  : 					retval = new CampEventDataMessage(type, senderid, target);

	push	55					; 00000037H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T118[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 58		; 0000003aH
	cmp	DWORD PTR $T118[ebp], 0
	je	SHORT $LN185@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T118[ebp]
	call	??0CampEventDataMessage@@QAE@EVVU_ID@@0@Z ; CampEventDataMessage::CampEventDataMessage
	mov	DWORD PTR tv1019[ebp], eax
	jmp	SHORT $LN186@VuxCreateM
$LN185@VuxCreateM:
	mov	DWORD PTR tv1019[ebp], 0
$LN186@VuxCreateM:
	mov	eax, DWORD PTR tv1019[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 447  : 					break;

	jmp	$LN65@VuxCreateM
$LN5@VuxCreateM:

; 448  : 			case SendVCMsg:
; 449  : #ifdef F4_DEBUG_COMMS
; 450  : 					MonoPrint ("SendVCMsg\n");
; 451  : #endif
; 452  : 					retval = new FalconSendVC(type, senderid, target);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T117[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 59		; 0000003bH
	cmp	DWORD PTR $T117[ebp], 0
	je	SHORT $LN187@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	movzx	eax, BYTE PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T117[ebp]
	call	??0FalconSendVC@@QAE@EVVU_ID@@0@Z	; FalconSendVC::FalconSendVC
	mov	DWORD PTR tv1033[ebp], eax
	jmp	SHORT $LN188@VuxCreateM
$LN187@VuxCreateM:
	mov	DWORD PTR tv1033[ebp], 0
$LN188@VuxCreateM:
	mov	ecx, DWORD PTR tv1033[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR _retval$[ebp], edx

; 453  : 					break;

	jmp	$LN65@VuxCreateM
$LN4@VuxCreateM:

; 454  : 			case SendUIMsg:
; 455  : #ifdef F4_DEBUG_COMMS
; 456  : 					MonoPrint ("SendUIMsg\n");
; 457  : #endif
; 458  : 					retval = new UISendMsg(type, senderid, target);

	push	65					; 00000041H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T116[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 60		; 0000003cH
	cmp	DWORD PTR $T116[ebp], 0
	je	SHORT $LN189@VuxCreateM
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T116[ebp]
	call	??0UISendMsg@@QAE@EVVU_ID@@0@Z		; UISendMsg::UISendMsg
	mov	DWORD PTR tv1047[ebp], eax
	jmp	SHORT $LN190@VuxCreateM
$LN189@VuxCreateM:
	mov	DWORD PTR tv1047[ebp], 0
$LN190@VuxCreateM:
	mov	edx, DWORD PTR tv1047[ebp]
	mov	DWORD PTR $T8[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR _retval$[ebp], eax

; 459  : 					break;

	jmp	$LN65@VuxCreateM
$LN3@VuxCreateM:

; 460  : 			case SendEvalMsg:
; 461  : #ifdef F4_DEBUG_COMMS
; 462  : 					MonoPrint ("SendEvalMsg\n");
; 463  : #endif
; 464  : 					retval = new SendEvalMessage(type, senderid, target);

	push	58					; 0000003aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T115[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 61		; 0000003dH
	cmp	DWORD PTR $T115[ebp], 0
	je	SHORT $LN191@VuxCreateM
	mov	ecx, DWORD PTR _target$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T115[ebp]
	call	??0SendEvalMessage@@QAE@EVVU_ID@@0@Z	; SendEvalMessage::SendEvalMessage
	mov	DWORD PTR tv1093[ebp], eax
	jmp	SHORT $LN192@VuxCreateM
$LN191@VuxCreateM:
	mov	DWORD PTR tv1093[ebp], 0
$LN192@VuxCreateM:
	mov	eax, DWORD PTR tv1093[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 465  : 					break;

	jmp	$LN65@VuxCreateM
$LN2@VuxCreateM:

; 466  : 
; 467  : 			// sfr: added position messages
; 468  : 			case RequestSimMoverPositionMsg:
; 469  : #ifdef F4_DEBUG_COMMS
; 470  : 					MonoPrint ("RequestSimMoverPosition\n");
; 471  : #endif
; 472  : 					retval = new RequestSimMoverPosition(senderid, target);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T114[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 62		; 0000003eH
	cmp	DWORD PTR $T114[ebp], 0
	je	SHORT $LN193@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T114[ebp]
	call	??0RequestSimMoverPosition@@QAE@VVU_ID@@0@Z ; RequestSimMoverPosition::RequestSimMoverPosition
	mov	DWORD PTR tv1106[ebp], eax
	jmp	SHORT $LN194@VuxCreateM
$LN193@VuxCreateM:
	mov	DWORD PTR tv1106[ebp], 0
$LN194@VuxCreateM:
	mov	eax, DWORD PTR tv1106[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _retval$[ebp], ecx

; 473  : 					break;

	jmp	SHORT $LN65@VuxCreateM
$LN1@VuxCreateM:

; 474  : 			case SendSimMoverPositionMsg:
; 475  : #ifdef F4_DEBUG_COMMS
; 476  : 					MonoPrint ("SendSimMoverPosition\n");
; 477  : #endif
; 478  : 					retval = new SendSimMoverPosition(senderid, target);

	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T113[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 63		; 0000003fH
	cmp	DWORD PTR $T113[ebp], 0
	je	SHORT $LN195@VuxCreateM
	mov	edx, DWORD PTR _target$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _senderid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T113[ebp]
	call	??0SendSimMoverPosition@@QAE@VVU_ID@@0@Z ; SendSimMoverPosition::SendSimMoverPosition
	mov	DWORD PTR tv1119[ebp], eax
	jmp	SHORT $LN196@VuxCreateM
$LN195@VuxCreateM:
	mov	DWORD PTR tv1119[ebp], 0
$LN196@VuxCreateM:
	mov	eax, DWORD PTR tv1119[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _retval$[ebp], ecx
$LN65@VuxCreateM:

; 479  : 					break;
; 480  : 
; 481  : #if 0
; 482  : 			case SimPositionUpdateMsg:
; 483  : #ifdef F4_DEBUG_COMMS
; 484  : 					MonoPrint ("SimPositionUpdateMsg\n");
; 485  : #endif
; 486  : 					retval = new SimPositionUpdateEvent(type, senderid, target);
; 487  : 					break;
; 488  : 			case SimRoughPositionUpdateMsg:
; 489  : #ifdef F4_DEBUG_COMMS
; 490  : 					MonoPrint ("SimRoughPositionUpdateMsg\n");
; 491  : #endif
; 492  : 					retval = new SimRoughPositionUpdateEvent(type, senderid, target);
; 493  : 					break;
; 494  : #endif
; 495  : 
; 496  : 	}
; 497  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 498  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN262@VuxCreateM:
	DD	$LN64@VuxCreateM
	DD	$LN63@VuxCreateM
	DD	$LN62@VuxCreateM
	DD	$LN61@VuxCreateM
	DD	$LN60@VuxCreateM
	DD	$LN59@VuxCreateM
	DD	$LN58@VuxCreateM
	DD	$LN57@VuxCreateM
	DD	$LN56@VuxCreateM
	DD	$LN55@VuxCreateM
	DD	$LN54@VuxCreateM
	DD	$LN53@VuxCreateM
	DD	$LN52@VuxCreateM
	DD	$LN51@VuxCreateM
	DD	$LN50@VuxCreateM
	DD	$LN49@VuxCreateM
	DD	$LN48@VuxCreateM
	DD	$LN47@VuxCreateM
	DD	$LN46@VuxCreateM
	DD	$LN65@VuxCreateM
	DD	$LN45@VuxCreateM
	DD	$LN44@VuxCreateM
	DD	$LN43@VuxCreateM
	DD	$LN42@VuxCreateM
	DD	$LN41@VuxCreateM
	DD	$LN40@VuxCreateM
	DD	$LN39@VuxCreateM
	DD	$LN38@VuxCreateM
	DD	$LN37@VuxCreateM
	DD	$LN36@VuxCreateM
	DD	$LN35@VuxCreateM
	DD	$LN34@VuxCreateM
	DD	$LN33@VuxCreateM
	DD	$LN32@VuxCreateM
	DD	$LN31@VuxCreateM
	DD	$LN30@VuxCreateM
	DD	$LN29@VuxCreateM
	DD	$LN28@VuxCreateM
	DD	$LN27@VuxCreateM
	DD	$LN26@VuxCreateM
	DD	$LN25@VuxCreateM
	DD	$LN24@VuxCreateM
	DD	$LN23@VuxCreateM
	DD	$LN22@VuxCreateM
	DD	$LN21@VuxCreateM
	DD	$LN20@VuxCreateM
	DD	$LN19@VuxCreateM
	DD	$LN18@VuxCreateM
	DD	$LN17@VuxCreateM
	DD	$LN16@VuxCreateM
	DD	$LN15@VuxCreateM
	DD	$LN14@VuxCreateM
	DD	$LN13@VuxCreateM
	DD	$LN12@VuxCreateM
	DD	$LN11@VuxCreateM
	DD	$LN10@VuxCreateM
	DD	$LN9@VuxCreateM
	DD	$LN8@VuxCreateM
	DD	$LN7@VuxCreateM
	DD	$LN6@VuxCreateM
	DD	$LN5@VuxCreateM
	DD	$LN4@VuxCreateM
	DD	$LN3@VuxCreateM
	DD	$LN65@VuxCreateM
	DD	$LN65@VuxCreateM
	DD	$LN2@VuxCreateM
	DD	$LN1@VuxCreateM
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$0:
	mov	eax, DWORD PTR $T67[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$1:
	mov	eax, DWORD PTR $T112[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$2:
	mov	eax, DWORD PTR $T111[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$3:
	mov	eax, DWORD PTR $T110[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$4:
	mov	eax, DWORD PTR $T109[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$5:
	mov	eax, DWORD PTR $T108[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$6:
	mov	eax, DWORD PTR $T107[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$7:
	mov	eax, DWORD PTR $T106[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$8:
	mov	eax, DWORD PTR $T105[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$9:
	mov	eax, DWORD PTR $T104[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$10:
	mov	eax, DWORD PTR $T103[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$11:
	mov	eax, DWORD PTR $T102[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$12:
	mov	eax, DWORD PTR $T101[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$13:
	mov	eax, DWORD PTR $T100[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$14:
	mov	eax, DWORD PTR $T99[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$15:
	mov	eax, DWORD PTR $T98[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$16:
	mov	eax, DWORD PTR $T97[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$17:
	mov	eax, DWORD PTR $T96[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$18:
	mov	eax, DWORD PTR $T94[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$19:
	mov	eax, DWORD PTR $T92[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$20:
	mov	eax, DWORD PTR $T90[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$21:
	mov	eax, DWORD PTR $T88[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$22:
	mov	eax, DWORD PTR $T86[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$23:
	mov	eax, DWORD PTR $T84[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$24:
	mov	eax, DWORD PTR $T82[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$25:
	mov	eax, DWORD PTR $T80[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$26:
	mov	eax, DWORD PTR $T78[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$27:
	mov	eax, DWORD PTR $T76[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$28:
	mov	eax, DWORD PTR $T74[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$29:
	mov	eax, DWORD PTR $T72[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$30:
	mov	eax, DWORD PTR $T70[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$31:
	mov	eax, DWORD PTR $T68[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$32:
	mov	eax, DWORD PTR $T66[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$33:
	mov	eax, DWORD PTR $T81[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$34:
	mov	eax, DWORD PTR $T95[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$35:
	mov	eax, DWORD PTR $T73[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$36:
	mov	eax, DWORD PTR $T93[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$37:
	mov	eax, DWORD PTR $T79[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$38:
	mov	eax, DWORD PTR $T91[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$39:
	mov	eax, DWORD PTR $T69[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$40:
	mov	eax, DWORD PTR $T89[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$41:
	mov	eax, DWORD PTR $T77[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$42:
	mov	eax, DWORD PTR $T87[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$43:
	mov	eax, DWORD PTR $T71[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$44:
	mov	eax, DWORD PTR $T85[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$45:
	mov	eax, DWORD PTR $T75[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$46:
	mov	eax, DWORD PTR $T83[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$47:
	mov	eax, DWORD PTR $T129[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$48:
	mov	eax, DWORD PTR $T128[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$49:
	mov	eax, DWORD PTR $T127[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$50:
	mov	eax, DWORD PTR $T126[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$51:
	mov	eax, DWORD PTR $T125[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$52:
	mov	eax, DWORD PTR $T124[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$53:
	mov	eax, DWORD PTR $T123[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$54:
	mov	eax, DWORD PTR $T122[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$55:
	mov	eax, DWORD PTR $T121[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$56:
	mov	eax, DWORD PTR $T120[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$57:
	mov	eax, DWORD PTR $T119[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$58:
	mov	eax, DWORD PTR $T118[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$59:
	mov	eax, DWORD PTR $T117[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$60:
	mov	eax, DWORD PTR $T116[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$61:
	mov	eax, DWORD PTR $T115[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$62:
	mov	eax, DWORD PTR $T114[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z$63:
	mov	eax, DWORD PTR $T113[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-780]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?VuxCreateMessage@@YAPAVVuMessage@@EVVU_ID@@0@Z ENDP	; VuxCreateMessage
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
