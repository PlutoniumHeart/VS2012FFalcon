; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\voicecomunication\Voice.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?LocaldwGroup@@3KA				; LocaldwGroup
PUBLIC	?LocaldwTarget@@3KA				; LocaldwTarget
PUBLIC	?g_pDPClient@@3PAUIDirectPlay8Client@@A		; g_pDPClient
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?g_pDPServer@@3PAUIDirectPlay8Server@@A		; g_pDPServer
PUBLIC	?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
PUBLIC	?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A	; g_pDeviceAddress
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?g_pHostAddress@@3PAUIDirectPlay8Address@@A	; g_pHostAddress
PUBLIC	?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A	; g_pVoiceClient
PUBLIC	?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A	; g_pVoiceServer
PUBLIC	?g_hLobbyHandle@@3KA				; g_hLobbyHandle
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?g_bLobbyLaunched@@3HA				; g_bLobbyLaunched
PUBLIC	?g_bHost@@3HA					; g_bHost
PUBLIC	?g_bRegister@@3HA				; g_bRegister
PUBLIC	?g_bUnRegister@@3HA				; g_bUnRegister
PUBLIC	?g_wszPath@@3PA_WA				; g_wszPath
PUBLIC	?g_pHostList@@3PAUHOST_NODE@@A			; g_pHostList
PUBLIC	?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A	; g_csHostList
PUBLIC	?g_dpnidLocalPlayer@@3KA			; g_dpnidLocalPlayer
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?g_guidApp@@3U_GUID@@A				; g_guidApp
PUBLIC	?g_bconected@@3_NA				; g_bconected
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?g_afreqarrey@@3Ufreqarrey@@A			; g_afreqarrey
PUBLIC	?g_itransmitfreq@@3HA				; g_itransmitfreq
PUBLIC	?stoppingvoice@@3_NA				; stoppingvoice
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
_BSS	SEGMENT
?LocaldwGroup@@3KA DD 01H DUP (?)			; LocaldwGroup
?LocaldwTarget@@3KA DD 01H DUP (?)			; LocaldwTarget
?g_pDPClient@@3PAUIDirectPlay8Client@@A DD 01H DUP (?)	; g_pDPClient
?g_pDPServer@@3PAUIDirectPlay8Server@@A DD 01H DUP (?)	; g_pDPServer
?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A DD 01H DUP (?) ; g_pLobbyApp
?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A DD 01H DUP (?) ; g_pDeviceAddress
?g_pHostAddress@@3PAUIDirectPlay8Address@@A DD 01H DUP (?) ; g_pHostAddress
?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A DD 01H DUP (?) ; g_pVoiceClient
?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A DD 01H DUP (?) ; g_pVoiceServer
?g_hLobbyHandle@@3KA DD 01H DUP (?)			; g_hLobbyHandle
?g_bLobbyLaunched@@3HA DD 01H DUP (?)			; g_bLobbyLaunched
?g_bHost@@3HA DD 01H DUP (?)				; g_bHost
?g_bRegister@@3HA DD 01H DUP (?)			; g_bRegister
?g_bUnRegister@@3HA DD 01H DUP (?)			; g_bUnRegister
?g_wszPath@@3PA_WA DD 01H DUP (?)			; g_wszPath
?g_pHostList@@3PAUHOST_NODE@@A DD 01H DUP (?)		; g_pHostList
?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?) ; g_csHostList
?g_dpnidLocalPlayer@@3KA DD 01H DUP (?)			; g_dpnidLocalPlayer
?g_bconected@@3_NA DB 01H DUP (?)			; g_bconected
	ALIGN	4

?g_afreqarrey@@3Ufreqarrey@@A DB 01f44H DUP (?)		; g_afreqarrey
?g_itransmitfreq@@3HA DD 01H DUP (?)			; g_itransmitfreq
?stoppingvoice@@3_NA DB 01H DUP (?)			; stoppingvoice
_BSS	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
_DATA	SEGMENT
?g_guidApp@@3U_GUID@@A DD 080e553e6H			; g_guidApp
	DW	0ee58H
	DW	0356fH
	DB	0e3H
	DB	0f5H
	DB	034H
	DB	02bH
	DB	044H
	DB	054H
	DB	077H
	DB	034H
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?GameName@VuGameEntity@@QAEPADXZ		; VuGameEntity::GameName
PUBLIC	?Name@LogBookData@@QAEPADXZ			; LogBookData::Name
PUBLIC	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
PUBLIC	?GetFlyState@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetFlyState
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?DirectPlayMessageHandler@@YGJPAXK0@Z		; DirectPlayMessageHandler
PUBLIC	?LobbyAppMessageHandler@@YGJPAXK0@Z		; LobbyAppMessageHandler
PUBLIC	?DirectVoiceServerMessageHandler@@YGJPAXK0@Z	; DirectVoiceServerMessageHandler
PUBLIC	?DirectVoiceClientMessageHandler@@YGJPAXK0@Z	; DirectVoiceClientMessageHandler
PUBLIC	?IsServiceProviderValid@@YAHPBU_GUID@@@Z	; IsServiceProviderValid
PUBLIC	?StopVoice@@YAXXZ				; StopVoice
PUBLIC	?InitDirectPlay@@YAJXZ				; InitDirectPlay
PUBLIC	?InitDirectPlayVoice@@YAJXZ			; InitDirectPlayVoice
PUBLIC	?CreateDeviceAddress@@YAJXZ			; CreateDeviceAddress
PUBLIC	?CreateHostAddress@@YAJPA_W@Z			; CreateHostAddress
PUBLIC	?HostSession@@YAJXZ				; HostSession
PUBLIC	?EnumDirectPlayHosts@@YAJPAD@Z			; EnumDirectPlayHosts
PUBLIC	?ConnectToSession@@YAJXZ			; ConnectToSession
PUBLIC	?SendDirectPlayMessage@@YAJXZ			; SendDirectPlayMessage
PUBLIC	?Register@@YAJXZ				; Register
PUBLIC	?UnRegister@@YAJXZ				; UnRegister
PUBLIC	?LobbyLaunch@@YAJXZ				; LobbyLaunch
PUBLIC	?TestDirectVoice@@YAJXZ				; TestDirectVoice
PUBLIC	?GetConsoleHwnd@@YAPAUHWND__@@XZ		; GetConsoleHwnd
PUBLIC	?CleanupDirectPlay@@YAXXZ			; CleanupDirectPlay
PUBLIC	?CreateGroup@@YAXK@Z				; CreateGroup
PUBLIC	?SetListenFreqsHost@@YAXKKKK@Z			; SetListenFreqsHost
PUBLIC	?SetListenFreqsClient@@YAXKKK@Z			; SetListenFreqsClient
PUBLIC	?TransmistoFreq@@YAXK@Z				; TransmistoFreq
PUBLIC	?Transmit@@YAXH@Z				; Transmit
PUBLIC	?RefreshVoiceFreqs@@YAXXZ			; RefreshVoiceFreqs
PUBLIC	?startupvoice@@YAXPAD@Z				; startupvoice
PUBLIC	?DirectVoiceSetVolume@@YAXH@Z			; DirectVoiceSetVolume
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?SendFreqid@@YAXKKK@Z				; SendFreqid
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?g_ddwPortclient@@3KA				; g_ddwPortclient
PUBLIC	?g_ddwPorthost@@3KA				; g_ddwPorthost
PUBLIC	??_C@_0DE@NMIOOBFD@Failed?5Creating?5the?5IDirectPlay8@ ; `string'
PUBLIC	??_C@_0EC@PIAPBDAK@Failed?5Creating?5the?5IDirectPlay8@ ; `string'
PUBLIC	??_C@_0CH@GLIGCFBA@Failed?5Initializing?5DirectPlay?3?5@ ; `string'
PUBLIC	??_C@_0CC@BGKNJGNG@Failed?5Initializing?5Lobby?3?5?50x?$CFX@ ; `string'
PUBLIC	??_C@_0CE@LCCEFIMH@Failed?5validating?5CLSID_DP8SP_TC@ ; `string'
PUBLIC	??_C@_0CN@KGOCDNIC@Failed?5Enumerating?5Service?5Provi@ ; `string'
PUBLIC	??_C@_0BC@BKINDBLC@voice?5creategroup?$AA@	; `string'
PUBLIC	??_C@_0BK@OMPPCLKJ@voice?5ENUM_HOSTS_RESPONSE?$AA@ ; `string'
PUBLIC	??_C@_0BA@NPKNBHHE@voice?5SetFreqId?$AA@	; `string'
PUBLIC	??_C@_0BL@GMMLPFJF@voice?5SetClientListenFreqs?$AA@ ; `string'
PUBLIC	??_C@_0BM@JGPCMMDF@voice?5Setg_dpnidLocalPlayer?$AA@ ; `string'
PUBLIC	??_C@_0BE@FCEDKJBG@voice?5CREATE_PLAYER?$AA@	; `string'
PUBLIC	??_C@_0BL@LPMMCDLH@Failed?5GetPeerInfo?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@ ; `string'
PUBLIC	??_C@_0O@CDKFHJAJ@Record?5Start?6?$AA@		; `string'
PUBLIC	??_C@_0N@MOCMKIMM@Record?5Stop?6?$AA@		; `string'
PUBLIC	??_C@_0M@CPAAGGBM@play?5Start?6?$AA@		; `string'
PUBLIC	??_C@_0L@NNCIIFAH@play?5Stop?6?$AA@		; `string'
PUBLIC	??_C@_0CF@INFLBKCP@Failed?5Creating?5Host?5Address?3?5?50@ ; `string'
PUBLIC	??_C@_0CF@NIKPOKML@Failed?5Enumerating?5the?5Hosts?3?5?50@ ; `string'
PUBLIC	??_C@_0DH@MDJKLKEI@Failed?5Creating?5the?5IDirectPlay8@ ; `string'
PUBLIC	??_C@_0CM@ICFPPHIP@Failed?5Setting?5the?5Service?5Provi@ ; `string'
PUBLIC	??_C@_19EBEADLAH@?$AAp?$AAo?$AAr?$AAt?$AA?$AA@	; `string'
PUBLIC	??_C@_0CM@FMEMLKBK@Failed?5Adding?5Hostname?5to?5Host?5p@ ; `string'
PUBLIC	??_C@_1BC@FGKBPBF@?$AAh?$AAo?$AAs?$AAt?$AAn?$AAa?$AAm?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CP@BLLMEPLH@Failed?5Adding?5Hostname?5to?5Host?5A@ ; `string'
PUBLIC	??_C@_0BL@BNIJKMCP@?6Hostign?5a?5Voice?5Session?4?6?$AA@ ; `string'
PUBLIC	??_C@_1O@JKKIHEHH@?$AAF?$AAA?$AAL?$AAC?$AAO?$AAN?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BH@OOAJJOGK@Failed?5Hosting?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@HANNNDDN@Currently?5Hosting?4?4?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@OODMJMFB@Failed?5Connecting?5to?5Host?3?5?50x?$CFx@ ; `string'
PUBLIC	??_C@_0CI@KFIHDEOM@Failed?5Duplicating?5Host?5Address?3@ ; `string'
PUBLIC	??_C@_0BJ@DOENCOEH@?6Please?5Enter?5a?5String?4?6?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_0BF@GGNCMCEJ@Failed?5parsing?5path?4?$AA@	; `string'
PUBLIC	??_C@_0DK@KPJIEDGI@Failed?5Creating?5the?5IDirectPlayV@ ; `string'
PUBLIC	??_C@_0DO@HOFBIGMO@Failed?5Initializing?5the?5IDirectP@ ; `string'
PUBLIC	??_C@_0CE@BJLFPAMK@Failed?5Starting?5the?5Session?3?5?50x@ ; `string'
PUBLIC	??_C@_0CD@BKJPBCJG@Failed?5Testing?5DirectVoice?3?5?50x?$CF@ ; `string'
PUBLIC	??_C@_0DK@IEAEMKFJ@Failed?5Creating?5the?5IDirectPlayV@ ; `string'
PUBLIC	??_C@_0DO@FFMNAPPP@Failed?5Initializing?5the?5IDirectP@ ; `string'
PUBLIC	??_C@_0CK@NJGCLNK@Failed?5DirectVoice?5Client?5Connec@ ; `string'
PUBLIC	??_C@_0CC@MIJOGJNO@Failed?5SetTransmitTargets?3?5?50x?$CFX@ ; `string'
PUBLIC	??_C@_0DI@BCJBPDMC@Failed?5Creating?5the?5IDirectPlayV@ ; `string'
PUBLIC	??_C@_0BP@OOPFCNCA@Failed?5CheckAudioSetup?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_07OHKHACFK@0?40?40?40?$AA@		; `string'
PUBLIC	??_C@_0BL@NHLLOBEI@Failed?5To?5Register?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@JBDEBPN@Failed?5To?5Unregister?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@JJIFDDAH@Failed?5be?5Lobby?5Launched?3?5?50x?$CFX?6@ ; `string'
PUBLIC	??_C@_0CF@LMHKCKAL@Failed?5CreatingDeviceAddress?3?5?50@ ; `string'
PUBLIC	??_C@_0CA@EGJNLANA@Failed?5Enumerating?5Host?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@CLJHJNNM@Failed?5Connect?5to?5Host?3?5?50x?$CFX?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BBMHCBNP@?6Connection?5Successful?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CI@CLKEDLAC@Failed?5Initializing?5DirectVoice?3@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_mbstowcs:PROC
EXTRN	_strtoul:PROC
EXTRN	_ltoa:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_wcscpy:PROC
EXTRN	_wcslen:PROC
EXTRN	_wcsncpy:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	_printf:PROC
EXTRN	_wscanf:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	_F4SoundFXSetDist:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoInitializeEx@8:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z:PROC ; NavigationSystem::GetAirbase
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?DXUtil_ConvertWideStringToGeneric@@YAXPADPB_WH@Z:PROC ; DXUtil_ConvertWideStringToGeneric
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogBook@@3VLogBookData@@A:BYTE			; LogBook
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	_CLSID_DirectPlay8Address:BYTE
EXTRN	_IID_IDirectPlay8Address:BYTE
EXTRN	_CLSID_DirectPlay8Client:BYTE
EXTRN	_CLSID_DirectPlay8Server:BYTE
EXTRN	_IID_IDirectPlay8Client:BYTE
EXTRN	_IID_IDirectPlay8Server:BYTE
EXTRN	_CLSID_DP8SP_TCPIP:BYTE
EXTRN	_CLSID_DirectPlay8LobbiedApplication:BYTE
EXTRN	_IID_IDirectPlay8LobbiedApplication:BYTE
EXTRN	_DSDEVID_DefaultVoicePlayback:BYTE
EXTRN	_DSDEVID_DefaultVoiceCapture:BYTE
EXTRN	_CLSID_DirectPlayVoiceClient:BYTE
EXTRN	_CLSID_DirectPlayVoiceServer:BYTE
EXTRN	_CLSID_DirectPlayVoiceTest:BYTE
EXTRN	_IID_IDirectPlayVoiceClient:BYTE
EXTRN	_IID_IDirectPlayVoiceServer:BYTE
EXTRN	_IID_IDirectPlayVoiceTest:BYTE
EXTRN	_DPVCTGUID_SC03:BYTE
EXTRN	_DPVCTGUID_VR12:BYTE
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_bVoiceCom@@3_NA:BYTE				; g_bVoiceCom
EXTRN	?g_fdwPortclient@@3MA:DWORD			; g_fdwPortclient
EXTRN	?g_fdwPorthost@@3MA:DWORD			; g_fdwPorthost
EXTRN	?g_bLowBwVoice@@3_NA:BYTE			; g_bLowBwVoice
EXTRN	?g_bServer@@3_NA:BYTE				; g_bServer
EXTRN	?mainAppWnd@@3PAUHWND__@@A:DWORD		; mainAppWnd
EXTRN	?g_ipadress@@3PADA:DWORD			; g_ipadress
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?g_ddwPortclient@@3KA DD 01H DUP (?)			; g_ddwPortclient
?g_ddwPorthost@@3KA DD 01H DUP (?)			; g_ddwPorthost
_BSS	ENDS
;	COMDAT ?com1@?1??RefreshVoiceFreqs@@YAXXZ@4HA
_BSS	SEGMENT
?com1@?1??RefreshVoiceFreqs@@YAXXZ@4HA DD 01H DUP (?)	; `RefreshVoiceFreqs'::`2'::com1
_BSS	ENDS
;	COMDAT ?com2@?1??RefreshVoiceFreqs@@YAXXZ@4HA
_BSS	SEGMENT
?com2@?1??RefreshVoiceFreqs@@YAXXZ@4HA DD 01H DUP (?)	; `RefreshVoiceFreqs'::`2'::com2
_BSS	ENDS
;	COMDAT ?team@?1??RefreshVoiceFreqs@@YAXXZ@4HA
_BSS	SEGMENT
?team@?1??RefreshVoiceFreqs@@YAXXZ@4HA DD 01H DUP (?)	; `RefreshVoiceFreqs'::`2'::team
_BSS	ENDS
;	COMDAT ?init@?1??RefreshVoiceFreqs@@YAXXZ@4_NA
_BSS	SEGMENT
?init@?1??RefreshVoiceFreqs@@YAXXZ@4_NA DB 01H DUP (?)	; `RefreshVoiceFreqs'::`2'::init
_BSS	ENDS
;	COMDAT ?gamename@?1??RefreshVoiceFreqs@@YAXXZ@4PADA
_BSS	SEGMENT
?gamename@?1??RefreshVoiceFreqs@@YAXXZ@4PADA DD 01H DUP (?) ; `RefreshVoiceFreqs'::`2'::gamename
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CLKEDLAC@Failed?5Initializing?5DirectVoice?3@
CONST	SEGMENT
??_C@_0CI@CLKEDLAC@Failed?5Initializing?5DirectVoice?3@ DB 'Failed Initia'
	DB	'lizing DirectVoice:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BBMHCBNP@?6Connection?5Successful?4?6?$AA@
CONST	SEGMENT
??_C@_0BJ@BBMHCBNP@?6Connection?5Successful?4?6?$AA@ DB 0aH, 'Connection '
	DB	'Successful.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CLJHJNNM@Failed?5Connect?5to?5Host?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BP@CLJHJNNM@Failed?5Connect?5to?5Host?3?5?50x?$CFX?6?$AA@ DB 'Fail'
	DB	'ed Connect to Host:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGJNLANA@Failed?5Enumerating?5Host?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0CA@EGJNLANA@Failed?5Enumerating?5Host?3?5?50x?$CFX?6?$AA@ DB 'Fail'
	DB	'ed Enumerating Host:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LMHKCKAL@Failed?5CreatingDeviceAddress?3?5?50@
CONST	SEGMENT
??_C@_0CF@LMHKCKAL@Failed?5CreatingDeviceAddress?3?5?50@ DB 'Failed Creat'
	DB	'ingDeviceAddress:  0x%X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JJIFDDAH@Failed?5be?5Lobby?5Launched?3?5?50x?$CFX?6@
CONST	SEGMENT
??_C@_0CB@JJIFDDAH@Failed?5be?5Lobby?5Launched?3?5?50x?$CFX?6@ DB 'Failed'
	DB	' be Lobby Launched:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JBDEBPN@Failed?5To?5Unregister?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BN@JBDEBPN@Failed?5To?5Unregister?3?5?50x?$CFX?6?$AA@ DB 'Failed T'
	DB	'o Unregister:  0x%X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NHLLOBEI@Failed?5To?5Register?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BL@NHLLOBEI@Failed?5To?5Register?3?5?50x?$CFX?6?$AA@ DB 'Failed To'
	DB	' Register:  0x%X', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKHACFK@0?40?40?40?$AA@
CONST	SEGMENT
??_C@_07OHKHACFK@0?40?40?40?$AA@ DB '0.0.0.0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OOPFCNCA@Failed?5CheckAudioSetup?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BP@OOPFCNCA@Failed?5CheckAudioSetup?3?5?50x?$CFX?6?$AA@ DB 'Failed'
	DB	' CheckAudioSetup:  0x%X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@BCJBPDMC@Failed?5Creating?5the?5IDirectPlayV@
CONST	SEGMENT
??_C@_0DI@BCJBPDMC@Failed?5Creating?5the?5IDirectPlayV@ DB 'Failed Creati'
	DB	'ng the IDirectPlayVoiceTest Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MIJOGJNO@Failed?5SetTransmitTargets?3?5?50x?$CFX@
CONST	SEGMENT
??_C@_0CC@MIJOGJNO@Failed?5SetTransmitTargets?3?5?50x?$CFX@ DB 'Failed Se'
	DB	'tTransmitTargets:  0x%X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NJGCLNK@Failed?5DirectVoice?5Client?5Connec@
CONST	SEGMENT
??_C@_0CK@NJGCLNK@Failed?5DirectVoice?5Client?5Connec@ DB 'Failed DirectV'
	DB	'oice Client Connect:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FFMNAPPP@Failed?5Initializing?5the?5IDirectP@
CONST	SEGMENT
??_C@_0DO@FFMNAPPP@Failed?5Initializing?5the?5IDirectP@ DB 'Failed Initia'
	DB	'lizing the IDirectPlayVoiceClient Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IEAEMKFJ@Failed?5Creating?5the?5IDirectPlayV@
CONST	SEGMENT
??_C@_0DK@IEAEMKFJ@Failed?5Creating?5the?5IDirectPlayV@ DB 'Failed Creati'
	DB	'ng the IDirectPlayVoiceClient Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BKJPBCJG@Failed?5Testing?5DirectVoice?3?5?50x?$CF@
CONST	SEGMENT
??_C@_0CD@BKJPBCJG@Failed?5Testing?5DirectVoice?3?5?50x?$CF@ DB 'Failed T'
	DB	'esting DirectVoice:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BJLFPAMK@Failed?5Starting?5the?5Session?3?5?50x@
CONST	SEGMENT
??_C@_0CE@BJLFPAMK@Failed?5Starting?5the?5Session?3?5?50x@ DB 'Failed Sta'
	DB	'rting the Session:  0x%X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HOFBIGMO@Failed?5Initializing?5the?5IDirectP@
CONST	SEGMENT
??_C@_0DO@HOFBIGMO@Failed?5Initializing?5the?5IDirectP@ DB 'Failed Initia'
	DB	'lizing the IDirectPlayVoiceServer Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@KPJIEDGI@Failed?5Creating?5the?5IDirectPlayV@
CONST	SEGMENT
??_C@_0DK@KPJIEDGI@Failed?5Creating?5the?5IDirectPlayV@ DB 'Failed Creati'
	DB	'ng the IDirectPlayVoiceServer Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GGNCMCEJ@Failed?5parsing?5path?4?$AA@
CONST	SEGMENT
??_C@_0BF@GGNCMCEJ@Failed?5parsing?5path?4?$AA@ DB 'Failed parsing path.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DOENCOEH@?6Please?5Enter?5a?5String?4?6?$AA@
CONST	SEGMENT
??_C@_0BJ@DOENCOEH@?6Please?5Enter?5a?5String?4?6?$AA@ DB 0aH, 'Please En'
	DB	'ter a String.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KFIHDEOM@Failed?5Duplicating?5Host?5Address?3@
CONST	SEGMENT
??_C@_0CI@KFIHDEOM@Failed?5Duplicating?5Host?5Address?3@ DB 'Failed Dupli'
	DB	'cating Host Address:  0x%x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OODMJMFB@Failed?5Connecting?5to?5Host?3?5?50x?$CFx@
CONST	SEGMENT
??_C@_0CC@OODMJMFB@Failed?5Connecting?5to?5Host?3?5?50x?$CFx@ DB 'Failed '
	DB	'Connecting to Host:  0x%x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HANNNDDN@Currently?5Hosting?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BG@HANNNDDN@Currently?5Hosting?4?4?4?6?$AA@ DB 'Currently Hosting.'
	DB	'..', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OOAJJOGK@Failed?5Hosting?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BH@OOAJJOGK@Failed?5Hosting?3?5?50x?$CFX?6?$AA@ DB 'Failed Hosting'
	DB	':  0x%X', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JKKIHEHH@?$AAF?$AAA?$AAL?$AAC?$AAO?$AAN?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JKKIHEHH@?$AAF?$AAA?$AAL?$AAC?$AAO?$AAN?$AA?$AA@ DB 'F', 00H, 'A'
	DB	00H, 'L', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BNIJKMCP@?6Hostign?5a?5Voice?5Session?4?6?$AA@
CONST	SEGMENT
??_C@_0BL@BNIJKMCP@?6Hostign?5a?5Voice?5Session?4?6?$AA@ DB 0aH, 'Hostign'
	DB	' a Voice Session.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BLLMEPLH@Failed?5Adding?5Hostname?5to?5Host?5A@
CONST	SEGMENT
??_C@_0CP@BLLMEPLH@Failed?5Adding?5Hostname?5to?5Host?5A@ DB 'Failed Addi'
	DB	'ng Hostname to Host Address:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@FGKBPBF@?$AAh?$AAo?$AAs?$AAt?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@FGKBPBF@?$AAh?$AAo?$AAs?$AAt?$AAn?$AAa?$AAm?$AAe?$AA?$AA@ DB 'h'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, 'n', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FMEMLKBK@Failed?5Adding?5Hostname?5to?5Host?5p@
CONST	SEGMENT
??_C@_0CM@FMEMLKBK@Failed?5Adding?5Hostname?5to?5Host?5p@ DB 'Failed Addi'
	DB	'ng Hostname to Host port:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19EBEADLAH@?$AAp?$AAo?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19EBEADLAH@?$AAp?$AAo?$AAr?$AAt?$AA?$AA@ DB 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ICFPPHIP@Failed?5Setting?5the?5Service?5Provi@
CONST	SEGMENT
??_C@_0CM@ICFPPHIP@Failed?5Setting?5the?5Service?5Provi@ DB 'Failed Setti'
	DB	'ng the Service Provider:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MDJKLKEI@Failed?5Creating?5the?5IDirectPlay8@
CONST	SEGMENT
??_C@_0DH@MDJKLKEI@Failed?5Creating?5the?5IDirectPlay8@ DB 'Failed Creati'
	DB	'ng the IDirectPlay8Address Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NIKPOKML@Failed?5Enumerating?5the?5Hosts?3?5?50@
CONST	SEGMENT
??_C@_0CF@NIKPOKML@Failed?5Enumerating?5the?5Hosts?3?5?50@ DB 'Failed Enu'
	DB	'merating the Hosts:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@INFLBKCP@Failed?5Creating?5Host?5Address?3?5?50@
CONST	SEGMENT
??_C@_0CF@INFLBKCP@Failed?5Creating?5Host?5Address?3?5?50@ DB 'Failed Cre'
	DB	'ating Host Address:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNCIIFAH@play?5Stop?6?$AA@
CONST	SEGMENT
??_C@_0L@NNCIIFAH@play?5Stop?6?$AA@ DB 'play Stop', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPAAGGBM@play?5Start?6?$AA@
CONST	SEGMENT
??_C@_0M@CPAAGGBM@play?5Start?6?$AA@ DB 'play Start', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOCMKIMM@Record?5Stop?6?$AA@
CONST	SEGMENT
??_C@_0N@MOCMKIMM@Record?5Stop?6?$AA@ DB 'Record Stop', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CDKFHJAJ@Record?5Start?6?$AA@
CONST	SEGMENT
??_C@_0O@CDKFHJAJ@Record?5Start?6?$AA@ DB 'Record Start', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@
CONST	SEGMENT
??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@ DB 'Failed S'
	DB	'ending Data:  0x%x', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LPMMCDLH@Failed?5GetPeerInfo?3?5?50x?$CFX?6?$AA@
CONST	SEGMENT
??_C@_0BL@LPMMCDLH@Failed?5GetPeerInfo?3?5?50x?$CFX?6?$AA@ DB 'Failed Get'
	DB	'PeerInfo:  0x%X', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCEDKJBG@voice?5CREATE_PLAYER?$AA@
CONST	SEGMENT
??_C@_0BE@FCEDKJBG@voice?5CREATE_PLAYER?$AA@ DB 'voice CREATE_PLAYER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JGPCMMDF@voice?5Setg_dpnidLocalPlayer?$AA@
CONST	SEGMENT
??_C@_0BM@JGPCMMDF@voice?5Setg_dpnidLocalPlayer?$AA@ DB 'voice Setg_dpnid'
	DB	'LocalPlayer', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GMMLPFJF@voice?5SetClientListenFreqs?$AA@
CONST	SEGMENT
??_C@_0BL@GMMLPFJF@voice?5SetClientListenFreqs?$AA@ DB 'voice SetClientLi'
	DB	'stenFreqs', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NPKNBHHE@voice?5SetFreqId?$AA@
CONST	SEGMENT
??_C@_0BA@NPKNBHHE@voice?5SetFreqId?$AA@ DB 'voice SetFreqId', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OMPPCLKJ@voice?5ENUM_HOSTS_RESPONSE?$AA@
CONST	SEGMENT
??_C@_0BK@OMPPCLKJ@voice?5ENUM_HOSTS_RESPONSE?$AA@ DB 'voice ENUM_HOSTS_R'
	DB	'ESPONSE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKINDBLC@voice?5creategroup?$AA@
CONST	SEGMENT
??_C@_0BC@BKINDBLC@voice?5creategroup?$AA@ DB 'voice creategroup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KGOCDNIC@Failed?5Enumerating?5Service?5Provi@
CONST	SEGMENT
??_C@_0CN@KGOCDNIC@Failed?5Enumerating?5Service?5Provi@ DB 'Failed Enumer'
	DB	'ating Service Providers:  0x%x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LCCEFIMH@Failed?5validating?5CLSID_DP8SP_TC@
CONST	SEGMENT
??_C@_0CE@LCCEFIMH@Failed?5validating?5CLSID_DP8SP_TC@ DB 'Failed validat'
	DB	'ing CLSID_DP8SP_TCPIP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BGKNJGNG@Failed?5Initializing?5Lobby?3?5?50x?$CFX@
CONST	SEGMENT
??_C@_0CC@BGKNJGNG@Failed?5Initializing?5Lobby?3?5?50x?$CFX@ DB 'Failed I'
	DB	'nitializing Lobby:  0x%X', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GLIGCFBA@Failed?5Initializing?5DirectPlay?3?5@
CONST	SEGMENT
??_C@_0CH@GLIGCFBA@Failed?5Initializing?5DirectPlay?3?5@ DB 'Failed Initi'
	DB	'alizing DirectPlay:  0x%X', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@PIAPBDAK@Failed?5Creating?5the?5IDirectPlay8@
CONST	SEGMENT
??_C@_0EC@PIAPBDAK@Failed?5Creating?5the?5IDirectPlay8@ DB 'Failed Creati'
	DB	'ng the IDirectPlay8LobbiedApplication Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NMIOOBFD@Failed?5Creating?5the?5IDirectPlay8@
CONST	SEGMENT
??_C@_0DE@NMIOOBFD@Failed?5Creating?5the?5IDirectPlay8@ DB 'Failed Creati'
	DB	'ng the IDirectPlay8Peer Object:  0x%X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_ddwPortclient$initializer$ DD FLAT:??__Eg_ddwPortclient@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_ddwPorthost$initializer$ DD FLAT:??__Eg_ddwPorthost@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
;	COMDAT ??__Eg_ddwPorthost@@YAXXZ
text$yc	SEGMENT
tv71 = -16						; size = 8
tv69 = -8						; size = 4
tv66 = -2						; size = 2
??__Eg_ddwPorthost@@YAXXZ PROC				; `dynamic initializer for 'g_ddwPorthost'', COMDAT

; 90   : DWORD g_ddwPorthost = (DWORD)g_fdwPorthost;

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	fld	DWORD PTR ?g_fdwPorthost@@3MA		; g_fdwPorthost
	fnstcw	WORD PTR tv66[ebp]
	movzx	eax, WORD PTR tv66[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv69[ebp], eax
	fldcw	WORD PTR tv69[ebp]
	fistp	QWORD PTR tv71[ebp]
	fldcw	WORD PTR tv66[ebp]
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR ?g_ddwPorthost@@3KA, eax	; g_ddwPorthost
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_ddwPorthost@@YAXXZ ENDP				; `dynamic initializer for 'g_ddwPorthost''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
;	COMDAT ??__Eg_ddwPortclient@@YAXXZ
text$yc	SEGMENT
tv71 = -16						; size = 8
tv69 = -8						; size = 4
tv66 = -2						; size = 2
??__Eg_ddwPortclient@@YAXXZ PROC			; `dynamic initializer for 'g_ddwPortclient'', COMDAT

; 89   : DWORD g_ddwPortclient = (DWORD)g_fdwPortclient;

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	fld	DWORD PTR ?g_fdwPortclient@@3MA		; g_fdwPortclient
	fnstcw	WORD PTR tv66[ebp]
	movzx	eax, WORD PTR tv66[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv69[ebp], eax
	fldcw	WORD PTR tv69[ebp]
	fistp	QWORD PTR tv71[ebp]
	fldcw	WORD PTR tv66[ebp]
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR ?g_ddwPortclient@@3KA, eax	; g_ddwPortclient
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_ddwPortclient@@YAXXZ ENDP			; `dynamic initializer for 'g_ddwPortclient''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_dpnBuffer$ = -32					; size = 8
_flags$ = -24						; size = 4
_hr$ = -20						; size = 4
_comData$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_dpnidplayer$ = 8					; size = 4
_dpnidgroup$ = 12					; size = 4
_freq$ = 16						; size = 4
?SendFreqid@@YAXKKK@Z PROC				; SendFreqid

; 2219 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2220 :     HRESULT         hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2221 :     DPN_BUFFER_DESC dpnBuffer;
; 2222 :     COM_MESSAGE_SetFreqId  comData;
; 2223 : 	DWORD flags;
; 2224 : 
; 2225 : 
; 2226 : // lets find the freqs
; 2227 : 	comData.dwType =  GAME_MSGID_SetFreqId;

	mov	DWORD PTR _comData$[ebp], 2

; 2228 : 	comData.Freq[0] = dpnidgroup;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _dpnidgroup$[ebp]
	mov	DWORD PTR _comData$[ebp+eax+4], ecx

; 2229 : 	comData.Freq[1] = freq;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _freq$[ebp]
	mov	DWORD PTR _comData$[ebp+edx+4], eax

; 2230 : 
; 2231 :     dpnBuffer.pBufferData = (BYTE*) &comData;

	lea	ecx, DWORD PTR _comData$[ebp]
	mov	DWORD PTR _dpnBuffer$[ebp+4], ecx

; 2232 :     dpnBuffer.dwBufferSize = sizeof (COM_MESSAGE_SetFreqId);

	mov	DWORD PTR _dpnBuffer$[ebp], 12		; 0000000cH

; 2233 : 	if (!dpnidplayer && g_bHost) 

	cmp	DWORD PTR _dpnidplayer$[ebp], 0
	jne	SHORT $LN3@SendFreqid
	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN3@SendFreqid

; 2234 : 	{
; 2235 : 		dpnidplayer =DPNID_ALL_PLAYERS_GROUP;

	mov	DWORD PTR _dpnidplayer$[ebp], 0

; 2236 : 		flags = DPNSEND_SYNC |DPNSEND_GUARANTEED;

	mov	DWORD PTR _flags$[ebp], -2147483640	; 80000008H
	jmp	SHORT $LN2@SendFreqid
$LN3@SendFreqid:

; 2237 : 	}
; 2238 : 	else flags = DPNSEND_SYNC |DPNSEND_GUARANTEED|DPNSEND_NOLOOPBACK;

	mov	DWORD PTR _flags$[ebp], -2147483608	; 80000028H
$LN2@SendFreqid:

; 2239 : 	
; 2240 :     if( FAILED( hr = g_pDPServer->SendTo( dpnidplayer,  // dpnid
; 2241 : 									&dpnBuffer,             // pBufferDesc
; 2242 :                                     1,                      // cBufferDesc
; 2243 :                                     0,                      // dwTimeOut
; 2244 :                                     NULL,                   // pvAsyncContext
; 2245 :                                     NULL,                   // pvAsyncHandle
; 2246 :                                     flags ) ) )   // dwFlags

	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _dpnBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dpnidplayer$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@SendFreqid

; 2247 :     {
; 2248 :         printf("Failed Sending Data:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@
	call	_printf
	add	esp, 8
$LN4@SendFreqid:

; 2249 :     }
; 2250 :     return ;
; 2251 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SendFreqid@@YAXKKK@Z ENDP				; SendFreqid
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_cf$1 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_Channel$ = 8						; size = 4
?DirectVoiceSetVolume@@YAXH@Z PROC			; DirectVoiceSetVolume

; 614  : { // MLR this is a test to see if we can manage the volume of Voice Comms.

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 615  : 	if(g_pVoiceClient)

	cmp	DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A, 0 ; g_pVoiceClient
	je	SHORT $LN2@DirectVoic

; 616  : 	{
; 617  : 		DVCLIENTCONFIG cf;
; 618  : 		g_pVoiceClient->GetClientConfig(&cf);

	lea	eax, DWORD PTR _cf$1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	eax
	mov	ecx, DWORD PTR [edx+28]
	call	ecx

; 619  : 		cf.lPlaybackVolume=PlayerOptions.GroupVol[COM2_SOUND_GROUP]; // how about that MLR 2003-10-20

	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A[edx+120]
	mov	DWORD PTR _cf$1[ebp+12], eax

; 620  : 		g_pVoiceClient->SetClientConfig(&cf);

	lea	ecx, DWORD PTR _cf$1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN2@DirectVoic:

; 621  : 	}
; 622  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DirectVoiceSetVolume@@YAXH@Z ENDP			; DirectVoiceSetVolume
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_pdpPlayerInfo$1 = -336					; size = 24
_hAsync$2 = -312					; size = 4
_iUserChoice$ = -308					; size = 4
_hr$ = -304						; size = 4
_hostIp$ = -300						; size = 256
_namo$3 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_ip$ = 8						; size = 4
?startupvoice@@YAXPAD@Z PROC				; startupvoice

; 1404 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1405 : 	if (g_bconected) return;

	movzx	eax, BYTE PTR ?g_bconected@@3_NA	; g_bconected
	test	eax, eax
	je	SHORT $LN33@startupvoi
	jmp	$LN34@startupvoi
$LN33@startupvoi:

; 1406 :     HRESULT                     hr;
; 1407 :     int                         iUserChoice;
; 1408 : 	char hostIp[256];
; 1409 : 	strcpy(hostIp,ip);

	mov	ecx, DWORD PTR _ip$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hostIp$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 1410 : 	if (!strcmp(hostIp, "0.0.0.0" )) g_bHost = TRUE;

	push	OFFSET ??_C@_07OHKHACFK@0?40?40?40?$AA@
	lea	eax, DWORD PTR _hostIp$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN32@startupvoi
	mov	DWORD PTR ?g_bHost@@3HA, 1		; g_bHost
	jmp	SHORT $LN31@startupvoi
$LN32@startupvoi:

; 1411 : 	else g_bHost = FALSE;

	mov	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
$LN31@startupvoi:

; 1412 :     // Init COM so we can use CoCreateInstance
; 1413 :     CoInitializeEx(NULL, COINIT_MULTITHREADED);

	push	0
	push	0
	call	DWORD PTR __imp__CoInitializeEx@8

; 1414 :     InitializeCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__InitializeCriticalSection@4

; 1415 : 
; 1416 :     // Init the DirectPlay system
; 1417 :     if( FAILED( hr = InitDirectPlay() ) )

	call	?InitDirectPlay@@YAJXZ			; InitDirectPlay
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN30@startupvoi

; 1418 :     {
; 1419 :         MonoPrint("Failed Initializing DirectPlay:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CH@GLIGCFBA@Failed?5Initializing?5DirectPlay?3?5@
	call	_MonoPrint
	add	esp, 8

; 1420 :         goto LCleanup;

	jmp	$LCleanup$36
	jmp	$LCleanup$36
$LN30@startupvoi:

; 1421 :     }
; 1422 : 
; 1423 :     if( g_bRegister )

	cmp	DWORD PTR ?g_bRegister@@3HA, 0		; g_bRegister
	je	SHORT $LN28@startupvoi

; 1424 :     {
; 1425 :         if( FAILED( hr = Register() ) )

	call	?Register@@YAJXZ			; Register
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN27@startupvoi

; 1426 :         {
; 1427 :             MonoPrint("Failed To Register:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0BL@NHLLOBEI@Failed?5To?5Register?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN27@startupvoi:

; 1428 :         }
; 1429 :         goto LCleanup;

	jmp	$LCleanup$36
	jmp	$LCleanup$36
	jmp	SHORT $LN25@startupvoi
$LN28@startupvoi:

; 1430 :     }
; 1431 :     else if( g_bUnRegister )

	cmp	DWORD PTR ?g_bUnRegister@@3HA, 0	; g_bUnRegister
	je	SHORT $LN25@startupvoi

; 1432 :     {
; 1433 :         if( FAILED( hr = UnRegister() ) )

	call	?UnRegister@@YAJXZ			; UnRegister
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN23@startupvoi

; 1434 :         {
; 1435 :             MonoPrint("Failed To Unregister:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@JBDEBPN@Failed?5To?5Unregister?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN23@startupvoi:

; 1436 :         }
; 1437 :         goto LCleanup;

	jmp	$LCleanup$36
	jmp	$LCleanup$36
$LN25@startupvoi:

; 1438 :     }
; 1439 : 
; 1440 :     // See if we were lobby launched or not
; 1441 :     if( g_bLobbyLaunched )

	cmp	DWORD PTR ?g_bLobbyLaunched@@3HA, 0	; g_bLobbyLaunched
	je	SHORT $LN21@startupvoi

; 1442 :     {
; 1443 :         if( FAILED( hr = LobbyLaunch() ) )

	call	?LobbyLaunch@@YAJXZ			; LobbyLaunch
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN20@startupvoi

; 1444 :         {
; 1445 :             MonoPrint("Failed be Lobby Launched:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@JJIFDDAH@Failed?5be?5Lobby?5Launched?3?5?50x?$CFX?6@
	call	_MonoPrint
	add	esp, 8

; 1446 :             goto LCleanup;

	jmp	$LCleanup$36
	jmp	$LCleanup$36
$LN20@startupvoi:

; 1447 :         }
; 1448 :     }
; 1449 :     else

	jmp	$LN18@startupvoi
$LN21@startupvoi:

; 1450 :     {
; 1451 :         // Get the necessary user input on whether they are hosting or connecting
; 1452 : 
; 1453 : 		if (!strcmp(hostIp, "0.0.0.0" )) iUserChoice = USER_HOST;

	push	OFFSET ??_C@_07OHKHACFK@0?40?40?40?$AA@
	lea	edx, DWORD PTR _hostIp$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@startupvoi
	mov	DWORD PTR _iUserChoice$[ebp], 1
	jmp	SHORT $LN16@startupvoi
$LN17@startupvoi:

; 1454 : 		else iUserChoice = USER_CONNECT;

	mov	DWORD PTR _iUserChoice$[ebp], 2
$LN16@startupvoi:

; 1455 : 
; 1456 :         if( FAILED( hr = CreateDeviceAddress() ) )

	call	?CreateDeviceAddress@@YAJXZ		; CreateDeviceAddress
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@startupvoi

; 1457 :         {
; 1458 :             MonoPrint("Failed CreatingDeviceAddress:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@LMHKCKAL@Failed?5CreatingDeviceAddress?3?5?50@
	call	_MonoPrint
	add	esp, 8

; 1459 :             goto LCleanup;

	jmp	$LCleanup$36
	jmp	$LCleanup$36
$LN15@startupvoi:

; 1460 :         }
; 1461 : 
; 1462 :         if( iUserChoice == USER_HOST )

	cmp	DWORD PTR _iUserChoice$[ebp], 1
	jne	SHORT $LN13@startupvoi

; 1463 :         {
; 1464 :             g_bHost = TRUE;

	mov	DWORD PTR ?g_bHost@@3HA, 1		; g_bHost

; 1465 :             if( FAILED( hr = HostSession() ) )

	call	?HostSession@@YAJXZ			; HostSession
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@startupvoi

; 1466 :             {
; 1467 :                 MonoPrint("Failed Hosting:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@OOAJJOGK@Failed?5Hosting?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 1468 :                 goto LCleanup;

	jmp	$LCleanup$36
	jmp	$LCleanup$36
	jmp	SHORT $LN10@startupvoi
$LN12@startupvoi:

; 1469 :             }
; 1470 : 			else 	g_bconected = true;

	mov	BYTE PTR ?g_bconected@@3_NA, 1		; g_bconected
$LN10@startupvoi:

; 1471 :         }
; 1472 :         else

	jmp	$LN18@startupvoi
$LN13@startupvoi:

; 1473 :         {
; 1474 : 			// set name
; 1475 : 			if (g_pDPClient)

	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	je	SHORT $LN8@startupvoi

; 1476 : 			{
; 1477 : 			DPN_PLAYER_INFO pdpPlayerInfo   ;
; 1478 : 			WCHAR namo[20];
; 1479 : 
; 1480 : 			mbstowcs(&namo[0], LogBook.Name(), 20);

	push	20					; 00000014H
	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Name@LogBookData@@QAEPADXZ		; LogBookData::Name
	push	eax
	mov	edx, 2
	imul	edx, 0
	lea	eax, DWORD PTR _namo$3[ebp+edx]
	push	eax
	call	_mbstowcs
	add	esp, 12					; 0000000cH

; 1481 : 
; 1482 : 			ZeroMemory(&pdpPlayerInfo,sizeof(DPN_PLAYER_INFO));

	push	24					; 00000018H
	push	0
	lea	ecx, DWORD PTR _pdpPlayerInfo$1[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1483 : 			pdpPlayerInfo.pwszName = namo;

	lea	edx, DWORD PTR _namo$3[ebp]
	mov	DWORD PTR _pdpPlayerInfo$1[ebp+8], edx

; 1484 : 			pdpPlayerInfo.dwSize = sizeof(DPN_PLAYER_INFO);

	mov	DWORD PTR _pdpPlayerInfo$1[ebp], 24	; 00000018H

; 1485 : 			pdpPlayerInfo.dwInfoFlags = DPNINFO_NAME;

	mov	DWORD PTR _pdpPlayerInfo$1[ebp+4], 1

; 1486 : 			DPNHANDLE hAsync;
; 1487 : 			g_pDPClient->SetClientInfo(&pdpPlayerInfo,NULL,&hAsync,0);

	push	0
	lea	eax, DWORD PTR _hAsync$2[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _pdpPlayerInfo$1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN8@startupvoi:

; 1488 : 			}
; 1489 : 
; 1490 : 
; 1491 :             g_bHost = FALSE;

	mov	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost

; 1492 :             if( FAILED( hr = EnumDirectPlayHosts(hostIp) ) )

	lea	eax, DWORD PTR _hostIp$[ebp]
	push	eax
	call	?EnumDirectPlayHosts@@YAJPAD@Z		; EnumDirectPlayHosts
	add	esp, 4
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@startupvoi

; 1493 :             {
; 1494 :                 MonoPrint("Failed Enumerating Host:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CA@EGJNLANA@Failed?5Enumerating?5Host?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 1495 :                 goto LCleanup;

	jmp	SHORT $LCleanup$36
	jmp	SHORT $LCleanup$36
$LN7@startupvoi:

; 1496 :             }
; 1497 : 
; 1498 :             if( FAILED( hr = ConnectToSession() ) )

	call	?ConnectToSession@@YAJXZ		; ConnectToSession
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@startupvoi

; 1499 :             {
; 1500 :                 MonoPrint("Failed Connect to Host:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0BP@CLJHJNNM@Failed?5Connect?5to?5Host?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 1501 :                 goto LCleanup;

	jmp	SHORT $LCleanup$36
	jmp	SHORT $LCleanup$36

; 1502 :             }
; 1503 :             else

	jmp	SHORT $LN18@startupvoi
$LN5@startupvoi:

; 1504 :             {
; 1505 : 				g_bconected = true;

	mov	BYTE PTR ?g_bconected@@3_NA, 1		; g_bconected

; 1506 :                 MonoPrint("\nConnection Successful.\n");

	push	OFFSET ??_C@_0BJ@BBMHCBNP@?6Connection?5Successful?4?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN18@startupvoi:

; 1507 :             }
; 1508 :         }
; 1509 :     }
; 1510 : 
; 1511 :     // Init DirectVoice
; 1512 :     if( FAILED( hr = InitDirectPlayVoice() ) )

	call	?InitDirectPlayVoice@@YAJXZ		; InitDirectPlayVoice
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@startupvoi

; 1513 :     {
; 1514 :         MonoPrint("Failed Initializing DirectVoice:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CI@CLKEDLAC@Failed?5Initializing?5DirectVoice?3@
	call	_MonoPrint
	add	esp, 8

; 1515 :         goto LCleanup;

	jmp	SHORT $LCleanup$36
	jmp	SHORT $LCleanup$36
$LN2@startupvoi:

; 1516 :     }
; 1517 : 
; 1518 :  ////////////////////////
; 1519 : return ;

	jmp	SHORT $LN34@startupvoi
$LCleanup$36:

; 1520 : 
; 1521 : 
; 1522 : // no cleaning up for now ;(
; 1523 : LCleanup:
; 1524 :     CleanupDirectPlay();

	call	?CleanupDirectPlay@@YAXXZ		; CleanupDirectPlay

; 1525 : 
; 1526 :     // ShutDown COM
; 1527 :     CoUninitialize();

	call	DWORD PTR __imp__CoUninitialize@0
$LN34@startupvoi:

; 1528 : 
; 1529 :     return ;
; 1530 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?startupvoice@@YAXPAD@Z ENDP				; startupvoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
$T1 = -296						; size = 8
$T2 = -288						; size = 8
$T3 = -280						; size = 8
$T4 = -272						; size = 8
$T5 = -264						; size = 8
$T6 = -256						; size = 8
$T7 = -248						; size = 8
$T8 = -240						; size = 8
$T9 = -232						; size = 8
$T10 = -224						; size = 8
$T11 = -216						; size = 8
$T12 = -208						; size = 8
$T13 = -200						; size = 8
$T14 = -192						; size = 8
$T15 = -184						; size = 8
$T16 = -176						; size = 8
$T17 = -168						; size = 8
$T18 = -160						; size = 8
$T19 = -152						; size = 8
$T20 = -144						; size = 8
$T21 = -136						; size = 8
$T22 = -128						; size = 8
$T23 = -120						; size = 8
$T24 = -112						; size = 8
$T25 = -104						; size = 8
$T26 = -96						; size = 8
$T27 = -88						; size = 8
$T28 = -80						; size = 8
$T29 = -72						; size = 8
$T30 = -64						; size = 8
_retval$ = -56						; size = 4
_ATCId$31 = -52						; size = 8
_ATCId$32 = -44						; size = 8
_guard$ = -36						; size = 4
tv486 = -32						; size = 4
tv223 = -28						; size = 4
_comvuid2$ = -24					; size = 8
_comvuid1$ = -16					; size = 8
_pkg$ = -8						; size = 4
_flt$ = -4						; size = 4
?RefreshVoiceFreqs@@YAXXZ PROC				; RefreshVoiceFreqs

; 1533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H

; 1534 : 	Package pkg;
; 1535 : 	Flight flt;
; 1536 : 	BOOL retval=FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 1537 : 	static int com1 =NULL;
; 1538 : 	static int com2 =NULL;
; 1539 : 	static int team =NULL;
; 1540 : 	static bool init = false;
; 1541 : 	static char* gamename;
; 1542 : 
; 1543 : 
; 1544 : 	if (!VM) return;

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	jne	SHORT $LN69@RefreshVoi
	jmp	$LN70@RefreshVoi
$LN69@RefreshVoi:

; 1545 : 	if(g_bHost && !g_pDPServer)return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN68@RefreshVoi
	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	jne	SHORT $LN68@RefreshVoi
	jmp	$LN70@RefreshVoi
$LN68@RefreshVoi:

; 1546 : 	if(!g_bHost && !g_pDPClient)return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	jne	SHORT $LN67@RefreshVoi
	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	jne	SHORT $LN67@RefreshVoi
	jmp	$LN70@RefreshVoi
$LN67@RefreshVoi:

; 1547 : 	if (!g_bconected) return;

	movzx	eax, BYTE PTR ?g_bconected@@3_NA	; g_bconected
	test	eax, eax
	jne	SHORT $LN66@RefreshVoi
	jmp	$LN70@RefreshVoi
$LN66@RefreshVoi:

; 1548 : 	if (g_bHost && !g_dpnidLocalPlayer) return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN65@RefreshVoi
	cmp	DWORD PTR ?g_dpnidLocalPlayer@@3KA, 0	; g_dpnidLocalPlayer
	jne	SHORT $LN65@RefreshVoi
	jmp	$LN70@RefreshVoi
$LN65@RefreshVoi:

; 1549 : 	if (!g_bHost &&(	g_afreqarrey.Freq[0][0] == 0 ||	g_afreqarrey.Freq[1][0] == 0 ||g_afreqarrey.Freq[2][0] == 0) ) return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	jne	SHORT $LN64@RefreshVoi
	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	imul	edx, 0
	cmp	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[ecx+edx+4], 0
	je	SHORT $LN63@RefreshVoi
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	cmp	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[eax+ecx+4], 0
	je	SHORT $LN63@RefreshVoi
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	cmp	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[edx+eax+4], 0
	jne	SHORT $LN64@RefreshVoi
$LN63@RefreshVoi:
	jmp	$LN70@RefreshVoi
$LN64@RefreshVoi:

; 1550 : 
; 1551 : 	if (!g_afreqarrey.count && !init)

	cmp	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A, 0
	jne	SHORT $LN62@RefreshVoi
	movzx	ecx, BYTE PTR ?init@?1??RefreshVoiceFreqs@@YAXXZ@4_NA
	test	ecx, ecx
	jne	SHORT $LN62@RefreshVoi

; 1552 : 	{
; 1553 : 		SetListenFreqsClient (11,1234,1);

	push	1
	push	1234					; 000004d2H
	push	11					; 0000000bH
	call	?SetListenFreqsClient@@YAXKKK@Z		; SetListenFreqsClient
	add	esp, 12					; 0000000cH

; 1554 : 		init = true;

	mov	BYTE PTR ?init@?1??RefreshVoiceFreqs@@YAXXZ@4_NA, 1
$LN62@RefreshVoi:

; 1555 : 	}
; 1556 : 
; 1557 : 	if (team == FalconLocalSession->GetTeam() && com1 == VM->radiofilter[0] && com2 == VM->radiofilter[1]
; 1558 : 		&& FalconLocalSession->Game() && !strcmp(gamename, FalconLocalSession->Game()->GameName())) return; 

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	cmp	DWORD PTR ?team@?1??RefreshVoiceFreqs@@YAXXZ@4HA, edx
	jne	$LN61@RefreshVoi
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR ?com1@?1??RefreshVoiceFreqs@@YAXXZ@4HA
	cmp	edx, DWORD PTR [ecx+eax+136]
	jne	SHORT $LN61@RefreshVoi
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR ?com2@?1??RefreshVoiceFreqs@@YAXXZ@4HA
	cmp	edx, DWORD PTR [ecx+eax+136]
	jne	SHORT $LN61@RefreshVoi
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	test	eax, eax
	je	SHORT $LN61@RefreshVoi
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	ecx, eax
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	push	eax
	mov	eax, DWORD PTR ?gamename@?1??RefreshVoiceFreqs@@YAXXZ@4PADA
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN61@RefreshVoi
	jmp	$LN70@RefreshVoi
	jmp	$LN60@RefreshVoi
$LN61@RefreshVoi:

; 1559 : 	else if (!FalconLocalSession->Game())return;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	test	eax, eax
	jne	SHORT $LN59@RefreshVoi
	jmp	$LN70@RefreshVoi

; 1560 : 	else 

	jmp	SHORT $LN60@RefreshVoi
$LN59@RefreshVoi:

; 1561 : 	{// something on the radio changed...lets update the groups
; 1562 : 	com1 = VM->radiofilter[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+136]
	mov	DWORD PTR ?com1@?1??RefreshVoiceFreqs@@YAXXZ@4HA, eax

; 1563 : 	com2 = VM->radiofilter[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+136]
	mov	DWORD PTR ?com2@?1??RefreshVoiceFreqs@@YAXXZ@4HA, eax

; 1564 : 	team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	mov	DWORD PTR ?team@?1??RefreshVoiceFreqs@@YAXXZ@4HA, ecx

; 1565 : 	gamename = FalconLocalSession->Game()->GameName();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	ecx, eax
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	mov	DWORD PTR ?gamename@?1??RefreshVoiceFreqs@@YAXXZ@4PADA, eax
$LN60@RefreshVoi:

; 1566 : 	}
; 1567 : 
; 1568 : 	VU_ID comvuid1;

	lea	ecx, DWORD PTR _comvuid1$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1569 : 	VU_ID comvuid2;	

	lea	ecx, DWORD PTR _comvuid2$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1570 : 
; 1571 : 
; 1572 : 	switch(VM->radiofilter[0])

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+edx+136]
	mov	DWORD PTR tv223[ebp], ecx
	mov	edx, DWORD PTR tv223[ebp]
	sub	edx, 1
	mov	DWORD PTR tv223[ebp], edx
	cmp	DWORD PTR tv223[ebp], 14		; 0000000eH
	ja	$LN56@RefreshVoi
	mov	eax, DWORD PTR tv223[ebp]
	jmp	DWORD PTR $LN72@RefreshVoi[eax*4]
$LN55@RefreshVoi:

; 1573 : 	{
; 1574 : 		case rcfFlight1:
; 1575 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID();

	lea	ecx, DWORD PTR $T20[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1576 : 			break;

	jmp	$LN56@RefreshVoi
$LN54@RefreshVoi:

; 1577 : 		case rcfFlight2:
; 1578 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+1;

	lea	edx, DWORD PTR $T28[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1579 : 			break;

	jmp	$LN56@RefreshVoi
$LN53@RefreshVoi:

; 1580 : 		case rcfFlight3:
; 1581 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+2;

	lea	eax, DWORD PTR $T14[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1582 : 			break;

	jmp	$LN56@RefreshVoi
$LN52@RefreshVoi:

; 1583 : 		case rcfFlight4:
; 1584 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+3;

	lea	ecx, DWORD PTR $T26[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1585 : 			break;

	jmp	$LN56@RefreshVoi
$LN51@RefreshVoi:

; 1586 : 		case rcfFlight5:
; 1587 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+4;

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1588 : 			break;

	jmp	$LN56@RefreshVoi
$LN50@RefreshVoi:

; 1589 : 		case rcfPackage1:
; 1590 : 		case rcfFromPackage:
; 1591 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	eax, DWORD PTR $T24[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1592 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN49@RefreshVoi

; 1593 : 				break;

	jmp	$LN56@RefreshVoi
$LN49@RefreshVoi:

; 1594 : 
; 1595 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1596 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN48@RefreshVoi

; 1597 : 				break;

	jmp	$LN56@RefreshVoi
$LN48@RefreshVoi:

; 1598 : 
; 1599 : 			comvuid1.num_=pkg->Id();

	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1600 : 			break;

	jmp	$LN56@RefreshVoi
$LN47@RefreshVoi:

; 1601 : 		case rcfPackage2:
; 1602 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T22[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1603 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN46@RefreshVoi

; 1604 : 				break;

	jmp	$LN56@RefreshVoi
$LN46@RefreshVoi:

; 1605 : 
; 1606 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1607 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN45@RefreshVoi

; 1608 : 				break;

	jmp	$LN56@RefreshVoi
$LN45@RefreshVoi:

; 1609 : 
; 1610 : 			comvuid1.num_=pkg->Id()+1;

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1611 : 			break;

	jmp	$LN56@RefreshVoi
$LN44@RefreshVoi:

; 1612 : 		case rcfPackage3:
; 1613 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T30[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1614 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN43@RefreshVoi

; 1615 : 				break;

	jmp	$LN56@RefreshVoi
$LN43@RefreshVoi:

; 1616 : 
; 1617 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1618 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN42@RefreshVoi

; 1619 : 				break;

	jmp	$LN56@RefreshVoi
$LN42@RefreshVoi:

; 1620 : 
; 1621 : 			comvuid1.num_=pkg->Id()+2;

	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1622 : 			break;

	jmp	$LN56@RefreshVoi
$LN41@RefreshVoi:

; 1623 : 					
; 1624 : 		
; 1625 : 		case rcfPackage4:
; 1626 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T18[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1627 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN40@RefreshVoi

; 1628 : 				break;

	jmp	$LN56@RefreshVoi
$LN40@RefreshVoi:

; 1629 : 
; 1630 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1631 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN39@RefreshVoi

; 1632 : 				break;

	jmp	$LN56@RefreshVoi
$LN39@RefreshVoi:

; 1633 : 
; 1634 : 			comvuid1.num_=pkg->Id()+3;

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1635 : 			break;

	jmp	$LN56@RefreshVoi
$LN38@RefreshVoi:

; 1636 : 					
; 1637 : 		
; 1638 : 		case rcfPackage5:
; 1639 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T16[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1640 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN37@RefreshVoi

; 1641 : 				break;

	jmp	$LN56@RefreshVoi
$LN37@RefreshVoi:

; 1642 : 
; 1643 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1644 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN36@RefreshVoi

; 1645 : 				break;

	jmp	SHORT $LN56@RefreshVoi
$LN36@RefreshVoi:

; 1646 : 
; 1647 : 			comvuid1.num_=pkg->Id()+4;

	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1648 : 			break;

	jmp	SHORT $LN56@RefreshVoi

; 1649 : 		case rcfProx: // 40nm range
; 1650 : 			break;

	jmp	SHORT $LN56@RefreshVoi
$LN34@RefreshVoi:

; 1651 : 		case rcfTeam:
; 1652 : 			comvuid1.num_ = FalconLocalSession->GetTeam()+10;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _comvuid1$[ebp], edx

; 1653 : 			break;

	jmp	SHORT $LN56@RefreshVoi
$LN33@RefreshVoi:

; 1654 : 		case rcfAll:
; 1655 : 			comvuid1.num_ = 1;//guard

	mov	DWORD PTR _comvuid1$[ebp], 1

; 1656 : 			break;

	jmp	SHORT $LN56@RefreshVoi
$LN32@RefreshVoi:

; 1657 : 		case rcfTower:
; 1658 : 			if(gNavigationSys && SimDriver.GetPlayerEntity())

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN56@RefreshVoi
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN56@RefreshVoi

; 1659 : 			{
; 1660 : 				VU_ID	ATCId;

	lea	ecx, DWORD PTR _ATCId$32[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1661 : 				gNavigationSys->GetAirbase(&ATCId);

	lea	eax, DWORD PTR _ATCId$32[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 1662 : 				comvuid1.num_ = ATCId;

	lea	ecx, DWORD PTR _ATCId$32[ebp]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid1$[ebp], eax
$LN56@RefreshVoi:

; 1663 : 			}
; 1664 : 			break;
; 1665 : 	}
; 1666 : 		
; 1667 : 	switch(VM->radiofilter[1])

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+136]
	mov	DWORD PTR tv486[ebp], eax
	mov	ecx, DWORD PTR tv486[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv486[ebp], ecx
	cmp	DWORD PTR tv486[ebp], 14		; 0000000eH
	ja	$LN29@RefreshVoi
	mov	edx, DWORD PTR tv486[ebp]
	jmp	DWORD PTR $LN73@RefreshVoi[edx*4]
$LN28@RefreshVoi:

; 1668 : 	{
; 1669 : 		case rcfFlight1:
; 1670 : 			comvuid2.num_ = FalconLocalSession->GetPlayerFlightID();

	lea	eax, DWORD PTR $T29[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1671 : 			break;

	jmp	$LN29@RefreshVoi
$LN27@RefreshVoi:

; 1672 : 		case rcfFlight2:
; 1673 : 			 comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+1;

	lea	ecx, DWORD PTR $T27[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1674 : 			break;

	jmp	$LN29@RefreshVoi
$LN26@RefreshVoi:

; 1675 : 		case rcfFlight3:
; 1676 : 			 comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+2;

	lea	edx, DWORD PTR $T25[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1677 : 			break;

	jmp	$LN29@RefreshVoi
$LN25@RefreshVoi:

; 1678 : 		case rcfFlight4:
; 1679 : 			 comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+3;

	lea	eax, DWORD PTR $T23[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1680 : 			break;

	jmp	$LN29@RefreshVoi
$LN24@RefreshVoi:

; 1681 : 		case rcfFlight5:
; 1682 : 			 comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+4;

	lea	ecx, DWORD PTR $T21[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1683 : 			break;

	jmp	$LN29@RefreshVoi
$LN23@RefreshVoi:

; 1684 : 		case rcfPackage1:
; 1685 : 		case rcfFromPackage:
; 1686 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T19[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1687 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN22@RefreshVoi

; 1688 : 				break;

	jmp	$LN29@RefreshVoi
$LN22@RefreshVoi:

; 1689 : 
; 1690 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1691 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN21@RefreshVoi

; 1692 : 				break;

	jmp	$LN29@RefreshVoi
$LN21@RefreshVoi:

; 1693 : 			comvuid2.num_=pkg->Id();

	lea	ecx, DWORD PTR $T17[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1694 : 			break;

	jmp	$LN29@RefreshVoi
$LN20@RefreshVoi:

; 1695 : 		case rcfPackage2:
; 1696 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T15[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1697 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN19@RefreshVoi

; 1698 : 				break;

	jmp	$LN29@RefreshVoi
$LN19@RefreshVoi:

; 1699 : 
; 1700 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1701 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN18@RefreshVoi

; 1702 : 				break;

	jmp	$LN29@RefreshVoi
$LN18@RefreshVoi:

; 1703 : 			comvuid2.num_=pkg->Id()+1;

	lea	ecx, DWORD PTR $T13[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1704 : 			break;

	jmp	$LN29@RefreshVoi
$LN17@RefreshVoi:

; 1705 : 		case rcfPackage3:
; 1706 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T11[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1707 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN16@RefreshVoi

; 1708 : 				break;

	jmp	$LN29@RefreshVoi
$LN16@RefreshVoi:

; 1709 : 
; 1710 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1711 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN15@RefreshVoi

; 1712 : 				break;

	jmp	$LN29@RefreshVoi
$LN15@RefreshVoi:

; 1713 : 			comvuid2.num_=pkg->Id()+2;

	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1714 : 			break;

	jmp	$LN29@RefreshVoi
$LN14@RefreshVoi:

; 1715 : 		case rcfPackage4:
; 1716 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1717 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN13@RefreshVoi

; 1718 : 				break;

	jmp	$LN29@RefreshVoi
$LN13@RefreshVoi:

; 1719 : 
; 1720 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1721 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN12@RefreshVoi

; 1722 : 				break;

	jmp	$LN29@RefreshVoi
$LN12@RefreshVoi:

; 1723 : 			comvuid2.num_=pkg->Id()+3;

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1724 : 			break;

	jmp	$LN29@RefreshVoi
$LN11@RefreshVoi:

; 1725 : 		case rcfPackage5:
; 1726 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1727 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN10@RefreshVoi

; 1728 : 				break;

	jmp	$LN29@RefreshVoi
$LN10@RefreshVoi:

; 1729 : 
; 1730 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1731 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN9@RefreshVoi

; 1732 : 				break;

	jmp	SHORT $LN29@RefreshVoi
$LN9@RefreshVoi:

; 1733 : 			comvuid2.num_=pkg->Id()+4;

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1734 : 			break;

	jmp	SHORT $LN29@RefreshVoi

; 1735 : 		case rcfProx: // 40nm range
; 1736 : 			break;

	jmp	SHORT $LN29@RefreshVoi
$LN7@RefreshVoi:

; 1737 : 		case rcfTeam:
; 1738 : 			comvuid2.num_ = FalconLocalSession->GetTeam()+10;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _comvuid2$[ebp], edx

; 1739 : 			break;

	jmp	SHORT $LN29@RefreshVoi
$LN6@RefreshVoi:

; 1740 : 		case rcfAll:
; 1741 : 			comvuid2.num_ = 1;//guard

	mov	DWORD PTR _comvuid2$[ebp], 1

; 1742 : 			break;

	jmp	SHORT $LN29@RefreshVoi
$LN5@RefreshVoi:

; 1743 : 		case rcfTower:
; 1744 : 			if(gNavigationSys && SimDriver.GetPlayerEntity())

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN29@RefreshVoi
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN29@RefreshVoi

; 1745 : 			{
; 1746 : 				VU_ID	ATCId;

	lea	ecx, DWORD PTR _ATCId$31[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1747 : 				gNavigationSys->GetAirbase(&ATCId);

	lea	eax, DWORD PTR _ATCId$31[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 1748 : 				comvuid2.num_ = ATCId;

	lea	ecx, DWORD PTR _ATCId$31[ebp]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid2$[ebp], eax
$LN29@RefreshVoi:

; 1749 : 			}
; 1750 : 			break;
; 1751 : 	}
; 1752 : unsigned long guard = 1;

	mov	DWORD PTR _guard$[ebp], 1

; 1753 : if (FalconLocalSession->GetFlyState() == FLYSTATE_IN_UI)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetFlyState@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetFlyState
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@RefreshVoi

; 1754 : 	{
; 1755 : 	if (FalconLocalSession->GetTeam() != 255)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	cmp	edx, 255				; 000000ffH
	je	SHORT $LN2@RefreshVoi

; 1756 : 	comvuid1.num_ = FalconLocalSession->GetTeam()+10;//ui

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _comvuid1$[ebp], eax
	jmp	SHORT $LN1@RefreshVoi
$LN2@RefreshVoi:

; 1757 : 	else comvuid1.num_ = 11;//ui

	mov	DWORD PTR _comvuid1$[ebp], 11		; 0000000bH
$LN1@RefreshVoi:

; 1758 : 	comvuid2.num_ = 1234;//ui

	mov	DWORD PTR _comvuid2$[ebp], 1234		; 000004d2H
$LN3@RefreshVoi:

; 1759 : 	}
; 1760 : 
; 1761 : SetListenFreqsClient (comvuid1.num_, comvuid2.num_,guard);

	mov	ecx, DWORD PTR _guard$[ebp]
	push	ecx
	mov	edx, DWORD PTR _comvuid2$[ebp]
	push	edx
	mov	eax, DWORD PTR _comvuid1$[ebp]
	push	eax
	call	?SetListenFreqsClient@@YAXKKK@Z		; SetListenFreqsClient
	add	esp, 12					; 0000000cH
$LN70@RefreshVoi:

; 1762 : 
; 1763 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN72@RefreshVoi:
	DD	$LN55@RefreshVoi
	DD	$LN54@RefreshVoi
	DD	$LN53@RefreshVoi
	DD	$LN52@RefreshVoi
	DD	$LN51@RefreshVoi
	DD	$LN50@RefreshVoi
	DD	$LN47@RefreshVoi
	DD	$LN44@RefreshVoi
	DD	$LN41@RefreshVoi
	DD	$LN38@RefreshVoi
	DD	$LN50@RefreshVoi
	DD	$LN56@RefreshVoi
	DD	$LN34@RefreshVoi
	DD	$LN33@RefreshVoi
	DD	$LN32@RefreshVoi
$LN73@RefreshVoi:
	DD	$LN28@RefreshVoi
	DD	$LN27@RefreshVoi
	DD	$LN26@RefreshVoi
	DD	$LN25@RefreshVoi
	DD	$LN24@RefreshVoi
	DD	$LN23@RefreshVoi
	DD	$LN20@RefreshVoi
	DD	$LN17@RefreshVoi
	DD	$LN14@RefreshVoi
	DD	$LN11@RefreshVoi
	DD	$LN23@RefreshVoi
	DD	$LN29@RefreshVoi
	DD	$LN7@RefreshVoi
	DD	$LN6@RefreshVoi
	DD	$LN5@RefreshVoi
?RefreshVoiceFreqs@@YAXXZ ENDP				; RefreshVoiceFreqs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
$T1 = -312						; size = 8
$T2 = -304						; size = 8
$T3 = -296						; size = 8
$T4 = -288						; size = 8
$T5 = -280						; size = 8
$T6 = -272						; size = 8
$T7 = -264						; size = 8
$T8 = -256						; size = 8
$T9 = -248						; size = 8
$T10 = -240						; size = 8
$T11 = -232						; size = 8
$T12 = -224						; size = 8
$T13 = -216						; size = 8
$T14 = -208						; size = 8
$T15 = -200						; size = 8
$T16 = -192						; size = 8
$T17 = -184						; size = 8
$T18 = -176						; size = 8
$T19 = -168						; size = 8
$T20 = -160						; size = 8
$T21 = -152						; size = 8
$T22 = -144						; size = 8
$T23 = -136						; size = 8
$T24 = -128						; size = 8
$T25 = -120						; size = 8
$T26 = -112						; size = 8
$T27 = -104						; size = 8
$T28 = -96						; size = 8
$T29 = -88						; size = 8
$T30 = -80						; size = 8
$T31 = -72						; size = 8
$T32 = -64						; size = 8
_retval$ = -56						; size = 4
_ATCId$33 = -52						; size = 8
_ATCId$34 = -44						; size = 8
_doupdate$ = -33					; size = 1
tv76 = -32						; size = 4
tv370 = -28						; size = 4
_comvuid1$ = -24					; size = 8
_comvuid2$ = -16					; size = 8
_pkg$ = -8						; size = 4
_flt$ = -4						; size = 4
_com$ = 8						; size = 4
?Transmit@@YAXH@Z PROC					; Transmit

; 1766 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H

; 1767 : 
; 1768 : 	Package pkg;
; 1769 : 	Flight flt;
; 1770 : 	BOOL retval=FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 1771 : 	static int com1 =NULL;
; 1772 : 	static int com2 =NULL;
; 1773 : 	bool doupdate = false;

	mov	BYTE PTR _doupdate$[ebp], 0

; 1774 : 
; 1775 : 	if (!VM) return;

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	jne	SHORT $LN71@Transmit
	jmp	$LN72@Transmit
$LN71@Transmit:

; 1776 : 
; 1777 : 	if (g_bHost && !g_pDPServer) return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN70@Transmit
	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	jne	SHORT $LN70@Transmit
	jmp	$LN72@Transmit
$LN70@Transmit:

; 1778 : 	if (!g_bHost && !g_pDPClient) return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	jne	SHORT $LN69@Transmit
	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	jne	SHORT $LN69@Transmit
	jmp	$LN72@Transmit
$LN69@Transmit:

; 1779 : 	if (g_bHost && !g_dpnidLocalPlayer) return;

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN68@Transmit
	cmp	DWORD PTR ?g_dpnidLocalPlayer@@3KA, 0	; g_dpnidLocalPlayer
	jne	SHORT $LN68@Transmit
	jmp	$LN72@Transmit
$LN68@Transmit:

; 1780 : 
; 1781 : 
; 1782 : 	VU_ID comvuid1;

	lea	ecx, DWORD PTR _comvuid1$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1783 : 	VU_ID comvuid2;

	lea	ecx, DWORD PTR _comvuid2$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1784 : 
; 1785 : 	switch(VM->radiofilter[0])

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+eax+136]
	mov	DWORD PTR tv76[ebp], edx
	mov	eax, DWORD PTR tv76[ebp]
	sub	eax, 1
	mov	DWORD PTR tv76[ebp], eax
	cmp	DWORD PTR tv76[ebp], 14			; 0000000eH
	ja	$LN66@Transmit
	mov	ecx, DWORD PTR tv76[ebp]
	jmp	DWORD PTR $LN74@Transmit[ecx*4]
$LN65@Transmit:

; 1786 : 	{
; 1787 : 		case rcfFlight1:
; 1788 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID();

	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1789 : 			break;

	jmp	$LN66@Transmit
$LN64@Transmit:

; 1790 : 		case rcfFlight2:
; 1791 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+1;

	lea	eax, DWORD PTR $T30[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1792 : 			break;

	jmp	$LN66@Transmit
$LN63@Transmit:

; 1793 : 		case rcfFlight3:
; 1794 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+2;

	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1795 : 			break;

	jmp	$LN66@Transmit
$LN62@Transmit:

; 1796 : 		case rcfFlight4:
; 1797 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+3;

	lea	edx, DWORD PTR $T28[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1798 : 			break;

	jmp	$LN66@Transmit
$LN61@Transmit:

; 1799 : 		case rcfFlight5:
; 1800 : 			comvuid1.num_ = FalconLocalSession->GetPlayerFlightID()+4;

	lea	eax, DWORD PTR $T14[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1801 : 			break;

	jmp	$LN66@Transmit
$LN60@Transmit:

; 1802 : 		case rcfPackage1:
; 1803 : 		case rcfFromPackage:
; 1804 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	ecx, DWORD PTR $T26[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1805 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN59@Transmit

; 1806 : 				break;

	jmp	$LN66@Transmit
$LN59@Transmit:

; 1807 : 
; 1808 : 			pkg=(Package)flt->GetUnitParent();

	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1809 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN58@Transmit

; 1810 : 				break;

	jmp	$LN66@Transmit
$LN58@Transmit:

; 1811 : 
; 1812 : 			comvuid1=pkg->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _comvuid1$[ebp], edx
	mov	DWORD PTR _comvuid1$[ebp+4], eax

; 1813 : 			break;

	jmp	$LN66@Transmit
$LN57@Transmit:

; 1814 : 		case rcfPackage2:
; 1815 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	ecx, DWORD PTR $T24[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1816 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN56@Transmit

; 1817 : 				break;

	jmp	$LN66@Transmit
$LN56@Transmit:

; 1818 : 
; 1819 : 			pkg=(Package)flt->GetUnitParent();

	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1820 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN55@Transmit

; 1821 : 				break;

	jmp	$LN66@Transmit
$LN55@Transmit:

; 1822 : 
; 1823 : 			comvuid1.num_=pkg->Id()+1;

	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1824 : 			break;

	jmp	$LN66@Transmit
$LN54@Transmit:

; 1825 : 		case rcfPackage3:
; 1826 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T22[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1827 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN53@Transmit

; 1828 : 				break;

	jmp	$LN66@Transmit
$LN53@Transmit:

; 1829 : 
; 1830 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1831 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN52@Transmit

; 1832 : 				break;

	jmp	$LN66@Transmit
$LN52@Transmit:

; 1833 : 
; 1834 : 			comvuid1.num_=pkg->Id()+2;

	lea	ecx, DWORD PTR $T32[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1835 : 			break;

	jmp	$LN66@Transmit
$LN51@Transmit:

; 1836 : 		case rcfPackage4:
; 1837 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T20[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1838 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN50@Transmit

; 1839 : 				break;

	jmp	$LN66@Transmit
$LN50@Transmit:

; 1840 : 
; 1841 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1842 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN49@Transmit

; 1843 : 				break;

	jmp	$LN66@Transmit
$LN49@Transmit:

; 1844 : 
; 1845 : 			comvuid1.num_=pkg->Id()+3;

	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1846 : 			break;

	jmp	$LN66@Transmit
$LN48@Transmit:

; 1847 : 		case rcfPackage5:
; 1848 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T18[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1849 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN47@Transmit

; 1850 : 				break;

	jmp	$LN66@Transmit
$LN47@Transmit:

; 1851 : 
; 1852 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1853 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN46@Transmit

; 1854 : 				break;

	jmp	SHORT $LN66@Transmit
$LN46@Transmit:

; 1855 : 
; 1856 : 			comvuid1.num_=pkg->Id()+4;

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid1$[ebp], eax

; 1857 : 			break;

	jmp	SHORT $LN66@Transmit

; 1858 : 		case rcfProx: // 40nm range
; 1859 : 			break;

	jmp	SHORT $LN66@Transmit
$LN44@Transmit:

; 1860 : 		case rcfTeam:
; 1861 : 			comvuid1.num_ = FalconLocalSession->GetTeam()+10;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _comvuid1$[ebp], edx

; 1862 : 			break;

	jmp	SHORT $LN66@Transmit
$LN43@Transmit:

; 1863 : 		case rcfAll:
; 1864 : 			comvuid1.num_ = 1;//guard

	mov	DWORD PTR _comvuid1$[ebp], 1

; 1865 : 			break;

	jmp	SHORT $LN66@Transmit
$LN42@Transmit:

; 1866 : 		case rcfTower:
; 1867 : 			if(gNavigationSys && SimDriver.GetPlayerEntity())

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN66@Transmit
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN66@Transmit

; 1868 : 			{
; 1869 : 				VU_ID	ATCId;

	lea	ecx, DWORD PTR _ATCId$34[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1870 : 				gNavigationSys->GetAirbase(&ATCId);

	lea	eax, DWORD PTR _ATCId$34[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 1871 : 				comvuid1.num_ = ATCId;

	lea	ecx, DWORD PTR _ATCId$34[ebp]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid1$[ebp], eax
$LN66@Transmit:

; 1872 : 			}
; 1873 : 			break;
; 1874 : 	}
; 1875 : 		
; 1876 : 	switch(VM->radiofilter[1])

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+136]
	mov	DWORD PTR tv370[ebp], eax
	mov	ecx, DWORD PTR tv370[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv370[ebp], ecx
	cmp	DWORD PTR tv370[ebp], 14		; 0000000eH
	ja	$LN39@Transmit
	mov	edx, DWORD PTR tv370[ebp]
	jmp	DWORD PTR $LN75@Transmit[edx*4]
$LN38@Transmit:

; 1877 : 	{
; 1878 : 		case rcfFlight1:
; 1879 : 			comvuid2.num_ = FalconLocalSession->GetPlayerFlightID() ;

	lea	eax, DWORD PTR $T16[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1880 : 			break;

	jmp	$LN39@Transmit
$LN37@Transmit:

; 1881 : 		case rcfFlight2:
; 1882 : 			comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+1;

	lea	ecx, DWORD PTR $T31[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1883 : 			break;

	jmp	$LN39@Transmit
$LN36@Transmit:

; 1884 : 		case rcfFlight3:
; 1885 : 			comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+2;

	lea	edx, DWORD PTR $T29[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1886 : 			break;

	jmp	$LN39@Transmit
$LN35@Transmit:

; 1887 : 		case rcfFlight4:
; 1888 : 			comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+3;

	lea	eax, DWORD PTR $T27[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1889 : 			break;

	jmp	$LN39@Transmit
$LN34@Transmit:

; 1890 : 		case rcfFlight5:
; 1891 : 			comvuid2.num_ = FalconLocalSession->GetPlayerFlightID()+4;

	lea	ecx, DWORD PTR $T25[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1892 : 			break;

	jmp	$LN39@Transmit
$LN33@Transmit:

; 1893 : 		case rcfPackage1:
; 1894 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T23[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1895 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN32@Transmit

; 1896 : 				break;

	jmp	$LN39@Transmit
$LN32@Transmit:

; 1897 : 
; 1898 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1899 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN31@Transmit

; 1900 : 				break;

	jmp	$LN39@Transmit
$LN31@Transmit:

; 1901 : 			comvuid2=pkg->Id();

	lea	ecx, DWORD PTR $T21[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _comvuid2$[ebp], edx
	mov	DWORD PTR _comvuid2$[ebp+4], eax

; 1902 : 			break;

	jmp	$LN39@Transmit
$LN30@Transmit:

; 1903 : 		case rcfPackage2:
; 1904 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	ecx, DWORD PTR $T19[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1905 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN29@Transmit

; 1906 : 				break;

	jmp	$LN39@Transmit
$LN29@Transmit:

; 1907 : 
; 1908 : 			pkg=(Package)flt->GetUnitParent();

	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1909 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN28@Transmit

; 1910 : 				break;

	jmp	$LN39@Transmit
$LN28@Transmit:

; 1911 : 			comvuid2.num_=pkg->Id()+1;

	lea	ecx, DWORD PTR $T17[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 1
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1912 : 			break;

	jmp	$LN39@Transmit
$LN27@Transmit:

; 1913 : 		case rcfPackage3:
; 1914 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T15[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1915 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN26@Transmit

; 1916 : 				break;

	jmp	$LN39@Transmit
$LN26@Transmit:

; 1917 : 
; 1918 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1919 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN25@Transmit

; 1920 : 				break;

	jmp	$LN39@Transmit
$LN25@Transmit:

; 1921 : 			comvuid2.num_=pkg->Id()+2;

	lea	ecx, DWORD PTR $T13[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 2
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1922 : 			break;

	jmp	$LN39@Transmit
$LN24@Transmit:

; 1923 : 		case rcfPackage4:
; 1924 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T11[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1925 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN23@Transmit

; 1926 : 				break;

	jmp	$LN39@Transmit
$LN23@Transmit:

; 1927 : 
; 1928 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1929 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN22@Transmit

; 1930 : 				break;

	jmp	$LN39@Transmit
$LN22@Transmit:

; 1931 : 			comvuid2.num_=pkg->Id()+3;

	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 3
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1932 : 			break;

	jmp	$LN39@Transmit
$LN21@Transmit:

; 1933 : 		case rcfPackage5:
; 1934 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1935 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN20@Transmit

; 1936 : 				break;

	jmp	$LN39@Transmit
$LN20@Transmit:

; 1937 : 
; 1938 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1939 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN19@Transmit

; 1940 : 				break;

	jmp	$LN39@Transmit
$LN19@Transmit:

; 1941 : 			comvuid2.num_=pkg->Id()+4;

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	add	eax, 4
	mov	DWORD PTR _comvuid2$[ebp], eax

; 1942 : 			break;

	jmp	$LN39@Transmit
$LN18@Transmit:

; 1943 : 		case rcfFromPackage:
; 1944 : 			flt=(Flight)vuDatabase->Find(FalconLocalSession->GetPlayerFlightID());

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerFlightID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1945 : 			if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN17@Transmit

; 1946 : 				break;

	jmp	$LN39@Transmit
$LN17@Transmit:

; 1947 : 
; 1948 : 			pkg=(Package)flt->GetUnitParent();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pkg$[ebp], eax

; 1949 : 			if(!pkg)

	cmp	DWORD PTR _pkg$[ebp], 0
	jne	SHORT $LN16@Transmit

; 1950 : 				break;

	jmp	SHORT $LN39@Transmit
$LN16@Transmit:

; 1951 : 			comvuid2=pkg->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _comvuid2$[ebp], edx
	mov	DWORD PTR _comvuid2$[ebp+4], eax

; 1952 : 			break;

	jmp	SHORT $LN39@Transmit

; 1953 : 		case rcfProx: // 40nm range
; 1954 : 			break;

	jmp	SHORT $LN39@Transmit
$LN14@Transmit:

; 1955 : 		case rcfTeam:
; 1956 : 			comvuid2.num_ = FalconLocalSession->GetTeam()+10;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR _comvuid2$[ebp], ecx

; 1957 : 			break;

	jmp	SHORT $LN39@Transmit
$LN13@Transmit:

; 1958 : 		case rcfAll:
; 1959 : 			comvuid2.num_ = 1;//guard

	mov	DWORD PTR _comvuid2$[ebp], 1

; 1960 : 			break;

	jmp	SHORT $LN39@Transmit
$LN12@Transmit:

; 1961 : 		case rcfTower:
; 1962 : 			if(gNavigationSys && SimDriver.GetPlayerEntity())

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN39@Transmit
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN39@Transmit

; 1963 : 			{
; 1964 : 				VU_ID	ATCId;

	lea	ecx, DWORD PTR _ATCId$33[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1965 : 				gNavigationSys->GetAirbase(&ATCId);

	lea	edx, DWORD PTR _ATCId$33[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 1966 : 				comvuid2.num_ = ATCId;

	lea	ecx, DWORD PTR _ATCId$33[ebp]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR _comvuid2$[ebp], eax
$LN39@Transmit:

; 1967 : 			}
; 1968 : 			break;
; 1969 : 	}
; 1970 : 
; 1971 : 	if (FalconLocalSession->GetFlyState() == FLYSTATE_IN_UI)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetFlyState@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetFlyState
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@Transmit

; 1972 : 	{
; 1973 : 	if (FalconLocalSession->GetTeam() != 255)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	ecx, al
	cmp	ecx, 255				; 000000ffH
	je	SHORT $LN9@Transmit

; 1974 : 	comvuid1.num_ = FalconLocalSession->GetTeam()+10;//ui

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	edx, al
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _comvuid1$[ebp], edx
	jmp	SHORT $LN8@Transmit
$LN9@Transmit:

; 1975 : 	else comvuid1.num_ = 11;//ui

	mov	DWORD PTR _comvuid1$[ebp], 11		; 0000000bH
$LN8@Transmit:

; 1976 : 	comvuid2.num_ = 1234;//ui

	mov	DWORD PTR _comvuid2$[ebp], 1234		; 000004d2H
$LN10@Transmit:

; 1977 : 
; 1978 : 	}
; 1979 : 
; 1980 : 	if (com == 0)

	cmp	DWORD PTR _com$[ebp], 0
	jne	SHORT $LN7@Transmit

; 1981 : 	{
; 1982 : 	//DVID dvid = NULL;
; 1983 :     if( !g_pVoiceClient || FAILED(  g_pVoiceClient->SetTransmitTargets(0, 0, 0 ) ) )

	cmp	DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A, 0 ; g_pVoiceClient
	je	SHORT $LN5@Transmit
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	edx
	mov	eax, DWORD PTR [ecx+44]
	call	eax
	test	eax, eax
	jge	SHORT $LN6@Transmit
$LN5@Transmit:

; 1984 : 		{
; 1985 : 			MonoPrint("Failed SetTransmitTargets:  0x%X\n");

	push	OFFSET ??_C@_0CC@MIJOGJNO@Failed?5SetTransmitTargets?3?5?50x?$CFX@
	call	_MonoPrint
	add	esp, 4
$LN6@Transmit:

; 1986 : 		}
; 1987 : 	}

	jmp	SHORT $LN72@Transmit
$LN7@Transmit:

; 1988 : 	else if (com == 1)

	cmp	DWORD PTR _com$[ebp], 1
	jne	SHORT $LN3@Transmit

; 1989 : 	{
; 1990 : 		TransmistoFreq (comvuid1.num_);

	mov	ecx, DWORD PTR _comvuid1$[ebp]
	push	ecx
	call	?TransmistoFreq@@YAXK@Z			; TransmistoFreq
	add	esp, 4

; 1991 : 		g_itransmitfreq = 1;

	mov	DWORD PTR ?g_itransmitfreq@@3HA, 1	; g_itransmitfreq
	jmp	SHORT $LN72@Transmit
$LN3@Transmit:

; 1992 : 	}
; 1993 : 	else if (com == 2)

	cmp	DWORD PTR _com$[ebp], 2
	jne	SHORT $LN72@Transmit

; 1994 : 	{
; 1995 : 		TransmistoFreq (comvuid2.num_);

	mov	edx, DWORD PTR _comvuid2$[ebp]
	push	edx
	call	?TransmistoFreq@@YAXK@Z			; TransmistoFreq
	add	esp, 4

; 1996 : 		g_itransmitfreq = 2;

	mov	DWORD PTR ?g_itransmitfreq@@3HA, 2	; g_itransmitfreq
$LN72@Transmit:

; 1997 : 	}
; 1998 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN74@Transmit:
	DD	$LN65@Transmit
	DD	$LN64@Transmit
	DD	$LN63@Transmit
	DD	$LN62@Transmit
	DD	$LN61@Transmit
	DD	$LN60@Transmit
	DD	$LN57@Transmit
	DD	$LN54@Transmit
	DD	$LN51@Transmit
	DD	$LN48@Transmit
	DD	$LN60@Transmit
	DD	$LN66@Transmit
	DD	$LN44@Transmit
	DD	$LN43@Transmit
	DD	$LN42@Transmit
$LN75@Transmit:
	DD	$LN38@Transmit
	DD	$LN37@Transmit
	DD	$LN36@Transmit
	DD	$LN35@Transmit
	DD	$LN34@Transmit
	DD	$LN33@Transmit
	DD	$LN30@Transmit
	DD	$LN27@Transmit
	DD	$LN24@Transmit
	DD	$LN21@Transmit
	DD	$LN18@Transmit
	DD	$LN39@Transmit
	DD	$LN14@Transmit
	DD	$LN13@Transmit
	DD	$LN12@Transmit
?Transmit@@YAXH@Z ENDP					; Transmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_found$ = -1						; size = 1
_transmitfreq$ = 8					; size = 4
?TransmistoFreq@@YAXK@Z PROC				; TransmistoFreq

; 2002 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2003 : 	bool found = false;

	mov	BYTE PTR _found$[ebp], 0

; 2004 : // find the Freq
; 2005 :     for( int i=0; i < g_afreqarrey.count; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Transmisto
$LN4@Transmisto:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Transmisto:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A
	jge	SHORT $LN3@Transmisto

; 2006 :     {
; 2007 : 		if ( transmitfreq == g_afreqarrey.Freq[i][1])// corect game

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _transmitfreq$[ebp]
	cmp	ecx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[edx+eax*8+4]
	jne	SHORT $LN2@Transmisto

; 2008 : 		{
; 2009 :         // Talk to just this group
; 2010 :         g_pVoiceClient->SetTransmitTargets( &g_afreqarrey.Freq[i][0], 1, 0 );

	push	0
	push	1
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _i$1[ebp]
	lea	ecx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[edx+eax*8+4]
	push	ecx
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx

; 2011 : 		found = true;

	mov	BYTE PTR _found$[ebp], 1
$LN2@Transmisto:

; 2012 : 		}
; 2013 : 
; 2014 :     }

	jmp	SHORT $LN4@Transmisto
$LN3@Transmisto:

; 2015 : 	if (!found) SetListenFreqsClient (11,1234,1);

	movzx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	jne	SHORT $LN6@Transmisto
	push	1
	push	1234					; 000004d2H
	push	11					; 0000000bH
	call	?SetListenFreqsClient@@YAXKKK@Z		; SetListenFreqsClient
	add	esp, 12					; 0000000cH
$LN6@Transmisto:

; 2016 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TransmistoFreq@@YAXK@Z ENDP				; TransmistoFreq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_dpnBuffer$ = -68					; size = 8
_hr$ = -60						; size = 4
_comData$ = -56						; size = 52
__$ArrayPad$ = -4					; size = 4
_com1$ = 8						; size = 4
_com2$ = 12						; size = 4
_guard$ = 16						; size = 4
?SetListenFreqsClient@@YAXKKK@Z PROC			; SetListenFreqsClient

; 2019 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2020 : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN2@SetListenF

; 2021 : 	{
; 2022 : 	SetListenFreqsHost(g_dpnidLocalPlayer, com1, com2, guard);

	mov	eax, DWORD PTR _guard$[ebp]
	push	eax
	mov	ecx, DWORD PTR _com2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _com1$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_dpnidLocalPlayer@@3KA	; g_dpnidLocalPlayer
	push	eax
	call	?SetListenFreqsHost@@YAXKKKK@Z		; SetListenFreqsHost
	add	esp, 16					; 00000010H

; 2023 : 		return;

	jmp	$LN3@SetListenF
$LN2@SetListenF:

; 2024 : 	}
; 2025 : 	HRESULT         hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2026 :     DPN_BUFFER_DESC dpnBuffer;
; 2027 : 	COM_MESSAGE_SetClientListenFreqs  comData;
; 2028 : 	comData.dwType = GAME_MSGID_SetClientListenFreqs;

	mov	DWORD PTR _comData$[ebp], 1

; 2029 : 	comData.dpnid = g_dpnidLocalPlayer;

	mov	ecx, DWORD PTR ?g_dpnidLocalPlayer@@3KA	; g_dpnidLocalPlayer
	mov	DWORD PTR _comData$[ebp+4], ecx

; 2030 : 	comData.com[0] = com1;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _com1$[ebp]
	mov	DWORD PTR _comData$[ebp+edx+8], eax

; 2031 : 	comData.com[1] = com2;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _com2$[ebp]
	mov	DWORD PTR _comData$[ebp+ecx+8], edx

; 2032 : 	comData.com[2] = guard;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _guard$[ebp]
	mov	DWORD PTR _comData$[ebp+eax+8], ecx

; 2033 : 	strcpy(comData.gamename , vuLocalSessionEntity->Game()->GameName());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	ecx, eax
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	push	eax
	lea	edx, DWORD PTR _comData$[ebp+20]
	push	edx
	call	_strcpy
	add	esp, 8

; 2034 :     dpnBuffer.pBufferData = (BYTE*) &comData;

	lea	eax, DWORD PTR _comData$[ebp]
	mov	DWORD PTR _dpnBuffer$[ebp+4], eax

; 2035 :     dpnBuffer.dwBufferSize = sizeof (COM_MESSAGE_SetClientListenFreqs);

	mov	DWORD PTR _dpnBuffer$[ebp], 52		; 00000034H

; 2036 : 	
; 2037 :     if( FAILED( hr = g_pDPClient->Send(&dpnBuffer,             // pBufferDesc
; 2038 :                                     1,                      // cBufferDesc
; 2039 :                                     0,                      // dwTimeOut
; 2040 :                                     NULL,                   // pvAsyncContext
; 2041 :                                     NULL,                   // pvAsyncHandle
; 2042 :                                     DPNSEND_SYNC |
; 2043 :                                     DPNSEND_GUARANTEED|
; 2044 : 									DPNSEND_NOLOOPBACK) ) )   // dwFlags

	push	-2147483608				; 80000028H
	push	0
	push	0
	push	0
	push	1
	lea	ecx, DWORD PTR _dpnBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@SetListenF

; 2045 :     {
; 2046 :         printf("Failed Sending Data:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@
	call	_printf
	add	esp, 8
$LN3@SetListenF:

; 2047 :     }
; 2048 :     return ;
; 2049 : 
; 2050 : 
; 2051 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetListenFreqsClient@@YAXKKK@Z ENDP			; SetListenFreqsClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hAsync$1 = -172					; size = 4
_hAsync$2 = -168					; size = 4
_p$3 = -164						; size = 4
_p$4 = -160						; size = 4
$T5 = -156						; size = 4
_str$6 = -152						; size = 4
_dwGroupNumber$7 = -148					; size = 4
$T8 = -144						; size = 4
$T9 = -140						; size = 4
$T10 = -136						; size = 4
_str$11 = -132						; size = 4
$T12 = -128						; size = 4
_dwGroupNumber$13 = -124				; size = 4
_FreqVUID$14 = -120					; size = 4
_FreqVUID$15 = -116					; size = 4
_dwSize$16 = -112					; size = 4
_dwSize$17 = -108					; size = 4
_dwCount$ = -104					; size = 4
_pdpGroupInfo$18 = -100					; size = 4
_pdpGroupInfo$19 = -96					; size = 4
_aGroupsDPNID$ = -92					; size = 4
_hr$ = -88						; size = 4
_i$ = -84						; size = 4
_com1ok$ = -79						; size = 1
_com2ok$ = -78						; size = 1
_guardok$ = -77						; size = 1
_freq$20 = -76						; size = 33
_freq$21 = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_playerid$ = 8						; size = 4
_com1$ = 12						; size = 4
_com2$ = 16						; size = 4
_guard$ = 20						; size = 4
?SetListenFreqsHost@@YAXKKKK@Z PROC			; SetListenFreqsHost

; 2054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2055 :     DWORD i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 2056 : //first we find the current freqs on the server
; 2057 :    HRESULT hr;
; 2058 : 	   // Enumerate all groups to figure out which group we are target, and joining
; 2059 : 
; 2060 : 	bool com1ok =false;

	mov	BYTE PTR _com1ok$[ebp], 0

; 2061 : 	bool com2ok =false;

	mov	BYTE PTR _com2ok$[ebp], 0

; 2062 : 	bool guardok =false;

	mov	BYTE PTR _guardok$[ebp], 0
$start$38:

; 2063 : 
; 2064 : start:
; 2065 :     DPNID* aGroupsDPNID = NULL;

	mov	DWORD PTR _aGroupsDPNID$[ebp], 0

; 2066 :     DWORD dwCount = 0;

	mov	DWORD PTR _dwCount$[ebp], 0
$LN33@SetListenF:

; 2067 : 	  do
; 2068 :     {
; 2069 :         SAFE_DELETE_ARRAY( aGroupsDPNID );

	cmp	DWORD PTR _aGroupsDPNID$[ebp], 0
	je	SHORT $LN30@SetListenF
	mov	eax, DWORD PTR _aGroupsDPNID$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _aGroupsDPNID$[ebp], 0
$LN30@SetListenF:

; 2070 :         if( dwCount ) 

	cmp	DWORD PTR _dwCount$[ebp], 0
	je	SHORT $LN29@SetListenF

; 2071 :             aGroupsDPNID = new DPNID[ dwCount ];

	xor	ecx, ecx
	mov	eax, DWORD PTR _dwCount$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	eax, DWORD PTR $T10[ebp]
	mov	DWORD PTR _aGroupsDPNID$[ebp], eax
$LN29@SetListenF:

; 2072 :         hr = g_pDPServer->EnumPlayersAndGroups( aGroupsDPNID, &dwCount, DPNENUM_GROUPS );

	push	16					; 00000010H
	lea	ecx, DWORD PTR _dwCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aGroupsDPNID$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	edx
	mov	eax, DWORD PTR [ecx+84]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 2073 :     }
; 2074 :     while( hr == DPNERR_BUFFERTOOSMALL && dwCount != 0 );

	cmp	DWORD PTR _hr$[ebp], -2146074368	; 80158100H
	jne	SHORT $LN31@SetListenF
	cmp	DWORD PTR _dwCount$[ebp], 0
	jne	$LN33@SetListenF
$LN31@SetListenF:

; 2075 : 
; 2076 : // find the Freq if it's already there and join it
; 2077 : 
; 2078 :     for( i=0; i<dwCount; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@SetListenF
$LN26@SetListenF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN27@SetListenF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _dwCount$[ebp]
	jae	$LN25@SetListenF

; 2079 :     {
; 2080 : ////first we need to create the groups that are not already there
; 2081 :         DWORD dwGroupNumber;
; 2082 : 
; 2083 :         // Get group info 
; 2084 :         DWORD dwSize = 0;

	mov	DWORD PTR _dwSize$16[ebp], 0

; 2085 :         DPN_GROUP_INFO* pdpGroupInfo = NULL;

	mov	DWORD PTR _pdpGroupInfo$18[ebp], 0

; 2086 :         hr = g_pDPServer->GetGroupInfo( aGroupsDPNID[i], pdpGroupInfo, &dwSize, 0 );

	push	0
	lea	eax, DWORD PTR _dwSize$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _pdpGroupInfo$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _aGroupsDPNID$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+80]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 2087 :         if( FAILED(hr) && hr != DPNERR_BUFFERTOOSMALL )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@SetListenF
	cmp	DWORD PTR _hr$[ebp], -2146074368	; 80158100H
	je	SHORT $LN24@SetListenF

; 2088 :             return ;

	jmp	$LN34@SetListenF
$LN24@SetListenF:

; 2089 :         pdpGroupInfo = (DPN_GROUP_INFO*) new BYTE[ dwSize ];

	mov	eax, DWORD PTR _dwSize$16[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR _pdpGroupInfo$18[ebp], ecx

; 2090 :         ZeroMemory( pdpGroupInfo, dwSize );

	mov	edx, DWORD PTR _dwSize$16[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pdpGroupInfo$18[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2091 :         pdpGroupInfo->dwSize = sizeof(DPN_GROUP_INFO); 

	mov	ecx, DWORD PTR _pdpGroupInfo$18[ebp]
	mov	DWORD PTR [ecx], 24			; 00000018H

; 2092 :         hr = g_pDPServer->GetGroupInfo( aGroupsDPNID[i], pdpGroupInfo, &dwSize, 0 );

	push	0
	lea	edx, DWORD PTR _dwSize$16[ebp]
	push	edx
	mov	eax, DWORD PTR _pdpGroupInfo$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _aGroupsDPNID$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 2093 :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN23@SetListenF

; 2094 :             return ;

	jmp	$LN34@SetListenF
$LN23@SetListenF:

; 2095 : 
; 2096 :         if( pdpGroupInfo->pvData )

	mov	edx, DWORD PTR _pdpGroupInfo$18[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN22@SetListenF

; 2097 :             dwGroupNumber = *( (DWORD*) pdpGroupInfo->pvData );

	mov	eax, DWORD PTR _pdpGroupInfo$18[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dwGroupNumber$7[ebp], edx

; 2098 :         else

	jmp	SHORT $LN21@SetListenF
$LN22@SetListenF:

; 2099 :             dwGroupNumber = 0;

	mov	DWORD PTR _dwGroupNumber$7[ebp], 0
$LN21@SetListenF:

; 2100 : 		////convert the name to the vuid
; 2101 : 		TCHAR freq[sizeof(long)*8+1] ;
; 2102 : 		DXUtil_ConvertWideStringToGeneric( freq,pdpGroupInfo->pwszName,sizeof(long)*8+1 );

	push	33					; 00000021H
	mov	eax, DWORD PTR _pdpGroupInfo$18[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR _freq$20[ebp]
	push	edx
	call	?DXUtil_ConvertWideStringToGeneric@@YAXPADPB_WH@Z ; DXUtil_ConvertWideStringToGeneric
	add	esp, 12					; 0000000cH

; 2103 : 		char *p;
; 2104 : 		const char* str = freq;

	lea	eax, DWORD PTR _freq$20[ebp]
	mov	DWORD PTR _str$6[ebp], eax

; 2105 : 		unsigned long FreqVUID = strtoul(&str[0],&p,sizeof(long)*8+1);

	push	33					; 00000021H
	lea	ecx, DWORD PTR _p$4[ebp]
	push	ecx
	mov	edx, 1
	imul	edx, 0
	add	edx, DWORD PTR _str$6[ebp]
	push	edx
	call	_strtoul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FreqVUID$14[ebp], eax

; 2106 : 		//////////////////////////////
; 2107 : 		if (com1 == FreqVUID) com1ok =TRUE;

	mov	eax, DWORD PTR _com1$[ebp]
	cmp	eax, DWORD PTR _FreqVUID$14[ebp]
	jne	SHORT $LN20@SetListenF
	mov	BYTE PTR _com1ok$[ebp], 1
$LN20@SetListenF:

; 2108 : 		if (com2 == FreqVUID) com2ok =TRUE;

	mov	ecx, DWORD PTR _com2$[ebp]
	cmp	ecx, DWORD PTR _FreqVUID$14[ebp]
	jne	SHORT $LN19@SetListenF
	mov	BYTE PTR _com2ok$[ebp], 1
$LN19@SetListenF:

; 2109 : 		if (guard == FreqVUID) guardok =TRUE;

	mov	edx, DWORD PTR _guard$[ebp]
	cmp	edx, DWORD PTR _FreqVUID$14[ebp]
	jne	SHORT $LN18@SetListenF
	mov	BYTE PTR _guardok$[ebp], 1
$LN18@SetListenF:

; 2110 : 	}

	jmp	$LN26@SetListenF
$LN25@SetListenF:

; 2111 : 	if (!com1ok && com1 )

	movzx	eax, BYTE PTR _com1ok$[ebp]
	test	eax, eax
	jne	SHORT $LN17@SetListenF
	cmp	DWORD PTR _com1$[ebp], 0
	je	SHORT $LN17@SetListenF

; 2112 : 	{
; 2113 : 	CreateGroup (com1);

	mov	ecx, DWORD PTR _com1$[ebp]
	push	ecx
	call	?CreateGroup@@YAXK@Z			; CreateGroup
	add	esp, 4

; 2114 : 	com1ok = true;

	mov	BYTE PTR _com1ok$[ebp], 1

; 2115 : 	goto start;

	jmp	$start$38
	jmp	SHORT $LN16@SetListenF
$LN17@SetListenF:

; 2116 : 	}
; 2117 : 	else if (!com2ok && com2)

	movzx	edx, BYTE PTR _com2ok$[ebp]
	test	edx, edx
	jne	SHORT $LN15@SetListenF
	cmp	DWORD PTR _com2$[ebp], 0
	je	SHORT $LN15@SetListenF

; 2118 : 	{
; 2119 : 	CreateGroup (com2);

	mov	eax, DWORD PTR _com2$[ebp]
	push	eax
	call	?CreateGroup@@YAXK@Z			; CreateGroup
	add	esp, 4

; 2120 : 	com2ok = true;

	mov	BYTE PTR _com2ok$[ebp], 1

; 2121 : 	goto start;

	jmp	$start$38
	jmp	SHORT $LN16@SetListenF
$LN15@SetListenF:

; 2122 : 	}
; 2123 : 	else if (!guardok)

	movzx	ecx, BYTE PTR _guardok$[ebp]
	test	ecx, ecx
	jne	SHORT $LN16@SetListenF

; 2124 : 	{
; 2125 : 	CreateGroup (guard);

	mov	edx, DWORD PTR _guard$[ebp]
	push	edx
	call	?CreateGroup@@YAXK@Z			; CreateGroup
	add	esp, 4

; 2126 : 	guardok = true;

	mov	BYTE PTR _guardok$[ebp], 1

; 2127 : 	goto start;

	jmp	$start$38
$LN16@SetListenF:

; 2128 : 	}
; 2129 : 
; 2130 : 
; 2131 : // now all groups should exsist 
; 2132 : // lets join the requested groups and leave the rest
; 2133 :     for( i=0; i<dwCount; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@SetListenF
$LN11@SetListenF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@SetListenF:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _dwCount$[ebp]
	jae	$LN34@SetListenF

; 2134 :     {
; 2135 :         DWORD dwGroupNumber;
; 2136 : 
; 2137 :         // Get group info 
; 2138 :         DWORD dwSize = 0;

	mov	DWORD PTR _dwSize$17[ebp], 0

; 2139 :         DPN_GROUP_INFO* pdpGroupInfo = NULL;

	mov	DWORD PTR _pdpGroupInfo$19[ebp], 0

; 2140 :         hr = g_pDPServer->GetGroupInfo( aGroupsDPNID[i], pdpGroupInfo, &dwSize, 0 );

	push	0
	lea	edx, DWORD PTR _dwSize$17[ebp]
	push	edx
	mov	eax, DWORD PTR _pdpGroupInfo$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _aGroupsDPNID$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 2141 :         if( FAILED(hr) && hr != DPNERR_BUFFERTOOSMALL )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@SetListenF
	cmp	DWORD PTR _hr$[ebp], -2146074368	; 80158100H
	je	SHORT $LN9@SetListenF

; 2142 :             return ;

	jmp	$LN34@SetListenF
$LN9@SetListenF:

; 2143 :         pdpGroupInfo = (DPN_GROUP_INFO*) new BYTE[ dwSize ];

	mov	edx, DWORD PTR _dwSize$17[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR _pdpGroupInfo$19[ebp], eax

; 2144 :         ZeroMemory( pdpGroupInfo, dwSize );

	mov	ecx, DWORD PTR _dwSize$17[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pdpGroupInfo$19[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 2145 :         pdpGroupInfo->dwSize = sizeof(DPN_GROUP_INFO); 

	mov	eax, DWORD PTR _pdpGroupInfo$19[ebp]
	mov	DWORD PTR [eax], 24			; 00000018H

; 2146 :         hr = g_pDPServer->GetGroupInfo( aGroupsDPNID[i], pdpGroupInfo, &dwSize, 0 );

	push	0
	lea	ecx, DWORD PTR _dwSize$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _pdpGroupInfo$19[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _aGroupsDPNID$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 2147 :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@SetListenF

; 2148 :             return ;

	jmp	$LN34@SetListenF
$LN8@SetListenF:

; 2149 : 
; 2150 :         if( pdpGroupInfo->pvData )

	mov	ecx, DWORD PTR _pdpGroupInfo$19[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN7@SetListenF

; 2151 :             dwGroupNumber = *( (DWORD*) pdpGroupInfo->pvData );

	mov	edx, DWORD PTR _pdpGroupInfo$19[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dwGroupNumber$13[ebp], ecx

; 2152 :         else

	jmp	SHORT $LN6@SetListenF
$LN7@SetListenF:

; 2153 :             dwGroupNumber = 0;

	mov	DWORD PTR _dwGroupNumber$13[ebp], 0
$LN6@SetListenF:

; 2154 : ////convert the name to the vuid
; 2155 : 		TCHAR freq[sizeof(long)*8+1] ;
; 2156 : 		DXUtil_ConvertWideStringToGeneric( freq,pdpGroupInfo->pwszName,sizeof(long)*8+1 );

	push	33					; 00000021H
	mov	edx, DWORD PTR _pdpGroupInfo$19[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR _freq$21[ebp]
	push	ecx
	call	?DXUtil_ConvertWideStringToGeneric@@YAXPADPB_WH@Z ; DXUtil_ConvertWideStringToGeneric
	add	esp, 12					; 0000000cH

; 2157 : 		char *p;
; 2158 : 		const char* str = freq;

	lea	edx, DWORD PTR _freq$21[ebp]
	mov	DWORD PTR _str$11[ebp], edx

; 2159 : 		unsigned long FreqVUID = strtoul(&str[0],&p,sizeof(long)*8+1);

	push	33					; 00000021H
	lea	eax, DWORD PTR _p$3[ebp]
	push	eax
	mov	ecx, 1
	imul	ecx, 0
	add	ecx, DWORD PTR _str$11[ebp]
	push	ecx
	call	_strtoul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FreqVUID$15[ebp], eax

; 2160 : //////////////////////////////
; 2161 : 		if ( com1 == FreqVUID || com2 == FreqVUID || guard == FreqVUID)

	mov	edx, DWORD PTR _com1$[ebp]
	cmp	edx, DWORD PTR _FreqVUID$15[ebp]
	je	SHORT $LN4@SetListenF
	mov	eax, DWORD PTR _com2$[ebp]
	cmp	eax, DWORD PTR _FreqVUID$15[ebp]
	je	SHORT $LN4@SetListenF
	mov	ecx, DWORD PTR _guard$[ebp]
	cmp	ecx, DWORD PTR _FreqVUID$15[ebp]
	jne	SHORT $LN5@SetListenF
$LN4@SetListenF:

; 2162 : 		{
; 2163 : 			// Add player to this group
; 2164 :             DPNHANDLE hAsync;
; 2165 :             hr = g_pDPServer->AddPlayerToGroup( aGroupsDPNID[i], playerid, 
; 2166 :                                                       NULL, &hAsync, 0 );

	push	0
	lea	edx, DWORD PTR _hAsync$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _playerid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _aGroupsDPNID$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+68]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 2167 : 		}
; 2168 : 		else

	jmp	SHORT $LN3@SetListenF
$LN5@SetListenF:

; 2169 : 		{
; 2170 : 			//remove player from group
; 2171 :         DPNHANDLE hAsync;
; 2172 :         hr = g_pDPServer->RemovePlayerFromGroup( aGroupsDPNID[i], 
; 2173 :                                            playerid,
; 2174 :                                            NULL, &hAsync, 0 );

	push	0
	lea	edx, DWORD PTR _hAsync$2[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _playerid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _aGroupsDPNID$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+72]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
$LN3@SetListenF:

; 2175 : 		}
; 2176 : 
; 2177 :         SAFE_DELETE_ARRAY( pdpGroupInfo );

	cmp	DWORD PTR _pdpGroupInfo$19[ebp], 0
	je	SHORT $LN2@SetListenF
	mov	edx, DWORD PTR _pdpGroupInfo$19[ebp]
	mov	DWORD PTR $T12[ebp], edx
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _pdpGroupInfo$19[ebp], 0
$LN2@SetListenF:

; 2178 :         if( dwGroupNumber == 0 )

	cmp	DWORD PTR _dwGroupNumber$13[ebp], 0
	jne	SHORT $LN1@SetListenF

; 2179 :             continue;

	jmp	$LN11@SetListenF
$LN1@SetListenF:

; 2180 :     }

	jmp	$LN11@SetListenF
$LN34@SetListenF:

; 2181 : 
; 2182 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetListenFreqsHost@@YAXKKKK@Z ENDP			; SetListenFreqsHost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hAsync$ = -164						; size = 4
_dpGroupInfo$ = -160					; size = 24
$T1 = -136						; size = 4
$T2 = -132						; size = 4
$T3 = -128						; size = 4
_pdwData$ = -124					; size = 4
_hr$ = -120						; size = 4
_aGroupsDPNID$ = -116					; size = 4
_dwCount$ = -112					; size = 4
_name$ = -108						; size = 66
_buffer$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_freq$ = 8						; size = 4
?CreateGroup@@YAXK@Z PROC				; CreateGroup

; 2187 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2188 : 	 HRESULT     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2189 :     DPNID* aGroupsDPNID = NULL;

	mov	DWORD PTR _aGroupsDPNID$[ebp], 0

; 2190 :     DWORD dwCount = 0;

	mov	DWORD PTR _dwCount$[ebp], 0
$LN6@CreateGrou:

; 2191 : 	  do
; 2192 :     {
; 2193 :         SAFE_DELETE_ARRAY( aGroupsDPNID );

	cmp	DWORD PTR _aGroupsDPNID$[ebp], 0
	je	SHORT $LN3@CreateGrou
	mov	eax, DWORD PTR _aGroupsDPNID$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _aGroupsDPNID$[ebp], 0
$LN3@CreateGrou:

; 2194 :         if( dwCount ) 

	cmp	DWORD PTR _dwCount$[ebp], 0
	je	SHORT $LN2@CreateGrou

; 2195 :             aGroupsDPNID = new DPNID[ dwCount ];

	xor	ecx, ecx
	mov	eax, DWORD PTR _dwCount$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _aGroupsDPNID$[ebp], eax
$LN2@CreateGrou:

; 2196 :         hr = g_pDPServer->EnumPlayersAndGroups( aGroupsDPNID, &dwCount, DPNENUM_GROUPS );

	push	16					; 00000010H
	lea	ecx, DWORD PTR _dwCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aGroupsDPNID$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	edx
	mov	eax, DWORD PTR [ecx+84]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 2197 :     }
; 2198 :     while( hr == DPNERR_BUFFERTOOSMALL && dwCount != 0 );

	cmp	DWORD PTR _hr$[ebp], -2146074368	; 80158100H
	jne	SHORT $LN4@CreateGrou
	cmp	DWORD PTR _dwCount$[ebp], 0
	jne	SHORT $LN6@CreateGrou
$LN4@CreateGrou:

; 2199 :     DPN_GROUP_INFO dpGroupInfo;
; 2200 :     DWORD* pdwData = new DWORD;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pdwData$[ebp], ecx

; 2201 :     *pdwData = dwCount+1;

	mov	edx, DWORD PTR _dwCount$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pdwData$[ebp]
	mov	DWORD PTR [eax], edx

; 2202 :     ZeroMemory( &dpGroupInfo, sizeof(DPN_GROUP_INFO) );

	push	24					; 00000018H
	push	0
	lea	ecx, DWORD PTR _dpGroupInfo$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2203 :     dpGroupInfo.dwSize = sizeof( DPN_GROUP_INFO );

	mov	DWORD PTR _dpGroupInfo$[ebp], 24	; 00000018H

; 2204 :     dpGroupInfo.dwInfoFlags = DPNINFO_NAME|DPNINFO_DATA ;

	mov	DWORD PTR _dpGroupInfo$[ebp+4], 3

; 2205 : 	dpGroupInfo.dwGroupFlags = DPNGROUP_AUTODESTRUCT;

	mov	DWORD PTR _dpGroupInfo$[ebp+20], 1

; 2206 :     dpGroupInfo.pvData = pdwData;

	mov	edx, DWORD PTR _pdwData$[ebp]
	mov	DWORD PTR _dpGroupInfo$[ebp+12], edx

; 2207 :     dpGroupInfo.dwDataSize = sizeof(DWORD);

	mov	DWORD PTR _dpGroupInfo$[ebp+16], 4

; 2208 : 	TCHAR buffer [sizeof(long)*8+1];
; 2209 : 	ltoa (freq,buffer,(sizeof(long)*8+1));

	push	33					; 00000021H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _freq$[ebp]
	push	ecx
	call	_ltoa
	add	esp, 12					; 0000000cH

; 2210 : 	WCHAR name[sizeof(long)*8+1];
; 2211 : 	mbstowcs(&name[0], buffer, sizeof(long)*8+1);

	push	33					; 00000021H
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 0
	lea	ecx, DWORD PTR _name$[ebp+eax]
	push	ecx
	call	_mbstowcs
	add	esp, 12					; 0000000cH

; 2212 : 	dpGroupInfo.pwszName = name;

	lea	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR _dpGroupInfo$[ebp+8], edx

; 2213 :     DPNHANDLE hAsync;
; 2214 :     hr = g_pDPServer->CreateGroup( &dpGroupInfo, NULL,
; 2215 :                                      NULL, &hAsync, 0 );

	push	0
	lea	eax, DWORD PTR _hAsync$[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _dpGroupInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+60]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 2216 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateGroup@@YAXK@Z ENDP				; CreateGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
_pHostNodetmp$ = -8					; size = 4
_pHostNode$ = -4					; size = 4
?CleanupDirectPlay@@YAXXZ PROC				; CleanupDirectPlay

; 1305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1306 :     HOST_NODE*                  pHostNode = NULL;

	mov	DWORD PTR _pHostNode$[ebp], 0

; 1307 :     HOST_NODE*                  pHostNodetmp = NULL;

	mov	DWORD PTR _pHostNodetmp$[ebp], 0

; 1308 : 
; 1309 :     // Shutdown DirectVoice
; 1310 :     if( g_pVoiceClient)

	cmp	DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A, 0 ; g_pVoiceClient
	je	SHORT $LN33@CleanupDir

; 1311 :     {
; 1312 :         g_pVoiceClient->Disconnect(DVFLAGS_SYNC);

	push	1
	mov	eax, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
$LN33@CleanupDir:

; 1313 :     }
; 1314 :     if( g_pVoiceServer)

	cmp	DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A, 0 ; g_pVoiceServer
	je	SHORT $LN32@CleanupDir

; 1315 :     {
; 1316 :         g_pVoiceServer->StopSession(0);

	push	0
	mov	ecx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
$LN32@CleanupDir:

; 1317 :     }
; 1318 : 
; 1319 :     // Shutdown DirectPlay
; 1320 : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN31@CleanupDir

; 1321 : 	{
; 1322 :     if( g_pDPServer)

	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	je	SHORT $LN30@CleanupDir

; 1323 :         g_pDPServer->Close(0);

	push	0
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+92]
	call	edx
$LN30@CleanupDir:

; 1324 : 	}

	jmp	SHORT $LN29@CleanupDir
$LN31@CleanupDir:

; 1325 : 	else if (g_ipadress)

	cmp	DWORD PTR ?g_ipadress@@3PADA, 0		; g_ipadress
	je	SHORT $LN29@CleanupDir

; 1326 : 	{
; 1327 : 		if( g_pDPClient){

	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	je	SHORT $LN29@CleanupDir

; 1328 : 			g_pDPClient->Close(0);

	push	0
	mov	eax, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	edx
	mov	eax, DWORD PTR [ecx+56]
	call	eax
$LN29@CleanupDir:

; 1329 : 		}
; 1330 : 	}
; 1331 : 
; 1332 : 
; 1333 :     if( g_pLobbyApp && g_ipadress)

	cmp	DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A, 0 ; g_pLobbyApp
	je	SHORT $LN26@CleanupDir
	cmp	DWORD PTR ?g_ipadress@@3PADA, 0		; g_ipadress
	je	SHORT $LN26@CleanupDir

; 1334 :         g_pLobbyApp->Close(0);

	push	0
	mov	ecx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	eax
	mov	ecx, DWORD PTR [edx+36]
	call	ecx
$LN26@CleanupDir:

; 1335 : 
; 1336 :     // Clean up Host list
; 1337 : 	if (g_pHostList)

	cmp	DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A, 0 ; g_pHostList
	je	$LN25@CleanupDir

; 1338 : 	{
; 1339 : 		EnterCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__EnterCriticalSection@4

; 1340 :     
; 1341 : 		pHostNode = g_pHostList;

	mov	edx, DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A ; g_pHostList
	mov	DWORD PTR _pHostNode$[ebp], edx
$LN24@CleanupDir:

; 1342 : 		while( pHostNode != NULL )

	cmp	DWORD PTR _pHostNode$[ebp], 0
	je	$LN23@CleanupDir

; 1343 : 		{       
; 1344 : 			SAFE_RELEASE(pHostNode->pHostAddress);

	mov	eax, DWORD PTR _pHostNode$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN22@CleanupDir
	mov	ecx, DWORD PTR _pHostNode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pHostNode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _pHostNode$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN22@CleanupDir:

; 1345 : 			SAFE_DELETE(pHostNode->pAppDesc);

	mov	edx, DWORD PTR _pHostNode$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN21@CleanupDir
	mov	eax, DWORD PTR _pHostNode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _pHostNode$[ebp]
	mov	DWORD PTR [eax], 0
$LN21@CleanupDir:

; 1346 : 			SAFE_DELETE(pHostNode->pwszSessionName);

	mov	ecx, DWORD PTR _pHostNode$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN20@CleanupDir
	mov	edx, DWORD PTR _pHostNode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR _pHostNode$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN20@CleanupDir:

; 1347 : 
; 1348 : 			pHostNodetmp = pHostNode;

	mov	eax, DWORD PTR _pHostNode$[ebp]
	mov	DWORD PTR _pHostNodetmp$[ebp], eax

; 1349 : 			pHostNode    = pHostNode->pNext;

	mov	ecx, DWORD PTR _pHostNode$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _pHostNode$[ebp], edx

; 1350 : 			SAFE_DELETE(pHostNodetmp);

	cmp	DWORD PTR _pHostNodetmp$[ebp], 0
	je	SHORT $LN19@CleanupDir
	mov	eax, DWORD PTR _pHostNodetmp$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pHostNodetmp$[ebp], 0
$LN19@CleanupDir:

; 1351 : 		}

	jmp	$LN24@CleanupDir
$LN23@CleanupDir:

; 1352 : 
; 1353 : 		LeaveCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 1354 : 	
; 1355 : 
; 1356 :     if (g_pDeviceAddress) SAFE_RELEASE(g_pDeviceAddress);

	cmp	DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A, 0 ; g_pDeviceAddress
	je	SHORT $LN18@CleanupDir
	cmp	DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A, 0 ; g_pDeviceAddress
	je	SHORT $LN18@CleanupDir
	mov	edx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A, 0 ; g_pDeviceAddress
$LN18@CleanupDir:

; 1357 :     if (g_pHostAddress)SAFE_RELEASE(g_pHostAddress);

	cmp	DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A, 0 ; g_pHostAddress
	je	SHORT $LN16@CleanupDir
	cmp	DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A, 0 ; g_pHostAddress
	je	SHORT $LN16@CleanupDir
	mov	eax, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A, 0 ; g_pHostAddress
$LN16@CleanupDir:

; 1358 : 	if (g_bHost && g_pDPServer) {SAFE_RELEASE(g_pDPServer);}

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN14@CleanupDir
	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	je	SHORT $LN14@CleanupDir
	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	je	SHORT $LN13@CleanupDir
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	mov	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
$LN13@CleanupDir:
	jmp	SHORT $LN12@CleanupDir
$LN14@CleanupDir:

; 1359 : 	else if (g_pDPClient){ SAFE_RELEASE(g_pDPClient);}

	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	je	SHORT $LN12@CleanupDir
	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	je	SHORT $LN12@CleanupDir
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
$LN12@CleanupDir:

; 1360 :     if (g_pLobbyApp)SAFE_RELEASE(g_pLobbyApp);

	cmp	DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A, 0 ; g_pLobbyApp
	je	SHORT $LN9@CleanupDir
	cmp	DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A, 0 ; g_pLobbyApp
	je	SHORT $LN9@CleanupDir
	mov	eax, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A, 0 ; g_pLobbyApp
$LN9@CleanupDir:

; 1361 :     if (g_pVoiceServer)SAFE_RELEASE(g_pVoiceServer);

	cmp	DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A, 0 ; g_pVoiceServer
	je	SHORT $LN7@CleanupDir
	cmp	DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A, 0 ; g_pVoiceServer
	je	SHORT $LN7@CleanupDir
	mov	ecx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	mov	DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A, 0 ; g_pVoiceServer
$LN7@CleanupDir:

; 1362 :     if (g_pVoiceClient)SAFE_RELEASE(g_pVoiceClient);

	cmp	DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A, 0 ; g_pVoiceClient
	je	SHORT $LN5@CleanupDir
	cmp	DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A, 0 ; g_pVoiceClient
	je	SHORT $LN5@CleanupDir
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A, 0 ; g_pVoiceClient
$LN5@CleanupDir:

; 1363 :     if (g_wszPath)SAFE_DELETE_ARRAY(g_wszPath);

	cmp	DWORD PTR ?g_wszPath@@3PA_WA, 0		; g_wszPath
	je	SHORT $LN25@CleanupDir
	cmp	DWORD PTR ?g_wszPath@@3PA_WA, 0		; g_wszPath
	je	SHORT $LN25@CleanupDir
	mov	eax, DWORD PTR ?g_wszPath@@3PA_WA	; g_wszPath
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR ?g_wszPath@@3PA_WA, 0		; g_wszPath
$LN25@CleanupDir:

; 1364 : 	}
; 1365 : 
; 1366 : 	if ( g_bVoiceCom && !g_pDPServer && !g_pDPClient  &&(g_ipadress))  // 2002-02-07 ADDED BY S.G. ONLY IF CREATED AND WE'RE IN g_bVoiceCom MODE

	movzx	edx, BYTE PTR ?g_bVoiceCom@@3_NA	; g_bVoiceCom
	test	edx, edx
	je	SHORT $LN34@CleanupDir
	cmp	DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A, 0 ; g_pDPServer
	jne	SHORT $LN34@CleanupDir
	cmp	DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A, 0 ; g_pDPClient
	jne	SHORT $LN34@CleanupDir
	cmp	DWORD PTR ?g_ipadress@@3PADA, 0		; g_ipadress
	je	SHORT $LN34@CleanupDir

; 1367 : 	    DeleteCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__DeleteCriticalSection@4
$LN34@CleanupDir:

; 1368 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupDirectPlay@@YAXXZ ENDP				; CleanupDirectPlay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
?GetConsoleHwnd@@YAPAUHWND__@@XZ PROC			; GetConsoleHwnd

; 1270 : {

	push	ebp
	mov	ebp, esp

; 1271 :   /*  HWND hwndFound;        // This is what is returned to the caller.
; 1272 :     char pszNewWindowTitle[1024]; // Contains fabricated WindowTitle.
; 1273 :     char pszOldWindowTitle[1024]; // Contains original WindowTitle.
; 1274 : 
; 1275 :     // Fetch current window title.
; 1276 :     GetConsoleTitle(pszOldWindowTitle, 1024);
; 1277 : 
; 1278 :     // Format a "unique" NewWindowTitle.
; 1279 :     wsprintf(pszNewWindowTitle,"%d/%d", GetTickCount(), GetCurrentProcessId());
; 1280 : 
; 1281 :     // Change current window title.
; 1282 :     SetConsoleTitle(pszNewWindowTitle);
; 1283 : 
; 1284 :     // Ensure window title has been updated.
; 1285 :     Sleep(40);
; 1286 : 
; 1287 :     // Look for NewWindowTitle.
; 1288 : 	char test[1024] = "F4 3D Output";
; 1289 : //    hwndFound=FindWindow(NULL, pszNewWindowTitle);
; 1290 : hwndFound=FindWindow(NULL, test);
; 1291 :     // Restore original window title.
; 1292 :     SetConsoleTitle(pszOldWindowTitle);
; 1293 : 
; 1294 :     return(hwndFound);*/
; 1295 : 	return (mainAppWnd);

	mov	eax, DWORD PTR ?mainAppWnd@@3PAUHWND__@@A ; mainAppWnd

; 1296 : }

	pop	ebp
	ret	0
?GetConsoleHwnd@@YAPAUHWND__@@XZ ENDP			; GetConsoleHwnd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_pVoiceTest$ = -44					; size = 4
_hr$ = -40						; size = 4
_guidPlayback$ = -36					; size = 16
_guidCapture$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
?TestDirectVoice@@YAJXZ PROC				; TestDirectVoice

; 1219 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1220 :     HRESULT                 hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1221 :     IDirectPlayVoiceTest*   pVoiceTest = NULL;

	mov	DWORD PTR _pVoiceTest$[ebp], 0

; 1222 :     GUID                    guidPlayback;
; 1223 :     GUID                    guidCapture;
; 1224 : 
; 1225 :     // Create the IDirectPlayVoiceTest Object
; 1226 :     if( FAILED( hr = CoCreateInstance(CLSID_DirectPlayVoiceTest, NULL, 
; 1227 :                                     CLSCTX_INPROC_SERVER,
; 1228 :                                     IID_IDirectPlayVoiceTest, 
; 1229 :                                     (LPVOID*) &pVoiceTest ) ) )

	lea	eax, DWORD PTR _pVoiceTest$[ebp]
	push	eax
	push	OFFSET _IID_IDirectPlayVoiceTest
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlayVoiceTest
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@TestDirect

; 1230 :     {
; 1231 :         MonoPrint("Failed Creating the IDirectPlayVoiceTest Object:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DI@BCJBPDMC@Failed?5Creating?5the?5IDirectPlayV@
	call	_MonoPrint
	add	esp, 8

; 1232 :         goto LCleanup;

	jmp	$LCleanup$10
	jmp	$LCleanup$10
$LN7@TestDirect:

; 1233 :     }
; 1234 : 
; 1235 :     guidPlayback = DSDEVID_DefaultVoicePlayback;

	mov	edx, DWORD PTR _DSDEVID_DefaultVoicePlayback
	mov	DWORD PTR _guidPlayback$[ebp], edx
	mov	eax, DWORD PTR _DSDEVID_DefaultVoicePlayback+4
	mov	DWORD PTR _guidPlayback$[ebp+4], eax
	mov	ecx, DWORD PTR _DSDEVID_DefaultVoicePlayback+8
	mov	DWORD PTR _guidPlayback$[ebp+8], ecx
	mov	edx, DWORD PTR _DSDEVID_DefaultVoicePlayback+12
	mov	DWORD PTR _guidPlayback$[ebp+12], edx

; 1236 :     guidCapture = DSDEVID_DefaultVoiceCapture;

	mov	eax, DWORD PTR _DSDEVID_DefaultVoiceCapture
	mov	DWORD PTR _guidCapture$[ebp], eax
	mov	ecx, DWORD PTR _DSDEVID_DefaultVoiceCapture+4
	mov	DWORD PTR _guidCapture$[ebp+4], ecx
	mov	edx, DWORD PTR _DSDEVID_DefaultVoiceCapture+8
	mov	DWORD PTR _guidCapture$[ebp+8], edx
	mov	eax, DWORD PTR _DSDEVID_DefaultVoiceCapture+12
	mov	DWORD PTR _guidCapture$[ebp+12], eax

; 1237 : 
; 1238 :     hr = pVoiceTest->CheckAudioSetup(&guidPlayback, &guidCapture, NULL, DVFLAGS_QUERYONLY);

	push	2
	push	0
	lea	ecx, DWORD PTR _guidCapture$[ebp]
	push	ecx
	lea	edx, DWORD PTR _guidPlayback$[ebp]
	push	edx
	mov	eax, DWORD PTR _pVoiceTest$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pVoiceTest$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 1239 : 
; 1240 :     if( hr == DVERR_RUNSETUP)

	cmp	DWORD PTR _hr$[ebp], -2146107005	; 80150183H
	jne	SHORT $LN5@TestDirect
	jmp	SHORT $LCleanup$10
$LN5@TestDirect:

; 1241 :     {// this wizard is run through the falconinstaller 
; 1242 :       /*  hwnd = NULL;//GetConsoleHwnd();
; 1243 : 
; 1244 :         if( FAILED( hr = pVoiceTest->CheckAudioSetup(&guidPlayback, &guidCapture, hwnd, DVFLAGS_ALLOWBACK ) ) )
; 1245 :         {
; 1246 :             MonoPrint("Failed CheckAudioSetup:  0x%X\n", hr);
; 1247 :             goto LCleanup;
; 1248 :         }*/
; 1249 :     }
; 1250 :     else if( FAILED( hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LCleanup$10

; 1251 :     {
; 1252 :         MonoPrint("Failed CheckAudioSetup:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@OOPFCNCA@Failed?5CheckAudioSetup?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LCleanup$10:

; 1253 :         goto LCleanup;
; 1254 :     }
; 1255 : 
; 1256 : LCleanup:
; 1257 :     SAFE_RELEASE(pVoiceTest);

	cmp	DWORD PTR _pVoiceTest$[ebp], 0
	je	SHORT $LN1@TestDirect
	mov	edx, DWORD PTR _pVoiceTest$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pVoiceTest$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR _pVoiceTest$[ebp], 0
$LN1@TestDirect:

; 1258 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1259 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?TestDirectVoice@@YAJXZ ENDP				; TestDirectVoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hr$ = -4						; size = 4
?LobbyLaunch@@YAJXZ PROC				; LobbyLaunch

; 996  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 997  :     HRESULT                     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 998  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 999  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LobbyLaunch@@YAJXZ ENDP				; LobbyLaunch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hr$ = -4						; size = 4
?UnRegister@@YAJXZ PROC					; UnRegister

; 980  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 981  :     HRESULT     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 982  : 
; 983  :     hr = g_pLobbyApp->UnRegisterProgram(&g_guidApp, 0);

	push	0
	push	OFFSET ?g_guidApp@@3U_GUID@@A		; g_guidApp
	mov	eax, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 984  : 
; 985  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 986  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UnRegister@@YAJXZ ENDP					; UnRegister
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pwszExecutable$ = -76					; size = 4
_hr$ = -72						; size = 4
_i$ = -68						; size = 4
_pwszPath$ = -64					; size = 4
_dplDesc$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
?Register@@YAJXZ PROC					; Register

; 934  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 935  :     HRESULT             hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 936  :     DPL_PROGRAM_DESC    dplDesc;
; 937  :     WCHAR*              pwszPath = NULL;

	mov	DWORD PTR _pwszPath$[ebp], 0

; 938  :     WCHAR*              pwszExecutable = NULL;

	mov	DWORD PTR _pwszExecutable$[ebp], 0

; 939  :     int                 i;
; 940  : 
; 941  :     ZeroMemory(&dplDesc, sizeof(DPL_PROGRAM_DESC));

	push	56					; 00000038H
	push	0
	lea	eax, DWORD PTR _dplDesc$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 942  :     dplDesc.dwSize = sizeof(DPL_PROGRAM_DESC);

	mov	DWORD PTR _dplDesc$[ebp], 56		; 00000038H

; 943  :     dplDesc.guidApplication = g_guidApp;

	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A
	mov	DWORD PTR _dplDesc$[ebp+8], ecx
	mov	edx, DWORD PTR ?g_guidApp@@3U_GUID@@A+4
	mov	DWORD PTR _dplDesc$[ebp+12], edx
	mov	eax, DWORD PTR ?g_guidApp@@3U_GUID@@A+8
	mov	DWORD PTR _dplDesc$[ebp+16], eax
	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A+12
	mov	DWORD PTR _dplDesc$[ebp+20], ecx

; 944  : 
; 945  :     // We need to parse out the path and the exe name from the input value
; 946  :     for (i = wcslen(g_wszPath); i >=0 && g_wszPath[i] != L'\\'; i--);

	mov	edx, DWORD PTR ?g_wszPath@@3PA_WA	; g_wszPath
	push	edx
	call	_wcslen
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN6@Register
$LN5@Register:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Register:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@Register
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?g_wszPath@@3PA_WA	; g_wszPath
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN4@Register
	jmp	SHORT $LN5@Register
$LN4@Register:

; 947  : 
; 948  :     pwszPath = new WCHAR[i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pwszPath$[ebp], eax

; 949  : 
; 950  :     if( pwszPath == NULL)

	cmp	DWORD PTR _pwszPath$[ebp], 0
	jne	SHORT $LN3@Register

; 951  :     {
; 952  :         MonoPrint("Failed parsing path.");

	push	OFFSET ??_C@_0BF@GGNCMCEJ@Failed?5parsing?5path?4?$AA@
	call	_MonoPrint
	add	esp, 4

; 953  :         hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H

; 954  :         goto LCleanup;

	jmp	SHORT $LCleanup$9
	jmp	SHORT $LCleanup$9
$LN3@Register:

; 955  :     }
; 956  :     
; 957  :     wcsncpy(pwszPath, g_wszPath, i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_wszPath@@3PA_WA	; g_wszPath
	push	edx
	mov	eax, DWORD PTR _pwszPath$[ebp]
	push	eax
	call	_wcsncpy
	add	esp, 12					; 0000000cH

; 958  :     pwszPath[i] = L'\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pwszPath$[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 959  :     pwszExecutable = g_wszPath + i + 1;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?g_wszPath@@3PA_WA	; g_wszPath
	lea	eax, DWORD PTR [edx+ecx*2+2]
	mov	DWORD PTR _pwszExecutable$[ebp], eax

; 960  : 
; 961  :     dplDesc.pwszApplicationName = pwszExecutable;

	mov	ecx, DWORD PTR _pwszExecutable$[ebp]
	mov	DWORD PTR _dplDesc$[ebp+24], ecx

; 962  :     dplDesc.pwszExecutableFilename = pwszExecutable;

	mov	edx, DWORD PTR _pwszExecutable$[ebp]
	mov	DWORD PTR _dplDesc$[ebp+40], edx

; 963  :     dplDesc.pwszExecutablePath = pwszPath;

	mov	eax, DWORD PTR _pwszPath$[ebp]
	mov	DWORD PTR _dplDesc$[ebp+44], eax

; 964  : 
; 965  :     hr = g_pLobbyApp->RegisterProgram(&dplDesc, 0);

	push	0
	lea	ecx, DWORD PTR _dplDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
$LCleanup$9:

; 966  : LCleanup:
; 967  :     SAFE_DELETE_ARRAY(pwszPath);

	cmp	DWORD PTR _pwszPath$[ebp], 0
	je	SHORT $LN1@Register
	mov	eax, DWORD PTR _pwszPath$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _pwszPath$[ebp], 0
$LN1@Register:

; 968  : 
; 969  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 970  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Register@@YAJXZ ENDP					; Register
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_dpnBuffer$ = -528					; size = 8
_hr$ = -520						; size = 4
_wszData$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
?SendDirectPlayMessage@@YAJXZ PROC			; SendDirectPlayMessage

; 884  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 885  :     HRESULT         hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 886  :     DPN_BUFFER_DESC dpnBuffer;
; 887  :     WCHAR           wszData[256];
; 888  : 
; 889  :     // Get the data from the user
; 890  :     MonoPrint("\nPlease Enter a String.\n");

	push	OFFSET ??_C@_0BJ@DOENCOEH@?6Please?5Enter?5a?5String?4?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 891  :     wscanf(L"%ls", wszData);

	lea	eax, DWORD PTR _wszData$[ebp]
	push	eax
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	call	_wscanf
	add	esp, 8

; 892  : 
; 893  :     dpnBuffer.pBufferData = (BYTE*) wszData;

	lea	ecx, DWORD PTR _wszData$[ebp]
	mov	DWORD PTR _dpnBuffer$[ebp+4], ecx

; 894  :     dpnBuffer.dwBufferSize = 2 * (wcslen(wszData) + 1);

	lea	edx, DWORD PTR _wszData$[ebp]
	push	edx
	call	_wcslen
	add	esp, 4
	lea	eax, DWORD PTR [eax+eax+2]
	mov	DWORD PTR _dpnBuffer$[ebp], eax

; 895  : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN4@SendDirect

; 896  : 	{
; 897  : 		if( FAILED( hr = g_pDPServer->SendTo(DPNID_ALL_PLAYERS_GROUP,  // dpnid
; 898  : 										&dpnBuffer,             // pBufferDesc
; 899  : 										1,                      // cBufferDesc
; 900  : 										0,                      // dwTimeOut
; 901  : 										NULL,                   // pvAsyncContext
; 902  : 										NULL,                   // pvAsyncHandle
; 903  : 										DPNSEND_SYNC |
; 904  : 										DPNSEND_NOLOOPBACK ) ) )   // dwFlags

	push	-2147483616				; 80000020H
	push	0
	push	0
	push	0
	push	1
	lea	ecx, DWORD PTR _dpnBuffer$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@SendDirect

; 905  : 		{
; 906  : 			MonoPrint("Failed Sending Data:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN3@SendDirect:

; 907  : 		}
; 908  : 	}
; 909  : 	else

	jmp	SHORT $LN2@SendDirect
$LN4@SendDirect:

; 910  : 	{
; 911  : 		if( FAILED( hr = g_pDPClient->Send(//DPNID_ALL_PLAYERS_GROUP,  // dpnid
; 912  : 										&dpnBuffer,             // pBufferDesc
; 913  : 										1,                      // cBufferDesc
; 914  : 										0,                      // dwTimeOut
; 915  : 										NULL,                   // pvAsyncContext
; 916  : 										NULL,                   // pvAsyncHandle
; 917  : 										DPNSEND_SYNC |
; 918  : 										DPNSEND_NOLOOPBACK ) ) )   // dwFlags

	push	-2147483616				; 80000020H
	push	0
	push	0
	push	0
	push	1
	lea	ecx, DWORD PTR _dpnBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SendDirect

; 919  : 		{
; 920  : 			MonoPrint("Failed Sending Data:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@
	call	_MonoPrint
	add	esp, 8
$LN2@SendDirect:

; 921  : 		}
; 922  : 	}
; 923  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 924  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SendDirectPlayMessage@@YAJXZ ENDP			; SendDirectPlayMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_pHostAddress$ = -84					; size = 4
_hr$ = -80						; size = 4
_dpnAppDesc$ = -76					; size = 72
__$ArrayPad$ = -4					; size = 4
?ConnectToSession@@YAJXZ PROC				; ConnectToSession

; 836  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 837  :     HRESULT                     hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H

; 838  :     DPN_APPLICATION_DESC        dpnAppDesc;
; 839  :     IDirectPlay8Address*        pHostAddress = NULL;

	mov	DWORD PTR _pHostAddress$[ebp], 0

; 840  : 
; 841  : 
; 842  :     ZeroMemory(&dpnAppDesc, sizeof(DPN_APPLICATION_DESC));

	push	72					; 00000048H
	push	0
	lea	eax, DWORD PTR _dpnAppDesc$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 843  :     dpnAppDesc.dwSize = sizeof(DPN_APPLICATION_DESC);

	mov	DWORD PTR _dpnAppDesc$[ebp], 72		; 00000048H

; 844  :     dpnAppDesc.guidApplication = g_guidApp;

	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A
	mov	DWORD PTR _dpnAppDesc$[ebp+24], ecx
	mov	edx, DWORD PTR ?g_guidApp@@3U_GUID@@A+4
	mov	DWORD PTR _dpnAppDesc$[ebp+28], edx
	mov	eax, DWORD PTR ?g_guidApp@@3U_GUID@@A+8
	mov	DWORD PTR _dpnAppDesc$[ebp+32], eax
	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A+12
	mov	DWORD PTR _dpnAppDesc$[ebp+36], ecx

; 845  : 
; 846  :     // Simply connect to the first one in the list
; 847  :     EnterCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__EnterCriticalSection@4

; 848  : 
; 849  :     if( g_pHostList && SUCCEEDED(hr = g_pHostList->pHostAddress->Duplicate(&pHostAddress ) ) )

	cmp	DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A, 0 ; g_pHostList
	je	SHORT $LN4@ConnectToS
	lea	edx, DWORD PTR _pHostAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A ; g_pHostList
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A ; g_pHostList
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN4@ConnectToS

; 850  :     {
; 851  :         hr = g_pDPClient->Connect(&dpnAppDesc,        // pdnAppDesc
; 852  :                             pHostAddress,       // pHostAddr
; 853  :                             g_pDeviceAddress,   // pDeviceInfo
; 854  :                             NULL,               // pdnSecurity
; 855  :                             NULL,               // pdnCredentials
; 856  :                             NULL, 0,            // pvUserConnectData/Size
; 857  :                           //  NULL,               // pvPlayerContext
; 858  :                             NULL,               // pvAsyncContext
; 859  :                             NULL,               // pvAsyncHandle
; 860  :                             DPNCONNECT_SYNC);   // dwFlags

	push	-2147483648				; 80000000H
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	eax
	mov	ecx, DWORD PTR _pHostAddress$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dpnAppDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	edx
	mov	eax, DWORD PTR [ecx+28]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax

; 861  : 
; 862  :         if( FAILED( hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@ConnectToS

; 863  :             MonoPrint("Failed Connecting to Host:  0x%x\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CC@OODMJMFB@Failed?5Connecting?5to?5Host?3?5?50x?$CFx@
	call	_MonoPrint
	add	esp, 8
$LN3@ConnectToS:

; 864  :     }
; 865  :     else

	jmp	SHORT $LN2@ConnectToS
$LN4@ConnectToS:

; 866  :     {
; 867  :         MonoPrint("Failed Duplicating Host Address:  0x%x\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CI@KFIHDEOM@Failed?5Duplicating?5Host?5Address?3@
	call	_MonoPrint
	add	esp, 8
$LN2@ConnectToS:

; 868  :     }
; 869  : 
; 870  :     LeaveCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 871  : 
; 872  :     SAFE_RELEASE(pHostAddress);

	cmp	DWORD PTR _pHostAddress$[ebp], 0
	je	SHORT $LN1@ConnectToS
	mov	eax, DWORD PTR _pHostAddress$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pHostAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _pHostAddress$[ebp], 0
$LN1@ConnectToS:

; 873  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 874  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ConnectToSession@@YAJXZ ENDP				; ConnectToSession
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_pwszURL$ = -344					; size = 4
_str$ = -340						; size = 4
_hr$ = -336						; size = 4
_dpAppDesc$ = -332					; size = 72
_wszHost$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_ip$ = 8						; size = 4
?EnumDirectPlayHosts@@YAJPAD@Z PROC			; EnumDirectPlayHosts

; 633  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 634  :     HRESULT                 hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 635  :     WCHAR                   wszHost[128];
; 636  :     DPN_APPLICATION_DESC    dpAppDesc;
; 637  :     WCHAR*                  pwszURL = NULL;

	mov	DWORD PTR _pwszURL$[ebp], 0

; 638  : 
; 639  : const char* str = ip;

	mov	eax, DWORD PTR _ip$[ebp]
	mov	DWORD PTR _str$[ebp], eax

; 640  :  mbstowcs(&wszHost[0], str, 128);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, 2
	imul	edx, 0
	lea	eax, DWORD PTR _wszHost$[ebp+edx]
	push	eax
	call	_mbstowcs
	add	esp, 12					; 0000000cH

; 641  : 
; 642  :     if( FAILED( hr = CreateHostAddress(wszHost ) ) )

	lea	ecx, DWORD PTR _wszHost$[ebp]
	push	ecx
	call	?CreateHostAddress@@YAJPA_W@Z		; CreateHostAddress
	add	esp, 4
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@EnumDirect

; 643  :     {
; 644  :         MonoPrint("Failed Creating Host Address:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CF@INFLBKCP@Failed?5Creating?5Host?5Address?3?5?50@
	call	_MonoPrint
	add	esp, 8

; 645  :         goto LCleanup;

	jmp	$LCleanup$10
	jmp	$LCleanup$10
$LN7@EnumDirect:

; 646  :     }
; 647  : 
; 648  :     // Now set up the Application Description
; 649  :     ZeroMemory(&dpAppDesc, sizeof(DPN_APPLICATION_DESC));

	push	72					; 00000048H
	push	0
	lea	eax, DWORD PTR _dpAppDesc$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 650  :     dpAppDesc.dwSize = sizeof(DPN_APPLICATION_DESC);

	mov	DWORD PTR _dpAppDesc$[ebp], 72		; 00000048H

; 651  :     dpAppDesc.guidApplication = g_guidApp;

	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A
	mov	DWORD PTR _dpAppDesc$[ebp+24], ecx
	mov	edx, DWORD PTR ?g_guidApp@@3U_GUID@@A+4
	mov	DWORD PTR _dpAppDesc$[ebp+28], edx
	mov	eax, DWORD PTR ?g_guidApp@@3U_GUID@@A+8
	mov	DWORD PTR _dpAppDesc$[ebp+32], eax
	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A+12
	mov	DWORD PTR _dpAppDesc$[ebp+36], ecx

; 652  : 
; 653  :     // We now have the host address so lets enum
; 654  : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN5@EnumDirect

; 655  : 	{
; 656  : 	goto LCleanup;

	jmp	SHORT $LCleanup$10
	jmp	SHORT $LCleanup$10

; 657  : 	}
; 658  : 	else

	jmp	SHORT $LCleanup$10
$LN5@EnumDirect:

; 659  : 	{
; 660  : 		if( FAILED( hr = g_pDPClient->EnumHosts(&dpAppDesc,            // pApplicationDesc
; 661  : 											g_pHostAddress,     // pdpaddrHost
; 662  : 											g_pDeviceAddress,   // pdpaddrDeviceInfo
; 663  : 											NULL, 0,            // pvUserEnumData, size
; 664  : 											4,                  // dwEnumCount
; 665  : 											0,                  // dwRetryInterval
; 666  : 											0,                  // dwTimeOut
; 667  : 											NULL,               // pvUserContext
; 668  : 											NULL,               // pAsyncHandle
; 669  : 											DPNENUMHOSTS_SYNC ) ) )// dwFlags

	push	-2147483648				; 80000000H
	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	push	0
	mov	edx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	edx
	mov	eax, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	push	eax
	lea	ecx, DWORD PTR _dpAppDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LCleanup$10

; 670  : 		{
; 671  : 			MonoPrint("Failed Enumerating the Hosts:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@NIKPOKML@Failed?5Enumerating?5the?5Hosts?3?5?50@
	call	_MonoPrint
	add	esp, 8
$LCleanup$10:

; 672  : 			goto LCleanup;
; 673  : 		}
; 674  : 	}
; 675  : 
; 676  : LCleanup:
; 677  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 678  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?EnumDirectPlayHosts@@YAJPAD@Z ENDP			; EnumDirectPlayHosts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hr$ = -336						; size = 4
_dpAppDesc$ = -332					; size = 72
_wszSession$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?HostSession@@YAJXZ PROC				; HostSession

; 789  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 790  :     HRESULT                 hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 791  :     DPN_APPLICATION_DESC    dpAppDesc;
; 792  :     WCHAR                   wszSession[128];
; 793  : 
; 794  : 
; 795  :     // Prompt the user for the session name
; 796  :     MonoPrint("\nHostign a Voice Session.\n");

	push	OFFSET ??_C@_0BL@BNIJKMCP@?6Hostign?5a?5Voice?5Session?4?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 797  :     //wscanf(L"%ls", wszSession);
; 798  : 	//wcscpy(wszSession,L "FALCON");
; 799  : 	wcscpy(wszSession, L"FALCON");

	push	OFFSET ??_C@_1O@JKKIHEHH@?$AAF?$AAA?$AAL?$AAC?$AAO?$AAN?$AA?$AA@
	lea	eax, DWORD PTR _wszSession$[ebp]
	push	eax
	call	_wcscpy
	add	esp, 8

; 800  : 
; 801  :     // Now set up the Application Description
; 802  :     ZeroMemory(&dpAppDesc, sizeof(DPN_APPLICATION_DESC));

	push	72					; 00000048H
	push	0
	lea	ecx, DWORD PTR _dpAppDesc$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 803  :     dpAppDesc.dwSize = sizeof(DPN_APPLICATION_DESC);

	mov	DWORD PTR _dpAppDesc$[ebp], 72		; 00000048H

; 804  :     dpAppDesc.guidApplication = g_guidApp;

	mov	edx, DWORD PTR ?g_guidApp@@3U_GUID@@A
	mov	DWORD PTR _dpAppDesc$[ebp+24], edx
	mov	eax, DWORD PTR ?g_guidApp@@3U_GUID@@A+4
	mov	DWORD PTR _dpAppDesc$[ebp+28], eax
	mov	ecx, DWORD PTR ?g_guidApp@@3U_GUID@@A+8
	mov	DWORD PTR _dpAppDesc$[ebp+32], ecx
	mov	edx, DWORD PTR ?g_guidApp@@3U_GUID@@A+12
	mov	DWORD PTR _dpAppDesc$[ebp+36], edx

; 805  :     dpAppDesc.pwszSessionName = wszSession;

	lea	eax, DWORD PTR _wszSession$[ebp]
	mov	DWORD PTR _dpAppDesc$[ebp+48], eax

; 806  :     dpAppDesc.dwFlags = DPNSESSION_NODPNSVR|DPNSESSION_CLIENT_SERVER;//|DPNSESSION_MIGRATE_HOST;

	mov	DWORD PTR _dpAppDesc$[ebp+4], 65	; 00000041H

; 807  : 
; 808  :     // We are now ready to host the app
; 809  :     if( FAILED( hr = g_pDPServer->Host(&dpAppDesc,             // AppDesc
; 810  :                                 &g_pDeviceAddress, 1,   // Device Address
; 811  :                                 NULL, NULL,             // Reserved
; 812  :                                 NULL,                   // Player Context
; 813  :                                 0 ) ) )                    // dwFlags

	push	0
	push	0
	push	0
	push	0
	push	1
	push	OFFSET ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	lea	ecx, DWORD PTR _dpAppDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+52]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@HostSessio

; 814  :     {
; 815  :         MonoPrint("Failed Hosting:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@OOAJJOGK@Failed?5Hosting?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 816  :         goto LCleanup;

	jmp	SHORT $LCleanup$6
	jmp	SHORT $LCleanup$6

; 817  :     }
; 818  :     else

	jmp	SHORT $LCleanup$6
$LN3@HostSessio:

; 819  :     {
; 820  :         MonoPrint("Currently Hosting...\n");

	push	OFFSET ??_C@_0BG@HANNNDDN@Currently?5Hosting?4?4?4?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LCleanup$6:

; 821  :     }
; 822  : 
; 823  : 
; 824  : LCleanup:
; 825  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 826  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?HostSession@@YAJXZ ENDP				; HostSession
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_pwszHost$ = 8						; size = 4
?CreateHostAddress@@YAJPA_W@Z PROC			; CreateHostAddress

; 739  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 740  :     HRESULT         hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 741  : 
; 742  :     // Create our IDirectPlay8Address Host Address
; 743  :     if( FAILED( hr = CoCreateInstance(CLSID_DirectPlay8Address, NULL,
; 744  :                                     CLSCTX_INPROC_SERVER,
; 745  :                                     IID_IDirectPlay8Address,
; 746  :                                     (LPVOID*) &g_pHostAddress ) ) )

	push	OFFSET ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	push	OFFSET _IID_IDirectPlay8Address
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlay8Address
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@CreateHost

; 747  :     {
; 748  :         MonoPrint("Failed Creating the IDirectPlay8Address Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DH@MDJKLKEI@Failed?5Creating?5the?5IDirectPlay8@
	call	_MonoPrint
	add	esp, 8

; 749  :         goto LCleanup;

	jmp	$LCleanup$12
	jmp	$LCleanup$12
$LN9@CreateHost:

; 750  :     }
; 751  :     
; 752  :     // Set the SP for our Host Address
; 753  :     if( FAILED( hr = g_pHostAddress->SetSP(&CLSID_DP8SP_TCPIP ) ) )

	push	OFFSET _CLSID_DP8SP_TCPIP
	mov	ecx, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	push	eax
	mov	ecx, DWORD PTR [edx+52]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@CreateHost

; 754  :     {
; 755  :         MonoPrint("Failed Setting the Service Provider:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@ICFPPHIP@Failed?5Setting?5the?5Service?5Provi@
	call	_MonoPrint
	add	esp, 8

; 756  :         goto LCleanup;

	jmp	$LCleanup$12
	jmp	$LCleanup$12
$LN7@CreateHost:

; 757  :     }
; 758  : 
; 759  :     // Set the hostname into the address
; 760  :     if( FAILED( hr = g_pHostAddress->AddComponent(DPNA_KEY_HOSTNAME, pwszHost,
; 761  :                                                     2*(wcslen(pwszHost) + 1), /*bytes*/
; 762  :                                                     DPNA_DATATYPE_STRING ) ) )

	push	1
	mov	eax, DWORD PTR _pwszHost$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _pwszHost$[ebp]
	push	edx
	push	OFFSET ??_C@_1BC@FGKBPBF@?$AAh?$AAo?$AAs?$AAt?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
	mov	eax, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	push	edx
	mov	eax, DWORD PTR [ecx+72]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@CreateHost

; 763  :     {
; 764  :         MonoPrint("Failed Adding Hostname to Host Address:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CP@BLLMEPLH@Failed?5Adding?5Hostname?5to?5Host?5A@
	call	_MonoPrint
	add	esp, 8

; 765  :         goto LCleanup;

	jmp	SHORT $LCleanup$12
	jmp	SHORT $LCleanup$12
$LN5@CreateHost:

; 766  :     }
; 767  : 	if (g_ddwPorthost)

	cmp	DWORD PTR ?g_ddwPorthost@@3KA, 0	; g_ddwPorthost
	je	SHORT $LCleanup$12

; 768  : 	{
; 769  : 		if( FAILED( hr = g_pHostAddress->AddComponent(	DPNA_KEY_PORT,           //pwszName
; 770  : 														&g_ddwPorthost, sizeof(g_ddwPorthost),   //lpvData, dwDataSize
; 771  : 														DPNA_DATATYPE_DWORD )) )     //dwDataType 

	push	2
	push	4
	push	OFFSET ?g_ddwPorthost@@3KA		; g_ddwPorthost
	push	OFFSET ??_C@_19EBEADLAH@?$AAp?$AAo?$AAr?$AAt?$AA?$AA@
	mov	edx, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pHostAddress@@3PAUIDirectPlay8Address@@A ; g_pHostAddress
	push	ecx
	mov	edx, DWORD PTR [eax+72]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LCleanup$12

; 772  : 		{
; 773  : 			printf("Failed Adding Hostname to Host port:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CM@FMEMLKBK@Failed?5Adding?5Hostname?5to?5Host?5p@
	call	_printf
	add	esp, 8
$LCleanup$12:

; 774  : 			goto LCleanup;
; 775  : 		}
; 776  : 	}
; 777  : LCleanup:
; 778  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 779  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateHostAddress@@YAJPA_W@Z ENDP			; CreateHostAddress
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hr$ = -4						; size = 4
?CreateDeviceAddress@@YAJXZ PROC			; CreateDeviceAddress

; 688  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 689  :     HRESULT         hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 690  : 
; 691  :     // Create our IDirectPlay8Address Device Address
; 692  :     if( FAILED( hr = CoCreateInstance(CLSID_DirectPlay8Address, NULL,
; 693  :                                     CLSCTX_INPROC_SERVER,
; 694  :                                     IID_IDirectPlay8Address,
; 695  :                                     (LPVOID*) &g_pDeviceAddress ) ) )

	push	OFFSET ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	OFFSET _IID_IDirectPlay8Address
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlay8Address
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN11@CreateDevi

; 696  :     {
; 697  :         MonoPrint("Failed Creating the IDirectPlay8Address Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DH@MDJKLKEI@Failed?5Creating?5the?5IDirectPlay8@
	call	_MonoPrint
	add	esp, 8

; 698  :         goto LCleanup;

	jmp	$LCleanup$14
	jmp	$LCleanup$14
$LN11@CreateDevi:

; 699  :     }
; 700  :     
; 701  :     // Set the SP for our Device Address
; 702  :     if( FAILED( hr = g_pDeviceAddress->SetSP(&CLSID_DP8SP_TCPIP ) ) )

	push	OFFSET _CLSID_DP8SP_TCPIP
	mov	ecx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	eax
	mov	ecx, DWORD PTR [edx+52]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@CreateDevi

; 703  :     {
; 704  :         MonoPrint("Failed Setting the Service Provider:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@ICFPPHIP@Failed?5Setting?5the?5Service?5Provi@
	call	_MonoPrint
	add	esp, 8

; 705  :         goto LCleanup;

	jmp	$LCleanup$14
	jmp	$LCleanup$14
$LN9@CreateDevi:

; 706  :     }
; 707  : 	if (g_bHost &&g_ddwPorthost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN7@CreateDevi
	cmp	DWORD PTR ?g_ddwPorthost@@3KA, 0	; g_ddwPorthost
	je	SHORT $LN7@CreateDevi

; 708  : 	{
; 709  : 		if( FAILED( hr = g_pDeviceAddress->AddComponent(	DPNA_KEY_PORT,           //pwszName
; 710  : 														&g_ddwPorthost, sizeof(g_ddwPorthost),   //lpvData, dwDataSize
; 711  : 														DPNA_DATATYPE_DWORD )) )     //dwDataType 

	push	2
	push	4
	push	OFFSET ?g_ddwPorthost@@3KA		; g_ddwPorthost
	push	OFFSET ??_C@_19EBEADLAH@?$AAp?$AAo?$AAr?$AAt?$AA?$AA@
	mov	eax, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	edx
	mov	eax, DWORD PTR [ecx+72]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@CreateDevi

; 712  : 		{
; 713  : 			printf("Failed Adding Hostname to Host port:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CM@FMEMLKBK@Failed?5Adding?5Hostname?5to?5Host?5p@
	call	_printf
	add	esp, 8

; 714  : 			goto LCleanup;

	jmp	SHORT $LCleanup$14
	jmp	SHORT $LCleanup$14
$LN6@CreateDevi:

; 715  : 		}
; 716  : 	}

	jmp	SHORT $LCleanup$14
$LN7@CreateDevi:

; 717  : 	else if (!g_bHost && g_ddwPortclient  )

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	jne	SHORT $LCleanup$14
	cmp	DWORD PTR ?g_ddwPortclient@@3KA, 0	; g_ddwPortclient
	je	SHORT $LCleanup$14

; 718  : 	{
; 719  : 		if( FAILED( hr = g_pDeviceAddress->AddComponent(	DPNA_KEY_PORT,           //pwszName
; 720  : 														&g_ddwPortclient, sizeof(g_ddwPortclient),   //lpvData, dwDataSize
; 721  : 														DPNA_DATATYPE_DWORD )) )     //dwDataType 

	push	2
	push	4
	push	OFFSET ?g_ddwPortclient@@3KA		; g_ddwPortclient
	push	OFFSET ??_C@_19EBEADLAH@?$AAp?$AAo?$AAr?$AAt?$AA?$AA@
	mov	edx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDeviceAddress@@3PAUIDirectPlay8Address@@A ; g_pDeviceAddress
	push	ecx
	mov	edx, DWORD PTR [eax+72]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LCleanup$14

; 722  : 		{
; 723  : 			printf("Failed Adding Hostname to Host port:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CM@FMEMLKBK@Failed?5Adding?5Hostname?5to?5Host?5p@
	call	_printf
	add	esp, 8
$LCleanup$14:

; 724  : 			goto LCleanup;
; 725  : 		}
; 726  : 	}
; 727  : LCleanup:
; 728  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 729  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateDeviceAddress@@YAJXZ ENDP			; CreateDeviceAddress
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
$T1 = -192						; size = 4
$T2 = -188						; size = 4
$T3 = -184						; size = 4
$T4 = -180						; size = 4
_dvid$ = -176						; size = 4
_dwSize$5 = -172					; size = 4
_dwNumElements$6 = -168					; size = 4
_pGuid$7 = -164						; size = 4
_pdvCompressionInfo$8 = -160				; size = 4
_dwIndex$9 = -156					; size = 4
_pBuffer$10 = -152					; size = 4
_pVoiceClient$11 = -148					; size = 4
_hr$12 = -144						; size = 4
_hr$ = -140						; size = 4
_dvSoundDeviceConfig$ = -136				; size = 64
_dvClientConfig$ = -72					; size = 32
_dvSessionDesc$ = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?InitDirectPlayVoice@@YAJXZ PROC			; InitDirectPlayVoice

; 1010 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1011 :     HRESULT             hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1012 :     DVSESSIONDESC       dvSessionDesc;
; 1013 :     DVSOUNDDEVICECONFIG dvSoundDeviceConfig;
; 1014 :     DVCLIENTCONFIG      dvClientConfig;
; 1015 :     DVID                dvid;
; 1016 : 
; 1017 :     // Init the server if we are the host
; 1018 :     if( g_bHost )

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	$LN39@InitDirect

; 1019 :     {
; 1020 :         // Create the IDirectPlayVoiceServer Object
; 1021 :         if( FAILED( hr = CoCreateInstance(CLSID_DirectPlayVoiceServer, NULL, 
; 1022 :                                         CLSCTX_INPROC_SERVER,
; 1023 :                                         IID_IDirectPlayVoiceServer, 
; 1024 :                                         (LPVOID*) &g_pVoiceServer ) ) )

	push	OFFSET ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	push	OFFSET _IID_IDirectPlayVoiceServer
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlayVoiceServer
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN38@InitDirect

; 1025 :         {
; 1026 :             MonoPrint("Failed Creating the IDirectPlayVoiceServer Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DK@KPJIEDGI@Failed?5Creating?5the?5IDirectPlayV@
	call	_MonoPrint
	add	esp, 8

; 1027 :             goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN38@InitDirect:

; 1028 :         }
; 1029 : 
; 1030 :         // Init the Voice server
; 1031 : 		if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN36@InitDirect

; 1032 : 		{
; 1033 : 			if( FAILED( hr = g_pVoiceServer->Initialize(g_pDPServer, DirectVoiceServerMessageHandler, NULL, 0, 0 ) ) )

	push	0
	push	0
	push	0
	push	OFFSET ?DirectVoiceServerMessageHandler@@YGJPAXK0@Z ; DirectVoiceServerMessageHandler
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN35@InitDirect

; 1034 : 			{
; 1035 : 				MonoPrint("Failed Initializing the IDirectPlayVoiceServer Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@HOFBIGMO@Failed?5Initializing?5the?5IDirectP@
	call	_MonoPrint
	add	esp, 8

; 1036 : 				goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN35@InitDirect:

; 1037 : 			}
; 1038 : 		}
; 1039 : 		else

	jmp	SHORT $LN33@InitDirect
$LN36@InitDirect:

; 1040 : 		{
; 1041 : 			if( FAILED( hr = g_pVoiceServer->Initialize(g_pDPClient, DirectVoiceServerMessageHandler, NULL, 0, 0 ) ) )

	push	0
	push	0
	push	0
	push	OFFSET ?DirectVoiceServerMessageHandler@@YGJPAXK0@Z ; DirectVoiceServerMessageHandler
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@InitDirect

; 1042 : 			{
; 1043 : 				MonoPrint("Failed Initializing the IDirectPlayVoiceServer Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@HOFBIGMO@Failed?5Initializing?5the?5IDirectP@
	call	_MonoPrint
	add	esp, 8

; 1044 : 				goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN33@InitDirect:

; 1045 : 			}
; 1046 : 		}
; 1047 : 
; 1048 :         ZeroMemory(&dvSessionDesc, sizeof(DVSESSIONDESC));

	push	36					; 00000024H
	push	0
	lea	ecx, DWORD PTR _dvSessionDesc$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1049 :         dvSessionDesc.dwSize = sizeof(DVSESSIONDESC);

	mov	DWORD PTR _dvSessionDesc$[ebp], 36	; 00000024H

; 1050 : 		if (g_bServer)

	movzx	edx, BYTE PTR ?g_bServer@@3_NA		; g_bServer
	test	edx, edx
	je	SHORT $LN30@InitDirect

; 1051 :         dvSessionDesc.dwSessionType = DVSESSIONTYPE_MIXING;

	mov	DWORD PTR _dvSessionDesc$[ebp+8], 2

; 1052 : 		else

	jmp	SHORT $LN29@InitDirect
$LN30@InitDirect:

; 1053 :         dvSessionDesc.dwSessionType = DVSESSIONTYPE_FORWARDING;

	mov	DWORD PTR _dvSessionDesc$[ebp+8], 3
$LN29@InitDirect:

; 1054 : 
; 1055 :         dvSessionDesc.dwBufferQuality = DVBUFFERQUALITY_DEFAULT;

	mov	DWORD PTR _dvSessionDesc$[ebp+28], 0

; 1056 :         dvSessionDesc.guidCT = DPVCTGUID_DEFAULT;

	mov	eax, DWORD PTR _DPVCTGUID_SC03
	mov	DWORD PTR _dvSessionDesc$[ebp+12], eax
	mov	ecx, DWORD PTR _DPVCTGUID_SC03+4
	mov	DWORD PTR _dvSessionDesc$[ebp+16], ecx
	mov	edx, DWORD PTR _DPVCTGUID_SC03+8
	mov	DWORD PTR _dvSessionDesc$[ebp+20], edx
	mov	eax, DWORD PTR _DPVCTGUID_SC03+12
	mov	DWORD PTR _dvSessionDesc$[ebp+24], eax

; 1057 :         dvSessionDesc.dwBufferAggressiveness = DVBUFFERAGGRESSIVENESS_DEFAULT;

	mov	DWORD PTR _dvSessionDesc$[ebp+32], 0

; 1058 : 
; 1059 : 
; 1060 : /////// find and set the codec
; 1061 : 		
; 1062 : 			LPDIRECTPLAYVOICECLIENT pVoiceClient        = NULL;

	mov	DWORD PTR _pVoiceClient$11[ebp], 0

; 1063 : 			LPDVCOMPRESSIONINFO     pdvCompressionInfo  = NULL;

	mov	DWORD PTR _pdvCompressionInfo$8[ebp], 0

; 1064 : 			LPGUID  pGuid         = NULL;

	mov	DWORD PTR _pGuid$7[ebp], 0

; 1065 : 			LPBYTE  pBuffer       = NULL;

	mov	DWORD PTR _pBuffer$10[ebp], 0

; 1066 : 			DWORD   dwSize        = 0;

	mov	DWORD PTR _dwSize$5[ebp], 0

; 1067 : 			DWORD   dwNumElements = 0;

	mov	DWORD PTR _dwNumElements$6[ebp], 0

; 1068 : 			HRESULT hr;
; 1069 : 
; 1070 : 			CoInitializeEx( NULL, COINIT_MULTITHREADED );

	push	0
	push	0
	call	DWORD PTR __imp__CoInitializeEx@8

; 1071 : 			if( FAILED( hr = CoCreateInstance( CLSID_DirectPlayVoiceClient, NULL, 
; 1072 : 											   CLSCTX_INPROC_SERVER, IID_IDirectPlayVoiceClient, 
; 1073 : 											   (VOID**) &pVoiceClient ) ) )

	lea	ecx, DWORD PTR _pVoiceClient$11[ebp]
	push	ecx
	push	OFFSET _IID_IDirectPlayVoiceClient
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlayVoiceClient
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$12[ebp], eax
	cmp	DWORD PTR _hr$12[ebp], 0
	jge	SHORT $LN28@InitDirect

; 1074 : 			{
; 1075 : 				return 1;

	mov	eax, 1
	jmp	$LN40@InitDirect
$LN28@InitDirect:

; 1076 : 			}
; 1077 : 
; 1078 : 			hr = pVoiceClient->GetCompressionTypes( pBuffer, &dwSize, &dwNumElements, 0 );

	push	0
	lea	edx, DWORD PTR _dwNumElements$6[ebp]
	push	edx
	lea	eax, DWORD PTR _dwSize$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBuffer$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVoiceClient$11[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pVoiceClient$11[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	DWORD PTR _hr$12[ebp], eax

; 1079 : 			if( hr != DVERR_BUFFERTOOSMALL && FAILED(hr) )

	cmp	DWORD PTR _hr$12[ebp], -2146107362	; 8015001eH
	je	SHORT $LN27@InitDirect
	cmp	DWORD PTR _hr$12[ebp], 0
	jge	SHORT $LN27@InitDirect

; 1080 : 			{
; 1081 : 				return 1;

	mov	eax, 1
	jmp	$LN40@InitDirect
$LN27@InitDirect:

; 1082 : 			}
; 1083 :   
; 1084 : 			pBuffer = new BYTE[dwSize];

	mov	eax, DWORD PTR _dwSize$5[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pBuffer$10[ebp], ecx

; 1085 : 			if( FAILED( hr = pVoiceClient->GetCompressionTypes( pBuffer, &dwSize, 
; 1086 : 																&dwNumElements, 0 ) ) )

	push	0
	lea	edx, DWORD PTR _dwNumElements$6[ebp]
	push	edx
	lea	eax, DWORD PTR _dwSize$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBuffer$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVoiceClient$11[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pVoiceClient$11[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	DWORD PTR _hr$12[ebp], eax
	cmp	DWORD PTR _hr$12[ebp], 0
	jge	SHORT $LN26@InitDirect

; 1087 : 																	{
; 1088 : 				return 1;

	mov	eax, 1
	jmp	$LN40@InitDirect
$LN26@InitDirect:

; 1089 : 			}
; 1090 :  
; 1091 : 			SAFE_RELEASE( pVoiceClient );

	cmp	DWORD PTR _pVoiceClient$11[ebp], 0
	je	SHORT $LN25@InitDirect
	mov	eax, DWORD PTR _pVoiceClient$11[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pVoiceClient$11[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _pVoiceClient$11[ebp], 0
$LN25@InitDirect:

; 1092 : 			CoUninitialize();

	call	DWORD PTR __imp__CoUninitialize@0

; 1093 : 
; 1094 : 			pdvCompressionInfo = (LPDVCOMPRESSIONINFO) pBuffer;

	mov	ecx, DWORD PTR _pBuffer$10[ebp]
	mov	DWORD PTR _pdvCompressionInfo$8[ebp], ecx

; 1095 : 			for( DWORD dwIndex = 0; dwIndex < dwNumElements; dwIndex++ )

	mov	DWORD PTR _dwIndex$9[ebp], 0
	jmp	SHORT $LN24@InitDirect
$LN23@InitDirect:
	mov	edx, DWORD PTR _dwIndex$9[ebp]
	add	edx, 1
	mov	DWORD PTR _dwIndex$9[ebp], edx
$LN24@InitDirect:
	mov	eax, DWORD PTR _dwIndex$9[ebp]
	cmp	eax, DWORD PTR _dwNumElements$6[ebp]
	jae	$LN22@InitDirect

; 1096 : 			{
; 1097 : 
; 1098 : 			if (g_bLowBwVoice)

	movzx	ecx, BYTE PTR ?g_bLowBwVoice@@3_NA	; g_bLowBwVoice
	test	ecx, ecx
	je	SHORT $LN21@InitDirect

; 1099 : 			{
; 1100 : 				if( pdvCompressionInfo[dwIndex].guidType == DPVCTGUID_VR12 )

	push	OFFSET _DPVCTGUID_VR12
	mov	edx, DWORD PTR _dwIndex$9[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _pdvCompressionInfo$8[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	_==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN20@InitDirect

; 1101 : 				{
; 1102 : 				pGuid = new GUID;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pGuid$7[ebp], eax

; 1103 : 				(*pGuid) = pdvCompressionInfo[dwIndex].guidType;

	mov	ecx, DWORD PTR _dwIndex$9[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _pdvCompressionInfo$8[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _pGuid$7[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 1104 : 				break;

	jmp	SHORT $LN22@InitDirect
$LN20@InitDirect:

; 1105 : 				}
; 1106 : 			}
; 1107 : 			else

	jmp	SHORT $LN19@InitDirect
$LN21@InitDirect:

; 1108 : 			{
; 1109 : 				if( pdvCompressionInfo[dwIndex].guidType == DPVCTGUID_SC03 )

	push	OFFSET _DPVCTGUID_SC03
	mov	ecx, DWORD PTR _dwIndex$9[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _pdvCompressionInfo$8[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	call	_==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@InitDirect

; 1110 : 				{
; 1111 : 				pGuid = new GUID;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pGuid$7[ebp], edx

; 1112 : 				(*pGuid) = pdvCompressionInfo[dwIndex].guidType;

	mov	eax, DWORD PTR _dwIndex$9[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _pdvCompressionInfo$8[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _pGuid$7[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 1113 : 				break;

	jmp	SHORT $LN22@InitDirect
$LN19@InitDirect:

; 1114 : 				}
; 1115 : 			}
; 1116 : 					
; 1117 : 			}

	jmp	$LN23@InitDirect
$LN22@InitDirect:

; 1118 : 
; 1119 : 			SAFE_DELETE_ARRAY( pBuffer );

	cmp	DWORD PTR _pBuffer$10[ebp], 0
	je	SHORT $LN17@InitDirect
	mov	eax, DWORD PTR _pBuffer$10[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _pBuffer$10[ebp], 0
$LN17@InitDirect:

; 1120 : 
; 1121 : 			dvSessionDesc.guidCT = (*pGuid);

	mov	edx, DWORD PTR _pGuid$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _dvSessionDesc$[ebp+12], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _dvSessionDesc$[ebp+16], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _dvSessionDesc$[ebp+20], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _dvSessionDesc$[ebp+24], ecx

; 1122 : 
; 1123 : ///////////////////////////////////////////////////
; 1124 : 
; 1125 : 
; 1126 :         if( FAILED( hr = g_pVoiceServer->StartSession(&dvSessionDesc, 0 ) ) )

	push	0
	lea	edx, DWORD PTR _dvSessionDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pVoiceServer@@3PAUIDirectPlayVoiceServer@@A ; g_pVoiceServer
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	mov	DWORD PTR _hr$12[ebp], eax
	cmp	DWORD PTR _hr$12[ebp], 0
	jge	SHORT $LN39@InitDirect

; 1127 :         {
; 1128 :             MonoPrint("Failed Starting the Session:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$12[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@BJLFPAMK@Failed?5Starting?5the?5Session?3?5?50x@
	call	_MonoPrint
	add	esp, 8

; 1129 :             goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN39@InitDirect:

; 1130 :         }
; 1131 :     }
; 1132 : 
; 1133 : /// setup the client
; 1134 : 
; 1135 :     // Test DirectVoice
; 1136 :     if( FAILED( hr = TestDirectVoice() ) )

	call	?TestDirectVoice@@YAJXZ			; TestDirectVoice
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@InitDirect

; 1137 :     {
; 1138 :         MonoPrint("Failed Testing DirectVoice:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@BKJPBCJG@Failed?5Testing?5DirectVoice?3?5?50x?$CF@
	call	_MonoPrint
	add	esp, 8

; 1139 :         goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN14@InitDirect:

; 1140 :     }
; 1141 : 
; 1142 :     // Init the client and the connection
; 1143 :     // Create the IDirectPlayVoiceClient Object
; 1144 :     if( FAILED( hr = CoCreateInstance(CLSID_DirectPlayVoiceClient, NULL, 
; 1145 :                                     CLSCTX_INPROC_SERVER,
; 1146 :                                     IID_IDirectPlayVoiceClient, 
; 1147 :                                     (LPVOID*) &g_pVoiceClient ) ) )

	push	OFFSET ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	OFFSET _IID_IDirectPlayVoiceClient
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlayVoiceClient
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@InitDirect

; 1148 :     {
; 1149 :         MonoPrint("Failed Creating the IDirectPlayVoiceClient Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DK@IEAEMKFJ@Failed?5Creating?5the?5IDirectPlayV@
	call	_MonoPrint
	add	esp, 8

; 1150 :         goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN12@InitDirect:

; 1151 :     }
; 1152 : 
; 1153 :     // Init the Voice client
; 1154 : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN10@InitDirect

; 1155 : 	{
; 1156 : 		if( FAILED( hr = g_pVoiceClient->Initialize(g_pDPServer, DirectVoiceClientMessageHandler, NULL, 0, 0 ) ) )

	push	0
	push	0
	push	0
	push	OFFSET ?DirectVoiceClientMessageHandler@@YGJPAXK0@Z ; DirectVoiceClientMessageHandler
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@InitDirect

; 1157 : 		{
; 1158 : 			MonoPrint("Failed Initializing the IDirectPlayVoiceClient Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@FFMNAPPP@Failed?5Initializing?5the?5IDirectP@
	call	_MonoPrint
	add	esp, 8

; 1159 : 			goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN9@InitDirect:

; 1160 : 		}
; 1161 : 	}
; 1162 : 	else

	jmp	SHORT $LN7@InitDirect
$LN10@InitDirect:

; 1163 : 	{
; 1164 : 		if( FAILED( hr = g_pVoiceClient->Initialize(g_pDPClient, DirectVoiceClientMessageHandler, NULL, 0, 0 ) ) )

	push	0
	push	0
	push	0
	push	OFFSET ?DirectVoiceClientMessageHandler@@YGJPAXK0@Z ; DirectVoiceClientMessageHandler
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@InitDirect

; 1165 : 		{
; 1166 : 			MonoPrint("Failed Initializing the IDirectPlayVoiceClient Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@FFMNAPPP@Failed?5Initializing?5the?5IDirectP@
	call	_MonoPrint
	add	esp, 8

; 1167 : 			goto LCleanup;

	jmp	$LCleanup$42
	jmp	$LCleanup$42
$LN7@InitDirect:

; 1168 : 		}
; 1169 : 	}
; 1170 : 
; 1171 :     ZeroMemory(&dvSoundDeviceConfig, sizeof(DVSOUNDDEVICECONFIG));

	push	64					; 00000040H
	push	0
	lea	ecx, DWORD PTR _dvSoundDeviceConfig$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1172 :     dvSoundDeviceConfig.dwSize = sizeof(DVSOUNDDEVICECONFIG);

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp], 64 ; 00000040H

; 1173 :     dvSoundDeviceConfig.dwFlags =  DVSOUNDCONFIG_SETCONVERSIONQUALITY;

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+4], 8

; 1174 :     dvSoundDeviceConfig.guidPlaybackDevice = DSDEVID_DefaultVoicePlayback;

	mov	edx, DWORD PTR _DSDEVID_DefaultVoicePlayback
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+8], edx
	mov	eax, DWORD PTR _DSDEVID_DefaultVoicePlayback+4
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+12], eax
	mov	ecx, DWORD PTR _DSDEVID_DefaultVoicePlayback+8
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+16], ecx
	mov	edx, DWORD PTR _DSDEVID_DefaultVoicePlayback+12
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+20], edx

; 1175 :     dvSoundDeviceConfig.lpdsPlaybackDevice = NULL;

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+24], 0

; 1176 :     dvSoundDeviceConfig.guidCaptureDevice = DSDEVID_DefaultVoiceCapture;

	mov	eax, DWORD PTR _DSDEVID_DefaultVoiceCapture
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+28], eax
	mov	ecx, DWORD PTR _DSDEVID_DefaultVoiceCapture+4
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+32], ecx
	mov	edx, DWORD PTR _DSDEVID_DefaultVoiceCapture+8
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+36], edx
	mov	eax, DWORD PTR _DSDEVID_DefaultVoiceCapture+12
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+40], eax

; 1177 :     dvSoundDeviceConfig.lpdsCaptureDevice = NULL;

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+44], 0

; 1178 :     dvSoundDeviceConfig.hwndAppWindow = GetConsoleHwnd();

	call	?GetConsoleHwnd@@YAPAUHWND__@@XZ	; GetConsoleHwnd
	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+48], eax

; 1179 :     dvSoundDeviceConfig.lpdsMainBuffer = NULL;

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+52], 0

; 1180 :     dvSoundDeviceConfig.dwMainBufferFlags = 0;

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+56], 0

; 1181 :     dvSoundDeviceConfig.dwMainBufferPriority = 0;

	mov	DWORD PTR _dvSoundDeviceConfig$[ebp+60], 0

; 1182 : 
; 1183 :     ZeroMemory(&dvClientConfig, sizeof(DVCLIENTCONFIG));

	push	32					; 00000020H
	push	0
	lea	ecx, DWORD PTR _dvClientConfig$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1184 :     dvClientConfig.dwSize = sizeof(DVCLIENTCONFIG);

	mov	DWORD PTR _dvClientConfig$[ebp], 32	; 00000020H

; 1185 :     dvClientConfig.dwFlags = /*DVCLIENTCONFIG_AUTOVOICEACTIVATED | */DVCLIENTCONFIG_AUTORECORDVOLUME;

	mov	DWORD PTR _dvClientConfig$[ebp+4], 8

; 1186 :     dvClientConfig.lRecordVolume = DVRECORDVOLUME_LAST;

	mov	DWORD PTR _dvClientConfig$[ebp+8], 1

; 1187 :     dvClientConfig.lPlaybackVolume = DVPLAYBACKVOLUME_DEFAULT;

	mov	DWORD PTR _dvClientConfig$[ebp+12], 0

; 1188 :     dvClientConfig.dwThreshold = DVTHRESHOLD_UNUSED;

	mov	DWORD PTR _dvClientConfig$[ebp+16], -2	; fffffffeH

; 1189 :    	dvClientConfig.dwBufferQuality = DVBUFFERQUALITY_MAX;

	mov	DWORD PTR _dvClientConfig$[ebp+20], 100	; 00000064H

; 1190 :     dvClientConfig.dwBufferAggressiveness = DVBUFFERAGGRESSIVENESS_MAX;

	mov	DWORD PTR _dvClientConfig$[ebp+24], 100	; 00000064H

; 1191 :     dvClientConfig.dwNotifyPeriod = 0;

	mov	DWORD PTR _dvClientConfig$[ebp+28], 0

; 1192 : 
; 1193 :     if( FAILED( hr = g_pVoiceClient->Connect(&dvSoundDeviceConfig, &dvClientConfig, DVFLAGS_SYNC ) ) )

	push	1
	lea	edx, DWORD PTR _dvClientConfig$[ebp]
	push	edx
	lea	eax, DWORD PTR _dvSoundDeviceConfig$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@InitDirect

; 1194 :     {
; 1195 :         MonoPrint("Failed DirectVoice Client Connect:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CK@NJGCLNK@Failed?5DirectVoice?5Client?5Connec@
	call	_MonoPrint
	add	esp, 8

; 1196 :         goto LCleanup;

	jmp	SHORT $LCleanup$42
	jmp	SHORT $LCleanup$42
$LN4@InitDirect:

; 1197 :     }
; 1198 : 
; 1199 :     dvid = DVID_ALLPLAYERS;

	mov	DWORD PTR _dvid$[ebp], 0

; 1200 :     if( FAILED( hr = g_pVoiceClient->SetTransmitTargets(&dvid, 1, 0 ) ) )

	push	0
	push	1
	lea	eax, DWORD PTR _dvid$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pVoiceClient@@3PAUIDirectPlayVoiceClient@@A ; g_pVoiceClient
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LCleanup$42

; 1201 :     {
; 1202 :         MonoPrint("Failed SetTransmitTargets:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CC@MIJOGJNO@Failed?5SetTransmitTargets?3?5?50x?$CFX@
	call	_MonoPrint
	add	esp, 8
$LCleanup$42:

; 1203 :         goto LCleanup;
; 1204 :     }
; 1205 : 
; 1206 : LCleanup:
; 1207 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN40@InitDirect:

; 1208 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?InitDirectPlayVoice@@YAJXZ ENDP			; InitDirectPlayVoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
tv167 = -12						; size = 4
_i$1 = -8						; size = 4
_hr$ = -4						; size = 4
?InitDirectPlay@@YAJXZ PROC				; InitDirectPlay

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 107  :     HRESULT     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 108  : 
; 109  : 	
; 110  : 	g_afreqarrey.count = 0;

	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A, 0

; 111  : 	for (int i = 0; i <maxfreqs ; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN22@InitDirect
$LN21@InitDirect:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN22@InitDirect:
	cmp	DWORD PTR _i$1[ebp], 1000		; 000003e8H
	jge	SHORT $LN20@InitDirect

; 112  : 	{
; 113  : 		g_afreqarrey.Freq[i][0] = 0;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[ecx+edx*8+4], 0

; 114  : 		g_afreqarrey.Freq[i][1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[eax+ecx*8+4], 0

; 115  : 	}

	jmp	SHORT $LN21@InitDirect
$LN20@InitDirect:

; 116  :     // Create the IDirectPlay8Peer Object
; 117  : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN19@InitDirect

; 118  : 	{
; 119  : 		if( FAILED( hr = CoCreateInstance(CLSID_DirectPlay8Server, NULL, 
; 120  : 										CLSCTX_INPROC_SERVER,
; 121  : 										IID_IDirectPlay8Server, 
; 122  : 										(LPVOID*) &g_pDPServer ) ) )

	push	OFFSET ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	OFFSET _IID_IDirectPlay8Server
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlay8Server
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN18@InitDirect

; 123  : 		{
; 124  : 			MonoPrint("Failed Creating the IDirectPlay8Peer Object:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0DE@NMIOOBFD@Failed?5Creating?5the?5IDirectPlay8@
	call	_MonoPrint
	add	esp, 8

; 125  : 			goto LCleanup;

	jmp	$LCleanup$27
	jmp	$LCleanup$27
$LN18@InitDirect:

; 126  : 		}
; 127  : 	}
; 128  : 	else

	jmp	SHORT $LN16@InitDirect
$LN19@InitDirect:

; 129  : 	{
; 130  : 		if( FAILED( hr = CoCreateInstance(CLSID_DirectPlay8Client, NULL, 
; 131  : 										CLSCTX_INPROC_SERVER,
; 132  : 										IID_IDirectPlay8Client, 
; 133  : 										(LPVOID*) &g_pDPClient ) ) )

	push	OFFSET ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	OFFSET _IID_IDirectPlay8Client
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlay8Client
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN16@InitDirect

; 134  : 		{
; 135  : 			MonoPrint("Failed Creating the IDirectPlay8Peer Object:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0DE@NMIOOBFD@Failed?5Creating?5the?5IDirectPlay8@
	call	_MonoPrint
	add	esp, 8

; 136  : 			goto LCleanup;

	jmp	$LCleanup$27
	jmp	$LCleanup$27
$LN16@InitDirect:

; 137  : 		}
; 138  : 	}
; 139  : 
; 140  :     // Create the IDirectPlay8LobbiedApplication Object
; 141  :     if( FAILED( hr = CoCreateInstance(CLSID_DirectPlay8LobbiedApplication, NULL, 
; 142  :                                     CLSCTX_INPROC_SERVER,
; 143  :                                     IID_IDirectPlay8LobbiedApplication, 
; 144  :                                     (LPVOID*) &g_pLobbyApp ) ) )

	push	OFFSET ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	OFFSET _IID_IDirectPlay8LobbiedApplication
	push	1
	push	0
	push	OFFSET _CLSID_DirectPlay8LobbiedApplication
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN13@InitDirect

; 145  :     {
; 146  :         MonoPrint("Failed Creating the IDirectPlay8LobbiedApplication Object:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EC@PIAPBDAK@Failed?5Creating?5the?5IDirectPlay8@
	call	_MonoPrint
	add	esp, 8

; 147  :         goto LCleanup;

	jmp	$LCleanup$27
	jmp	$LCleanup$27
$LN13@InitDirect:

; 148  :     }
; 149  : 
; 150  :     // Init DirectPlay
; 151  : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN11@InitDirect

; 152  : 	{
; 153  : 		if( FAILED( hr = g_pDPServer->Initialize(NULL, DirectPlayMessageHandler, 0 ) ) )

	push	0
	push	OFFSET ?DirectPlayMessageHandler@@YGJPAXK0@Z ; DirectPlayMessageHandler
	push	0
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@InitDirect

; 154  : 		{
; 155  : 			MonoPrint("Failed Initializing DirectPlay:  0x%X\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CH@GLIGCFBA@Failed?5Initializing?5DirectPlay?3?5@
	call	_MonoPrint
	add	esp, 8

; 156  : 			goto LCleanup;

	jmp	$LCleanup$27
	jmp	$LCleanup$27
$LN10@InitDirect:

; 157  : 		}
; 158  : 	}
; 159  :     else

	jmp	SHORT $LN8@InitDirect
$LN11@InitDirect:

; 160  : 	{
; 161  : 		if( FAILED( hr = g_pDPClient->Initialize(NULL, DirectPlayMessageHandler, 0 ) ) )

	push	0
	push	OFFSET ?DirectPlayMessageHandler@@YGJPAXK0@Z ; DirectPlayMessageHandler
	push	0
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@InitDirect

; 162  : 		{
; 163  : 			MonoPrint("Failed Initializing DirectPlay:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@GLIGCFBA@Failed?5Initializing?5DirectPlay?3?5@
	call	_MonoPrint
	add	esp, 8

; 164  : 			goto LCleanup;

	jmp	$LCleanup$27
	jmp	$LCleanup$27
$LN8@InitDirect:

; 165  : 		}
; 166  : 	}
; 167  :     // Init the Lobby interface
; 168  :     if( FAILED( hr = g_pLobbyApp->Initialize(NULL, LobbyAppMessageHandler, &g_hLobbyHandle, 0 ) ) )

	push	0
	push	OFFSET ?g_hLobbyHandle@@3KA		; g_hLobbyHandle
	push	OFFSET ?LobbyAppMessageHandler@@YGJPAXK0@Z ; LobbyAppMessageHandler
	push	0
	mov	eax, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@InitDirect

; 169  :     {
; 170  :         MonoPrint("Failed Initializing Lobby:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CC@BGKNJGNG@Failed?5Initializing?5Lobby?3?5?50x?$CFX@
	call	_MonoPrint
	add	esp, 8

; 171  :         goto LCleanup;

	jmp	SHORT $LCleanup$27
	jmp	SHORT $LCleanup$27

; 172  :     }
; 173  :     else

	jmp	SHORT $LN3@InitDirect
$LN5@InitDirect:

; 174  :         g_bLobbyLaunched = g_hLobbyHandle != NULL;

	cmp	DWORD PTR ?g_hLobbyHandle@@3KA, 0	; g_hLobbyHandle
	je	SHORT $LN25@InitDirect
	mov	DWORD PTR tv167[ebp], 1
	jmp	SHORT $LN26@InitDirect
$LN25@InitDirect:
	mov	DWORD PTR tv167[ebp], 0
$LN26@InitDirect:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR ?g_bLobbyLaunched@@3HA, edx	; g_bLobbyLaunched
$LN3@InitDirect:

; 175  :     
; 176  :     // Ensure that TCP/IP is a valid Service Provider
; 177  :     if( FALSE == IsServiceProviderValid(&CLSID_DP8SP_TCPIP ) )

	push	OFFSET _CLSID_DP8SP_TCPIP
	call	?IsServiceProviderValid@@YAHPBU_GUID@@@Z ; IsServiceProviderValid
	add	esp, 4
	test	eax, eax
	jne	SHORT $LCleanup$27

; 178  :     {
; 179  :         hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H

; 180  :         MonoPrint("Failed validating CLSID_DP8SP_TCPIP");

	push	OFFSET ??_C@_0CE@LCCEFIMH@Failed?5validating?5CLSID_DP8SP_TC@
	call	_MonoPrint
	add	esp, 4
$LCleanup$27:

; 181  :         goto LCleanup;
; 182  :     }
; 183  : 
; 184  : LCleanup:
; 185  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 186  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitDirectPlay@@YAJXZ ENDP				; InitDirectPlay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
?StopVoice@@YAXXZ PROC					; StopVoice

; 95   : {

	push	ebp
	mov	ebp, esp

; 96   : 	stoppingvoice = TRUE;

	mov	BYTE PTR ?stoppingvoice@@3_NA, 1	; stoppingvoice

; 97   :     CleanupDirectPlay();

	call	?CleanupDirectPlay@@YAXXZ		; CleanupDirectPlay

; 98   : 
; 99   : //    CoUninitialize();
; 100  : }

	pop	ebp
	ret	0
?StopVoice@@YAXXZ ENDP					; StopVoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_dwItems$ = -16						; size = 4
_dwSize$ = -12						; size = 4
_pdnSPInfo$ = -8					; size = 4
_hr$ = -4						; size = 4
_pGuidSP$ = 8						; size = 4
?IsServiceProviderValid@@YAHPBU_GUID@@@Z PROC		; IsServiceProviderValid

; 196  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 197  :     HRESULT                     hr;
; 198  :     DPN_SERVICE_PROVIDER_INFO*  pdnSPInfo = NULL;

	mov	DWORD PTR _pdnSPInfo$[ebp], 0

; 199  :     DWORD                       dwItems = 0;

	mov	DWORD PTR _dwItems$[ebp], 0

; 200  :     DWORD                       dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 201  : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN14@IsServiceP

; 202  : 	{
; 203  :     hr = g_pDPServer->EnumServiceProviders(&CLSID_DP8SP_TCPIP, NULL, NULL, &dwSize, &dwItems, 0);

	push	0
	lea	eax, DWORD PTR _dwItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	push	0
	push	0
	push	OFFSET _CLSID_DP8SP_TCPIP
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 204  : 	}
; 205  : 	else

	jmp	SHORT $LN13@IsServiceP
$LN14@IsServiceP:

; 206  : 	{
; 207  :     hr = g_pDPClient->EnumServiceProviders(&CLSID_DP8SP_TCPIP, NULL, NULL, &dwSize, &dwItems, 0);

	push	0
	lea	eax, DWORD PTR _dwItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	push	0
	push	0
	push	OFFSET _CLSID_DP8SP_TCPIP
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
$LN13@IsServiceP:

; 208  : 	}
; 209  : 
; 210  :     if( hr != DPNERR_BUFFERTOOSMALL)

	cmp	DWORD PTR _hr$[ebp], -2146074368	; 80158100H
	je	SHORT $LN12@IsServiceP

; 211  :     {
; 212  :         MonoPrint("Failed Enumerating Service Providers:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@KGOCDNIC@Failed?5Enumerating?5Service?5Provi@
	call	_MonoPrint
	add	esp, 8

; 213  :         goto LCleanup;

	jmp	$LCleanup$17
	jmp	$LCleanup$17
$LN12@IsServiceP:

; 214  :     }
; 215  : 
; 216  :     pdnSPInfo = (DPN_SERVICE_PROVIDER_INFO*) new BYTE[dwSize];

	mov	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pdnSPInfo$[ebp], edx

; 217  : 	if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN10@IsServiceP

; 218  : 	{
; 219  : 		if( FAILED( hr = g_pDPServer->EnumServiceProviders(&CLSID_DP8SP_TCPIP, NULL, pdnSPInfo, &dwSize, &dwItems, 0 ) ) )

	push	0
	lea	eax, DWORD PTR _dwItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pdnSPInfo$[ebp]
	push	edx
	push	0
	push	OFFSET _CLSID_DP8SP_TCPIP
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@IsServiceP

; 220  : 		{
; 221  : 			MonoPrint("Failed Enumerating Service Providers:  0x%x\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CN@KGOCDNIC@Failed?5Enumerating?5Service?5Provi@
	call	_MonoPrint
	add	esp, 8

; 222  : 			goto LCleanup;

	jmp	SHORT $LCleanup$17
	jmp	SHORT $LCleanup$17
$LN9@IsServiceP:

; 223  : 		}
; 224  : 	}
; 225  : 	else

	jmp	SHORT $LN7@IsServiceP
$LN10@IsServiceP:

; 226  : 	{
; 227  : 		if( FAILED( hr = g_pDPClient->EnumServiceProviders(&CLSID_DP8SP_TCPIP, NULL, pdnSPInfo, &dwSize, &dwItems, 0 ) ) )

	push	0
	lea	edx, DWORD PTR _dwItems$[ebp]
	push	edx
	lea	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pdnSPInfo$[ebp]
	push	ecx
	push	0
	push	OFFSET _CLSID_DP8SP_TCPIP
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@IsServiceP

; 228  : 		{
; 229  : 			MonoPrint("Failed Enumerating Service Providers:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@KGOCDNIC@Failed?5Enumerating?5Service?5Provi@
	call	_MonoPrint
	add	esp, 8

; 230  : 			goto LCleanup;

	jmp	SHORT $LCleanup$17
	jmp	SHORT $LCleanup$17
$LN7@IsServiceP:

; 231  : 		}
; 232  : 	}
; 233  :     // There are no items returned so the requested SP is not available
; 234  :     if( dwItems == 0)

	cmp	DWORD PTR _dwItems$[ebp], 0
	jne	SHORT $LCleanup$17

; 235  :     {
; 236  :         hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
$LCleanup$17:

; 237  :     }
; 238  : 
; 239  : LCleanup:
; 240  :     SAFE_DELETE_ARRAY(pdnSPInfo);

	cmp	DWORD PTR _pdnSPInfo$[ebp], 0
	je	SHORT $LN3@IsServiceP
	mov	ecx, DWORD PTR _pdnSPInfo$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _pdnSPInfo$[ebp], 0
$LN3@IsServiceP:

; 241  :     if( SUCCEEDED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@IsServiceP

; 242  :         return TRUE;

	mov	eax, 1
	jmp	SHORT $LN15@IsServiceP

; 243  :     else

	jmp	SHORT $LN15@IsServiceP
$LN2@IsServiceP:

; 244  :         return FALSE;

	xor	eax, eax
$LN15@IsServiceP:

; 245  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsServiceProviderValid@@YAHPBU_GUID@@@Z ENDP		; IsServiceProviderValid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_hr$ = -8						; size = 4
tv64 = -4						; size = 4
_pvUserContext$ = 8					; size = 4
_dwMessageId$ = 12					; size = 4
_pMsgBuffer$ = 16					; size = 4
?DirectVoiceClientMessageHandler@@YGJPAXK0@Z PROC	; DirectVoiceClientMessageHandler

; 566  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 567  :     HRESULT     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 568  : 	
; 569  :     switch(dwMessageId)

	mov	eax, DWORD PTR _dwMessageId$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 4
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	ja	$LN12@DirectVoic
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN16@DirectVoic[edx*4]
$LN11@DirectVoic:

; 570  :     {
; 571  :         case DVMSGID_RECORDSTART:
; 572  :         {
; 573  : 			if ( !OTWDriver.pCockpitManager || !OTWDriver.pCockpitManager->mpIcp) break;

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684, 0
	je	SHORT $LN9@DirectVoic
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [eax+688], 0
	jne	SHORT $LN10@DirectVoic
$LN9@DirectVoic:
	jmp	$LN12@DirectVoic
$LN10@DirectVoic:

; 574  : 			if (g_itransmitfreq == 1)

	cmp	DWORD PTR ?g_itransmitfreq@@3HA, 1	; g_itransmitfreq
	jne	SHORT $LN8@DirectVoic

; 575  : 			{
; 576  : 				OTWDriver.pCockpitManager->mpIcp->transmitingvoicecom1 = TRUE;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+688]
	mov	BYTE PTR [edx+301], 1

; 577  : 				OTWDriver.pCockpitManager->mpIcp->transmitingvoicecom2 = FALSE;

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	ecx, DWORD PTR [eax+688]
	mov	BYTE PTR [ecx+302], 0
	jmp	SHORT $LN6@DirectVoic
$LN8@DirectVoic:

; 578  : 			}
; 579  : 			else if (g_itransmitfreq == 2)

	cmp	DWORD PTR ?g_itransmitfreq@@3HA, 2	; g_itransmitfreq
	jne	SHORT $LN6@DirectVoic

; 580  : 			{
; 581  : 			OTWDriver.pCockpitManager->mpIcp->transmitingvoicecom1 = FALSE;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	eax, DWORD PTR [edx+688]
	mov	BYTE PTR [eax+301], 0

; 582  : 			OTWDriver.pCockpitManager->mpIcp->transmitingvoicecom2 = TRUE;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+688]
	mov	BYTE PTR [edx+302], 1
$LN6@DirectVoic:

; 583  : 			}
; 584  :             MonoPrint("Record Start\n");

	push	OFFSET ??_C@_0O@CDKFHJAJ@Record?5Start?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 585  :             break;

	jmp	$LN12@DirectVoic
$LN5@DirectVoic:

; 586  :         }
; 587  : 
; 588  :         case DVMSGID_RECORDSTOP:
; 589  :         {
; 590  : 			if ( !OTWDriver.pCockpitManager || !OTWDriver.pCockpitManager->mpIcp) break;

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684, 0
	je	SHORT $LN3@DirectVoic
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [eax+688], 0
	jne	SHORT $LN4@DirectVoic
$LN3@DirectVoic:
	jmp	SHORT $LN12@DirectVoic
$LN4@DirectVoic:

; 591  : 			OTWDriver.pCockpitManager->mpIcp->transmitingvoicecom1 = FALSE;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+688]
	mov	BYTE PTR [edx+301], 0

; 592  : 			OTWDriver.pCockpitManager->mpIcp->transmitingvoicecom2 = FALSE;

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	ecx, DWORD PTR [eax+688]
	mov	BYTE PTR [ecx+302], 0

; 593  :             MonoPrint("Record Stop\n");

	push	OFFSET ??_C@_0N@MOCMKIMM@Record?5Stop?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 594  :             break;

	jmp	SHORT $LN12@DirectVoic
$LN2@DirectVoic:

; 595  :         }
; 596  : 		case DVMSGID_PLAYERVOICESTART:
; 597  : 		{ 
; 598  :             MonoPrint("play Start\n");

	push	OFFSET ??_C@_0M@CPAAGGBM@play?5Start?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 599  :             break;

	jmp	SHORT $LN12@DirectVoic
$LN1@DirectVoic:

; 600  :         }
; 601  : 
; 602  :         case DVMSGID_PLAYERVOICESTOP :
; 603  :         {
; 604  : 		F4SoundFXSetDist(SFX_MIKECLICK, FALSE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	217					; 000000d9H
	call	_F4SoundFXSetDist
	add	esp, 16					; 00000010H

; 605  :             MonoPrint("play Stop\n");

	push	OFFSET ??_C@_0L@NNCIIFAH@play?5Stop?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN12@DirectVoic:

; 606  :             break;
; 607  :         }
; 608  :     }
; 609  : 
; 610  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 611  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN16@DirectVoic:
	DD	$LN2@DirectVoic
	DD	$LN1@DirectVoic
	DD	$LN11@DirectVoic
	DD	$LN5@DirectVoic
?DirectVoiceClientMessageHandler@@YGJPAXK0@Z ENDP	; DirectVoiceClientMessageHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_pvUserContext$ = 8					; size = 4
_dwMessageId$ = 12					; size = 4
_pMsgBuffer$ = 16					; size = 4
?DirectVoiceServerMessageHandler@@YGJPAXK0@Z PROC	; DirectVoiceServerMessageHandler

; 547  : {

	push	ebp
	mov	ebp, esp

; 548  : 	if (OTWDriver.pCockpitManager && OTWDriver.pCockpitManager->mpIcp)
; 549  : //	switch(dwMessageId)
; 550  :     {
; 551  : 
; 552  :     }
; 553  : 	 
; 554  :     // In this app we are not responding to any server messages
; 555  :     return S_OK;

	xor	eax, eax

; 556  : }

	pop	ebp
	ret	12					; 0000000cH
?DirectVoiceServerMessageHandler@@YGJPAXK0@Z ENDP	; DirectVoiceServerMessageHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_pSettings$1 = -16					; size = 4
tv64 = -12						; size = 4
_hr$ = -8						; size = 4
_pConnectMsg$2 = -4					; size = 4
_pvUserContext$ = 8					; size = 4
_dwMessageId$ = 12					; size = 4
_pMsgBuffer$ = 16					; size = 4
?LobbyAppMessageHandler@@YGJPAXK0@Z PROC		; LobbyAppMessageHandler

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 516  :     HRESULT     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 517  : 
; 518  :     switch (dwMessageId)

	mov	eax, DWORD PTR _dwMessageId$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 32770		; 00008002H
	je	SHORT $LN3@LobbyAppMe
	jmp	SHORT $LN4@LobbyAppMe
$LN3@LobbyAppMe:

; 519  :     {
; 520  :         case DPL_MSGID_CONNECT:
; 521  :         {
; 522  :             PDPL_MESSAGE_CONNECT        pConnectMsg;
; 523  :             PDPL_CONNECTION_SETTINGS    pSettings;
; 524  : 
; 525  :             pConnectMsg = (PDPL_MESSAGE_CONNECT)pMsgBuffer;

	mov	ecx, DWORD PTR _pMsgBuffer$[ebp]
	mov	DWORD PTR _pConnectMsg$2[ebp], ecx

; 526  :             pSettings = pConnectMsg->pdplConnectionSettings;

	mov	edx, DWORD PTR _pConnectMsg$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pSettings$1[ebp], eax

; 527  : 
; 528  :             // Register the lobby with directplay so we get automatic notifications
; 529  : 			if(g_bHost)

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	je	SHORT $LN2@LobbyAppMe

; 530  :             hr = g_pDPServer->RegisterLobby(pConnectMsg->hConnectId, g_pLobbyApp, DPNLOBBY_REGISTER);

	push	1
	mov	ecx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	ecx
	mov	edx, DWORD PTR _pConnectMsg$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+132]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 531  : 			else

	jmp	SHORT $LN4@LobbyAppMe
$LN2@LobbyAppMe:

; 532  :             hr = g_pDPClient->RegisterLobby(pConnectMsg->hConnectId, g_pLobbyApp, DPNLOBBY_REGISTER);

	push	1
	mov	edx, DWORD PTR ?g_pLobbyApp@@3PAUIDirectPlay8LobbiedApplication@@A ; g_pLobbyApp
	push	edx
	mov	eax, DWORD PTR _pConnectMsg$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPClient@@3PAUIDirectPlay8Client@@A ; g_pDPClient
	push	ecx
	mov	edx, DWORD PTR [eax+84]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
$LN4@LobbyAppMe:

; 533  :             break;
; 534  :         }
; 535  :     }
; 536  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 537  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?LobbyAppMessageHandler@@YGJPAXK0@Z ENDP		; LobbyAppMessageHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\voicecomunication\voice.cpp
_TEXT	SEGMENT
_p$1 = -184						; size = 4
_dpnBuffer$2 = -180					; size = 8
_comData$3 = -172					; size = 8
_str$4 = -164						; size = 4
$T5 = -160						; size = 4
$T6 = -156						; size = 4
_FreqVUID$7 = -152					; size = 4
$T8 = -148						; size = 4
$T9 = -144						; size = 4
$T10 = -140						; size = 4
$T11 = -136						; size = 4
$T12 = -132						; size = 4
_Setg_dpnidLocalPlayer$13 = -128			; size = 4
_pMsg$14 = -124						; size = 4
$T15 = -120						; size = 4
_SetFreqIdMessage$16 = -116				; size = 4
tv211 = -112						; size = 4
_pEnumHostsResponseMsg$17 = -108			; size = 4
_message$18 = -104					; size = 4
_pwszSession$19 = -100					; size = 4
_dwSize$20 = -96					; size = 4
_SetClientListenFreqsMessage$21 = -92			; size = 4
tv236 = -88						; size = 4
_dwSize$22 = -84					; size = 4
_pReceiveMsg$23 = -80					; size = 4
tv64 = -76						; size = 4
_pAppDesc$24 = -72					; size = 4
_i$ = -68						; size = 4
_i$25 = -64						; size = 4
_pdpGroupInfo$26 = -60					; size = 4
_pCreatePlayerMsg$27 = -56				; size = 4
_pdpPlayerInfo$28 = -52					; size = 4
_hr$ = -48						; size = 4
_pHostNode$29 = -44					; size = 4
_freq$30 = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_pvUserContext$ = 8					; size = 4
_dwMessageId$ = 12					; size = 4
_pMsgBuffer$ = 16					; size = 4
?DirectPlayMessageHandler@@YGJPAXK0@Z PROC		; DirectPlayMessageHandler

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 256  :     HRESULT     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 257  : 	int i=0;

	mov	DWORD PTR _i$[ebp], 0

; 258  :     switch (dwMessageId)

	mov	eax, DWORD PTR _dwMessageId$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 65530				; 0000fffaH
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 11			; 0000000bH
	ja	$LN42@DirectPlay
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN48@DirectPlay[edx]
	jmp	DWORD PTR $LN49@DirectPlay[eax*4]
$LN41@DirectPlay:

; 259  :     {
; 260  : 		case DPN_MSGID_CREATE_GROUP:
; 261  : 		{
; 262  : 			MonoPrint ("voice creategroup");

	push	OFFSET ??_C@_0BC@BKINDBLC@voice?5creategroup?$AA@
	call	_MonoPrint
	add	esp, 4

; 263  : 			//g_afreqarrey
; 264  : 			PDPNMSG_CREATE_GROUP message;
; 265  : 			DWORD dwSize = 0;

	mov	DWORD PTR _dwSize$20[ebp], 0

; 266  : 			DPN_GROUP_INFO* pdpGroupInfo = NULL;

	mov	DWORD PTR _pdpGroupInfo$26[ebp], 0

; 267  : 
; 268  : 			message = (PDPNMSG_CREATE_GROUP) pMsgBuffer;

	mov	ecx, DWORD PTR _pMsgBuffer$[ebp]
	mov	DWORD PTR _message$18[ebp], ecx

; 269  :             g_pDPServer->GetGroupInfo( message->dpnidGroup, pdpGroupInfo, &dwSize, 0 );

	push	0
	lea	edx, DWORD PTR _dwSize$20[ebp]
	push	edx
	mov	eax, DWORD PTR _pdpGroupInfo$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$18[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	call	eax

; 270  : 			
; 271  : 			pdpGroupInfo = (DPN_GROUP_INFO*) new BYTE[ dwSize ];

	mov	ecx, DWORD PTR _dwSize$20[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _pdpGroupInfo$26[ebp], edx

; 272  : 			ZeroMemory( pdpGroupInfo, dwSize );

	mov	eax, DWORD PTR _dwSize$20[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pdpGroupInfo$26[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 273  : 			pdpGroupInfo->dwSize = sizeof(DPN_GROUP_INFO); 

	mov	edx, DWORD PTR _pdpGroupInfo$26[ebp]
	mov	DWORD PTR [edx], 24			; 00000018H

; 274  : 			g_pDPServer->GetGroupInfo( message->dpnidGroup, pdpGroupInfo, &dwSize, 0 );

	push	0
	lea	eax, DWORD PTR _dwSize$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _pdpGroupInfo$26[ebp]
	push	ecx
	mov	edx, DWORD PTR _message$18[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	eax
	mov	ecx, DWORD PTR [edx+80]
	call	ecx

; 275  : 
; 276  : ////convert the name to the vuid
; 277  : 			TCHAR freq[sizeof(long)*8+1] ;
; 278  : 			DXUtil_ConvertWideStringToGeneric( freq,pdpGroupInfo->pwszName,sizeof(long)*8+1 );

	push	33					; 00000021H
	mov	edx, DWORD PTR _pdpGroupInfo$26[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR _freq$30[ebp]
	push	ecx
	call	?DXUtil_ConvertWideStringToGeneric@@YAXPADPB_WH@Z ; DXUtil_ConvertWideStringToGeneric
	add	esp, 12					; 0000000cH

; 279  : 			char *p;
; 280  : 			const char* str = freq;

	lea	edx, DWORD PTR _freq$30[ebp]
	mov	DWORD PTR _str$4[ebp], edx

; 281  : 			unsigned long FreqVUID = strtoul(&str[0],&p,sizeof(long)*8+1);

	push	33					; 00000021H
	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, 1
	imul	ecx, 0
	add	ecx, DWORD PTR _str$4[ebp]
	push	ecx
	call	_strtoul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _FreqVUID$7[ebp], eax

; 282  : //////////////////////////////
; 283  : 			SendFreqid(0,message->dpnidGroup,FreqVUID) ;

	mov	edx, DWORD PTR _FreqVUID$7[ebp]
	push	edx
	mov	eax, DWORD PTR _message$18[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	call	?SendFreqid@@YAXKKK@Z			; SendFreqid
	add	esp, 12					; 0000000cH

; 284  : 		 break;

	jmp	$LN42@DirectPlay
$LN40@DirectPlay:

; 285  : 		}
; 286  :         case DPN_MSGID_ENUM_HOSTS_RESPONSE:
; 287  :         {
; 288  : 			if (g_bconected) return S_OK;

	movzx	edx, BYTE PTR ?g_bconected@@3_NA	; g_bconected
	test	edx, edx
	je	SHORT $LN39@DirectPlay
	xor	eax, eax
	jmp	$LN44@DirectPlay
$LN39@DirectPlay:

; 289  : 			MonoPrint ("voice ENUM_HOSTS_RESPONSE");

	push	OFFSET ??_C@_0BK@OMPPCLKJ@voice?5ENUM_HOSTS_RESPONSE?$AA@
	call	_MonoPrint
	add	esp, 4

; 290  :             PDPNMSG_ENUM_HOSTS_RESPONSE     pEnumHostsResponseMsg;
; 291  :             const DPN_APPLICATION_DESC*     pAppDesc;
; 292  :             HOST_NODE*                      pHostNode = NULL;

	mov	DWORD PTR _pHostNode$29[ebp], 0

; 293  :             WCHAR*                          pwszSession = NULL;

	mov	DWORD PTR _pwszSession$19[ebp], 0

; 294  : 
; 295  :             pEnumHostsResponseMsg = (PDPNMSG_ENUM_HOSTS_RESPONSE) pMsgBuffer;

	mov	eax, DWORD PTR _pMsgBuffer$[ebp]
	mov	DWORD PTR _pEnumHostsResponseMsg$17[ebp], eax

; 296  :             pAppDesc = pEnumHostsResponseMsg->pApplicationDescription;

	mov	ecx, DWORD PTR _pEnumHostsResponseMsg$17[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAppDesc$24[ebp], edx

; 297  : 
; 298  :             // Insert each host response if it isn't already present
; 299  :             EnterCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__EnterCriticalSection@4

; 300  : 
; 301  :             for (pHostNode = g_pHostList; pHostNode; pHostNode = pHostNode->pNext)

	mov	eax, DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A ; g_pHostList
	mov	DWORD PTR _pHostNode$29[ebp], eax
	jmp	SHORT $LN38@DirectPlay
$LN37@DirectPlay:
	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _pHostNode$29[ebp], edx
$LN38@DirectPlay:
	cmp	DWORD PTR _pHostNode$29[ebp], 0
	je	SHORT $LN36@DirectPlay

; 302  :             {
; 303  :                 if( pAppDesc->guidInstance == pHostNode->pAppDesc->guidInstance)

	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _pAppDesc$24[ebp]
	add	edx, 8
	push	edx
	call	_==
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@DirectPlay

; 304  :                 {
; 305  :                     // This host is already in the list
; 306  :                     pHostNode = NULL;

	mov	DWORD PTR _pHostNode$29[ebp], 0

; 307  :                     goto Break_ENUM_HOSTS_RESPONSE;

	jmp	$Break_ENUM_HOSTS_RESPONSE$51
	jmp	$Break_ENUM_HOSTS_RESPONSE$51
$LN35@DirectPlay:

; 308  :                 }
; 309  :             }

	jmp	SHORT $LN37@DirectPlay
$LN36@DirectPlay:

; 310  : 
; 311  :             // This host session is not in the list then so insert it.
; 312  :             pHostNode = new HOST_NODE;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR _pHostNode$29[ebp], ecx

; 313  :             if( pHostNode == NULL)

	cmp	DWORD PTR _pHostNode$29[ebp], 0
	jne	SHORT $LN33@DirectPlay

; 314  :             {
; 315  :                 goto Break_ENUM_HOSTS_RESPONSE;

	jmp	$Break_ENUM_HOSTS_RESPONSE$51
	jmp	$Break_ENUM_HOSTS_RESPONSE$51
$LN33@DirectPlay:

; 316  :             }
; 317  : 
; 318  :             ZeroMemory(pHostNode, sizeof(HOST_NODE));

	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _pHostNode$29[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 319  : 
; 320  :             // Copy the Host Address
; 321  :             if( FAILED( pEnumHostsResponseMsg->pAddressSender->Duplicate(&pHostNode->pHostAddress ) ) )

	mov	eax, DWORD PTR _pHostNode$29[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _pEnumHostsResponseMsg$17[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pEnumHostsResponseMsg$17[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	test	eax, eax
	jge	SHORT $LN31@DirectPlay

; 322  :             {
; 323  :                 goto Break_ENUM_HOSTS_RESPONSE;

	jmp	$Break_ENUM_HOSTS_RESPONSE$51
	jmp	$Break_ENUM_HOSTS_RESPONSE$51
$LN31@DirectPlay:

; 324  :             }
; 325  : 
; 326  :             pHostNode->pAppDesc = new DPN_APPLICATION_DESC;

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx], edx

; 327  : 
; 328  :             if( pHostNode == NULL)

	cmp	DWORD PTR _pHostNode$29[ebp], 0
	jne	SHORT $LN29@DirectPlay

; 329  :             {
; 330  :                 goto Break_ENUM_HOSTS_RESPONSE;

	jmp	$Break_ENUM_HOSTS_RESPONSE$51
	jmp	$Break_ENUM_HOSTS_RESPONSE$51
$LN29@DirectPlay:

; 331  :             }
; 332  : 
; 333  :             ZeroMemory(pHostNode->pAppDesc, sizeof(DPN_APPLICATION_DESC));

	push	72					; 00000048H
	push	0
	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 334  :             memcpy(pHostNode->pAppDesc, pAppDesc, sizeof(DPN_APPLICATION_DESC));

	push	72					; 00000048H
	mov	edx, DWORD PTR _pAppDesc$24[ebp]
	push	edx
	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 335  : 
; 336  :             // Null out all the pointers we aren't copying
; 337  :             pHostNode->pAppDesc->pwszSessionName = NULL;

	mov	edx, DWORD PTR _pHostNode$29[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+48], 0

; 338  :             pHostNode->pAppDesc->pwszPassword = NULL;

	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+52], 0

; 339  :             pHostNode->pAppDesc->pvReservedData = NULL;

	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+56], 0

; 340  :             pHostNode->pAppDesc->dwReservedDataSize = 0;

	mov	edx, DWORD PTR _pHostNode$29[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+60], 0

; 341  :             pHostNode->pAppDesc->pvApplicationReservedData = NULL;

	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+64], 0

; 342  :             pHostNode->pAppDesc->dwApplicationReservedDataSize = 0;

	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+68], 0

; 343  :             
; 344  :             if( pAppDesc->pwszSessionName)

	mov	edx, DWORD PTR _pAppDesc$24[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN27@DirectPlay

; 345  :             {
; 346  :                 pwszSession = new WCHAR[wcslen(pAppDesc->pwszSessionName) + 1];

	mov	eax, DWORD PTR _pAppDesc$24[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_wcslen
	add	esp, 4
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	eax, DWORD PTR $T10[ebp]
	mov	DWORD PTR _pwszSession$19[ebp], eax

; 347  :                 
; 348  :                 if( pwszSession)

	cmp	DWORD PTR _pwszSession$19[ebp], 0
	je	SHORT $LN27@DirectPlay

; 349  :                 {
; 350  :                     wcscpy(pwszSession, pAppDesc->pwszSessionName);

	mov	ecx, DWORD PTR _pAppDesc$24[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _pwszSession$19[ebp]
	push	eax
	call	_wcscpy
	add	esp, 8
$LN27@DirectPlay:

; 351  :                 }
; 352  :             }
; 353  : 
; 354  :             pHostNode->pwszSessionName = pwszSession;

	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	mov	edx, DWORD PTR _pwszSession$19[ebp]
	mov	DWORD PTR [ecx+8], edx

; 355  : 
; 356  :             // Insert it onto the front of the list
; 357  :             pHostNode->pNext = g_pHostList ? g_pHostList->pNext : NULL;

	cmp	DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A, 0 ; g_pHostList
	je	SHORT $LN46@DirectPlay
	mov	eax, DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A ; g_pHostList
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv211[ebp], ecx
	jmp	SHORT $LN47@DirectPlay
$LN46@DirectPlay:
	mov	DWORD PTR tv211[ebp], 0
$LN47@DirectPlay:
	mov	edx, DWORD PTR _pHostNode$29[ebp]
	mov	eax, DWORD PTR tv211[ebp]
	mov	DWORD PTR [edx+12], eax

; 358  :             g_pHostList = pHostNode;

	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	mov	DWORD PTR ?g_pHostList@@3PAUHOST_NODE@@A, ecx ; g_pHostList

; 359  :             pHostNode = NULL;

	mov	DWORD PTR _pHostNode$29[ebp], 0
$Break_ENUM_HOSTS_RESPONSE$51:

; 360  : 
; 361  : Break_ENUM_HOSTS_RESPONSE:
; 362  :             LeaveCriticalSection(&g_csHostList);

	push	OFFSET ?g_csHostList@@3U_RTL_CRITICAL_SECTION@@A ; g_csHostList
	call	DWORD PTR __imp__LeaveCriticalSection@4

; 363  : 
; 364  :             if( pHostNode)

	cmp	DWORD PTR _pHostNode$29[ebp], 0
	je	SHORT $LN25@DirectPlay

; 365  :             {
; 366  :                 SAFE_RELEASE(pHostNode->pHostAddress);

	mov	edx, DWORD PTR _pHostNode$29[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN24@DirectPlay
	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pHostNode$29[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	DWORD PTR [eax+4], 0
$LN24@DirectPlay:

; 367  : 
; 368  :                 SAFE_DELETE(pHostNode->pAppDesc);

	mov	ecx, DWORD PTR _pHostNode$29[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN23@DirectPlay
	mov	edx, DWORD PTR _pHostNode$29[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR _pHostNode$29[ebp]
	mov	DWORD PTR [edx], 0
$LN23@DirectPlay:

; 369  : 
; 370  :                 delete pHostNode;

	mov	eax, DWORD PTR _pHostNode$29[ebp]
	mov	DWORD PTR $T15[ebp], eax
	mov	ecx, DWORD PTR $T15[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN25@DirectPlay:

; 371  :             }
; 372  : 
; 373  :             break;

	jmp	$LN42@DirectPlay
$LN22@DirectPlay:

; 374  :         }
; 375  :     
; 376  :         case DPN_MSGID_RECEIVE:
; 377  :         {
; 378  :             PDPNMSG_RECEIVE pReceiveMsg;
; 379  :             pReceiveMsg = (PDPNMSG_RECEIVE)pMsgBuffer;

	mov	edx, DWORD PTR _pMsgBuffer$[ebp]
	mov	DWORD PTR _pReceiveMsg$23[ebp], edx

; 380  : 			GAMEMSG_GENERIC* pMsg;
; 381  : 			pMsg = (GAMEMSG_GENERIC*) pReceiveMsg->pReceiveData;

	mov	eax, DWORD PTR _pReceiveMsg$23[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pMsg$14[ebp], ecx

; 382  : 
; 383  : 			switch (pMsg->dwType)

	mov	edx, DWORD PTR _pMsg$14[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv236[ebp], eax
	mov	ecx, DWORD PTR tv236[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv236[ebp], ecx
	cmp	DWORD PTR tv236[ebp], 3
	ja	$LN20@DirectPlay
	mov	edx, DWORD PTR tv236[ebp]
	jmp	DWORD PTR $LN50@DirectPlay[edx*4]
$LN19@DirectPlay:

; 384  : 			{	// this makes a lokal array if VUIDFREQA vs DPNID's so the voiceclient can set the correct transmittarget
; 385  : 			case GAME_MSGID_ResetFreqarrey:
; 386  : 				{
; 387  : 					g_afreqarrey.count = 0;

	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A, 0

; 388  : 					for (int i = 0; i <maxfreqs ; i++)

	mov	DWORD PTR _i$25[ebp], 0
	jmp	SHORT $LN18@DirectPlay
$LN17@DirectPlay:
	mov	eax, DWORD PTR _i$25[ebp]
	add	eax, 1
	mov	DWORD PTR _i$25[ebp], eax
$LN18@DirectPlay:
	cmp	DWORD PTR _i$25[ebp], 1000		; 000003e8H
	jge	SHORT $LN16@DirectPlay

; 389  : 					{
; 390  : 						g_afreqarrey.Freq[i][0] = 0;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _i$25[ebp]
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[ecx+edx*8+4], 0

; 391  : 						g_afreqarrey.Freq[i][1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _i$25[ebp]
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[eax+ecx*8+4], 0

; 392  : 					}

	jmp	SHORT $LN17@DirectPlay
$LN16@DirectPlay:

; 393  : 					break;

	jmp	$LN20@DirectPlay
$LN15@DirectPlay:

; 394  : 				}
; 395  : 			case GAME_MSGID_SetFreqId:
; 396  : 				{
; 397  : 					MonoPrint ("voice SetFreqId");

	push	OFFSET ??_C@_0BA@NPKNBHHE@voice?5SetFreqId?$AA@
	call	_MonoPrint
	add	esp, 4

; 398  : 				COM_MESSAGE_SetFreqId* SetFreqIdMessage;
; 399  : 				SetFreqIdMessage = (COM_MESSAGE_SetFreqId*) pReceiveMsg->pReceiveData;

	mov	edx, DWORD PTR _pReceiveMsg$23[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _SetFreqIdMessage$16[ebp], eax

; 400  : 				g_afreqarrey.Freq[g_afreqarrey.count][0]=  SetFreqIdMessage->Freq[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A
	mov	esi, DWORD PTR _SetFreqIdMessage$16[ebp]
	mov	ecx, DWORD PTR [esi+ecx+4]
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[edx+eax*8+4], ecx

; 401  : 				g_afreqarrey.Freq[g_afreqarrey.count][1]=  SetFreqIdMessage->Freq[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A
	mov	esi, DWORD PTR _SetFreqIdMessage$16[ebp]
	mov	edx, DWORD PTR [esi+edx+4]
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[eax+ecx*8+4], edx

; 402  : 				g_afreqarrey.count++;

	mov	eax, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A
	add	eax, 1
	mov	DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A, eax

; 403  : 				break;

	jmp	$LN20@DirectPlay
$LN14@DirectPlay:

; 404  : 				}
; 405  : 				// this sets a clients group membership
; 406  : 			case GAME_MSGID_SetClientListenFreqs:
; 407  : 				{
; 408  : 					MonoPrint ("voice SetClientListenFreqs");

	push	OFFSET ??_C@_0BL@GMMLPFJF@voice?5SetClientListenFreqs?$AA@
	call	_MonoPrint
	add	esp, 4

; 409  : 				if (!g_bHost) 

	cmp	DWORD PTR ?g_bHost@@3HA, 0		; g_bHost
	jne	SHORT $LN13@DirectPlay

; 410  : 					break;

	jmp	SHORT $LN20@DirectPlay
$LN13@DirectPlay:

; 411  : 				COM_MESSAGE_SetClientListenFreqs* SetClientListenFreqsMessage;
; 412  : 				SetClientListenFreqsMessage = (COM_MESSAGE_SetClientListenFreqs*) pReceiveMsg->pReceiveData;

	mov	ecx, DWORD PTR _pReceiveMsg$23[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _SetClientListenFreqsMessage$21[ebp], edx

; 413  : 				SetListenFreqsHost (SetClientListenFreqsMessage->dpnid, 
; 414  : 					SetClientListenFreqsMessage->com[0],
; 415  : 					SetClientListenFreqsMessage->com[1],
; 416  : 					SetClientListenFreqsMessage->com[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _SetClientListenFreqsMessage$21[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _SetClientListenFreqsMessage$21[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _SetClientListenFreqsMessage$21[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _SetClientListenFreqsMessage$21[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?SetListenFreqsHost@@YAXKKKK@Z		; SetListenFreqsHost
	add	esp, 16					; 00000010H

; 417  : 				break;

	jmp	SHORT $LN20@DirectPlay
$LN12@DirectPlay:

; 418  : 				}
; 419  : 			case GAME_MSGID_Setg_dpnidLocalPlayer:
; 420  : 				{
; 421  : 					MonoPrint ("voice Setg_dpnidLocalPlayer");

	push	OFFSET ??_C@_0BM@JGPCMMDF@voice?5Setg_dpnidLocalPlayer?$AA@
	call	_MonoPrint
	add	esp, 4

; 422  : 				COM_MESSAGE_Setg_dpnidLocalPlayer* Setg_dpnidLocalPlayer;
; 423  : 				Setg_dpnidLocalPlayer = (COM_MESSAGE_Setg_dpnidLocalPlayer*) pReceiveMsg->pReceiveData;

	mov	edx, DWORD PTR _pReceiveMsg$23[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _Setg_dpnidLocalPlayer$13[ebp], eax

; 424  : 				g_dpnidLocalPlayer = Setg_dpnidLocalPlayer->Id;

	mov	ecx, DWORD PTR _Setg_dpnidLocalPlayer$13[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR ?g_dpnidLocalPlayer@@3KA, edx	; g_dpnidLocalPlayer
$LN20@DirectPlay:

; 425  : 				break;
; 426  : 				}
; 427  : 			}
; 428  : 		break;

	jmp	$LN42@DirectPlay
$LN11@DirectPlay:

; 429  :         }
; 430  :     
; 431  :     
; 432  :         case DPN_MSGID_CREATE_PLAYER:
; 433  :         {
; 434  : 			MonoPrint ("voice CREATE_PLAYER");

	push	OFFSET ??_C@_0BE@FCEDKJBG@voice?5CREATE_PLAYER?$AA@
	call	_MonoPrint
	add	esp, 4

; 435  :             PDPNMSG_CREATE_PLAYER   pCreatePlayerMsg;
; 436  :             DWORD                   dwSize = 0;

	mov	DWORD PTR _dwSize$22[ebp], 0

; 437  :             DPN_PLAYER_INFO*        pdpPlayerInfo = NULL;

	mov	DWORD PTR _pdpPlayerInfo$28[ebp], 0

; 438  : 
; 439  :             pCreatePlayerMsg = (PDPNMSG_CREATE_PLAYER)pMsgBuffer;

	mov	eax, DWORD PTR _pMsgBuffer$[ebp]
	mov	DWORD PTR _pCreatePlayerMsg$27[ebp], eax

; 440  : 
; 441  :             // check to see if we are the player being created
; 442  : 			if(g_dpnidLocalPlayer)

	cmp	DWORD PTR ?g_dpnidLocalPlayer@@3KA, 0	; g_dpnidLocalPlayer
	je	SHORT $LN10@DirectPlay

; 443  : 			{
; 444  : 				hr = g_pDPServer->GetClientInfo(pCreatePlayerMsg->dpnidPlayer, pdpPlayerInfo, &dwSize, 0);

	push	0
	lea	ecx, DWORD PTR _dwSize$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _pdpPlayerInfo$28[ebp]
	push	edx
	mov	eax, DWORD PTR _pCreatePlayerMsg$27[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+36]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax

; 445  : 			}
; 446  : 			else 

	jmp	SHORT $LN9@DirectPlay
$LN10@DirectPlay:

; 447  : 			{
; 448  :             g_dpnidLocalPlayer = pCreatePlayerMsg->dpnidPlayer;

	mov	eax, DWORD PTR _pCreatePlayerMsg$27[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR ?g_dpnidLocalPlayer@@3KA, ecx	; g_dpnidLocalPlayer

; 449  : 			return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN44@DirectPlay
$LN9@DirectPlay:

; 450  : 			}
; 451  : 
; 452  :             if( FAILED( hr) && hr != DPNERR_BUFFERTOOSMALL)

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@DirectPlay
	cmp	DWORD PTR _hr$[ebp], -2146074368	; 80158100H
	je	SHORT $LN8@DirectPlay

; 453  :             {
; 454  :                 MonoPrint("Failed GetPeerInfo:  0x%X\n", hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET ??_C@_0BL@LPMMCDLH@Failed?5GetPeerInfo?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 455  :                 return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN44@DirectPlay
$LN8@DirectPlay:

; 456  :             }
; 457  : 
; 458  :             pdpPlayerInfo = (DPN_PLAYER_INFO*) new BYTE[dwSize];

	mov	eax, DWORD PTR _dwSize$22[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _pdpPlayerInfo$28[ebp], ecx

; 459  :             ZeroMemory(pdpPlayerInfo, dwSize);

	mov	edx, DWORD PTR _dwSize$22[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pdpPlayerInfo$28[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 460  :             pdpPlayerInfo->dwSize = sizeof(DPN_PLAYER_INFO);

	mov	ecx, DWORD PTR _pdpPlayerInfo$28[ebp]
	mov	DWORD PTR [ecx], 24			; 00000018H

; 461  : 
; 462  :  			if( FAILED( hr = g_pDPServer->GetClientInfo(pCreatePlayerMsg->dpnidPlayer, pdpPlayerInfo, &dwSize, 0 ) ) )

	push	0
	lea	edx, DWORD PTR _dwSize$22[ebp]
	push	edx
	mov	eax, DWORD PTR _pdpPlayerInfo$28[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCreatePlayerMsg$27[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	edx
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@DirectPlay

; 463  : 			
; 464  : 
; 465  :             {
; 466  :                 MonoPrint("Failed GetPeerInfo:  0x%X\n", hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BL@LPMMCDLH@Failed?5GetPeerInfo?3?5?50x?$CFX?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 467  :                 goto Error_DPN_MSGID_CREATE_PLAYER;

	jmp	$Error_DPN_MSGID_CREATE_PLAYER$52
	jmp	$Error_DPN_MSGID_CREATE_PLAYER$52
$LN7@DirectPlay:

; 468  :             }
; 469  : 
; 470  : 			DPN_BUFFER_DESC dpnBuffer;
; 471  : 			COM_MESSAGE_Setg_dpnidLocalPlayer  comData;
; 472  : 
; 473  : 			comData.dwType =  GAME_MSGID_Setg_dpnidLocalPlayer;

	mov	DWORD PTR _comData$3[ebp], 3

; 474  : 			comData.Id = pCreatePlayerMsg->dpnidPlayer;

	mov	edx, DWORD PTR _pCreatePlayerMsg$27[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _comData$3[ebp+4], eax

; 475  : 
; 476  : 			dpnBuffer.pBufferData = (BYTE*) &comData;

	lea	ecx, DWORD PTR _comData$3[ebp]
	mov	DWORD PTR _dpnBuffer$2[ebp+4], ecx

; 477  : 			dpnBuffer.dwBufferSize = sizeof (COM_MESSAGE_Setg_dpnidLocalPlayer);

	mov	DWORD PTR _dpnBuffer$2[ebp], 8

; 478  : 
; 479  : 			if( FAILED( hr = g_pDPServer->SendTo( pCreatePlayerMsg->dpnidPlayer,  // dpnid
; 480  : 										&dpnBuffer,             // pBufferDesc
; 481  : 										1,                      // cBufferDesc
; 482  : 										0,                      // dwTimeOut
; 483  : 										NULL,                   // pvAsyncContext
; 484  : 										NULL,                   // pvAsyncHandle
; 485  : 										DPNSEND_SYNC |DPNSEND_GUARANTEED) ) )   // dwFlags

	push	-2147483640				; 80000008H
	push	0
	push	0
	push	0
	push	1
	lea	edx, DWORD PTR _dpnBuffer$2[ebp]
	push	edx
	mov	eax, DWORD PTR _pCreatePlayerMsg$27[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?g_pDPServer@@3PAUIDirectPlay8Server@@A ; g_pDPServer
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@DirectPlay

; 486  : 			{
; 487  : 			printf("Failed Sending Data:  0x%x\n", hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BM@PIPNPMIJ@Failed?5Sending?5Data?3?5?50x?$CFx?6?$AA@
	call	_printf
	add	esp, 8
$LN5@DirectPlay:

; 488  : 			}
; 489  : 
; 490  :             
; 491  : 			for( i; i < g_afreqarrey.count; i++ )

	jmp	SHORT $LN4@DirectPlay
$LN3@DirectPlay:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@DirectPlay:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A
	jge	SHORT $Error_DPN_MSGID_CREATE_PLAYER$52

; 492  : 			{
; 493  : 				SendFreqid(
; 494  : 					pCreatePlayerMsg->dpnidPlayer,
; 495  : 					g_afreqarrey.Freq[i][0], 
; 496  : 					g_afreqarrey.Freq[i][1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[eax+ecx*8+4]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?g_afreqarrey@@3Ufreqarrey@@A[eax+ecx*8+4]
	push	edx
	mov	eax, DWORD PTR _pCreatePlayerMsg$27[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?SendFreqid@@YAXKKK@Z			; SendFreqid
	add	esp, 12					; 0000000cH

; 497  : 			}

	jmp	SHORT $LN3@DirectPlay
$Error_DPN_MSGID_CREATE_PLAYER$52:

; 498  : 
; 499  : Error_DPN_MSGID_CREATE_PLAYER:
; 500  :             SAFE_DELETE_ARRAY(pdpPlayerInfo);

	cmp	DWORD PTR _pdpPlayerInfo$28[ebp], 0
	je	SHORT $LN42@DirectPlay
	mov	edx, DWORD PTR _pdpPlayerInfo$28[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _pdpPlayerInfo$28[ebp], 0
$LN42@DirectPlay:

; 501  :             break;
; 502  :         }
; 503  :     }
; 504  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN44@DirectPlay:

; 505  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN49@DirectPlay:
	DD	$LN41@DirectPlay
	DD	$LN11@DirectPlay
	DD	$LN40@DirectPlay
	DD	$LN22@DirectPlay
	DD	$LN42@DirectPlay
$LN48@DirectPlay:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
$LN50@DirectPlay:
	DD	$LN14@DirectPlay
	DD	$LN15@DirectPlay
	DD	$LN12@DirectPlay
	DD	$LN19@DirectPlay
?DirectPlayMessageHandler@@YGJPAXK0@Z ENDP		; DirectPlayMessageHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetFlyState@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlyState@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetFlyState, COMDAT
; _this$ = ecx

; 147  : 	uchar GetFlyState (void) const                { return flyState; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+513]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlyState@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetFlyState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ PROC ; FalconSessionEntity::GetPlayerFlightID, COMDAT
; _this$ = ecx

; 134  : 	VU_ID GetPlayerFlightID(void) const           { return playerFlight; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+460]
	mov	edx, DWORD PTR [eax+464]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerFlightID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ENDP ; FalconSessionEntity::GetPlayerFlightID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\logbook.h
;	COMDAT ?Name@LogBookData@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@LogBookData@@QAEPADXZ PROC			; LogBookData::Name, COMDAT
; _this$ = ecx

; 167  : 	_TCHAR *Name(void)								{return Pilot.Name;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@LogBookData@@QAEPADXZ ENDP			; LogBookData::Name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GameName@VuGameEntity@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GameName@VuGameEntity@@QAEPADXZ PROC			; VuGameEntity::GameName, COMDAT
; _this$ = ecx

; 400  : 	char *GameName()		{ return gameName_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]
	mov	esp, ebp
	pop	ebp
	ret	0
?GameName@VuGameEntity@@QAEPADXZ ENDP			; VuGameEntity::GameName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.0\include\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@
$LN3@:
	mov	DWORD PTR tv68[ebp], 0
$LN4@:
	mov	al, BYTE PTR tv68[ebp]

; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.0\include\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@IsEqualGUI
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
	mov	DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
	mov	eax, DWORD PTR tv69[ebp]

; 162  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
END
