; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\FileMemMap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Clear@FileMemMap@@AAEXXZ			; FileMemMap::Clear
PUBLIC	??0FileMemMap@@QAE@XZ				; FileMemMap::FileMemMap
PUBLIC	??1FileMemMap@@QAE@XZ				; FileMemMap::~FileMemMap
PUBLIC	?Open@FileMemMap@@QAEHPBDHH@Z			; FileMemMap::Open
PUBLIC	?Close@FileMemMap@@QAEXXZ			; FileMemMap::Close
PUBLIC	?GetData@FileMemMap@@QAEPAEHH@Z			; FileMemMap::GetData
PUBLIC	?ReadDataAt@FileMemMap@@QAEHKPAXK@Z		; FileMemMap::ReadDataAt
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__MapViewOfFileEx@24:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
_bytesRead$ = -12					; size = 4
_this$ = -8						; size = 4
_result$ = -4						; size = 4
_offset$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
?ReadDataAt@FileMemMap@@QAEHKPAXK@Z PROC		; FileMemMap::ReadDataAt
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 81   :     int	result = SetFilePointer(m_hFile, offset, NULL, FILE_BEGIN);

	push	0
	push	0
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SetFilePointer@16
	mov	DWORD PTR _result$[ebp], eax

; 82   :     if (result == -1) return FALSE;

	cmp	DWORD PTR _result$[ebp], -1
	jne	SHORT $LN3@ReadDataAt
	xor	eax, eax
	jmp	SHORT $LN4@ReadDataAt
$LN3@ReadDataAt:

; 83   :     DWORD bytesRead;
; 84   :     result = ReadFile( m_hFile, buffer, size, &bytesRead, NULL );

	push	0
	lea	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__ReadFile@20
	mov	DWORD PTR _result$[ebp], eax

; 85   :     if (result == -1 || bytesRead != size)

	cmp	DWORD PTR _result$[ebp], -1
	je	SHORT $LN1@ReadDataAt
	mov	edx, DWORD PTR _bytesRead$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	je	SHORT $LN2@ReadDataAt
$LN1@ReadDataAt:

; 86   : 	return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@ReadDataAt
$LN2@ReadDataAt:

; 87   :     return TRUE;

	mov	eax, 1
$LN4@ReadDataAt:

; 88   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReadDataAt@FileMemMap@@QAEHKPAXK@Z ENDP		; FileMemMap::ReadDataAt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_offset$ = 8						; size = 4
_len$ = 12						; size = 4
?GetData@FileMemMap@@QAEPAEHH@Z PROC			; FileMemMap::GetData
; _this$ = ecx

; 72   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   :     if (m_hMap == INVALID_HANDLE_VALUE || offset < 0 || offset + len > m_len)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN1@GetData
	cmp	DWORD PTR _offset$[ebp], 0
	jl	SHORT $LN1@GetData
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jle	SHORT $LN2@GetData
$LN1@GetData:

; 74   : 	return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetData
$LN2@GetData:

; 75   :     return &m_Data[offset];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, DWORD PTR _offset$[ebp]
$LN3@GetData:

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetData@FileMemMap@@QAEPAEHH@Z ENDP			; FileMemMap::GetData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@FileMemMap@@QAEXXZ PROC				; FileMemMap::Close
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   :     if (m_Data) UnmapViewOfFile(m_Data);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@Close
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__UnmapViewOfFile@4
$LN3@Close:

; 20   :     if (m_hMap != INVALID_HANDLE_VALUE) CloseHandle(m_hMap);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN2@Close
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
$LN2@Close:

; 21   :     if (m_hFile != INVALID_HANDLE_VALUE) CloseHandle(m_hFile);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN1@Close
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
$LN1@Close:

; 22   :     Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@FileMemMap@@AAEXXZ		; FileMemMap::Clear

; 23   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Close@FileMemMap@@QAEXXZ ENDP				; FileMemMap::Close
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
tv143 = -24						; size = 4
tv137 = -20						; size = 4
tv91 = -16						; size = 4
tv74 = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_rw$ = 12						; size = 4
_nomap$ = 16						; size = 4
?Open@FileMemMap@@QAEHPBDHH@Z PROC			; FileMemMap::Open
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 35   :     m_hFile = CreateFile(
; 36   : 	filename,
; 37   : 	rw == TRUE ? GENERIC_WRITE : GENERIC_READ,
; 38   : 	rw == TRUE ? FILE_SHARE_WRITE : FILE_SHARE_READ,
; 39   : 	NULL,
; 40   : 	OPEN_EXISTING,
; 41   : 	FILE_ATTRIBUTE_NORMAL|FILE_FLAG_RANDOM_ACCESS,
; 42   : 	NULL
; 43   : 	);

	cmp	DWORD PTR _rw$[ebp], 1
	jne	SHORT $LN6@Open
	mov	DWORD PTR tv71[ebp], 2
	jmp	SHORT $LN7@Open
$LN6@Open:
	mov	DWORD PTR tv71[ebp], 1
$LN7@Open:
	cmp	DWORD PTR _rw$[ebp], 1
	jne	SHORT $LN8@Open
	mov	DWORD PTR tv74[ebp], 1073741824		; 40000000H
	jmp	SHORT $LN9@Open
$LN8@Open:
	mov	DWORD PTR tv74[ebp], -2147483648	; 80000000H
$LN9@Open:
	push	0
	push	268435584				; 10000080H
	push	3
	push	0
	mov	eax, DWORD PTR tv71[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 44   :     if (m_hFile == INVALID_HANDLE_VALUE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], -1
	jne	SHORT $LN3@Open

; 45   : 	return FALSE;

	xor	eax, eax
	jmp	$LN4@Open
$LN3@Open:

; 46   :     m_len = GetFileSize(m_hFile, NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GetFileSize@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 47   :     if (nomap == TRUE) return TRUE; // we don't really want to map it

	cmp	DWORD PTR _nomap$[ebp], 1
	jne	SHORT $LN2@Open
	mov	eax, 1
	jmp	$LN4@Open
$LN2@Open:

; 48   :     m_hMap = CreateFileMapping(
; 49   : 	m_hFile,
; 50   : 	NULL,
; 51   : 	rw == TRUE ? (PAGE_READWRITE) : (PAGE_READONLY | SEC_COMMIT),
; 52   : 	0,
; 53   : 	0,
; 54   : 	NULL
; 55   : 	);

	cmp	DWORD PTR _rw$[ebp], 1
	jne	SHORT $LN10@Open
	mov	DWORD PTR tv91[ebp], 4
	jmp	SHORT $LN11@Open
$LN10@Open:
	mov	DWORD PTR tv91[ebp], 134217730		; 08000002H
$LN11@Open:
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CreateFileMappingA@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 56   :     
; 57   :     if (m_hMap == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN1@Open

; 58   : 	return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@Open
$LN1@Open:

; 59   :     
; 60   :     m_Data = (BYTE *)MapViewOfFileEx(
; 61   : 	m_hMap,
; 62   : 	rw == TRUE ? FILE_MAP_WRITE : FILE_MAP_READ,
; 63   : 	0,
; 64   : 	0,
; 65   : 	0,
; 66   : 	NULL
; 67   : 	);

	cmp	DWORD PTR _rw$[ebp], 1
	jne	SHORT $LN12@Open
	mov	DWORD PTR tv137[ebp], 2
	jmp	SHORT $LN13@Open
$LN12@Open:
	mov	DWORD PTR tv137[ebp], 4
$LN13@Open:
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR tv137[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__MapViewOfFileEx@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 68   :     return m_Data == NULL ? FALSE : TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN14@Open
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN15@Open
$LN14@Open:
	mov	DWORD PTR tv143[ebp], 1
$LN15@Open:
	mov	eax, DWORD PTR tv143[ebp]
$LN4@Open:

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Open@FileMemMap@@QAEHPBDHH@Z ENDP			; FileMemMap::Open
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FileMemMap@@QAE@XZ PROC				; FileMemMap::~FileMemMap
; _this$ = ecx

; 13   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 14   :     Close();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@FileMemMap@@QAEXXZ		; FileMemMap::Close

; 15   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1FileMemMap@@QAE@XZ ENDP				; FileMemMap::~FileMemMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FileMemMap@@QAE@XZ PROC				; FileMemMap::FileMemMap
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 9    :     Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@FileMemMap@@AAEXXZ		; FileMemMap::Clear

; 10   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FileMemMap@@QAE@XZ ENDP				; FileMemMap::FileMemMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\filememmap.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@FileMemMap@@AAEXXZ PROC				; FileMemMap::Clear
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   :     m_hFile = INVALID_HANDLE_VALUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1

; 28   :     m_hMap = INVALID_HANDLE_VALUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1

; 29   :     m_Data = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 30   :     m_len = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 31   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@FileMemMap@@AAEXXZ ENDP				; FileMemMap::Clear
_TEXT	ENDS
END
