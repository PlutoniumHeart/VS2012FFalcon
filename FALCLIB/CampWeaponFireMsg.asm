; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\MsgSrc\CampWeaponFireMsg.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?gDamageStatusBuffer@@3PAEA			; gDamageStatusBuffer
PUBLIC	?gDamageStatusPtr@@3PAEA			; gDamageStatusPtr
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
_BSS	SEGMENT
?gDamageStatusBuffer@@3PAEA DB 0100H DUP (?)		; gDamageStatusBuffer
?gDamageStatusPtr@@3PAEA DD 01H DUP (?)			; gDamageStatusPtr
_BSS	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?EntityId@VuMessage@@QBE?AVVU_ID@@XZ		; VuMessage::EntityId
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconCampWeaponsFire::FalconCampWeaponsFire
PUBLIC	??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z	; FalconCampWeaponsFire::FalconCampWeaponsFire
PUBLIC	??1FalconCampWeaponsFire@@UAE@XZ		; FalconCampWeaponsFire::~FalconCampWeaponsFire
PUBLIC	?Size@FalconCampWeaponsFire@@UBEHXZ		; FalconCampWeaponsFire::Size
PUBLIC	?Decode@FalconCampWeaponsFire@@UAEHPAPAEPAJ@Z	; FalconCampWeaponsFire::Decode
PUBLIC	?Encode@FalconCampWeaponsFire@@UAEHPAPAE@Z	; FalconCampWeaponsFire::Encode
PUBLIC	??0DATA_BLOCK@FalconCampWeaponsFire@@QAE@XZ	; FalconCampWeaponsFire::DATA_BLOCK::DATA_BLOCK
PUBLIC	?Process@FalconCampWeaponsFire@@MAEHE@Z		; FalconCampWeaponsFire::Process
PUBLIC	??_GFalconCampWeaponsFire@@UAEPAXI@Z		; FalconCampWeaponsFire::`scalar deleting destructor'
PUBLIC	?GetSimTarget@@YAPAVSimBaseClass@@PAVCampBaseClass@@E@Z ; GetSimTarget
PUBLIC	?FireOnSimEntity@@YAXPAVCampBaseClass@@0QAFQAEE@Z ; FireOnSimEntity
PUBLIC	?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z ; FireOnSimEntity
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ ; VuBin<SquadronClass>::get
PUBLIC	?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ; FalconSessionEntity::GetPlayerSquadron
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	??0SimInitDataClass@@QAE@XZ			; SimInitDataClass::SimInitDataClass
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?InPackage@CampBaseClass@@QAEHXZ		; CampBaseClass::InPackage
PUBLIC	?InSimLists@CampBaseClass@@QAEHXZ		; CampBaseClass::InSimLists
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?GetIdentified@CampBaseClass@@QAEHE@Z		; CampBaseClass::GetIdentified
PUBLIC	?GetTotalFeatures@ObjectiveClass@@QAEFXZ	; ObjectiveClass::GetTotalFeatures
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?IsActive@OTWDriverClass@@QAEHXZ		; OTWDriverClass::IsActive
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	?SetLaunchRotation@MissileClass@@QAEXMM@Z	; MissileClass::SetLaunchRotation
PUBLIC	?Type@SensorClass@@QAE?AW4SensorType@1@XZ	; SensorClass::Type
PUBLIC	?InSim@SimulationLoopControl@@SA_NXZ		; SimulationLoopControl::InSim
PUBLIC	?InSim@SimulationDriver@@QBE_NXZ		; SimulationDriver::InSim
PUBLIC	?DoDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z ; DoDistanceVisualEffects
PUBLIC	?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z ; DoShortDistanceVisualEffects
PUBLIC	?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z ; FireMissileAtSim
PUBLIC	?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z ; GetSimDamageMessage
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7FalconCampWeaponsFire@@6B@			; FalconCampWeaponsFire::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_C@_0BF@DLINKALD@Sim?5Target?5is?5NULL?$DP?6?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FalconCampWeaponsFire@@6B@			; FalconCampWeaponsFire::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFalconCampWeaponsFire@@@8		; FalconCampWeaponsFire `RTTI Type Descriptor'
PUBLIC	??_R3FalconCampWeaponsFire@@8			; FalconCampWeaponsFire::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconCampWeaponsFire@@8			; FalconCampWeaponsFire::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconCampWeaponsFire@@8		; FalconCampWeaponsFire::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@FalconEvent@@8			; FalconEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEvent@@@8				; FalconEvent `RTTI Type Descriptor'
PUBLIC	??_R3FalconEvent@@8				; FalconEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEvent@@8				; FalconEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuMessage@@8			; VuMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuMessage@@@8				; VuMessage `RTTI Type Descriptor'
PUBLIC	??_R3VuMessage@@8				; VuMessage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuMessage@@8				; VuMessage::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@42200000
PUBLIC	__real@43960000
PUBLIC	__real@43c80000
PUBLIC	__real@442f0000
PUBLIC	__real@44480000
PUBLIC	__real@44bb8000
PUBLIC	__real@471c4000
PUBLIC	__real@477fff00
PUBLIC	__real@8000000000000000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	_sprintf:PROC
EXTRN	?SetDelta@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetDelta
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Insert
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?DoSend@VuMessage@@UAEEXZ:PROC			; VuMessage::DoSend
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z:PROC ; VuSessionEntity::GetCameraEntity
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?Size@FalconEvent@@UBEHXZ:PROC			; FalconEvent::Size
EXTRN	?Decode@FalconEvent@@UAEHPAPAEPAJ@Z:PROC	; FalconEvent::Decode
EXTRN	?Encode@FalconEvent@@UAEHPAPAE@Z:PROC		; FalconEvent::Encode
EXTRN	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconEvent::FalconEvent
EXTRN	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@1@Z:PROC ; FalconEvent::FalconEvent
EXTRN	??1FalconEvent@@MAE@XZ:PROC			; FalconEvent::~FalconEvent
EXTRN	?Activate@FalconEvent@@MAEHPAVVuEntity@@@Z:PROC	; FalconEvent::Activate
EXTRN	?LocalSize@FalconEvent@@EBEHXZ:PROC		; FalconEvent::LocalSize
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	_MonoPrint:PROC
EXTRN	??_EFalconCampWeaponsFire@@UAEPAXI@Z:PROC	; FalconCampWeaponsFire::`vector deleting destructor'
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	??0FalconWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconWeaponsFire::FalconWeaponsFire
EXTRN	??1FalconWeaponsFire@@UAE@XZ:PROC		; FalconWeaponsFire::~FalconWeaponsFire
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconMissileEndMessage::FalconMissileEndMessage
EXTRN	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDamageMessage::FalconDamageMessage
EXTRN	??0FalconDeathMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDeathMessage::FalconDeathMessage
EXTRN	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentEntity
EXTRN	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentNumber
EXTRN	??0FalconCampEventMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconCampEventMessage::FalconCampEventMessage
EXTRN	?SendCampUIMessage@@YAXPAVFalconCampEventMessage@@@Z:PROC ; SendCampUIMessage
EXTRN	?GetVehicleID@UnitClass@@QAEFH@Z:PROC		; UnitClass::GetVehicleID
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?PickRandomPilot@FlightClass@@QAEHH@Z:PROC	; FlightClass::PickRandomPilot
EXTRN	?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z:PROC ; FlightClass::GetAdjustedPlayerSlot
EXTRN	?GetPilotCallNumber@FlightClass@@QAEHH@Z:PROC	; FlightClass::GetPilotCallNumber
EXTRN	?GetPilotVoiceID@FlightClass@@QAEEH@Z:PROC	; FlightClass::GetPilotVoiceID
EXTRN	?GetFlightLeadSlot@FlightClass@@QAEHXZ:PROC	; FlightClass::GetFlightLeadSlot
EXTRN	?RegisterShot@MissionEvaluationClass@@QAEXPAVFalconWeaponsFire@@@Z:PROC ; MissionEvaluationClass::RegisterShot
EXTRN	?GetEnemyTeam@@YAEE@Z:PROC			; GetEnemyTeam
EXTRN	??0SfxClass@@QAE@PAVFalconMissileEndMessage@@PAVFalconDamageMessage@@@Z:PROC ; SfxClass::SfxClass
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?AddSfxRequest@OTWDriverClass@@QAEXPAVSfxClass@@@Z:PROC ; OTWDriverClass::AddSfxRequest
EXTRN	?GetGroundType@OTWDriverClass@@QAEHMM@Z:PROC	; OTWDriverClass::GetGroundType
EXTRN	?Start@MissileClass@@QAEXPAVSimObjectType@@@Z:PROC ; MissileClass::Start
EXTRN	?SetLaunchPosition@MissileClass@@QAEXMMM@Z:PROC	; MissileClass::SetLaunchPosition
EXTRN	??0SimObjectType@@QAE@PAVFalconEntity@@@Z:PROC	; SimObjectType::SimObjectType
EXTRN	?Reference@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Reference
EXTRN	?Release@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Release
EXTRN	?InitAMissile@@YAPAVSimWeaponClass@@PAVFalconEntity@@GH@Z:PROC ; InitAMissile
EXTRN	?SetGuidancePlatform@BeamRiderClass@@QAEXPAVFalconEntity@@@Z:PROC ; BeamRiderClass::SetGuidancePlatform
EXTRN	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z:PROC ; DrawableParticleSys::PS_AddParticleEx
EXTRN	?InterestingSFX@@YAHMM@Z:PROC			; InterestingSFX
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?FLIGHT_COMBAT_CHECK_INTERVAL@@3FA:WORD		; FLIGHT_COMBAT_CHECK_INTERVAL
EXTRN	?GROUND_COMBAT_CHECK_INTERVAL@@3FA:WORD		; GROUND_COMBAT_CHECK_INTERVAL
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A:DWORD ; SimulationLoopControl::currentMode
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gRebuildBubbleNow@@3HA:DWORD			; gRebuildBubbleNow
EXTRN	?gMainHandler@@3PAVC_Handler@@A:DWORD		; gMainHandler
EXTRN	?g_bLogEvents@@3_NA:BYTE			; g_bLogEvents
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@471c4000
CONST	SEGMENT
__real@471c4000 DD 0471c4000r			; 40000
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@442f0000
CONST	SEGMENT
__real@442f0000 DD 0442f0000r			; 700
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuMessage@@8
rdata$r	SEGMENT
??_R2VuMessage@@8 DD FLAT:??_R1A@?0A@EA@VuMessage@@8	; VuMessage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuMessage@@8
rdata$r	SEGMENT
??_R3VuMessage@@8 DD 00H				; VuMessage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuMessage@@@8
_DATA	SEGMENT
??_R0?AVVuMessage@@@8 DD FLAT:??_7type_info@@6B@	; VuMessage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuMessage@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuMessage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuMessage@@8 DD FLAT:??_R0?AVVuMessage@@@8 ; VuMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEvent@@8
rdata$r	SEGMENT
??_R2FalconEvent@@8 DD FLAT:??_R1A@?0A@EA@FalconEvent@@8 ; FalconEvent::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEvent@@8
rdata$r	SEGMENT
??_R3FalconEvent@@8 DD 00H				; FalconEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEvent@@@8
_DATA	SEGMENT
??_R0?AVFalconEvent@@@8 DD FLAT:??_7type_info@@6B@	; FalconEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEvent@@8 DD FLAT:??_R0?AVFalconEvent@@@8 ; FalconEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconCampWeaponsFire@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconCampWeaponsFire@@8 DD FLAT:??_R0?AVFalconCampWeaponsFire@@@8 ; FalconCampWeaponsFire::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconCampWeaponsFire@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconCampWeaponsFire@@8
rdata$r	SEGMENT
??_R2FalconCampWeaponsFire@@8 DD FLAT:??_R1A@?0A@EA@FalconCampWeaponsFire@@8 ; FalconCampWeaponsFire::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEvent@@8
	DD	FLAT:??_R1A@?0A@EA@VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconCampWeaponsFire@@8
rdata$r	SEGMENT
??_R3FalconCampWeaponsFire@@8 DD 00H			; FalconCampWeaponsFire::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FalconCampWeaponsFire@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconCampWeaponsFire@@@8
_DATA	SEGMENT
??_R0?AVFalconCampWeaponsFire@@@8 DD FLAT:??_7type_info@@6B@ ; FalconCampWeaponsFire `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconCampWeaponsFire@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FalconCampWeaponsFire@@6B@
rdata$r	SEGMENT
??_R4FalconCampWeaponsFire@@6B@ DD 00H			; FalconCampWeaponsFire::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFalconCampWeaponsFire@@@8
	DD	FLAT:??_R3FalconCampWeaponsFire@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DLINKALD@Sim?5Target?5is?5NULL?$DP?6?$AA@
CONST	SEGMENT
??_C@_0BF@DLINKALD@Sim?5Target?5is?5NULL?$DP?6?$AA@ DB 'Sim Target is NUL'
	DB	'L?', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7FalconCampWeaponsFire@@6B@
CONST	SEGMENT
??_7FalconCampWeaponsFire@@6B@ DD FLAT:??_R4FalconCampWeaponsFire@@6B@ ; FalconCampWeaponsFire::`vftable'
	DD	FLAT:??_EFalconCampWeaponsFire@@UAEPAXI@Z
	DD	FLAT:?Size@FalconCampWeaponsFire@@UBEHXZ
	DD	FLAT:?DoSend@VuMessage@@UAEEXZ
	DD	FLAT:?Activate@FalconEvent@@MAEHPAVVuEntity@@@Z
	DD	FLAT:?Process@FalconCampWeaponsFire@@MAEHE@Z
	DD	FLAT:?Encode@FalconCampWeaponsFire@@UAEHPAPAE@Z
	DD	FLAT:?Decode@FalconCampWeaponsFire@@UAEHPAPAEPAJ@Z
	DD	FLAT:?LocalSize@FalconEvent@@EBEHXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z$0
__unwindtable$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z$0
__unwindtable$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z$0
__unwindtable$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z$0
__unwindtable$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$1
__unwindtable$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$1
__ehfuncinfo$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Process@FalconCampWeaponsFire@@MAEHE@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Process@FalconCampWeaponsFire@@MAEHE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Process@FalconCampWeaponsFire@@MAEHE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
$T2 = -80						; size = 8
$T3 = -72						; size = 8
$T4 = -64						; size = 8
$T5 = -56						; size = 8
$T6 = -48						; size = 8
$T7 = -40						; size = 4
_lethalRadius$ = -36					; size = 4
tv93 = -32						; size = 4
$T8 = -28						; size = 4
_wc$ = -24						; size = 4
_campTarg$ = -20					; size = 4
_message$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_shooter$ = 8						; size = 4
_target$ = 12						; size = 4
_rangeSq$ = 16						; size = 4
_damageType$ = 20					; size = 4
_weapId$ = 24						; size = 4
?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z PROC ; GetSimDamageMessage

; 702  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 703  : 	FalconDamageMessage *message;
; 704  : 	float lethalRadius;
; 705  : 	CampBaseClass *campTarg;
; 706  : 
; 707  : 	campTarg = target->GetCampaignObject();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campTarg$[ebp], eax

; 708  : 	message = new FalconDamageMessage (target->Id(), FalconLocalSession);

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN7@GetSimDama
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@GetSimDama
$LN7@GetSimDama:
	mov	DWORD PTR tv93[ebp], 0
$LN8@GetSimDama:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _message$[ebp], ecx

; 709  : 	message->dataBlock.fEntityID  = shooter->Id();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+74], ecx
	mov	DWORD PTR [eax+78], edx

; 710  : 	message->dataBlock.fCampID = shooter->GetCampID();

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+82], ax

; 711  : 	message->dataBlock.fSide   = shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [edx+87], al

; 712  : 	if ( shooter->IsFlight() )

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN4@GetSimDama

; 713  : 		message->dataBlock.fPilotID = (uchar)((Flight)shooter)->PickRandomPilot(campTarg->Id().num_);

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _campTarg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?PickRandomPilot@FlightClass@@QAEHH@Z	; FlightClass::PickRandomPilot
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+84], al

; 714  : 	else

	jmp	SHORT $LN3@GetSimDama
$LN4@GetSimDama:

; 715  : 		message->dataBlock.fPilotID   = 255;

	mov	edx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [edx+84], 255			; 000000ffH
$LN3@GetSimDama:

; 716  : 	message->dataBlock.fIndex     = shooter->Type();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+85], ax

; 717  : 	message->dataBlock.fWeaponID  = (unsigned short)(weapId + VU_LAST_ENTITY_TYPE);

	mov	edx, DWORD PTR _weapId$[ebp]
	add	edx, 100				; 00000064H
	mov	eax, DWORD PTR _message$[ebp]
	mov	WORD PTR [eax+88], dx

; 718  : 	message->dataBlock.fWeaponUID = shooter->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+90], edx
	mov	DWORD PTR [ecx+94], eax

; 719  : 
; 720  : 	message->dataBlock.dEntityID  = target->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], edx

; 721  : 	message->dataBlock.dCampID = campTarg->GetCampID();

	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+68], ax

; 722  : 	message->dataBlock.dSide   = campTarg->GetOwner();

	mov	ecx, DWORD PTR _campTarg$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [edx+73], al

; 723  : 	message->dataBlock.dPilotID   = 255;

	mov	eax, DWORD PTR _message$[ebp]
	mov	BYTE PTR [eax+70], 255			; 000000ffH

; 724  : 	message->dataBlock.dIndex     = target->Type();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+71], ax

; 725  : 
; 726  : 	message->dataBlock.damageRandomFact = 1.0f;

	mov	edx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+56], xmm0

; 727  : 
; 728  : 	WeaponClassDataType* wc = (WeaponClassDataType *)Falcon4ClassTable[weapId].dataPtr;

	mov	eax, DWORD PTR _weapId$[ebp]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _wc$[ebp], edx

; 729  : 
; 730  : 	lethalRadius = (float)wc->BlastRadius * wc->BlastRadius;

	mov	eax, DWORD PTR _wc$[ebp]
	movzx	ecx, WORD PTR [eax+52]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _wc$[ebp]
	movzx	eax, WORD PTR [edx+52]
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	movss	DWORD PTR _lethalRadius$[ebp], xmm0

; 731  : 
; 732  : 	if (rangeSq < POINT_BLANK)

	movss	xmm0, DWORD PTR __real@43c80000
	comiss	xmm0, DWORD PTR _rangeSq$[ebp]
	jbe	SHORT $LN2@GetSimDama

; 733  : 	{
; 734  : 		// Direct hit!
; 735  : 		message->dataBlock.damageType = damageType;

	mov	ecx, DWORD PTR _message$[ebp]
	mov	edx, DWORD PTR _damageType$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 736  : 	}
; 737  : 	else

	jmp	SHORT $LN1@GetSimDama
$LN2@GetSimDama:

; 738  : 	{
; 739  : 		// Adjust damage for distance:
; 740  : 		message->dataBlock.damageType = FalconDamageType::ProximityDamage;

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+48], 9

; 741  : 		message->dataBlock.damageStrength = (lethalRadius - rangeSq) / lethalRadius * wc->Strength;

	movss	xmm0, DWORD PTR _lethalRadius$[ebp]
	subss	xmm0, DWORD PTR _rangeSq$[ebp]
	divss	xmm0, DWORD PTR _lethalRadius$[ebp]
	mov	ecx, DWORD PTR _wc$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cvtsi2ss xmm1, edx
	mulss	xmm0, xmm1
	mov	eax, DWORD PTR _message$[ebp]
	movss	DWORD PTR [eax+52], xmm0
$LN1@GetSimDama:

; 742  : 	}
; 743  : 
; 744  : 
; 745  : 	// Player setting damage modifier
; 746  : 	/*
; 747  : 	   if (PlayerOptions.GetWeaponEffectiveness() == WEEnhanced)
; 748  : 	   message->dataBlock.damageRandomFact += 2.0F;
; 749  : 	   if (PlayerOptions.GetWeaponEffectiveness() == WEExaggerated)
; 750  : 	   message->dataBlock.damageRandomFact += 4.0F;
; 751  : 	 */
; 752  : 
; 753  : 	// FalconSendMessage (message,FALSE);
; 754  : 	//me123	message->RequestOutOfBandTransmit ();
; 755  : 	return message;

	mov	eax, DWORD PTR _message$[ebp]

; 756  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z ENDP ; GetSimDamageMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
$T2 = -344						; size = 8
$T3 = -336						; size = 8
$T4 = -328						; size = 8
$T5 = -320						; size = 8
tv522 = -312						; size = 4
_az$ = -308						; size = 4
tv669 = -304						; size = 4
_xydist$ = -300						; size = 4
tv538 = -296						; size = 4
_dz$ = -292						; size = 4
tv673 = -288						; size = 4
tv526 = -284						; size = 4
tv530 = -280						; size = 4
tv534 = -276						; size = 4
$T6 = -272						; size = 4
tv518 = -268						; size = 4
$T7 = -264						; size = 4
tv671 = -260						; size = 4
tv348 = -256						; size = 4
tv359 = -252						; size = 4
tv264 = -248						; size = 4
$T8 = -244						; size = 4
tv222 = -240						; size = 4
$T9 = -236						; size = 4
_dx$ = -232						; size = 4
_tmpTargetPtr$ = -228					; size = 4
_dy$ = -224						; size = 4
_el$ = -220						; size = 4
_theMissile$ = -216					; size = 4
_fireMsg$ = -212					; size = 4
_initData$ = -208					; size = 168
_pos$ = -40						; size = 12
_vec$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_shooter$ = 8						; size = 4
_simTarg$ = 12						; size = 4
_weapId$ = 16						; size = 2
?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z PROC ; FireMissileAtSim

; 1143 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 332				; 0000014cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1144 : 	MissileClass *theMissile;
; 1145 : 	float dx, dy, dz, xydist;
; 1146 : 	SimObjectType* tmpTargetPtr;
; 1147 : 	SimInitDataClass initData;

	lea	ecx, DWORD PTR _initData$[ebp]
	call	??0SimInitDataClass@@QAE@XZ

; 1148 : 	Tpoint vec,pos;
; 1149 : 	float az, el;
; 1150 : 
; 1151 : 	theMissile = (MissileClass *)InitAMissile(shooter, weapId, 0);

	push	0
	movzx	eax, WORD PTR _weapId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?InitAMissile@@YAPAVSimWeaponClass@@PAVFalconEntity@@GH@Z ; InitAMissile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _theMissile$[ebp], eax

; 1152 : 
; 1153 : 
; 1154 : 	// Need to give beam riders a pointer to the illuminating radar platform
; 1155 : 	if ( theMissile->sensorArray && theMissile->sensorArray[0]->Type() == SensorClass::RadarHoming )

	mov	edx, DWORD PTR _theMissile$[ebp]
	cmp	DWORD PTR [edx+648], 0
	je	SHORT $LN5@FireMissil
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	ecx, DWORD PTR [edx+eax]
	call	?Type@SensorClass@@QAE?AW4SensorType@1@XZ ; SensorClass::Type
	cmp	eax, 6
	jne	SHORT $LN5@FireMissil

; 1156 : 	{
; 1157 : 		// Shooter better have a radar to use this kind of weapon...
; 1158 : 		// TODO:  Check to also ensure the radar vehicle is still alive...
; 1159 : 		ShiAssert( shooter->GetRadarType() );
; 1160 : 
; 1161 : 		// HACK!  This should never happen (hence Assert above), but since it happend tonight
; 1162 : 		// and the data fix may not thourough by tomorrow, I'll put in this bail out case...
; 1163 : 		if ( !shooter->GetRadarType() ) {

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@FireMissil

; 1164 : 			// For now lets leak the missile since that should be safe.
; 1165 : 			// Could we just delete it and be happy?
; 1166 : 			return;

	jmp	$LN6@FireMissil
$LN4@FireMissil:

; 1167 : 		}
; 1168 : 
; 1169 : 		// Have the missile use the launcher's radar for guidance
; 1170 : 		((BeamRiderClass*)theMissile->sensorArray[0])->SetGuidancePlatform( shooter );

	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _theMissile$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	mov	ecx, DWORD PTR [ecx+edx]
	call	?SetGuidancePlatform@BeamRiderClass@@QAEXPAVFalconEntity@@@Z ; BeamRiderClass::SetGuidancePlatform
$LN5@FireMissil:

; 1171 : 	}
; 1172 : 
; 1173 : 
; 1174 : 	// get vector towards target
; 1175 : 	dx = simTarg->XPos() - shooter->XPos();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv518[ebp]
	movss	xmm0, DWORD PTR tv518[ebp]
	mov	ecx, DWORD PTR _shooter$[ebp]
	movss	DWORD PTR tv669[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv522[ebp]
	movss	xmm0, DWORD PTR tv669[ebp]
	subss	xmm0, DWORD PTR tv522[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1176 : 	dy = simTarg->YPos() - shooter->YPos();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv526[ebp]
	movss	xmm0, DWORD PTR tv526[ebp]
	mov	ecx, DWORD PTR _shooter$[ebp]
	movss	DWORD PTR tv671[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv530[ebp]
	movss	xmm0, DWORD PTR tv671[ebp]
	subss	xmm0, DWORD PTR tv530[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1177 : 	dz = simTarg->ZPos() - shooter->ZPos();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv534[ebp]
	movss	xmm0, DWORD PTR tv534[ebp]
	mov	ecx, DWORD PTR _shooter$[ebp]
	movss	DWORD PTR tv673[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv538[ebp]
	movss	xmm0, DWORD PTR tv673[ebp]
	subss	xmm0, DWORD PTR tv538[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1178 : 	xydist = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _xydist$[ebp]

; 1179 : 
; 1180 : 	// set initial launch parameters for missile
; 1181 : 	// NOTE:  I think MissileClass::Launch() requires this offset to be in parental object space
; 1182 : 	//        We'll just set it to ZERO for now and let it go at that...
; 1183 : 	theMissile->SetLaunchPosition (0.0F, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?SetLaunchPosition@MissileClass@@QAEXMMM@Z ; MissileClass::SetLaunchPosition

; 1184 : 	az = (float)atan2( dy, dx );

	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 1185 : 	el = (float)atan2( -dz, xydist );

	cvtss2sd xmm0, DWORD PTR _xydist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _dz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _el$[ebp]

; 1186 : 	if ( shooter->OnGround() ) {

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN3@FireMissil

; 1187 : 		// Don't allow ground things to fire at less than 45 degrees of initial elevation
; 1188 : 		el = max( el, 45.0f * DTR );

	movss	xmm0, DWORD PTR _el$[ebp]
	comiss	xmm0, DWORD PTR __real@3f490fd9
	jbe	SHORT $LN8@FireMissil
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR tv222[ebp], xmm0
	jmp	SHORT $LN9@FireMissil
$LN8@FireMissil:
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR tv222[ebp], xmm0
$LN9@FireMissil:
	movss	xmm0, DWORD PTR tv222[ebp]
	movss	DWORD PTR _el$[ebp], xmm0
$LN3@FireMissil:

; 1189 : 	}
; 1190 : 	theMissile->SetLaunchRotation (az, el);

	push	ecx
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?SetLaunchRotation@MissileClass@@QAEXMM@Z ; MissileClass::SetLaunchRotation

; 1191 : 
; 1192 : 	// set initial velocities
; 1193 : 	theMissile->SetDelta( shooter->XDelta(), shooter->YDelta(), shooter->ZDelta() );

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 1194 : 
; 1195 : 	// create a target object
; 1196 : #ifdef DEBUG
; 1197 : 	//tmpTargetPtr = new SimObjectType( OBJ_TAG, theMissile, simTarg );
; 1198 : 	tmpTargetPtr = NULL;
; 1199 : #else
; 1200 : 	tmpTargetPtr = new SimObjectType( simTarg );

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN10@FireMissil
	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0SimObjectType@@QAE@PAVFalconEntity@@@Z ; SimObjectType::SimObjectType
	mov	DWORD PTR tv264[ebp], eax
	jmp	SHORT $LN11@FireMissil
$LN10@FireMissil:
	mov	DWORD PTR tv264[ebp], 0
$LN11@FireMissil:
	mov	ecx, DWORD PTR tv264[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _tmpTargetPtr$[ebp], edx

; 1201 : #endif
; 1202 : 	tmpTargetPtr->Reference(  );

	mov	ecx, DWORD PTR _tmpTargetPtr$[ebp]
	call	?Reference@SimObjectType@@QAEXXZ	; SimObjectType::Reference

; 1203 : 
; 1204 : 	// Assign a shooter slot (always flight lead)
; 1205 : 	if (shooter->IsFlight())

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN2@FireMissil

; 1206 : 		theMissile->shooterPilotSlot = (uchar)((Flight)shooter)->GetFlightLeadSlot();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetFlightLeadSlot@FlightClass@@QAEHXZ	; FlightClass::GetFlightLeadSlot
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	BYTE PTR [ecx+680], al
$LN2@FireMissil:

; 1207 : 
; 1208 : 	// start the missile
; 1209 : 	theMissile->Start( tmpTargetPtr );

	mov	edx, DWORD PTR _tmpTargetPtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?Start@MissileClass@@QAEXPAVSimObjectType@@@Z ; MissileClass::Start

; 1210 : 
; 1211 : 	// Add a cloud of smoke and ground flasharound the launcher
; 1212 : 	if ( shooter->OnGround() ) {

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN1@FireMissil

; 1213 : 		pos.x = shooter->XPos() ;

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1214 : 		pos.y = shooter->YPos() ;

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1215 : 		pos.z = shooter->ZPos() ;

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1216 : 		vec.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp], xmm0

; 1217 : 		vec.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 1218 : 		vec.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 1219 : 		/*
; 1220 : 		OTWDriver.AddSfxRequest( new SfxClass( SFX_SAM_LAUNCH,
; 1221 : 								SFX_MOVES | SFX_NO_GROUND_CHECK,
; 1222 : 								&pos,
; 1223 : 								&vec,
; 1224 : 								2.0f,
; 1225 : 								1.0f ) );
; 1226 : 								*/
; 1227 : 		DrawableParticleSys::PS_AddParticleEx((SFX_SAM_LAUNCH + 1),
; 1228 : 								&pos,
; 1229 : 								&vec);

	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	21					; 00000015H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN1@FireMissil:

; 1230 : 		
; 1231 : 	} 
; 1232 : 
; 1233 : 	// We don't care about the target pointer anymore, so Release it
; 1234 : 	tmpTargetPtr->Release(  );

	mov	ecx, DWORD PTR _tmpTargetPtr$[ebp]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1235 : 
; 1236 : 	// put the missile into the world
; 1237 : 	vuDatabase->/*Quick*/Insert(theMissile);

	mov	eax, DWORD PTR _theMissile$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 1238 : 
; 1239 : 	// Setting a "Rebuild immediately" flag to ensure the missile wakes ASAP.
; 1240 : 	// NOTE: It would be nice to put things like this into a special treatment list
; 1241 : 	// rather than force a full bubble build each time.
; 1242 : 	gRebuildBubbleNow = 2;

	mov	DWORD PTR ?gRebuildBubbleNow@@3HA, 2	; gRebuildBubbleNow

; 1243 : 
; 1244 : 	// now we need to send a sim weapons fire message
; 1245 : 	FalconWeaponsFire* fireMsg;
; 1246 : 
; 1247 : 	fireMsg = new FalconWeaponsFire (shooter->Id(), FalconLocalGame);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN14@FireMissil
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@FireMissil
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv348[ebp], eax
	jmp	SHORT $LN13@FireMissil
$LN12@FireMissil:
	mov	DWORD PTR tv348[ebp], 0
$LN13@FireMissil:
	push	1
	mov	edx, DWORD PTR tv348[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWeaponsFire::FalconWeaponsFire
	mov	DWORD PTR tv359[ebp], eax
	jmp	SHORT $LN15@FireMissil
$LN14@FireMissil:
	mov	DWORD PTR tv359[ebp], 0
$LN15@FireMissil:
	mov	eax, DWORD PTR tv359[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _fireMsg$[ebp], ecx

; 1248 : 	fireMsg->dataBlock.fEntityID	= shooter->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	DWORD PTR [eax+56], edx

; 1249 : 	fireMsg->dataBlock.weaponType	= FalconWeaponsFire::MRM;

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [ecx+48], 1

; 1250 : 	fireMsg->dataBlock.fCampID		= shooter->GetCampID();

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	WORD PTR [ecx+60], ax

; 1251 : 	fireMsg->dataBlock.fSide		= shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _fireMsg$[ebp]
	mov	BYTE PTR [edx+65], al

; 1252 : 	fireMsg->dataBlock.fPilotID		= (uchar)theMissile->shooterPilotSlot;

	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	dl, BYTE PTR [ecx+680]
	mov	BYTE PTR [eax+62], dl

; 1253 : 	fireMsg->dataBlock.fIndex		= shooter->Type();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	WORD PTR [ecx+63], ax

; 1254 : 	fireMsg->dataBlock.fWeaponID	= theMissile->Type();

	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _fireMsg$[ebp]
	mov	WORD PTR [edx+66], ax

; 1255 : 	fireMsg->dataBlock.dx			= 0.0f;

	mov	eax, DWORD PTR _fireMsg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 1256 : 	fireMsg->dataBlock.dy			= 0.0f;

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+88], xmm0

; 1257 : 	fireMsg->dataBlock.dz			= 0.0f;

	mov	edx, DWORD PTR _fireMsg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+92], xmm0

; 1258 : 	fireMsg->dataBlock.fWeaponUID	= theMissile->Id();

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+72], edx

; 1259 : 	//	fireMsg->dataBlock.fireOnOff	= 1;
; 1260 : 	fireMsg->dataBlock.targetId		= simTarg->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [ecx+76], edx
	mov	DWORD PTR [ecx+80], eax

; 1261 : 
; 1262 : 	fireMsg->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 1263 : 	fireMsg->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 1264 : 
; 1265 : 	FalconSendMessage (fireMsg);

	push	0
	mov	edx, DWORD PTR _fireMsg$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN6@FireMissil:

; 1266 : 
; 1267 : 
; 1268 : #if 0	// This is handled by the missile itself now...
; 1269 : 	/*
; 1270 : 	// Need to send a launch message if this missile is radar guided
; 1271 : 	if (theMissile->sensorArray &&
; 1272 : 	(theMissile->sensorArray[0]->Type() == SensorClass::Radar || 
; 1273 : 	theMissile->sensorArray[0]->Type() == SensorClass::RadarHoming)) {
; 1274 : 
; 1275 : 	// Create and fill in the message structure
; 1276 : 	FalconTrackMessage* trackMsg = new FalconTrackMessage( shooter->Id(), FalconLocalGame );
; 1277 : 	ShiAssert( trackMsg );
; 1278 : 	trackMsg->dataBlock.trackType = FalconTrackMessage::Launch;
; 1279 : 	trackMsg->dataBlock.id = simTarg->Id();
; 1280 : 
; 1281 : 	// Send our track list
; 1282 : 	FalconSendMessage( trackMsg );
; 1283 : 	}
; 1284 : 	 */
; 1285 : #endif
; 1286 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z ENDP ; FireMissileAtSim
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
$T2 = -132						; size = 8
$T3 = -124						; size = 8
$T4 = -116						; size = 8
$T5 = -108						; size = 8
$T6 = -100						; size = 8
tv536 = -92						; size = 4
tv521 = -88						; size = 4
tv517 = -84						; size = 4
tv534 = -80						; size = 4
tv511 = -76						; size = 4
tv507 = -72						; size = 4
tv532 = -68						; size = 4
tv483 = -64						; size = 4
tv479 = -60						; size = 4
tv530 = -56						; size = 4
tv473 = -52						; size = 4
tv469 = -48						; size = 4
$T7 = -44						; size = 4
_wc$ = -40						; size = 4
_itsaBomb$ = -36					; size = 4
tv158 = -32						; size = 4
$T8 = -28						; size = 4
_i$ = -24						; size = 4
_classPtr$ = -20					; size = 4
_endMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_shooter$ = 8						; size = 4
_target$ = 12						; size = 4
_weapon_id$ = 16					; size = 4
_shots$ = 20						; size = 4
?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z PROC ; DoShortDistanceVisualEffects

; 1035 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1036 : 	WeaponClassDataType *wc;
; 1037 : 	Falcon4EntityClassType *classPtr;
; 1038 : 	FalconMissileEndMessage *endMessage;
; 1039 : 	BOOL itsaBomb = FALSE;

	mov	DWORD PTR _itsaBomb$[ebp], 0

; 1040 : 	int i;
; 1041 : 
; 1042 : 	// get the weapon class table pointer
; 1043 : 	classPtr = &Falcon4ClassTable[ weapon_id ];

	mov	eax, DWORD PTR _weapon_id$[ebp]
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$[ebp], eax

; 1044 : 
; 1045 : 	// get the weapon class pointer
; 1046 : 	wc = (WeaponClassDataType *)Falcon4ClassTable[ weapon_id ].dataPtr;

	mov	ecx, DWORD PTR _weapon_id$[ebp]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _wc$[ebp], eax

; 1047 : 
; 1048 : 
; 1049 : 	// what have we got for a weapon?
; 1050 : 	if ( classPtr->vuClassData.classInfo_[VU_CLASS] == CLASS_WEAPON &&
; 1051 : 					classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_GUN )

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _classPtr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, 8
	jne	SHORT $LN15@DoShortDis
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _classPtr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, 3
	jne	SHORT $LN15@DoShortDis

; 1052 : 	{
; 1053 : 		if ( wc->Flags & WEAP_TRACER )

	mov	ecx, DWORD PTR _wc$[ebp]
	movzx	edx, WORD PTR [ecx+10]
	and	edx, 32					; 00000020H
	je	SHORT $LN14@DoShortDis

; 1054 : 		{
; 1055 : 			// don't handle tracers
; 1056 : 			return;

	jmp	$LN16@DoShortDis
$LN14@DoShortDis:

; 1057 : 		}
; 1058 : 
; 1059 : 		// ok, it's a shell
; 1060 : 		//		MonoPrint( "Itsa Short Distance Shell Shell!\n" );
; 1061 : 
; 1062 : 	}

	jmp	SHORT $LN9@DoShortDis
$LN15@DoShortDis:

; 1063 : 	// itsa missile
; 1064 : 	else if ( classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_MISSILE )

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 6
	jne	SHORT $LN12@DoShortDis
	jmp	SHORT $LN9@DoShortDis
$LN12@DoShortDis:

; 1065 : 	{
; 1066 : 		//		MonoPrint( "Itsa Short Range Effect Missile!\n" );
; 1067 : 
; 1068 : 
; 1069 : 	}
; 1070 : 	// itsa missile
; 1071 : 	else if ( classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_BOMB )

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 2
	jne	SHORT $LN10@DoShortDis

; 1072 : 	{
; 1073 : 		//		MonoPrint( "Itsa Short Range Effect Bomb!\n" );
; 1074 : 		itsaBomb = TRUE;

	mov	DWORD PTR _itsaBomb$[ebp], 1

; 1075 : 
; 1076 : 	}
; 1077 : 	else 

	jmp	SHORT $LN9@DoShortDis
$LN10@DoShortDis:

; 1078 : 	{
; 1079 : 		// do we need to handle any other types?
; 1080 : 		return;

	jmp	$LN16@DoShortDis
$LN9@DoShortDis:

; 1081 : 	}
; 1082 : 
; 1083 : 	// create an effect for every shot fired
; 1084 : 	for ( i = 0; i < shots; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DoShortDis
$LN7@DoShortDis:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DoShortDis:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _shots$[ebp]
	jge	$LN6@DoShortDis

; 1085 : 	{
; 1086 : 		endMessage = new FalconMissileEndMessage (shooter->Id(), FalconLocalSession);

	push	285					; 0000011dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN18@DoShortDis
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconMissileEndMessage::FalconMissileEndMessage
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN19@DoShortDis
$LN18@DoShortDis:
	mov	DWORD PTR tv158[ebp], 0
$LN19@DoShortDis:
	mov	eax, DWORD PTR tv158[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _endMessage$[ebp], ecx

; 1087 : 		endMessage->dataBlock.fEntityID  = shooter->Id();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+63], ecx
	mov	DWORD PTR [eax+67], edx

; 1088 : 
; 1089 : 		if ( shooter->IsFlight() )

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN5@DoShortDis

; 1090 : 			endMessage->dataBlock.fPilotID	= (uchar)((Flight)shooter)->PickRandomPilot(target->Id().num_);

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?PickRandomPilot@FlightClass@@QAEHH@Z	; FlightClass::PickRandomPilot
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+73], al

; 1091 : 		else

	jmp	SHORT $LN4@DoShortDis
$LN5@DoShortDis:

; 1092 : 			endMessage->dataBlock.fPilotID	= 255;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+73], 255			; 000000ffH
$LN4@DoShortDis:

; 1093 : 		endMessage->dataBlock.fIndex		= shooter->Type();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+75], ax

; 1094 : 
; 1095 : 		endMessage->dataBlock.fCampID		= shooter->GetCampID();

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+71], ax

; 1096 : 		endMessage->dataBlock.fSide			= shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+77], al

; 1097 : 
; 1098 : 		endMessage->dataBlock.dEntityID		= target->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 1099 : 		endMessage->dataBlock.dCampID		= target->GetCampID();

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+56], ax

; 1100 : 		endMessage->dataBlock.dSide			= target->GetOwner();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+62], al

; 1101 : 
; 1102 : 		endMessage->dataBlock.dPilotID		= 0;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [eax+58], 0

; 1103 : 		endMessage->dataBlock.dCampSlot		= 0;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+59], 0

; 1104 : 		endMessage->dataBlock.dIndex		= 0;

	xor	edx, edx
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [eax+60], dx

; 1105 : 		endMessage->dataBlock.fWeaponUID	= shooter->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [ecx+82], edx
	mov	DWORD PTR [ecx+86], eax

; 1106 : 		endMessage->dataBlock.wIndex		= (unsigned short)(weapon_id + VU_LAST_ENTITY_TYPE);

	mov	edx, DWORD PTR _weapon_id$[ebp]
	add	edx, 100				; 00000064H
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [eax+115], dx

; 1107 : 
; 1108 : 		endMessage->dataBlock.endCode		= FalconMissileEndMessage::MissileKill;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [ecx+78], 1

; 1109 : 
; 1110 : 		endMessage->dataBlock.xDelta		= 1500.0f;

	mov	edx, DWORD PTR _endMessage$[ebp]
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR [edx+102], xmm0

; 1111 : 		endMessage->dataBlock.yDelta		= 0.0f;

	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+106], xmm0

; 1112 : 		endMessage->dataBlock.zDelta		= 0.0f;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+110], xmm0

; 1113 : 
; 1114 : 		// if target is on the ground get ground level and type
; 1115 : 		if ( target->IsBattalion() || itsaBomb )

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	jne	SHORT $LN2@DoShortDis
	cmp	DWORD PTR _itsaBomb$[ebp], 0
	je	$LN3@DoShortDis
$LN2@DoShortDis:

; 1116 : 		{
; 1117 : 			endMessage->dataBlock.x		= target->XPos() + 700.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv469[ebp]
	movss	xmm0, DWORD PTR tv469[ebp]
	movss	DWORD PTR tv530[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv473[ebp]
	movss	xmm0, DWORD PTR tv473[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	movss	xmm1, DWORD PTR tv530[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [eax+90], xmm1

; 1118 : 			endMessage->dataBlock.y		= target->YPos() + 700.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv479[ebp]
	movss	xmm0, DWORD PTR tv479[ebp]
	movss	DWORD PTR tv532[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv483[ebp]
	movss	xmm0, DWORD PTR tv483[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	movss	xmm1, DWORD PTR tv532[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [ecx+94], xmm1

; 1119 : 			endMessage->dataBlock.z		= OTWDriver.GetGroundLevel(
; 1120 : 							endMessage->dataBlock.x,
; 1121 : 							endMessage->dataBlock.y );

	push	0
	mov	edx, DWORD PTR _endMessage$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+94]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+90]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [ecx+98]

; 1122 : 
; 1123 : 			endMessage->dataBlock.groundType    =
; 1124 : 					(char)OTWDriver.GetGroundType ( endMessage->dataBlock.x,
; 1125 : 													endMessage->dataBlock.y );

	mov	edx, DWORD PTR _endMessage$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+94]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+90]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+114], al

; 1126 : 		}
; 1127 : 		else

	jmp	$LN1@DoShortDis
$LN3@DoShortDis:

; 1128 : 		{
; 1129 : 			endMessage->dataBlock.x				= target->XPos() + 700.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv507[ebp]
	movss	xmm0, DWORD PTR tv507[ebp]
	movss	DWORD PTR tv534[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv511[ebp]
	movss	xmm0, DWORD PTR tv511[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	movss	xmm1, DWORD PTR tv534[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [edx+90], xmm1

; 1130 : 			endMessage->dataBlock.y				= target->YPos() + 700.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv517[ebp]
	movss	xmm0, DWORD PTR tv517[ebp]
	movss	DWORD PTR tv536[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv521[ebp]
	movss	xmm0, DWORD PTR tv521[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	movss	xmm1, DWORD PTR tv536[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [eax+94], xmm1

; 1131 : 			endMessage->dataBlock.z				= target->ZPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [ecx+98]

; 1132 : 			endMessage->dataBlock.groundType	= -1;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+114], -1
$LN1@DoShortDis:

; 1133 : 		}
; 1134 : 
; 1135 : 		FalconSendMessage (endMessage,FALSE);

	push	0
	mov	eax, DWORD PTR _endMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1136 : 	}

	jmp	$LN7@DoShortDis
$LN6@DoShortDis:
$LN16@DoShortDis:

; 1137 : 
; 1138 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoShortDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z ENDP ; DoShortDistanceVisualEffects
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_interval$ = -84					; size = 4
tv331 = -80						; size = 4
tv324 = -76						; size = 4
_player$ = -72						; size = 4
_dy$ = -68						; size = 4
_dx$ = -64						; size = 4
_shortDist$ = -60					; size = 4
_stype$ = -56						; size = 4
_tar$ = -52						; size = 12
_vec$ = -40						; size = 12
_PSvec$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_shooter$ = 8						; size = 4
_target$ = 12						; size = 4
_weapon_id$ = 16					; size = 4
_shots$ = 20						; size = 4
?DoDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z PROC ; DoDistanceVisualEffects

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 765  : 	Tpoint  pos,tar,vec;
; 766  : 	int		stype;
; 767  : 	float	interval;
; 768  : 	// float d;
; 769  : 	VuEntity *player;
; 770  : 	float	dx, dy;
; 771  : 	BOOL    shortDist = TRUE;

	mov	DWORD PTR _shortDist$[ebp], 1

; 772  : 
; 773  : 	//RV - I-Hawk - Added a 0 vector for RV new PS calls
; 774  : 	Tpoint PSvec;
; 775  : 	PSvec.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp], xmm0

; 776  : 	PSvec.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+4], xmm0

; 777  : 	PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+8], xmm0

; 778  : 
; 779  : 
; 780  : 
; 781  : 	// make sure OTWDriver is ready
; 782  : 	if ( !OTWDriver.IsActive() )

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?IsActive@OTWDriverClass@@QAEHXZ	; OTWDriverClass::IsActive
	test	eax, eax
	jne	SHORT $LN37@DoDistance

; 783  : 		return;

	jmp	$LN38@DoDistance
$LN37@DoDistance:

; 784  : 
; 785  : 	player = FalconLocalSession->GetCameraEntity(0);

	push	0
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	DWORD PTR _player$[ebp], eax

; 786  : 
; 787  : 	// Find shooter position, position of target unit and the normalized vector to target
; 788  : 	pos.x = shooter->XPos();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 789  : 	pos.y = shooter->YPos();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 790  : 	pos.z = shooter->ZPos();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 791  : 	tar.x = target->XPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _tar$[ebp]

; 792  : 	tar.y = target->YPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _tar$[ebp+4]

; 793  : 	tar.z = target->ZPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _tar$[ebp+8]

; 794  : 	/* KCK NOTE: We're actually not shooting at our target - just random directions
; 795  : 	 */
; 796  : 	vec.x = tar.x - pos.x;

	movss	xmm0, DWORD PTR _tar$[ebp]
	subss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR _vec$[ebp], xmm0

; 797  : 	vec.y = tar.y - pos.y;

	movss	xmm0, DWORD PTR _tar$[ebp+4]
	subss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 798  : 	vec.z = tar.z - pos.z;

	movss	xmm0, DWORD PTR _tar$[ebp+8]
	subss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 799  : 
; 800  : 	/*
; 801  : 	 ** edg: don't normalize vector.  We're going to try giving the effects
; 802  : 	 ** better placement
; 803  : 
; 804  : 	 d = sqrt(vec.x*vec.x + vec.y*vec.y + vec.z*vec.z);
; 805  : 	 if ( d != 0.0f )
; 806  : 	 {
; 807  : 	 vec.x /= d;
; 808  : 	 vec.y /= d;
; 809  : 	 vec.z /= d;
; 810  : 	 }
; 811  : 	 */
; 812  : 
; 813  : 	if ( player )

	cmp	DWORD PTR _player$[ebp], 0
	je	$LN33@DoDistance

; 814  : 	{
; 815  : 		dx = (float)fabs( player->XPos() - tar.x );

	mov	ecx, DWORD PTR _player$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv324[ebp]
	movss	xmm0, DWORD PTR tv324[ebp]
	subss	xmm0, DWORD PTR _tar$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 816  : 		dy = (float)fabs( player->YPos() - tar.y );

	mov	ecx, DWORD PTR _player$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv331[ebp]
	movss	xmm0, DWORD PTR tv331[ebp]
	subss	xmm0, DWORD PTR _tar$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 817  : 		if ( dx > dy )

	movss	xmm0, DWORD PTR _dx$[ebp]
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN35@DoDistance

; 818  : 			dx = dx + dy * 0.5f;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 819  : 		else

	jmp	SHORT $LN34@DoDistance
$LN35@DoDistance:

; 820  : 			dx = dy + dx * 0.5f;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0
$LN34@DoDistance:

; 821  : 
; 822  : 		if ( dx > 40000.0f )

	movss	xmm0, DWORD PTR _dx$[ebp]
	comiss	xmm0, DWORD PTR __real@471c4000
	jbe	SHORT $LN33@DoDistance

; 823  : 		{
; 824  : 			shortDist = FALSE;

	mov	DWORD PTR _shortDist$[ebp], 0
$LN33@DoDistance:

; 825  : 			//MonoPrint( "Distant Effect: LONG\n" );
; 826  : 		}
; 827  : 		else
; 828  : 		{
; 829  : 			//MonoPrint( "Distant Effect: SHORT\n" );
; 830  : 		}
; 831  : 	}
; 832  : 
; 833  : 	if (shooter->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN31@DoDistance

; 834  : 		interval = (float)(FLIGHT_COMBAT_CHECK_INTERVAL) / (shots*2);

	movsx	ecx, WORD PTR ?FLIGHT_COMBAT_CHECK_INTERVAL@@3FA ; FLIGHT_COMBAT_CHECK_INTERVAL
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _shots$[ebp]
	shl	edx, 1
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	movss	DWORD PTR _interval$[ebp], xmm0

; 835  : 	else

	jmp	SHORT $LN30@DoDistance
$LN31@DoDistance:

; 836  : 		interval = (float)(GROUND_COMBAT_CHECK_INTERVAL) / (shots*2);

	movsx	eax, WORD PTR ?GROUND_COMBAT_CHECK_INTERVAL@@3FA ; GROUND_COMBAT_CHECK_INTERVAL
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _shots$[ebp]
	shl	ecx, 1
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	movss	DWORD PTR _interval$[ebp], xmm0
$LN30@DoDistance:

; 837  : 
; 838  : 	// Now add visual effect by weapon type
; 839  : 	stype = Falcon4ClassTable[WeaponDataTable[weapon_id].Index].vuClassData.classInfo_[VU_STYPE];

	mov	edx, DWORD PTR _weapon_id$[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [ecx+edx+8]
	mov	DWORD PTR _stype$[ebp], eax

; 840  : 	if (stype == STYPE_AAA_GUN)

	cmp	DWORD PTR _stype$[ebp], 1
	jne	SHORT $LN29@DoDistance

; 841  : 	{
; 842  : 		if ( shortDist == FALSE )

	cmp	DWORD PTR _shortDist$[ebp], 0
	jne	SHORT $LN28@DoDistance

; 843  : 			/*
; 844  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_ARMOR,
; 845  : 									&pos,
; 846  : 									&vec,
; 847  : 									shots*2,
; 848  : 									interval ) );
; 849  : 									*/
; 850  : 		    DrawableParticleSys::PS_AddParticleEx((SFX_DIST_ARMOR + 1),
; 851  : 									&pos,
; 852  : 									&vec);

	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	35					; 00000023H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN28@DoDistance:

; 853  : 		// AAA - Do tracers
; 854  : 		/*
; 855  : 		OTWDriver.AddSfxRequest( new SfxClass(SFX_DIST_AIRBURSTS,
; 856  : 								&tar,
; 857  : 								shots*2,
; 858  : 								interval ) );
; 859  : 		*/
; 860  : 		DrawableParticleSys::PS_AddParticleEx((SFX_DIST_AIRBURSTS + 1),
; 861  : 									&pos,
; 862  : 									&PSvec);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	27					; 0000001bH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
	jmp	$LN2@DoDistance
$LN29@DoDistance:

; 863  : 	}
; 864  : 	else if (stype == STYPE_ARTILLERY || stype == STYPE_MORTAR)

	cmp	DWORD PTR _stype$[ebp], 3
	je	SHORT $LN25@DoDistance
	cmp	DWORD PTR _stype$[ebp], 5
	jne	SHORT $LN26@DoDistance
$LN25@DoDistance:

; 865  : 	{
; 866  : 		if ( shortDist == FALSE )

	cmp	DWORD PTR _shortDist$[ebp], 0
	jne	SHORT $LN24@DoDistance

; 867  : 			/*
; 868  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_ARMOR,
; 869  : 									&pos,
; 870  : 									&vec,
; 871  : 									shots*2,
; 872  : 									interval ) );
; 873  : 									*/
; 874  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_ARMOR + 1),
; 875  : 										&pos,
; 876  : 										&vec);

	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	35					; 00000023H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN24@DoDistance:

; 877  : 		/*
; 878  : 		OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_GROUNDBURSTS,
; 879  : 								&tar,
; 880  : 								shots*2,
; 881  : 								interval ) );
; 882  : 								*/
; 883  : 		DrawableParticleSys::PS_AddParticleEx((SFX_DIST_GROUNDBURSTS + 1),
; 884  : 									&pos,
; 885  : 									&PSvec);

	lea	ecx, DWORD PTR _PSvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	28					; 0000001cH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
	jmp	$LN2@DoDistance
$LN26@DoDistance:

; 886  : 	}
; 887  : 	else if (stype == STYPE_GUN || stype == STYPE_SMALLARMS)

	cmp	DWORD PTR _stype$[ebp], 4
	je	SHORT $LN21@DoDistance
	cmp	DWORD PTR _stype$[ebp], 2
	jne	SHORT $LN22@DoDistance
$LN21@DoDistance:

; 888  : 	{
; 889  : 		if ( shortDist == FALSE )

	cmp	DWORD PTR _shortDist$[ebp], 0
	jne	SHORT $LN20@DoDistance

; 890  : 			/*
; 891  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_INFANTRY,
; 892  : 									&pos,
; 893  : 									&vec,
; 894  : 									shots*2,
; 895  : 									interval ) );
; 896  : 									*/
; 897  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_INFANTRY + 1),
; 898  : 										&pos,
; 899  : 										&vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	36					; 00000024H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN20@DoDistance:

; 900  : 		/*
; 901  : 		OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_GROUNDBURSTS,
; 902  : 								&tar,
; 903  : 								shots*2,
; 904  : 								interval ) );
; 905  : 								*/
; 906  : 		DrawableParticleSys::PS_AddParticleEx((SFX_DIST_GROUNDBURSTS + 1),
; 907  : 								&pos,
; 908  : 								&PSvec);

	lea	edx, DWORD PTR _PSvec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	28					; 0000001cH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
	jmp	$LN2@DoDistance
$LN22@DoDistance:

; 909  : 	}
; 910  : 	else if (stype == STYPE_ROCKET || stype == STYPE_MISSILE_SURF_SURF)

	cmp	DWORD PTR _stype$[ebp], 2
	je	SHORT $LN17@DoDistance
	cmp	DWORD PTR _stype$[ebp], 6
	jne	SHORT $LN18@DoDistance
$LN17@DoDistance:

; 911  : 	{
; 912  : 		if ( shortDist == FALSE )

	cmp	DWORD PTR _shortDist$[ebp], 0
	jne	SHORT $LN16@DoDistance

; 913  : 			/*
; 914  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_ARMOR,
; 915  : 									&pos,
; 916  : 									&vec,
; 917  : 									shots*2,
; 918  : 									interval ) );
; 919  : 									*/
; 920  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_ARMOR + 1),
; 921  : 										&pos,
; 922  : 										&vec);

	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	35					; 00000023H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 923  : 		else

	jmp	SHORT $LN15@DoDistance
$LN16@DoDistance:

; 924  : 			/*
; 925  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_GROUNDBURSTS,
; 926  : 									&tar,
; 927  : 									shots*2,
; 928  : 									interval ) );
; 929  : 									*/
; 930  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_GROUNDBURSTS + 1),
; 931  : 								&pos,
; 932  : 								&PSvec);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	28					; 0000001cH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN15@DoDistance:
	jmp	$LN2@DoDistance
$LN18@DoDistance:

; 933  : 	}
; 934  : 	else if (stype == STYPE_MISSILE_AIR_AIR || stype == STYPE_MISSILE_AIR_GROUND || stype == STYPE_MISSILE_ANTI_SHIP)

	cmp	DWORD PTR _stype$[ebp], 1
	je	SHORT $LN12@DoDistance
	cmp	DWORD PTR _stype$[ebp], 2
	je	SHORT $LN12@DoDistance
	cmp	DWORD PTR _stype$[ebp], 3
	jne	SHORT $LN13@DoDistance
$LN12@DoDistance:

; 935  : 	{
; 936  : 		// Add missile trail
; 937  : 		/*
; 938  : 		   vec.x *= 800;			// 800 fps velocity, what the heck.
; 939  : 		   vec.y *= 800;
; 940  : 		   vec.z *= 800;
; 941  : 		   OTWDriver.AddSfxRequest(SFX_TRAIL_SMOKECLOUD,SFX_MOVES|SFX_USES_GRAVITY|SFX_EXPLODE_WHEN_DONE,&pos,&vec,10.0F,400.0F);
; 942  : 		 */
; 943  : 		if ( shortDist == FALSE )

	cmp	DWORD PTR _shortDist$[ebp], 0
	jne	SHORT $LN11@DoDistance

; 944  : 		{
; 945  : 			/*
; 946  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_AALAUNCHES,
; 947  : 									&pos,
; 948  : 									&vec,
; 949  : 									shots*2,
; 950  : 									interval ) );
; 951  : 									*/
; 952  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_AALAUNCHES + 1),
; 953  : 										&pos,
; 954  : 										&vec);

	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	30					; 0000001eH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@DoDistance
$LN11@DoDistance:

; 955  : 			// if target is aircraft, do countermeasures
; 956  : 			/*
; 957  : 			   if (target->GetDomain() == DOMAIN_AIR)
; 958  : 			   {
; 959  : 			   OTWDriver.AddSfxRequest( new SfxClass( SFX_NOTRAIL_FLARE,
; 960  : 			   &tar,
; 961  : 			   shots*2,
; 962  : 			   interval ) );
; 963  : 			   }
; 964  : 			 */
; 965  : 		}
; 966  : 		else if ( target->OnGround() )

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN9@DoDistance

; 967  : 			/*
; 968  : 			OTWDriver.AddSfxRequest( new SfxClass(SFX_DIST_GROUNDBURSTS,
; 969  : 									&tar,
; 970  : 									shots*2,
; 971  : 									interval ) );
; 972  : 									*/
; 973  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_GROUNDBURSTS + 1),
; 974  : 								&pos,
; 975  : 								&PSvec);

	lea	ecx, DWORD PTR _PSvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	28					; 0000001cH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 976  : 		else

	jmp	SHORT $LN8@DoDistance
$LN9@DoDistance:

; 977  : 			/*
; 978  : 			OTWDriver.AddSfxRequest( new SfxClass(SFX_DIST_AIRBURSTS,
; 979  : 									&tar,
; 980  : 									shots*2,
; 981  : 									interval ) );
; 982  : 			*/
; 983  : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_AIRBURSTS + 1),
; 984  : 								&pos,
; 985  : 								&PSvec);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	27					; 0000001bH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN8@DoDistance:
	jmp	SHORT $LN2@DoDistance
$LN13@DoDistance:

; 986  : 	}
; 987  : 	else if (stype == STYPE_MISSILE_SURF_AIR)

	cmp	DWORD PTR _stype$[ebp], 5
	jne	SHORT $LN6@DoDistance

; 988  : 	{
; 989  : 		/*
; 990  : 		// Add missile trail
; 991  : 		vec.x *= 800;			// 800 fps velocity, what the heck.
; 992  : 		vec.y *= 800;
; 993  : 		vec.z *= 800;
; 994  : 		 */
; 995  : 		if ( shortDist == FALSE )

	cmp	DWORD PTR _shortDist$[ebp], 0
	jne	SHORT $LN5@DoDistance

; 996  : 			/*
; 997  : 			OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_SAMLAUNCHES,
; 998  : 									&pos,
; 999  : 									&vec,
; 1000 : 									shots*2,
; 1001 : 									interval ) );
; 1002 : 									*/
; 1003 : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_SAMLAUNCHES + 1),
; 1004 : 										&pos,
; 1005 : 										&vec);

	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	29					; 0000001dH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 1006 : 		else

	jmp	SHORT $LN4@DoDistance
$LN5@DoDistance:

; 1007 : 			/*
; 1008 : 			OTWDriver.AddSfxRequest( new SfxClass(SFX_DIST_AIRBURSTS,
; 1009 : 									&tar,
; 1010 : 									shots*2,
; 1011 : 									interval ) );
; 1012 : 									*/
; 1013 : 			DrawableParticleSys::PS_AddParticleEx((SFX_DIST_AIRBURSTS + 1),
; 1014 : 								&pos,
; 1015 : 								&PSvec);

	lea	ecx, DWORD PTR _PSvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	27					; 0000001bH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN4@DoDistance:
	jmp	SHORT $LN2@DoDistance
$LN6@DoDistance:

; 1016 : 	}
; 1017 : 	else if (stype == STYPE_BOMB || stype == STYPE_BOMB_GUIDED || stype == STYPE_BOMB_IRON || stype == STYPE_ROCKET || stype == STYPE_BOMB_GPS)	//MI added GPS

	cmp	DWORD PTR _stype$[ebp], 1
	je	SHORT $LN1@DoDistance
	cmp	DWORD PTR _stype$[ebp], 2
	je	SHORT $LN1@DoDistance
	cmp	DWORD PTR _stype$[ebp], 3
	je	SHORT $LN1@DoDistance
	cmp	DWORD PTR _stype$[ebp], 2
	je	SHORT $LN1@DoDistance
	cmp	DWORD PTR _stype$[ebp], 4
	jne	SHORT $LN2@DoDistance
$LN1@DoDistance:

; 1018 : 	{
; 1019 : 		/*
; 1020 : 		OTWDriver.AddSfxRequest( new SfxClass( SFX_DIST_GROUNDBURSTS,
; 1021 : 								&tar,
; 1022 : 								shots*2,
; 1023 : 								interval ) );
; 1024 : 								*/
; 1025 : 		DrawableParticleSys::PS_AddParticleEx((SFX_DIST_GROUNDBURSTS + 1),
; 1026 : 								&pos,
; 1027 : 								&PSvec);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	28					; 0000001cH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN2@DoDistance:
$LN38@DoDistance:

; 1028 : 	}
; 1029 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DoDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z ENDP ; DoDistanceVisualEffects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?InSim@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InSim@SimulationDriver@@QBE_NXZ PROC			; SimulationDriver::InSim, COMDAT
; _this$ = ecx

; 51   : 	bool InSim() const                 { return SimulationLoopControl::InSim(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?InSim@SimulationLoopControl@@SA_NXZ	; SimulationLoopControl::InSim
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationDriver@@QBE_NXZ ENDP			; SimulationDriver::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simloop.h
;	COMDAT ?InSim@SimulationLoopControl@@SA_NXZ
_TEXT	SEGMENT
tv65 = -4						; size = 4
?InSim@SimulationLoopControl@@SA_NXZ PROC		; SimulationLoopControl::InSim, COMDAT

; 27   : 	static bool InSim(void)			{ return currentMode == RunningGraphics; }

	push	ebp
	mov	ebp, esp
	push	ecx
	cmp	DWORD PTR ?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A, 6 ; SimulationLoopControl::currentMode
	jne	SHORT $LN3@InSim
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@InSim
$LN3@InSim:
	mov	DWORD PTR tv65[ebp], 0
$LN4@InSim:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationLoopControl@@SA_NXZ ENDP		; SimulationLoopControl::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?Type@SensorClass@@QAE?AW4SensorType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@SensorClass@@QAE?AW4SensorType@1@XZ PROC		; SensorClass::Type, COMDAT
; _this$ = ecx

; 36   : 	SensorType	Type(void)			{ return sensorType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@SensorClass@@QAE?AW4SensorType@1@XZ ENDP		; SensorClass::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\missile.h
;	COMDAT ?SetLaunchRotation@MissileClass@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_az$ = 8						; size = 4
_el$ = 12						; size = 4
?SetLaunchRotation@MissileClass@@QAEXMM@Z PROC		; MissileClass::SetLaunchRotation, COMDAT
; _this$ = ecx

; 336  : 	void SetLaunchRotation (float az, float el) {initAz = az; initEl = el;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [eax+940], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [ecx+944], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetLaunchRotation@MissileClass@@QAEXMM@Z ENDP		; MissileClass::SetLaunchRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?IsActive@OTWDriverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsActive@OTWDriverClass@@QAEHXZ PROC			; OTWDriverClass::IsActive, COMDAT
; _this$ = ecx

; 349  :       int IsActive (void) {return isActive;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32152]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsActive@OTWDriverClass@@QAEHXZ ENDP			; OTWDriverClass::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?GetTotalFeatures@ObjectiveClass@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTotalFeatures@ObjectiveClass@@QAEFXZ PROC		; ObjectiveClass::GetTotalFeatures, COMDAT
; _this$ = ecx

; 278  : 	short GetTotalFeatures (void)							{	return static_data.class_data->Features; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	movzx	ax, BYTE PTR [ecx+50]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalFeatures@ObjectiveClass@@QAEFXZ ENDP		; ObjectiveClass::GetTotalFeatures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetIdentified@CampBaseClass@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 1
?GetIdentified@CampBaseClass@@QAEHE@Z PROC		; CampBaseClass::GetIdentified, COMDAT
; _this$ = ecx

; 294  : 	int GetIdentified (Team t)					{   return (spotted >> (t + 8)) & 0x01; } // 2002-02-11 ADDED BY S.G. Getter to know if the target is identified or not.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+148]
	movzx	ecx, BYTE PTR _t$[ebp]
	add	ecx, 8
	sar	eax, cl
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIdentified@CampBaseClass@@QAEHE@Z ENDP		; CampBaseClass::GetIdentified
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?InSimLists@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InSimLists@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::InSimLists, COMDAT
; _this$ = ecx

; 275  : 	int InSimLists (void)						{	return local_flags & CBC_IN_SIM_LIST; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?InSimLists@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::InSimLists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?InPackage@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InPackage@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::InPackage, COMDAT
; _this$ = ecx

; 274  : 	int InPackage (void)						{	return local_flags & CBC_IN_PACKAGE; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?InPackage@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::InPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ PROC ; CampBaseClass::GetComponents, COMDAT
; _this$ = ecx

; 141  : 	TailInsertList *GetComponents() const		{	return components; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ENDP ; CampBaseClass::GetComponents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0SimInitDataClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SimInitDataClass@@QAE@XZ PROC			; SimInitDataClass::SimInitDataClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SimInitDataClass@@QAE@XZ ENDP			; SimInitDataClass::SimInitDataClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ PROC ; FalconSessionEntity::GetPlayerSquadron, COMDAT
; _this$ = ecx

; 140  : 	SquadronClass* GetPlayerSquadron(void)	const { return playerSquadronPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 476				; 000001dcH
	call	?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ ; VuBin<SquadronClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ENDP ; FalconSessionEntity::GetPlayerSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ PROC ; VuBin<SquadronClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ ENDP ; VuBin<SquadronClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
$T2 = -172						; size = 8
$T3 = -164						; size = 8
$T4 = -156						; size = 8
$T5 = -148						; size = 8
$T6 = -140						; size = 8
tv483 = -132						; size = 4
tv646 = -128						; size = 4
$T7 = -124						; size = 4
tv610 = -120						; size = 4
tv578 = -116						; size = 4
$T8 = -112						; size = 4
tv648 = -108						; size = 4
tv652 = -104						; size = 4
tv606 = -100						; size = 4
tv628 = -96						; size = 4
tv588 = -92						; size = 4
tv624 = -88						; size = 4
tv644 = -84						; size = 4
tv650 = -80						; size = 4
tv574 = -76						; size = 4
tv619 = -72						; size = 4
tv615 = -68						; size = 4
tv584 = -64						; size = 4
tv429 = -60						; size = 4
$T9 = -56						; size = 4
$T10 = -52						; size = 4
tv273 = -48						; size = 4
tv193 = -44						; size = 4
_classPtr$ = -40					; size = 4
_hitSomething$ = -36					; size = 4
_damMessage$ = -32					; size = 4
_wc$ = -28						; size = 4
_blastRange$ = -24					; size = 4
_rangeSquare$ = -20					; size = 4
_endMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_shooter$ = 8						; size = 4
_simTarg$ = 12						; size = 4
_weaponId$ = 16						; size = 2
?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z PROC ; FireOnSimEntity

; 550  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 551  : 	WeaponClassDataType *wc;
; 552  : 	FalconMissileEndMessage *endMessage = NULL;

	mov	DWORD PTR _endMessage$[ebp], 0

; 553  : 	FalconDamageMessage *damMessage = NULL;

	mov	DWORD PTR _damMessage$[ebp], 0

; 554  : 	Falcon4EntityClassType *classPtr;
; 555  : 	float blastRange, rangeSquare;
; 556  : 	BOOL hitSomething;
; 557  : 
; 558  : 	// get the weapon class pointer
; 559  : 	wc = (WeaponClassDataType *)Falcon4ClassTable[WeaponDataTable[weaponId].Index].dataPtr;

	movsx	eax, WORD PTR _weaponId$[ebp]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	edx, WORD PTR [ecx+eax]
	imul	edx, 81					; 00000051H
	mov	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, DWORD PTR [eax+edx+77]
	mov	DWORD PTR _wc$[ebp], ecx

; 560  : 	classPtr = &Falcon4ClassTable[WeaponDataTable[weaponId].Index ];

	movsx	edx, WORD PTR _weaponId$[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$[ebp], ecx

; 561  : 
; 562  : 	//	MonoPrint("Campaign Unit firing on sim entity. Weapon ID: %d, Shots: %d.\n",weaponId,shots);
; 563  : 
; 564  : 	blastRange = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _blastRange$[ebp], xmm0

; 565  : 
; 566  : 	hitSomething = FALSE;

	mov	DWORD PTR _hitSomething$[ebp], 0

; 567  : 
; 568  : 	// what have we got for a weapon?
; 569  : 	if ( classPtr->vuClassData.classInfo_[VU_CLASS] == CLASS_WEAPON &&
; 570  : 					classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_GUN )

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _classPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 8
	jne	$LN16@FireOnSimE
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _classPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 3
	jne	$LN16@FireOnSimE

; 571  : 	{
; 572  : 		if ( wc->Flags & WEAP_TRACER )

	mov	edx, DWORD PTR _wc$[ebp]
	movzx	eax, WORD PTR [edx+10]
	and	eax, 32					; 00000020H
	je	SHORT $LN15@FireOnSimE

; 573  : 		{
; 574  : 			// don't handle tracers
; 575  : 			//			MonoPrint("Campaign unit unable to fire on sim entity due to gun code not existing.\n");
; 576  : 			return;

	jmp	$LN17@FireOnSimE
$LN15@FireOnSimE:

; 577  : 		}
; 578  : 
; 579  : 		// ok, it's a shell
; 580  : 		//		MonoPrint( "Itsa Shell!\n" );
; 581  : 
; 582  : 		// damage stuff goes here....
; 583  : 		if ( wc->BlastRadius == 0 )

	mov	ecx, DWORD PTR _wc$[ebp]
	movzx	edx, WORD PTR [ecx+52]
	test	edx, edx
	jne	SHORT $LN14@FireOnSimE

; 584  : 		{
; 585  : 			// must be a direct hit!  1-8 fer now
; 586  : 			if ( (rand() & 7 ) == 7 )

	call	_rand
	and	eax, 7
	cmp	eax, 7
	jne	SHORT $LN13@FireOnSimE

; 587  : 			{
; 588  : 				hitSomething = TRUE;

	mov	DWORD PTR _hitSomething$[ebp], 1

; 589  : 				damMessage = GetSimDamageMessage(shooter,
; 590  : 								simTarg,
; 591  : 								0.0f,
; 592  : 								FalconDamageType::MissileDamage,
; 593  : 								WeaponDataTable[weaponId].Index
; 594  : 								);

	movsx	eax, WORD PTR _weaponId$[ebp]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	edx, WORD PTR [ecx+eax]
	push	edx
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z ; GetSimDamageMessage
	add	esp, 20					; 00000014H
	mov	DWORD PTR _damMessage$[ebp], eax

; 595  : 			}
; 596  : 			else

	jmp	SHORT $LN12@FireOnSimE
$LN13@FireOnSimE:

; 597  : 			{
; 598  : 				blastRange = (float)wc->BlastRadius;

	mov	edx, DWORD PTR _wc$[ebp]
	movzx	eax, WORD PTR [edx+52]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _blastRange$[ebp], xmm0
$LN12@FireOnSimE:

; 599  : 			}
; 600  : 		}
; 601  : 		else

	jmp	$LN10@FireOnSimE
$LN14@FireOnSimE:

; 602  : 		{
; 603  : 			blastRange = rangeSquare = (float)wc->BlastRadius;

	mov	ecx, DWORD PTR _wc$[ebp]
	movzx	edx, WORD PTR [ecx+52]
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _rangeSquare$[ebp], xmm0
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	movss	DWORD PTR _blastRange$[ebp], xmm0

; 604  : 			rangeSquare *= 1.5f * PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv483[ebp]
	movss	xmm0, DWORD PTR tv483[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	mulss	xmm0, DWORD PTR _rangeSquare$[ebp]
	movss	DWORD PTR _rangeSquare$[ebp], xmm0

; 605  : 			if ( rangeSquare < blastRange )

	movss	xmm0, DWORD PTR _blastRange$[ebp]
	comiss	xmm0, DWORD PTR _rangeSquare$[ebp]
	jbe	SHORT $LN10@FireOnSimE

; 606  : 			{
; 607  : 				hitSomething = TRUE;

	mov	DWORD PTR _hitSomething$[ebp], 1

; 608  : 				rangeSquare *= rangeSquare;

	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	mulss	xmm0, DWORD PTR _rangeSquare$[ebp]
	movss	DWORD PTR _rangeSquare$[ebp], xmm0

; 609  : 				damMessage = GetSimDamageMessage(shooter,
; 610  : 								simTarg,
; 611  : 								rangeSquare,
; 612  : 								FalconDamageType::MissileDamage,
; 613  : 								WeaponDataTable[weaponId].Index
; 614  : 								);

	movsx	eax, WORD PTR _weaponId$[ebp]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	edx, WORD PTR [ecx+eax]
	push	edx
	push	1
	push	ecx
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?GetSimDamageMessage@@YAPAVFalconDamageMessage@@PAVCampBaseClass@@PAVSimBaseClass@@MHH@Z ; GetSimDamageMessage
	add	esp, 20					; 00000014H
	mov	DWORD PTR _damMessage$[ebp], eax
$LN10@FireOnSimE:

; 615  : 			}
; 616  : 		}
; 617  : 
; 618  : 		// just creating visual effect for now.....
; 619  : 		// missile end message
; 620  : 		endMessage = new FalconMissileEndMessage (shooter->Id(), FalconLocalSession);

	push	285					; 0000011dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN19@FireOnSimE
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconMissileEndMessage::FalconMissileEndMessage
	mov	DWORD PTR tv193[ebp], eax
	jmp	SHORT $LN20@FireOnSimE
$LN19@FireOnSimE:
	mov	DWORD PTR tv193[ebp], 0
$LN20@FireOnSimE:
	mov	eax, DWORD PTR tv193[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _endMessage$[ebp], ecx

; 621  : 		endMessage->dataBlock.fEntityID  = shooter->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+63], ecx
	mov	DWORD PTR [eax+67], edx

; 622  : 		if ( shooter->IsFlight() )

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN9@FireOnSimE

; 623  : 			endMessage->dataBlock.fPilotID = (uchar)((Flight)shooter)->PickRandomPilot(simTarg->Id().num_);

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?PickRandomPilot@FlightClass@@QAEHH@Z	; FlightClass::PickRandomPilot
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+73], al

; 624  : 		else

	jmp	SHORT $LN8@FireOnSimE
$LN9@FireOnSimE:

; 625  : 			endMessage->dataBlock.fPilotID   = 255;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+73], 255			; 000000ffH
$LN8@FireOnSimE:

; 626  : 		endMessage->dataBlock.fIndex     = shooter->Type();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+75], ax

; 627  : 
; 628  : 		endMessage->dataBlock.fCampID = shooter->GetCampID();

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+71], ax

; 629  : 		endMessage->dataBlock.fSide   = shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+77], al

; 630  : 
; 631  : 		endMessage->dataBlock.dEntityID  = simTarg->Id();

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 632  : 		endMessage->dataBlock.dCampID = simTarg->GetCampaignObject()->GetCampID();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv273[ebp], eax
	mov	ecx, DWORD PTR tv273[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv273[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+56], ax

; 633  : 		endMessage->dataBlock.dSide   = simTarg->GetCampaignObject()->GetOwner();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+62], al

; 634  : 
; 635  : 		endMessage->dataBlock.dPilotID   = 0;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [eax+58], 0

; 636  : 		endMessage->dataBlock.dCampSlot  = 0;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+59], 0

; 637  : 		endMessage->dataBlock.dIndex     = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [eax+60], dx

; 638  : 		endMessage->dataBlock.fWeaponUID = shooter->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [ecx+82], edx
	mov	DWORD PTR [ecx+86], eax

; 639  : 		endMessage->dataBlock.wIndex 	 = (unsigned short)(WeaponDataTable[weaponId].Index + VU_LAST_ENTITY_TYPE);

	movsx	edx, WORD PTR _weaponId$[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	add	ecx, 100				; 00000064H
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [edx+115], cx

; 640  : 
; 641  : 		if ( hitSomething )

	cmp	DWORD PTR _hitSomething$[ebp], 0
	je	SHORT $LN7@FireOnSimE

; 642  : 			endMessage->dataBlock.endCode    = FalconMissileEndMessage::MissileKill;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+78], 1

; 643  : 		else

	jmp	SHORT $LN6@FireOnSimE
$LN7@FireOnSimE:

; 644  : 			endMessage->dataBlock.endCode    = FalconMissileEndMessage::Missed;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [ecx+78], 4
$LN6@FireOnSimE:

; 645  : 
; 646  : 		endMessage->dataBlock.xDelta    = 1500.0f;

	mov	edx, DWORD PTR _endMessage$[ebp]
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR [edx+102], xmm0

; 647  : 		endMessage->dataBlock.yDelta    = 0.0f;

	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+106], xmm0

; 648  : 		endMessage->dataBlock.zDelta    = 0.0f;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+110], xmm0

; 649  : 
; 650  : 		// if target is on the ground get ground level and type
; 651  : 		if ( simTarg->OnGround() )

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	$LN5@FireOnSimE

; 652  : 		{
; 653  : 			endMessage->dataBlock.x    = simTarg->XPos() + blastRange * PRANDFloat();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv574[ebp]
	movss	xmm0, DWORD PTR tv574[ebp]
	movss	DWORD PTR tv644[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv578[ebp]
	movss	xmm0, DWORD PTR tv578[ebp]
	mulss	xmm0, DWORD PTR _blastRange$[ebp]
	movss	xmm1, DWORD PTR tv644[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [eax+90], xmm1

; 654  : 			endMessage->dataBlock.y    = simTarg->YPos() + blastRange * PRANDFloat();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv584[ebp]
	movss	xmm0, DWORD PTR tv584[ebp]
	movss	DWORD PTR tv646[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv588[ebp]
	movss	xmm0, DWORD PTR tv588[ebp]
	mulss	xmm0, DWORD PTR _blastRange$[ebp]
	movss	xmm1, DWORD PTR tv646[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [ecx+94], xmm1

; 655  : 			endMessage->dataBlock.z    = simTarg->ZPos();

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [edx+98]

; 656  : 
; 657  : 			endMessage->dataBlock.groundType    =
; 658  : 					(char)OTWDriver.GetGroundType ( endMessage->dataBlock.x,
; 659  : 													endMessage->dataBlock.y );

	mov	eax, DWORD PTR _endMessage$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+94]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+90]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+114], al

; 660  : 		}
; 661  : 		else

	jmp	$LN4@FireOnSimE
$LN5@FireOnSimE:

; 662  : 		{
; 663  : 			// edg note: eventually we want to check damage type prior to
; 664  : 			// placing the end effect
; 665  : 			// effect is 2 secs out from target's current position
; 666  : 			endMessage->dataBlock.x    = simTarg->XPos() + simTarg->XDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv606[ebp]
	movss	xmm0, DWORD PTR tv606[ebp]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	DWORD PTR tv648[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv610[ebp]
	movss	xmm0, DWORD PTR tv610[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR tv648[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [eax+90], xmm1

; 667  : 			endMessage->dataBlock.y    = simTarg->YPos() + simTarg->YDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv615[ebp]
	movss	xmm0, DWORD PTR tv615[ebp]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	DWORD PTR tv650[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv619[ebp]
	movss	xmm0, DWORD PTR tv619[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR tv650[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [ecx+94], xmm1

; 668  : 			endMessage->dataBlock.z    = simTarg->ZPos() + simTarg->ZDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv624[ebp]
	movss	xmm0, DWORD PTR tv624[ebp]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	DWORD PTR tv652[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv628[ebp]
	movss	xmm0, DWORD PTR tv628[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR tv652[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [edx+98], xmm1

; 669  : 			endMessage->dataBlock.groundType    = -1;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [eax+114], -1
$LN4@FireOnSimE:

; 670  : 		}
; 671  : 
; 672  : 		// the special effects driver will space out the damage over
; 673  : 		// some random time
; 674  : 		OTWDriver.AddSfxRequest( new SfxClass(
; 675  : 								endMessage,
; 676  : 								damMessage ) );

	push	192					; 000000c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN21@FireOnSimE
	mov	ecx, DWORD PTR _damMessage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _endMessage$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0SfxClass@@QAE@PAVFalconMissileEndMessage@@PAVFalconDamageMessage@@@Z ; SfxClass::SfxClass
	mov	DWORD PTR tv429[ebp], eax
	jmp	SHORT $LN22@FireOnSimE
$LN21@FireOnSimE:
	mov	DWORD PTR tv429[ebp], 0
$LN22@FireOnSimE:
	mov	eax, DWORD PTR tv429[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?AddSfxRequest@OTWDriverClass@@QAEXPAVSfxClass@@@Z ; OTWDriverClass::AddSfxRequest
	jmp	SHORT $LN1@FireOnSimE
$LN16@FireOnSimE:

; 677  : 
; 678  : 	}
; 679  : 	// itsa missile
; 680  : 	else if ( classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_MISSILE )

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _classPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 6
	jne	SHORT $LN2@FireOnSimE

; 681  : 	{
; 682  : 		FireMissileAtSim( shooter, simTarg, weaponId);

	movzx	edx, WORD PTR _weaponId$[ebp]
	push	edx
	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?FireMissileAtSim@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z ; FireMissileAtSim
	add	esp, 12					; 0000000cH
$LN2@FireOnSimE:
$LN1@FireOnSimE:
$LN17@FireOnSimE:

; 683  : 	}
; 684  : 	else 
; 685  : 	{
; 686  : 		// do we need to handle any other types?
; 687  : 		//		MonoPrint( "Not Weapon Class for Camp Weapon Message\n" );
; 688  : 		return;
; 689  : 	}
; 690  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z$1:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z ENDP ; FireOnSimEntity
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_simTarg$ = -8						; size = 4
_i$ = -4						; size = 4
_shooter$ = 8						; size = 4
_campTarg$ = 12						; size = 4
_weapon$ = 16						; size = 4
_shots$ = 20						; size = 4
_targetId$ = 24						; size = 1
?FireOnSimEntity@@YAXPAVCampBaseClass@@0QAFQAEE@Z PROC	; FireOnSimEntity

; 522  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 523  : 	SimBaseClass *simTarg;
; 524  : 	int i;
; 525  : 
; 526  : 	// don't run if OTWdrive not active
; 527  : 	if ( !OTWDriver.IsActive() )

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?IsActive@OTWDriverClass@@QAEHXZ	; OTWDriverClass::IsActive
	test	eax, eax
	jne	SHORT $LN5@FireOnSimE

; 528  : 		return;

	jmp	SHORT $LN6@FireOnSimE
$LN5@FireOnSimE:

; 529  : 
; 530  : 	for ( i=0; i<shots[0]; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FireOnSimE
$LN3@FireOnSimE:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FireOnSimE:
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _shots$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN6@FireOnSimE

; 531  : 	{
; 532  : 		// get a component sim base out of the deagg'd unit
; 533  : 		simTarg = GetSimTarget(campTarg, targetId);

	movzx	ecx, BYTE PTR _targetId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _campTarg$[ebp]
	push	edx
	call	?GetSimTarget@@YAPAVSimBaseClass@@PAVCampBaseClass@@E@Z ; GetSimTarget
	add	esp, 8
	mov	DWORD PTR _simTarg$[ebp], eax

; 534  : 		if ( simTarg == NULL )

	cmp	DWORD PTR _simTarg$[ebp], 0
	jne	SHORT $LN1@FireOnSimE

; 535  : 		{
; 536  : 			MonoPrint( "Sim Target is NULL?\n" );

	push	OFFSET ??_C@_0BF@DLINKALD@Sim?5Target?5is?5NULL?$DP?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 537  : 			continue;

	jmp	SHORT $LN3@FireOnSimE
$LN1@FireOnSimE:

; 538  : 		}
; 539  : 		FireOnSimEntity(shooter, simTarg, weapon[0]);

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _weapon$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?FireOnSimEntity@@YAXPAVCampBaseClass@@PAVSimBaseClass@@F@Z ; FireOnSimEntity
	add	esp, 12					; 0000000cH

; 540  : 	}

	jmp	SHORT $LN3@FireOnSimE
$LN6@FireOnSimE:

; 541  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FireOnSimEntity@@YAXPAVCampBaseClass@@0QAFQAEE@Z ENDP	; FireOnSimEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_i$ = -12						; size = 4
_theObj$ = -8						; size = 4
_comp$ = -4						; size = 4
_target$ = 8						; size = 4
_targetId$ = 12						; size = 1
?GetSimTarget@@YAPAVSimBaseClass@@PAVCampBaseClass@@E@Z PROC ; GetSimTarget

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 489  : 	SimBaseClass *theObj = NULL;

	mov	DWORD PTR _theObj$[ebp], 0

; 490  : 	int comp=0, i=0;

	mov	DWORD PTR _comp$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0

; 491  : 
; 492  : 	if (target->GetComponents() == NULL)

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	jne	SHORT $LN7@GetSimTarg

; 493  : 		return NULL;

	xor	eax, eax
	jmp	$LN8@GetSimTarg
$LN7@GetSimTarg:

; 494  : 
; 495  : 	// Get a specific component
; 496  : 	if (targetId != 255)

	movzx	eax, BYTE PTR _targetId$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN6@GetSimTarg

; 497  : 		theObj = target->GetComponentNumber(targetId);

	movzx	ecx, BYTE PTR _targetId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _theObj$[ebp], eax
$LN6@GetSimTarg:

; 498  : 	if (!theObj)

	cmp	DWORD PTR _theObj$[ebp], 0
	jne	SHORT $LN5@GetSimTarg

; 499  : 	{
; 500  : 		// Fire at a random unit component, if campaign unit is deaggregated
; 501  : 		if (target->IsUnit())

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN4@GetSimTarg

; 502  : 			comp = ((Unit)target)->GetTotalVehicles();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	DWORD PTR _comp$[ebp], eax
	jmp	SHORT $LN3@GetSimTarg
$LN4@GetSimTarg:

; 503  : 		else if (target->IsObjective())

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN3@GetSimTarg

; 504  : 			comp = ((Objective)target)->GetTotalFeatures();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetTotalFeatures@ObjectiveClass@@QAEFXZ ; ObjectiveClass::GetTotalFeatures
	movsx	ecx, ax
	mov	DWORD PTR _comp$[ebp], ecx
$LN3@GetSimTarg:

; 505  : 		if (comp)

	cmp	DWORD PTR _comp$[ebp], 0
	je	SHORT $LN5@GetSimTarg

; 506  : 		{
; 507  : 			i = rand() % comp;

	call	_rand
	cdq
	idiv	DWORD PTR _comp$[ebp]
	mov	DWORD PTR _i$[ebp], edx

; 508  : 			theObj = (target)->GetComponentEntity(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _theObj$[ebp], eax
$LN5@GetSimTarg:

; 509  : 		}
; 510  : 	}
; 511  : 
; 512  : 	return theObj;

	mov	eax, DWORD PTR _theObj$[ebp]
$LN8@GetSimTarg:

; 513  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSimTarget@@YAPAVSimBaseClass@@PAVCampBaseClass@@E@Z ENDP ; GetSimTarget
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GFalconCampWeaponsFire@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFalconCampWeaponsFire@@UAEPAXI@Z PROC		; FalconCampWeaponsFire::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconCampWeaponsFire@@UAE@XZ	; FalconCampWeaponsFire::~FalconCampWeaponsFire
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFalconCampWeaponsFire@@UAEPAXI@Z ENDP		; FalconCampWeaponsFire::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
$T2 = -432						; size = 8
$T3 = -424						; size = 8
$T4 = -416						; size = 8
$T5 = -408						; size = 8
$T6 = -400						; size = 8
$T7 = -392						; size = 8
$T8 = -384						; size = 8
$T9 = -376						; size = 8
$T10 = -368						; size = 8
$T11 = -360						; size = 8
$T12 = -352						; size = 8
$T13 = -344						; size = 8
_data$ = -336						; size = 4
tv1703 = -332						; size = 4
$T14 = -328						; size = 4
tv1690 = -324						; size = 4
tv1681 = -320						; size = 4
tv1990 = -316						; size = 4
tv1986 = -312						; size = 4
tv1685 = -308						; size = 4
tv1668 = -304						; size = 4
tv1699 = -300						; size = 4
tv1663 = -296						; size = 4
tv1694 = -292						; size = 4
tv714 = -288						; size = 4
tv1988 = -284						; size = 4
$T15 = -280						; size = 4
tv1659 = -276						; size = 4
tv1992 = -272						; size = 4
tv1672 = -268						; size = 4
$T16 = -264						; size = 4
$T17 = -260						; size = 4
$T18 = -256						; size = 4
$T19 = -252						; size = 4
tv1984 = -248						; size = 4
$T20 = -244						; size = 4
tv752 = -240						; size = 4
tv258 = -236						; size = 4
tv901 = -232						; size = 4
tv183 = -228						; size = 4
tv519 = -224						; size = 4
tv1338 = -220						; size = 4
$T21 = -216						; size = 4
tv1216 = -212						; size = 4
$T22 = -208						; size = 4
$T23 = -204						; size = 4
tv1205 = -200						; size = 4
$T24 = -196						; size = 4
$T25 = -192						; size = 4
_losses$ = -188						; size = 4
_i$ = -184						; size = 4
_i$26 = -180						; size = 4
_newEvent$27 = -176					; size = 4
_shooterAc$ = -172					; size = 4
_msg$28 = -168						; size = 4
_dtm$ = -164						; size = 4
_msg$29 = -160						; size = 4
_this$ = -156						; size = 4
_newEvent$ = -152					; size = 4
_shooter$ = -148					; size = 4
_target$ = -144						; size = 4
_wfm$30 = -140						; size = 100
_PSvec$31 = -40						; size = 12
_pos$32 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_autodisp$ = 8						; size = 1
?Process@FalconCampWeaponsFire@@MAEHE@Z PROC		; FalconCampWeaponsFire::Process
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Process@FalconCampWeaponsFire@@MAEHE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 420				; 000001a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 	CampEntity	target = (CampEntity)vuDatabase->Find(EntityId());

	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityId@VuMessage@@QBE?AVVU_ID@@XZ	; VuMessage::EntityId
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$[ebp], eax

; 148  : 	CampEntity	shooter = (CampEntity)vuDatabase->Find(dataBlock.shooterID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR [eax+48]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _shooter$[ebp], eax

; 149  : 	int			losses,shooterAc=255,i;

	mov	DWORD PTR _shooterAc$[ebp], 255		; 000000ffH

; 150  : 	FalconDeathMessage	*dtm = NULL;

	mov	DWORD PTR _dtm$[ebp], 0

; 151  : 	//sfr: again we cant use datablock directly
; 152  : 	VU_BYTE *data = dataBlock.data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _data$[ebp], ecx

; 153  : 
; 154  : 	if (autodisp || !shooter || !target || !shooter->IsUnit())

	movzx	edx, BYTE PTR _autodisp$[ebp]
	test	edx, edx
	jne	SHORT $LN70@Process
	cmp	DWORD PTR _shooter$[ebp], 0
	je	SHORT $LN70@Process
	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN70@Process
	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	jne	SHORT $LN71@Process
$LN70@Process:

; 155  : 		return -1;

	or	eax, -1
	jmp	$LN72@Process
$LN71@Process:

; 156  : 
; 157  : 	if (!target->IsAggregate())

	mov	ecx, DWORD PTR _target$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN69@Process

; 158  : 	{
; 159  : 		// Whoops, this thing deaggregated out from under us.
; 160  : 		// If we're the host, actually start firing the stuff.
; 161  : 		if (shooter->IsLocal())

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN68@Process

; 162  : 			FireOnSimEntity(shooter, target, dataBlock.weapon, dataBlock.shots, dataBlock.dPilotId);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?FireOnSimEntity@@YAXPAVCampBaseClass@@0QAFQAEE@Z ; FireOnSimEntity
	add	esp, 20					; 00000014H
$LN68@Process:

; 163  : 		return 0;

	xor	eax, eax
	jmp	$LN72@Process
$LN69@Process:

; 164  : 	}
; 165  : 
; 166  : 	shooter->ReturnToSearch();

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx

; 167  : 
; 168  : 	if (shooter->IsFlight()) {

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN67@Process

; 169  : 		// Pick a pilot to get the kill
; 170  : 		if (dataBlock.fPilotId == 255)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+88]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN66@Process

; 171  : 			shooterAc = dataBlock.fPilotId = (uchar)((Flight)shooter)->PickRandomPilot(target->Id().num_);

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?PickRandomPilot@FlightClass@@QAEHH@Z	; FlightClass::PickRandomPilot
	mov	DWORD PTR tv183[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv183[ebp]
	mov	BYTE PTR [edx+88], al
	movzx	ecx, BYTE PTR tv183[ebp]
	mov	DWORD PTR _shooterAc$[ebp], ecx
$LN66@Process:

; 172  : 		if (dataBlock.fPilotId >= PILOTS_PER_FLIGHT)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	cmp	eax, 4
	jl	SHORT $LN65@Process

; 173  : 			shooterAc = ((Flight)shooter)->GetAdjustedPlayerSlot(dataBlock.fPilotId);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+88]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetAdjustedPlayerSlot@FlightClass@@QAEHH@Z ; FlightClass::GetAdjustedPlayerSlot
	mov	DWORD PTR _shooterAc$[ebp], eax

; 174  : 		else

	jmp	SHORT $LN64@Process
$LN65@Process:

; 175  : 			shooterAc = dataBlock.fPilotId;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	mov	DWORD PTR _shooterAc$[ebp], ecx
$LN64@Process:

; 176  : 	}
; 177  : 	else {

	jmp	SHORT $LN63@Process
$LN67@Process:

; 178  : 		shooterAc = 0; // something

	mov	DWORD PTR _shooterAc$[ebp], 0
$LN63@Process:

; 179  : 	}
; 180  : 
; 181  : 	if (shooter->IsAggregate())

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN53@Process

; 182  : 	{
; 183  : 		// Send a radio chatter message to LOCAL MACHINE if shooter is a flight
; 184  : 		if (shooter->IsFlight() && !SimDriver.InSim() && !(rand() % 20) )

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	$LN61@Process
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?InSim@SimulationDriver@@QBE_NXZ	; SimulationDriver::InSim
	movzx	eax, al
	test	eax, eax
	jne	$LN61@Process
	call	_rand
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	test	edx, edx
	jne	$LN61@Process

; 185  : 		{
; 186  : 			// Send the chatter message;
; 187  : 			FalconRadioChatterMessage *msg = new FalconRadioChatterMessage(shooter->Id(), FalconLocalSession);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T24[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN74@Process
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T24[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv258[ebp], eax
	jmp	SHORT $LN75@Process
$LN74@Process:
	mov	DWORD PTR tv258[ebp], 0
$LN75@Process:
	mov	eax, DWORD PTR tv258[ebp]
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T17[ebp]
	mov	DWORD PTR _msg$28[ebp], ecx

; 188  : 			msg->dataBlock.from = shooter->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$28[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 189  : 			msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$28[ebp]
	mov	BYTE PTR [ecx+60], 1

; 190  : 			msg->dataBlock.voice_id = (uchar)((Flight)shooter)->GetPilotVoiceID(shooterAc);

	mov	edx, DWORD PTR _shooterAc$[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _msg$28[ebp]
	mov	BYTE PTR [ecx+61], al

; 191  : 			if (target->IsFlight())

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN60@Process

; 192  : 			{
; 193  : 				msg->dataBlock.message = rcFIRING;

	mov	eax, 73					; 00000049H
	mov	ecx, DWORD PTR _msg$28[ebp]
	mov	WORD PTR [ecx+62], ax

; 194  : 				// JWFU: Need callsign data stuff
; 195  : 				msg->dataBlock.edata[0] = WeaponDataTable[dataBlock.weapon[0]].Index;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+edx+64]
	imul	ecx, 60					; 0000003cH
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _msg$28[ebp]
	mov	esi, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	mov	cx, WORD PTR [esi+ecx]
	mov	WORD PTR [eax+edx+64], cx

; 196  : 			}
; 197  : 			else

	jmp	$LN59@Process
$LN60@Process:

; 198  : 			{
; 199  : 				msg->dataBlock.message = rcATTACKINGA;

	mov	edx, 19					; 00000013H
	mov	eax, DWORD PTR _msg$28[ebp]
	mov	WORD PTR [eax+62], dx

; 200  : 				msg->dataBlock.edata[0] = ((Flight)shooter)->callsign_id;

	mov	ecx, DWORD PTR _shooter$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _msg$28[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 201  : 				msg->dataBlock.edata[1] = (short)((Flight)shooter)->GetPilotCallNumber(shooterAc);

	mov	edx, DWORD PTR _shooterAc$[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetPilotCallNumber@FlightClass@@QAEHH@Z ; FlightClass::GetPilotCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$28[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 202  : 				target->GetLocation(&msg->dataBlock.edata[2],&msg->dataBlock.edata[3]);

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _msg$28[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _msg$28[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN59@Process:

; 203  : 			}
; 204  : 			FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$28[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN61@Process:

; 205  : 		}
; 206  : 
; 207  : 		// Synthisize a shot message for flight shooters in our package
; 208  : 		if (shooter->IsFlight() && (shooter->InPackage()||g_bLogEvents))

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN58@Process
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?InPackage@CampBaseClass@@QAEHXZ	; CampBaseClass::InPackage
	test	eax, eax
	jne	SHORT $LN57@Process
	movzx	ecx, BYTE PTR ?g_bLogEvents@@3_NA	; g_bLogEvents
	test	ecx, ecx
	je	$LN58@Process
$LN57@Process:

; 209  : 		{
; 210  : 			FalconWeaponsFire	wfm(FalconNullId,FalconLocalSession);

	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	lea	ecx, DWORD PTR _wfm$30[ebp]
	call	??0FalconWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWeaponsFire::FalconWeaponsFire
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 211  : 			wfm.dataBlock.fCampID = shooter->GetCampID();

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	WORD PTR _wfm$30[ebp+60], ax

; 212  : 			wfm.dataBlock.fPilotID = dataBlock.fPilotId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+88]
	mov	BYTE PTR _wfm$30[ebp+62], dl

; 213  : 			wfm.dataBlock.fIndex = (unsigned short)(((Unit)shooter)->GetVehicleID(0) + VU_LAST_ENTITY_TYPE);

	push	0
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	add	eax, 100				; 00000064H
	mov	WORD PTR _wfm$30[ebp+63], ax

; 214  : 			wfm.dataBlock.fSide = (unsigned char)shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	BYTE PTR _wfm$30[ebp+65], al

; 215  : 			wfm.dataBlock.fWeaponID = (unsigned short)(WeaponDataTable[dataBlock.weapon[0]].Index + VU_LAST_ENTITY_TYPE);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx+64]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	edx, WORD PTR [ecx+eax]
	add	edx, 100				; 00000064H
	mov	WORD PTR _wfm$30[ebp+66], dx

; 216  : 			// KCK: Since we don't really have a real weapon, use the current time for matching
; 217  : 			wfm.dataBlock.fWeaponUID.num_ = dataBlock.fWeaponUID.num_ = TheCampaign.CurrentTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR _wfm$30[ebp+68], edx

; 218  : 			TheCampaign.MissionEvaluator->RegisterShot(&wfm);

	lea	eax, DWORD PTR _wfm$30[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterShot@MissionEvaluationClass@@QAEXPAVFalconWeaponsFire@@@Z ; MissionEvaluationClass::RegisterShot

; 219  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _wfm$30[ebp]
	call	??1FalconWeaponsFire@@UAE@XZ		; FalconWeaponsFire::~FalconWeaponsFire
$LN58@Process:

; 220  : 
; 221  : 		// Do visual Effects (Aggregate shooters only)
; 222  : 		if (InterestingSFX(target->XPos(), target->YPos()))

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?InterestingSFX@@YAHMM@Z		; InterestingSFX
	add	esp, 8
	test	eax, eax
	je	$LN53@Process

; 223  : 		{
; 224  : 			for (i=0; i<MAX_TYPES_PER_CAMP_FIRE_MESSAGE && dataBlock.weapon[i] && dataBlock.shots[i]; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN55@Process
$LN54@Process:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN55@Process:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN53@Process
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+64]
	test	ecx, ecx
	je	SHORT $LN53@Process
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+80]
	test	eax, eax
	je	SHORT $LN53@Process

; 225  : 				DoDistanceVisualEffects (shooter, target, dataBlock.weapon[i], dataBlock.shots[i]);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+64]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	call	?DoDistanceVisualEffects@@YAXPAVCampBaseClass@@0HH@Z ; DoDistanceVisualEffects
	add	esp, 16					; 00000010H
	jmp	SHORT $LN54@Process
$LN53@Process:

; 226  : 		}
; 227  : 	}
; 228  : 
; 229  : 	// Synthisize a death message if either shooter or target is in our package
; 230  : 	if (shooter->InPackage() || target->InPackage())

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?InPackage@CampBaseClass@@QAEHXZ	; CampBaseClass::InPackage
	test	eax, eax
	jne	SHORT $LN51@Process
	mov	ecx, DWORD PTR _target$[ebp]
	call	?InPackage@CampBaseClass@@QAEHXZ	; CampBaseClass::InPackage
	test	eax, eax
	je	$LN52@Process
$LN51@Process:

; 231  : 	{
; 232  : 		dtm = new FalconDeathMessage(FalconNullId,FalconLocalSession);

	push	94					; 0000005eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T20[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN76@Process
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR $T20[ebp]
	call	??0FalconDeathMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDeathMessage::FalconDeathMessage
	mov	DWORD PTR tv519[ebp], eax
	jmp	SHORT $LN77@Process
$LN76@Process:
	mov	DWORD PTR tv519[ebp], 0
$LN77@Process:
	mov	ecx, DWORD PTR tv519[ebp]
	mov	DWORD PTR $T14[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T14[ebp]
	mov	DWORD PTR _dtm$[ebp], edx

; 233  : 		dtm->dataBlock.damageType = 0;

	mov	eax, DWORD PTR _dtm$[ebp]
	mov	DWORD PTR [eax+48], 0

; 234  : 		if (target->IsFlight())

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN50@Process

; 235  : 			dtm->dataBlock.dPilotID = (uchar)((Flight)target)->PickRandomPilot(target->GetCampID());

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?PickRandomPilot@FlightClass@@QAEHH@Z	; FlightClass::PickRandomPilot
	mov	edx, DWORD PTR _dtm$[ebp]
	mov	BYTE PTR [edx+66], al
$LN50@Process:

; 236  : 		dtm->dataBlock.dCampID = target->GetCampID();

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _dtm$[ebp]
	mov	WORD PTR [ecx+64], ax

; 237  : 		dtm->dataBlock.dSide = target->GetOwner();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _dtm$[ebp]
	mov	BYTE PTR [edx+69], al

; 238  : 		dtm->dataBlock.fCampID = shooter->GetCampID();

	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _dtm$[ebp]
	mov	WORD PTR [ecx+78], ax

; 239  : 		dtm->dataBlock.fPilotID = dataBlock.fPilotId;

	mov	edx, DWORD PTR _dtm$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+88]
	mov	BYTE PTR [edx+80], cl

; 240  : 		dtm->dataBlock.fIndex = (unsigned short)(((Unit)shooter)->GetVehicleID(0) + VU_LAST_ENTITY_TYPE);

	push	0
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	add	edx, 100				; 00000064H
	mov	eax, DWORD PTR _dtm$[ebp]
	mov	WORD PTR [eax+81], dx

; 241  : 		dtm->dataBlock.fSide = shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	ecx, DWORD PTR _dtm$[ebp]
	mov	BYTE PTR [ecx+83], al

; 242  : 		dtm->dataBlock.fWeaponID = (unsigned short)(WeaponDataTable[dataBlock.weapon[0]].Index + VU_LAST_ENTITY_TYPE);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+edx+64]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	eax, WORD PTR [edx+ecx]
	add	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _dtm$[ebp]
	mov	WORD PTR [ecx+84], ax

; 243  : 		dtm->dataBlock.fWeaponUID = dataBlock.fWeaponUID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [edx+60]
	mov	edx, DWORD PTR _dtm$[ebp]
	mov	DWORD PTR [edx+86], eax
	mov	DWORD PTR [edx+90], ecx
$LN52@Process:

; 244  : 	}
; 245  : 
; 246  : 	// Apply the damage data
; 247  : 	losses = target->DecodeDamageData(data, (Unit)shooter, dtm);

	mov	eax, DWORD PTR _dtm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+372]
	call	eax
	mov	DWORD PTR _losses$[ebp], eax

; 248  : 
; 249  : 	// add some additional fire effects if losses were taken, the target is
; 250  : 	// a battalion and the target is in the sim lists
; 251  : 	if ( losses &&
; 252  : 					target->InSimLists() &&
; 253  : 					OTWDriver.IsActive() )

	cmp	DWORD PTR _losses$[ebp], 0
	je	$LN40@Process
	mov	ecx, DWORD PTR _target$[ebp]
	call	?InSimLists@CampBaseClass@@QAEHXZ	; CampBaseClass::InSimLists
	test	eax, eax
	je	$LN40@Process
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?IsActive@OTWDriverClass@@QAEHXZ	; OTWDriverClass::IsActive
	test	eax, eax
	je	$LN40@Process

; 254  : 	{
; 255  : 		int i;
; 256  : 		Tpoint pos;
; 257  : 		//RV - I-Hawk - Added a 0 vector for RV new PS calls
; 258  : 		Tpoint PSvec;
; 259  : 		PSvec.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$31[ebp], xmm0

; 260  : 		PSvec.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$31[ebp+4], xmm0

; 261  : 		PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$31[ebp+8], xmm0

; 262  : 
; 263  : 		// ground losses
; 264  : 		if ( target->IsBattalion() || target->IsObjective() )

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN47@Process
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	$LN48@Process
$LN47@Process:

; 265  : 		{
; 266  : 			pos.z = 40.0f;

	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _pos$32[ebp+8], xmm0

; 267  : 
; 268  : 			for ( i = 0; i < losses; i++ )

	mov	DWORD PTR _i$26[ebp], 0
	jmp	SHORT $LN46@Process
$LN45@Process:
	mov	ecx, DWORD PTR _i$26[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$26[ebp], ecx
$LN46@Process:
	mov	edx, DWORD PTR _i$26[ebp]
	cmp	edx, DWORD PTR _losses$[ebp]
	jge	$LN44@Process

; 269  : 			{
; 270  : 				/*RV - I-Hawk - Removed VEHICLE_BURNING here, 
; 271  : 				  It's called per vehicle at simveh.cpp
; 272  : 				pos.x = target->XPos() + 800.0f * PRANDFloat();
; 273  : 				pos.y = target->YPos() + 800.0f * PRANDFloat();
; 274  : 				OTWDriver.AddSfxRequest( new SfxClass( SFX_VEHICLE_BURNING,
; 275  : 										&pos,
; 276  : 										60.0f,
; 277  : 										90.0f ) );
; 278  : 				*/
; 279  : 
; 280  : 				pos.x = target->XPos() + 800.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1659[ebp]
	movss	xmm0, DWORD PTR tv1659[ebp]
	movss	DWORD PTR tv1984[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1663[ebp]
	movss	xmm0, DWORD PTR tv1663[ebp]
	mulss	xmm0, DWORD PTR __real@44480000
	movss	xmm1, DWORD PTR tv1984[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _pos$32[ebp], xmm1

; 281  : 				pos.y = target->YPos() + 800.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1668[ebp]
	movss	xmm0, DWORD PTR tv1668[ebp]
	movss	DWORD PTR tv1986[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1672[ebp]
	movss	xmm0, DWORD PTR tv1672[ebp]
	mulss	xmm0, DWORD PTR __real@44480000
	movss	xmm1, DWORD PTR tv1986[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _pos$32[ebp+4], xmm1

; 282  : 				/*
; 283  : 				OTWDriver.AddSfxRequest( new SfxClass( SFX_CAMP_HIT_EXPLOSION_DEBRISTRAIL,
; 284  : 										&pos,
; 285  : 										2.0f,
; 286  : 										200.0f ) );
; 287  : 				*/
; 288  : 				DrawableParticleSys::PS_AddParticleEx((SFX_CAMP_HIT_EXPLOSION_DEBRISTRAIL + 1),
; 289  : 									&pos,
; 290  : 									&PSvec);

	lea	eax, DWORD PTR _PSvec$31[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$32[ebp]
	push	ecx
	push	115					; 00000073H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 291  : 			}

	jmp	$LN45@Process
$LN44@Process:

; 292  : 		}
; 293  : 		// air losses
; 294  : 		else

	jmp	$LN40@Process
$LN48@Process:

; 295  : 		{
; 296  : 
; 297  : 			for ( i = 0; i < losses; i++ )

	mov	DWORD PTR _i$26[ebp], 0
	jmp	SHORT $LN42@Process
$LN41@Process:
	mov	edx, DWORD PTR _i$26[ebp]
	add	edx, 1
	mov	DWORD PTR _i$26[ebp], edx
$LN42@Process:
	mov	eax, DWORD PTR _i$26[ebp]
	cmp	eax, DWORD PTR _losses$[ebp]
	jge	$LN40@Process

; 298  : 			{
; 299  : 				pos.x = target->XPos() + 800.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1681[ebp]
	movss	xmm0, DWORD PTR tv1681[ebp]
	movss	DWORD PTR tv1988[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1685[ebp]
	movss	xmm0, DWORD PTR tv1685[ebp]
	mulss	xmm0, DWORD PTR __real@44480000
	movss	xmm1, DWORD PTR tv1988[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _pos$32[ebp], xmm1

; 300  : 				pos.y = target->YPos() + 800.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1690[ebp]
	movss	xmm0, DWORD PTR tv1690[ebp]
	movss	DWORD PTR tv1990[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1694[ebp]
	movss	xmm0, DWORD PTR tv1694[ebp]
	mulss	xmm0, DWORD PTR __real@44480000
	movss	xmm1, DWORD PTR tv1990[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _pos$32[ebp+4], xmm1

; 301  : 				pos.z = target->ZPos() + 300.0f * PRANDFloat();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1699[ebp]
	movss	xmm0, DWORD PTR tv1699[ebp]
	movss	DWORD PTR tv1992[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1703[ebp]
	movss	xmm0, DWORD PTR tv1703[ebp]
	mulss	xmm0, DWORD PTR __real@43960000
	movss	xmm1, DWORD PTR tv1992[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _pos$32[ebp+8], xmm1

; 302  : 				/*
; 303  : 				OTWDriver.AddSfxRequest( new SfxClass( SFX_CAMP_HIT_EXPLOSION_DEBRISTRAIL,
; 304  : 										&pos,
; 305  : 										2.0f,
; 306  : 										200.0f ) );
; 307  : 				*/
; 308  : 				DrawableParticleSys::PS_AddParticleEx((SFX_CAMP_HIT_EXPLOSION_DEBRISTRAIL + 1),
; 309  : 									&pos,
; 310  : 									&PSvec);

	lea	ecx, DWORD PTR _PSvec$31[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$32[ebp]
	push	edx
	push	115					; 00000073H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 311  : 			}

	jmp	$LN41@Process
$LN40@Process:

; 312  : 		}
; 313  : 
; 314  : 	}
; 315  : 
; 316  : 	if (dtm)

	cmp	DWORD PTR _dtm$[ebp], 0
	je	SHORT $LN79@Process

; 317  : 		delete dtm;

	mov	eax, DWORD PTR _dtm$[ebp]
	mov	DWORD PTR $T15[ebp], eax
	mov	ecx, DWORD PTR $T15[ebp]
	mov	DWORD PTR $T25[ebp], ecx
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN78@Process
	push	1
	mov	edx, DWORD PTR $T25[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T25[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv714[ebp], eax
	jmp	SHORT $LN79@Process
$LN78@Process:
	mov	DWORD PTR tv714[ebp], 0
$LN79@Process:

; 318  : 
; 319  : 	// Send a RadioChatter message to LOCAL MACHINE if shooter is a flight and scored a kill
; 320  : 	if (losses && shooter->IsFlight())

	cmp	DWORD PTR _losses$[ebp], 0
	je	$LN38@Process
	mov	eax, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN38@Process

; 321  : 	{
; 322  : 		FalconRadioChatterMessage *msg = new FalconRadioChatterMessage(target->Id(), FalconLocalSession);

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN80@Process
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv752[ebp], eax
	jmp	SHORT $LN81@Process
$LN80@Process:
	mov	DWORD PTR tv752[ebp], 0
$LN81@Process:
	mov	ecx, DWORD PTR tv752[ebp]
	mov	DWORD PTR $T19[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T19[ebp]
	mov	DWORD PTR _msg$29[ebp], edx

; 323  : 		msg->dataBlock.from = shooter->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _msg$29[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 324  : 		msg->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _msg$29[ebp]
	mov	BYTE PTR [ecx+60], 1

; 325  : 		msg->dataBlock.voice_id = (uchar)((Flight)shooter)->GetPilotVoiceID(shooterAc);

	mov	edx, DWORD PTR _shooterAc$[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _msg$29[ebp]
	mov	BYTE PTR [ecx+61], al

; 326  : 		if (target->IsFlight())

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN37@Process

; 327  : 		{
; 328  : 			msg->dataBlock.message = rcAIRBDA;

	mov	eax, 3
	mov	ecx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [ecx+62], ax

; 329  : 			msg->dataBlock.edata[0] = ((Flight)shooter)->callsign_id;

	mov	edx, DWORD PTR _shooter$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 330  : 			msg->dataBlock.edata[1] = (short)((Flight)shooter)->GetPilotCallNumber(shooterAc);

	mov	eax, DWORD PTR _shooterAc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetPilotCallNumber@FlightClass@@QAEHH@Z ; FlightClass::GetPilotCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 331  : 			//MI uncommented the line below and outcommented the lines 
; 332  : 			//M.N. changed to 32767 which flexibly uses randomized values of available eval indexes
; 333  : 			msg->dataBlock.edata[2] = 32767; // couldn't stand the Hollywood kill calls

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 32767				; 00007fffH
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+eax+64], cx
	jmp	$LN32@Process
$LN37@Process:

; 334  : 			/*if(rand()%2)
; 335  : 			  msg->dataBlock.edata[2] = 1;
; 336  : 			  else
; 337  : 			  msg->dataBlock.edata[2] = 9;*/
; 338  : 		}
; 339  : 		else if (target->IsTaskForce())

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+264]
	call	eax
	test	eax, eax
	je	SHORT $LN35@Process

; 340  : 		{
; 341  : 			msg->dataBlock.message = rcMOVERBDA;

	mov	ecx, 117				; 00000075H
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+62], cx

; 342  : 			msg->dataBlock.edata[0] = 32767;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, 32767				; 00007fffH
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 343  : 		}
; 344  : 		else

	jmp	$LN32@Process
$LN35@Process:

; 345  : 		{
; 346  : 			if (target->IsUnit())

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN33@Process

; 347  : 			{
; 348  : 				msg->dataBlock.message = rcMOVERBDA;

	mov	ecx, 117				; 00000075H
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+62], cx

; 349  : 				msg->dataBlock.edata[0] = 32767;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, 32767				; 00007fffH
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 350  : 			}
; 351  : 			else

	jmp	SHORT $LN32@Process
$LN33@Process:

; 352  : 			{
; 353  : 				msg->dataBlock.message = rcSTATICBDA;

	mov	eax, 197				; 000000c5H
	mov	ecx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [ecx+62], ax

; 354  : 				msg->dataBlock.edata[0] = ((Flight)shooter)->callsign_id;

	mov	edx, DWORD PTR _shooter$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 355  : 				msg->dataBlock.edata[1] = (short)((Flight)shooter)->GetPilotCallNumber(shooterAc);

	mov	eax, DWORD PTR _shooterAc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetPilotCallNumber@FlightClass@@QAEHH@Z ; FlightClass::GetPilotCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 356  : 				msg->dataBlock.edata[2] = 32767;

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 32767				; 00007fffH
	mov	edx, DWORD PTR _msg$29[ebp]
	mov	WORD PTR [edx+eax+64], cx
$LN32@Process:

; 357  : 			}
; 358  : 		}
; 359  : 		FalconSendMessage(msg, FALSE);

	push	0
	mov	eax, DWORD PTR _msg$29[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN38@Process:

; 360  : 		}
; 361  : 
; 362  : 	// COBRA - RED - SUSPENDED FOR NOW, caused a CTD
; 363  : 	//Cobra TJL Let's say we missed ;)
; 364  : 	/*else
; 365  : 		{
; 366  : 		FalconRadioChatterMessage *msg = new FalconRadioChatterMessage(target->Id(), FalconLocalSession);
; 367  : 		msg->dataBlock.from = shooter->Id();
; 368  : 		msg->dataBlock.to = MESSAGE_FOR_TEAM;
; 369  : 		msg->dataBlock.voice_id = (uchar)((Flight)shooter)->GetPilotVoiceID(shooterAc);
; 370  : 		msg->dataBlock.message = rcMISSED;
; 371  : 		msg->dataBlock.edata[0] = 32767;
; 372  : 		FalconSendMessage(msg, FALSE);
; 373  : 		}*/
; 374  : 
; 375  : 	// Send a CampEvent message for weapon fire to the LOCAL MACHINE
; 376  : 	FalconCampEventMessage	*newEvent = new FalconCampEventMessage(shooter->Id(),FalconLocalSession);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN82@Process
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0FalconCampEventMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconCampEventMessage::FalconCampEventMessage
	mov	DWORD PTR tv901[ebp], eax
	jmp	SHORT $LN83@Process
$LN82@Process:
	mov	DWORD PTR tv901[ebp], 0
$LN83@Process:
	mov	ecx, DWORD PTR tv901[ebp]
	mov	DWORD PTR $T18[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T18[ebp]
	mov	DWORD PTR _newEvent$[ebp], edx

; 377  : 	newEvent->dataBlock.flags = 0;

	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	BYTE PTR [eax+52], 0

; 378  : 	newEvent->dataBlock.team = shooter->GetTeam();

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	BYTE PTR [ecx+53], al

; 379  : 	if (shooter->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN31@Process

; 380  : 	{
; 381  : 		if (target->IsObjective())

	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN30@Process

; 382  : 			newEvent->dataBlock.eventType = FalconCampEventMessage::campStrike;

	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [ecx+48], 1
	jmp	SHORT $LN25@Process
$LN30@Process:

; 383  : 		else if (target->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN28@Process

; 384  : 			newEvent->dataBlock.eventType = FalconCampEventMessage::campAirCombat;

	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [eax+48], 2
	jmp	SHORT $LN25@Process
$LN28@Process:

; 385  : 		else if (target->GetDomain() == DOMAIN_LAND)

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN26@Process

; 386  : 			newEvent->dataBlock.eventType = FalconCampEventMessage::campGroundAttack;

	mov	edx, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [edx+48], 0

; 387  : 		else

	jmp	SHORT $LN25@Process
$LN26@Process:

; 388  : 			newEvent->dataBlock.eventType = FalconCampEventMessage::campCombat;

	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [eax+48], 3
$LN25@Process:

; 389  : 	}
; 390  : 	else

	jmp	SHORT $LN24@Process
$LN31@Process:

; 391  : 		newEvent->dataBlock.eventType = FalconCampEventMessage::campCombat;

	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [ecx+48], 3
$LN24@Process:

; 392  : 	newEvent->dataBlock.data.vuIds[0] = shooter->Id();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, 8
	imul	eax, 0
	mov	esi, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [esi+eax+64], ecx
	mov	DWORD PTR [esi+eax+68], edx

; 393  : 	newEvent->dataBlock.data.vuIds[1] = target->Id();

	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, 8
	shl	ecx, 0
	mov	esi, DWORD PTR _newEvent$[ebp]
	mov	DWORD PTR [esi+ecx+64], edx
	mov	DWORD PTR [esi+ecx+68], eax

; 394  : 	newEvent->dataBlock.data.owners[0] = shooter->GetOwner();

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	dx, al
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+eax+80], dx

; 395  : 	newEvent->dataBlock.data.owners[1] = target->GetOwner();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+eax+80], dx

; 396  : 	target->GetLocation(&newEvent->dataBlock.data.xLoc,&newEvent->dataBlock.data.yLoc);

	mov	edx, DWORD PTR _newEvent$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	eax, DWORD PTR _newEvent$[ebp]
	add	eax, 58					; 0000003aH
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 397  : 	if (shooter->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 2
	jne	$LN23@Process

; 398  : 	{
; 399  : 		// 2002-02-21 ADDED BY S.G. If it's not spotted and it's NOT the player, use the 'Bandit' vehicle so we don't warn the player on the identity of the shooter
; 400  : 		if (!shooter->GetIdentified(target->GetTeam()) && FalconLocalSession->GetTeam() != shooter->GetTeam())

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetIdentified@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetIdentified
	test	eax, eax
	jne	SHORT $LN22@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	esi, al
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN22@Process

; 401  : 			newEvent->dataBlock.data.textIds[0] = (short)(-1 * BANDIT_VEH);

	mov	edx, 2
	imul	edx, 0
	mov	eax, -2800				; fffff510H
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+edx+84], ax

; 402  : 		else

	jmp	SHORT $LN21@Process
$LN22@Process:

; 403  : 			// END OF ADDED SECTION 2002-02-21
; 404  : 			newEvent->dataBlock.data.textIds[0] = (short)(-1 * ((Unit)shooter)->GetVehicleID(0));

	push	0
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	imul	edx, -1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+eax+84], dx
$LN21@Process:

; 405  : 
; 406  : 		if (target->IsObjective())

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN20@Process

; 407  : 		{
; 408  : 			// Air Strikes
; 409  : 			newEvent->dataBlock.data.formatId = 1804;

	mov	eax, 1804				; 0000070cH
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+56], ax
	jmp	$LN15@Process
$LN20@Process:

; 410  : 		}
; 411  : 		else if (target->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 2
	jne	$LN18@Process

; 412  : 		{
; 413  : 			// Air to air combat
; 414  : 			newEvent->dataBlock.data.formatId = 1805;

	mov	eax, 1805				; 0000070dH
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+56], ax

; 415  : 			// 2002-02-21 ADDED BY S.G. If it's not spotted and it's NOT the player, use the 'Bandit' vehicle so we don't warn the player on the identity of the shooter
; 416  : 			if (!target->GetIdentified(shooter->GetTeam()) && FalconLocalSession->GetTeam() != target->GetTeam())

	mov	edx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetIdentified@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetIdentified
	test	eax, eax
	jne	SHORT $LN17@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	esi, al
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN17@Process

; 417  : 				newEvent->dataBlock.data.textIds[1] = (short)(-1 * BANDIT_VEH);

	mov	edx, 2
	shl	edx, 0
	mov	eax, -2800				; fffff510H
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+edx+84], ax

; 418  : 			else

	jmp	SHORT $LN16@Process
$LN17@Process:

; 419  : 				// END OF ADDED SECTION 2002-02-21
; 420  : 				newEvent->dataBlock.data.textIds[1] = (short)(-1 * ((Unit)target)->GetVehicleID(0));

	push	0
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	imul	edx, -1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+eax+84], dx
$LN16@Process:

; 421  : 		}
; 422  : 		else

	jmp	SHORT $LN15@Process
$LN18@Process:

; 423  : 		{
; 424  : 			// Air attack
; 425  : 			newEvent->dataBlock.data.formatId = 1803;

	mov	edx, 1803				; 0000070bH
	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [eax+56], dx
$LN15@Process:

; 426  : 		}

	jmp	$LN5@Process
$LN23@Process:

; 427  : 	}
; 428  : 	else if (shooter->GetDomain() == DOMAIN_SEA)

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN13@Process

; 429  : 	{
; 430  : 		// Naval engagement
; 431  : 		newEvent->dataBlock.data.formatId = 1802;

	mov	edx, 1802				; 0000070aH
	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [eax+56], dx

; 432  : 	}
; 433  : 	else

	jmp	$LN5@Process
$LN13@Process:

; 434  : 	{
; 435  : 		if (target->IsObjective())

	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN11@Process

; 436  : 		{
; 437  : 			// Ground assault
; 438  : 			newEvent->dataBlock.data.formatId = 1806;

	mov	ecx, 1806				; 0000070eH
	mov	edx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [edx+56], cx
	jmp	SHORT $LN5@Process
$LN11@Process:

; 439  : 		}
; 440  : 		else if (target->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN9@Process

; 441  : 		{
; 442  : 			// Air defenses firing
; 443  : 			newEvent->dataBlock.data.formatId = 1801;

	mov	ecx, 1801				; 00000709H
	mov	edx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [edx+56], cx

; 444  : 		}
; 445  : 		else

	jmp	SHORT $LN5@Process
$LN9@Process:

; 446  : 		{
; 447  : 			// Ground engagement (artillery or regular)
; 448  : 			if (shooter->GetSType() == STYPE_UNIT_ROCKET || shooter->GetSType() == STYPE_UNIT_SP_ARTILLERY || shooter->GetSType() == STYPE_UNIT_TOWED_ARTILLERY)

	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN6@Process
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 11					; 0000000bH
	je	SHORT $LN6@Process
	mov	ecx, DWORD PTR _shooter$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	edx, al
	cmp	edx, 14					; 0000000eH
	jne	SHORT $LN7@Process
$LN6@Process:

; 449  : 				newEvent->dataBlock.data.formatId = 1807;

	mov	eax, 1807				; 0000070fH
	mov	ecx, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [ecx+56], ax

; 450  : 			else

	jmp	SHORT $LN5@Process
$LN7@Process:

; 451  : 				newEvent->dataBlock.data.formatId = 1800;

	mov	edx, 1800				; 00000708H
	mov	eax, DWORD PTR _newEvent$[ebp]
	mov	WORD PTR [eax+56], dx
$LN5@Process:

; 452  : 		}
; 453  : 	}
; 454  : 	SendCampUIMessage(newEvent);

	mov	ecx, DWORD PTR _newEvent$[ebp]
	push	ecx
	call	?SendCampUIMessage@@YAXPAVFalconCampEventMessage@@@Z ; SendCampUIMessage
	add	esp, 4

; 455  : 
; 456  : 	// Send a CampEvent message for losses to the LOCAL MACHINE
; 457  : 	if (target->IsFlight() && losses)

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	$LN4@Process
	cmp	DWORD PTR _losses$[ebp], 0
	je	$LN4@Process

; 458  : 	{
; 459  : 		FalconCampEventMessage	*newEvent = new FalconCampEventMessage(target->Id(),FalconLocalGame);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T23[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN86@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN84@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1205[ebp], eax
	jmp	SHORT $LN85@Process
$LN84@Process:
	mov	DWORD PTR tv1205[ebp], 0
$LN85@Process:
	push	1
	mov	ecx, DWORD PTR tv1205[ebp]
	push	ecx
	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T23[ebp]
	call	??0FalconCampEventMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconCampEventMessage::FalconCampEventMessage
	mov	DWORD PTR tv1216[ebp], eax
	jmp	SHORT $LN87@Process
$LN86@Process:
	mov	DWORD PTR tv1216[ebp], 0
$LN87@Process:
	mov	eax, DWORD PTR tv1216[ebp]
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T16[ebp]
	mov	DWORD PTR _newEvent$27[ebp], ecx

; 460  : 		newEvent->dataBlock.team = GetEnemyTeam(target->GetTeam());

	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	mov	ecx, DWORD PTR _newEvent$27[ebp]
	mov	BYTE PTR [ecx+53], al

; 461  : 		newEvent->dataBlock.eventType = FalconCampEventMessage::campLosses;

	mov	edx, DWORD PTR _newEvent$27[ebp]
	mov	DWORD PTR [edx+48], 4

; 462  : 		target->GetLocation(&newEvent->dataBlock.data.xLoc,&newEvent->dataBlock.data.yLoc);

	mov	eax, DWORD PTR _newEvent$27[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _newEvent$27[ebp]
	add	ecx, 58					; 0000003aH
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 463  : 		newEvent->dataBlock.data.formatId = 1825;

	mov	edx, 1825				; 00000721H
	mov	eax, DWORD PTR _newEvent$27[ebp]
	mov	WORD PTR [eax+56], dx

; 464  : 		// 2002-02-21 ADDED BY S.G. If it's not spotted and it's NOT the player, use the 'Bandit' vehicle so we don't warn the player on the identity of the shooter
; 465  : 		if (!target->GetIdentified(shooter->GetTeam()) && FalconLocalSession->GetTeam() != target->GetTeam())

	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _shooter$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetIdentified@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetIdentified
	test	eax, eax
	jne	SHORT $LN3@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	esi, al
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	esi, eax
	je	SHORT $LN3@Process

; 466  : 			newEvent->dataBlock.data.textIds[0] = (short)(-1 * BANDIT_VEH);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, -2800				; fffff510H
	mov	eax, DWORD PTR _newEvent$27[ebp]
	mov	WORD PTR [eax+ecx+84], dx

; 467  : 		else

	jmp	SHORT $LN2@Process
$LN3@Process:

; 468  : 			// END OF ADDED SECTION 2002-02-21
; 469  : 			newEvent->dataBlock.data.textIds[0] = (short)(-1 * ((Unit)target)->GetVehicleID(0));

	push	0
	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	ecx, ax
	imul	ecx, -1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _newEvent$27[ebp]
	mov	WORD PTR [eax+edx+84], cx
$LN2@Process:

; 470  : 		newEvent->dataBlock.data.owners[0] = target->GetOwner();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	cx, al
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _newEvent$27[ebp]
	mov	WORD PTR [eax+edx+80], cx

; 471  : 		SendCampUIMessage(newEvent);

	mov	ecx, DWORD PTR _newEvent$27[ebp]
	push	ecx
	call	?SendCampUIMessage@@YAXPAVFalconCampEventMessage@@@Z ; SendCampUIMessage
	add	esp, 4
$LN4@Process:

; 472  : 	}
; 473  : 
; 474  : 	if(gMainHandler && FalconLocalSession->GetPlayerSquadron() && target->Id() == FalconLocalSession->GetPlayerSquadron()->GetUnitAirbaseID())

	cmp	DWORD PTR ?gMainHandler@@3PAVC_Handler@@A, 0 ; gMainHandler
	je	SHORT $LN1@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ; FalconSessionEntity::GetPlayerSquadron
	test	eax, eax
	je	SHORT $LN1@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ; FalconSessionEntity::GetPlayerSquadron
	mov	DWORD PTR tv1338[ebp], eax
	lea	edx, DWORD PTR $T10[ebp]
	push	edx
	mov	eax, DWORD PTR tv1338[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1338[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax
	push	eax
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Process

; 475  : 		PostMessage(FalconDisplay.appWin,FM_AIRBASE_ATTACK,0,0);

	push	0
	push	0
	push	1046					; 00000416H
	mov	eax, DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+108
	push	eax
	call	DWORD PTR __imp__PostMessageA@16
$LN1@Process:

; 476  : 
; 477  : 	return 0;

	xor	eax, eax
$LN72@Process:

; 478  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$0:
	mov	eax, DWORD PTR $T24[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$1:
	lea	ecx, DWORD PTR _wfm$30[ebp]
	jmp	??1FalconWeaponsFire@@UAE@XZ		; FalconWeaponsFire::~FalconWeaponsFire
__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$2:
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$3:
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$4:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Process@FalconCampWeaponsFire@@MAEHE@Z$5:
	mov	eax, DWORD PTR $T23[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Process@FalconCampWeaponsFire@@MAEHE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-428]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Process@FalconCampWeaponsFire@@MAEHE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Process@FalconCampWeaponsFire@@MAEHE@Z ENDP		; FalconCampWeaponsFire::Process
; Function compile flags: /Odtp
;	COMDAT ??0DATA_BLOCK@FalconCampWeaponsFire@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DATA_BLOCK@FalconCampWeaponsFire@@QAE@XZ PROC	; FalconCampWeaponsFire::DATA_BLOCK::DATA_BLOCK, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DATA_BLOCK@FalconCampWeaponsFire@@QAE@XZ ENDP	; FalconCampWeaponsFire::DATA_BLOCK::DATA_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = -4						; size = 4
_buf$ = 8						; size = 4
?Encode@FalconCampWeaponsFire@@UAEHPAPAE@Z PROC		; FalconCampWeaponsFire::Encode
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 	int size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 125  : 
; 126  : 	ShiAssert ( dataBlock.size >= 0 );
; 127  : 	memcpy (*buf, &dataBlock.shooterID, sizeof(VU_ID));					*buf += sizeof(VU_ID);						size += sizeof(VU_ID);

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 8
	mov	DWORD PTR _size$[ebp], eax

; 128  : 	memcpy (*buf, &dataBlock.fWeaponUID, sizeof(VU_ID));				*buf += sizeof(VU_ID);						size += sizeof(VU_ID);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 8
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 8
	mov	DWORD PTR _size$[ebp], ecx

; 129  : 	memcpy (*buf, dataBlock.weapon, sizeof dataBlock.weapon);	*buf += sizeof dataBlock.weapon;	size += sizeof dataBlock.weapon;

	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], edx

; 130  : 	memcpy (*buf, dataBlock.shots, sizeof dataBlock.shots);	*buf += sizeof dataBlock.shots;	size += sizeof dataBlock.shots;

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 8
	mov	DWORD PTR _size$[ebp], eax

; 131  : 	memcpy (*buf, &dataBlock.fPilotId, sizeof(uchar));					*buf += sizeof(uchar);						size += sizeof(uchar);		

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx

; 132  : 	memcpy (*buf, &dataBlock.dPilotId, sizeof(uchar));					*buf += sizeof(uchar);						size += sizeof(uchar);		

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 89					; 00000059H
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 1
	mov	DWORD PTR _size$[ebp], edx

; 133  : 	memcpy (*buf, &dataBlock.size, sizeof(ushort));						*buf += sizeof(ushort);						size += sizeof(ushort);		

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 90					; 0000005aH
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 2
	mov	DWORD PTR _size$[ebp], eax

; 134  : 	if (dataBlock.size)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+90]
	test	edx, edx
	je	SHORT $LN1@Encode

; 135  : 	{
; 136  : 		memcpy (*buf, dataBlock.data, dataBlock.size);					*buf += dataBlock.size;						size += dataBlock.size;		

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	mov	edx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+90]
	add	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN1@Encode:

; 137  : 	}
; 138  : 	size += FalconEvent::Encode (buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Encode@FalconEvent@@UAEHPAPAE@Z	; FalconEvent::Encode
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 139  : 
; 140  : 	ShiAssert (size == Size());
; 141  : 
; 142  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 143  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Encode@FalconCampWeaponsFire@@UAEHPAPAE@Z ENDP		; FalconCampWeaponsFire::Encode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_size$ = -16						; size = 4
_init$ = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_rem$ = 12						; size = 4
?Decode@FalconCampWeaponsFire@@UAEHPAPAEPAJ@Z PROC	; FalconCampWeaponsFire::Decode
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	long init = *rem;

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _init$[ebp], ecx

; 101  : 
; 102  : 	memcpychk (&dataBlock.shooterID, buf, sizeof(VU_ID), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 103  : 	memcpychk (&dataBlock.fWeaponUID, buf, sizeof(VU_ID), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 104  : 	memcpychk (dataBlock.weapon, buf, sizeof dataBlock.weapon, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 105  : 	memcpychk (dataBlock.shots, buf, sizeof dataBlock.shots, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 106  : 	memcpychk (&dataBlock.fPilotId, buf, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 107  : 	memcpychk (&dataBlock.dPilotId, buf, sizeof(uchar), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 89					; 00000059H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 108  : 	memcpychk (&dataBlock.size, buf, sizeof(ushort), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 90					; 0000005aH
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 109  : 
; 110  : 	//ShiAssert ( dataBlock.size >= 0 );
; 111  : 	if (dataBlock.size){

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+90]
	test	eax, eax
	je	SHORT $LN1@Decode

; 112  : 		dataBlock.data = new uchar[dataBlock.size];

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+90]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+92], ecx

; 113  : 		memcpychk (dataBlock.data, buf, dataBlock.size, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+90]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN1@Decode:

; 114  : 	}
; 115  : 	FalconEvent::Decode (buf, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Decode@FalconEvent@@UAEHPAPAEPAJ@Z	; FalconEvent::Decode

; 116  : 
; 117  : 	int size = init - *rem;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR _init$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _size$[ebp], edx

; 118  : 	ShiAssert (size == Size());
; 119  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 120  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Decode@FalconCampWeaponsFire@@UAEHPAPAEPAJ@Z ENDP	; FalconCampWeaponsFire::Decode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@FalconCampWeaponsFire@@UBEHXZ PROC		; FalconCampWeaponsFire::Size
; _this$ = ecx

; 89   : int FalconCampWeaponsFire::Size() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	ShiAssert ( dataBlock.size >= 0 );
; 91   : 	return	FalconEvent::Size() + 
; 92   : 		sizeof(VU_ID) + sizeof(VU_ID) + sizeof(dataBlock.weapon) +
; 93   : 		sizeof(dataBlock.shots) + sizeof(uchar) + sizeof(uchar) + sizeof(ushort) + dataBlock.size
; 94   : 	;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@FalconEvent@@UBEHXZ		; FalconEvent::Size
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+90]
	lea	eax, DWORD PTR [eax+edx+44]

; 95   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Size@FalconCampWeaponsFire@@UBEHXZ ENDP		; FalconCampWeaponsFire::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1FalconCampWeaponsFire@@UAE@XZ PROC			; FalconCampWeaponsFire::~FalconCampWeaponsFire
; _this$ = ecx

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FalconCampWeaponsFire@@6B@

; 85   : 	if (dataBlock.data)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN2@FalconCamp

; 86   : 		delete dataBlock.data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@FalconCamp:

; 87   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
	mov	esp, ebp
	pop	ebp
	ret	0
??1FalconCampWeaponsFire@@UAE@XZ ENDP			; FalconCampWeaponsFire::~FalconCampWeaponsFire
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 1
_senderid$ = 12						; size = 8
_target$ = 20						; size = 8
??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z PROC		; FalconCampWeaponsFire::FalconCampWeaponsFire
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	push	2
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@1@Z ; FalconEvent::FalconEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FalconCampWeaponsFire@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0DATA_BLOCK@FalconCampWeaponsFire@@QAE@XZ

; 75   : 	dataBlock.data = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 76   : 	dataBlock.fWeaponUID = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+60], edx

; 77   : 	dataBlock.fPilotId = 255;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH

; 78   : 	dataBlock.dPilotId = 255;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+89], 255			; 000000ffH

; 79   : 	dataBlock.size = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+90], dx

; 80   : 	type;
; 81   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
__ehhandler$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FalconCampWeaponsFire@@QAE@EVVU_ID@@0@Z ENDP		; FalconCampWeaponsFire::FalconCampWeaponsFire
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\campweaponfiremsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entityId$ = 8						; size = 8
_target$ = 16						; size = 4
_loopback$ = 20						; size = 1
??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z PROC ; FalconCampWeaponsFire::FalconCampWeaponsFire
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _loopback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entityId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _entityId$[ebp]
	push	eax
	push	2
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconEvent::FalconEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FalconCampWeaponsFire@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0DATA_BLOCK@FalconCampWeaponsFire@@QAE@XZ

; 66   : 	dataBlock.data = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 67   : 	dataBlock.fWeaponUID = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+60], edx

; 68   : 	dataBlock.fPilotId = 255;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+88], 255			; 000000ffH

; 69   : 	dataBlock.dPilotId = 255;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+89], 255			; 000000ffH

; 70   : 	dataBlock.size = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+90], dx

; 71   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
__ehhandler$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FalconCampWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ENDP ; FalconCampWeaponsFire::FalconCampWeaponsFire
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?EntityId@VuMessage@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?EntityId@VuMessage@@QBE?AVVU_ID@@XZ PROC		; VuMessage::EntityId, COMDAT
; _this$ = ecx

; 157  : 	VU_ID EntityId() const { return entityId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?EntityId@VuMessage@@QBE?AVVU_ID@@XZ ENDP		; VuMessage::EntityId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
