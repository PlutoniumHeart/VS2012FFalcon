; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\rules.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?RuleMode@@3W4RulesModes@@A			; RuleMode
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
_BSS	SEGMENT
?RuleMode@@3W4RulesModes@@A DD 01H DUP (?)		; RuleMode
_BSS	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
_DATA	SEGMENT
_PwdMask DB	'Blood makes the grass grow, kill, kill, kill!', 00H
	ORG $+2
_PwdMask2 DB	'ojodp^&SANDsfsl,[poe5487wqer1]@&$N', 00H
_DATA	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	__tcscmp
PUBLIC	?EncryptPwd@RulesClass@@AAEXXZ			; RulesClass::EncryptPwd
PUBLIC	??0RulesClass@@QAE@XZ				; RulesClass::RulesClass
PUBLIC	?Initialize@RulesClass@@QAEXXZ			; RulesClass::Initialize
PUBLIC	?LoadRules@RulesClass@@QAEHPAD@Z		; RulesClass::LoadRules
PUBLIC	?SaveRules@RulesClass@@QAEHPAD@Z		; RulesClass::SaveRules
PUBLIC	?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z	; RulesClass::LoadRules
PUBLIC	?CheckPassword@RulesClass@@QAEHPAD@Z		; RulesClass::CheckPassword
PUBLIC	?SetPassword@RulesClass@@QAEHPAD@Z		; RulesClass::SetPassword
PUBLIC	?GetPassword@RulesClass@@QAEHPAD@Z		; RulesClass::GetPassword
PUBLIC	?LoadAllRules@@YAHPAD@Z				; LoadAllRules
PUBLIC	?gRules@@3PAVRulesClass@@A			; gRules
PUBLIC	??_C@_0BB@FCBNOHJF@?$CFs?2config?2?$CFs?4rul?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0BN@HLMPMJPE@Couldn?8t?5open?5?$CFs?5rules?5file?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@KJBKFMEC@?$CFs?2Config?2default?4rul?$AA@ ; `string'
PUBLIC	??_C@_0BN@MAIFKEF@Couldn?8t?5open?5default?5rules?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@CLHBCPNC@?$CFs?8s?5rules?5are?5in?5old?5file?5forma@ ; `string'
PUBLIC	??_C@_0CA@BJAAHOFD@Failed?5to?5read?5?$CFs?8s?5rules?5file?6?$AA@ ; `string'
PUBLIC	??_C@_0L@KOAENHLO@?$CFs?2atc?4ini?$AA@		; `string'
PUBLIC	??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@		; `string'
PUBLIC	??_C@_03ENPCIFBB@ATC?$AA@			; `string'
PUBLIC	??_C@_0L@JHOLIFHH@AIPullTime?$AA@		; `string'
PUBLIC	??_C@_0L@GAOOHNDJ@AIPatience?$AA@		; `string'
PUBLIC	??_C@_0M@BDPJAJGF@ATCPatience?$AA@		; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_0BE@MACDBCFI@Couldn?8t?5save?5rules?$AA@	; `string'
PUBLIC	__real@40a00000
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__mbscmp:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	_MonoPrint:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?FalconDataDirectory@@3PADA:BYTE		; FalconDataDirectory
EXTRN	?FalconCampaignSaveDirectory@@3PADA:BYTE	; FalconCampaignSaveDirectory
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

?gRules@@3PAVRulesClass@@A DB 0130H DUP (?)		; gRules
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT ??_C@_0BE@MACDBCFI@Couldn?8t?5save?5rules?$AA@
CONST	SEGMENT
??_C@_0BE@MACDBCFI@Couldn?8t?5save?5rules?$AA@ DB 'Couldn''t save rules', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
CONST	SEGMENT
??_C@_0M@BDPJAJGF@ATCPatience?$AA@ DB 'ATCPatience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
CONST	SEGMENT
??_C@_0L@GAOOHNDJ@AIPatience?$AA@ DB 'AIPatience', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
CONST	SEGMENT
??_C@_0L@JHOLIFHH@AIPullTime?$AA@ DB 'AIPullTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENPCIFBB@ATC?$AA@
CONST	SEGMENT
??_C@_03ENPCIFBB@ATC?$AA@ DB 'ATC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
CONST	SEGMENT
??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@ DB 'PlayerBumpTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOAENHLO@?$CFs?2atc?4ini?$AA@
CONST	SEGMENT
??_C@_0L@KOAENHLO@?$CFs?2atc?4ini?$AA@ DB '%s\atc.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BJAAHOFD@Failed?5to?5read?5?$CFs?8s?5rules?5file?6?$AA@
CONST	SEGMENT
??_C@_0CA@BJAAHOFD@Failed?5to?5read?5?$CFs?8s?5rules?5file?6?$AA@ DB 'Fai'
	DB	'led to read %s''s rules file', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CLHBCPNC@?$CFs?8s?5rules?5are?5in?5old?5file?5forma@
CONST	SEGMENT
??_C@_0CD@CLHBCPNC@?$CFs?8s?5rules?5are?5in?5old?5file?5forma@ DB '%s''s '
	DB	'rules are in old file format', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MAIFKEF@Couldn?8t?5open?5default?5rules?6?$AA@
CONST	SEGMENT
??_C@_0BN@MAIFKEF@Couldn?8t?5open?5default?5rules?6?$AA@ DB 'Couldn''t op'
	DB	'en default rules', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KJBKFMEC@?$CFs?2Config?2default?4rul?$AA@
CONST	SEGMENT
??_C@_0BG@KJBKFMEC@?$CFs?2Config?2default?4rul?$AA@ DB '%s\Config\default'
	DB	'.rul', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HLMPMJPE@Couldn?8t?5open?5?$CFs?5rules?5file?6?$AA@
CONST	SEGMENT
??_C@_0BN@HLMPMJPE@Couldn?8t?5open?5?$CFs?5rules?5file?6?$AA@ DB 'Couldn'''
	DB	't open %s rules file', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCBNOHJF@?$CFs?2config?2?$CFs?4rul?$AA@
CONST	SEGMENT
??_C@_0BB@FCBNOHJF@?$CFs?2config?2?$CFs?4rul?$AA@ DB '%s\config\%s.rul', 00H ; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gRules$initializer$ DD FLAT:??__EgRules@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
;	COMDAT ??__EgRules@@YAXXZ
text$yc	SEGMENT
??__EgRules@@YAXXZ PROC					; `dynamic initializer for 'gRules'', COMDAT

; 4    : RulesClass gRules[rNUM_MODES];

	push	ebp
	mov	ebp, esp
	push	OFFSET ??0RulesClass@@QAE@XZ		; RulesClass::RulesClass
	push	4
	push	76					; 0000004cH
	push	OFFSET ?gRules@@3PAVRulesClass@@A	; gRules
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	pop	ebp
	ret	0
??__EgRules@@YAXXZ ENDP					; `dynamic initializer for 'gRules''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_size$ = -860						; size = 4
_success$ = -856					; size = 4
tv192 = -852						; size = 4
tv252 = -848						; size = 4
tv162 = -844						; size = 4
tv222 = -840						; size = 4
_fp$ = -836						; size = 4
_i$1 = -832						; size = 4
_tempRules$ = -828					; size = 304
_path$ = -524						; size = 260
_dataFileName$2 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LoadAllRules@@YAHPAD@Z PROC				; LoadAllRules

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 860				; 0000035cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 9    : 	size_t		success = 0;

	mov	DWORD PTR _success$[ebp], 0

; 10   : 	_TCHAR		path[_MAX_PATH];
; 11   : 	long		size;
; 12   : 	FILE *fp;
; 13   : 
; 14   : 	_stprintf(path,_T("%s\\config\\%s.rul"),FalconDataDirectory,filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BB@FCBNOHJF@?$CFs?2config?2?$CFs?4rul?$AA@
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 15   : 	
; 16   : 	fp = _tfopen(path,_T("rb"));

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 17   : 	if(!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN7@LoadAllRul

; 18   : 	{
; 19   : 		MonoPrint(_T("Couldn't open %s rules file\n"),filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@HLMPMJPE@Couldn?8t?5open?5?$CFs?5rules?5file?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 20   : 		_stprintf(path,_T("%s\\Config\\default.rul"),FalconDataDirectory);

	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BG@KJBKFMEC@?$CFs?2Config?2default?4rul?$AA@
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 21   : 		fp = _tfopen(path,"rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 22   : 		if(!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN7@LoadAllRul

; 23   : 		{
; 24   : 			MonoPrint(_T("Couldn't open default rules\n"),filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@MAIFKEF@Couldn?8t?5open?5default?5rules?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 25   : 			return FALSE;

	xor	eax, eax
	jmp	$LN8@LoadAllRul
$LN7@LoadAllRul:

; 26   : 		}
; 27   : 	}
; 28   : 	
; 29   : 	fseek(fp,0,SEEK_END);

	push	2
	push	0
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fseek
	add	esp, 12					; 0000000cH

; 30   : 	size = ftell(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_ftell
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 31   : 	fseek(fp,0,SEEK_SET);

	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 32   : 
; 33   : 	if(size != sizeof(RulesStruct) * rNUM_MODES)

	cmp	DWORD PTR _size$[ebp], 304		; 00000130H
	je	SHORT $LN5@LoadAllRul

; 34   : 	{
; 35   : 		MonoPrint(_T("%s's rules are in old file format\n"),filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@CLHBCPNC@?$CFs?8s?5rules?5are?5in?5old?5file?5forma@
	call	_MonoPrint
	add	esp, 8

; 36   : 		return FALSE;

	xor	eax, eax
	jmp	$LN8@LoadAllRul
$LN5@LoadAllRul:

; 37   : 	}
; 38   : 
; 39   : 
; 40   : 	RulesClass tempRules[rNUM_MODES];

	push	OFFSET ??0RulesClass@@QAE@XZ		; RulesClass::RulesClass
	push	4
	push	76					; 0000004cH
	lea	edx, DWORD PTR _tempRules$[ebp]
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 41   : 
; 42   : 	success = fread(&tempRules, sizeof(RulesStruct), rNUM_MODES, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	4
	push	76					; 0000004cH
	lea	ecx, DWORD PTR _tempRules$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
	mov	DWORD PTR _success$[ebp], eax

; 43   : 	fclose(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4

; 44   : 	if(success != rNUM_MODES)

	cmp	DWORD PTR _success$[ebp], 4
	je	SHORT $LN4@LoadAllRul

; 45   : 	{
; 46   : 		MonoPrint(_T("Failed to read %s's rules file\n"),filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@BJAAHOFD@Failed?5to?5read?5?$CFs?8s?5rules?5file?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 47   : 		//Initialize();
; 48   : 		return FALSE;

	xor	eax, eax
	jmp	$LN8@LoadAllRul
$LN4@LoadAllRul:

; 49   : 	}
; 50   : 
; 51   : 	for(int i = 0; i < rNUM_MODES;i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@LoadAllRul
$LN2@LoadAllRul:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN3@LoadAllRul:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	$LN1@LoadAllRul

; 52   : 	{
; 53   : 		char dataFileName[_MAX_PATH];
; 54   : 		sprintf (dataFileName, "%s\\atc.ini", FalconCampaignSaveDirectory);

	push	OFFSET ?FalconCampaignSaveDirectory@@3PADA ; FalconCampaignSaveDirectory
	push	OFFSET ??_C@_0L@KOAENHLO@?$CFs?2atc?4ini?$AA@
	lea	edx, DWORD PTR _dataFileName$2[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 55   : 		tempRules[i].BumpTimer		= max(0, GetPrivateProfileInt("ATC", "PlayerBumpTime", 10, dataFileName)); 	

	lea	eax, DWORD PTR _dataFileName$2[ebp]
	push	eax
	push	10					; 0000000aH
	push	OFFSET ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN10@LoadAllRul
	mov	DWORD PTR tv162[ebp], 0
	jmp	SHORT $LN11@LoadAllRul
$LN10@LoadAllRul:
	lea	ecx, DWORD PTR _dataFileName$2[ebp]
	push	ecx
	push	10					; 0000000aH
	push	OFFSET ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv162[ebp], eax
$LN11@LoadAllRul:
	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR tv162[ebp]
	mov	DWORD PTR _tempRules$[ebp+edx+56], eax

; 56   : 		tempRules[i].BumpTimer		*= 60000;

	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _tempRules$[ebp+ecx+56]
	imul	edx, 60000				; 0000ea60H
	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+eax+56], edx

; 57   : 		tempRules[i].AiPullTime		= max(0, GetPrivateProfileInt("ATC", "AIPullTime", 20, dataFileName)); 	

	lea	ecx, DWORD PTR _dataFileName$2[ebp]
	push	ecx
	push	20					; 00000014H
	push	OFFSET ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN12@LoadAllRul
	mov	DWORD PTR tv192[ebp], 0
	jmp	SHORT $LN13@LoadAllRul
$LN12@LoadAllRul:
	lea	edx, DWORD PTR _dataFileName$2[ebp]
	push	edx
	push	20					; 00000014H
	push	OFFSET ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv192[ebp], eax
$LN13@LoadAllRul:
	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR tv192[ebp]
	mov	DWORD PTR _tempRules$[ebp+eax+60], ecx

; 58   : 		tempRules[i].AiPullTime		*= 60000;

	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _tempRules$[ebp+edx+60]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+ecx+60], eax

; 59   : 		tempRules[i].AiPatience		= max(0, GetPrivateProfileInt("ATC", "AIPatience", 120, dataFileName)); 	

	lea	edx, DWORD PTR _dataFileName$2[ebp]
	push	edx
	push	120					; 00000078H
	push	OFFSET ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN14@LoadAllRul
	mov	DWORD PTR tv222[ebp], 0
	jmp	SHORT $LN15@LoadAllRul
$LN14@LoadAllRul:
	lea	eax, DWORD PTR _dataFileName$2[ebp]
	push	eax
	push	120					; 00000078H
	push	OFFSET ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv222[ebp], eax
$LN15@LoadAllRul:
	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR tv222[ebp]
	mov	DWORD PTR _tempRules$[ebp+ecx+64], edx

; 60   : 		tempRules[i].AiPatience		*= 1000;

	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _tempRules$[ebp+eax+64]
	imul	ecx, 1000				; 000003e8H
	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+edx+64], ecx

; 61   : 		tempRules[i].AtcPatience	= max(0, GetPrivateProfileInt("ATC", "ATCPatience", 180, dataFileName)); 	

	lea	eax, DWORD PTR _dataFileName$2[ebp]
	push	eax
	push	180					; 000000b4H
	push	OFFSET ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN16@LoadAllRul
	mov	DWORD PTR tv252[ebp], 0
	jmp	SHORT $LN17@LoadAllRul
$LN16@LoadAllRul:
	lea	ecx, DWORD PTR _dataFileName$2[ebp]
	push	ecx
	push	180					; 000000b4H
	push	OFFSET ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv252[ebp], eax
$LN17@LoadAllRul:
	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR tv252[ebp]
	mov	DWORD PTR _tempRules$[ebp+edx+68], eax

; 62   : 		tempRules[i].AtcPatience	*= 1000;

	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _tempRules$[ebp+ecx+68]
	imul	edx, 1000				; 000003e8H
	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+eax+68], edx

; 63   : 	}

	jmp	$LN2@LoadAllRul
$LN1@LoadAllRul:

; 64   : 	memcpy(&gRules,&tempRules,sizeof(RulesStruct)*rNUM_MODES);

	push	304					; 00000130H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	push	ecx
	push	OFFSET ?gRules@@3PAVRulesClass@@A	; gRules
	call	_memcpy
	add	esp, 12					; 0000000cH

; 65   : 	return TRUE;

	mov	eax, 1
$LN8@LoadAllRul:

; 66   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadAllRules@@YAHPAD@Z ENDP				; LoadAllRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Pwd$ = 8						; size = 4
?GetPassword@RulesClass@@QAEHPAD@Z PROC			; RulesClass::GetPassword
; _this$ = ecx

; 249  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  : 	//EncryptPwd();
; 251  : 	_tcscpy( Pwd, Password );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Pwd$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 252  : 	//EncryptPwd();
; 253  : 	return TRUE;

	mov	eax, 1

; 254  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPassword@RulesClass@@QAEHPAD@Z ENDP			; RulesClass::GetPassword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newPassword$ = 8					; size = 4
?SetPassword@RulesClass@@QAEHPAD@Z PROC			; RulesClass::SetPassword
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 	if(_tcslen(newPassword) <= RUL_PW_LEN) 

	mov	eax, DWORD PTR _newPassword$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	cmp	eax, 20					; 00000014H
	ja	SHORT $LN1@SetPasswor

; 239  : 	{
; 240  : 		_tcscpy(Password,newPassword);

	mov	ecx, DWORD PTR _newPassword$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 241  : 		//EncryptPwd();
; 242  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@SetPasswor
$LN1@SetPasswor:

; 243  : 	}
; 244  : 
; 245  : 	return FALSE;

	xor	eax, eax
$LN2@SetPasswor:

; 246  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPassword@RulesClass@@QAEHPAD@Z ENDP			; RulesClass::SetPassword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Pwd$ = 8						; size = 4
?CheckPassword@RulesClass@@QAEHPAD@Z PROC		; RulesClass::CheckPassword
; _this$ = ecx

; 219  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 220  : 	//if(Pilot.Password[0] == 0)
; 221  : 		//return TRUE;
; 222  : 
; 223  : 	//EncryptPwd();
; 224  : 	if( _tcscmp( Pwd, Password) )

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Pwd$[ebp]
	push	ecx
	call	__tcscmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@CheckPassw

; 225  : 	{
; 226  : 		//EncryptPwd();
; 227  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@CheckPassw

; 228  : 	}
; 229  : 	else

	jmp	SHORT $LN3@CheckPassw
$LN2@CheckPassw:

; 230  : 	{
; 231  : 		//EncryptPwd();
; 232  : 		return TRUE;

	mov	eax, 1
$LN3@CheckPassw:

; 233  : 	}
; 234  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CheckPassword@RulesClass@@QAEHPAD@Z ENDP		; RulesClass::CheckPassword
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rules$ = 8						; size = 4
?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z PROC	; RulesClass::LoadRules
; _this$ = ecx

; 159  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 	if(rules)

	cmp	DWORD PTR _rules$[ebp], 0
	je	SHORT $LN2@LoadRules

; 161  : 		memcpy(this,rules,sizeof(RulesStruct));

	push	76					; 0000004cH
	mov	eax, DWORD PTR _rules$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@LoadRules:

; 162  : 	/*
; 163  : 	_tcscpy(Password,rules->Password);
; 164  : 	MaxPlayers			= rules->MaxPlayers;
; 165  : 	ObjMagnification	= rules->ObjMagnification;	
; 166  : 	SimFlags			= rules->SimFlags;					// Sim flags
; 167  : 	SimFlightModel		= rules->SimFlightModel;			// Flight model type
; 168  : 	SimWeaponEffect		= rules->SimWeaponEffect;
; 169  : 	SimAvionicsType		= rules->SimAvionicsType;
; 170  : 	SimAutopilotType	= rules->SimAutopilotType;
; 171  : 	SimAirRefuelingMode	= rules->SimAirRefuelingMode;				
; 172  : 	SimPadlockMode		= rules->SimPadlockMode;
; 173  : 	GeneralFlags		= rules->GeneralFlags;*/
; 174  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z ENDP	; RulesClass::LoadRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -276						; size = 4
_success$ = -272					; size = 4
_fp$ = -268						; size = 4
_path$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?SaveRules@RulesClass@@QAEHPAD@Z PROC			; RulesClass::SaveRules
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 	FILE		*fp;
; 179  : 	_TCHAR		path[_MAX_PATH];
; 180  : 	size_t		success = 0;

	mov	DWORD PTR _success$[ebp], 0

; 181  : 	
; 182  : 	_stprintf(path,_T("%s\\config\\%s.rul"),FalconDataDirectory,filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BB@FCBNOHJF@?$CFs?2config?2?$CFs?4rul?$AA@
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 183  : 		
; 184  : 	if((fp = _tfopen(path,"wb")) == NULL)

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN2@SaveRules

; 185  : 	{
; 186  : 		MonoPrint(_T("Couldn't save rules"));

	push	OFFSET ??_C@_0BE@MACDBCFI@Couldn?8t?5save?5rules?$AA@
	call	_MonoPrint
	add	esp, 4

; 187  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@SaveRules
$LN2@SaveRules:

; 188  : 	}
; 189  : 	success = fwrite(gRules, sizeof(RulesStruct), rNUM_MODES, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	4
	push	76					; 0000004cH
	push	OFFSET ?gRules@@3PAVRulesClass@@A	; gRules
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	DWORD PTR _success$[ebp], eax

; 190  : 	fclose(fp);

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4

; 191  : 	if(success != rNUM_MODES)

	cmp	DWORD PTR _success$[ebp], 4
	je	SHORT $LN1@SaveRules

; 192  : 	{
; 193  : 		MonoPrint(_T("Couldn't save rules"));

	push	OFFSET ??_C@_0BE@MACDBCFI@Couldn?8t?5save?5rules?$AA@
	call	_MonoPrint
	add	esp, 4

; 194  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@SaveRules
$LN1@SaveRules:

; 195  : 	}
; 196  : 	
; 197  : 	return TRUE;

	mov	eax, 1
$LN3@SaveRules:

; 198  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?SaveRules@RulesClass@@QAEHPAD@Z ENDP			; RulesClass::SaveRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_size$ = -860						; size = 4
tv191 = -856						; size = 4
_this$ = -852						; size = 4
tv161 = -848						; size = 4
tv221 = -844						; size = 4
_success$ = -840					; size = 4
tv251 = -836						; size = 4
_fp$ = -832						; size = 4
_tempRules$ = -828					; size = 304
_path$ = -524						; size = 260
_dataFileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LoadRules@RulesClass@@QAEHPAD@Z PROC			; RulesClass::LoadRules
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 860				; 0000035cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	size_t		success = 0;

	mov	DWORD PTR _success$[ebp], 0

; 102  : 	_TCHAR		path[_MAX_PATH];
; 103  : 	long		size;
; 104  : 	FILE *fp;
; 105  : 
; 106  : 	_stprintf(path,_T("%s\\config\\%s.rul"),FalconDataDirectory,filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BB@FCBNOHJF@?$CFs?2config?2?$CFs?4rul?$AA@
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 107  : 	
; 108  : 	fp = _tfopen(path,_T("rb"));

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 109  : 	if(!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN4@LoadRules

; 110  : 	{
; 111  : 		MonoPrint(_T("Couldn't open %s rules file\n"),filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@HLMPMJPE@Couldn?8t?5open?5?$CFs?5rules?5file?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 112  : 		_stprintf(path,_T("%s\\Config\\default.rul"),FalconDataDirectory);

	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BG@KJBKFMEC@?$CFs?2Config?2default?4rul?$AA@
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 113  : 		fp = _tfopen(path,"rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 114  : 		if(!fp)

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN4@LoadRules

; 115  : 		{
; 116  : 			MonoPrint(_T("Couldn't open default rules\n"),filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@MAIFKEF@Couldn?8t?5open?5default?5rules?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 117  : 			Initialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@RulesClass@@QAEXXZ		; RulesClass::Initialize

; 118  : 			return FALSE;

	xor	eax, eax
	jmp	$LN5@LoadRules
$LN4@LoadRules:

; 119  : 		}
; 120  : 	}
; 121  : 	
; 122  : 	fseek(fp,0,SEEK_END);

	push	2
	push	0
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fseek
	add	esp, 12					; 0000000cH

; 123  : 	size = ftell(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_ftell
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 124  : 	fseek(fp,0,SEEK_SET);

	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 125  : 
; 126  : 	if(size != sizeof(RulesStruct) * rNUM_MODES)

	cmp	DWORD PTR _size$[ebp], 304		; 00000130H
	je	SHORT $LN2@LoadRules

; 127  : 	{
; 128  : 		MonoPrint(_T("%s's rules are in old file format\n"),filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@CLHBCPNC@?$CFs?8s?5rules?5are?5in?5old?5file?5forma@
	call	_MonoPrint
	add	esp, 8

; 129  : 		return FALSE;

	xor	eax, eax
	jmp	$LN5@LoadRules
$LN2@LoadRules:

; 130  : 	}
; 131  : 
; 132  : 
; 133  : 	RulesClass tempRules[rNUM_MODES];

	push	OFFSET ??0RulesClass@@QAE@XZ		; RulesClass::RulesClass
	push	4
	push	76					; 0000004cH
	lea	edx, DWORD PTR _tempRules$[ebp]
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 134  : 
; 135  : 	success = fread(&tempRules, sizeof(RulesStruct), rNUM_MODES, fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	4
	push	76					; 0000004cH
	lea	ecx, DWORD PTR _tempRules$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H
	mov	DWORD PTR _success$[ebp], eax

; 136  : 	fclose(fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4

; 137  : 	if(success != rNUM_MODES)

	cmp	DWORD PTR _success$[ebp], 4
	je	SHORT $LN1@LoadRules

; 138  : 	{
; 139  : 		MonoPrint(_T("Failed to read %s's rules file\n"),filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@BJAAHOFD@Failed?5to?5read?5?$CFs?8s?5rules?5file?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 140  : 		//Initialize();
; 141  : 		return FALSE;

	xor	eax, eax
	jmp	$LN5@LoadRules
$LN1@LoadRules:

; 142  : 	}
; 143  : 	char dataFileName[_MAX_PATH];
; 144  : 	sprintf (dataFileName, "%s\\atc.ini", FalconCampaignSaveDirectory);

	push	OFFSET ?FalconCampaignSaveDirectory@@3PADA ; FalconCampaignSaveDirectory
	push	OFFSET ??_C@_0L@KOAENHLO@?$CFs?2atc?4ini?$AA@
	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 145  : 	tempRules[RuleMode].BumpTimer		= max(0, GetPrivateProfileInt("ATC", "PlayerBumpTime", 10, dataFileName)); 	

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	10					; 0000000aH
	push	OFFSET ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN7@LoadRules
	mov	DWORD PTR tv161[ebp], 0
	jmp	SHORT $LN8@LoadRules
$LN7@LoadRules:
	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	10					; 0000000aH
	push	OFFSET ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv161[ebp], eax
$LN8@LoadRules:
	mov	ecx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR tv161[ebp]
	mov	DWORD PTR _tempRules$[ebp+ecx+56], edx

; 146  : 	tempRules[RuleMode].BumpTimer		*= 60000;

	mov	eax, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _tempRules$[ebp+eax+56]
	imul	ecx, 60000				; 0000ea60H
	mov	edx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	edx, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+edx+56], ecx

; 147  : 	tempRules[RuleMode].AiPullTime		= max(0, GetPrivateProfileInt("ATC", "AIPullTime", 20, dataFileName)); 	

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	20					; 00000014H
	push	OFFSET ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN9@LoadRules
	mov	DWORD PTR tv191[ebp], 0
	jmp	SHORT $LN10@LoadRules
$LN9@LoadRules:
	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	20					; 00000014H
	push	OFFSET ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv191[ebp], eax
$LN10@LoadRules:
	mov	edx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR tv191[ebp]
	mov	DWORD PTR _tempRules$[ebp+edx+60], eax

; 148  : 	tempRules[RuleMode].AiPullTime		*= 60000;

	mov	ecx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _tempRules$[ebp+ecx+60]
	imul	edx, 60000				; 0000ea60H
	mov	eax, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	eax, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+eax+60], edx

; 149  : 	tempRules[RuleMode].AiPatience		= max(0, GetPrivateProfileInt("ATC", "AIPatience", 120, dataFileName)); 	

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	120					; 00000078H
	push	OFFSET ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN11@LoadRules
	mov	DWORD PTR tv221[ebp], 0
	jmp	SHORT $LN12@LoadRules
$LN11@LoadRules:
	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	120					; 00000078H
	push	OFFSET ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv221[ebp], eax
$LN12@LoadRules:
	mov	eax, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR tv221[ebp]
	mov	DWORD PTR _tempRules$[ebp+eax+64], ecx

; 150  : 	tempRules[RuleMode].AiPatience		*= 1000;

	mov	edx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _tempRules$[ebp+edx+64]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	ecx, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+ecx+64], eax

; 151  : 	tempRules[RuleMode].AtcPatience		= max(0, GetPrivateProfileInt("ATC", "ATCPatience", 180, dataFileName)); 	

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	180					; 000000b4H
	push	OFFSET ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN13@LoadRules
	mov	DWORD PTR tv251[ebp], 0
	jmp	SHORT $LN14@LoadRules
$LN13@LoadRules:
	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	180					; 000000b4H
	push	OFFSET ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv251[ebp], eax
$LN14@LoadRules:
	mov	ecx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR tv251[ebp]
	mov	DWORD PTR _tempRules$[ebp+ecx+68], edx

; 152  : 	tempRules[RuleMode].AtcPatience		*= 1000;

	mov	eax, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _tempRules$[ebp+eax+68]
	imul	ecx, 1000				; 000003e8H
	mov	edx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	edx, 76					; 0000004cH
	mov	DWORD PTR _tempRules$[ebp+edx+68], ecx

; 153  : 
; 154  : 	memcpy(this,&(tempRules[RuleMode]),sizeof(RulesStruct));

	push	76					; 0000004cH
	mov	eax, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	eax, 76					; 0000004cH
	lea	ecx, DWORD PTR _tempRules$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 155  : 	return TRUE;

	mov	eax, 1
$LN5@LoadRules:

; 156  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadRules@RulesClass@@QAEHPAD@Z ENDP			; RulesClass::LoadRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
tv173 = -284						; size = 4
tv221 = -280						; size = 4
tv245 = -276						; size = 4
tv197 = -272						; size = 4
_this$ = -268						; size = 4
_dataFileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?Initialize@RulesClass@@QAEXXZ PROC			; RulesClass::Initialize
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	memset(Password,0,sizeof(_TCHAR)*RUL_PW_LEN);

	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 76   : 	MaxPlayers			= 16;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 16			; 00000010H

; 77   : 	ObjMagnification	= 5;	

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [edx+24], xmm0

; 78   : 	SimFlags			= SIM_RULES_FLAGS;		// Sim flags

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 631			; 00000277H

; 79   : 	SimFlightModel		= FMSimplified;			// Flight model type

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 80   : 	SimWeaponEffect		= WEExaggerated;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], 0

; 81   : 	SimAvionicsType		= ATEasy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 82   : 	SimAutopilotType	= APIntelligent;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 83   : 	SimAirRefuelingMode	= ARSimplistic;				

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], 3

; 84   : 	SimPadlockMode		= PDEnhanced;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 85   : 	GeneralFlags		= GEN_RULES_FLAGS;	

	mov	ecx, 33					; 00000021H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+72], cx

; 86   : 
; 87   : 	char dataFileName[_MAX_PATH];
; 88   : 	sprintf (dataFileName, "%s\\atc.ini", FalconCampaignSaveDirectory);

	push	OFFSET ?FalconCampaignSaveDirectory@@3PADA ; FalconCampaignSaveDirectory
	push	OFFSET ??_C@_0L@KOAENHLO@?$CFs?2atc?4ini?$AA@
	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 89   : 	BumpTimer		= max(0, GetPrivateProfileInt("ATC", "PlayerBumpTime", 10, dataFileName)); 	

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	10					; 0000000aH
	push	OFFSET ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN3@Initialize
	mov	DWORD PTR tv173[ebp], 0
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	10					; 0000000aH
	push	OFFSET ??_C@_0P@JPILFDMN@PlayerBumpTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv173[ebp], eax
$LN4@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv173[ebp]
	mov	DWORD PTR [eax+56], ecx

; 90   : 	BumpTimer		*= 60000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	imul	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 91   : 	AiPullTime		= max(0, GetPrivateProfileInt("ATC", "AIPullTime", 20, dataFileName)); 	

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	20					; 00000014H
	push	OFFSET ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN5@Initialize
	mov	DWORD PTR tv197[ebp], 0
	jmp	SHORT $LN6@Initialize
$LN5@Initialize:
	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	20					; 00000014H
	push	OFFSET ??_C@_0L@JHOLIFHH@AIPullTime?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv197[ebp], eax
$LN6@Initialize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv197[ebp]
	mov	DWORD PTR [ecx+60], edx

; 92   : 	AiPullTime		*= 60000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	imul	ecx, 60000				; 0000ea60H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 93   : 	AiPatience		= max(0, GetPrivateProfileInt("ATC", "AIPatience", 120, dataFileName)); 	

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	120					; 00000078H
	push	OFFSET ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN7@Initialize
	mov	DWORD PTR tv221[ebp], 0
	jmp	SHORT $LN8@Initialize
$LN7@Initialize:
	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	120					; 00000078H
	push	OFFSET ??_C@_0L@GAOOHNDJ@AIPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv221[ebp], eax
$LN8@Initialize:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv221[ebp]
	mov	DWORD PTR [edx+64], eax

; 94   : 	AiPatience		*= 1000;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	imul	edx, 1000				; 000003e8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], edx

; 95   : 	AtcPatience		= max(0, GetPrivateProfileInt("ATC", "ATCPatience", 180, dataFileName)); 	

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	180					; 000000b4H
	push	OFFSET ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	test	eax, eax
	jae	SHORT $LN9@Initialize
	mov	DWORD PTR tv245[ebp], 0
	jmp	SHORT $LN10@Initialize
$LN9@Initialize:
	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	180					; 000000b4H
	push	OFFSET ??_C@_0M@BDPJAJGF@ATCPatience?$AA@
	push	OFFSET ??_C@_03ENPCIFBB@ATC?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv245[ebp], eax
$LN10@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv245[ebp]
	mov	DWORD PTR [eax+68], ecx

; 96   : 	AtcPatience		*= 1000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	imul	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 97   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Initialize@RulesClass@@QAEXXZ ENDP			; RulesClass::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RulesClass@@QAE@XZ PROC				; RulesClass::RulesClass
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	Initialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@RulesClass@@QAEXXZ		; RulesClass::Initialize

; 71   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0RulesClass@@QAE@XZ ENDP				; RulesClass::RulesClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\rules.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_ptr$ = -4						; size = 4
?EncryptPwd@RulesClass@@AAEXXZ PROC			; RulesClass::EncryptPwd
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	int i;
; 206  : 	_TCHAR *ptr;
; 207  : 
; 208  : 	ptr=Password;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax

; 209  : 
; 210  : 	for(i=0;i<RUL_PW_LEN;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@EncryptPwd
$LN2@EncryptPwd:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@EncryptPwd:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN4@EncryptPwd

; 211  : 	{
; 212  : 		*ptr ^= PwdMask[i % strlen(PwdMask)];

	push	OFFSET _PwdMask
	call	_strlen
	add	esp, 4
	mov	ecx, eax
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	ecx
	movsx	edx, BYTE PTR _PwdMask[edx]
	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [edx], cl

; 213  : 		*ptr ^= PwdMask2[i % strlen(PwdMask2)];

	push	OFFSET _PwdMask2
	call	_strlen
	add	esp, 4
	mov	ecx, eax
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	ecx
	movsx	edx, BYTE PTR _PwdMask2[edx]
	mov	eax, DWORD PTR _ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [edx], cl

; 214  : 		ptr++;

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax

; 215  : 	}

	jmp	SHORT $LN2@EncryptPwd
$LN4@EncryptPwd:

; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EncryptPwd@RulesClass@@AAEXXZ ENDP			; RulesClass::EncryptPwd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcscmp PROC						; COMDAT

; 1651 : _Check_return_ __inline int _tcscmp(_In_ _CPC _s1,_In_ _CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __s1$[ebp]
	push	ecx
	call	__mbscmp
	add	esp, 8
	pop	ebp
	ret	0
__tcscmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
