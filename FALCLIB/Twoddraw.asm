; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\Twoddraw.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
_BSS	SEGMENT
_Each	DB	08H DUP (?)
_Space	DB	08H DUP (?)
_BSS	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
_DATA	SEGMENT
_Comma	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	060H
	DB	040H
	DB	00H
_Minus	DB	00H
	DB	00H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_Period	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Slash	DB	08H
	DB	010H
	DB	020H
	DB	040H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_Number0 DB	0e0H
	DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number1 DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_Number2 DB	0e0H
	DB	020H
	DB	0e0H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number3 DB	0e0H
	DB	020H
	DB	060H
	DB	020H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number4 DB	080H
	DB	0a0H
	DB	0e0H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Number5 DB	0e0H
	DB	080H
	DB	0e0H
	DB	020H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number6 DB	080H
	DB	080H
	DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number7 DB	0e0H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Number8 DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_Number9 DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	020H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Colon	DB	00H
	DB	020H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_SemiColon DB	00H
	DB	020H
	DB	00H
	DB	020H
	DB	060H
	DB	040H
	DB	00H
	DB	00H
_Less	DB	020H
	DB	040H
	DB	080H
	DB	040H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
_Equal	DB	00H
	DB	070H
	DB	00H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_More	DB	080H
	DB	040H
	DB	020H
	DB	040H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_Quest	DB	0c0H
	DB	020H
	DB	060H
	DB	040H
	DB	040H
	DB	00H
	DB	040H
	DB	00H
_LetterA DB	040H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
_LetterB DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterC DB	0e0H
	DB	080H
	DB	080H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterD DB	0c0H
	DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
_LetterE DB	0e0H
	DB	080H
	DB	0c0H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterF DB	0e0H
	DB	080H
	DB	0c0H
	DB	080H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_LetterG DB	0f0H
	DB	080H
	DB	0b0H
	DB	090H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
_LetterH DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
_LetterI DB	0e0H
	DB	040H
	DB	040H
	DB	040H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterJ DB	020H
	DB	020H
	DB	020H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterK DB	0a0H
	DB	0c0H
	DB	0c0H
	DB	0a0H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
_LetterL DB	080H
	DB	080H
	DB	080H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterM DB	088H
	DB	0d8H
	DB	0a8H
	DB	088H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterN DB	088H
	DB	0c8H
	DB	0a8H
	DB	098H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterO DB	0f0H
	DB	090H
	DB	090H
	DB	090H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
_LetterP DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	080H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
_LetterQ DB	0f0H
	DB	090H
	DB	090H
	DB	0b0H
	DB	0f0H
	DB	08H
	DB	00H
	DB	00H
_LetterR DB	0e0H
	DB	0a0H
	DB	0e0H
	DB	0a0H
	DB	090H
	DB	00H
	DB	00H
	DB	00H
_LetterS DB	0e0H
	DB	080H
	DB	0e0H
	DB	020H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterT DB	0e0H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_LetterU DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_LetterV DB	0a0H
	DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_LetterW DB	088H
	DB	088H
	DB	0a8H
	DB	0d8H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterX DB	088H
	DB	050H
	DB	020H
	DB	050H
	DB	088H
	DB	00H
	DB	00H
	DB	00H
_LetterY DB	0a0H
	DB	0a0H
	DB	0e0H
	DB	040H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
_LetterZ DB	0e0H
	DB	020H
	DB	040H
	DB	080H
	DB	0e0H
	DB	00H
	DB	00H
	DB	00H
_CharList DD	FLAT:_Comma
	DD	FLAT:_Minus
	DD	FLAT:_Period
	DD	FLAT:_Slash
	DD	FLAT:_Number0
	DD	FLAT:_Number1
	DD	FLAT:_Number2
	DD	FLAT:_Number3
	DD	FLAT:_Number4
	DD	FLAT:_Number5
	DD	FLAT:_Number6
	DD	FLAT:_Number7
	DD	FLAT:_Number8
	DD	FLAT:_Number9
	DD	FLAT:_Colon
	DD	FLAT:_SemiColon
	DD	FLAT:_Less
	DD	FLAT:_Equal
	DD	FLAT:_More
	DD	FLAT:_Quest
	DD	FLAT:_Each
	DD	FLAT:_LetterA
	DD	FLAT:_LetterB
	DD	FLAT:_LetterC
	DD	FLAT:_LetterD
	DD	FLAT:_LetterE
	DD	FLAT:_LetterF
	DD	FLAT:_LetterG
	DD	FLAT:_LetterH
	DD	FLAT:_LetterI
	DD	FLAT:_LetterJ
	DD	FLAT:_LetterK
	DD	FLAT:_LetterL
	DD	FLAT:_LetterM
	DD	FLAT:_LetterN
	DD	FLAT:_LetterO
	DD	FLAT:_LetterP
	DD	FLAT:_LetterQ
	DD	FLAT:_LetterR
	DD	FLAT:_LetterS
	DD	FLAT:_LetterT
	DD	FLAT:_LetterU
	DD	FLAT:_LetterV
	DD	FLAT:_LetterW
	DD	FLAT:_LetterX
	DD	FLAT:_LetterY
	DD	FLAT:_LetterZ
	DD	FLAT:_Space
_styles	DD	0ffffH
	DD	0c0c0H
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?DisplayString@TWODDRAW_CLASS@@IAEXHHPAD@Z	; TWODDRAW_CLASS::DisplayString
PUBLIC	?Lock@TWODDRAW_CLASS@@IAEXXZ			; TWODDRAW_CLASS::Lock
PUBLIC	?UnLock@TWODDRAW_CLASS@@IAEXXZ			; TWODDRAW_CLASS::UnLock
PUBLIC	??0TWODDRAW_CLASS@@QAE@XZ			; TWODDRAW_CLASS::TWODDRAW_CLASS
PUBLIC	?Viewport@TWODDRAW_CLASS@@QAEXHHHH@Z		; TWODDRAW_CLASS::Viewport
PUBLIC	?Translate@TWODDRAW_CLASS@@QAEXMM@Z		; TWODDRAW_CLASS::Translate
PUBLIC	?ResetTranslate@TWODDRAW_CLASS@@QAEXXZ		; TWODDRAW_CLASS::ResetTranslate
PUBLIC	?DrawLine@TWODDRAW_CLASS@@QAEXMMMM@Z		; TWODDRAW_CLASS::DrawLine
PUBLIC	?DrawArc@TWODDRAW_CLASS@@QAEXMMMMM@Z		; TWODDRAW_CLASS::DrawArc
PUBLIC	?DrawCircle@TWODDRAW_CLASS@@QAEXMMM@Z		; TWODDRAW_CLASS::DrawCircle
PUBLIC	?DrawString@TWODDRAW_CLASS@@QAEXMMPAD@Z		; TWODDRAW_CLASS::DrawString
PUBLIC	?DrawStringLeft@TWODDRAW_CLASS@@QAEXMMPAD@Z	; TWODDRAW_CLASS::DrawStringLeft
PUBLIC	?DrawStringRight@TWODDRAW_CLASS@@QAEXMMPAD@Z	; TWODDRAW_CLASS::DrawStringRight
PUBLIC	?Rotate@TWODDRAW_CLASS@@QAEXM@Z			; TWODDRAW_CLASS::Rotate
PUBLIC	?ResetRotate@TWODDRAW_CLASS@@QAEXXZ		; TWODDRAW_CLASS::ResetRotate
PUBLIC	?SetLineStyle@TWODDRAW_CLASS@@QAEXH@Z		; TWODDRAW_CLASS::SetLineStyle
PUBLIC	?SetColor@TWODDRAW_CLASS@@QAEXK@Z		; TWODDRAW_CLASS::SetColor
PUBLIC	??_7TWODDRAW_CLASS@@6B@				; TWODDRAW_CLASS::`vftable'
PUBLIC	??_R4TWODDRAW_CLASS@@6B@			; TWODDRAW_CLASS::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTWODDRAW_CLASS@@@8			; TWODDRAW_CLASS `RTTI Type Descriptor'
PUBLIC	??_R3TWODDRAW_CLASS@@8				; TWODDRAW_CLASS::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TWODDRAW_CLASS@@8				; TWODDRAW_CLASS::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TWODDRAW_CLASS@@8			; TWODDRAW_CLASS::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	_toupper:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@TWODDRAW_CLASS@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TWODDRAW_CLASS@@8 DD FLAT:??_R0?AVTWODDRAW_CLASS@@@8 ; TWODDRAW_CLASS::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TWODDRAW_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_R2TWODDRAW_CLASS@@8
rdata$r	SEGMENT
??_R2TWODDRAW_CLASS@@8 DD FLAT:??_R1A@?0A@EA@TWODDRAW_CLASS@@8 ; TWODDRAW_CLASS::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TWODDRAW_CLASS@@8
rdata$r	SEGMENT
??_R3TWODDRAW_CLASS@@8 DD 00H				; TWODDRAW_CLASS::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TWODDRAW_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTWODDRAW_CLASS@@@8
_DATA	SEGMENT
??_R0?AVTWODDRAW_CLASS@@@8 DD FLAT:??_7type_info@@6B@	; TWODDRAW_CLASS `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTWODDRAW_CLASS@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TWODDRAW_CLASS@@6B@
rdata$r	SEGMENT
??_R4TWODDRAW_CLASS@@6B@ DD 00H				; TWODDRAW_CLASS::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTWODDRAW_CLASS@@@8
	DD	FLAT:??_R3TWODDRAW_CLASS@@8
rdata$r	ENDS
;	COMDAT ??_7TWODDRAW_CLASS@@6B@
CONST	SEGMENT
??_7TWODDRAW_CLASS@@6B@ DD FLAT:??_R4TWODDRAW_CLASS@@6B@ ; TWODDRAW_CLASS::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newColor$ = 8						; size = 4
?SetColor@TWODDRAW_CLASS@@QAEXK@Z PROC			; TWODDRAW_CLASS::SetColor
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 	color = newColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newColor$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetColor@TWODDRAW_CLASS@@QAEXK@Z ENDP			; TWODDRAW_CLASS::SetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv70 = -12						; size = 4
tv69 = -8						; size = 4
tv66 = -4						; size = 4
_style$ = 8						; size = 4
?SetLineStyle@TWODDRAW_CLASS@@QAEXH@Z PROC		; TWODDRAW_CLASS::SetLineStyle
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 38   :     lineStyle = max ( min (style, MAX_STYLE), 0);

	cmp	DWORD PTR _style$[ebp], 1
	jge	SHORT $LN3@SetLineSty
	mov	eax, DWORD PTR _style$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@SetLineSty
$LN3@SetLineSty:
	mov	DWORD PTR tv66[ebp], 1
$LN4@SetLineSty:
	cmp	DWORD PTR tv66[ebp], 0
	jle	SHORT $LN7@SetLineSty
	cmp	DWORD PTR _style$[ebp], 1
	jge	SHORT $LN5@SetLineSty
	mov	ecx, DWORD PTR _style$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN6@SetLineSty
$LN5@SetLineSty:
	mov	DWORD PTR tv69[ebp], 1
$LN6@SetLineSty:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN8@SetLineSty
$LN7@SetLineSty:
	mov	DWORD PTR tv70[ebp], 0
$LN8@SetLineSty:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR [eax+28], ecx

; 39   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineStyle@TWODDRAW_CLASS@@QAEXH@Z ENDP		; TWODDRAW_CLASS::SetLineStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetRotate@TWODDRAW_CLASS@@QAEXXZ PROC		; TWODDRAW_CLASS::ResetRotate
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   :     matrix00 = 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+4], xmm0

; 44   :     matrix01 = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0

; 45   :     matrix10 = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+12], xmm0

; 46   :     matrix11 = 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0

; 47   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetRotate@TWODDRAW_CLASS@@QAEXXZ ENDP		; TWODDRAW_CLASS::ResetRotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_d$ = -36						; size = 4
_c$ = -32						; size = 4
_b$ = -28						; size = 4
_a$ = -24						; size = 4
_tmp11$ = -20						; size = 4
_tmp10$ = -16						; size = 4
_tmp01$ = -12						; size = 4
_tmp00$ = -8						; size = 4
_this$ = -4						; size = 4
_angle$ = 8						; size = 4
?Rotate@TWODDRAW_CLASS@@QAEXM@Z PROC			; TWODDRAW_CLASS::Rotate
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 51   : float tmp00, tmp01, tmp10, tmp11;
; 52   : float a, b, c, d;
; 53   : 
; 54   :     tmp00 = (float)cos(angle * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _tmp00$[ebp]

; 55   :     tmp01 = (float)sin(angle * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _tmp01$[ebp]

; 56   :     tmp10 = -tmp01;

	movss	xmm0, DWORD PTR _tmp01$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _tmp10$[ebp], xmm0

; 57   :     tmp11 = tmp00;

	movss	xmm0, DWORD PTR _tmp00$[ebp]
	movss	DWORD PTR _tmp11$[ebp], xmm0

; 58   : 
; 59   :     a = matrix00 * tmp00 + matrix01 * tmp10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _tmp00$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _tmp10$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _a$[ebp], xmm0

; 60   :     b = matrix00 * tmp01 + matrix01 * tmp11;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _tmp01$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR _tmp11$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _b$[ebp], xmm0

; 61   : 
; 62   :     c = matrix10 * tmp00 + matrix11 * tmp10;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR _tmp00$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR _tmp10$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _c$[ebp], xmm0

; 63   :     d = matrix10 * tmp01 + matrix11 * tmp11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _tmp01$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR _tmp11$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _d$[ebp], xmm0

; 64   : 
; 65   :     matrix00 = a;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 66   :     matrix01 = b;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 67   :     matrix10 = c;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 68   :     matrix11 = d;        

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Rotate@TWODDRAW_CLASS@@QAEXM@Z ENDP			; TWODDRAW_CLASS::Rotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_len$ = -24						; size = 4
_y1$ = -20						; size = 4
_x1$ = -16						; size = 4
_this$ = -12						; size = 4
_row$ = -8						; size = 2
_col$ = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_str$ = 16						; size = 4
?DrawStringRight@TWODDRAW_CLASS@@QAEXMMPAD@Z PROC	; TWODDRAW_CLASS::DrawStringRight
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 107  : short row, col;
; 108  : int len;
; 109  : float x1, y1;
; 110  : 
; 111  :    x *= aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _x$[ebp], xmm0

; 112  : 
; 113  :    x1 = x * matrix00 + y * matrix01;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x1$[ebp], xmm0

; 114  :    y1 = x * matrix10 + y * matrix11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y1$[ebp], xmm0

; 115  : 
; 116  :    len = strlen (str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 117  : 
; 118  :    x = x1 + x_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _x$[ebp], xmm0

; 119  :    y = y1 + y_offset;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _y$[ebp], xmm0

; 120  : 
; 121  :    col = (short)(xRes / 2 * (1.0F + x));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	WORD PTR _col$[ebp], ax

; 122  :    row = (short)(yRes / 2 * (1.0F - y));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	WORD PTR _row$[ebp], dx

; 123  :    DisplayString (row , col - len * CHAR_WIDTH, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	movsx	ecx, WORD PTR _col$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	imul	edx, 6
	sub	ecx, edx
	push	ecx
	movsx	eax, WORD PTR _row$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayString@TWODDRAW_CLASS@@IAEXHHPAD@Z ; TWODDRAW_CLASS::DisplayString

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawStringRight@TWODDRAW_CLASS@@QAEXMMPAD@Z ENDP	; TWODDRAW_CLASS::DrawStringRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_y1$ = -20						; size = 4
_x1$ = -16						; size = 4
_this$ = -12						; size = 4
_row$ = -8						; size = 2
_col$ = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_str$ = 16						; size = 4
?DrawStringLeft@TWODDRAW_CLASS@@QAEXMMPAD@Z PROC	; TWODDRAW_CLASS::DrawStringLeft
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 128  : short row, col;
; 129  : float x1, y1;
; 130  : 
; 131  :    x *= aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _x$[ebp], xmm0

; 132  : 
; 133  :    x1 = x * matrix00 + y * matrix01;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x1$[ebp], xmm0

; 134  :    y1 = x * matrix10 + y * matrix11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y1$[ebp], xmm0

; 135  : 
; 136  :    x = x1 + x_offset;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _x$[ebp], xmm0

; 137  :    y = y1 + y_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _y$[ebp], xmm0

; 138  : 
; 139  :    col = (short)(xRes / 2 * (1.0F + x));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	WORD PTR _col$[ebp], dx

; 140  :    row = (short)(yRes / 2 * (1.0F - y));

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	WORD PTR _row$[ebp], cx

; 141  :    DisplayString (row , col, str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	movsx	eax, WORD PTR _col$[ebp]
	push	eax
	movsx	ecx, WORD PTR _row$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayString@TWODDRAW_CLASS@@IAEXHHPAD@Z ; TWODDRAW_CLASS::DisplayString

; 142  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawStringLeft@TWODDRAW_CLASS@@QAEXMMPAD@Z ENDP	; TWODDRAW_CLASS::DrawStringLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_len$ = -24						; size = 4
_y1$ = -20						; size = 4
_x1$ = -16						; size = 4
_this$ = -12						; size = 4
_row$ = -8						; size = 2
_col$ = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_str$ = 16						; size = 4
?DrawString@TWODDRAW_CLASS@@QAEXMMPAD@Z PROC		; TWODDRAW_CLASS::DrawString
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 86   : short row, col;
; 87   : int len;
; 88   : float x1, y1;
; 89   : 
; 90   :    x *= aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _x$[ebp], xmm0

; 91   : 
; 92   :    x1 = x * matrix00 + y * matrix01;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x1$[ebp], xmm0

; 93   :    y1 = x * matrix10 + y * matrix11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y1$[ebp], xmm0

; 94   :           
; 95   :    len = strlen (str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 96   :         
; 97   :    x = x1 + x_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _x$[ebp], xmm0

; 98   :    y = y1 + y_offset;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y1$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _y$[ebp], xmm0

; 99   : 
; 100  :    col = (short)(xRes / 2 * (1.0F + x));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	WORD PTR _col$[ebp], ax

; 101  :    row = (short)(yRes / 2 * (1.0F - y));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	WORD PTR _row$[ebp], dx

; 102  :    DisplayString (row, col - len * CHAR_WIDTH / 2, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	movsx	ecx, WORD PTR _col$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, 6
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	ecx, eax
	push	ecx
	movsx	edx, WORD PTR _row$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayString@TWODDRAW_CLASS@@IAEXHHPAD@Z ; TWODDRAW_CLASS::DisplayString

; 103  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawString@TWODDRAW_CLASS@@QAEXMMPAD@Z ENDP		; TWODDRAW_CLASS::DrawString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_x_center$ = -20					; size = 4
_y_center$ = -16					; size = 4
_y1in$ = -12						; size = 4
_x1in$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_radius$ = 16						; size = 4
?DrawCircle@TWODDRAW_CLASS@@QAEXMMM@Z PROC		; TWODDRAW_CLASS::DrawCircle
; _this$ = ecx

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 184  : float x1in, y1in;
; 185  : int x_center, y_center;
; 186  : 
; 187  :    x *= aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _x$[ebp], xmm0

; 188  : 
; 189  :    x1in = x * matrix00 + y * matrix01;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x1in$[ebp], xmm0

; 190  :    y1in = x * matrix10 + y * matrix11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y1in$[ebp], xmm0

; 191  : 
; 192  :    x1in = x1in + x_offset;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1in$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _x1in$[ebp], xmm0

; 193  :    y1in = y1in + y_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y1in$[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _y1in$[ebp], xmm0

; 194  : 
; 195  :    x_center = (int)(xRes * 0.5F * (1.0F + x1in));

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	DWORD PTR _x_center$[ebp], edx

; 196  :    y_center = (int)(yRes * 0.5F * (1.0F - y1in));

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+36]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y_center$[ebp], ecx

; 197  : 
; 198  :    DisplayCircle (x_center, y_center , (int)(yRes * 0.5F * radius));

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+36]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _radius$[ebp]
	cvttss2si eax, xmm0
	push	eax
	mov	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawCircle@TWODDRAW_CLASS@@QAEXMMM@Z ENDP		; TWODDRAW_CLASS::DrawCircle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_x_center$ = -20					; size = 4
_y_center$ = -16					; size = 4
_y1in$ = -12						; size = 4
_x1in$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_radius$ = 16						; size = 4
_start$ = 20						; size = 4
_end$ = 24						; size = 4
?DrawArc@TWODDRAW_CLASS@@QAEXMMMMM@Z PROC		; TWODDRAW_CLASS::DrawArc
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 203  : float x1in, y1in;
; 204  : int x_center, y_center;
; 205  : 
; 206  :    x *= aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _x$[ebp], xmm0

; 207  : 
; 208  :    x1in = x * matrix00 + y * matrix01;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x1in$[ebp], xmm0

; 209  :    y1in = x * matrix10 + y * matrix11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y1in$[ebp], xmm0

; 210  : 
; 211  :    x1in = x1in + x_offset;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1in$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _x1in$[ebp], xmm0

; 212  :    y1in = y1in + y_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y1in$[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _y1in$[ebp], xmm0

; 213  : 
; 214  :    x_center = (int)(xRes * 0.5F * (1.0F + x1in));

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	DWORD PTR _x_center$[ebp], edx

; 215  :    y_center = (int)(yRes * 0.5F * (1.0F - y1in));

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+36]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y_center$[ebp], ecx

; 216  : 
; 217  :    DisplayArc(x_center, y_center , (int)(yRes * 0.5F * radius), start, end);

	push	ecx
	movss	xmm0, DWORD PTR _end$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _start$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+36]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _radius$[ebp]
	cvttss2si eax, xmm0
	push	eax
	mov	ecx, DWORD PTR _y_center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_center$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 218  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawArc@TWODDRAW_CLASS@@QAEXMMMMM@Z ENDP		; TWODDRAW_CLASS::DrawArc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_x0$ = -28						; size = 4
_y0$ = -24						; size = 4
_x1$ = -20						; size = 4
_y1$ = -16						; size = 4
_y2$ = -12						; size = 4
_x2$ = -8						; size = 4
_this$ = -4						; size = 4
_x1in$ = 8						; size = 4
_y1in$ = 12						; size = 4
_x2in$ = 16						; size = 4
_y2in$ = 20						; size = 4
?DrawLine@TWODDRAW_CLASS@@QAEXMMMM@Z PROC		; TWODDRAW_CLASS::DrawLine
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 147  : int x0, y0, x1, y1;
; 148  : float x2, y2;
; 149  : 
; 150  :    x1in *= aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1in$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR _x1in$[ebp], xmm0

; 151  :    x2in *= aspectRatio;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x2in$[ebp]
	mulss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR _x2in$[ebp], xmm0

; 152  : 
; 153  :    x2 = x1in * matrix00 + y1in * matrix01;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1in$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x2$[ebp], xmm0

; 154  :    y2 = x1in * matrix10 + y1in * matrix11;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x1in$[ebp]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm1, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y2$[ebp], xmm0

; 155  :    x1in = x2 + x_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _x1in$[ebp], xmm0

; 156  :    y1in = y2 + y_offset;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _y1in$[ebp], xmm0

; 157  : 
; 158  :    x2 = x2in * matrix00 + y2in * matrix01;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x2in$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _x2$[ebp], xmm0

; 159  :    y2 = x2in * matrix10 + y2in * matrix11;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x2in$[ebp]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm1, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _y2$[ebp], xmm0

; 160  :    x2in = x2 + x_offset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _x2in$[ebp], xmm0

; 161  :    y2in = y2 + y_offset;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _y2in$[ebp], xmm0

; 162  : 
; 163  :    if (x1in <= x2in)

	movss	xmm0, DWORD PTR _x2in$[ebp]
	comiss	xmm0, DWORD PTR _x1in$[ebp]
	jb	$LN2@DrawLine

; 164  :    {        
; 165  :       x0 = (short)(xRes / 2 * (1.0F + x1in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _x0$[ebp], ecx

; 166  :       y0 = (short)(yRes / 2 * (1.0F - y1in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _y0$[ebp], ecx

; 167  :       x1 = (short)(xRes / 2 * (1.0F + x2in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x2in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _x1$[ebp], ecx

; 168  :       y1 = (short)(yRes / 2 * (1.0F - y2in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _y1$[ebp], ecx

; 169  :    }
; 170  :    else

	jmp	$LN1@DrawLine
$LN2@DrawLine:

; 171  :    {        
; 172  :       x0 = (short)(xRes / 2 * (1.0F + x2in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x2in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _x0$[ebp], ecx

; 173  :       y0 = (short)(yRes / 2 * (1.0F - y2in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y2in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _y0$[ebp], ecx

; 174  :       x1 = (short)(xRes / 2 * (1.0F + x1in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, DWORD PTR _x1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _x1$[ebp], ecx

; 175  :       y1 = (short)(yRes / 2 * (1.0F - y1in));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _y1in$[ebp]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	movsx	ecx, ax
	mov	DWORD PTR _y1$[ebp], ecx
$LN1@DrawLine:

; 176  :    }
; 177  : 
; 178  :    DisplayLine (x0, y0 , x1, y1 );

	mov	edx, DWORD PTR _y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _x1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x0$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax

; 179  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DrawLine@TWODDRAW_CLASS@@QAEXMMMM@Z ENDP		; TWODDRAW_CLASS::DrawLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetTranslate@TWODDRAW_CLASS@@QAEXXZ PROC		; TWODDRAW_CLASS::ResetTranslate
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   :    x_offset = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 75   :    y_offset = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+24], xmm0

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetTranslate@TWODDRAW_CLASS@@QAEXXZ ENDP		; TWODDRAW_CLASS::ResetTranslate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Translate@TWODDRAW_CLASS@@QAEXMM@Z PROC		; TWODDRAW_CLASS::Translate
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   :    x_offset += x * aspectRatio;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 81   :    y_offset += y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Translate@TWODDRAW_CLASS@@QAEXMM@Z ENDP		; TWODDRAW_CLASS::Translate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_top$ = 16						; size = 4
_bottom$ = 20						; size = 4
?Viewport@TWODDRAW_CLASS@@QAEXHHHH@Z PROC		; TWODDRAW_CLASS::Viewport
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 
; 232  :    if (bottom - top > winYres || right - left > winXres)

	mov	eax, DWORD PTR _bottom$[ebp]
	sub	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jg	SHORT $LN1@Viewport
	mov	edx, DWORD PTR _right$[ebp]
	sub	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [eax+40]
	jle	SHORT $LN2@Viewport
$LN1@Viewport:

; 233  :       return;

	jmp	SHORT $LN3@Viewport
$LN2@Viewport:

; 234  : 
; 235  :    portOffsetX = left;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 236  :    portOffsetY = top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 237  :    xRes = right - left;

	mov	edx, DWORD PTR _right$[ebp]
	sub	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], edx

; 238  :    yRes = bottom - top;

	mov	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx
$LN3@Viewport:

; 239  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Viewport@TWODDRAW_CLASS@@QAEXHHHH@Z ENDP		; TWODDRAW_CLASS::Viewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TWODDRAW_CLASS@@QAE@XZ PROC				; TWODDRAW_CLASS::TWODDRAW_CLASS
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TWODDRAW_CLASS@@6B@

; 12   :    portOffsetX = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 13   :    portOffsetY = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0

; 14   :    inUse = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 15   :    lineStyle = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 16   :    color = 0x0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0

; 17   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TWODDRAW_CLASS@@QAE@XZ ENDP				; TWODDRAW_CLASS::TWODDRAW_CLASS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnLock@TWODDRAW_CLASS@@IAEXXZ PROC			; TWODDRAW_CLASS::UnLock
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 28   :    inUse = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UnLock@TWODDRAW_CLASS@@IAEXXZ ENDP			; TWODDRAW_CLASS::UnLock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@TWODDRAW_CLASS@@IAEXXZ PROC			; TWODDRAW_CLASS::Lock
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Lock:

; 21   :    while (inUse)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN1@Lock

; 22   :       Sleep(0);

	push	0
	call	DWORD PTR __imp__Sleep@4
	jmp	SHORT $LN2@Lock
$LN1@Lock:

; 23   :    inUse = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 1

; 24   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@TWODDRAW_CLASS@@IAEXXZ ENDP			; TWODDRAW_CLASS::Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\twoddraw.cpp
_TEXT	SEGMENT
tv74 = -12						; size = 4
_this$ = -8						; size = 4
tv78 = -2						; size = 2
_row$ = 8						; size = 4
_col$ = 12						; size = 4
_str$ = 16						; size = 4
?DisplayString@TWODDRAW_CLASS@@IAEXHHPAD@Z PROC		; TWODDRAW_CLASS::DisplayString
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@DisplayStr:

; 222  :    while (*str)

	mov	eax, DWORD PTR _str$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@DisplayStr

; 223  :    {
; 224  :         DisplayCharacter ((short)(toupper(*str++) - ','), col, row );

	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	call	_toupper
	add	esp, 4
	sub	eax, 44					; 0000002cH
	mov	WORD PTR tv78[ebp], ax
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	mov	eax, DWORD PTR _col$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv78[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 225  :         col += CHAR_WIDTH;

	mov	ecx, DWORD PTR _col$[ebp]
	add	ecx, 6
	mov	DWORD PTR _col$[ebp], ecx

; 226  :    }

	jmp	SHORT $LN2@DisplayStr
$LN3@DisplayStr:

; 227  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DisplayString@TWODDRAW_CLASS@@IAEXHHPAD@Z ENDP		; TWODDRAW_CLASS::DisplayString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
END
