; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\MsgSrc\AWACSMsg.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?AWACSon@@3HA					; AWACSon
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?AWACSon@@3HA DD 01H					; AWACSon
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?EntityId@VuMessage@@QBE?AVVU_ID@@XZ		; VuMessage::EntityId
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconAWACSMessage::FalconAWACSMessage
PUBLIC	??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z		; FalconAWACSMessage::FalconAWACSMessage
PUBLIC	??1FalconAWACSMessage@@UAE@XZ			; FalconAWACSMessage::~FalconAWACSMessage
PUBLIC	?Size@FalconAWACSMessage@@UBEHXZ		; FalconAWACSMessage::Size
PUBLIC	?Decode@FalconAWACSMessage@@UAEHPAPAEPAJ@Z	; FalconAWACSMessage::Decode
PUBLIC	?Encode@FalconAWACSMessage@@UAEHPAPAE@Z		; FalconAWACSMessage::Encode
PUBLIC	??0DATA_BLOCK@FalconAWACSMessage@@QAE@XZ	; FalconAWACSMessage::DATA_BLOCK::DATA_BLOCK
PUBLIC	?Process@FalconAWACSMessage@@MAEHE@Z		; FalconAWACSMessage::Process
PUBLIC	??_GFalconAWACSMessage@@UAEPAXI@Z		; FalconAWACSMessage::`scalar deleting destructor'
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?GetIdentified@CampBaseClass@@QAEHE@Z		; CampBaseClass::GetIdentified
PUBLIC	?Aborted@UnitClass@@QBEHXZ			; UnitClass::Aborted
PUBLIC	?GetUnitAltitude@UnitClass@@QAEHXZ		; UnitClass::GetUnitAltitude
PUBLIC	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ		; UnitClass::GetTargetID
PUBLIC	?GetAssignedTarget@FlightClass@@QAE?AVVU_ID@@XZ	; FlightClass::GetAssignedTarget
PUBLIC	?GetEvalFlags@FlightClass@@QAEEXZ		; FlightClass::GetEvalFlags
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	?Fuel@AirframeClass@@QAEMXZ			; AirframeClass::Fuel
PUBLIC	??0?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<float const ,FlightClass *> >::allocator<std::pair<float const ,FlightClass *> >
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >
PUBLIC	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
PUBLIC	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
PUBLIC	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
PUBLIC	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
PUBLIC	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
PUBLIC	?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAU?$pair@$$CBMPAVFlightClass@@@2@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Myval
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Min
PUBLIC	??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >
PUBLIC	??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >
PUBLIC	?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Freeheadnode
PUBLIC	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
PUBLIC	??0?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >
PUBLIC	??1?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@XZ ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::~_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >
PUBLIC	??0?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
PUBLIC	??1?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
PUBLIC	??0?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::end
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::clear
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Erase
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lrotate
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rmost
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rrotate
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tidy
PUBLIC	??0?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >
PUBLIC	??1?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::~map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::operator++
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Mynode
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator!=
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
PUBLIC	??$addressof@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@YAPAU?$pair@$$CBMPAVFlightClass@@@0@AAU10@@Z ; std::addressof<std::pair<float const ,FlightClass *> >
PUBLIC	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_Allocate@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
PUBLIC	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
PUBLIC	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::pair<float const ,FlightClass *> >
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7FalconAWACSMessage@@6B@			; FalconAWACSMessage::`vftable'
PUBLIC	??_C@_0BM@BKNKFJCB@AWACS?5message?5?$CD?$CFd?5playing?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@EDPGFDMC@Making?5threat?5call?6?$AA@	; `string'
PUBLIC	??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@JKJLGINP@Ask?5for?5declare?5here?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@JPLILLEH@Get?5declaration?5here?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FalconAWACSMessage@@6B@			; FalconAWACSMessage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFalconAWACSMessage@@@8			; FalconAWACSMessage `RTTI Type Descriptor'
PUBLIC	??_R3FalconAWACSMessage@@8			; FalconAWACSMessage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconAWACSMessage@@8			; FalconAWACSMessage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconAWACSMessage@@8		; FalconAWACSMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@FalconEvent@@8			; FalconEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEvent@@@8				; FalconEvent `RTTI Type Descriptor'
PUBLIC	??_R3FalconEvent@@8				; FalconEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEvent@@8				; FalconEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuMessage@@8			; VuMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuMessage@@@8				; VuMessage `RTTI Type Descriptor'
PUBLIC	??_R3VuMessage@@8				; VuMessage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuMessage@@8				; VuMessage::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@47c34ff3
PUBLIC	__real@bf800000
PUBLIC	__real@c53b8000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_rand:PROC
EXTRN	_sprintf:PROC
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?DoSend@VuMessage@@UAEEXZ:PROC			; VuMessage::DoSend
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?Size@FalconEvent@@UBEHXZ:PROC			; FalconEvent::Size
EXTRN	?Decode@FalconEvent@@UAEHPAPAEPAJ@Z:PROC	; FalconEvent::Decode
EXTRN	?Encode@FalconEvent@@UAEHPAPAE@Z:PROC		; FalconEvent::Encode
EXTRN	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconEvent::FalconEvent
EXTRN	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@1@Z:PROC ; FalconEvent::FalconEvent
EXTRN	??1FalconEvent@@MAE@XZ:PROC			; FalconEvent::~FalconEvent
EXTRN	?Activate@FalconEvent@@MAEHPAVVuEntity@@@Z:PROC	; FalconEvent::Activate
EXTRN	?LocalSize@FalconEvent@@EBEHXZ:PROC		; FalconEvent::LocalSize
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	_MonoPrint:PROC
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	??_EFalconAWACSMessage@@UAEPAXI@Z:PROC		; FalconAWACSMessage::`vector deleting destructor'
EXTRN	?HomeAirbase@AircraftClass@@QAE?AVVU_ID@@XZ:PROC ; AircraftClass::HomeAirbase
EXTRN	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ:PROC ; CampBaseClass::GetComponentLead
EXTRN	?NumberOfComponents@CampBaseClass@@QAEHXZ:PROC	; CampBaseClass::NumberOfComponents
EXTRN	?FindNearestThreat@SimulationDriver@@QAEPAVSimBaseClass@@PAVAircraftClass@@PAF1PAM@Z:PROC ; SimulationDriver::FindNearestThreat
EXTRN	?FindNearestEnemyPlane@SimulationDriver@@QAEPAVSimBaseClass@@PAVAircraftClass@@PAF1PAM@Z:PROC ; SimulationDriver::FindNearestEnemyPlane
EXTRN	?FindNearestCampThreat@SimulationDriver@@QAEPAVCampBaseClass@@PAVAircraftClass@@PAF1PAM@Z:PROC ; SimulationDriver::FindNearestCampThreat
EXTRN	?FindNearestCampEnemy@SimulationDriver@@QAEPAVCampBaseClass@@PAVAircraftClass@@PAF1PAM@Z:PROC ; SimulationDriver::FindNearestCampEnemy
EXTRN	?FindTanker@SimulationDriver@@QAEPAVFlightClass@@PAVSimBaseClass@@@Z:PROC ; SimulationDriver::FindTanker
EXTRN	?GetDefaultAwacsVoice@@YAEXZ:PROC		; GetDefaultAwacsVoice
EXTRN	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	?ConvertFlightNumberToCallNumber@@YAFH@Z:PROC	; ConvertFlightNumberToCallNumber
EXTRN	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z:PROC ; CreateCallFromAwacs
EXTRN	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z:PROC ; CreateCallFromAwacsPlane
EXTRN	?CheckDivertStatus@@YAHH@Z:PROC			; CheckDivertStatus
EXTRN	?SetDiverted@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetDiverted
EXTRN	?GetVehicleID@UnitClass@@QAEFH@Z:PROC		; UnitClass::GetVehicleID
EXTRN	?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z:PROC ; FindNearestFriendlyAirbase
EXTRN	?SimToGrid@@YAFM@Z:PROC				; SimToGrid
EXTRN	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z:PROC	; ConvertSimToGrid
EXTRN	?SetEvalFlag@FlightClass@@QAEXEH@Z:PROC		; FlightClass::SetEvalFlag
EXTRN	?ClearEvalFlag@FlightClass@@QAEXE@Z:PROC	; FlightClass::ClearEvalFlag
EXTRN	?GetPilotVoiceID@FlightClass@@QAEEH@Z:PROC	; FlightClass::GetPilotVoiceID
EXTRN	?GetACCount@FlightClass@@QAEHXZ:PROC		; FlightClass::GetACCount
EXTRN	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ:PROC	; FlightClass::GetFlightLeadVoiceID
EXTRN	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ:PROC	; FlightClass::GetAWACSFlight
EXTRN	?GetTankerFlight@FlightClass@@QAEPAV1@XZ:PROC	; FlightClass::GetTankerFlight
EXTRN	?GetFlightController@FlightClass@@QAEPAV1@XZ:PROC ; FlightClass::GetFlightController
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?RequestSARMission@@YAHPAVFlightClass@@@Z:PROC	; RequestSARMission
EXTRN	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z:PROC ; RequestIntercept
EXTRN	?RegisterRelief@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z:PROC ; MissionEvaluationClass::RegisterRelief
EXTRN	?FindFlightData@MissionEvaluationClass@@QAEPAVFlightDataClass@@PAVFlightClass@@@Z:PROC ; MissionEvaluationClass::FindFlightData
EXTRN	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z:PROC ; FindAircraftTarget
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?MissionData@@3PAUMissionDataType@@A:BYTE	; MissionData
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AllAirList@@3PAVVuLinkedList@@A:DWORD		; AllAirList
EXTRN	?AllRealList@@3PAVVuLinkedList@@A:DWORD		; AllRealList
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gDefaultAWACSCallSign@@3FA:WORD		; gDefaultAWACSCallSign
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?g_bAWACSRequired@@3_NA:BYTE			; g_bAWACSRequired
EXTRN	?g_nMinTacanChannel@@3HA:DWORD			; g_nMinTacanChannel
EXTRN	?g_nChatterInterval@@3HA:DWORD			; g_nChatterInterval
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c53b8000
CONST	SEGMENT
__real@c53b8000 DD 0c53b8000r			; -3000
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@47c34ff3
CONST	SEGMENT
__real@47c34ff3 DD 047c34ff3r			; 99999.9
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuMessage@@8
rdata$r	SEGMENT
??_R2VuMessage@@8 DD FLAT:??_R1A@?0A@EA@VuMessage@@8	; VuMessage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuMessage@@8
rdata$r	SEGMENT
??_R3VuMessage@@8 DD 00H				; VuMessage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuMessage@@@8
_DATA	SEGMENT
??_R0?AVVuMessage@@@8 DD FLAT:??_7type_info@@6B@	; VuMessage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuMessage@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuMessage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuMessage@@8 DD FLAT:??_R0?AVVuMessage@@@8 ; VuMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEvent@@8
rdata$r	SEGMENT
??_R2FalconEvent@@8 DD FLAT:??_R1A@?0A@EA@FalconEvent@@8 ; FalconEvent::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEvent@@8
rdata$r	SEGMENT
??_R3FalconEvent@@8 DD 00H				; FalconEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEvent@@@8
_DATA	SEGMENT
??_R0?AVFalconEvent@@@8 DD FLAT:??_7type_info@@6B@	; FalconEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEvent@@8 DD FLAT:??_R0?AVFalconEvent@@@8 ; FalconEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconAWACSMessage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconAWACSMessage@@8 DD FLAT:??_R0?AVFalconAWACSMessage@@@8 ; FalconAWACSMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconAWACSMessage@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconAWACSMessage@@8
rdata$r	SEGMENT
??_R2FalconAWACSMessage@@8 DD FLAT:??_R1A@?0A@EA@FalconAWACSMessage@@8 ; FalconAWACSMessage::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEvent@@8
	DD	FLAT:??_R1A@?0A@EA@VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconAWACSMessage@@8
rdata$r	SEGMENT
??_R3FalconAWACSMessage@@8 DD 00H			; FalconAWACSMessage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FalconAWACSMessage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconAWACSMessage@@@8
_DATA	SEGMENT
??_R0?AVFalconAWACSMessage@@@8 DD FLAT:??_7type_info@@6B@ ; FalconAWACSMessage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconAWACSMessage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FalconAWACSMessage@@6B@
rdata$r	SEGMENT
??_R4FalconAWACSMessage@@6B@ DD 00H			; FalconAWACSMessage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFalconAWACSMessage@@@8
	DD	FLAT:??_R3FalconAWACSMessage@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JPLILLEH@Get?5declaration?5here?6?$AA@
CONST	SEGMENT
??_C@_0BG@JPLILLEH@Get?5declaration?5here?6?$AA@ DB 'Get declaration here'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JKJLGINP@Ask?5for?5declare?5here?6?$AA@
CONST	SEGMENT
??_C@_0BG@JKJLGINP@Ask?5for?5declare?5here?6?$AA@ DB 'Ask for declare her'
	DB	'e', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@ DB 'No threats '
	DB	'detected :->', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EDPGFDMC@Making?5threat?5call?6?$AA@
CONST	SEGMENT
??_C@_0BE@EDPGFDMC@Making?5threat?5call?6?$AA@ DB 'Making threat call', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BKNKFJCB@AWACS?5message?5?$CD?$CFd?5playing?4?6?$AA@
CONST	SEGMENT
??_C@_0BM@BKNKFJCB@AWACS?5message?5?$CD?$CFd?5playing?4?6?$AA@ DB 'AWACS '
	DB	'message #%d playing.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_7FalconAWACSMessage@@6B@
CONST	SEGMENT
??_7FalconAWACSMessage@@6B@ DD FLAT:??_R4FalconAWACSMessage@@6B@ ; FalconAWACSMessage::`vftable'
	DD	FLAT:??_EFalconAWACSMessage@@UAEPAXI@Z
	DD	FLAT:?Size@FalconAWACSMessage@@UBEHXZ
	DD	FLAT:?DoSend@VuMessage@@UAEEXZ
	DD	FLAT:?Activate@FalconEvent@@MAEHPAVVuEntity@@@Z
	DD	FLAT:?Process@FalconAWACSMessage@@MAEHE@Z
	DD	FLAT:?Encode@FalconAWACSMessage@@UAEHPAPAE@Z
	DD	FLAT:?Decode@FalconAWACSMessage@@UAEHPAPAEPAJ@Z
	DD	FLAT:?LocalSize@FalconEvent@@EBEHXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z$0
__ehfuncinfo$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ$0
__unwindtable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ$2
__ehfuncinfo$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z$0
__unwindtable$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z$0
__ehfuncinfo$?Process@FalconAWACSMessage@@MAEHE@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Process@FalconAWACSMessage@@MAEHE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Process@FalconAWACSMessage@@MAEHE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::pair<float const ,FlightClass *> >, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::pair<float const ,FlightClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
	pop	ebp
	ret	0
??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAU?$pair@$$CBMPAVFlightClass@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAU?$pair@$$CBMPAVFlightClass@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::pair<float const ,FlightClass *> >

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAU?$pair@$$CBMPAVFlightClass@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1798 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1799 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1800 : 	}

	pop	ebp
	ret	0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@YAPAU?$pair@$$CBMPAVFlightClass@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@YAPAU?$pair@$$CBMPAVFlightClass@@@0@AAU10@@Z PROC ; std::addressof<std::pair<float const ,FlightClass *> >, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@YAPAU?$pair@$$CBMPAVFlightClass@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<float const ,FlightClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$ = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 46   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	push	ecx

; 47   : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAD@std@@YA$$QADAAD@Z		; std::_Move<char &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR __Tmp$[ebp], cl

; 48   : 	_Left = _Move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$_Move@AAD@std@@YA$$QADAAD@Z		; std::_Move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 49   : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAD@std@@YA$$QADAAD@Z		; std::_Move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 50   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >, COMDAT
; _this$ = ecx

; 384  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >

; 385  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator!=, COMDAT
; _this$ = ecx

; 340  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 341  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 342  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv75 = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() == 0
; 325  : 			|| this->_Getcont() != _Right._Getcont())
; 326  : 			{	// report error
; 327  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 328  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 329  : 			}
; 330  : 
; 331  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 332  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 333  : 			&& this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv75[ebp]

; 337  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		_Myiter _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 278  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++

; 279  : 		return (_Tmp);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 280  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>

; 215  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		{	// return node pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return (_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 124  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN6@operator
	jmp	$LN5@operator
$LN6@operator:

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@operator

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 65   : 		else

	jmp	SHORT $LN5@operator
$LN2@operator:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$1[ebp], ecx
	mov	edx, DWORD PTR __Pnode$1[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN1@operator
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN2@operator
$LN1@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@operator:

; 72   : 			}
; 73   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 74   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 46   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ PROC ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::~map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::~map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\map
;	COMDAT ??0?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
??0?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ PROC ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >, COMDAT
; _this$ = ecx

; 92   : 		{	// construct empty map from defaults

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<float const ,FlightClass *> >::allocator<std::pair<float const ,FlightClass *> >
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >

; 93   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
$T5 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2215 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2216 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T5[ebp], ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::begin
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase

; 2217 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2143 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2144 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 2145 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2146 : 
; 2147 : 		if (!this->_Isnil(this->_Right(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Rrotate

; 2148 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@Rrotate:

; 2149 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2150 : 
; 2151 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Rrotate

; 2152 : 			_Root() = _Pnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Rrotate
$LN4@Rrotate:

; 2153 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN2@Rrotate

; 2154 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2155 : 		else

	jmp	SHORT $LN3@Rrotate
$LN2@Rrotate:

; 2156 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Rrotate:

; 2157 : 
; 2158 : 		this->_Right(_Pnode) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2159 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2160 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 2138 : 		{	// return root of nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2139 : 		return (this->_Parent(this->_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4

; 2140 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 2133 : 		{	// return rightmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2134 : 		return (this->_Right(this->_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4

; 2135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2113 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2114 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 2115 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2116 : 
; 2117 : 		if (!this->_Isnil(this->_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Lrotate

; 2118 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@Lrotate:

; 2119 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 2120 : 
; 2121 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Lrotate

; 2122 : 			_Root() = _Pnode;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@Lrotate
$LN4@Lrotate:

; 2123 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN2@Lrotate

; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2125 : 		else

	jmp	SHORT $LN3@Lrotate
$LN2@Lrotate:

; 2126 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Lrotate:

; 2127 : 
; 2128 : 		this->_Left(_Pnode) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2129 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 2130 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2108 : 		{	// return leftmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2109 : 		return (this->_Left(this->_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4

; 2110 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnode$1 = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	DWORD PTR __Pnode$1[ebp], eax

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	jmp	SHORT $LN3@Erase
$LN2@Erase:
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR __Rootnode$[ebp], ecx
$LN3@Erase:
	mov	edx, DWORD PTR __Pnode$1[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN4@Erase

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

	mov	ecx, DWORD PTR __Pnode$1[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$1[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$1[ebp], ecx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAU?$pair@$$CBMPAVFlightClass@@@2@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@YAPAU?$pair@$$CBMPAVFlightClass@@@0@AAU10@@Z ; std::addressof<std::pair<float const ,FlightClass *> >
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >

; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);

	push	1
	mov	ecx, DWORD PTR __Rootnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate

; 2070 : 			}

	jmp	$LN2@Erase
$LN4@Erase:

; 2071 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1532 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1533 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1534 : 		this->_Orphan_ptr(*this, 0);
; 1535 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1536 : 
; 1537 : 		_Erase(_Root());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Erase

; 1538 : 		_Root() = this->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1539 : 		_Lmost() = this->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1540 : 		_Rmost() = this->_Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rmost
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1541 : 		this->_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1542 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase, COMDAT
; _this$ = ecx

; 1508 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1509 : 		if (_First == begin() && _Last == end())

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::begin
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@erase
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::end
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@erase

; 1510 : 			{	// erase all
; 1511 : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::clear

; 1512 : 			return (begin());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::begin
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@erase

; 1513 : 			}
; 1514 : 		else

	jmp	SHORT $LN5@erase
$LN2@erase:

; 1515 : 			{	// partial erase, one at a time
; 1516 : 			while (_First != _Last)

	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@erase

; 1517 : 				erase(_First++);

	push	0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase
	jmp	SHORT $LN2@erase
$LN1@erase:

; 1518 : 			return (iterator(_First._Ptr, this));

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@erase:

; 1519 : 			}
; 1520 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv182 = -32						; size = 4
tv170 = -28						; size = 4
_this$ = -24						; size = 4
__Erasednode$ = -20					; size = 4
__Fixnode$ = -16					; size = 4
__Fixnodeparent$ = -12					; size = 4
__Pnode$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase, COMDAT
; _this$ = ecx

; 1323 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1324 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1325 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1326 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1327 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1328 : 		++_Where;	// save successor iterator for return
; 1329 : 		_Orphan_ptr(*this, _Erasednode);
; 1330 : 
; 1331 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1332 : 		if (this->_Isnil(_Where._Mynode()))

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Mynode
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN40@erase

; 1333 : 			_Xout_of_range("invalid map/set<T> iterator");

	push	OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN40@erase:

; 1334 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Erasednode$[ebp], eax

; 1335 : 		++_Where;	// save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::operator++

; 1336 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1337 : 
; 1338 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1339 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1340 : 		_Nodeptr _Pnode = _Erasednode;

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1341 : 
; 1342 : 		if (this->_Isnil(this->_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN39@erase

; 1343 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], eax
	jmp	SHORT $LN38@erase
$LN39@erase:

; 1344 : 		else if (this->_Isnil(this->_Right(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN37@erase

; 1345 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 1346 : 		else

	jmp	SHORT $LN38@erase
$LN37@erase:

; 1347 : 			{	// two subtrees, must lift successor node to replace erased
; 1348 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >,std::_Iterator_base0>::_Mynode
	mov	DWORD PTR __Pnode$[ebp], eax

; 1349 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], ecx
$LN38@erase:

; 1350 : 			}
; 1351 : 
; 1352 : 		if (_Pnode == _Erasednode)

	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	$LN35@erase

; 1353 : 			{	// at most one subtree, relink it
; 1354 : 			_Fixnodeparent = this->_Parent(_Erasednode);

	mov	eax, DWORD PTR __Erasednode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 1355 : 			if (!this->_Isnil(_Fixnode))

	mov	edx, DWORD PTR __Fixnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN34@erase

; 1356 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax], edx
$LN34@erase:

; 1357 : 
; 1358 : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN33@erase

; 1359 : 				_Root() = _Fixnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN32@erase
$LN33@erase:

; 1360 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN31@erase

; 1361 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], edx

; 1362 : 			else

	jmp	SHORT $LN32@erase
$LN31@erase:

; 1363 : 				this->_Right(_Fixnodeparent) =
; 1364 : 					_Fixnode;	// link down to right

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN32@erase:

; 1365 : 
; 1366 : 			if (_Lmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN29@erase

; 1367 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1368 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1369 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN43@erase
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv170[ebp], edx
	jmp	SHORT $LN44@erase
$LN43@erase:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Min
	add	esp, 4
	mov	DWORD PTR tv170[ebp], eax
$LN44@erase:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost
	mov	ecx, DWORD PTR tv170[ebp]
	mov	DWORD PTR [eax], ecx
$LN29@erase:

; 1370 : 
; 1371 : 			if (_Rmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN28@erase

; 1372 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1373 : 					? _Fixnodeparent	// largest is parent of erased node
; 1374 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN45@erase
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN46@erase
$LN45@erase:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Max
	add	esp, 4
	mov	DWORD PTR tv182[ebp], eax
$LN46@erase:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rmost
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR [eax], ecx
$LN28@erase:

; 1375 : 			}
; 1376 : 		else

	jmp	$LN27@erase
$LN35@erase:

; 1377 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1378 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1379 : 				_Pnode;	// link left up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1380 : 			this->_Left(_Pnode) =
; 1381 : 				this->_Left(_Erasednode);	// link successor down

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1382 : 
; 1383 : 			if (_Pnode == this->_Right(_Erasednode))

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN26@erase

; 1384 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 1385 : 			else

	jmp	$LN25@erase
$LN26@erase:

; 1386 : 				{	// successor further down, link in place of erased
; 1387 : 				_Fixnodeparent =
; 1388 : 					this->_Parent(_Pnode);	// parent is successor's

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 1389 : 				if (!this->_Isnil(_Fixnode))

	mov	edx, DWORD PTR __Fixnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN24@erase

; 1390 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax], edx
$LN24@erase:

; 1391 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1392 : 				this->_Right(_Pnode) =
; 1393 : 					this->_Right(_Erasednode);	// link next down

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1394 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1395 : 					_Pnode;	// right up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN25@erase:

; 1396 : 				}
; 1397 : 
; 1398 : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN23@erase

; 1399 : 				_Root() = _Pnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN22@erase
$LN23@erase:

; 1400 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN21@erase

; 1401 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1402 : 					_Pnode;	// link down to left

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1403 : 			else

	jmp	SHORT $LN22@erase
$LN21@erase:

; 1404 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1405 : 					_Pnode;	// link down to right

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN22@erase:

; 1406 : 
; 1407 : 			this->_Parent(_Pnode) =
; 1408 : 				this->_Parent(_Erasednode);	// link successor up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1409 : 			_STD swap(this->_Color(_Pnode),
; 1410 : 				this->_Color(_Erasednode));	// recolor it

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	push	eax
	call	??$swap@D@std@@YAXAAD0@Z		; std::swap<char>
	add	esp, 8
$LN27@erase:

; 1411 : 			}
; 1412 : 
; 1413 : 		if (this->_Color(_Erasednode) == this->_Black)

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	$LN19@erase

; 1414 : 			{	// erasing black link, must recolor/rebalance tree
; 1415 : 			for (; _Fixnode != _Root()
; 1416 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1417 : 				_Fixnodeparent = this->_Parent(_Fixnode))

	jmp	SHORT $LN18@erase
$LN17@erase:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx
$LN18@erase:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Root
	mov	edx, DWORD PTR __Fixnode$[ebp]
	cmp	edx, DWORD PTR [eax]
	je	$LN16@erase
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	$LN16@erase

; 1418 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN15@erase

; 1419 : 					{	// fixup left subtree
; 1420 : 					_Pnode = this->_Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax

; 1421 : 					if (this->_Color(_Pnode) == this->_Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN14@erase

; 1422 : 						{	// rotate red up from right subtree
; 1423 : 						this->_Color(_Pnode) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1424 : 						this->_Color(_Fixnodeparent) = this->_Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1425 : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lrotate

; 1426 : 						_Pnode = this->_Right(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN14@erase:

; 1427 : 						}
; 1428 : 
; 1429 : 					if (this->_Isnil(_Pnode))

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN13@erase

; 1430 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 1431 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

	jmp	$LN12@erase
$LN13@erase:

; 1432 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN11@erase
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN11@erase

; 1433 : 						{	// redden right subtree with black children
; 1434 : 						this->_Color(_Pnode) = this->_Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1435 : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 1436 : 						}
; 1437 : 					else

	jmp	$LN12@erase
$LN11@erase:

; 1438 : 						{	// must rearrange right subtree
; 1439 : 						if (this->_Color(this->_Right(_Pnode))
; 1440 : 							== this->_Black)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	cmp	eax, 1
	jne	SHORT $LN9@erase

; 1441 : 							{	// rotate red up from left sub-subtree
; 1442 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1443 : 							this->_Color(_Pnode) = this->_Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1444 : 							_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rrotate

; 1445 : 							_Pnode = this->_Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], eax
$LN9@erase:

; 1446 : 							}
; 1447 : 
; 1448 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 1449 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1450 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1451 : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lrotate

; 1452 : 						break;	// tree now recolored/rebalanced

	jmp	$LN16@erase
$LN12@erase:

; 1453 : 						}
; 1454 : 					}
; 1455 : 				else

	jmp	$LN8@erase
$LN15@erase:

; 1456 : 					{	// fixup right subtree
; 1457 : 					_Pnode = this->_Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1458 : 					if (this->_Color(_Pnode) == this->_Red)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN7@erase

; 1459 : 						{	// rotate red up from left subtree
; 1460 : 						this->_Color(_Pnode) = this->_Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1461 : 						this->_Color(_Fixnodeparent) = this->_Red;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1462 : 						_Rrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rrotate

; 1463 : 						_Pnode = this->_Left(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN7@erase:

; 1464 : 						}
; 1465 : 
; 1466 : 					if (this->_Isnil(_Pnode))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@erase

; 1467 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 1468 : 					else if (this->_Color(this->_Right(_Pnode)) ==

	jmp	$LN8@erase
$LN6@erase:

; 1469 : 						this->_Black
; 1470 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	SHORT $LN4@erase
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	cmp	edx, 1
	jne	SHORT $LN4@erase

; 1471 : 						{	// redden left subtree with black children
; 1472 : 						this->_Color(_Pnode) = this->_Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1473 : 						_Fixnode = _Fixnodeparent;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 1474 : 						}
; 1475 : 					else

	jmp	$LN8@erase
$LN4@erase:

; 1476 : 						{	// must rearrange left subtree
; 1477 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN2@erase

; 1478 : 							{	// rotate red up from right sub-subtree
; 1479 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1480 : 							this->_Color(_Pnode) = this->_Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 0

; 1481 : 							_Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lrotate

; 1482 : 							_Pnode = this->_Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN2@erase:

; 1483 : 							}
; 1484 : 
; 1485 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl

; 1486 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1487 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 1488 : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Rrotate

; 1489 : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN16@erase
$LN8@erase:

; 1490 : 						}
; 1491 : 					}

	jmp	$LN17@erase
$LN16@erase:

; 1492 : 
; 1493 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1
$LN19@erase:

; 1494 : 			}
; 1495 : 
; 1496 : 		this->_Getal().destroy(
; 1497 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	call	?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAU?$pair@$$CBMPAVFlightClass@@@2@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Myval
	add	esp, 4
	push	eax
	call	??$addressof@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@YAPAU?$pair@$$CBMPAVFlightClass@@@0@AAU10@@Z ; std::addressof<std::pair<float const ,FlightClass *> >
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@U?$pair@$$CBMPAVFlightClass@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBMPAVFlightClass@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::pair<float const ,FlightClass *> >

; 1498 : 
; 1499 : 		this->_Getal().deallocate(_Erasednode, 1);

	push	1
	mov	eax, DWORD PTR __Erasednode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate

; 1500 : 
; 1501 : 		if (0 < this->_Mysize)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jbe	SHORT $LN1@erase

; 1502 : 			--this->_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN1@erase:

; 1503 : 
; 1504 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN42@erase:

; 1505 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::end, COMDAT
; _this$ = ecx

; 1220 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1221 : 		return (iterator(this->_Myhead, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1222 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1210 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1211 : 		return (iterator(_Lmost(), this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Lmost
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1212 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >, COMDAT
; _this$ = ecx

; 1188 : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1189 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tidy

; 1190 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >, COMDAT
; _this$ = ecx

; 1071 : 		{	// construct empty tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >

; 1072 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree<std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::~_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z PROC ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >, COMDAT
; _this$ = ecx

; 1007 : 		{	// construct ordering predicate

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >

; 1008 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_comp@$0A@V?$_Tmap_traits@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@M@1@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ENDP ; std::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >::_Tree_comp<0,std::_Tmap_traits<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@XZ PROC ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::~_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::~_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z PROC ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >, COMDAT
; _this$ = ecx

; 893  : 		{	// construct from allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >

; 894  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_buy@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ENDP ; std::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >::_Tree_buy<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal, COMDAT
; _this$ = ecx

; 873  : 		{	// get allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 874  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 875  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 862  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 863  : 		this->_Getal().destroy(
; 864  : 			_STD addressof(this->_Left(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>

; 865  : 		this->_Getal().destroy(
; 866  : 			_STD addressof(this->_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>

; 867  : 		this->_Getal().destroy(
; 868  : 			_STD addressof(this->_Right(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::destroy<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>

; 869  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate

; 870  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
_TEXT	SEGMENT
tv150 = -56						; size = 4
tv149 = -52						; size = 4
tv148 = -48						; size = 4
tv147 = -44						; size = 4
tv146 = -40						; size = 4
tv145 = -36						; size = 4
_this$ = -32						; size = 4
__Pnode$ = -28						; size = 4
$T2 = -21						; size = 1
$T3 = -20						; size = 1
$T4 = -19						; size = 1
$T5 = -18						; size = 1
$T6 = -17						; size = 1
__$EHRec$ = -16						; size = 16
?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 841  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 842  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

	push	1
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 843  : 
; 844  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 845  : 		this->_Getal().construct(
; 846  : 			_STD addressof(this->_Left(_Pnode)), _Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	DWORD PTR tv145[ebp], eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	DWORD PTR tv146[ebp], eax
	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv145[ebp]
	push	ecx
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv146[ebp]
	call	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>

; 847  : 		this->_Getal().construct(
; 848  : 			_STD addressof(this->_Parent(_Pnode)), _Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
	add	esp, 4
	mov	DWORD PTR tv147[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	DWORD PTR tv148[ebp], eax
	lea	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv147[ebp]
	push	edx
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv148[ebp]
	call	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>

; 849  : 		this->_Getal().construct(
; 850  : 			_STD addressof(this->_Right(_Pnode)), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	DWORD PTR tv150[ebp], eax
	lea	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv150[ebp]
	call	??$construct@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::construct<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> *,std::_Tree_node<std::pair<float const ,FlightClass *>,void *> * &>
	jmp	SHORT $LN4@Buyheadnod
__catch$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ$0:

; 851  : 		_CATCH_ALL
; 852  : 		this->_Getal().deallocate(_Pnode, 1);

	push	1
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate

; 853  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 854  : 		_CATCH_END

	mov	eax, $LN7@Buyheadnod
	ret	0
$LN4@Buyheadnod:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ$1
$LN7@Buyheadnod:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ$1:

; 855  : 
; 856  : 		this->_Color(_Pnode) = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 857  : 		this->_Isnil(_Pnode) = true;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	mov	BYTE PTR [eax], 1

; 858  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buyheadnod:

; 859  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Buyheadnode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >, COMDAT
; _this$ = ecx

; 782  : 		{	// destroy head node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 783  : 		_Freeheadnode(this->_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Freeheadnode

; 784  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::~_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z PROC ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >, COMDAT
; _this$ = ecx

; 776  : 	_Tree_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >

; 777  : 		{	// construct head node, allocator from _Al
; 778  : 		this->_Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@XZ ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Buyheadnode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 779  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_alloc@$0A@U?$_Tree_base_types@U?$pair@$$CBMPAVFlightClass@@@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@1@@Z ENDP ; std::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >::_Tree_alloc<0,std::_Tree_base_types<std::pair<float const ,FlightClass *>,std::allocator<std::pair<float const ,FlightClass *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Min, COMDAT

; 619  : 		{	// return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 620  : 		while (!_Isnil(_Left(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Min

; 621  : 			_Pnode = _Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Min
$LN1@Min:

; 622  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Max, COMDAT

; 612  : 		{	// return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Max:

; 613  : 		while (!_Isnil(_Right(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
	add	esp, 4
	movsx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN1@Max

; 614  : 			_Pnode = _Right(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Max
$LN1@Max:

; 615  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 616  : 		}

	pop	ebp
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Max
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAU?$pair@$$CBMPAVFlightClass@@@2@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAU?$pair@$$CBMPAVFlightClass@@@2@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Myval, COMDAT

; 607  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 608  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H

; 609  : 		}

	pop	ebp
	ret	0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAU?$pair@$$CBMPAVFlightClass@@@2@PAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right, COMDAT

; 602  : 		{	// return reference to right pointer in node

	push	ebp
	mov	ebp, esp

; 603  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 604  : 		}

	pop	ebp
	ret	0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Right
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent, COMDAT

; 597  : 		{	// return reference to parent pointer in node

	push	ebp
	mov	ebp, esp

; 598  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 599  : 		}

	pop	ebp
	ret	0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left, COMDAT

; 592  : 		{	// return reference to left pointer in node

	push	ebp
	mov	ebp, esp

; 593  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 594  : 		}

	pop	ebp
	ret	0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Left
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil, COMDAT

; 587  : 		{	// return reference to nil flag in node

	push	ebp
	mov	ebp, esp

; 588  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 13					; 0000000dH

; 589  : 		}

	pop	ebp
	ret	0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color, COMDAT

; 582  : 		{	// return reference to color in node

	push	ebp
	mov	ebp, esp

; 583  : 		return ((char&)_Pnode->_Color);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 12					; 0000000cH

; 584  : 		}

	pop	ebp
	ret	0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >, COMDAT
; _this$ = ecx

; 571  : 	_Tree_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 572  : 		{	// initialize data
; 573  : 		this->_Myhead = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 574  : 		this->_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 575  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >::_Tree_val<std::_Tree_simple_types<std::pair<float const ,FlightClass *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@YAPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@0@IPAU10@@Z ; std::_Allocate<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBMPAVFlightClass@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >::allocator<std::_Tree_node<std::pair<float const ,FlightClass *>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<float const ,FlightClass *> >::allocator<std::pair<float const ,FlightClass *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<float const ,FlightClass *> >::allocator<std::pair<float const ,FlightClass *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?Fuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Fuel@AirframeClass@@QAEMXZ PROC			; AirframeClass::Fuel, COMDAT
; _this$ = ecx

; 1183 : 	float Fuel (void) {return fuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?Fuel@AirframeClass@@QAEMXZ ENDP			; AirframeClass::Fuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetEvalFlags@FlightClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEvalFlags@FlightClass@@QAEEXZ PROC			; FlightClass::GetEvalFlags, COMDAT
; _this$ = ecx

; 104  : 		uchar GetEvalFlags (void)					{ return eval_flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+382]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEvalFlags@FlightClass@@QAEEXZ ENDP			; FlightClass::GetEvalFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetAssignedTarget@FlightClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAssignedTarget@FlightClass@@QAE?AVVU_ID@@XZ PROC	; FlightClass::GetAssignedTarget, COMDAT
; _this$ = ecx

; 97   : 		VU_ID GetAssignedTarget (void)				{ return assigned_target; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	edx, DWORD PTR [eax+300]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAssignedTarget@FlightClass@@QAE?AVVU_ID@@XZ ENDP	; FlightClass::GetAssignedTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ PROC		; UnitClass::GetTargetID, COMDAT
; _this$ = ecx

; 367  : 	VU_ID GetTargetID (void)						{ return target_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR [eax+216]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ ENDP		; UnitClass::GetTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAltitude@UnitClass@@QAEHXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?GetUnitAltitude@UnitClass@@QAEHXZ PROC			; UnitClass::GetUnitAltitude, COMDAT
; _this$ = ecx

; 343  : 	int GetUnitAltitude (void)						{ return FloatToInt32(ZPos()*-1.0F); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv76[ebp]
	movss	xmm0, DWORD PTR tv76[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitAltitude@UnitClass@@QAEHXZ ENDP			; UnitClass::GetUnitAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Aborted@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Aborted@UnitClass@@QBEHXZ PROC				; UnitClass::Aborted, COMDAT
; _this$ = ecx

; 321  : 	int Aborted () const								{ return (int)unit_flags & U_BROKEN; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32768				; 00008000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Aborted@UnitClass@@QBEHXZ ENDP				; UnitClass::Aborted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetIdentified@CampBaseClass@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 1
?GetIdentified@CampBaseClass@@QAEHE@Z PROC		; CampBaseClass::GetIdentified, COMDAT
; _this$ = ecx

; 294  : 	int GetIdentified (Team t)					{   return (spotted >> (t + 8)) & 0x01; } // 2002-02-11 ADDED BY S.G. Getter to know if the target is identified or not.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+148]
	movzx	ecx, BYTE PTR _t$[ebp]
	add	ecx, 8
	sar	eax, cl
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIdentified@CampBaseClass@@QAEHE@Z ENDP		; CampBaseClass::GetIdentified
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GFalconAWACSMessage@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFalconAWACSMessage@@UAEPAXI@Z PROC			; FalconAWACSMessage::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconAWACSMessage@@UAE@XZ		; FalconAWACSMessage::~FalconAWACSMessage
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFalconAWACSMessage@@UAEPAXI@Z ENDP			; FalconAWACSMessage::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\awacsmsg.cpp
_TEXT	SEGMENT
$T2 = -500						; size = 8
$T3 = -492						; size = 8
$T4 = -484						; size = 8
$T5 = -476						; size = 8
$T6 = -468						; size = 8
$T7 = -460						; size = 8
$T8 = -452						; size = 8
$T9 = -444						; size = 8
$T10 = -436						; size = 8
$T11 = -428						; size = 8
$T12 = -420						; size = 8
$T13 = -412						; size = 8
$T14 = -404						; size = 8
_numAircraft$15 = -396					; size = 4
_pBestInterceptorFlight$16 = -392			; size = 4
_delay1$ = -388						; size = 4
_fInterceptorRange$17 = -384				; size = 4
_arrCandidates$18 = -380				; size = 8
_myit$19 = -372						; size = 12
_myit$20 = -360						; size = 12
_myit$21 = -348						; size = 12
$T22 = -336						; size = 4
tv3113 = -332						; size = 4
tv3536 = -328						; size = 4
tv3915 = -324						; size = 4
tv3540 = -320						; size = 4
_tgtId$23 = -316					; size = 8
tv3917 = -308						; size = 4
$T24 = -304						; size = 4
tv3532 = -300						; size = 4
$T25 = -296						; size = 4
tv3528 = -292						; size = 4
_numAircraft$26 = -288					; size = 4
tv3793 = -284						; size = 4
tv3880 = -280						; size = 4
$T27 = -276						; size = 4
_awacsMsg$28 = -272					; size = 4
tv204 = -268						; size = 4
tv243 = -264						; size = 4
_bestdist$29 = -260					; size = 4
$T30 = -256						; size = 4
_dist$31 = -252						; size = 4
_theThreat$32 = -248					; size = 4
_dy$33 = -244						; size = 4
tv340 = -240						; size = 4
_dx$34 = -236						; size = 4
tv329 = -232						; size = 4
_meflags$35 = -228					; size = 4
_campThreat$36 = -224					; size = 4
tv297 = -220						; size = 4
_flight_ptr$37 = -216					; size = 4
_divertBase$38 = -212					; size = 4
_awacs$39 = -208					; size = 4
_nu$40 = -204						; size = 4
_simThing$41 = -200					; size = 4
_nu$42 = -196						; size = 4
_nu$43 = -192						; size = 4
_pack$44 = -188						; size = 4
_hasFuel$45 = -184					; size = 4
_targetId$46 = -180					; size = 8
_airbase$ = -172					; size = 4
_leadElement$47 = -168					; size = 4
_tanker$ = -164						; size = 4
_this$ = -160						; size = 4
_cf$48 = -156						; size = 4
_simThreat$49 = -152					; size = 4
_Y$50 = -148						; size = 2
_X$51 = -144						; size = 2
_campThreat$52 = -140					; size = 4
_carrier$ = -136					; size = 4
_numAircraft$53 = -132					; size = 4
_campThing$54 = -128					; size = 4
_theRadar$55 = -124					; size = 4
_hasWeaps$56 = -120					; size = 4
_campThreat$57 = -116					; size = 4
_role$58 = -112						; size = 4
_pEnemyFlight$59 = -108					; size = 4
_cf$60 = -104						; size = 4
_randNum$ = -100					; size = 4
_altitude$ = -96					; size = 4
_tankerFlight$ = -92					; size = 4
_cf$61 = -88						; size = 4
_target$62 = -84					; size = 4
_newTarg$63 = -80					; size = 4
_simThreat$64 = -76					; size = 4
_target$65 = -72					; size = 4
_radioMessage$66 = -68					; size = 4
_sms$67 = -64						; size = 4
_hp$68 = -60						; size = 4
_otherThing$ = -56					; size = 4
_Y$ = -52						; size = 2
_X$ = -48						; size = 2
_delay$ = -44						; size = 4
_plane$ = -40						; size = 4
_flight$ = -36						; size = 4
_radioMessage$ = -32					; size = 4
_pos$69 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_autodisp$ = 8						; size = 1
?Process@FalconAWACSMessage@@MAEHE@Z PROC		; FalconAWACSMessage::Process
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Process@FalconAWACSMessage@@MAEHE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 488				; 000001e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	float altitude;
; 153  : 	short X,Y;
; 154  : 	Flight		flight = NULL;

	mov	DWORD PTR _flight$[ebp], 0

; 155  : 	AircraftClass *plane = NULL;

	mov	DWORD PTR _plane$[ebp], 0

; 156  : 	FalconEntity* otherThing = NULL; // 2002-02-28 REINSTATED BY S.G. Could be a sim or a campaign object

	mov	DWORD PTR _otherThing$[ebp], 0

; 157  : //	CampBaseClass* otherThing = NULL;
; 158  : 	FalconRadioChatterMessage* radioMessage = NULL;

	mov	DWORD PTR _radioMessage$[ebp], 0

; 159  : 	Objective airbase = NULL;

	mov	DWORD PTR _airbase$[ebp], 0

; 160  : 	Flight	tankerFlight = NULL;

	mov	DWORD PTR _tankerFlight$[ebp], 0

; 161  : 	AircraftClass *tanker = NULL;

	mov	DWORD PTR _tanker$[ebp], 0

; 162  : 	TaskForce carrier = NULL; // VectorToCarrier

	mov	DWORD PTR _carrier$[ebp], 0

; 163  :    int randNum;
; 164  :    ulong delay = 2 * CampaignSeconds; // default delay

	mov	DWORD PTR _delay$[ebp], 2000		; 000007d0H

; 165  :    ulong delay1 = g_nChatterInterval * CampaignSeconds; // FRB - user-controlled delay

	mov	eax, DWORD PTR ?g_nChatterInterval@@3HA	; g_nChatterInterval
	imul	eax, 1000				; 000003e8H
	mov	DWORD PTR _delay1$[ebp], eax

; 166  : 	
; 167  : 	if (autodisp)

	movzx	ecx, BYTE PTR _autodisp$[ebp]
	test	ecx, ecx
	je	SHORT $LN186@Process

; 168  : 		return 0;

	xor	eax, eax
	jmp	$LN187@Process
$LN186@Process:

; 169  : 	if (!PlayerOptions.PlayerRadioVoice)

	movzx	edx, BYTE PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+201
	test	edx, edx
	jne	SHORT $LN185@Process

; 170  : 	    delay = 500; // shorter 

	mov	DWORD PTR _delay$[ebp], 500		; 000001f4H
$LN185@Process:

; 171  : 	MonoPrint("AWACS message #%d playing.\n", dataBlock.type);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	push	OFFSET ??_C@_0BM@BKNKFJCB@AWACS?5message?5?$CD?$CFd?5playing?4?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 172  : 
; 173  : 	plane = (AircraftClass*)vuDatabase->Find (EntityId());

	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityId@VuMessage@@QBE?AVVU_ID@@XZ	; VuMessage::EntityId
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _plane$[ebp], eax

; 174  : 	
; 175  : 	if (plane && plane->IsSim())

	cmp	DWORD PTR _plane$[ebp], 0
	je	$LN174@Process
	mov	ecx, DWORD PTR _plane$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN174@Process

; 176  : 	{
; 177  : 		flight = (Flight)plane->GetCampaignObject();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 178  : 		
; 179  : 		if (g_bAWACSRequired) { // JPO - an awacs for this flight is required

	movzx	eax, BYTE PTR ?g_bAWACSRequired@@3_NA	; g_bAWACSRequired
	test	eax, eax
	je	$LN182@Process

; 180  : 		    Flight	awacs = flight->GetFlightController();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	DWORD PTR _awacs$39[ebp], eax

; 181  : 			if (awacs == NULL) // 2001-09-23 ADDED BY M.N. no AWACS assigned to the package ?

	cmp	DWORD PTR _awacs$39[ebp], 0
	jne	$LN182@Process

; 182  : 			{				   //               -> check if there is an AWACS in the sky at all
; 183  : 				Unit				nu,cf;
; 184  : 				VuListIterator		myit(AllAirList);

	mov	ecx, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	ecx
	lea	ecx, DWORD PTR _myit$21[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 185  : 				nu = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$21[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _nu$40[ebp], eax
$LN203@Process:

; 186  : 				while (nu){

	cmp	DWORD PTR _nu$40[ebp], 0
	je	$LN180@Process

; 187  : 					cf = nu;

	mov	edx, DWORD PTR _nu$40[ebp]
	mov	DWORD PTR _cf$60[ebp], edx

; 188  : 					nu = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$21[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nu$40[ebp], eax

; 189  : 					if (!cf->IsFlight() || cf->IsDead())

	mov	eax, DWORD PTR _cf$60[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN178@Process
	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN179@Process
$LN178@Process:

; 190  : 						continue;

	jmp	SHORT $LN203@Process
$LN179@Process:

; 191  : // 2002-03-07 MN of course only AWACS from our team - doh!
; 192  : 					if (cf->GetUnitMission() == AMIS_AWACS && cf->GetTeam() == plane->GetTeam())

	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 26					; 0000001aH
	jne	SHORT $LN177@Process
	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$60[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN177@Process

; 193  : 					{
; 194  : 							awacs = (Flight) cf;

	mov	edx, DWORD PTR _cf$60[ebp]
	mov	DWORD PTR _awacs$39[ebp], edx

; 195  : 							break;

	jmp	SHORT $LN180@Process
$LN177@Process:

; 196  : 					}
; 197  : 				}

	jmp	$LN203@Process
$LN180@Process:

; 198  : 				if (awacs == NULL)

	cmp	DWORD PTR _awacs$39[ebp], 0
	jne	SHORT $LN176@Process

; 199  : 					return 0;

	mov	DWORD PTR $T25[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$21[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T25[ebp]
	jmp	$LN187@Process
$LN176@Process:

; 200  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$21[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN182@Process:

; 201  : 		}
; 202  : 		switch (dataBlock.type)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv204[ebp], ecx
	cmp	DWORD PTR tv204[ebp], 32		; 00000020H
	ja	$LN174@Process
	mov	edx, DWORD PTR tv204[ebp]
	movzx	eax, BYTE PTR $LN207@Process[edx]
	jmp	DWORD PTR $LN211@Process[eax*4]
$LN173@Process:

; 203  : 		{
; 204  : 		case Unable:
; 205  : //			SendCallToAWACS(plane, rcUNABLE);
; 206  : 			// KCK: Reply to any pending diverts
; 207  : 			if(plane->IsLocal())

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN172@Process

; 208  : 				CheckDivertStatus (DIVERT_REPLY_NO);

	push	2
	call	?CheckDivertStatus@@YAHH@Z		; CheckDivertStatus
	add	esp, 4
$LN172@Process:

; 209  : 			//rcUNABLE
; 210  : 			break;

	jmp	$LN174@Process
$LN171@Process:

; 211  : 
; 212  : 		case Wilco:
; 213  : //			SendCallToAWACS(plane, rcCOPY);
; 214  : 			// KCK: Reply to any pending diverts
; 215  : 			if(plane->IsLocal())

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN170@Process

; 216  : 				CheckDivertStatus (DIVERT_REPLY_YES);

	push	3
	call	?CheckDivertStatus@@YAHH@Z		; CheckDivertStatus
	add	esp, 4
$LN170@Process:

; 217  : 			//rcCOPY
; 218  : 			break;

	jmp	$LN174@Process
$LN169@Process:

; 219  : 
; 220  : 		case Judy:
; 221  : 			// This is the flight's request.
; 222  : //			SendCallToAWACS(plane, rcJUDY);
; 223  : 			radioMessage = new FalconRadioChatterMessage( FalconNullId , FalconLocalSession );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T27[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T27[ebp], 0
	je	SHORT $LN189@Process
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR $T27[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv243[ebp], eax
	jmp	SHORT $LN190@Process
$LN189@Process:
	mov	DWORD PTR tv243[ebp], 0
$LN190@Process:
	mov	edx, DWORD PTR tv243[ebp]
	mov	DWORD PTR $T24[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T24[ebp]
	mov	DWORD PTR _radioMessage$[ebp], eax

; 224  : 			radioMessage->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+60], 1

; 225  : 			radioMessage->dataBlock.from = plane->Id();

	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR _plane$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 226  : 			radioMessage->dataBlock.voice_id = (uchar)flight->GetPilotVoiceID(plane->pilotSlot);

	mov	ecx, DWORD PTR _plane$[ebp]
	movzx	edx, BYTE PTR [ecx+665]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 227  : 			radioMessage->dataBlock.message = rcJUDY;

	mov	edx, 154				; 0000009aH
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+62], dx

; 228  : 			radioMessage->dataBlock.edata[0] = flight->callsign_id;				 

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 229  : 			radioMessage->dataBlock.edata[1] = (short)ConvertFlightNumberToCallNumber(flight->callsign_num);

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 230  : 			FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 231  : 
; 232  : 			if(plane->IsLocal())

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN168@Process

; 233  : 			{				
; 234  : 				AWACSon = !AWACSon;

	cmp	DWORD PTR ?AWACSon@@3HA, 0		; AWACSon
	jne	SHORT $LN191@Process
	mov	DWORD PTR tv297[ebp], 1
	jmp	SHORT $LN192@Process
$LN191@Process:
	mov	DWORD PTR tv297[ebp], 0
$LN192@Process:
	mov	edx, DWORD PTR tv297[ebp]
	mov	DWORD PTR ?AWACSon@@3HA, edx		; AWACSon
$LN168@Process:

; 235  : 			}
; 236  : 			//rcJUDY
; 237  : 			break;

	jmp	$LN174@Process
$LN167@Process:

; 238  : 
; 239  : 		case RequestPicture:
; 240  : 			{				
; 241  : //				SendCallToAWACS (plane, rcPICTUREQUERY, FalconLocalSession);
; 242  : 
; 243  : 				if(plane->IsLocal())

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	$LN166@Process

; 244  : 				{
; 245  : 					AWACSon = TRUE;

	mov	DWORD PTR ?AWACSon@@3HA, 1		; AWACSon

; 246  : 
; 247  : 					FalconAWACSMessage *awacsMsg = new FalconAWACSMessage (plane->Id(), FalconLocalGame);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T30[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T30[ebp], 0
	je	SHORT $LN195@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN193@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv329[ebp], eax
	jmp	SHORT $LN194@Process
$LN193@Process:
	mov	DWORD PTR tv329[ebp], 0
$LN194@Process:
	push	1
	mov	edx, DWORD PTR tv329[ebp]
	push	edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _plane$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T30[ebp]
	call	??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconAWACSMessage::FalconAWACSMessage
	mov	DWORD PTR tv340[ebp], eax
	jmp	SHORT $LN196@Process
$LN195@Process:
	mov	DWORD PTR tv340[ebp], 0
$LN196@Process:
	mov	eax, DWORD PTR tv340[ebp]
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T22[ebp]
	mov	DWORD PTR _awacsMsg$28[ebp], ecx

; 248  : 					awacsMsg->dataBlock.type = GivePicture;

	mov	edx, DWORD PTR _awacsMsg$28[ebp]
	mov	DWORD PTR [edx+56], 16			; 00000010H

; 249  : 					FalconSendMessage (awacsMsg,TRUE);

	push	1
	mov	eax, DWORD PTR _awacsMsg$28[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN166@Process:

; 250  : 				}
; 251  : 			}
; 252  : 			break;

	jmp	$LN174@Process
$LN165@Process:

; 253  : 
; 254  : 		case GivePicture:
; 255  : 			{
; 256  : 				if(!AWACSon)

	cmp	DWORD PTR ?AWACSon@@3HA, 0		; AWACSon
	jne	SHORT $LN164@Process

; 257  : 					return 0;

	xor	eax, eax
	jmp	$LN187@Process
$LN164@Process:

; 258  : 					
; 259  : 				CampBaseClass *campThreat = NULL;

	mov	DWORD PTR _campThreat$36[ebp], 0

; 260  : 				SimBaseClass *theThreat = NULL;

	mov	DWORD PTR _theThreat$32[ebp], 0

; 261  : 				/*
; 262  : 				SimBaseClass *theThreat = SimDriver.FindNearestThreat (plane, &X, &Y, &altitude);
; 263  : 				if (theThreat)
; 264  : 				{
; 265  : 					radioMessage = CreateCallFromAwacs (flight, rcPICTUREBRA, FalconLocalSession);
; 266  : 					//for now 4 sounds better (also almost always true :)
; 267  : 					radioMessage->dataBlock.edata[4] =4;	//picture
; 268  : 					//for now let's not play this part
; 269  : 					radioMessage->dataBlock.edata[5] = -1;	//split type
; 270  : 					radioMessage->dataBlock.edata[6] = X;
; 271  : 					radioMessage->dataBlock.edata[7] = Y;
; 272  : 					radioMessage->dataBlock.edata[8] = FloatToInt32(altitude);
; 273  : 					MonoPrint ("Making threat call\n");
; 274  : 				}
; 275  : 				else if(campThreat = SimDriver.FindNearestCampThreat (plane, &X, &Y, &altitude))
; 276  : 				{
; 277  : 					radioMessage = CreateCallFromAwacs(flight, rcPICTUREBRA);
; 278  : 					//for now 4 sounds better (also almost always true :)
; 279  : 					radioMessage->dataBlock.edata[4] =4;	//picture
; 280  : 					//for now let's not play this part
; 281  : 					radioMessage->dataBlock.edata[5] = -1;	//split type
; 282  : 					radioMessage->dataBlock.edata[6] = X;
; 283  : 					radioMessage->dataBlock.edata[7] = Y;
; 284  : 					radioMessage->dataBlock.edata[8] = FloatToInt32(altitude);
; 285  : 				}
; 286  : 				else */ 
; 287  : 				theThreat = SimDriver.FindNearestEnemyPlane (plane, &X, &Y, &altitude);

	lea	ecx, DWORD PTR _altitude$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Y$[ebp]
	push	edx
	lea	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindNearestEnemyPlane@SimulationDriver@@QAEPAVSimBaseClass@@PAVAircraftClass@@PAF1PAM@Z ; SimulationDriver::FindNearestEnemyPlane
	mov	DWORD PTR _theThreat$32[ebp], eax

; 288  : 				if(theThreat)

	cmp	DWORD PTR _theThreat$32[ebp], 0
	je	$LN163@Process

; 289  : 				{
; 290  : 					radioMessage = CreateCallFromAwacsPlane (plane, rcPICTUREBRA);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	236					; 000000ecH
	mov	edx, DWORD PTR _plane$[ebp]
	push	edx
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 291  : 					//for now 4 sounds better (also almost always true :)
; 292  : 					radioMessage->dataBlock.edata[4] =4;	//picture

	mov	eax, 2
	shl	eax, 2
	mov	ecx, 4
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 293  : 					//for now let's not play this part
; 294  : 					radioMessage->dataBlock.edata[5] = -1;	//split type

	mov	eax, 2
	imul	eax, 5
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 295  : 					radioMessage->dataBlock.edata[6] = X;

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _X$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 296  : 					radioMessage->dataBlock.edata[7] = Y;

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _Y$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 297  : 					radioMessage->dataBlock.edata[8] = (short)FloatToInt32(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 298  : 					MonoPrint ("Making threat call\n");

	push	OFFSET ??_C@_0BE@EDPGFDMC@Making?5threat?5call?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 299  : 				}
; 300  : 				else 

	jmp	$LN160@Process
$LN163@Process:

; 301  : 				{
; 302  : 					campThreat = SimDriver.FindNearestCampEnemy (plane, &X, &Y, &altitude);

	lea	eax, DWORD PTR _altitude$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindNearestCampEnemy@SimulationDriver@@QAEPAVCampBaseClass@@PAVAircraftClass@@PAF1PAM@Z ; SimulationDriver::FindNearestCampEnemy
	mov	DWORD PTR _campThreat$36[ebp], eax

; 303  : 					if(campThreat)

	cmp	DWORD PTR _campThreat$36[ebp], 0
	je	$LN161@Process

; 304  : 					{
; 305  : 						radioMessage = CreateCallFromAwacsPlane(plane, rcPICTUREBRA);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	236					; 000000ecH
	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 306  : 						//for now 4 sounds better (also almost always true :)
; 307  : 						radioMessage->dataBlock.edata[4] =4;	//picture

	mov	edx, 2
	shl	edx, 2
	mov	eax, 4
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 308  : 						//for now let's not play this part
; 309  : 						radioMessage->dataBlock.edata[5] = -1;	//split type

	mov	edx, 2
	imul	edx, 5
	or	eax, -1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 310  : 						radioMessage->dataBlock.edata[6] = X;

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _X$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 311  : 						radioMessage->dataBlock.edata[7] = Y;

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _Y$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 312  : 						radioMessage->dataBlock.edata[8] = (short)FloatToInt32(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, 2
	shl	edx, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 313  : 					}
; 314  : 					else

	jmp	SHORT $LN160@Process
$LN161@Process:

; 315  : 					{
; 316  : 						radioMessage = CreateCallFromAwacsPlane (plane, rcPICTURECLEAR, FalconLocalSession);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	139					; 0000008bH
	mov	edx, DWORD PTR _plane$[ebp]
	push	edx
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 317  : 						MonoPrint ("No threats detected :->\n");

	push	OFFSET ??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN160@Process:

; 318  : 					}
; 319  : 				}
; 320  : 				radioMessage->dataBlock.time_to_play = delay; //wait a little bit so the request will play first

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 321  : 				FalconSendMessage(radioMessage, FALSE);				

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 322  : 			}
; 323  : 			break;

	jmp	$LN174@Process
$LN159@Process:

; 324  : 			
; 325  : 		case RequestHelp:
; 326  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN158@Process

; 327  : 			{
; 328  : 				int numAircraft = 0;

	mov	DWORD PTR _numAircraft$15[ebp], 0

; 329  : //				SendCallToAWACS(plane, rcVECTORTOTHREAT);
; 330  : 				CampBaseClass *campThreat = NULL;

	mov	DWORD PTR _campThreat$57[ebp], 0

; 331  : 				SimBaseClass *simThreat = NULL; //SimDriver.FindNearestEnemyPlane(plane, &X, &Y, &altitude);

	mov	DWORD PTR _simThreat$64[ebp], 0

; 332  : 				stdRange2FlightMap arrCandidates;

	lea	ecx, DWORD PTR _arrCandidates$18[ebp]
	call	??0?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ ; std::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >::map<float,FlightClass *,std::less<float>,std::allocator<std::pair<float const ,FlightClass *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 333  : 				FlightClass *pEnemyFlight = NULL;

	mov	DWORD PTR _pEnemyFlight$59[ebp], 0

; 334  : 				FlightClass *pBestInterceptorFlight = NULL;

	mov	DWORD PTR _pBestInterceptorFlight$16[ebp], 0

; 335  : 				float fInterceptorRange = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fInterceptorRange$17[ebp], xmm0

; 336  : 				
; 337  : 				// First see if we are already targeting someone. Request help against him
; 338  : 				VU_ID tgtId = FindAircraftTarget(plane);

	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tgtId$23[ebp]
	push	ecx
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8

; 339  : 				if (tgtId) {

	lea	ecx, DWORD PTR _tgtId$23[ebp]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	$LN152@Process

; 340  : 					FalconEntity* newTarg = (FalconEntity*)vuDatabase->Find(tgtId);

	mov	edx, DWORD PTR _tgtId$23[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tgtId$23[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _newTarg$63[ebp], eax

; 341  : 					if (newTarg && (newTarg->IsFlight() || newTarg->IsAirplane())) {

	cmp	DWORD PTR _newTarg$63[ebp], 0
	je	SHORT $LN152@Process
	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN155@Process
	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN152@Process
$LN155@Process:

; 342  : 						if(newTarg->IsFlight())

	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN154@Process

; 343  : 							pEnemyFlight = (FlightClass *) newTarg;

	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	DWORD PTR _pEnemyFlight$59[ebp], ecx
	jmp	SHORT $LN152@Process
$LN154@Process:

; 344  : 
; 345  : 						else if(newTarg->IsAirplane())

	mov	edx, DWORD PTR _newTarg$63[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _newTarg$63[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN152@Process

; 346  : 							pEnemyFlight = (FlightClass *)((SimBaseClass *)newTarg)->GetCampaignObject();

	mov	ecx, DWORD PTR _newTarg$63[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _pEnemyFlight$59[ebp], eax
$LN152@Process:

; 347  : 					}
; 348  : 				}
; 349  : 
; 350  : 				// Now look at what's around us if we weren't targeting someone ourself
; 351  : 				if (!pEnemyFlight) 

	cmp	DWORD PTR _pEnemyFlight$59[ebp], 0
	jne	$LN143@Process

; 352  : 				{
; 353  : 					simThreat = SimDriver.FindNearestThreat(plane, &X, &Y, &altitude);

	lea	eax, DWORD PTR _altitude$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindNearestThreat@SimulationDriver@@QAEPAVSimBaseClass@@PAVAircraftClass@@PAF1PAM@Z ; SimulationDriver::FindNearestThreat
	mov	DWORD PTR _simThreat$64[ebp], eax

; 354  : 				
; 355  : 					if(simThreat && (simThreat->IsFlight() || simThreat->IsAirplane()))

	cmp	DWORD PTR _simThreat$64[ebp], 0
	je	SHORT $LN150@Process
	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN149@Process
	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN150@Process
$LN149@Process:

; 356  : 					{
; 357  : 						if(simThreat->IsFlight())

	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN148@Process

; 358  : 							pEnemyFlight = (FlightClass *) simThreat;

	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	DWORD PTR _pEnemyFlight$59[ebp], ecx
	jmp	SHORT $LN146@Process
$LN148@Process:

; 359  : 	
; 360  : 						else if(simThreat->IsAirplane())

	mov	edx, DWORD PTR _simThreat$64[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _simThreat$64[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN146@Process

; 361  : 							pEnemyFlight = (FlightClass *) simThreat->GetCampaignObject();

	mov	ecx, DWORD PTR _simThreat$64[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _pEnemyFlight$59[ebp], eax
$LN146@Process:

; 362  : 					}
; 363  : 	
; 364  : 					else 

	jmp	SHORT $LN143@Process
$LN150@Process:

; 365  : 					{
; 366  : 						campThreat = SimDriver.FindNearestCampThreat (plane, &X, &Y, &altitude);

	lea	eax, DWORD PTR _altitude$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindNearestCampThreat@SimulationDriver@@QAEPAVCampBaseClass@@PAVAircraftClass@@PAF1PAM@Z ; SimulationDriver::FindNearestCampThreat
	mov	DWORD PTR _campThreat$57[ebp], eax

; 367  : 	
; 368  : 						if(campThreat && (campThreat->IsFlight()))

	cmp	DWORD PTR _campThreat$57[ebp], 0
	je	SHORT $LN143@Process
	mov	ecx, DWORD PTR _campThreat$57[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campThreat$57[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN143@Process

; 369  : 						{
; 370  : 							if(campThreat->IsFlight())

	mov	ecx, DWORD PTR _campThreat$57[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campThreat$57[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN143@Process

; 371  : 								pEnemyFlight = (FlightClass *) campThreat;

	mov	ecx, DWORD PTR _campThreat$57[ebp]
	mov	DWORD PTR _pEnemyFlight$59[ebp], ecx
$LN143@Process:

; 372  : 						}
; 373  : 					}
; 374  : 				}
; 375  : 
; 376  : 				if(pEnemyFlight && !pEnemyFlight->Aborted())

	cmp	DWORD PTR _pEnemyFlight$59[ebp], 0
	je	SHORT $LN142@Process
	mov	ecx, DWORD PTR _pEnemyFlight$59[ebp]
	call	?Aborted@UnitClass@@QBEHXZ		; UnitClass::Aborted
	test	eax, eax
	jne	SHORT $LN142@Process

; 377  : 				{
; 378  : 					RequestIntercept(pEnemyFlight, plane->GetTeam(), RI_HELP);

	push	1
	mov	edx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _pEnemyFlight$59[ebp]
	push	ecx
	call	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
	add	esp, 12					; 0000000cH

; 379  : 					// This is the awacs's response
; 380  : 					radioMessage = CreateCallFromAwacs(flight, rcAIRCOVERSENT);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	4
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 381  : 					radioMessage->dataBlock.edata[4] = -1; // No ETA time calculatable at this time

	mov	eax, 2
	shl	eax, 2
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 382  : 					radioMessage->dataBlock.time_to_play = delay;	// Delay the response

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 383  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 384  : 				}
; 385  : 
; 386  : 				else

	jmp	SHORT $LN141@Process
$LN142@Process:

; 387  : 				{
; 388  : 					radioMessage = CreateCallFromAwacs(flight, rcNOTARGETS);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	70					; 00000046H
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 389  : 					MonoPrint ("No threats detected :->\n");

	push	OFFSET ??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN141@Process:

; 390  : 				}
; 391  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arrCandidates$18[ebp]
	call	??1?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ
$LN158@Process:

; 392  : 			break;

	jmp	$LN174@Process
$LN140@Process:

; 393  : 
; 394  : 		case RequestRelief:
; 395  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN139@Process

; 396  : 				{
; 397  : 				int hasFuel=0,hasWeaps=0,role;

	mov	DWORD PTR _hasFuel$45[ebp], 0
	mov	DWORD PTR _hasWeaps$56[ebp], 0

; 398  : 				int hp;
; 399  : 				SMSClass *sms = (SMSClass*) plane->GetSMS();

	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx+464]
	call	eax
	mov	DWORD PTR _sms$67[ebp], eax

; 400  : 
; 401  : 				// KCK: This works fine for aggregates.. Not so fine otherwise
; 402  : //				hasWeaps = flight->HasWeapons();
; 403  : //				hasFuel = flight->HasFuel();
; 404  : 				role = flight->GetUnitCurrentRole();

	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	mov	DWORD PTR _role$58[ebp], eax

; 405  : 
; 406  : 				// KCK: Here's one which will base all of the decisions off the player's aircraft
; 407  : 				if (sms)

	cmp	DWORD PTR _sms$67[ebp], 0
	je	$LN135@Process

; 408  : 					{
; 409  : 					for (hp=1; hp<sms->NumHardpoints(); hp++)

	mov	DWORD PTR _hp$68[ebp], 1
	jmp	SHORT $LN137@Process
$LN136@Process:
	mov	ecx, DWORD PTR _hp$68[ebp]
	add	ecx, 1
	mov	DWORD PTR _hp$68[ebp], ecx
$LN137@Process:
	mov	ecx, DWORD PTR _sms$67[ebp]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _hp$68[ebp], eax
	jge	$LN135@Process

; 410  : 						{
; 411  : 						if (role == ARO_CA)

	cmp	DWORD PTR _role$58[ebp], 1
	jne	SHORT $LN134@Process

; 412  : 							{
; 413  : 							if (sms->hardPoint[hp] && sms->hardPoint[hp]->weaponPointer && sms->hardPoint[hp]->Domain() & wdAir)

	mov	edx, DWORD PTR _sms$67[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN133@Process
	mov	edx, DWORD PTR _sms$67[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN133@Process
	mov	eax, DWORD PTR _sms$67[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _hp$68[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _sms$67[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+168]
	call	edx
	and	eax, 1
	je	SHORT $LN133@Process

; 414  : 								hasWeaps++;

	mov	eax, DWORD PTR _hasWeaps$56[ebp]
	add	eax, 1
	mov	DWORD PTR _hasWeaps$56[ebp], eax
$LN133@Process:

; 415  : 							}

	jmp	$LN125@Process
$LN134@Process:

; 416  : 						else if (role == ARO_S || role == ARO_GA || role == ARO_SB || role == ARO_SEAD)

	cmp	DWORD PTR _role$58[ebp], 3
	je	SHORT $LN130@Process
	cmp	DWORD PTR _role$58[ebp], 4
	je	SHORT $LN130@Process
	cmp	DWORD PTR _role$58[ebp], 5
	je	SHORT $LN130@Process
	cmp	DWORD PTR _role$58[ebp], 7
	jne	SHORT $LN131@Process
$LN130@Process:

; 417  : 							{
; 418  : 							if (sms->hardPoint[hp] && sms->hardPoint[hp]->weaponPointer && sms->hardPoint[hp]->Domain() & wdGround)

	mov	ecx, DWORD PTR _sms$67[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _hp$68[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN129@Process
	mov	ecx, DWORD PTR _sms$67[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _hp$68[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN129@Process
	mov	edx, DWORD PTR _sms$67[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _sms$67[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _hp$68[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	and	eax, 2
	je	SHORT $LN129@Process

; 419  : 								hasWeaps++;

	mov	ecx, DWORD PTR _hasWeaps$56[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasWeaps$56[ebp], ecx
$LN129@Process:

; 420  : 							}

	jmp	SHORT $LN125@Process
$LN131@Process:

; 421  : 						else if (role == ARO_ASW || role == ARO_ASHIP)

	cmp	DWORD PTR _role$58[ebp], 8
	je	SHORT $LN126@Process
	cmp	DWORD PTR _role$58[ebp], 9
	jne	SHORT $LN125@Process
$LN126@Process:

; 422  : 							{
; 423  : 							if (sms->hardPoint[hp] && sms->hardPoint[hp]->weaponPointer && sms->hardPoint[hp]->Domain() & wdGround)

	mov	edx, DWORD PTR _sms$67[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN125@Process
	mov	edx, DWORD PTR _sms$67[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN125@Process
	mov	eax, DWORD PTR _sms$67[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _hp$68[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _sms$67[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _hp$68[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+168]
	call	edx
	and	eax, 2
	je	SHORT $LN125@Process

; 424  : 								hasWeaps++;

	mov	eax, DWORD PTR _hasWeaps$56[ebp]
	add	eax, 1
	mov	DWORD PTR _hasWeaps$56[ebp], eax
$LN125@Process:

; 425  : 							}
; 426  : //						else
; 427  : //							hasWeaps++;		// Non-combat roles always 'have weapons'
; 428  : 						}

	jmp	$LN136@Process
$LN135@Process:

; 429  : 					}
; 430  : 				if (plane->af->Fuel() > flight->class_data->Fuel/3)

	mov	ecx, DWORD PTR _plane$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv3113[ebp]
	movss	xmm0, DWORD PTR tv3113[ebp]
	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+236]
	mov	eax, DWORD PTR [eax+260]
	cdq
	mov	ecx, 3
	idiv	ecx
	cvtsi2ss xmm1, eax
	comiss	xmm0, xmm1
	jbe	SHORT $LN124@Process

; 431  : 					hasFuel++;

	mov	edx, DWORD PTR _hasFuel$45[ebp]
	add	edx, 1
	mov	DWORD PTR _hasFuel$45[ebp], edx
$LN124@Process:

; 432  : 
; 433  : 				// Pick what we say depending on our status
; 434  : //				if (!hasWeaps)
; 435  : //					SendCallToAWACS(plane, rcENDCAPARMS);
; 436  : //				else
; 437  : //					SendCallToAWACS(plane, rcENDCAPFUEL);
; 438  : 
; 439  : // 2002-02-21 MN bugfix - need to get missioneval status flag to see if STATION_OVER is true
; 440  : 				// Awac's reponse.
; 441  : 				FlightDataClass	*flight_ptr = NULL;

	mov	DWORD PTR _flight_ptr$37[ebp], 0

; 442  : 				int meflags = 0;

	mov	DWORD PTR _meflags$35[ebp], 0

; 443  : 
; 444  : 				flight_ptr = TheCampaign.MissionEvaluator->FindFlightData(flight);

	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?FindFlightData@MissionEvaluationClass@@QAEPAVFlightDataClass@@PAVFlightClass@@@Z ; MissionEvaluationClass::FindFlightData
	mov	DWORD PTR _flight_ptr$37[ebp], eax

; 445  : 				if (flight_ptr)

	cmp	DWORD PTR _flight_ptr$37[ebp], 0
	je	SHORT $LN123@Process

; 446  : 					meflags = flight_ptr->status_flags;

	mov	ecx, DWORD PTR _flight_ptr$37[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _meflags$35[ebp], edx
$LN123@Process:

; 447  : // What's that ?? Only true if FEVAL_GOT_TO_TARGET is true and false at the same time ??
; 448  : //				if (!hasFuel || !hasWeaps || ((flight->GetEvalFlags() & FEVAL_MISSION_STARTED) && (flight->GetEvalFlags() & FEVAL_GOT_TO_TARGET) && !(flight->GetEvalFlags() & FEVAL_GOT_TO_TARGET)))
; 449  : 				if (!hasFuel || !hasWeaps || ((flight->GetEvalFlags() & FEVAL_MISSION_STARTED) && (flight->GetEvalFlags() & FEVAL_GOT_TO_TARGET) && (meflags & MISEVAL_FLIGHT_STATION_OVER)))

	cmp	DWORD PTR _hasFuel$45[ebp], 0
	je	SHORT $LN121@Process
	cmp	DWORD PTR _hasWeaps$56[ebp], 0
	je	SHORT $LN121@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetEvalFlags@FlightClass@@QAEEXZ	; FlightClass::GetEvalFlags
	movzx	eax, al
	and	eax, 1
	je	$LN122@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetEvalFlags@FlightClass@@QAEEXZ	; FlightClass::GetEvalFlags
	movzx	ecx, al
	and	ecx, 2
	je	SHORT $LN122@Process
	mov	edx, DWORD PTR _meflags$35[ebp]
	and	edx, 67108864				; 04000000H
	je	SHORT $LN122@Process
$LN121@Process:

; 450  : 					{
; 451  : 					if (rand()%2)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN209@Process
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN209@Process:
	test	eax, eax
	je	SHORT $LN120@Process

; 452  : 						radioMessage = CreateCallFromAwacs(flight, rcRELIEVED);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	237					; 000000edH
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 453  : 					else

	jmp	SHORT $LN119@Process
$LN120@Process:

; 454  : 						radioMessage = CreateCallFromAwacs(flight, rcDISMISSED);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	239					; 000000efH
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax
$LN119@Process:

; 455  : 					
; 456  : 					// Notify the mission evaluator that we're free to leave
; 457  : 					TheCampaign.MissionEvaluator->RegisterRelief(flight);

	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+324
	call	?RegisterRelief@MissionEvaluationClass@@QAEXPAVFlightClass@@@Z ; MissionEvaluationClass::RegisterRelief

; 458  : 					}
; 459  : 				else

	jmp	SHORT $LN118@Process
$LN122@Process:

; 460  : 					radioMessage = CreateCallFromAwacs(flight, rcCAPNOTOVER);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	238					; 000000eeH
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax
$LN118@Process:

; 461  : 				
; 462  : 				radioMessage->dataBlock.time_to_play = delay;	// Delay the response

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 463  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN139@Process:

; 464  : 				}
; 465  : 			break;

	jmp	$LN174@Process
$LN117@Process:

; 466  : 
; 467  : 		case RequestDivert:
; 468  : 			if (flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	SHORT $LN116@Process

; 469  : 				{
; 470  : 				// Flight requesting divert
; 471  : 				// KCK: I don't think we have the speach to impliment this
; 472  : //				SendCallToAWACS(plane, rcREQUESTTASK);
; 473  : 				flight->SetUnitPriority(0);

	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+612]
	call	eax
$LN116@Process:

; 474  : 				}
; 475  : 			break;

	jmp	$LN174@Process
$LN115@Process:

; 476  : 
; 477  : 		case RequestSAR:
; 478  : 			if (flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	SHORT $LN114@Process

; 479  : 				{
; 480  : 				// Flight requesting SAR
; 481  : //				SendCallToAWACS(plane, rcREQUESTDIVERT);
; 482  : 				flight->SetUnitPriority(0);

	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+612]
	call	eax

; 483  : 
; 484  : 				// AWACS response
; 485  : 				if (RequestSARMission(flight))

	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?RequestSARMission@@YAHPAVFlightClass@@@Z ; RequestSARMission
	add	esp, 4
	test	eax, eax
	je	SHORT $LN113@Process

; 486  : 					radioMessage = CreateCallFromAwacs(flight, rcSARENROUTE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	184					; 000000b8H
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 487  : 				else

	jmp	SHORT $LN112@Process
$LN113@Process:

; 488  : 					radioMessage = CreateCallFromAwacs(flight, rcUNABLE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	219					; 000000dbH
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax
$LN112@Process:

; 489  : 				radioMessage->dataBlock.time_to_play = delay;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 490  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN114@Process:

; 491  : 				}
; 492  : 			break;

	jmp	$LN174@Process
$LN111@Process:

; 493  : 
; 494  : 		case OnStation:
; 495  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN110@Process

; 496  : 
; 497  : 			//TJL 12/14/03 Begin the new Check-in/PseudoFAC code	
; 498  : 			{
; 499  : 
; 500  : 				//TJL Check in should only respond/work for aircraft on ARO_GA type missions
; 501  : 				// All others will be told "unable".
; 502  : 				//MissionRequestClass		mis;
; 503  : 				Unit				nu,cf;
; 504  : 				{
; 505  : 					VuListIterator		myit(AllAirList);

	mov	ecx, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	ecx
	lea	ecx, DWORD PTR _myit$19[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 506  : 					nu = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$19[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _nu$42[ebp], eax
$LN204@Process:

; 507  : 					while (nu){

	cmp	DWORD PTR _nu$42[ebp], 0
	je	SHORT $LN108@Process

; 508  : 						cf = nu;

	mov	edx, DWORD PTR _nu$42[ebp]
	mov	DWORD PTR _cf$48[ebp], edx

; 509  : 						nu = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$19[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nu$42[ebp], eax

; 510  : 						if (cf->IsFlight() || cf->IsDead())

	mov	eax, DWORD PTR _cf$48[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$48[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN106@Process
	mov	ecx, DWORD PTR _cf$48[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$48[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN107@Process
$LN106@Process:

; 511  : 							continue;

	jmp	SHORT $LN204@Process
$LN107@Process:

; 512  : 					}

	jmp	SHORT $LN204@Process
$LN108@Process:

; 513  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$19[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 514  : #if 0			// Retro 20May2004 - fixed logic
; 515  : 				if (flight->GetUnitCurrentRole() != ARO_GA &&
; 516  : 					flight->GetUnitMission() != (AMIS_ONCALLCAS || AMIS_PRPLANCAS || AMIS_CAS || AMIS_SAD || AMIS_INT || AMIS_BAI))
; 517  : #else
; 518  : 				if (flight->GetUnitCurrentRole() != ARO_GA &&
; 519  : 					((flight->GetUnitMission() != AMIS_ONCALLCAS)&&
; 520  : 					 (flight->GetUnitMission() != AMIS_PRPLANCAS)&&
; 521  : 					 (flight->GetUnitMission() != AMIS_CAS)&&
; 522  : 					 (flight->GetUnitMission() != AMIS_SAD)&&
; 523  : 					 (flight->GetUnitMission() != AMIS_INT)&&
; 524  : 					 (flight->GetUnitMission() != AMIS_BAI)))

	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	cmp	eax, 4
	je	$LN105@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 20					; 00000014H
	je	$LN105@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 21					; 00000015H
	je	$LN105@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 22					; 00000016H
	je	SHORT $LN105@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 23					; 00000017H
	je	SHORT $LN105@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 24					; 00000018H
	je	SHORT $LN105@Process
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 25					; 00000019H
	je	SHORT $LN105@Process

; 525  : #endif			// Retro 20May2004 - end
; 526  : 				{
; 527  : 					radioMessage = CreateCallFromAwacs(flight, rcUNABLE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	219					; 000000dbH
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 528  : 					radioMessage->dataBlock.time_to_play = delay;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	eax, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [edx+56], eax

; 529  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 530  : 
; 531  : 					break; // Not an appropriate A/G mission, good bye

	jmp	$LN174@Process
$LN105@Process:

; 532  : 				}
; 533  : 				// TJL If mission type is flagged for a divert, tell the campaign we can divert
; 534  : 				if (MissionData[flight->GetUnitMission()].flags & AMIS_EXPECT_DIVERT)

	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+664]
	call	edx
	shl	eax, 5
	mov	eax, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+28]
	and	eax, 33554432				; 02000000H
	je	SHORT $LN104@Process

; 535  : 				{
; 536  : 					flight->SetUnitPriority(0);

	push	0
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+612]
	call	eax

; 537  : 					flight->SetEvalFlag(FLIGHT_ON_STATION);

	push	0
	push	32					; 00000020H
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?SetEvalFlag@FlightClass@@QAEXEH@Z	; FlightClass::SetEvalFlag
$LN104@Process:

; 538  : 				}
; 539  : 				
; 540  : 
; 541  : 
; 542  : 					/* delete for now
; 543  : 					radioMessage = CreateCallToAWACS(plane, rcFACREADY);
; 544  : 					radioMessage->dataBlock.time_to_play = 5*CampaignSeconds;
; 545  : 					FalconSendMessage(radioMessage, FALSE);
; 546  : 					*/
; 547  : 
; 548  : 					//TJL Now Vector Flight to their Target
; 549  : 					CampBaseClass *target =  NULL;

	mov	DWORD PTR _target$62[ebp], 0

; 550  : 
; 551  : 					target = (CampBaseClass *)vuDatabase->Find(flight->GetAssignedTarget());

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAssignedTarget@FlightClass@@QAE?AVVU_ID@@XZ ; FlightClass::GetAssignedTarget
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$62[ebp], eax

; 552  : 					if(!target)

	cmp	DWORD PTR _target$62[ebp], 0
	jne	SHORT $LN103@Process

; 553  : 						target = (CampBaseClass *)vuDatabase->Find(flight->GetUnitMissionTargetID());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+684]
	call	edx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$62[ebp], eax
$LN103@Process:

; 554  : 					if(!target)

	cmp	DWORD PTR _target$62[ebp], 0
	jne	SHORT $LN102@Process

; 555  : 						target = (CampBaseClass *)vuDatabase->Find(flight->GetTargetID());

	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$62[ebp], eax
$LN102@Process:

; 556  : 					if (!target)

	cmp	DWORD PTR _target$62[ebp], 0
	jne	$LN101@Process

; 557  : 					{
; 558  : 					//TJL AWACS tells you to hold at CP Alpha 
; 559  : 					radioMessage = CreateCallFromAwacsPlane(plane, rcHOLDATCP);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	92					; 0000005cH
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 560  : 					radioMessage->dataBlock.edata[0] = flight->callsign_id;				 

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 561  : 					radioMessage->dataBlock.edata[1] = (short)ConvertFlightNumberToCallNumber(flight->callsign_num);

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 562  : 					radioMessage->dataBlock.edata[4] = 0;

	mov	eax, 2
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 563  : 					radioMessage->dataBlock.time_to_play = 5*CampaignSeconds;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+56], 5000		; 00001388H

; 564  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
	jmp	$LN98@Process
$LN101@Process:

; 565  : 					}
; 566  : 				//TJL If an Air Target, Ignore
; 567  : 				else if (target->IsUnit() && target->GetDomain() == DOMAIN_AIR)

	mov	edx, DWORD PTR _target$62[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$62[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	$LN99@Process
	mov	ecx, DWORD PTR _target$62[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 2
	jne	$LN99@Process

; 568  : 					{
; 569  : 					//TJL AWACS tells you to hold at CP Alpha 
; 570  : 					radioMessage = CreateCallFromAwacsPlane(plane, rcHOLDATCP);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 571  : 					radioMessage->dataBlock.edata[0] = flight->callsign_id;				 

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 572  : 					radioMessage->dataBlock.edata[1] = (short)ConvertFlightNumberToCallNumber(flight->callsign_num);

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 573  : 					radioMessage->dataBlock.edata[4] = 0;

	mov	edx, 2
	shl	edx, 2
	xor	eax, eax
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 574  : 					radioMessage->dataBlock.time_to_play = 5*CampaignSeconds;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 5000		; 00001388H

; 575  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 576  : 					}
; 577  : 				else

	jmp	SHORT $LN98@Process
$LN99@Process:

; 578  : 					{
; 579  : 					radioMessage = CreateCallFromAwacs(flight, rcATTACKMYTARGET);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 580  : 					radioMessage->dataBlock.edata[5] = SimToGrid(target->YPos());

	mov	ecx, DWORD PTR _target$62[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 5
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 581  : 					radioMessage->dataBlock.edata[6] = SimToGrid(target->XPos());

	mov	ecx, DWORD PTR _target$62[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 6
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN98@Process:

; 582  : 					}
; 583  : 					radioMessage->dataBlock.time_to_play = 10*CampaignSeconds;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 10000		; 00002710H

; 584  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN110@Process:

; 585  : 				
; 586  : 
; 587  : 			}
; 588  : 		
; 589  : 			break;

	jmp	$LN174@Process
$LN97@Process:

; 590  : 
; 591  : 		case OffStation:
; 592  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	SHORT $LN96@Process

; 593  : 				{
; 594  : 				// KCK: I don't think we have the speach to impliment this
; 595  : //				SendCallToAWACS(plane, rcFACCONTACT);
; 596  : 				// VWF: It seems we dont have a "check out" call. Vamoose is as
; 597  : 				// close as it gets.
; 598  : 				// AWACS/FAC callsign
; 599  : 	//			SendCallToAWACS(plane, rcVAMOOSE);
; 600  : 
; 601  : 				flight->ClearEvalFlag(FLIGHT_ON_STATION);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?ClearEvalFlag@FlightClass@@QAEXE@Z	; FlightClass::ClearEvalFlag

; 602  : 
; 603  : 			/*	radioMessage = new FalconRadioChatterMessage( FalconNullId , FalconLocalSession );
; 604  : 				radioMessage->dataBlock.to = MESSAGE_FOR_TEAM;
; 605  : 				radioMessage->dataBlock.from = plane->Id();
; 606  : 				radioMessage->dataBlock.voice_id = (uchar)flight->GetPilotVoiceID(plane->pilotSlot);
; 607  : 				radioMessage->dataBlock.message = rcVAMOOSE;
; 608  : 				radioMessage->dataBlock.edata[0] = -1;				 
; 609  : 				radioMessage->dataBlock.edata[1] = -1;
; 610  : 				FalconSendMessage(radioMessage, FALSE);*/
; 611  : 				if (MissionData[flight->GetUnitMission()].flags & AMIS_EXPECT_DIVERT)

	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	shl	eax, 5
	mov	ecx, DWORD PTR ?MissionData@@3PAUMissionDataType@@A[eax+28]
	and	ecx, 33554432				; 02000000H
	je	SHORT $LN95@Process

; 612  : 					flight->SetDiverted(1);

	push	1
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?SetDiverted@UnitClass@@QAEXH@Z		; UnitClass::SetDiverted
$LN95@Process:

; 613  : 
; 614  : 				// OW: Acknowledge
; 615  : 				// radioMessage = CreateCallFromAwacs(flight, rcROGER);
; 616  : 				radioMessage = CreateCallFromAwacs(flight, rcCOPY);	// rcROGER is broken somehow 

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	101					; 00000065H
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 617  : 				radioMessage->dataBlock.time_to_play = delay;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 618  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN96@Process:

; 619  : 				}
; 620  : 			break;

	jmp	$LN174@Process
$LN94@Process:

; 621  : 
; 622  : 		case VectorHome:
; 623  : //			SendCallToAWACS(plane, rcVECTORHOMEPLATE);
; 624  : 			//if not you must be homeless
; 625  : 
; 626  : 			airbase = (Objective)vuDatabase->Find (plane->HomeAirbase());

	lea	eax, DWORD PTR $T11[ebp]
	push	eax
	mov	ecx, DWORD PTR _plane$[ebp]
	call	?HomeAirbase@AircraftClass@@QAE?AVVU_ID@@XZ ; AircraftClass::HomeAirbase
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _airbase$[ebp], eax

; 627  : 			if(flight  && airbase )

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN93@Process
	cmp	DWORD PTR _airbase$[ebp], 0
	je	$LN93@Process

; 628  : 			{
; 629  : 				//awacs response
; 630  : 				radioMessage = CreateCallFromAwacs(flight, rcVECTORHOME);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	223					; 000000dfH
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 631  : 
; 632  : 				radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 633  : 				
; 634  : 				radioMessage->dataBlock.edata[4] = SimToGrid(airbase->YPos());

	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 635  : 				radioMessage->dataBlock.edata[5] = SimToGrid(airbase->XPos());				

	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 636  : 				
; 637  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
	jmp	SHORT $LN91@Process
$LN93@Process:

; 638  : 			}
; 639  : 			else if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	SHORT $LN91@Process

; 640  : 			{
; 641  : 				radioMessage = CreateCallFromAwacs(flight, rcUNABLE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	219					; 000000dbH
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 642  : 				radioMessage->dataBlock.time_to_play = delay;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	eax, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [edx+56], eax

; 643  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN91@Process:

; 644  : 			}
; 645  : 			break;

	jmp	$LN174@Process
$LN90@Process:

; 646  : 		case VectorToAltAirfield: 
; 647  : 			if (flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN89@Process

; 648  : 				{
; 649  : 
; 650  : #if 1
; 651  : 				FalconRadioChatterMessage	*radioMessage;
; 652  : 
; 653  : 				// Flight requesting divert field
; 654  : //				SendCallToAWACS(plane, rcDIVERTFIELD);
; 655  : 
; 656  : 				// Awacs response
; 657  : 				radioMessage = CreateCallFromAwacs (flight, rcVECTORALTERNATE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	222					; 000000deH
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$66[ebp], eax

; 658  : 
; 659  : 				// KCK: No alternative airstrip.. should we try finding one? ATC List?
; 660  : 				// TODO!!!
; 661  : 				// OW - here it is :)
; 662  : 
; 663  : 				vector pos;
; 664  : 				pos.x = plane->XPos();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$69[ebp]

; 665  : 				pos.y = plane->YPos();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$69[ebp+4]

; 666  : 				GridIndex X=0, Y=0;

	xor	eax, eax
	mov	WORD PTR _X$51[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _Y$50[ebp], cx

; 667  : 				ConvertSimToGrid(&pos, &X, &Y);

	lea	edx, DWORD PTR _Y$50[ebp]
	push	edx
	lea	eax, DWORD PTR _X$51[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$69[ebp]
	push	ecx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 668  : 				ObjectiveClass *divertBase = FindNearestFriendlyAirbase(plane->GetTeam(), X, Y);

	movzx	edx, WORD PTR _Y$50[ebp]
	push	edx
	movzx	eax, WORD PTR _X$51[ebp]
	push	eax
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z ; FindNearestFriendlyAirbase
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _divertBase$38[ebp], eax

; 669  : 
; 670  : 				if(divertBase)

	cmp	DWORD PTR _divertBase$38[ebp], 0
	je	SHORT $LN88@Process

; 671  : 				{
; 672  : 					pos.x = divertBase->XPos();

	mov	ecx, DWORD PTR _divertBase$38[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$69[ebp]

; 673  : 					pos.y = divertBase->YPos();

	mov	ecx, DWORD PTR _divertBase$38[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$69[ebp+4]

; 674  : 					ConvertSimToGrid(&pos, &radioMessage->dataBlock.edata[4], &radioMessage->dataBlock.edata[5]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _radioMessage$66[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _radioMessage$66[ebp]
	lea	ecx, DWORD PTR [eax+edx+64]
	push	ecx
	lea	edx, DWORD PTR _pos$69[ebp]
	push	edx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 675  : 				}
; 676  : 
; 677  : 				else

	jmp	SHORT $LN87@Process
$LN88@Process:

; 678  : 				{
; 679  : 					radioMessage->dataBlock.edata[4] = 0;

	mov	eax, 2
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, DWORD PTR _radioMessage$66[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 680  : 					radioMessage->dataBlock.edata[5] = 0;

	mov	eax, 2
	imul	eax, 5
	xor	ecx, ecx
	mov	edx, DWORD PTR _radioMessage$66[ebp]
	mov	WORD PTR [edx+eax+64], cx
$LN87@Process:

; 681  : 				}
; 682  : 
; 683  : 				if(flight->GetAWACSFlight())

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetAWACSFlight
	test	eax, eax
	je	SHORT $LN86@Process

; 684  : 				{
; 685  : 					radioMessage->dataBlock.from = flight->GetAWACSFlight()->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetAWACSFlight
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$66[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 686  : 					radioMessage->dataBlock.voice_id = (uchar)(flight->GetAWACSFlight())->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetAWACSFlight
	mov	ecx, eax
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	ecx, DWORD PTR _radioMessage$66[ebp]
	mov	BYTE PTR [ecx+61], al

; 687  : 					radioMessage->dataBlock.edata[2] = (flight->GetAWACSFlight())->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAWACSFlight@FlightClass@@QAEPAV1@XZ	; FlightClass::GetAWACSFlight
	movzx	dx, BYTE PTR [eax+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$66[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 688  : 				}
; 689  : 				else

	jmp	SHORT $LN85@Process
$LN86@Process:

; 690  : 				{
; 691  : 					radioMessage->dataBlock.from = FalconNullId;

	mov	edx, DWORD PTR _radioMessage$66[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+52], ecx

; 692  : 					radioMessage->dataBlock.voice_id = GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	edx, DWORD PTR _radioMessage$66[ebp]
	mov	BYTE PTR [edx+61], al

; 693  : 					radioMessage->dataBlock.edata[2] = gDefaultAWACSCallSign;

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$66[ebp]
	mov	dx, WORD PTR ?gDefaultAWACSCallSign@@3FA ; gDefaultAWACSCallSign
	mov	WORD PTR [ecx+eax+64], dx
$LN85@Process:

; 694  : 				}
; 695  : 
; 696  : 				radioMessage->dataBlock.time_to_play = delay;	// Delay the response

	mov	eax, DWORD PTR _radioMessage$66[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 697  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$66[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN89@Process:

; 698  : 				}
; 699  : #else
; 700  : 				WayPoint	w = flight->GetFirstUnitWP();
; 701  : 				FalconRadioChatterMessage	*radioMessage;
; 702  : 
; 703  : 				// Flight requesting divert field
; 704  : //				SendCallToAWACS(plane, rcDIVERTFIELD);
; 705  : 
; 706  : 				// Awacs response
; 707  : 				radioMessage = CreateCallFromAwacs (flight, rcVECTORALTERNATE);
; 708  : 				while (w && !(w->GetWPFlags() & WPF_ALTERNATE))
; 709  : 					w = w->GetNextWP();
; 710  : 				if (w)
; 711  : 					w->GetWPLocation(&radioMessage->dataBlock.edata[4], &radioMessage->dataBlock.edata[5]);
; 712  : 				else
; 713  : 					{
; 714  : 						// KCK: No alternative airstrip.. should we try finding one? ATC List?
; 715  : 						// TODO!!!
; 716  : 						radioMessage->dataBlock.edata[4] = 0;
; 717  : 						radioMessage->dataBlock.edata[5] = 0;
; 718  : 					}
; 719  : 
; 720  : 				if(flight->GetAWACSFlight())
; 721  : 				{
; 722  : 					radioMessage->dataBlock.from = flight->GetAWACSFlight()->Id();
; 723  : 					radioMessage->dataBlock.voice_id = (uchar)(flight->GetAWACSFlight())->GetFlightLeadVoiceID();
; 724  : 					radioMessage->dataBlock.edata[2] = (flight->GetAWACSFlight())->callsign_id;
; 725  : 				}
; 726  : 				else
; 727  : 				{
; 728  : 					radioMessage->dataBlock.from = FalconNullId;
; 729  : 					radioMessage->dataBlock.voice_id = GetDefaultAwacsVoice(); // JPO VOICEFIX
; 730  : 					radioMessage->dataBlock.edata[2] = gDefaultAWACSCallSign;
; 731  : 				}
; 732  : 
; 733  : 				radioMessage->dataBlock.time_to_play = delay;	// Delay the response
; 734  : 				FalconSendMessage(radioMessage, FALSE);
; 735  : 				}
; 736  : #endif
; 737  : 			break;

	jmp	$LN174@Process
$LN84@Process:

; 738  : 
; 739  : 		case VectorToPackage:
; 740  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN83@Process

; 741  : 			{
; 742  : //				SendCallToAWACS(plane, rcVECTORTOPACKAGE);
; 743  : 								
; 744  : 				Flight		leadElement = NULL;

	mov	DWORD PTR _leadElement$47[ebp], 0

; 745  : 				Package		pack = (Package)flight->GetUnitParent();

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _pack$44[ebp], eax

; 746  : 				
; 747  : 				if (pack)

	cmp	DWORD PTR _pack$44[ebp], 0
	je	SHORT $LN82@Process

; 748  : 					leadElement = (Flight)pack->GetFirstUnitElement();

	mov	ecx, DWORD PTR _pack$44[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pack$44[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	mov	DWORD PTR _leadElement$47[ebp], eax
$LN82@Process:

; 749  : #if 0
; 750  : 
; 751  : 				radioMessage = CreateCallFromAwacs (flight, rcVECTORTOFLIGHT);
; 752  : 				radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first
; 753  : 				//MI fix if all got shot down
; 754  : 				if(leadElement)
; 755  : 				{
; 756  : 					radioMessage->dataBlock.edata[4] = SimToGrid(leadElement->YPos());
; 757  : 					radioMessage->dataBlock.edata[5] = SimToGrid(leadElement->XPos());
; 758  : 
; 759  : 				}
; 760  : 				
; 761  : 				else
; 762  : 				{
; 763  : 					radioMessage->dataBlock.edata[4] = SimToGrid(flight->YPos());
; 764  : 					radioMessage->dataBlock.edata[5] = SimToGrid(flight->XPos());
; 765  : 				}
; 766  : #else
; 767  : 				if(flight->GetACCount() > 1 && leadElement)

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetACCount@FlightClass@@QAEHXZ		; FlightClass::GetACCount
	cmp	eax, 1
	jle	$LN81@Process
	cmp	DWORD PTR _leadElement$47[ebp], 0
	je	SHORT $LN81@Process

; 768  : 				{
; 769  : 					radioMessage = CreateCallFromAwacs (flight, rcVECTORTOFLIGHT);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	225					; 000000e1H
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 770  : 					radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	eax, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [edx+56], eax

; 771  : 					radioMessage->dataBlock.edata[4] = SimToGrid(leadElement->YPos());

	mov	ecx, DWORD PTR _leadElement$47[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 772  : 					radioMessage->dataBlock.edata[5] = SimToGrid(leadElement->XPos());

	mov	ecx, DWORD PTR _leadElement$47[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
	jmp	$LN78@Process
$LN81@Process:

; 773  : 				}
; 774  : 				else if(flight->GetACCount() > 1)

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetACCount@FlightClass@@QAEHXZ		; FlightClass::GetACCount
	cmp	eax, 1
	jle	SHORT $LN79@Process

; 775  : 				{
; 776  : 					radioMessage = CreateCallFromAwacs (flight, rcVECTORTOFLIGHT);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	225					; 000000e1H
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 777  : 					radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 778  : 					radioMessage->dataBlock.edata[4] = SimToGrid(flight->YPos());

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 779  : 					radioMessage->dataBlock.edata[5] = SimToGrid(flight->XPos());

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 780  : 				}
; 781  : 				else

	jmp	SHORT $LN78@Process
$LN79@Process:

; 782  : 				{
; 783  : 					//nobody there. could do a better response... but which one?
; 784  : 					radioMessage = CreateCallFromAwacs (flight, rcUNABLE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	219					; 000000dbH
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 785  : 					radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 786  : 					radioMessage->dataBlock.edata[4] = rand()%2;					

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN210@Process
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN210@Process:
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN78@Process:

; 787  : 				}
; 788  : #endif
; 789  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN83@Process:

; 790  : 			}
; 791  : 			break;

	jmp	$LN174@Process
$LN77@Process:

; 792  : 
; 793  : 		case VectorToTanker:
; 794  : //			SendCallToAWACS (plane, rcREQUESTVECTORTOTANKER);
; 795  : 
; 796  : 			tankerFlight = flight->GetTankerFlight();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetTankerFlight@FlightClass@@QAEPAV1@XZ ; FlightClass::GetTankerFlight
	mov	DWORD PTR _tankerFlight$[ebp], eax

; 797  : 			if(!tankerFlight) {

	cmp	DWORD PTR _tankerFlight$[ebp], 0
	jne	SHORT $LN76@Process

; 798  : 				tankerFlight = SimDriver.FindTanker(plane);

	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindTanker@SimulationDriver@@QAEPAVFlightClass@@PAVSimBaseClass@@@Z ; SimulationDriver::FindTanker
	mov	DWORD PTR _tankerFlight$[ebp], eax
$LN76@Process:

; 799  : 			}
; 800  : 			
; 801  : 
; 802  : 			if(tankerFlight)

	cmp	DWORD PTR _tankerFlight$[ebp], 0
	je	$LN75@Process

; 803  : 			{
; 804  : 				tanker = (AircraftClass*)tankerFlight->GetComponentLead();

	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	call	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ ; CampBaseClass::GetComponentLead
	mov	DWORD PTR _tanker$[ebp], eax

; 805  : 
; 806  : 				radioMessage = CreateCallFromAwacs (flight, rcVECTORTOTANKER);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	293					; 00000125H
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 807  : 				radioMessage->dataBlock.message = rcVECTORTOTANKER;

	mov	eax, 293				; 00000125H
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+62], ax

; 808  : 				radioMessage->dataBlock.edata[4] = tankerFlight->callsign_id;

	mov	edx, DWORD PTR _tankerFlight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 809  : 				radioMessage->dataBlock.edata[5] = (short)ConvertFlightNumberToCallNumber(tankerFlight->callsign_num);

	mov	eax, DWORD PTR _tankerFlight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	edx, 2
	imul	edx, 5
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 810  : 
; 811  : 				if(tanker) {

	cmp	DWORD PTR _tanker$[ebp], 0
	je	SHORT $LN74@Process

; 812  : 					radioMessage->dataBlock.edata[6] = SimToGrid(tanker->YPos());

	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 6
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 813  : 					radioMessage->dataBlock.edata[7] = SimToGrid(tanker->XPos());

	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 7
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 814  : 				}
; 815  : 				else {

	jmp	SHORT $LN73@Process
$LN74@Process:

; 816  : 					radioMessage->dataBlock.edata[6] = SimToGrid(tankerFlight->YPos());

	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 6
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 817  : 					radioMessage->dataBlock.edata[7] = SimToGrid(tankerFlight->XPos());

	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 7
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN73@Process:

; 818  : 				}
; 819  : 				radioMessage->dataBlock.edata[8] = (short)(tankerFlight->tacan_channel - g_nMinTacanChannel);

	mov	edx, DWORD PTR _tankerFlight$[ebp]
	movzx	eax, BYTE PTR [edx+436]
	sub	eax, DWORD PTR ?g_nMinTacanChannel@@3HA	; g_nMinTacanChannel
	mov	ecx, 2
	shl	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 820  : 				radioMessage->dataBlock.edata[9] = 24;

	mov	eax, 2
	imul	eax, 9
	mov	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 821  : 			}
; 822  : 			else

	jmp	SHORT $LN72@Process
$LN75@Process:

; 823  : 			{
; 824  : 				radioMessage = CreateCallFromAwacs (flight, rcNOTANKER);				

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	260					; 00000104H
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax
$LN72@Process:

; 825  : 			}
; 826  : 			radioMessage->dataBlock.time_to_play = delay; //wait a little bit so the request will play first

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 827  : 			FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 828  : 			
; 829  : 			break;

	jmp	$LN174@Process
$LN71@Process:

; 830  : 			
; 831  : 		case VectorToCarrier:
; 832  : // 2002-03-07 MN search for closest carrier instead of the home carrier
; 833  : 			if (flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN61@Process

; 834  : 			{
; 835  : 				Unit nu,cf;
; 836  : 				float dist, bestdist = 99999.9F,dx, dy;

	movss	xmm0, DWORD PTR __real@47c34ff3
	movss	DWORD PTR _bestdist$29[ebp], xmm0

; 837  : 				{
; 838  : 					VuListIterator		myit(AllRealList);

	mov	ecx, DWORD PTR ?AllRealList@@3PAVVuLinkedList@@A ; AllRealList
	push	ecx
	lea	ecx, DWORD PTR _myit$20[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 839  : 					nu = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$20[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _nu$43[ebp], eax
$LN206@Process:

; 840  : 					while (nu){

	cmp	DWORD PTR _nu$43[ebp], 0
	je	$LN68@Process

; 841  : 						cf = nu;

	mov	edx, DWORD PTR _nu$43[ebp]
	mov	DWORD PTR _cf$61[ebp], edx

; 842  : 						nu = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$20[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nu$43[ebp], eax

; 843  : 						if (cf->GetTeam() != plane->GetTeam() || cf->IsDead())

	mov	eax, DWORD PTR _cf$61[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$61[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN66@Process
	mov	edx, DWORD PTR _cf$61[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$61[ebp]
	mov	edx, DWORD PTR [eax+552]
	call	edx
	test	eax, eax
	je	SHORT $LN67@Process
$LN66@Process:

; 844  : 							continue;

	jmp	SHORT $LN206@Process
$LN67@Process:

; 845  : 						// RV - Biker - All naval units return TRUE here so better check for subtype
; 846  : 						if (!cf->IsTaskForce() || cf->GetSType() != STYPE_UNIT_CARRIER)

	mov	eax, DWORD PTR _cf$61[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$61[ebp]
	mov	eax, DWORD PTR [edx+264]
	call	eax
	test	eax, eax
	je	SHORT $LN64@Process
	mov	ecx, DWORD PTR _cf$61[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 3
	je	SHORT $LN65@Process
$LN64@Process:

; 847  : 							continue;

	jmp	$LN206@Process
$LN65@Process:

; 848  : 						dx = plane->XPos() - cf->XPos();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3528[ebp]
	movss	xmm0, DWORD PTR tv3528[ebp]
	mov	ecx, DWORD PTR _cf$61[ebp]
	movss	DWORD PTR tv3915[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3532[ebp]
	movss	xmm0, DWORD PTR tv3915[ebp]
	subss	xmm0, DWORD PTR tv3532[ebp]
	movss	DWORD PTR _dx$34[ebp], xmm0

; 849  : 						dy = plane->YPos() - cf->YPos();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3536[ebp]
	movss	xmm0, DWORD PTR tv3536[ebp]
	mov	ecx, DWORD PTR _cf$61[ebp]
	movss	DWORD PTR tv3917[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3540[ebp]
	movss	xmm0, DWORD PTR tv3917[ebp]
	subss	xmm0, DWORD PTR tv3540[ebp]
	movss	DWORD PTR _dy$33[ebp], xmm0

; 850  : 						dist = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$34[ebp]
	mulss	xmm0, DWORD PTR _dx$34[ebp]
	movss	xmm1, DWORD PTR _dy$33[ebp]
	mulss	xmm1, DWORD PTR _dy$33[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$31[ebp]

; 851  : 						if (dist < bestdist)

	movss	xmm0, DWORD PTR _bestdist$29[ebp]
	comiss	xmm0, DWORD PTR _dist$31[ebp]
	jbe	SHORT $LN63@Process

; 852  : 						{
; 853  : 							bestdist = dist;

	movss	xmm0, DWORD PTR _dist$31[ebp]
	movss	DWORD PTR _bestdist$29[ebp], xmm0

; 854  : 							carrier = (TaskForce)cf;

	mov	edx, DWORD PTR _cf$61[ebp]
	mov	DWORD PTR _carrier$[ebp], edx
$LN63@Process:

; 855  : 						}
; 856  : 					}

	jmp	$LN206@Process
$LN68@Process:

; 857  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$20[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 858  : 
; 859  : 				if(carrier)

	cmp	DWORD PTR _carrier$[ebp], 0
	je	$LN62@Process

; 860  : 				{
; 861  : 					//awacs response
; 862  : 					radioMessage = CreateCallFromAwacs(flight, rcVECTORHOMECARRIER);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	346					; 0000015aH
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 863  : 
; 864  : 					radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 865  : 				
; 866  : 					radioMessage->dataBlock.edata[4] = SimToGrid(carrier->YPos());

	mov	ecx, DWORD PTR _carrier$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 867  : 					radioMessage->dataBlock.edata[5] = SimToGrid(carrier->XPos());

	mov	ecx, DWORD PTR _carrier$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 868  : 					radioMessage->dataBlock.edata[6] = (short)(carrier->tacan_channel - g_nMinTacanChannel);

	mov	eax, DWORD PTR _carrier$[ebp]
	movzx	ecx, BYTE PTR [eax+309]
	sub	ecx, DWORD PTR ?g_nMinTacanChannel@@3HA	; g_nMinTacanChannel
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 869  : 					radioMessage->dataBlock.edata[7] = 24; // Yankee

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, 24					; 00000018H
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 870  : 			
; 871  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 872  : 				}
; 873  : 				else

	jmp	SHORT $LN61@Process
$LN62@Process:

; 874  : 				{
; 875  : 					radioMessage = CreateCallFromAwacs(flight, rcUNABLE);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	219					; 000000dbH
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 876  : 					radioMessage->dataBlock.time_to_play = delay;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 877  : 					FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN61@Process:

; 878  : 				}
; 879  : 			}
; 880  : 			break;

	jmp	$LN174@Process
$LN60@Process:

; 881  : 
; 882  : 		case VectorToThreat:
; 883  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN59@Process

; 884  : 			{
; 885  : 				int numAircraft = 0;

	mov	DWORD PTR _numAircraft$53[ebp], 0

; 886  : //				SendCallToAWACS(plane, rcVECTORTOTHREAT);
; 887  : 				CampBaseClass *campThreat = NULL;

	mov	DWORD PTR _campThreat$52[ebp], 0

; 888  : 				SimBaseClass *simThreat = SimDriver.FindNearestThreat (plane, &X, &Y, &altitude);

	lea	eax, DWORD PTR _altitude$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindNearestThreat@SimulationDriver@@QAEPAVSimBaseClass@@PAVAircraftClass@@PAF1PAM@Z ; SimulationDriver::FindNearestThreat
	mov	DWORD PTR _simThreat$49[ebp], eax

; 889  : 				if (simThreat)

	cmp	DWORD PTR _simThreat$49[ebp], 0
	je	$LN58@Process

; 890  : 				{
; 891  : 					numAircraft = simThreat->GetCampaignObject()->NumberOfComponents();

	mov	ecx, DWORD PTR _simThreat$49[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _numAircraft$53[ebp], eax

; 892  : 					radioMessage = CreateCallFromAwacs(flight, rcNEARESTTHREATRSP);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	121					; 00000079H
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 893  : 					//for this request we just want the BRA part
; 894  : 					if(numAircraft > 1)

	cmp	DWORD PTR _numAircraft$53[ebp], 1
	jle	SHORT $LN57@Process

; 895  : 						radioMessage->dataBlock.edata[4] = (short)((simThreat->Type() - VU_LAST_ENTITY_TYPE)*2 + 1);	//type

	mov	ecx, DWORD PTR _simThreat$49[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	lea	eax, DWORD PTR [edx+edx-199]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 896  : 					else

	jmp	SHORT $LN56@Process
$LN57@Process:

; 897  : 						radioMessage->dataBlock.edata[4] = (short)((simThreat->Type() - VU_LAST_ENTITY_TYPE)*2);	//type

	mov	ecx, DWORD PTR _simThreat$49[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	lea	ecx, DWORD PTR [eax+eax-200]
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx
$LN56@Process:

; 898  : 					radioMessage->dataBlock.edata[5] = (short)numAircraft;	//number

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	ax, WORD PTR _numAircraft$53[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 899  : 					radioMessage->dataBlock.edata[6] = X;

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	ax, WORD PTR _X$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 900  : 					radioMessage->dataBlock.edata[7] = Y;

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	ax, WORD PTR _Y$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 901  : 					radioMessage->dataBlock.edata[8] = (short)FloatToInt32(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 902  : 					
; 903  : 				}
; 904  : 				else 

	jmp	$LN51@Process
$LN58@Process:

; 905  : 				{
; 906  : 					campThreat = SimDriver.FindNearestCampThreat (plane, &X, &Y, &altitude);

	lea	eax, DWORD PTR _altitude$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindNearestCampThreat@SimulationDriver@@QAEPAVCampBaseClass@@PAVAircraftClass@@PAF1PAM@Z ; SimulationDriver::FindNearestCampThreat
	mov	DWORD PTR _campThreat$52[ebp], eax

; 907  : 					if(campThreat)

	cmp	DWORD PTR _campThreat$52[ebp], 0
	je	$LN54@Process

; 908  : 					{
; 909  : 						numAircraft = campThreat->NumberOfComponents();

	mov	ecx, DWORD PTR _campThreat$52[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _numAircraft$53[ebp], eax

; 910  : 						radioMessage = CreateCallFromAwacs(flight, rcNEARESTTHREATRSP);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	121					; 00000079H
	mov	ecx, DWORD PTR _flight$[ebp]
	push	ecx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 911  : 						//for this request we just want the BRA part
; 912  : 						if(numAircraft > 1)

	cmp	DWORD PTR _numAircraft$53[ebp], 1
	jle	SHORT $LN53@Process

; 913  : 							radioMessage->dataBlock.edata[4] = (short)(((Unit)campThreat)->GetVehicleID(0)*2 + 1);	//type

	push	0
	mov	ecx, DWORD PTR _campThreat$52[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	lea	eax, DWORD PTR [edx+edx+1]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 914  : 						else

	jmp	SHORT $LN52@Process
$LN53@Process:

; 915  : 							radioMessage->dataBlock.edata[4] = (short)(((Unit)campThreat)->GetVehicleID(0)*2);	//type

	push	0
	mov	ecx, DWORD PTR _campThreat$52[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	shl	eax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN52@Process:

; 916  : 						radioMessage->dataBlock.edata[5] = (short)numAircraft;	//number

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _numAircraft$53[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 917  : 						radioMessage->dataBlock.edata[6] = X;

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _X$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 918  : 						radioMessage->dataBlock.edata[7] = Y;

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _Y$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 919  : 						radioMessage->dataBlock.edata[8] = (short)FloatToInt32(altitude);

	push	ecx
	movss	xmm0, DWORD PTR _altitude$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 920  : 					}
; 921  : 					else

	jmp	SHORT $LN51@Process
$LN54@Process:

; 922  : 					{
; 923  : 						radioMessage = CreateCallFromAwacs(flight, rcNOTARGETS);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	70					; 00000046H
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 924  : 						
; 925  : 						MonoPrint ("No threats detected :->\n");

	push	OFFSET ??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN51@Process:

; 926  : 					}
; 927  : 				}
; 928  : 				radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 929  : 				FalconSendMessage(radioMessage, FALSE);	

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN59@Process:

; 930  : 			}
; 931  : 			break;

	jmp	$LN174@Process
$LN50@Process:

; 932  : 			
; 933  : 		case VectorToTarget:
; 934  : 			if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN49@Process

; 935  : 			{
; 936  : 				CampBaseClass *target =  NULL;

	mov	DWORD PTR _target$65[ebp], 0

; 937  : 
; 938  : 				// This is the flight's request
; 939  : //				SendCallToAWACS(plane, rcVECTORTOTARGET);
; 940  : 
; 941  : 				// This is AWAC's response
; 942  : 				target = (CampBaseClass *)vuDatabase->Find(flight->GetAssignedTarget());

	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetAssignedTarget@FlightClass@@QAE?AVVU_ID@@XZ ; FlightClass::GetAssignedTarget
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$65[ebp], eax

; 943  : 				if(!target)

	cmp	DWORD PTR _target$65[ebp], 0
	jne	SHORT $LN48@Process

; 944  : 					target = (CampBaseClass *)vuDatabase->Find(flight->GetUnitMissionTargetID());

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax+684]
	call	edx
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$65[ebp], eax
$LN48@Process:

; 945  : 				if(!target)

	cmp	DWORD PTR _target$65[ebp], 0
	jne	SHORT $LN47@Process

; 946  : 					target = (CampBaseClass *)vuDatabase->Find(flight->GetTargetID());

	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetTargetID@UnitClass@@QAE?AVVU_ID@@XZ	; UnitClass::GetTargetID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _target$65[ebp], eax
$LN47@Process:

; 947  : 				if (!target)

	cmp	DWORD PTR _target$65[ebp], 0
	jne	SHORT $LN46@Process

; 948  : 					{
; 949  : 					radioMessage = CreateCallFromAwacs(flight, rcNOTARGETS);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	70					; 00000046H
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax
	jmp	$LN43@Process
$LN46@Process:

; 950  : 					}
; 951  : 				else if (target->IsUnit() && target->GetDomain() == DOMAIN_AIR)

	mov	ecx, DWORD PTR _target$65[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _target$65[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN44@Process
	mov	ecx, DWORD PTR _target$65[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN44@Process

; 952  : 					{
; 953  : 					radioMessage = CreateCallFromAwacs(flight, rcAIRTARGETBRA);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	13					; 0000000dH
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 954  : 					target->GetLocation(&radioMessage->dataBlock.edata[4],&radioMessage->dataBlock.edata[5]);

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	push	edx
	mov	ecx, DWORD PTR _target$65[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 955  : 					radioMessage->dataBlock.edata[6] = (short)((Unit)target)->GetUnitAltitude();

	mov	ecx, DWORD PTR _target$65[ebp]
	call	?GetUnitAltitude@UnitClass@@QAEHXZ	; UnitClass::GetUnitAltitude
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 956  : 					}
; 957  : 				else

	jmp	SHORT $LN43@Process
$LN44@Process:

; 958  : 					{
; 959  : 					radioMessage = CreateCallFromAwacs(flight, rcGNDTARGETBR);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	86					; 00000056H
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 960  : 					target->GetLocation(&radioMessage->dataBlock.edata[4],&radioMessage->dataBlock.edata[5]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _radioMessage$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	mov	ecx, DWORD PTR _target$65[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN43@Process:

; 961  : 					}
; 962  : 				radioMessage->dataBlock.time_to_play = delay;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	edx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 963  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN49@Process:

; 964  : 			}
; 965  : 			break;

	jmp	$LN174@Process

; 966  : 
; 967  : 		case CampAircraftLaunch:
; 968  : 			break;

	jmp	$LN174@Process

; 969  : 		case CampFriendliesEngaged:
; 970  : 			break;

	jmp	$LN174@Process

; 971  : 		case CampDivertCover:
; 972  : 		case CampDivertIntercept:
; 973  : 		case CampDivertCAS:
; 974  : 		case CampDivertOther:
; 975  : 		case CampDivertDenied:
; 976  : 			// Notify player
; 977  : 			break;

	jmp	$LN174@Process
$LN39@Process:

; 978  : 
; 979  :       case DeclareAircraft:
; 980  :          // Need to send messages here to ask AWACS what the thing under my cursor is,
; 981  :          // as well as play his response. Both of these are currently unknown to me.
; 982  : 			// SendCallToAWACS(plane, rcDECLARE);
; 983  : 			// 2002-02-28 MODIFIED BY S.G. Replaced CampBaseClass to FalconEntity since we 
; 984  : 			// don't know if it's a sim or campaign object yet
; 985  : 			otherThing = (FalconEntity *)vuDatabase->Find(dataBlock.caller);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _otherThing$[ebp], eax

; 986  : 
; 987  : 			if (!otherThing){

	cmp	DWORD PTR _otherThing$[ebp], 0
	jne	$LN35@Process

; 988  : 			RadarClass* theRadar = (RadarClass*)FindSensor(plane, SensorClass::Radar);

	push	1
	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$55[ebp], eax

; 989  : 			VU_ID targetId;

	lea	ecx, DWORD PTR _targetId$46[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 990  : 
; 991  : 				if (theRadar){

	cmp	DWORD PTR _theRadar$55[ebp], 0
	je	$LN36@Process

; 992  : 			   targetId = theRadar->TargetUnderCursor();

	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	mov	eax, DWORD PTR _theRadar$55[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$55[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$46[ebp], ecx
	mov	DWORD PTR _targetId$46[ebp+4], edx

; 993  : 					if (targetId == FalconNullId && theRadar->CurrentTarget() && theRadar->CurrentTarget()->BaseData()){

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _targetId$46[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN36@Process
	mov	ecx, DWORD PTR _theRadar$55[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN36@Process
	mov	ecx, DWORD PTR _theRadar$55[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	SHORT $LN36@Process

; 994  : 				  targetId = theRadar->CurrentTarget()->BaseData()->Id();

	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theRadar$55[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$46[ebp], edx
	mov	DWORD PTR _targetId$46[ebp+4], eax
$LN36@Process:

; 995  : 			   }
; 996  : 			}
; 997  : 
; 998  : 				if (targetId){

	lea	ecx, DWORD PTR _targetId$46[ebp]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN35@Process

; 999  : 			   otherThing = (CampBaseClass*)vuDatabase->Find(targetId);

	mov	ecx, DWORD PTR _targetId$46[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _targetId$46[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _otherThing$[ebp], eax
$LN35@Process:

; 1000 : 			}
; 1001 :          }
; 1002 : 
; 1003 : 			// 2002-02-25 MN let AWACS say the exact type if identified
; 1004 : 			if (otherThing){

	cmp	DWORD PTR _otherThing$[ebp], 0
	je	$LN34@Process

; 1005 : 
; 1006 : 			 // 2002-02-28 modified by MN - get simbaseclass pointer, too, if SIM entity
; 1007 : 			// 2002-02-28 ADDED BY S.G. Needs to check if otherThing is a campaign or sim object
; 1008 : 			 CampBaseClass* campThing;
; 1009 : 			 SimBaseClass* simThing;
; 1010 : 				if (otherThing->IsSim()){

	mov	ecx, DWORD PTR _otherThing$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN33@Process

; 1011 : 				simThing = (SimBaseClass *)otherThing;

	mov	eax, DWORD PTR _otherThing$[ebp]
	mov	DWORD PTR _simThing$41[ebp], eax

; 1012 : 				campThing = ((SimBaseClass *)otherThing)->GetCampaignObject();

	mov	ecx, DWORD PTR _otherThing$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campThing$54[ebp], eax

; 1013 : 			}
; 1014 : 				else {

	jmp	SHORT $LN32@Process
$LN33@Process:

; 1015 : 				campThing = (CampBaseClass *)otherThing;

	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	DWORD PTR _campThing$54[ebp], ecx

; 1016 : 				simThing  = 0; // MLR 2003-11-20 - CTD because this may not get initialized below.

	mov	DWORD PTR _simThing$41[ebp], 0
$LN32@Process:

; 1017 : 
; 1018 : 			}
; 1019 : 			// END OF ADDED SECTION
; 1020 : 
; 1021 : 				if (campThing && campThing->GetIdentified(plane->GetTeam())){

	cmp	DWORD PTR _campThing$54[ebp], 0
	je	$LN31@Process
	mov	edx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _campThing$54[ebp]
	call	?GetIdentified@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetIdentified
	test	eax, eax
	je	$LN31@Process

; 1022 : 
; 1023 : 					// flight and got identified (only flights can be "GetIdentified = true",
; 1024 : 					// so this checks also if it is a flight/aircraft)
; 1025 : 					radioMessage = CreateCallFromAwacsPlane(plane, rcDECLAREIDENTIFIEDTARGET);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	352					; 00000160H
	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 1026 : 
; 1027 : 					if (GetTTRelations(otherThing->GetTeam(), plane->GetTeam()) < Hostile){

	mov	edx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 4
	jge	SHORT $LN30@Process

; 1028 : 					radioMessage->dataBlock.message = rcGENERALID;

	mov	edx, 323				; 00000143H
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+62], dx

; 1029 : 				   // If friendly, 1% chance of being wrong
; 1030 : 						if (rand() % 100 == 0){

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN29@Process

; 1031 : 		              randNum = rand() % 100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _randNum$[ebp], edx

; 1032 : 							if (randNum < 80){

	cmp	DWORD PTR _randNum$[ebp], 80		; 00000050H
	jge	SHORT $LN28@Process

; 1033 : 				         radioMessage->dataBlock.edata[4] = 3;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1034 : 							}
; 1035 : 							else {

	jmp	SHORT $LN27@Process
$LN28@Process:

; 1036 : 						 radioMessage->dataBlock.edata[4] = 2;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 2
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN27@Process:

; 1037 : 	               }
; 1038 : 						}
; 1039 : 						else {

	jmp	SHORT $LN26@Process
$LN29@Process:

; 1040 : 				      radioMessage->dataBlock.edata[4] = 4;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 4
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN26@Process:

; 1041 : 				   }
; 1042 : 		        }
; 1043 : 					else {

	jmp	$LN19@Process
$LN30@Process:

; 1044 : 
; 1045 : 			       // 0 = Hostile  - Known bad guy
; 1046 : 				   // 1 = Bandit   - bad guy known from point of origin
; 1047 : 			       // 2 = Outlaw   - Probably bad based on speed and direction
; 1048 : 				   // 3 = Bogie    - Unknown
; 1049 : 		           // 4 = Freindly
; 1050 : 			       randNum = rand() % 100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _randNum$[ebp], edx

; 1051 : 						if (otherThing->ZPos() > -3000){

	mov	ecx, DWORD PTR _otherThing$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3793[ebp]
	movss	xmm0, DWORD PTR tv3793[ebp]
	comiss	xmm0, DWORD PTR __real@c53b8000
	jbe	SHORT $LN24@Process

; 1052 : 					  radioMessage->dataBlock.edata[4] = 3;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1053 : 					  radioMessage->dataBlock.message = rcGENERALID;

	mov	edx, 323				; 00000143H
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+62], dx
	jmp	$LN19@Process
$LN24@Process:

; 1054 : 				   }
; 1055 : 						else if (randNum < 5){

	cmp	DWORD PTR _randNum$[ebp], 5
	jge	SHORT $LN22@Process

; 1056 : 		              radioMessage->dataBlock.edata[4] = 2;

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, 2
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 1057 :   					  radioMessage->dataBlock.message = rcGENERALID;

	mov	ecx, 323				; 00000143H
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+62], cx
	jmp	SHORT $LN19@Process
$LN22@Process:

; 1058 : 				   }
; 1059 : 						else if ( randNum < 20 && GetTTRelations ( otherThing->GetTeam(), plane->GetTeam() ) < War){

	cmp	DWORD PTR _randNum$[ebp], 20		; 00000014H
	jge	SHORT $LN20@Process
	mov	eax, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _otherThing$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 5
	jge	SHORT $LN20@Process

; 1060 : 					  radioMessage->dataBlock.edata[4] = 1;

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 1061 : 						}
; 1062 : 						else {

	jmp	SHORT $LN19@Process
$LN20@Process:

; 1063 : 		              radioMessage->dataBlock.edata[4] = 0;

	mov	ecx, 2
	shl	ecx, 2
	xor	edx, edx
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx
$LN19@Process:

; 1064 : 			    }
; 1065 : 					}
; 1066 : 
; 1067 : 					if (simThing){

	cmp	DWORD PTR _simThing$41[ebp], 0
	je	SHORT $LN18@Process

; 1068 : 					// MLR 2003-11-20 got a CTD here because simThing was 0x3, added initializing to 0 above.
; 1069 : 					// in Sim we always have only one aircraft locked or under the cursor
; 1070 : 						radioMessage->dataBlock.edata[5] = 
; 1071 : 							(short)((simThing->Type() - VU_LAST_ENTITY_TYPE)*2);	//type

	mov	ecx, DWORD PTR _simThing$41[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	lea	edx, DWORD PTR [ecx+ecx-200]
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 1072 : 				}
; 1073 : 					else {

	jmp	SHORT $LN15@Process
$LN18@Process:

; 1074 : 					// A camp target can consist of more than one component
; 1075 : 					int numAircraft = campThing->NumberOfComponents();

	mov	ecx, DWORD PTR _campThing$54[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _numAircraft$26[ebp], eax

; 1076 : 						if(numAircraft > 1){

	cmp	DWORD PTR _numAircraft$26[ebp], 1
	jle	SHORT $LN16@Process

; 1077 : 							//type
; 1078 : 							radioMessage->dataBlock.edata[5] = (short)(((Unit)campThing)->GetVehicleID(0)*2 + 1);

	push	0
	mov	ecx, DWORD PTR _campThing$54[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	movsx	edx, ax
	lea	eax, DWORD PTR [edx+edx+1]
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1079 : 						}
; 1080 : 						else {

	jmp	SHORT $LN15@Process
$LN16@Process:

; 1081 : 							//type
; 1082 : 							radioMessage->dataBlock.edata[5] = (short)(((Unit)campThing)->GetVehicleID(0)*2);

	push	0
	mov	ecx, DWORD PTR _campThing$54[ebp]
	call	?GetVehicleID@UnitClass@@QAEFH@Z	; UnitClass::GetVehicleID
	cwde
	shl	eax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN15@Process:

; 1083 : 						}
; 1084 : 				}
; 1085 : 			}
; 1086 : 				else {

	jmp	$LN2@Process
$LN31@Process:

; 1087 : 					// unidentified flights and others
; 1088 : 					// 2002-02-11 MN changed to CreateCallFromAwacsPlane - 
; 1089 : 					//AWACS issues the exact aircraft ID in the flight (not just the flight number)
; 1090 : 				radioMessage = CreateCallFromAwacsPlane (plane, rcGENERALID);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	323					; 00000143H
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	call	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 1091 : 		        if (GetTTRelations(otherThing->GetTeam(), plane->GetTeam()) < Hostile)

	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _otherThing$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 4
	jge	SHORT $LN13@Process

; 1092 : 			    {
; 1093 : 				   // If friendly, 1% chance of being wrong
; 1094 : 					if (rand() % 100 == 0)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN12@Process

; 1095 : 	               {
; 1096 : 		              randNum = rand() % 100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _randNum$[ebp], edx

; 1097 : 			          if (randNum < 80)

	cmp	DWORD PTR _randNum$[ebp], 80		; 00000050H
	jge	SHORT $LN11@Process

; 1098 : 				         radioMessage->dataBlock.edata[4] = 3;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1099 : 					  else

	jmp	SHORT $LN10@Process
$LN11@Process:

; 1100 : 						 radioMessage->dataBlock.edata[4] = 2;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 2
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN10@Process:

; 1101 : 	               }
; 1102 : 		           else

	jmp	SHORT $LN9@Process
$LN12@Process:

; 1103 : 			       {
; 1104 : 				      radioMessage->dataBlock.edata[4] = 4;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 4
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN9@Process:

; 1105 : 	               }
; 1106 : 		        }
; 1107 : 			    else

	jmp	$LN2@Process
$LN13@Process:

; 1108 : 				{
; 1109 : 	               // 0 = Hostile  - Known bad guy
; 1110 : 		           // 1 = Bandit   - bad guy known from point of origin
; 1111 : 			       // 2 = Outlaw   - Probably bad based on speed and direction
; 1112 : 				   // 3 = Bogie    - Unknown
; 1113 : 	               // 4 = Freindly
; 1114 : 		           randNum = rand() % 100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _randNum$[ebp], edx

; 1115 : 			       if (otherThing->ZPos() > -3000)

	mov	ecx, DWORD PTR _otherThing$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3880[ebp]
	movss	xmm0, DWORD PTR tv3880[ebp]
	comiss	xmm0, DWORD PTR __real@c53b8000
	jbe	SHORT $LN7@Process

; 1116 : 				      radioMessage->dataBlock.edata[4] = 3;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
	jmp	SHORT $LN2@Process
$LN7@Process:

; 1117 : 	               else if (randNum < 5)

	cmp	DWORD PTR _randNum$[ebp], 5
	jge	SHORT $LN5@Process

; 1118 : 		              radioMessage->dataBlock.edata[4] = 2;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 2
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
	jmp	SHORT $LN2@Process
$LN5@Process:

; 1119 : 						else if ( randNum < 20 && GetTTRelations ( otherThing->GetTeam(), plane->GetTeam() ) < War)

	cmp	DWORD PTR _randNum$[ebp], 20		; 00000014H
	jge	SHORT $LN3@Process
	mov	edx, DWORD PTR _plane$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _plane$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _otherThing$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 5
	jge	SHORT $LN3@Process

; 1120 : 					  radioMessage->dataBlock.edata[4] = 1;

	mov	edx, 2
	shl	edx, 2
	mov	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1121 : 	               else

	jmp	SHORT $LN2@Process
$LN3@Process:

; 1122 : 		              radioMessage->dataBlock.edata[4] = 0;

	mov	edx, 2
	shl	edx, 2
	xor	eax, eax
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN2@Process:

; 1123 : 			    }
; 1124 : 			}
; 1125 :          }
; 1126 : 			else {

	jmp	SHORT $LN1@Process
$LN34@Process:

; 1127 : 				radioMessage = CreateCallFromAwacs(flight, rcNOTARGETS);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	push	70					; 00000046H
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 1128 : 				MonoPrint ("No threats detected :->\n");

	push	OFFSET ??_C@_0BJ@IJFPPLLJ@No?5threats?5detected?5?3?9?$DO?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN1@Process:

; 1129 :          }
; 1130 : 			radioMessage->dataBlock.time_to_play = delay;//wait a little bit so the request will play first

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _delay$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 1131 : 			FalconSendMessage(radioMessage, FALSE);	

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1132 :          MonoPrint ("Ask for declare here\n");

	push	OFFSET ??_C@_0BG@JKJLGINP@Ask?5for?5declare?5here?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 1133 :          MonoPrint ("Get declaration here\n");

	push	OFFSET ??_C@_0BG@JPLILLEH@Get?5declaration?5here?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN174@Process:

; 1134 :          break;
; 1135 :       }
; 1136 :    }
; 1137 :    return 0;

	xor	eax, eax
$LN187@Process:

; 1138 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN211@Process:
	DD	$LN171@Process
	DD	$LN173@Process
	DD	$LN169@Process
	DD	$LN167@Process
	DD	$LN159@Process
	DD	$LN140@Process
	DD	$LN117@Process
	DD	$LN115@Process
	DD	$LN111@Process
	DD	$LN97@Process
	DD	$LN94@Process
	DD	$LN90@Process
	DD	$LN77@Process
	DD	$LN84@Process
	DD	$LN60@Process
	DD	$LN50@Process
	DD	$LN165@Process
	DD	$LN39@Process
	DD	$LN71@Process
	DD	$LN174@Process
$LN207@Process:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	19					; 00000013H
	DB	17					; 00000011H
	DB	18					; 00000012H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$0:
	lea	ecx, DWORD PTR _myit$21[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$1:
	mov	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$2:
	mov	eax, DWORD PTR $T30[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$3:
	lea	ecx, DWORD PTR _arrCandidates$18[ebp]
	jmp	??1?$map@MPAVFlightClass@@U?$less@M@std@@V?$allocator@U?$pair@$$CBMPAVFlightClass@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$4:
	lea	ecx, DWORD PTR _myit$19[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?Process@FalconAWACSMessage@@MAEHE@Z$5:
	lea	ecx, DWORD PTR _myit$20[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?Process@FalconAWACSMessage@@MAEHE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-496]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Process@FalconAWACSMessage@@MAEHE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Process@FalconAWACSMessage@@MAEHE@Z ENDP		; FalconAWACSMessage::Process
; Function compile flags: /Odtp
;	COMDAT ??0DATA_BLOCK@FalconAWACSMessage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DATA_BLOCK@FalconAWACSMessage@@QAE@XZ PROC		; FalconAWACSMessage::DATA_BLOCK::DATA_BLOCK, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DATA_BLOCK@FalconAWACSMessage@@QAE@XZ ENDP		; FalconAWACSMessage::DATA_BLOCK::DATA_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\msginc\awacsmsg.h
;	COMDAT ?Encode@FalconAWACSMessage@@UAEHPAPAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = -4						; size = 4
_buf$ = 8						; size = 4
?Encode@FalconAWACSMessage@@UAEHPAPAE@Z PROC		; FalconAWACSMessage::Encode, COMDAT
; _this$ = ecx

; 67   :          {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 68   :          int size;
; 69   : 
; 70   :             size = FalconEvent::Encode (buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Encode@FalconEvent@@UAEHPAPAE@Z	; FalconEvent::Encode
	mov	DWORD PTR _size$[ebp], eax

; 71   :             memcpy (*buf, &dataBlock, sizeof (dataBlock));

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 72   :             *buf += sizeof (dataBlock);

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], edx

; 73   :             size += sizeof (dataBlock);

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _size$[ebp], ecx

; 74   :             return size;

	mov	eax, DWORD PTR _size$[ebp]

; 75   :          };

	mov	esp, ebp
	pop	ebp
	ret	4
?Encode@FalconAWACSMessage@@UAEHPAPAE@Z ENDP		; FalconAWACSMessage::Encode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\msginc\awacsmsg.h
;	COMDAT ?Decode@FalconAWACSMessage@@UAEHPAPAEPAJ@Z
_TEXT	SEGMENT
_init$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_rem$ = 12						; size = 4
?Decode@FalconAWACSMessage@@UAEHPAPAEPAJ@Z PROC		; FalconAWACSMessage::Decode, COMDAT
; _this$ = ecx

; 58   : 	  {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		  long init = *rem;

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _init$[ebp], ecx

; 60   : 
; 61   : 
; 62   : 		  FalconEvent::Decode (buf, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Decode@FalconEvent@@UAEHPAPAEPAJ@Z	; FalconEvent::Decode

; 63   : 		  memcpychk(&dataBlock, buf, sizeof (dataBlock), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 64   : 		  return init - *rem;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR _init$[ebp]
	sub	eax, DWORD PTR [ecx]

; 65   : 	  };

	mov	esp, ebp
	pop	ebp
	ret	8
?Decode@FalconAWACSMessage@@UAEHPAPAEPAJ@Z ENDP		; FalconAWACSMessage::Decode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\msginc\awacsmsg.h
;	COMDAT ?Size@FalconAWACSMessage@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@FalconAWACSMessage@@UBEHXZ PROC			; FalconAWACSMessage::Size, COMDAT
; _this$ = ecx

; 55   :       virtual int Size() const { return sizeof(dataBlock) + FalconEvent::Size();};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@FalconEvent@@UBEHXZ		; FalconEvent::Size
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@FalconAWACSMessage@@UBEHXZ ENDP			; FalconAWACSMessage::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\awacsmsg.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FalconAWACSMessage@@UAE@XZ PROC			; FalconAWACSMessage::~FalconAWACSMessage
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FalconAWACSMessage@@6B@

; 65   :    // Your Code Goes Here
; 66   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
	mov	esp, ebp
	pop	ebp
	ret	0
??1FalconAWACSMessage@@UAE@XZ ENDP			; FalconAWACSMessage::~FalconAWACSMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\awacsmsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 1
_senderid$ = 12						; size = 8
_target$ = 20						; size = 8
??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z PROC		; FalconAWACSMessage::FalconAWACSMessage
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	push	1
	push	45					; 0000002dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@1@Z ; FalconEvent::FalconEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FalconAWACSMessage@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0DATA_BLOCK@FalconAWACSMessage@@QAE@XZ

; 59   :    // Your Code Goes Here
; 60   : 	type;
; 61   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
__ehhandler$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FalconAWACSMessage@@QAE@EVVU_ID@@0@Z ENDP		; FalconAWACSMessage::FalconAWACSMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\awacsmsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entityId$ = 8						; size = 8
_target$ = 16						; size = 4
_loopback$ = 20						; size = 1
??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z PROC ; FalconAWACSMessage::FalconAWACSMessage
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _loopback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entityId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _entityId$[ebp]
	push	eax
	push	1
	push	45					; 0000002dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconEvent::FalconEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FalconAWACSMessage@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0DATA_BLOCK@FalconAWACSMessage@@QAE@XZ

; 52   :    // Your Code Goes Here
; 53   : //me123	RequestOutOfBandTransmit ();
; 54   : 	RequestReliableTransmit ();//me123

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 55   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
__ehhandler$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ENDP ; FalconAWACSMessage::FalconAWACSMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?EntityId@VuMessage@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?EntityId@VuMessage@@QBE?AVVU_ID@@XZ PROC		; VuMessage::EntityId, COMDAT
; _this$ = ecx

; 157  : 	VU_ID EntityId() const { return entityId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?EntityId@VuMessage@@QBE?AVVU_ID@@XZ ENDP		; VuMessage::EntityId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
END
