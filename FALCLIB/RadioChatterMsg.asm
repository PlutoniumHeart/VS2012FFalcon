; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FALCLIB\MsgSrc\RadioChatterMsg.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?RADIO_PROX_RANGE@@3MA				; RADIO_PROX_RANGE
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?gDefaultAWACSCallSign@@3FA			; gDefaultAWACSCallSign
PUBLIC	?gDefaultAWACSFlightNum@@3FA			; gDefaultAWACSFlightNum
PUBLIC	?MAX_RADIO_RANGE@@3MA				; MAX_RADIO_RANGE
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
_DATA	SEGMENT
_gDefaultAWACSVoice DB 0ffH
	ORG $+3
?RADIO_PROX_RANGE@@3MA DD 0486d5a80r		; 243050 ; RADIO_PROX_RANGE
?gDefaultAWACSCallSign@@3FA DW 02dH			; gDefaultAWACSCallSign
	ORG $+2
?gDefaultAWACSFlightNum@@3FA DW 01H			; gDefaultAWACSFlightNum
	ORG $+2
?MAX_RADIO_RANGE@@3MA DD 049de8280r		; 1.8228e+006 ; MAX_RADIO_RANGE
_DATA	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?EntityId@VuMessage@@QBE?AVVU_ID@@XZ		; VuMessage::EntityId
PUBLIC	?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ ; VuBin<SquadronClass>::get
PUBLIC	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
PUBLIC	?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ; FalconSessionEntity::GetPlayerSquadron
PUBLIC	?GetFlyState@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetFlyState
PUBLIC	?GetVoiceID@FalconSessionEntity@@QBEEXZ		; FalconSessionEntity::GetVoiceID
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?IsCampaign@FalconEntity@@QAEHXZ		; FalconEntity::IsCampaign
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCallsignIdx@SimBaseClass@@QAEHXZ		; SimBaseClass::GetCallsignIdx
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?GetDefaultAwacsVoice@@YAEXZ			; GetDefaultAwacsVoice
PUBLIC	?ResetDefaultAwacsVoice@@YAXXZ			; ResetDefaultAwacsVoice
PUBLIC	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
PUBLIC	??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z	; FalconRadioChatterMessage::FalconRadioChatterMessage
PUBLIC	??1FalconRadioChatterMessage@@UAE@XZ		; FalconRadioChatterMessage::~FalconRadioChatterMessage
PUBLIC	?Size@FalconRadioChatterMessage@@UBEHXZ		; FalconRadioChatterMessage::Size
PUBLIC	?Decode@FalconRadioChatterMessage@@UAEHPAPAEPAJ@Z ; FalconRadioChatterMessage::Decode
PUBLIC	?Encode@FalconRadioChatterMessage@@UAEHPAPAE@Z	; FalconRadioChatterMessage::Encode
PUBLIC	??0DATA_BLOCK@FalconRadioChatterMessage@@QAE@XZ	; FalconRadioChatterMessage::DATA_BLOCK::DATA_BLOCK
PUBLIC	?Process@FalconRadioChatterMessage@@MAEHE@Z	; FalconRadioChatterMessage::Process
PUBLIC	??_GFalconRadioChatterMessage@@UAEPAXI@Z	; FalconRadioChatterMessage::`scalar deleting destructor'
PUBLIC	?ConvertFlightNumberToCallNumber@@YAFH@Z	; ConvertFlightNumberToCallNumber
PUBLIC	?ConvertWingNumberToCallNumber@@YAFH@Z		; ConvertWingNumberToCallNumber
PUBLIC	?ConvertToCallNumber@@YAFHH@Z			; ConvertToCallNumber
PUBLIC	?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromATC
PUBLIC	?SendCallFromATC@@YAXPAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallFromATC
PUBLIC	?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallToATC
PUBLIC	?SendCallToATC@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToATC
PUBLIC	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; SendCallToATC
PUBLIC	?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; CreateCallToATC
PUBLIC	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
PUBLIC	?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallToAWACS
PUBLIC	?SendCallToAWACS@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
PUBLIC	?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallToAWACS
PUBLIC	?SendCallFromAwacs@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z ; SendCallFromAwacs
PUBLIC	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
PUBLIC	?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacsPlane
PUBLIC	?SendCallToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ; SendCallToPlane
PUBLIC	?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ; CreateCallToPlane
PUBLIC	?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z ; SendRogerToPlane
PUBLIC	?SendCallToFlight@@YAXPAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ; SendCallToFlight
PUBLIC	?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ; CreateCallToFlight
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?Voice@ATCBrain@@QAEEXZ				; ATCBrain::Voice
PUBLIC	?Approach@ATCBrain@@QAEFXZ			; ATCBrain::Approach
PUBLIC	?Tower@ATCBrain@@QAEFXZ				; ATCBrain::Tower
PUBLIC	?RunningCampaign@SimulationDriver@@QBE_NXZ	; SimulationDriver::RunningCampaign
PUBLIC	?Airbase@DigitalBrain@@QAE?AVVU_ID@@XZ		; DigitalBrain::Airbase
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7FalconRadioChatterMessage@@6B@		; FalconRadioChatterMessage::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FalconRadioChatterMessage@@6B@		; FalconRadioChatterMessage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFalconRadioChatterMessage@@@8		; FalconRadioChatterMessage `RTTI Type Descriptor'
PUBLIC	??_R3FalconRadioChatterMessage@@8		; FalconRadioChatterMessage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconRadioChatterMessage@@8		; FalconRadioChatterMessage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconRadioChatterMessage@@8	; FalconRadioChatterMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@FalconEvent@@8			; FalconEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEvent@@@8				; FalconEvent `RTTI Type Descriptor'
PUBLIC	??_R3FalconEvent@@8				; FalconEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEvent@@8				; FalconEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuMessage@@8			; VuMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuMessage@@@8				; VuMessage `RTTI Type Descriptor'
PUBLIC	??_R3VuMessage@@8				; VuMessage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuMessage@@8				; VuMessage::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@40800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z:PROC ; VuSessionsIterator::VuSessionsIterator
EXTRN	??1VuSessionsIterator@@UAE@XZ:PROC		; VuSessionsIterator::~VuSessionsIterator
EXTRN	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetFirst
EXTRN	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ:PROC ; VuSessionsIterator::GetNext
EXTRN	?DoSend@VuMessage@@UAEEXZ:PROC			; VuMessage::DoSend
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?Size@FalconEvent@@UBEHXZ:PROC			; FalconEvent::Size
EXTRN	?Decode@FalconEvent@@UAEHPAPAEPAJ@Z:PROC	; FalconEvent::Decode
EXTRN	?Encode@FalconEvent@@UAEHPAPAE@Z:PROC		; FalconEvent::Encode
EXTRN	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconEvent::FalconEvent
EXTRN	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@1@Z:PROC ; FalconEvent::FalconEvent
EXTRN	??1FalconEvent@@MAE@XZ:PROC			; FalconEvent::~FalconEvent
EXTRN	?Activate@FalconEvent@@MAEHPAVVuEntity@@@Z:PROC	; FalconEvent::Activate
EXTRN	?LocalSize@FalconEvent@@EBEHXZ:PROC		; FalconEvent::LocalSize
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??_EFalconRadioChatterMessage@@UAEPAXI@Z:PROC	; FalconRadioChatterMessage::`vector deleting destructor'
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z:PROC ; CampBaseClass::GetComponentIndex
EXTRN	?PlayRadioMessage@VoiceFilter@@QAEXDFPAFKDDVVU_ID@@H1@Z:PROC ; VoiceFilter::PlayRadioMessage
EXTRN	?GetBullseyeComm@VoiceFilter@@QAEHPAHPAF@Z:PROC	; VoiceFilter::GetBullseyeComm
EXTRN	?GetWarp@VoiceFilter@@QAEHH@Z:PROC		; VoiceFilter::GetWarp
EXTRN	?PickVoice@VoiceMapper@@QAEHHH@Z:PROC		; VoiceMapper::PickVoice
EXTRN	?GetMinutesSinceMidnight@CampaignClass@@QAEHXZ:PROC ; CampaignClass::GetMinutesSinceMidnight
EXTRN	?DistSqu@@YAMMMMM@Z:PROC			; DistSqu
EXTRN	?GetChannelFromVUID@TacanList@@QAEHVVU_ID@@PAHPAW4StationSet@1@PAW4Domain@1@11PAM@Z:PROC ; TacanList::GetChannelFromVUID
EXTRN	?GetPilotCallNumber@FlightClass@@QAEHH@Z:PROC	; FlightClass::GetPilotCallNumber
EXTRN	?GetPilotVoiceID@FlightClass@@QAEEH@Z:PROC	; FlightClass::GetPilotVoiceID
EXTRN	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ:PROC	; FlightClass::GetFlightLeadVoiceID
EXTRN	?GetFlightController@FlightClass@@QAEPAV1@XZ:PROC ; FlightClass::GetFlightController
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_voicemap@@3VVoiceMapper@@A:QWORD		; g_voicemap
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?gTacanList@@3PAVTacanList@@A:DWORD		; gTacanList
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?noUIcomms@@3HA:DWORD				; noUIcomms
EXTRN	?voiceFilter@@3PAVVoiceFilter@@A:DWORD		; voiceFilter
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuMessage@@8
rdata$r	SEGMENT
??_R2VuMessage@@8 DD FLAT:??_R1A@?0A@EA@VuMessage@@8	; VuMessage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuMessage@@8
rdata$r	SEGMENT
??_R3VuMessage@@8 DD 00H				; VuMessage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuMessage@@@8
_DATA	SEGMENT
??_R0?AVVuMessage@@@8 DD FLAT:??_7type_info@@6B@	; VuMessage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuMessage@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuMessage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuMessage@@8 DD FLAT:??_R0?AVVuMessage@@@8 ; VuMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEvent@@8
rdata$r	SEGMENT
??_R2FalconEvent@@8 DD FLAT:??_R1A@?0A@EA@FalconEvent@@8 ; FalconEvent::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEvent@@8
rdata$r	SEGMENT
??_R3FalconEvent@@8 DD 00H				; FalconEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEvent@@@8
_DATA	SEGMENT
??_R0?AVFalconEvent@@@8 DD FLAT:??_7type_info@@6B@	; FalconEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEvent@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEvent@@8 DD FLAT:??_R0?AVFalconEvent@@@8 ; FalconEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconRadioChatterMessage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconRadioChatterMessage@@8 DD FLAT:??_R0?AVFalconRadioChatterMessage@@@8 ; FalconRadioChatterMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconRadioChatterMessage@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconRadioChatterMessage@@8
rdata$r	SEGMENT
??_R2FalconRadioChatterMessage@@8 DD FLAT:??_R1A@?0A@EA@FalconRadioChatterMessage@@8 ; FalconRadioChatterMessage::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEvent@@8
	DD	FLAT:??_R1A@?0A@EA@VuMessage@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconRadioChatterMessage@@8
rdata$r	SEGMENT
??_R3FalconRadioChatterMessage@@8 DD 00H		; FalconRadioChatterMessage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FalconRadioChatterMessage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconRadioChatterMessage@@@8
_DATA	SEGMENT
??_R0?AVFalconRadioChatterMessage@@@8 DD FLAT:??_7type_info@@6B@ ; FalconRadioChatterMessage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconRadioChatterMessage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FalconRadioChatterMessage@@6B@
rdata$r	SEGMENT
??_R4FalconRadioChatterMessage@@6B@ DD 00H		; FalconRadioChatterMessage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFalconRadioChatterMessage@@@8
	DD	FLAT:??_R3FalconRadioChatterMessage@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7FalconRadioChatterMessage@@6B@
CONST	SEGMENT
??_7FalconRadioChatterMessage@@6B@ DD FLAT:??_R4FalconRadioChatterMessage@@6B@ ; FalconRadioChatterMessage::`vftable'
	DD	FLAT:??_EFalconRadioChatterMessage@@UAEPAXI@Z
	DD	FLAT:?Size@FalconRadioChatterMessage@@UBEHXZ
	DD	FLAT:?DoSend@VuMessage@@UAEEXZ
	DD	FLAT:?Activate@FalconEvent@@MAEHPAVVuEntity@@@Z
	DD	FLAT:?Process@FalconRadioChatterMessage@@MAEHE@Z
	DD	FLAT:?Encode@FalconRadioChatterMessage@@UAEHPAPAE@Z
	DD	FLAT:?Decode@FalconRadioChatterMessage@@UAEHPAPAEPAJ@Z
	DD	FLAT:?LocalSize@FalconEvent@@EBEHXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z$0
__unwindtable$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z$0
__unwindtable$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z$0
__unwindtable$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0
__unwindtable$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z$0
__unwindtable$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z$0
__unwindtable$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0
__unwindtable$?Process@FalconRadioChatterMessage@@MAEHE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Process@FalconRadioChatterMessage@@MAEHE@Z$0
__unwindtable$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z$0
__unwindtable$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z$0
__unwindtable$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z$1
__unwindtable$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$1
__unwindtable$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$1
__ehfuncinfo$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Process@FalconRadioChatterMessage@@MAEHE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Process@FalconRadioChatterMessage@@MAEHE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?Airbase@DigitalBrain@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Airbase@DigitalBrain@@QAE?AVVU_ID@@XZ PROC		; DigitalBrain::Airbase, COMDAT
; _this$ = ecx

; 770  : 	VU_ID	Airbase(void)	{return airbase;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	mov	edx, DWORD PTR [eax+312]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Airbase@DigitalBrain@@QAE?AVVU_ID@@XZ ENDP		; DigitalBrain::Airbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?RunningCampaign@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv80 = -8						; size = 4
tv76 = -4						; size = 4
?RunningCampaign@SimulationDriver@@QBE_NXZ PROC		; SimulationDriver::RunningCampaign, COMDAT
; _this$ = ecx

; 59   : 	bool RunningCampaign() const             { return FalconLocalGame->GetGameType() == game_Campaign; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@RunningCam
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@RunningCam
$LN3@RunningCam:
	mov	DWORD PTR tv76[ebp], 0
$LN4@RunningCam:
	mov	ecx, DWORD PTR tv76[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 4
	jne	SHORT $LN5@RunningCam
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN6@RunningCam
$LN5@RunningCam:
	mov	DWORD PTR tv80[ebp], 0
$LN6@RunningCam:
	mov	al, BYTE PTR tv80[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?RunningCampaign@SimulationDriver@@QBE_NXZ ENDP		; SimulationDriver::RunningCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\atcbrain.h
;	COMDAT ?Tower@ATCBrain@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Tower@ATCBrain@@QAEFXZ PROC				; ATCBrain::Tower, COMDAT
; _this$ = ecx

; 183  : 	short				Tower(void)							{return (short)(callsign + 46);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+2]
	add	eax, 46					; 0000002eH
	mov	esp, ebp
	pop	ebp
	ret	0
?Tower@ATCBrain@@QAEFXZ ENDP				; ATCBrain::Tower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\atcbrain.h
;	COMDAT ?Approach@ATCBrain@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Approach@ATCBrain@@QAEFXZ PROC				; ATCBrain::Approach, COMDAT
; _this$ = ecx

; 182  : 	short				Approach(void)						{return callsign;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+2]
	mov	esp, ebp
	pop	ebp
	ret	0
?Approach@ATCBrain@@QAEFXZ ENDP				; ATCBrain::Approach
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\atcbrain.h
;	COMDAT ?Voice@ATCBrain@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Voice@ATCBrain@@QAEEXZ PROC				; ATCBrain::Voice, COMDAT
; _this$ = ecx

; 181  : 	uchar				Voice(void)							{return voice;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Voice@ATCBrain@@QAEEXZ ENDP				; ATCBrain::Voice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 8
$T3 = -76						; size = 8
$T4 = -68						; size = 8
$T5 = -60						; size = 8
_fromID$ = -52						; size = 8
$T6 = -44						; size = 4
tv215 = -40						; size = 4
$T7 = -36						; size = 4
_fromFlight$8 = -32					; size = 4
_radioMessage$ = -28					; size = 4
_fromCallnum$ = -24					; size = 2
_fromCallsign$ = -20					; size = 2
_fromVoice$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
_from$ = 12						; size = 4
_call$ = 16						; size = 2
_target$ = 20						; size = 4
?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z PROC ; CreateCallToFlight

; 875  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 876  : 	FalconRadioChatterMessage	*radioMessage;
; 877  : 	
; 878  : 	VU_ID						fromID;

	lea	ecx, DWORD PTR _fromID$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 879  : 	short						fromCallsign, fromCallnum;
; 880  : 	uchar						fromVoice;
; 881  : 
; 882  : 	ShiAssert (flight);	
; 883  : 
; 884  : 	if(!from)

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN6@CreateCall

; 885  : 	{
; 886  : 		fromID = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _fromID$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _fromID$[ebp+4], ecx

; 887  : 		fromVoice =  GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	BYTE PTR _fromVoice$[ebp], al

; 888  : 		fromCallsign = -1;

	or	edx, -1
	mov	WORD PTR _fromCallsign$[ebp], dx

; 889  : 		fromCallnum = -1;

	or	eax, -1
	mov	WORD PTR _fromCallnum$[ebp], ax
	jmp	$LN5@CreateCall
$LN6@CreateCall:

; 890  : 	}
; 891  : 	else if(from->IsAirplane())

	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN4@CreateCall

; 892  : 	{
; 893  : 		Flight fromFlight = ((Flight)((AircraftClass*)from)->GetCampaignObject());

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _fromFlight$8[ebp], eax

; 894  : 		fromID = from->Id();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], edx
	mov	DWORD PTR _fromID$[ebp+4], eax

; 895  : 		fromVoice =  fromFlight->GetPilotVoiceID(((AircraftClass*)from)->pilotSlot);

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx+665]
	push	edx
	mov	ecx, DWORD PTR _fromFlight$8[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	BYTE PTR _fromVoice$[ebp], al

; 896  : 		fromCallsign = fromFlight->callsign_id;;

	mov	eax, DWORD PTR _fromFlight$8[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	WORD PTR _fromCallsign$[ebp], cx

; 897  : 		fromCallnum = ConvertToCallNumber( fromFlight->callsign_num, ((AircraftClass*)from)->vehicleInUnit );		

	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _fromFlight$8[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	WORD PTR _fromCallnum$[ebp], ax
	jmp	$LN5@CreateCall
$LN4@CreateCall:

; 898  : 	}
; 899  : 	else if(from->IsFlight())

	mov	eax, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN2@CreateCall

; 900  : 	{
; 901  : 		fromID = from->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], edx
	mov	DWORD PTR _fromID$[ebp+4], eax

; 902  : 		fromVoice =  ((Flight)from)->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	BYTE PTR _fromVoice$[ebp], al

; 903  : 		fromCallsign = ((Flight)from)->callsign_id;

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	WORD PTR _fromCallsign$[ebp], dx

; 904  : 		fromCallnum = ConvertFlightNumberToCallNumber(((Flight)from)->callsign_num);

	mov	eax, DWORD PTR _from$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	WORD PTR _fromCallnum$[ebp], ax

; 905  : 	}
; 906  : 	else 

	jmp	SHORT $LN5@CreateCall
$LN2@CreateCall:

; 907  : 	{
; 908  : 		fromID = from->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], ecx
	mov	DWORD PTR _fromID$[ebp+4], edx

; 909  : 		fromVoice =  GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	BYTE PTR _fromVoice$[ebp], al

; 910  : 		fromCallsign = -1;

	or	eax, -1
	mov	WORD PTR _fromCallsign$[ebp], ax

; 911  : 		fromCallnum = -1;

	or	ecx, -1
	mov	WORD PTR _fromCallnum$[ebp], cx
$LN5@CreateCall:

; 912  : 	}
; 913  : 
; 914  : 	// Flight data
; 915  : 	radioMessage = new FalconRadioChatterMessage( flight->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN9@CreateCall
	push	1
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv215[ebp], eax
	jmp	SHORT $LN10@CreateCall
$LN9@CreateCall:
	mov	DWORD PTR tv215[ebp], 0
$LN10@CreateCall:
	mov	eax, DWORD PTR tv215[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 916  : 	radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 917  : 	radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber(flight->callsign_num);

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 918  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;	

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+60], 3

; 919  : 	radioMessage->dataBlock.from = fromID;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _fromID$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _fromID$[ebp+4]
	mov	DWORD PTR [eax+52], edx

; 920  : 	radioMessage->dataBlock.voice_id = fromVoice;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cl, BYTE PTR _fromVoice$[ebp]
	mov	BYTE PTR [eax+61], cl

; 921  : 	radioMessage->dataBlock.edata[2] = fromCallsign;

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _fromCallsign$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 922  : 	radioMessage->dataBlock.edata[3] = fromCallnum;

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _fromCallnum$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 923  : 	radioMessage->dataBlock.message = call;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	ax, WORD PTR _call$[ebp]
	mov	WORD PTR [edx+62], ax

; 924  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 925  : 	//radioMessage->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 926  : 
; 927  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 928  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallToFlight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_flight$ = 8						; size = 4
_from$ = 12						; size = 4
_call$ = 16						; size = 2
_target$ = 20						; size = 4
?SendCallToFlight@@YAXPAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z PROC ; SendCallToFlight

; 932  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 933  : 	FalconRadioChatterMessage	*radioMessage = CreateCallToFlight(flight, from, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	push	eax
	call	?CreateCallToFlight@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ; CreateCallToFlight
	add	esp, 16					; 00000010H
	mov	DWORD PTR _radioMessage$[ebp], eax

; 934  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 935  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallToFlight@@YAXPAVFlightClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ENDP ; SendCallToFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -88						; size = 8
$T3 = -80						; size = 8
$T4 = -72						; size = 8
$T5 = -64						; size = 8
_fromID$ = -56						; size = 8
_flight$ = -48						; size = 4
$T6 = -44						; size = 4
tv224 = -40						; size = 4
$T7 = -36						; size = 4
_fromFlight$8 = -32					; size = 4
_radioMessage$ = -28					; size = 4
_fromCallnum$ = -24					; size = 2
_fromCallsign$ = -20					; size = 2
_fromVoice$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_aircraft$ = 8						; size = 4
_from$ = 12						; size = 4
_target$ = 16						; size = 4
?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z PROC ; SendRogerToPlane

; 1016 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1017 : 		FalconRadioChatterMessage	*radioMessage;
; 1018 : 		Flight						flight;
; 1019 : 		VU_ID						fromID;

	lea	ecx, DWORD PTR _fromID$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1020 : 		short						fromCallsign, fromCallnum;
; 1021 : 		uchar						fromVoice;
; 1022 : 
; 1023 : 		ShiAssert (aircraft);	
; 1024 : 		flight = (Flight)aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 1025 : 	
; 1026 : 		if(!from)

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN8@SendRogerT

; 1027 : 		{
; 1028 : 			return;

	jmp	$LN9@SendRogerT
	jmp	$LN7@SendRogerT
$LN8@SendRogerT:

; 1029 : 		}
; 1030 : 		else if(from->IsAirplane())

	mov	eax, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN6@SendRogerT

; 1031 : 		{
; 1032 : 			Flight fromFlight = ((Flight)((AircraftClass*)from)->GetCampaignObject());

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _fromFlight$8[ebp], eax

; 1033 : 			fromID = from->Id();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], edx
	mov	DWORD PTR _fromID$[ebp+4], eax

; 1034 : 			fromVoice =  fromFlight->GetPilotVoiceID( ((AircraftClass*)from)->pilotSlot);

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx+665]
	push	edx
	mov	ecx, DWORD PTR _fromFlight$8[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	BYTE PTR _fromVoice$[ebp], al

; 1035 : 			fromCallsign = fromFlight->callsign_id;;

	mov	eax, DWORD PTR _fromFlight$8[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	WORD PTR _fromCallsign$[ebp], cx

; 1036 : 			fromCallnum = ConvertToCallNumber( fromFlight->callsign_num, ((AircraftClass*)from)->vehicleInUnit );		

	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _fromFlight$8[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	WORD PTR _fromCallnum$[ebp], ax
	jmp	$LN7@SendRogerT
$LN6@SendRogerT:

; 1037 : 		}
; 1038 : 		else if(from->IsFlight())

	mov	eax, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN4@SendRogerT

; 1039 : 		{
; 1040 : 			fromID = from->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], edx
	mov	DWORD PTR _fromID$[ebp+4], eax

; 1041 : 			fromVoice =  ((Flight)from)->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	BYTE PTR _fromVoice$[ebp], al

; 1042 : 			fromCallsign = ((Flight)from)->callsign_id;;

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	WORD PTR _fromCallsign$[ebp], dx

; 1043 : 			fromCallnum = ConvertFlightNumberToCallNumber(((Flight)from)->callsign_num);

	mov	eax, DWORD PTR _from$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	WORD PTR _fromCallnum$[ebp], ax

; 1044 : 		}
; 1045 : 		else 

	jmp	SHORT $LN7@SendRogerT
$LN4@SendRogerT:

; 1046 : 		{
; 1047 : 			fromID = from->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], ecx
	mov	DWORD PTR _fromID$[ebp+4], edx

; 1048 : 			fromVoice =  GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	BYTE PTR _fromVoice$[ebp], al

; 1049 : 			fromCallsign = -1;

	or	eax, -1
	mov	WORD PTR _fromCallsign$[ebp], ax

; 1050 : 			fromCallnum = -1;

	or	ecx, -1
	mov	WORD PTR _fromCallnum$[ebp], cx
$LN7@SendRogerT:

; 1051 : 		}
; 1052 : 
; 1053 : 		// Flight data
; 1054 : 		radioMessage = new FalconRadioChatterMessage( aircraft->Id() , target );		

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@SendRogerT
	push	1
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv224[ebp], eax
	jmp	SHORT $LN12@SendRogerT
$LN11@SendRogerT:
	mov	DWORD PTR tv224[ebp], 0
$LN12@SendRogerT:
	mov	eax, DWORD PTR tv224[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 1055 : 		radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;	

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+60], 3

; 1056 : 		radioMessage->dataBlock.from = fromID;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _fromID$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _fromID$[ebp+4]
	mov	DWORD PTR [eax+52], edx

; 1057 : 		radioMessage->dataBlock.voice_id = fromVoice;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cl, BYTE PTR _fromVoice$[ebp]
	mov	BYTE PTR [eax+61], cl

; 1058 : 		radioMessage->dataBlock.edata[0] = -1;

	mov	edx, 2
	imul	edx, 0
	or	eax, -1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1059 : 		radioMessage->dataBlock.edata[1] = 1;

	mov	edx, 2
	shl	edx, 0
	mov	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1060 : 		radioMessage->dataBlock.message = rcROGER;

	mov	edx, 179				; 000000b3H
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+62], dx

; 1061 : 		if (PlayerOptions.PlayerRadioVoice)

	movzx	ecx, BYTE PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+201
	test	ecx, ecx
	je	SHORT $LN2@SendRogerT

; 1062 : 		    //radioMessage->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 1063 : 		    radioMessage->dataBlock.time_to_play = 2 * CampaignSeconds;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 2000		; 000007d0H

; 1064 : 		else

	jmp	SHORT $LN1@SendRogerT
$LN2@SendRogerT:

; 1065 : 		    radioMessage->dataBlock.time_to_play = 500;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+56], 500			; 000001f4H
$LN1@SendRogerT:

; 1066 : 
; 1067 : 		FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN9@SendRogerT:

; 1068 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendRogerToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@PAVVuTargetEntity@@@Z ENDP ; SendRogerToPlane
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 8
$T3 = -96						; size = 8
$T4 = -88						; size = 8
$T5 = -80						; size = 8
_toID$ = -72						; size = 8
_fromID$ = -64						; size = 8
$T6 = -56						; size = 4
tv241 = -52						; size = 4
$T7 = -48						; size = 4
_flight$ = -44						; size = 4
_fromFlight$8 = -40					; size = 4
_radioMessage$ = -36					; size = 4
_toCallnum$ = -32					; size = 2
_toCallsign$ = -28					; size = 2
_fromCallnum$ = -24					; size = 2
_fromCallsign$ = -20					; size = 2
_fromVoice$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_aircraft$ = 8						; size = 4
_from$ = 12						; size = 4
_call$ = 16						; size = 2
_target$ = 20						; size = 4
?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z PROC ; CreateCallToPlane

; 938  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 939  : 	FalconRadioChatterMessage	*radioMessage;
; 940  : 	Flight						flight;
; 941  : 	VU_ID						fromID, toID;

	lea	ecx, DWORD PTR _fromID$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	lea	ecx, DWORD PTR _toID$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 942  : 	short						fromCallsign, fromCallnum;
; 943  : 	short						toCallsign, toCallnum;
; 944  : 	uchar						fromVoice;
; 945  : 	
; 946  : 	if(!from)

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN8@CreateCall

; 947  : 	{
; 948  : 		fromID = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _fromID$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _fromID$[ebp+4], ecx

; 949  : 		fromVoice =  GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	BYTE PTR _fromVoice$[ebp], al

; 950  : 		fromCallsign = -1;

	or	edx, -1
	mov	WORD PTR _fromCallsign$[ebp], dx

; 951  : 		fromCallnum = -1;

	or	eax, -1
	mov	WORD PTR _fromCallnum$[ebp], ax
	jmp	$LN7@CreateCall
$LN8@CreateCall:

; 952  : 	}
; 953  : 	else if(from->IsAirplane())

	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN6@CreateCall

; 954  : 	{
; 955  : 		Flight fromFlight = ((Flight)((AircraftClass*)from)->GetCampaignObject());

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _fromFlight$8[ebp], eax

; 956  : 		fromID = from->Id();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], edx
	mov	DWORD PTR _fromID$[ebp+4], eax

; 957  : 		fromVoice =  fromFlight->GetPilotVoiceID( ((AircraftClass*)from)->pilotSlot);

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	edx, BYTE PTR [ecx+665]
	push	edx
	mov	ecx, DWORD PTR _fromFlight$8[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	BYTE PTR _fromVoice$[ebp], al

; 958  : 		fromCallsign = fromFlight->callsign_id;;

	mov	eax, DWORD PTR _fromFlight$8[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	WORD PTR _fromCallsign$[ebp], cx

; 959  : 		fromCallnum = ConvertToCallNumber( fromFlight->callsign_num, ((AircraftClass*)from)->vehicleInUnit );		

	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _fromFlight$8[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	WORD PTR _fromCallnum$[ebp], ax
	jmp	$LN7@CreateCall
$LN6@CreateCall:

; 960  : 	}
; 961  : 	else if(from->IsFlight())

	mov	eax, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN4@CreateCall

; 962  : 	{
; 963  : 		fromID = from->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], edx
	mov	DWORD PTR _fromID$[ebp+4], eax

; 964  : 		fromVoice =  ((Flight)from)->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	BYTE PTR _fromVoice$[ebp], al

; 965  : 		fromCallsign = ((Flight)from)->callsign_id;;

	mov	ecx, DWORD PTR _from$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	WORD PTR _fromCallsign$[ebp], dx

; 966  : 		fromCallnum = ConvertFlightNumberToCallNumber(((Flight)from)->callsign_num);

	mov	eax, DWORD PTR _from$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	WORD PTR _fromCallnum$[ebp], ax

; 967  : 	}
; 968  : 	else 

	jmp	SHORT $LN7@CreateCall
$LN4@CreateCall:

; 969  : 	{
; 970  : 		fromID = from->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _from$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fromID$[ebp], ecx
	mov	DWORD PTR _fromID$[ebp+4], edx

; 971  : 		fromVoice =  GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	BYTE PTR _fromVoice$[ebp], al

; 972  : 		fromCallsign = -1;

	or	eax, -1
	mov	WORD PTR _fromCallsign$[ebp], ax

; 973  : 		fromCallnum = -1;

	or	ecx, -1
	mov	WORD PTR _fromCallnum$[ebp], cx
$LN7@CreateCall:

; 974  : 	}
; 975  : 
; 976  : 	if(!aircraft)

	cmp	DWORD PTR _aircraft$[ebp], 0
	jne	SHORT $LN2@CreateCall

; 977  : 	{
; 978  : 		toID = FalconNullId;

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _toID$[ebp], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _toID$[ebp+4], eax

; 979  : 		toCallsign = -1;

	or	ecx, -1
	mov	WORD PTR _toCallsign$[ebp], cx

; 980  : 		toCallnum = -1;

	or	edx, -1
	mov	WORD PTR _toCallnum$[ebp], dx

; 981  : 	}
; 982  : 	else

	jmp	SHORT $LN1@CreateCall
$LN2@CreateCall:

; 983  : 	{
; 984  : 		flight = (Flight)aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 985  : 
; 986  : 		toID = aircraft->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _toID$[ebp], ecx
	mov	DWORD PTR _toID$[ebp+4], edx

; 987  : 		toCallsign = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	WORD PTR _toCallsign$[ebp], cx

; 988  : 		toCallnum = ConvertToCallNumber( flight->callsign_num, aircraft->vehicleInUnit );

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	WORD PTR _toCallnum$[ebp], ax
$LN1@CreateCall:

; 989  : 	}
; 990  : 
; 991  : 	// Flight data
; 992  : 	radioMessage = new FalconRadioChatterMessage( toID , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toID$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _toID$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv241[ebp], eax
	jmp	SHORT $LN12@CreateCall
$LN11@CreateCall:
	mov	DWORD PTR tv241[ebp], 0
$LN12@CreateCall:
	mov	eax, DWORD PTR tv241[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 993  : 	radioMessage->dataBlock.edata[0] = toCallsign;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _toCallsign$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 994  : 	radioMessage->dataBlock.edata[1] = toCallnum;

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _toCallnum$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 995  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;	

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+60], 3

; 996  : 	radioMessage->dataBlock.from = fromID;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR _fromID$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _fromID$[ebp+4]
	mov	DWORD PTR [eax+52], edx

; 997  : 	radioMessage->dataBlock.voice_id = fromVoice;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cl, BYTE PTR _fromVoice$[ebp]
	mov	BYTE PTR [eax+61], cl

; 998  : 	radioMessage->dataBlock.edata[2] = fromCallsign;

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _fromCallsign$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 999  : 	radioMessage->dataBlock.edata[3] = fromCallnum;

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _fromCallnum$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 1000 : 	radioMessage->dataBlock.message = call;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	ax, WORD PTR _call$[ebp]
	mov	WORD PTR [edx+62], ax

; 1001 : 	radioMessage->dataBlock.time_to_play= 0;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 1002 : 	//radioMessage->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 1003 : 
; 1004 : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 1005 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallToPlane
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_aircraft$ = 8						; size = 4
_from$ = 12						; size = 4
_call$ = 16						; size = 2
_target$ = 20						; size = 4
?SendCallToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z PROC ; SendCallToPlane

; 1009 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1010 : 	FalconRadioChatterMessage	*radioMessage = CreateCallToPlane(aircraft, from, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _aircraft$[ebp]
	push	eax
	call	?CreateCallToPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ; CreateCallToPlane
	add	esp, 16					; 00000010H
	mov	DWORD PTR _radioMessage$[ebp], eax

; 1011 : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1012 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallToPlane@@YAXPAVAircraftClass@@PAVFalconEntity@@FPAVVuTargetEntity@@@Z ENDP ; SendCallToPlane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 8
$T3 = -48						; size = 8
_flightIdx$ = -40					; size = 4
$T4 = -36						; size = 4
tv93 = -32						; size = 4
$T5 = -28						; size = 4
_awacs$ = -24						; size = 4
_flight$ = -20						; size = 4
_radioMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_plane$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; CreateCallFromAwacsPlane

; 827  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 828  : 	FalconRadioChatterMessage	*radioMessage;
; 829  : 	Flight						awacs, flight;
; 830  : 
; 831  : 	flight = (Flight)plane->GetCampaignObject();

	mov	ecx, DWORD PTR _plane$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 832  : 	ShiAssert (flight);
; 833  : 
; 834  : 	// AWACS/FAC callsign
; 835  : 	awacs = flight->GetFlightController();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	DWORD PTR _awacs$[ebp], eax

; 836  : 
; 837  : 	// Flight data
; 838  : 	radioMessage = new FalconRadioChatterMessage( flight->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN5@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN6@CreateCall
$LN5@CreateCall:
	mov	DWORD PTR tv93[ebp], 0
$LN6@CreateCall:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$[ebp], edx

; 839  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 840  : 
; 841  : 	int flightIdx		= flight->GetComponentIndex(plane);

	mov	ecx, DWORD PTR _plane$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$[ebp], eax

; 842  : 	radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 843  : 	radioMessage->dataBlock.edata[1] = (flight->callsign_num - 1) * 4 + flightIdx + 1;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	mov	edx, DWORD PTR _flightIdx$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-3]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 844  : 
; 845  : 	if (awacs)

	cmp	DWORD PTR _awacs$[ebp], 0
	je	SHORT $LN2@CreateCall

; 846  : 		{
; 847  : 		radioMessage->dataBlock.from = awacs->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 848  : 		radioMessage->dataBlock.voice_id = awacs->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 849  : 		radioMessage->dataBlock.edata[2] = awacs->callsign_id;

	mov	edx, DWORD PTR _awacs$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 850  : 		radioMessage->dataBlock.edata[3] = ConvertFlightNumberToCallNumber(awacs->callsign_num);

	mov	eax, DWORD PTR _awacs$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	edx, 2
	imul	edx, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 851  : 		}
; 852  : 	else

	jmp	SHORT $LN1@CreateCall
$LN2@CreateCall:

; 853  : 		{
; 854  : 		radioMessage->dataBlock.from = FalconNullId;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+52], ecx

; 855  : 		radioMessage->dataBlock.voice_id = GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 856  : 		radioMessage->dataBlock.edata[2] = gDefaultAWACSCallSign;

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR ?gDefaultAWACSCallSign@@3FA ; gDefaultAWACSCallSign
	mov	WORD PTR [ecx+eax+64], dx

; 857  : 		radioMessage->dataBlock.edata[3] = ConvertFlightNumberToCallNumber(gDefaultAWACSFlightNum);

	movsx	eax, WORD PTR ?gDefaultAWACSFlightNum@@3FA ; gDefaultAWACSFlightNum
	push	eax
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN1@CreateCall:

; 858  : 		}
; 859  : 
; 860  : 	radioMessage->dataBlock.message = call;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _call$[ebp]
	mov	WORD PTR [eax+62], cx

; 861  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 0

; 862  : 	//radioMessage->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 863  : 
; 864  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 865  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallFromAwacsPlane@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallFromAwacsPlane
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 8
$T3 = -40						; size = 8
$T4 = -32						; size = 4
tv83 = -28						; size = 4
$T5 = -24						; size = 4
_awacs$ = -20						; size = 4
_radioMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z PROC ; CreateCallFromAwacs

; 788  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 789  : 	FalconRadioChatterMessage	*radioMessage;
; 790  : 	Flight						awacs;
; 791  : 
; 792  : 	ShiAssert (flight);
; 793  : 
; 794  : 	// AWACS/FAC callsign
; 795  : 	awacs = flight->GetFlightController();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	DWORD PTR _awacs$[ebp], eax

; 796  : 
; 797  : 	// Flight data
; 798  : 	radioMessage = new FalconRadioChatterMessage( flight->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN5@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN6@CreateCall
$LN5@CreateCall:
	mov	DWORD PTR tv83[ebp], 0
$LN6@CreateCall:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$[ebp], edx

; 799  : 	radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 800  : 	radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber(flight->callsign_num);

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 801  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 802  : 
; 803  : 
; 804  : 	if (awacs)

	cmp	DWORD PTR _awacs$[ebp], 0
	je	SHORT $LN2@CreateCall

; 805  : 		{
; 806  : 		radioMessage->dataBlock.from = awacs->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax

; 807  : 		radioMessage->dataBlock.voice_id = awacs->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 808  : 		radioMessage->dataBlock.edata[2] = awacs->callsign_id;

	mov	eax, DWORD PTR _awacs$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 809  : 		radioMessage->dataBlock.edata[3] = ConvertFlightNumberToCallNumber(awacs->callsign_num);

	mov	ecx, DWORD PTR _awacs$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 810  : 		}
; 811  : 	else

	jmp	SHORT $LN1@CreateCall
$LN2@CreateCall:

; 812  : 		{
; 813  : 		radioMessage->dataBlock.from = FalconNullId;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+52], edx

; 814  : 		radioMessage->dataBlock.voice_id = GetDefaultAwacsVoice(); // JPO VOICEFIX

	call	?GetDefaultAwacsVoice@@YAEXZ		; GetDefaultAwacsVoice
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 815  : 		radioMessage->dataBlock.edata[2] = gDefaultAWACSCallSign;

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR ?gDefaultAWACSCallSign@@3FA ; gDefaultAWACSCallSign
	mov	WORD PTR [eax+edx+64], cx

; 816  : 		radioMessage->dataBlock.edata[3] = ConvertFlightNumberToCallNumber(gDefaultAWACSFlightNum);

	movsx	edx, WORD PTR ?gDefaultAWACSFlightNum@@3FA ; gDefaultAWACSFlightNum
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN1@CreateCall:

; 817  : 		}
; 818  : 
; 819  : 	radioMessage->dataBlock.message = call;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _call$[ebp]
	mov	WORD PTR [eax+62], cx

; 820  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 0

; 821  : 	//radioMessage->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 822  : 
; 823  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 824  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallFromAwacs
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_flight$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?SendCallFromAwacs@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z PROC ; SendCallFromAwacs

; 869  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 870  : 	FalconRadioChatterMessage	*radioMessage = CreateCallFromAwacs(flight, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallFromAwacs@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromAwacs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 871  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 872  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallFromAwacs@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z ENDP ; SendCallFromAwacs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -60						; size = 8
$T3 = -52						; size = 8
$T4 = -44						; size = 4
$T5 = -40						; size = 4
tv140 = -36						; size = 4
$T6 = -32						; size = 4
tv84 = -28						; size = 4
$T7 = -24						; size = 4
_awacs$ = -20						; size = 4
_radioMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_flight$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z PROC ; CreateCallToAWACS

; 747  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 748  : 	FalconRadioChatterMessage	*radioMessage;
; 749  : 	Flight						awacs;
; 750  : 
; 751  : 	ShiAssert (flight);
; 752  : 
; 753  : 	// AWACS/FAC callsign
; 754  : 	awacs = flight->GetFlightController();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	DWORD PTR _awacs$[ebp], eax

; 755  : 	if (awacs)

	cmp	DWORD PTR _awacs$[ebp], 0
	je	$LN2@CreateCall

; 756  : 		{
; 757  : 		radioMessage = new FalconRadioChatterMessage( awacs->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN5@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN6@CreateCall
$LN5@CreateCall:
	mov	DWORD PTR tv84[ebp], 0
$LN6@CreateCall:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _radioMessage$[ebp], edx

; 758  : 		radioMessage->dataBlock.edata[0] = awacs->callsign_id;

	mov	eax, DWORD PTR _awacs$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 759  : 		radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber(awacs->callsign_num);

	mov	ecx, DWORD PTR _awacs$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 760  : 		}
; 761  : 	else

	jmp	$LN1@CreateCall
$LN2@CreateCall:

; 762  : 		{
; 763  : 		radioMessage = new FalconRadioChatterMessage( FalconNullId , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN7@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN8@CreateCall
$LN7@CreateCall:
	mov	DWORD PTR tv140[ebp], 0
$LN8@CreateCall:
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 764  : 		radioMessage->dataBlock.edata[0] = gDefaultAWACSCallSign;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR ?gDefaultAWACSCallSign@@3FA ; gDefaultAWACSCallSign
	mov	WORD PTR [eax+edx+64], cx

; 765  : 		radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber(gDefaultAWACSFlightNum);

	movsx	edx, WORD PTR ?gDefaultAWACSFlightNum@@3FA ; gDefaultAWACSFlightNum
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN1@CreateCall:

; 766  : 		}
; 767  : 
; 768  : 	// Flight data
; 769  : 	radioMessage->dataBlock.voice_id = flight->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 770  : 	radioMessage->dataBlock.from = flight->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 771  : 	radioMessage->dataBlock.edata[2] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 772  : 	radioMessage->dataBlock.edata[3] = ConvertFlightNumberToCallNumber(flight->callsign_num);

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 773  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 774  : 	radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx

; 775  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+56], 0

; 776  : 
; 777  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 778  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallToAWACS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_flight$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?SendCallToAWACS@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z PROC ; SendCallToAWACS

; 781  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 782  : 	FalconRadioChatterMessage	*radioMessage = CreateCallToAWACS(flight, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flight$[ebp]
	push	edx
	call	?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVFlightClass@@FPAVVuTargetEntity@@@Z ; CreateCallToAWACS
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 783  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 784  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallToAWACS@@YAXPAVFlightClass@@FPAVVuTargetEntity@@@Z ENDP ; SendCallToAWACS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 8
$T3 = -56						; size = 8
$T4 = -48						; size = 4
$T5 = -44						; size = 4
tv150 = -40						; size = 4
$T6 = -36						; size = 4
tv94 = -32						; size = 4
$T7 = -28						; size = 4
_flight$ = -24						; size = 4
_awacs$ = -20						; size = 4
_radioMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aircraft$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; CreateCallToAWACS

; 705  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 706  : 	FalconRadioChatterMessage	*radioMessage;
; 707  : 	Flight						awacs, flight;
; 708  : 
; 709  : 	flight = (Flight)aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 710  : 	ShiAssert (flight);
; 711  : 
; 712  : 	// AWACS/FAC callsign
; 713  : 	awacs = flight->GetFlightController();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	DWORD PTR _awacs$[ebp], eax

; 714  : 	if (awacs)

	cmp	DWORD PTR _awacs$[ebp], 0
	je	$LN2@CreateCall

; 715  : 		{
; 716  : 		radioMessage = new FalconRadioChatterMessage( awacs->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN5@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN6@CreateCall
$LN5@CreateCall:
	mov	DWORD PTR tv94[ebp], 0
$LN6@CreateCall:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _radioMessage$[ebp], edx

; 717  : 		radioMessage->dataBlock.edata[0] = awacs->callsign_id;

	mov	eax, DWORD PTR _awacs$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 718  : 		radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber(awacs->callsign_num);

	mov	ecx, DWORD PTR _awacs$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 719  : 		}
; 720  : 	else

	jmp	$LN1@CreateCall
$LN2@CreateCall:

; 721  : 		{
; 722  : 		radioMessage = new FalconRadioChatterMessage( FalconNullId , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN7@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN8@CreateCall
$LN7@CreateCall:
	mov	DWORD PTR tv150[ebp], 0
$LN8@CreateCall:
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 723  : 		radioMessage->dataBlock.edata[0] = gDefaultAWACSCallSign;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR ?gDefaultAWACSCallSign@@3FA ; gDefaultAWACSCallSign
	mov	WORD PTR [eax+edx+64], cx

; 724  : 		radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber(gDefaultAWACSFlightNum);

	movsx	edx, WORD PTR ?gDefaultAWACSFlightNum@@3FA ; gDefaultAWACSFlightNum
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN1@CreateCall:

; 725  : 		}
; 726  : 
; 727  : 	// Flight data
; 728  : 	radioMessage->dataBlock.voice_id = flight->GetPilotVoiceID(aircraft->vehicleInUnit);

	mov	eax, DWORD PTR _aircraft$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 729  : 	radioMessage->dataBlock.from = aircraft->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 730  : 	radioMessage->dataBlock.edata[2] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 731  : 	radioMessage->dataBlock.edata[3] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 732  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 733  : 	radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx

; 734  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+56], 0

; 735  : 	//radioMessage->dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 736  : 
; 737  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 738  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallToAWACS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_aircraft$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; SendCallToAWACS

; 741  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 742  : 	FalconRadioChatterMessage	*radioMessage = CreateCallToAWACS(aircraft, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aircraft$[ebp]
	push	edx
	call	?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallToAWACS
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 743  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 744  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; SendCallToAWACS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 4
tv84 = -32						; size = 4
$T5 = -28						; size = 4
_flight$ = -24						; size = 4
tv87 = -20						; size = 4
_radioMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aircraft$ = 8						; size = 4
_airbaseID$ = 12					; size = 8
_call$ = 20						; size = 2
_target$ = 24						; size = 4
?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z PROC ; CreateCallToATC

; 649  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 650  : 	FalconRadioChatterMessage	*radioMessage;
; 651  : 
; 652  : 	ShiAssert (aircraft);
; 653  : 
; 654  : 	Flight		flight	= (Flight)aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 655  : 	
; 656  : 	ShiAssert (flight);
; 657  : 
; 658  : 	radioMessage = new FalconRadioChatterMessage( airbaseID , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN7@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _airbaseID$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _airbaseID$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@CreateCall
$LN7@CreateCall:
	mov	DWORD PTR tv84[ebp], 0
$LN8@CreateCall:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 659  : 
; 660  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 0

; 661  : 
; 662  : 	switch(call)

	movsx	eax, WORD PTR _call$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	cmp	DWORD PTR tv87[ebp], 205		; 000000cdH
	jg	SHORT $LN9@CreateCall
	cmp	DWORD PTR tv87[ebp], 205		; 000000cdH
	je	SHORT $LN2@CreateCall
	mov	ecx, DWORD PTR tv87[ebp]
	sub	ecx, 15					; 0000000fH
	mov	DWORD PTR tv87[ebp], ecx
	cmp	DWORD PTR tv87[ebp], 113		; 00000071H
	ja	$LN3@CreateCall
	mov	edx, DWORD PTR tv87[ebp]
	movzx	eax, BYTE PTR $LN11@CreateCall[edx]
	jmp	DWORD PTR $LN13@CreateCall[eax*4]
$LN9@CreateCall:
	cmp	DWORD PTR tv87[ebp], 317		; 0000013dH
	je	SHORT $LN2@CreateCall
	cmp	DWORD PTR tv87[ebp], 322		; 00000142H
	je	$LN1@CreateCall
	cmp	DWORD PTR tv87[ebp], 348		; 0000015cH
	je	SHORT $LN2@CreateCall
	jmp	$LN3@CreateCall
$LN2@CreateCall:

; 663  : 	{
; 664  : 	case rcAPPROACH:
; 665  : 	case rcLANDCLEARANCE:
; 666  : 	case rcTAKEOFFCLEARANCE:
; 667  : 	case rcLANDCLEAREMERGENCY:
; 668  : 	case rcONRUNWAY:
; 669  : 	case rcABORTAPPROACH:	// M.N.	
; 670  : 	case rcREQUESTTAKEOFFCLEARANCE:
; 671  : 
; 672  : 		radioMessage->dataBlock.edata[0] = -1;

	mov	ecx, 2
	imul	ecx, 0
	or	edx, -1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 673  : 		radioMessage->dataBlock.edata[1] = -1;

	mov	ecx, 2
	shl	ecx, 0
	or	edx, -1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 674  : 		radioMessage->dataBlock.voice_id = flight->GetPilotVoiceID(aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 675  : 		radioMessage->dataBlock.from = aircraft->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 676  : 		radioMessage->dataBlock.edata[2] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 677  : 		radioMessage->dataBlock.edata[3] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 678  : 		radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 679  : 		radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx

; 680  : 		break;

	jmp	$LN3@CreateCall
$LN1@CreateCall:

; 681  : 
; 682  : 	case rcREADYFORDERARTURE:
; 683  : 
; 684  : 		radioMessage->dataBlock.edata[0] = -1;

	mov	eax, 2
	imul	eax, 0
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 685  : 		radioMessage->dataBlock.voice_id = flight->GetPilotVoiceID(aircraft->vehicleInUnit);

	mov	eax, DWORD PTR _aircraft$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 686  : 		radioMessage->dataBlock.from = aircraft->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 687  : 		radioMessage->dataBlock.edata[1] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 688  : 		radioMessage->dataBlock.edata[2] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 689  : 		radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 690  : 		radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx
$LN3@CreateCall:

; 691  : 		break;
; 692  : 	}
; 693  : 
; 694  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 695  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@CreateCall:
	DD	$LN2@CreateCall
	DD	$LN3@CreateCall
$LN11@CreateCall:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallToATC
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_aircraft$ = 8						; size = 4
_airbaseID$ = 12					; size = 8
_call$ = 20						; size = 2
_target$ = 24						; size = 4
?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z PROC ; SendCallToATC

; 698  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 699  : 	FalconRadioChatterMessage	*radioMessage = CreateCallToATC(aircraft, airbaseID, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _airbaseID$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _airbaseID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	push	ecx
	call	?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; CreateCallToATC
	add	esp, 20					; 00000014H
	mov	DWORD PTR _radioMessage$[ebp], eax

; 700  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 701  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ENDP ; SendCallToATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_aircraft$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?SendCallToATC@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; SendCallToATC

; 643  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 644  : 	FalconRadioChatterMessage	*radioMessage = CreateCallToATC(aircraft, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aircraft$[ebp]
	push	edx
	call	?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallToATC
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 645  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 646  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallToATC@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; SendCallToATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 8
$T3 = -84						; size = 8
$T4 = -76						; size = 8
$T5 = -68						; size = 8
$T6 = -60						; size = 8
$T7 = -52						; size = 4
$T8 = -48						; size = 4
tv146 = -44						; size = 4
$T9 = -40						; size = 4
tv136 = -36						; size = 4
$T10 = -32						; size = 4
_airbase$ = -28						; size = 4
_flight$ = -24						; size = 4
tv149 = -20						; size = 4
_radioMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aircraft$ = 8						; size = 4
_call$ = 12						; size = 2
_target$ = 16						; size = 4
?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; CreateCallToATC

; 573  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 574  : 	FalconRadioChatterMessage	*radioMessage;
; 575  : 
; 576  : 	ShiAssert (aircraft);
; 577  : 
; 578  : 	Objective	airbase = (ObjectiveClass*)vuDatabase->Find(aircraft->DBrain()->Airbase());

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?Airbase@DigitalBrain@@QAE?AVVU_ID@@XZ	; DigitalBrain::Airbase
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _airbase$[ebp], eax

; 579  : 	Flight		flight	= (Flight)aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 580  : 	
; 581  : 	ShiAssert (flight);
; 582  : 
; 583  : 	if (airbase)

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN7@CreateCall

; 584  : 		{
; 585  : 		radioMessage = new FalconRadioChatterMessage( airbase->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN10@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN11@CreateCall
$LN10@CreateCall:
	mov	DWORD PTR tv136[ebp], 0
$LN11@CreateCall:
	mov	ecx, DWORD PTR tv136[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _radioMessage$[ebp], edx

; 586  : 		}
; 587  : 	else

	jmp	SHORT $LN6@CreateCall
$LN7@CreateCall:

; 588  : 		{
; 589  : 		radioMessage = new FalconRadioChatterMessage( FalconNullId , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN12@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv146[ebp], eax
	jmp	SHORT $LN13@CreateCall
$LN12@CreateCall:
	mov	DWORD PTR tv146[ebp], 0
$LN13@CreateCall:
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx
$LN6@CreateCall:

; 590  : 		}
; 591  : 
; 592  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [edx+56], 0

; 593  : 
; 594  : 	switch(call)

	movsx	eax, WORD PTR _call$[ebp]
	mov	DWORD PTR tv149[ebp], eax
	cmp	DWORD PTR tv149[ebp], 128		; 00000080H
	jg	SHORT $LN14@CreateCall
	cmp	DWORD PTR tv149[ebp], 128		; 00000080H
	je	SHORT $LN3@CreateCall
	mov	ecx, DWORD PTR tv149[ebp]
	sub	ecx, 15					; 0000000fH
	mov	DWORD PTR tv149[ebp], ecx
	cmp	DWORD PTR tv149[ebp], 89		; 00000059H
	ja	$LN4@CreateCall
	mov	edx, DWORD PTR tv149[ebp]
	movzx	eax, BYTE PTR $LN17@CreateCall[edx]
	jmp	DWORD PTR $LN19@CreateCall[eax*4]
$LN14@CreateCall:
	cmp	DWORD PTR tv149[ebp], 205		; 000000cdH
	je	SHORT $LN3@CreateCall
	cmp	DWORD PTR tv149[ebp], 317		; 0000013dH
	je	SHORT $LN3@CreateCall
	cmp	DWORD PTR tv149[ebp], 322		; 00000142H
	je	$LN2@CreateCall
	jmp	$LN4@CreateCall
$LN3@CreateCall:

; 595  : 	{
; 596  : 	case rcAPPROACH:
; 597  : 	case rcLANDCLEARANCE:
; 598  : 	case rcTAKEOFFCLEARANCE:
; 599  : 	case rcLANDCLEAREMERGENCY:
; 600  : 	case rcONRUNWAY:
; 601  : 		
; 602  : 	case rcREQUESTTAKEOFFCLEARANCE:
; 603  : 
; 604  : 		radioMessage->dataBlock.edata[0] = -1;

	mov	ecx, 2
	imul	ecx, 0
	or	edx, -1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 605  : 		radioMessage->dataBlock.edata[1] = -1;

	mov	ecx, 2
	shl	ecx, 0
	or	edx, -1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 606  : 		radioMessage->dataBlock.voice_id = flight->GetPilotVoiceID(aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 607  : 		radioMessage->dataBlock.from = aircraft->Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 608  : 		radioMessage->dataBlock.edata[2] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 609  : 		radioMessage->dataBlock.edata[3] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 610  : 		radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 611  : 		radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx

; 612  : 		break;

	jmp	$LN4@CreateCall
$LN2@CreateCall:

; 613  : 
; 614  : 	case rcREADYFORDERARTURE:
; 615  : 
; 616  : 		radioMessage->dataBlock.edata[0] = -1;

	mov	eax, 2
	imul	eax, 0
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 617  : 		radioMessage->dataBlock.voice_id = flight->GetPilotVoiceID(aircraft->vehicleInUnit);

	mov	eax, DWORD PTR _aircraft$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 618  : 		radioMessage->dataBlock.from = aircraft->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 619  : 		radioMessage->dataBlock.edata[1] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 620  : 		radioMessage->dataBlock.edata[2] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 621  : 		radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 622  : 		radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx

; 623  : 		break;

	jmp	$LN4@CreateCall
$LN1@CreateCall:

; 624  : 
; 625  : 	case rcCOPY:  //RAS-21Jan04-For Traffic Call Acknowledgement
; 626  : 
; 627  : 		radioMessage->dataBlock.edata[0] = -1;

	mov	eax, 2
	imul	eax, 0
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 628  : 		radioMessage->dataBlock.voice_id = flight->GetPilotVoiceID(aircraft->vehicleInUnit);

	mov	eax, DWORD PTR _aircraft$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	push	ecx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 629  : 		radioMessage->dataBlock.from = aircraft->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 630  : 		radioMessage->dataBlock.edata[1] = -1;

	mov	ecx, 2
	shl	ecx, 0
	or	edx, -1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 631  : 		radioMessage->dataBlock.edata[2] = flight->callsign_id;

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 632  : 		radioMessage->dataBlock.edata[3] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	edx, DWORD PTR _aircraft$[ebp]
	movzx	eax, BYTE PTR [edx+664]
	push	eax
	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 633  : 		radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [eax+60], 3

; 634  : 		radioMessage->dataBlock.message = call;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _call$[ebp]
	mov	WORD PTR [ecx+62], dx
$LN4@CreateCall:

; 635  : 		break;
; 636  : 
; 637  : 	}
; 638  : 
; 639  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 640  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@CreateCall:
	DD	$LN3@CreateCall
	DD	$LN1@CreateCall
	DD	$LN4@CreateCall
$LN17@CreateCall:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	2
	DB	0
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$1:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallToATC@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallToATC
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_radioMessage$ = -4					; size = 4
_airbase$ = 8						; size = 4
_aircraft$ = 12						; size = 4
_call$ = 16						; size = 2
_target$ = 20						; size = 4
?SendCallFromATC@@YAXPAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; SendCallFromATC

; 566  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 567  : 	FalconRadioChatterMessage	*radioMessage = CreateCallFromATC(airbase, aircraft, call, target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	movzx	ecx, WORD PTR _call$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aircraft$[ebp]
	push	edx
	mov	eax, DWORD PTR _airbase$[ebp]
	push	eax
	call	?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallFromATC
	add	esp, 16					; 00000010H
	mov	DWORD PTR _radioMessage$[ebp], eax

; 568  : 	FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 569  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SendCallFromATC@@YAXPAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; SendCallFromATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -60						; size = 8
$T3 = -52						; size = 8
$T4 = -44						; size = 4
tv91 = -40						; size = 4
$T5 = -36						; size = 4
_time_in_minutes$ = -32					; size = 4
tv145 = -28						; size = 4
_flight$ = -24						; size = 4
_radioMessage$ = -20					; size = 4
_tod$ = -16						; size = 2
__$EHRec$ = -12						; size = 12
_airbase$ = 8						; size = 4
_aircraft$ = 12						; size = 4
_call$ = 16						; size = 2
_target$ = 20						; size = 4
?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z PROC ; CreateCallFromATC

; 405  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 406  : 	FalconRadioChatterMessage	*radioMessage;
; 407  : 
; 408  : 	short tod;
; 409  : 	int	time_in_minutes;
; 410  : 	ShiAssert (airbase);
; 411  : 	ShiAssert (aircraft);
; 412  : 
; 413  : 	Flight		flight	= (Flight)aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 414  : 	
; 415  : 	ShiAssert (flight);
; 416  : 
; 417  : 	radioMessage = new FalconRadioChatterMessage( aircraft->Id() , target );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN33@CreateCall
	push	1
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN34@CreateCall
$LN33@CreateCall:
	mov	DWORD PTR tv91[ebp], 0
$LN34@CreateCall:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$[ebp], edx

; 418  : 	radioMessage->dataBlock.message = call;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _call$[ebp]
	mov	WORD PTR [eax+62], cx

; 419  : 	radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+60], 3

; 420  : 	radioMessage->dataBlock.from = airbase->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 421  : 	radioMessage->dataBlock.voice_id = (uchar)airbase->brain->Voice();

	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [ecx+240]
	call	?Voice@ATCBrain@@QAEEXZ			; ATCBrain::Voice
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [edx+61], al

; 422  : 	radioMessage->dataBlock.time_to_play= 0;

	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+56], 0

; 423  : 	
; 424  : 	switch(call)

	movsx	ecx, WORD PTR _call$[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	cmp	DWORD PTR tv145[ebp], 85		; 00000055H
	jg	SHORT $LN35@CreateCall
	cmp	DWORD PTR tv145[ebp], 84		; 00000054H
	jge	$LN2@CreateCall
	mov	edx, DWORD PTR tv145[ebp]
	sub	edx, 27					; 0000001bH
	mov	DWORD PTR tv145[ebp], edx
	cmp	DWORD PTR tv145[ebp], 21		; 00000015H
	ja	$LN29@CreateCall
	mov	eax, DWORD PTR tv145[ebp]
	movzx	ecx, BYTE PTR $LN37@CreateCall[eax]
	jmp	DWORD PTR $LN40@CreateCall[ecx*4]
$LN35@CreateCall:
	mov	edx, DWORD PTR tv145[ebp]
	sub	edx, 94					; 0000005eH
	mov	DWORD PTR tv145[ebp], edx
	cmp	DWORD PTR tv145[ebp], 246		; 000000f6H
	ja	$LN29@CreateCall
	mov	eax, DWORD PTR tv145[ebp]
	movzx	ecx, BYTE PTR $LN38@CreateCall[eax]
	jmp	DWORD PTR $LN41@CreateCall[ecx*4]
$LN28@CreateCall:

; 425  : 	{
; 426  : 	case rcCLEAREDLAND:
; 427  : 	case rcATCLANDSEQUENCE:
; 428  : 		time_in_minutes =  TheCampaign.GetMinutesSinceMidnight();

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?GetMinutesSinceMidnight@CampaignClass@@QAEHXZ ; CampaignClass::GetMinutesSinceMidnight
	mov	DWORD PTR _time_in_minutes$[ebp], eax

; 429  : 		if (time_in_minutes < 180)//3am

	cmp	DWORD PTR _time_in_minutes$[ebp], 180	; 000000b4H
	jge	SHORT $LN27@CreateCall

; 430  : 			tod = 1;

	mov	edx, 1
	mov	WORD PTR _tod$[ebp], dx
	jmp	SHORT $LN26@CreateCall
$LN27@CreateCall:

; 431  : 		else if(time_in_minutes < 720 )//noon

	cmp	DWORD PTR _time_in_minutes$[ebp], 720	; 000002d0H
	jge	SHORT $LN25@CreateCall

; 432  : 			tod = 0;

	xor	eax, eax
	mov	WORD PTR _tod$[ebp], ax
	jmp	SHORT $LN26@CreateCall
$LN25@CreateCall:

; 433  : 		else if(time_in_minutes < 1020 ) //5pm

	cmp	DWORD PTR _time_in_minutes$[ebp], 1020	; 000003fcH
	jge	SHORT $LN23@CreateCall

; 434  : 			tod = 2;

	mov	ecx, 2
	mov	WORD PTR _tod$[ebp], cx

; 435  : 		else

	jmp	SHORT $LN26@CreateCall
$LN23@CreateCall:

; 436  : 			tod = 1;

	mov	edx, 1
	mov	WORD PTR _tod$[ebp], dx
$LN26@CreateCall:

; 437  : 		//these calls all are preceeded by a greeting
; 438  : 		radioMessage->dataBlock.edata[0] = tod;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _tod$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 439  : 		radioMessage->dataBlock.edata[1] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 440  : 		radioMessage->dataBlock.edata[2] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	edx, 2
	shl	edx, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 441  : 		if (airbase->brain->Approach() == 32766) // no ATC flag

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?Approach@ATCBrain@@QAEFXZ		; ATCBrain::Approach
	cwde
	cmp	eax, 32766				; 00007ffeH
	jne	SHORT $LN21@CreateCall

; 442  : 			radioMessage->dataBlock.edata[3] = 32766;

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, 32766				; 00007ffeH
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 443  : 		else

	jmp	SHORT $LN20@CreateCall
$LN21@CreateCall:

; 444  : 			radioMessage->dataBlock.edata[3] = airbase->brain->Tower();

	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [ecx+240]
	call	?Tower@ATCBrain@@QAEFXZ			; ATCBrain::Tower
	mov	edx, 2
	imul	edx, 3
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN20@CreateCall:

; 445  : 		break;

	jmp	$LN29@CreateCall
$LN19@CreateCall:

; 446  : 
; 447  : 	case rcCONTINUEINBOUND1:
; 448  : 	case rcCONTINUEINBOUND3:
; 449  : 		time_in_minutes =  TheCampaign.GetMinutesSinceMidnight();

	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?GetMinutesSinceMidnight@CampaignClass@@QAEHXZ ; CampaignClass::GetMinutesSinceMidnight
	mov	DWORD PTR _time_in_minutes$[ebp], eax

; 450  : 		if (time_in_minutes < 180)//3am

	cmp	DWORD PTR _time_in_minutes$[ebp], 180	; 000000b4H
	jge	SHORT $LN18@CreateCall

; 451  : 			tod = 1;

	mov	edx, 1
	mov	WORD PTR _tod$[ebp], dx
	jmp	SHORT $LN17@CreateCall
$LN18@CreateCall:

; 452  : 		else if(time_in_minutes < 720 )//noon

	cmp	DWORD PTR _time_in_minutes$[ebp], 720	; 000002d0H
	jge	SHORT $LN16@CreateCall

; 453  : 			tod = 0;

	xor	eax, eax
	mov	WORD PTR _tod$[ebp], ax
	jmp	SHORT $LN17@CreateCall
$LN16@CreateCall:

; 454  : 		else if(time_in_minutes < 1020 ) //5pm

	cmp	DWORD PTR _time_in_minutes$[ebp], 1020	; 000003fcH
	jge	SHORT $LN14@CreateCall

; 455  : 			tod = 2;

	mov	ecx, 2
	mov	WORD PTR _tod$[ebp], cx

; 456  : 		else

	jmp	SHORT $LN17@CreateCall
$LN14@CreateCall:

; 457  : 			tod = 1;

	mov	edx, 1
	mov	WORD PTR _tod$[ebp], dx
$LN17@CreateCall:

; 458  : 		//these calls all are preceeded by a greeting
; 459  : 		radioMessage->dataBlock.edata[0] = tod;

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	dx, WORD PTR _tod$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 460  : 		radioMessage->dataBlock.edata[1] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 461  : 		radioMessage->dataBlock.edata[2] = (short)ConvertFlightNumberToCallNumber (flight->callsign_num);

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 462  : 		radioMessage->dataBlock.edata[3] = (short)airbase->brain->Approach();

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?Approach@ATCBrain@@QAEFXZ		; ATCBrain::Approach
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 463  : 		break;

	jmp	$LN29@CreateCall
$LN12@CreateCall:

; 464  : 
; 465  : 	case rcOUTSIDEAIRSPEED:			//should be rcOUTSIDEAIRSPACE
; 466  : 									//needs to be converted to use approach instead of a callsign
; 467  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 468  : 		radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber (flight->callsign_num);

	mov	ecx, DWORD PTR _flight$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 469  : 		radioMessage->dataBlock.edata[2] = -1;

	mov	eax, 2
	shl	eax, 1
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 470  : 		radioMessage->dataBlock.edata[3] = -1;

	mov	eax, 2
	imul	eax, 3
	or	ecx, -1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 471  : 		break;

	jmp	$LN29@CreateCall
$LN11@CreateCall:

; 472  : 
; 473  : 	case rcUSEALTFIELD:				//needs to be converted to use approach instead of a callsign		
; 474  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 475  : 		radioMessage->dataBlock.edata[1] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 476  : 		radioMessage->dataBlock.edata[2] = -1;

	mov	edx, 2
	shl	edx, 1
	or	eax, -1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 477  : 		radioMessage->dataBlock.edata[3] = -1;

	mov	edx, 2
	imul	edx, 3
	or	eax, -1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 478  : 		break;

	jmp	$LN29@CreateCall
$LN10@CreateCall:

; 479  : 
; 480  : 	case rcCONTINUEINBOUND2:
; 481  : 		//these calls use callsign, callnumber, approach
; 482  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 483  : 		radioMessage->dataBlock.edata[1] = ConvertFlightNumberToCallNumber (flight->callsign_num);

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 484  : 		radioMessage->dataBlock.edata[2] = (short)airbase->brain->Approach();

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?Approach@ATCBrain@@QAEFXZ		; ATCBrain::Approach
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 485  : 		break;

	jmp	$LN29@CreateCall
$LN9@CreateCall:

; 486  : 
; 487  : 	case rcPOSITIONANDHOLD:
; 488  : 	case rcCLEAREDONRUNWAY:	
; 489  : 		//these calls use callsign, callnumber, tower
; 490  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 491  : 		radioMessage->dataBlock.edata[1] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 492  : 		if (airbase->brain->Approach() == 32766) // no ATC flag

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?Approach@ATCBrain@@QAEFXZ		; ATCBrain::Approach
	cwde
	cmp	eax, 32766				; 00007ffeH
	jne	SHORT $LN8@CreateCall

; 493  : 			radioMessage->dataBlock.edata[2] = 32766;

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 32766				; 00007ffeH
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 494  : 		else

	jmp	SHORT $LN7@CreateCall
$LN8@CreateCall:

; 495  : 			radioMessage->dataBlock.edata[2] = airbase->brain->Tower();

	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [ecx+240]
	call	?Tower@ATCBrain@@QAEFXZ			; ATCBrain::Tower
	mov	edx, 2
	shl	edx, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN7@CreateCall:

; 496  : //		radioMessage->dataBlock.edata[2] = (short)airbase->brain->Tower();
; 497  : 		break;

	jmp	$LN29@CreateCall
$LN6@CreateCall:

; 498  : 
; 499  : 	case rcHOLDPATTERN:
; 500  : 	case rcATCALTITUDE:
; 501  : 	case rcATCDIVERT:
; 502  : 	case rcATCTRAFFICWARNING:
; 503  : 	case rcATCTRAFFICWARNING2:
; 504  : 	case rcATSCOLDVECTOR:
; 505  : 	case rcCLEAREDEMERGLAND:
; 506  : 	case rcATCSCOLDTRAFFIC:	
; 507  : 	case rcATCFOLLOWTRAFIC:
; 508  : 		//these calls use callsign, callnumber, approach
; 509  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 510  : 		radioMessage->dataBlock.edata[1] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	eax, DWORD PTR _aircraft$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	push	ecx
	mov	edx, DWORD PTR _flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 511  : 		radioMessage->dataBlock.edata[2] = (short)airbase->brain->Approach();

	mov	eax, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?Approach@ATCBrain@@QAEFXZ		; ATCBrain::Approach
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 512  : 		break;

	jmp	$LN29@CreateCall
$LN5@CreateCall:

; 513  : 
; 514  : 	case rcCLEAREDDEPARTURE:
; 515  : 	case rcTAXICLEAR:
; 516  : 	case rcEXPEDITEDEPARTURE:
; 517  : 	case rcATCCANCELMISSION:
; 518  : 	case rcTOWERSCOLD1:
; 519  : 	case rcTAXISEQUENCE:
; 520  : 	case rcTOWERSCOLD2:
; 521  : 	case rcTOWERSCOLD3:
; 522  : 		//these calls use callsign, callnumber, tower
; 523  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 524  : 		radioMessage->dataBlock.edata[1] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 525  : // M.N. ID 32766 turns off ATC name
; 526  : 		if (airbase->brain->Approach() == 32766) // no ATC flag

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?Approach@ATCBrain@@QAEFXZ		; ATCBrain::Approach
	cwde
	cmp	eax, 32766				; 00007ffeH
	jne	SHORT $LN4@CreateCall

; 527  : 			radioMessage->dataBlock.edata[2] = 32766;

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 32766				; 00007ffeH
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+ecx+64], dx

; 528  : 		else

	jmp	SHORT $LN3@CreateCall
$LN4@CreateCall:

; 529  : 			radioMessage->dataBlock.edata[2] = (short)airbase->brain->Tower();

	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [ecx+240]
	call	?Tower@ATCBrain@@QAEFXZ			; ATCBrain::Tower
	mov	edx, 2
	shl	edx, 1
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN3@CreateCall:

; 530  : //		radioMessage->dataBlock.edata[2] = (short)airbase->brain->Tower();
; 531  : 		break;

	jmp	$LN29@CreateCall
$LN2@CreateCall:

; 532  : 
; 533  : 	case rcDISRUPTINGTRAFFIC:
; 534  : 	case rcGETOFFRUNWAYA:
; 535  : 	case rcGETOFFRUNWAYB:
; 536  : 	case rcHOLDSHORT:
; 537  : 	case rcHURRYUP:
; 538  : 	case rcCLEARTOTAXI:
; 539  : 	case rcATCVECTORS:
; 540  : 	case rcATCVECTORSRW: // JB 010527 (from MN) // new radio chatter
; 541  : 	case rcATCORBIT1:
; 542  : 	case rcATCORBIT2:
; 543  : 	case rcTURNTOFINAL:
; 544  : 	case rcATCSCOLD1:
; 545  : 	case rcATCGOAROUND:
; 546  : 	case rcATCGOAROUND2:
; 547  : 		//these calls use just callsign, callnum
; 548  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 549  : 		radioMessage->dataBlock.edata[1] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	eax, DWORD PTR _aircraft$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	push	ecx
	mov	edx, DWORD PTR _flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 550  : 		break;

	jmp	SHORT $LN29@CreateCall
$LN1@CreateCall:

; 551  : 	case rcDEPARTHEADING://Cobra
; 552  : 	case rcRESUMEOWNNAV://Cobra
; 553  : 	case rcLANDINGCHECK://Cobra
; 554  : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	eax, DWORD PTR _flight$[ebp]
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 555  : 		radioMessage->dataBlock.edata[1] = ConvertToCallNumber (flight->callsign_num, aircraft->vehicleInUnit);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	movzx	edx, BYTE PTR [ecx+664]
	push	edx
	mov	eax, DWORD PTR _flight$[ebp]
	movzx	ecx, BYTE PTR [eax+426]
	push	ecx
	call	?ConvertToCallNumber@@YAFHH@Z		; ConvertToCallNumber
	add	esp, 8
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 556  : 		radioMessage->dataBlock.edata[2] = airbase->brain->Tower();

	mov	edx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?Tower@ATCBrain@@QAEFXZ			; ATCBrain::Tower
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN29@CreateCall:

; 557  : 
; 558  : 		break;
; 559  : 
; 560  : 	}
; 561  : 
; 562  : 	return radioMessage;

	mov	eax, DWORD PTR _radioMessage$[ebp]

; 563  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN40@CreateCall:
	DD	$LN12@CreateCall
	DD	$LN6@CreateCall
	DD	$LN28@CreateCall
	DD	$LN9@CreateCall
	DD	$LN2@CreateCall
	DD	$LN29@CreateCall
$LN37@CreateCall:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	npad	2
$LN41@CreateCall:
	DD	$LN6@CreateCall
	DD	$LN2@CreateCall
	DD	$LN11@CreateCall
	DD	$LN19@CreateCall
	DD	$LN10@CreateCall
	DD	$LN28@CreateCall
	DD	$LN5@CreateCall
	DD	$LN9@CreateCall
	DD	$LN1@CreateCall
	DD	$LN29@CreateCall
$LN38@CreateCall:
	DB	0
	DB	1
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	3
	DB	4
	DB	3
	DB	0
	DB	1
	DB	1
	DB	1
	DB	9
	DB	1
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	5
	DB	1
	DB	1
	DB	6
	DB	6
	DB	7
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
	DB	9
	DB	9
	DB	8
	DB	8
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCallFromATC@@YAPAVFalconRadioChatterMessage@@PAVObjectiveClass@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ENDP ; CreateCallFromATC
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_flight_num$ = 8					; size = 4
_wing_num$ = 12						; size = 4
?ConvertToCallNumber@@YAFHH@Z PROC			; ConvertToCallNumber

; 391  : {

	push	ebp
	mov	ebp, esp

; 392  : 	if (flight_num < 0 && wing_num >= 0)

	cmp	DWORD PTR _flight_num$[ebp], 0
	jge	SHORT $LN2@ConvertToC
	cmp	DWORD PTR _wing_num$[ebp], 0
	jl	SHORT $LN2@ConvertToC

; 393  : 		return (short)(wing_num + VF_SHORTCALLSIGN_OFFSET);

	mov	eax, DWORD PTR _wing_num$[ebp]
	add	eax, 45					; 0000002dH
	jmp	SHORT $LN3@ConvertToC
$LN2@ConvertToC:

; 394  : 	if (flight_num >= 0 && wing_num < 0)

	cmp	DWORD PTR _flight_num$[ebp], 0
	jl	SHORT $LN1@ConvertToC
	cmp	DWORD PTR _wing_num$[ebp], 0
	jge	SHORT $LN1@ConvertToC

; 395  : 		return (short)(flight_num + VF_FLIGHTNUMBER_OFFSET);

	mov	eax, DWORD PTR _flight_num$[ebp]
	add	eax, 36					; 00000024H
	jmp	SHORT $LN3@ConvertToC
$LN1@ConvertToC:

; 396  : 	return (short)((flight_num-1) * 4 + wing_num + 1);

	mov	eax, DWORD PTR _flight_num$[ebp]
	mov	ecx, DWORD PTR _wing_num$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4-3]
$LN3@ConvertToC:

; 397  : }

	pop	ebp
	ret	0
?ConvertToCallNumber@@YAFHH@Z ENDP			; ConvertToCallNumber
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_wing_num$ = 8						; size = 4
?ConvertWingNumberToCallNumber@@YAFH@Z PROC		; ConvertWingNumberToCallNumber

; 386  : {

	push	ebp
	mov	ebp, esp

; 387  : 	return (short)(wing_num + 1 + VF_SHORTCALLSIGN_OFFSET);

	mov	eax, DWORD PTR _wing_num$[ebp]
	add	eax, 46					; 0000002eH

; 388  : }

	pop	ebp
	ret	0
?ConvertWingNumberToCallNumber@@YAFH@Z ENDP		; ConvertWingNumberToCallNumber
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_flight_num$ = 8					; size = 4
?ConvertFlightNumberToCallNumber@@YAFH@Z PROC		; ConvertFlightNumberToCallNumber

; 381  : {

	push	ebp
	mov	ebp, esp

; 382  : 	return (short)(flight_num + VF_FLIGHTNUMBER_OFFSET);

	mov	eax, DWORD PTR _flight_num$[ebp]
	add	eax, 36					; 00000024H

; 383  : }

	pop	ebp
	ret	0
?ConvertFlightNumberToCallNumber@@YAFH@Z ENDP		; ConvertFlightNumberToCallNumber
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GFalconRadioChatterMessage@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFalconRadioChatterMessage@@UAEPAXI@Z PROC		; FalconRadioChatterMessage::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconRadioChatterMessage@@UAE@XZ	; FalconRadioChatterMessage::~FalconRadioChatterMessage
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFalconRadioChatterMessage@@UAEPAXI@Z ENDP		; FalconRadioChatterMessage::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
$T2 = -184						; size = 8
$T3 = -176						; size = 8
$T4 = -168						; size = 8
$T5 = -160						; size = 8
_fromID$ = -152						; size = 8
_sit$6 = -144						; size = 12
tv971 = -132						; size = 4
_ttype$7 = -128						; size = 4
_domain$8 = -124					; size = 4
tv1122 = -120						; size = 4
_set$9 = -116						; size = 4
_ilsfreq$10 = -112					; size = 4
tv1002 = -108						; size = 4
_tac_channel$11 = -104					; size = 4
_range$12 = -100					; size = 4
tv495 = -96						; size = 4
tv509 = -92						; size = 4
_from_package$ = -88					; size = 4
_toID$ = -84						; size = 8
tv190 = -76						; size = 4
tv525 = -72						; size = 4
_message$ = -68						; size = 4
tv350 = -64						; size = 4
_to_package$ = -60					; size = 4
_session$13 = -56					; size = 4
_player_package$ = -52					; size = 4
_from_entity$ = -48					; size = 4
_player_flight$ = -44					; size = 4
_to_entity$ = -40					; size = 4
_channel$ = -33						; size = 1
_this$ = -32						; size = 4
_to$ = -28						; size = 4
_us$ = -24						; size = 4
_from$ = -20						; size = 4
_playbits$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_autodisp$ = 8						; size = 1
?Process@FalconRadioChatterMessage@@MAEHE@Z PROC	; FalconRadioChatterMessage::Process
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Process@FalconRadioChatterMessage@@MAEHE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 172				; 000000acH
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 	if (autodisp)

	movzx	eax, BYTE PTR _autodisp$[ebp]
	test	eax, eax
	je	SHORT $LN56@Process

; 178  : 		return 0;

	xor	eax, eax
	jmp	$LN57@Process
$LN56@Process:

; 179  : #define RADIO_TEST 0
; 180  : #if RADIO_TEST
; 181  : 	// sfr: test hack for testing client radio calls
; 182  : 	if (this->dataBlock.message != rcOUTSIDEAIRSPEED){
; 183  : 		return 0;
; 184  : 	}
; 185  : #endif
; 186  : 
; 187  : 	FalconEntity	*from = (FalconEntity*) vuDatabase->Find(dataBlock.from);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _from$[ebp], eax

; 188  : 	FalconEntity	*to = (FalconEntity*) vuDatabase->Find(EntityId());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityId@VuMessage@@QBE?AVVU_ID@@XZ	; VuMessage::EntityId
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _to$[ebp], eax

; 189  : 	FalconEntity	*us = (FalconEntity*) FalconLocalSession->GetPlayerEntity();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	mov	DWORD PTR _us$[ebp], eax

; 190  : 	CampBaseClass	*from_entity = NULL;

	mov	DWORD PTR _from_entity$[ebp], 0

; 191  : 	CampBaseClass	*from_package = NULL;

	mov	DWORD PTR _from_package$[ebp], 0

; 192  : 	CampBaseClass	*to_package = NULL;

	mov	DWORD PTR _to_package$[ebp], 0

; 193  : 	CampBaseClass	*to_entity = NULL;

	mov	DWORD PTR _to_entity$[ebp], 0

; 194  : 	FlightClass		*player_flight = (FlightClass*) FalconLocalSession->GetPlayerFlight();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ; FalconSessionEntity::GetPlayerFlight
	mov	DWORD PTR _player_flight$[ebp], eax

; 195  : 	PackageClass	*player_package = NULL;

	mov	DWORD PTR _player_package$[ebp], 0

; 196  : 	int				message = dataBlock.message;

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+62]
	mov	DWORD PTR _message$[ebp], edx

; 197  : 	char			channel = 0, playbits = 0;

	mov	BYTE PTR _channel$[ebp], 0
	mov	BYTE PTR _playbits$[ebp], 0

; 198  : 	VU_ID			fromID = dataBlock.from, toID = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR _fromID$[ebp], ecx
	mov	DWORD PTR _fromID$[ebp+4], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _toID$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _toID$[ebp+4], ecx

; 199  : 
; 200  : 
; 201  : 	if(from && ( from->IsDead() || (from->IsVehicle() && !((SimVehicleClass*)from)->HasPilot())) ){

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN55@Process
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax+212]
	call	edx
	test	eax, eax
	jne	SHORT $LN54@Process
	mov	eax, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
	test	eax, eax
	je	SHORT $LN55@Process
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+472]
	call	eax
	test	eax, eax
	jne	SHORT $LN55@Process
$LN54@Process:

; 202  : 		return 0;

	xor	eax, eax
	jmp	$LN57@Process
$LN55@Process:

; 203  : 	}
; 204  : 
; 205  : // M.N. turn off all players radio chatter if wanted
; 206  : 	if( from && from->IsPlayer() && !PlayerOptions.PlayerRadioVoice){

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN53@Process
	mov	ecx, DWORD PTR _from$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN53@Process
	movzx	ecx, BYTE PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+201
	test	ecx, ecx
	jne	SHORT $LN53@Process

; 207  : 		return 0;

	xor	eax, eax
	jmp	$LN57@Process
$LN53@Process:

; 208  : 	}
; 209  : 
; 210  : 	if( from && from->IsPlayer() )

	cmp	DWORD PTR _from$[ebp], 0
	je	$LN52@Process
	mov	ecx, DWORD PTR _from$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN52@Process

; 211  : 	{
; 212  : 		FalconSessionEntity		*session;
; 213  : 		VuSessionsIterator		sit(FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN59@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN60@Process
$LN59@Process:
	mov	DWORD PTR tv190[ebp], 0
$LN60@Process:
	mov	eax, DWORD PTR tv190[ebp]
	push	eax
	lea	ecx, DWORD PTR _sit$6[ebp]
	call	??0VuSessionsIterator@@QAE@PAVVuGroupEntity@@@Z ; VuSessionsIterator::VuSessionsIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 214  : 		session = (FalconSessionEntity*) sit.GetFirst();

	lea	ecx, DWORD PTR _sit$6[ebp]
	call	?GetFirst@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetFirst
	mov	DWORD PTR _session$13[ebp], eax
$LN51@Process:

; 215  : 		while (session)

	cmp	DWORD PTR _session$13[ebp], 0
	je	SHORT $LN50@Process

; 216  : 		{
; 217  : 			if(	from == session->GetPlayerEntity() )

	mov	ecx, DWORD PTR _session$13[ebp]
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	DWORD PTR _from$[ebp], eax
	jne	SHORT $LN49@Process

; 218  : 			{
; 219  : 				dataBlock.voice_id = session->GetVoiceID();

	mov	ecx, DWORD PTR _session$13[ebp]
	call	?GetVoiceID@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetVoiceID
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+61], al

; 220  : 				break;

	jmp	SHORT $LN50@Process
$LN49@Process:

; 221  : 			}
; 222  : 			session = (FalconSessionEntity*) sit.GetNext();

	lea	ecx, DWORD PTR _sit$6[ebp]
	call	?GetNext@VuSessionsIterator@@QAEPAVVuSessionEntity@@XZ ; VuSessionsIterator::GetNext
	mov	DWORD PTR _session$13[ebp], eax

; 223  : 		}

	jmp	SHORT $LN51@Process
$LN50@Process:

; 224  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sit$6[ebp]
	call	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
$LN52@Process:

; 225  : 
; 226  : 	if(FalconLocalSession->GetFlyState() != FLYSTATE_FLYING && SimDriver.RunningCampaign() && !noUIcomms)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetFlyState@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetFlyState
	movzx	edx, al
	cmp	edx, 3
	je	SHORT $LN48@Process
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RunningCampaign@SimulationDriver@@QBE_NXZ ; SimulationDriver::RunningCampaign
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN48@Process
	cmp	DWORD PTR ?noUIcomms@@3HA, 0		; noUIcomms
	jne	SHORT $LN48@Process

; 227  : 		us = FalconLocalSession->GetPlayerSquadron();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ; FalconSessionEntity::GetPlayerSquadron
	mov	DWORD PTR _us$[ebp], eax
$LN48@Process:

; 228  : #ifdef _DEBUG
; 229  : 	//count how often each message is called
; 230  : 	TimesCalled[message]++;
; 231  : #endif
; 232  : 	// KCK: Ignore all this if we're not in the sim or if we've got fucked up data
; 233  : 
; 234  : 	//MonoPrint("Processing Chatter Message ID: %d  %d\n", message, !us);
; 235  : 
; 236  : 	if ( (FalconLocalSession->GetFlyState() == FLYSTATE_FLYING ) || 
; 237  : 			(SimDriver.RunningCampaign() && !noUIcomms) ||
; 238  : 			(to && to == us))

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetFlyState@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetFlyState
	movzx	ecx, al
	cmp	ecx, 3
	je	SHORT $LN46@Process
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RunningCampaign@SimulationDriver@@QBE_NXZ ; SimulationDriver::RunningCampaign
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN45@Process
	cmp	DWORD PTR ?noUIcomms@@3HA, 0		; noUIcomms
	je	SHORT $LN46@Process
$LN45@Process:
	cmp	DWORD PTR _to$[ebp], 0
	je	$LN4@Process
	mov	eax, DWORD PTR _to$[ebp]
	cmp	eax, DWORD PTR _us$[ebp]
	jne	$LN4@Process
$LN46@Process:

; 239  : 	{
; 240  : 		if(!us)

	cmp	DWORD PTR _us$[ebp], 0
	jne	SHORT $LN44@Process

; 241  : 			return -1;

	or	eax, -1
	jmp	$LN57@Process
$LN44@Process:

; 242  : 
; 243  : 		//if the sender is more than 300nm away we can't hear it
; 244  : 		if (from && us && (DistSqu(from->XPos(),from->YPos(),us->XPos(),us->YPos()) > MAX_RADIO_RANGE*MAX_RADIO_RANGE) )

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN43@Process
	cmp	DWORD PTR _us$[ebp], 0
	je	SHORT $LN43@Process
	mov	ecx, DWORD PTR _us$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _us$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _from$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _from$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv971[ebp]
	movss	xmm0, DWORD PTR tv971[ebp]
	movss	xmm1, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	mulss	xmm1, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	comiss	xmm0, xmm1
	jbe	SHORT $LN43@Process

; 245  : 			return -1;

	or	eax, -1
	jmp	$LN57@Process
$LN43@Process:

; 246  : 
; 247  : 		if (player_flight)

	cmp	DWORD PTR _player_flight$[ebp], 0
	je	SHORT $LN42@Process

; 248  : 			player_package = static_cast<PackageClass*>(player_flight->GetUnitParent());

	mov	ecx, DWORD PTR _player_flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _player_flight$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _player_package$[ebp], eax
$LN42@Process:

; 249  : 
; 250  : 		//until data is correct this only screws things up
; 251  : 		if(voiceFilter && !to && from && us->GetTeam() == from->GetTeam())	// KCK: Added && !to -> basically, if you want it to warp, don't specify a target

	cmp	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, 0 ; voiceFilter
	je	$LN38@Process
	cmp	DWORD PTR _to$[ebp], 0
	jne	$LN38@Process
	cmp	DWORD PTR _from$[ebp], 0
	je	$LN38@Process
	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	$LN38@Process

; 252  : 		{
; 253  : 			if(DistSqu(from->XPos(),from->YPos(),us->XPos(),us->YPos()) > RADIO_PROX_RANGE*RADIO_PROX_RANGE*4.0F) //80nm

	mov	ecx, DWORD PTR _us$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _us$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _from$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _from$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv1002[ebp]
	movss	xmm0, DWORD PTR tv1002[ebp]
	movss	xmm1, DWORD PTR ?RADIO_PROX_RANGE@@3MA
	mulss	xmm1, DWORD PTR ?RADIO_PROX_RANGE@@3MA
	mulss	xmm1, DWORD PTR __real@40800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN40@Process

; 254  : 				return -1;

	or	eax, -1
	jmp	$LN57@Process
$LN40@Process:

; 255  : 
; 256  : 			switch(voiceFilter->GetWarp(message))

	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?GetWarp@VoiceFilter@@QAEHH@Z		; VoiceFilter::GetWarp
	mov	DWORD PTR tv350[ebp], eax
	cmp	DWORD PTR tv350[ebp], 1
	je	SHORT $LN37@Process
	cmp	DWORD PTR tv350[ebp], 2
	je	$LN34@Process
	cmp	DWORD PTR tv350[ebp], 3
	je	$LN32@Process
	jmp	$LN38@Process
$LN37@Process:

; 257  : 			{
; 258  : 			case WARP_PACKAGE:
; 259  : 				if (player_package)

	cmp	DWORD PTR _player_package$[ebp], 0
	je	SHORT $LN36@Process

; 260  : 					to = player_package->GetFirstUnitElement();

	mov	eax, DWORD PTR _player_package$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _player_package$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	mov	DWORD PTR _to$[ebp], eax
$LN36@Process:

; 261  : 				if (to && to->IsFlight())

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN35@Process
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN35@Process

; 262  : 				{
; 263  : 					dataBlock.edata[0] = (static_cast<FlightClass*>(to))->callsign_id;

	mov	ecx, DWORD PTR _to$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 264  : 					dataBlock.edata[1] = ConvertFlightNumberToCallNumber(((Flight)to)->callsign_num);

	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN35@Process:

; 265  : 				}
; 266  : 				break;

	jmp	$LN38@Process
$LN34@Process:

; 267  : 			case WARP_FLIGHT:
; 268  : 				to = (FalconEntity *)player_flight;

	mov	eax, DWORD PTR _player_flight$[ebp]
	mov	DWORD PTR _to$[ebp], eax

; 269  : 				if(player_flight)

	cmp	DWORD PTR _player_flight$[ebp], 0
	je	SHORT $LN33@Process

; 270  : 				{
; 271  : 					dataBlock.edata[0] = player_flight->callsign_id;

	mov	ecx, DWORD PTR _player_flight$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+64], dx

; 272  : 					dataBlock.edata[1] = ConvertFlightNumberToCallNumber(player_flight->callsign_num);

	mov	edx, DWORD PTR _player_flight$[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	call	?ConvertFlightNumberToCallNumber@@YAFH@Z ; ConvertFlightNumberToCallNumber
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+64], ax
$LN33@Process:

; 273  : 				}
; 274  : 				break;

	jmp	SHORT $LN38@Process
$LN32@Process:

; 275  : 			case WARP_PLANE:
; 276  : 				to = (FalconEntity *)us;

	mov	eax, DWORD PTR _us$[ebp]
	mov	DWORD PTR _to$[ebp], eax

; 277  : 				if(player_flight && us->IsSim())

	cmp	DWORD PTR _player_flight$[ebp], 0
	je	SHORT $LN31@Process
	mov	ecx, DWORD PTR _us$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN31@Process

; 278  : 				{
; 279  : 					dataBlock.edata[0] = (short)((SimVehicleClass*)us)->GetCallsignIdx();

	mov	ecx, DWORD PTR _us$[ebp]
	call	?GetCallsignIdx@SimBaseClass@@QAEHXZ	; SimBaseClass::GetCallsignIdx
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 280  : 					dataBlock.edata[1] = (short)player_flight->GetPilotCallNumber( ((SimVehicleClass*)us)->pilotSlot );

	mov	eax, DWORD PTR _us$[ebp]
	movzx	ecx, BYTE PTR [eax+665]
	push	ecx
	mov	ecx, DWORD PTR _player_flight$[ebp]
	call	?GetPilotCallNumber@FlightClass@@QAEHH@Z ; FlightClass::GetPilotCallNumber
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+edx+64], ax
$LN31@Process:
$LN38@Process:

; 281  : 				}
; 282  : 			}
; 283  : 		}
; 284  : 
; 285  : 		if (to && to->IsSim() )

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN30@Process
	mov	ecx, DWORD PTR _to$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN30@Process

; 286  : 			to_entity = (CampBaseClass*)((SimBaseClass*)to)->GetCampaignObject();

	mov	ecx, DWORD PTR _to$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _to_entity$[ebp], eax
	jmp	SHORT $LN28@Process
$LN30@Process:

; 287  : 		else if (to && to->IsCampaign())

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN28@Process
	mov	ecx, DWORD PTR _to$[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN28@Process

; 288  : 			to_entity = (CampBaseClass*)to;

	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR _to_entity$[ebp], edx
$LN28@Process:

; 289  : 
; 290  : 
; 291  : 		if (from && from->IsSim() )

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN27@Process
	mov	ecx, DWORD PTR _from$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN27@Process

; 292  : 			from_entity = (CampBaseClass*)((SimBaseClass*)from)->GetCampaignObject();

	mov	ecx, DWORD PTR _from$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _from_entity$[ebp], eax
	jmp	SHORT $LN25@Process
$LN27@Process:

; 293  : 		else if (from && from->IsCampaign())

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN25@Process
	mov	ecx, DWORD PTR _from$[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN25@Process

; 294  : 			from_entity = (CampBaseClass*)from;

	mov	eax, DWORD PTR _from$[ebp]
	mov	DWORD PTR _from_entity$[ebp], eax
$LN25@Process:

; 295  : 
; 296  : 		if(FalconLocalGame && FalconLocalGame->GetGameType() != game_InstantAction && 
; 297  : 							  FalconLocalGame->GetGameType() != game_Dogfight)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN61@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv495[ebp], eax
	jmp	SHORT $LN62@Process
$LN61@Process:
	mov	DWORD PTR tv495[ebp], 0
$LN62@Process:
	cmp	DWORD PTR tv495[ebp], 0
	je	$LN22@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN63@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv509[ebp], eax
	jmp	SHORT $LN64@Process
$LN63@Process:
	mov	DWORD PTR tv509[ebp], 0
$LN64@Process:
	mov	ecx, DWORD PTR tv509[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 1
	je	$LN22@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN65@Process
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv525[ebp], eax
	jmp	SHORT $LN66@Process
$LN65@Process:
	mov	DWORD PTR tv525[ebp], 0
$LN66@Process:
	mov	ecx, DWORD PTR tv525[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 2
	je	SHORT $LN22@Process

; 298  : 		{
; 299  : 			if (from_entity && from_entity->IsFlight())

	cmp	DWORD PTR _from_entity$[ebp], 0
	je	SHORT $LN23@Process
	mov	ecx, DWORD PTR _from_entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from_entity$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN23@Process

; 300  : 				from_package = (Package)((Flight)from_entity)->GetUnitParent();

	mov	ecx, DWORD PTR _from_entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from_entity$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _from_package$[ebp], eax
$LN23@Process:

; 301  : 
; 302  : 			if (to_entity && to_entity->IsFlight())

	cmp	DWORD PTR _to_entity$[ebp], 0
	je	SHORT $LN22@Process
	mov	ecx, DWORD PTR _to_entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _to_entity$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN22@Process

; 303  : 				to_package = (Package)((Flight)to_entity)->GetUnitParent();

	mov	ecx, DWORD PTR _to_entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _to_entity$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _to_package$[ebp], eax
$LN22@Process:

; 304  : 		}
; 305  : 		
; 306  : 		//we want to hear everything sent to our flight or us
; 307  : 		if( (to_entity && to_entity == player_flight) || (to == us) )

	cmp	DWORD PTR _to_entity$[ebp], 0
	je	SHORT $LN19@Process
	mov	ecx, DWORD PTR _to_entity$[ebp]
	cmp	ecx, DWORD PTR _player_flight$[ebp]
	je	SHORT $LN20@Process
$LN19@Process:
	mov	edx, DWORD PTR _to$[ebp]
	cmp	edx, DWORD PTR _us$[ebp]
	jne	SHORT $LN21@Process
$LN20@Process:

; 308  : 			channel = 1;

	mov	BYTE PTR _channel$[ebp], 1
$LN21@Process:

; 309  : 		
; 310  : 		//we want to hear everything said by us
; 311  : 		if( from == us )

	mov	eax, DWORD PTR _from$[ebp]
	cmp	eax, DWORD PTR _us$[ebp]
	jne	SHORT $LN18@Process

; 312  : 			channel = 1;

	mov	BYTE PTR _channel$[ebp], 1
$LN18@Process:

; 313  : 
; 314  : 		//campaign/taceng
; 315  : 		if ( (to_entity && to_entity == player_flight) || (from_entity && from_entity == player_flight))

	cmp	DWORD PTR _to_entity$[ebp], 0
	je	SHORT $LN15@Process
	mov	ecx, DWORD PTR _to_entity$[ebp]
	cmp	ecx, DWORD PTR _player_flight$[ebp]
	je	SHORT $LN16@Process
$LN15@Process:
	cmp	DWORD PTR _from_entity$[ebp], 0
	je	SHORT $LN17@Process
	mov	edx, DWORD PTR _from_entity$[ebp]
	cmp	edx, DWORD PTR _player_flight$[ebp]
	jne	SHORT $LN17@Process
$LN16@Process:

; 316  : 			playbits |= TOFROM_FLIGHT;

	movsx	eax, BYTE PTR _playbits$[ebp]
	or	eax, 1
	mov	BYTE PTR _playbits$[ebp], al
$LN17@Process:

; 317  : 
; 318  : 		//the seemingly weird check for the team is because everyone in instant action is in the same package but on different teams
; 319  : 		if (to && (to_package == player_package) && us && us->GetTeam() == to->GetTeam())

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN14@Process
	mov	ecx, DWORD PTR _to_package$[ebp]
	cmp	ecx, DWORD PTR _player_package$[ebp]
	jne	SHORT $LN14@Process
	cmp	DWORD PTR _us$[ebp], 0
	je	SHORT $LN14@Process
	mov	edx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN14@Process

; 320  : 			playbits |= TO_PACKAGE;

	movsx	edx, BYTE PTR _playbits$[ebp]
	or	edx, 2
	mov	BYTE PTR _playbits$[ebp], dl
$LN14@Process:

; 321  : 		if (	(to && to_package == player_package && us->GetTeam() == to->GetTeam()) || 
; 322  : 				(from && from_package == player_package && us && us->GetTeam() == from->GetTeam()) )

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN11@Process
	mov	eax, DWORD PTR _to_package$[ebp]
	cmp	eax, DWORD PTR _player_package$[ebp]
	jne	SHORT $LN11@Process
	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN12@Process
$LN11@Process:
	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN13@Process
	mov	edx, DWORD PTR _from_package$[ebp]
	cmp	edx, DWORD PTR _player_package$[ebp]
	jne	SHORT $LN13@Process
	cmp	DWORD PTR _us$[ebp], 0
	je	SHORT $LN13@Process
	mov	eax, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN13@Process
$LN12@Process:

; 323  : 			playbits |= TOFROM_PACKAGE;

	movsx	edx, BYTE PTR _playbits$[ebp]
	or	edx, 4
	mov	BYTE PTR _playbits$[ebp], dl
$LN13@Process:

; 324  : 
; 325  : 		//campaign/taceng
; 326  : 		if (dataBlock.to == MESSAGE_FOR_TEAM && to && us && us->GetTeam() == to->GetTeam())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	cmp	ecx, 1
	jne	SHORT $LN10@Process
	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN10@Process
	cmp	DWORD PTR _us$[ebp], 0
	je	SHORT $LN10@Process
	mov	edx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN10@Process

; 327  : 			playbits |= TO_TEAM;

	movsx	edx, BYTE PTR _playbits$[ebp]
	or	edx, 8
	mov	BYTE PTR _playbits$[ebp], dl
$LN10@Process:

; 328  : 
; 329  : 		
; 330  : 		if (from && us && (DistSqu(from->XPos(),from->YPos(),us->XPos(),us->YPos()) < RADIO_PROX_RANGE*RADIO_PROX_RANGE) 
; 331  : 			 && us && ( (to && us->GetTeam() == to->GetTeam()) || 
; 332  : 			 (from && us->GetTeam() == from->GetTeam()) ) )

	cmp	DWORD PTR _from$[ebp], 0
	je	$LN9@Process
	cmp	DWORD PTR _us$[ebp], 0
	je	$LN9@Process
	mov	ecx, DWORD PTR _us$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _us$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _from$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _from$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv1122[ebp]
	movss	xmm0, DWORD PTR ?RADIO_PROX_RANGE@@3MA
	mulss	xmm0, DWORD PTR ?RADIO_PROX_RANGE@@3MA
	comiss	xmm0, DWORD PTR tv1122[ebp]
	jbe	SHORT $LN9@Process
	cmp	DWORD PTR _us$[ebp], 0
	je	SHORT $LN9@Process
	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN7@Process
	mov	eax, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _to$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN8@Process
$LN7@Process:
	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN9@Process
	mov	edx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	esi, al
	mov	eax, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN9@Process
$LN8@Process:

; 333  : 			playbits |= IN_PROXIMITY;

	movsx	edx, BYTE PTR _playbits$[ebp]
	or	edx, 16					; 00000010H
	mov	BYTE PTR _playbits$[ebp], dl
$LN9@Process:

; 334  : 
; 335  : 		if (dataBlock.to == MESSAGE_FOR_WORLD)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN6@Process

; 336  : 			playbits |= TO_WORLD;

	movsx	edx, BYTE PTR _playbits$[ebp]
	or	edx, 32					; 00000020H
	mov	BYTE PTR _playbits$[ebp], dl
$LN6@Process:

; 337  : 
; 338  : 		int tac_channel;
; 339  : 		TacanList::StationSet set;
; 340  : 		TacanList::Domain domain;
; 341  : 		int range, ttype;
; 342  : 		float ilsfreq;
; 343  : 		if(from_entity && gTacanList->GetChannelFromVUID(from_entity->Id(), &tac_channel, &set, &domain, &range, &ttype, &ilsfreq))

	cmp	DWORD PTR _from_entity$[ebp], 0
	je	SHORT $LN5@Process
	lea	eax, DWORD PTR _ilsfreq$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _ttype$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _range$12[ebp]
	push	edx
	lea	eax, DWORD PTR _domain$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _set$9[ebp]
	push	ecx
	lea	edx, DWORD PTR _tac_channel$11[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _from_entity$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?gTacanList@@3PAVTacanList@@A ; gTacanList
	call	?GetChannelFromVUID@TacanList@@QAEHVVU_ID@@PAHPAW4StationSet@1@PAW4Domain@1@11PAM@Z ; TacanList::GetChannelFromVUID
	test	eax, eax
	je	SHORT $LN5@Process

; 344  : 			playbits |= TOFROM_TOWER;

	movsx	eax, BYTE PTR _playbits$[ebp]
	or	eax, 64					; 00000040H
	mov	BYTE PTR _playbits$[ebp], al
$LN5@Process:

; 345  : 
; 346  : 		if(to_entity && gTacanList->GetChannelFromVUID(to_entity->Id(), &tac_channel, &set, &domain, &range, &ttype, &ilsfreq))

	cmp	DWORD PTR _to_entity$[ebp], 0
	je	SHORT $LN4@Process
	lea	ecx, DWORD PTR _ilsfreq$10[ebp]
	push	ecx
	lea	edx, DWORD PTR _ttype$7[ebp]
	push	edx
	lea	eax, DWORD PTR _range$12[ebp]
	push	eax
	lea	ecx, DWORD PTR _domain$8[ebp]
	push	ecx
	lea	edx, DWORD PTR _set$9[ebp]
	push	edx
	lea	eax, DWORD PTR _tac_channel$11[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _to_entity$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?gTacanList@@3PAVTacanList@@A ; gTacanList
	call	?GetChannelFromVUID@TacanList@@QAEHVVU_ID@@PAHPAW4StationSet@1@PAW4Domain@1@11PAM@Z ; TacanList::GetChannelFromVUID
	test	eax, eax
	je	SHORT $LN4@Process

; 347  : 			playbits |= TOFROM_TOWER;

	movsx	ecx, BYTE PTR _playbits$[ebp]
	or	ecx, 64					; 00000040H
	mov	BYTE PTR _playbits$[ebp], cl
$LN4@Process:

; 348  : 	}
; 349  : 
; 350  : 	if (voiceFilter && playbits)

	cmp	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, 0 ; voiceFilter
	je	$LN3@Process
	movsx	edx, BYTE PTR _playbits$[ebp]
	test	edx, edx
	je	$LN3@Process

; 351  : 		{
; 352  : 		// KCK: This assumes voicefilter checks the proximity of the event to us and returns
; 353  : 		// true if it's near enough to us to care
; 354  : 
; 355  : 		//MI if this is here, we're always in proximity mode
; 356  : 		// JPO - yeah - but if not - it fails to decode BRA/Bullseye data
; 357  : 		if (voiceFilter->GetBullseyeComm(&message, dataBlock.edata))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	lea	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?GetBullseyeComm@VoiceFilter@@QAEHPAHPAF@Z ; VoiceFilter::GetBullseyeComm
	test	eax, eax
	je	SHORT $LN2@Process

; 358  : 			playbits |= IN_PROXIMITY;

	movsx	edx, BYTE PTR _playbits$[ebp]
	or	edx, 16					; 00000010H
	mov	BYTE PTR _playbits$[ebp], dl
$LN2@Process:

; 359  : 		
; 360  : 
; 361  : #ifndef ROBIN
; 362  : 		//MonoPrint("Queuing Chatter Message ID: %d\n", message);
; 363  : #endif
; 364  : 
; 365  : 		if(to)

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN1@Process

; 366  : 			toID = to->Id();

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _to$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _toID$[ebp], ecx
	mov	DWORD PTR _toID$[ebp+4], edx
$LN1@Process:

; 367  : 		// FRB - chatter control
; 368  : 		//dataBlock.time_to_play = g_nChatterInterval * CampaignSeconds;
; 369  : 		// Now play the message (You'll want to pass in the playbits)
; 370  : 			voiceFilter->PlayRadioMessage(dataBlock.voice_id, (short)message, dataBlock.edata, vuxGameTime + dataBlock.time_to_play, playbits, channel, dataBlock.from, EVAL_BY_VALUE, toID);

	mov	eax, DWORD PTR _toID$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _toID$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	movzx	edx, BYTE PTR _channel$[ebp]
	push	edx
	movzx	eax, BYTE PTR _playbits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	movzx	ecx, WORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+61]
	push	eax
	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?PlayRadioMessage@VoiceFilter@@QAEXDFPAFKDDVVU_ID@@H1@Z ; VoiceFilter::PlayRadioMessage
$LN3@Process:

; 371  : 		}
; 372  : 
; 373  : 	return 0;

	xor	eax, eax
$LN57@Process:

; 374  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Process@FalconRadioChatterMessage@@MAEHE@Z$0:
	lea	ecx, DWORD PTR _sit$6[ebp]
	jmp	??1VuSessionsIterator@@UAE@XZ		; VuSessionsIterator::~VuSessionsIterator
__ehhandler$?Process@FalconRadioChatterMessage@@MAEHE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Process@FalconRadioChatterMessage@@MAEHE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Process@FalconRadioChatterMessage@@MAEHE@Z ENDP	; FalconRadioChatterMessage::Process
; Function compile flags: /Odtp
;	COMDAT ??0DATA_BLOCK@FalconRadioChatterMessage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DATA_BLOCK@FalconRadioChatterMessage@@QAE@XZ PROC	; FalconRadioChatterMessage::DATA_BLOCK::DATA_BLOCK, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DATA_BLOCK@FalconRadioChatterMessage@@QAE@XZ ENDP	; FalconRadioChatterMessage::DATA_BLOCK::DATA_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_i$1 = -12						; size = 4
_size$ = -8						; size = 4
_nEvals$ = -1						; size = 1
_buf$ = 8						; size = 4
?Encode@FalconRadioChatterMessage@@UAEHPAPAE@Z PROC	; FalconRadioChatterMessage::Encode
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	int size;
; 138  : 	VU_BYTE nEvals;
; 139  : 	
; 140  : 	// Handle the base class
; 141  : 	size = FalconEvent::Encode (buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Encode@FalconEvent@@UAEHPAPAE@Z	; FalconEvent::Encode
	mov	DWORD PTR _size$[ebp], eax

; 142  : 
; 143  : 	// Send the invariant data
; 144  : 	memcpy (*buf, &dataBlock, sizeof(dataBlock)-sizeof(dataBlock.edata));

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 145  : 	*buf += sizeof(dataBlock)-sizeof(dataBlock.edata);

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], edx

; 146  : 	size += sizeof(dataBlock)-sizeof(dataBlock.edata);

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], ecx

; 147  : 
; 148  : 	// See how many eval elements we'll be able to strip off
; 149  : /*	for (nEvals=MAX_EVALS_PER_RADIO_MESSAGE; (nEvals>0) && (dataBlock.edata[nEvals-1] == 0); nEvals--) {
; 150  : 		if (dataBlock.edata[nEvals-1] == 0) {
; 151  : 			// This one has default data, so we'll be able strip it off
; 152  : 		} else {
; 153  : 			// We encountered non-default data, so we have to stop
; 154  : 			break;
; 155  : 		}
; 156  : 	}*/
; 157  : 
; 158  : 	//sfr: find number of eval elements
; 159  : 	for (nEvals=MAX_EVALS_PER_RADIO_MESSAGE; (nEvals>0) && (dataBlock.edata[nEvals-1] == 0); nEvals--) ;

	mov	BYTE PTR _nEvals$[ebp], 10		; 0000000aH
	jmp	SHORT $LN6@Encode
$LN5@Encode:
	mov	dl, BYTE PTR _nEvals$[ebp]
	sub	dl, 1
	mov	BYTE PTR _nEvals$[ebp], dl
$LN6@Encode:
	movzx	eax, BYTE PTR _nEvals$[ebp]
	test	eax, eax
	jle	SHORT $LN4@Encode
	movzx	ecx, BYTE PTR _nEvals$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+62]
	test	eax, eax
	jne	SHORT $LN4@Encode
	jmp	SHORT $LN5@Encode
$LN4@Encode:

; 160  : 
; 161  : 	// Send the number of evals actually sent
; 162  : 	**buf = nEvals;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	al, BYTE PTR _nEvals$[ebp]
	mov	BYTE PTR [edx], al

; 163  : 	*buf += sizeof(VU_BYTE);

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], edx

; 164  : 	size += sizeof(VU_BYTE) + nEvals*sizeof(dataBlock.edata[0]);

	movzx	ecx, BYTE PTR _nEvals$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+1]
	mov	DWORD PTR _size$[ebp], eax

; 165  : 
; 166  : 	// Send the non-default evals
; 167  : 	for (int i=0; i<nEvals; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Encode
$LN2@Encode:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN3@Encode:
	movzx	edx, BYTE PTR _nEvals$[ebp]
	cmp	DWORD PTR _i$1[ebp], edx
	jge	SHORT $LN1@Encode

; 168  : 		*(short*)(*buf) = dataBlock.edata[i];

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [eax+edx*2+64]
	mov	WORD PTR [ecx], dx

; 169  : 		*buf += sizeof(dataBlock.edata[i]);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx], ecx

; 170  : 	}

	jmp	SHORT $LN2@Encode
$LN1@Encode:

; 171  : 
; 172  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Encode@FalconRadioChatterMessage@@UAEHPAPAE@Z ENDP	; FalconRadioChatterMessage::Encode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_init$ = -16						; size = 4
_this$ = -12						; size = 4
_i$1 = -8						; size = 4
_nEvals$ = -1						; size = 1
_buf$ = 8						; size = 4
_rem$ = 12						; size = 4
?Decode@FalconRadioChatterMessage@@UAEHPAPAEPAJ@Z PROC	; FalconRadioChatterMessage::Decode
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	long int init = *rem;

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _init$[ebp], ecx

; 116  : 	VU_BYTE	nEvals;
; 117  : 	
; 118  : 	// Handle the base class
; 119  : 	FalconEvent::Decode( buf, rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Decode@FalconEvent@@UAEHPAPAEPAJ@Z	; FalconEvent::Decode

; 120  : 
; 121  : 	// Get the invariant data
; 122  : 	memcpychk(&dataBlock, buf, sizeof(dataBlock)-sizeof(dataBlock.edata), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 123  : 
; 124  : 	// Get the number of evals actually sent
; 125  : 	memcpychk(&nEvals, buf, sizeof(VU_BYTE), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	eax, DWORD PTR _nEvals$[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 126  : 
; 127  : 	// Read in the evals -- leave the rest default (0)
; 128  : 	for (int i=0; i<nEvals; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Decode
$LN2@Decode:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN3@Decode:
	movzx	edx, BYTE PTR _nEvals$[ebp]
	cmp	DWORD PTR _i$1[ebp], edx
	jge	SHORT $LN1@Decode

; 129  : 		memcpychk(&dataBlock.edata[i], buf, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+64]
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 130  : 	}

	jmp	SHORT $LN2@Decode
$LN1@Decode:

; 131  : 
; 132  : 	return init - *rem;

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR _init$[ebp]
	sub	eax, DWORD PTR [edx]

; 133  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Decode@FalconRadioChatterMessage@@UAEHPAPAEPAJ@Z ENDP	; FalconRadioChatterMessage::Decode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_size$ = -8						; size = 4
_i$1 = -4						; size = 4
?Size@FalconRadioChatterMessage@@UBEHXZ PROC		; FalconRadioChatterMessage::Size
; _this$ = ecx

; 93   : int FalconRadioChatterMessage::Size() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 	// Start by assuming we have to send all the eval data
; 95   : 	int size = FalconEvent::Size() + sizeof(dataBlock) + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@FalconEvent@@UBEHXZ		; FalconEvent::Size
	add	eax, 37					; 00000025H
	mov	DWORD PTR _size$[ebp], eax

; 96   : 
; 97   : 	// See how many eval elements we'll be able to strip off
; 98   : 	for (int i=MAX_EVALS_PER_RADIO_MESSAGE-1; i>=0; i--) {

	mov	DWORD PTR _i$1[ebp], 9
	jmp	SHORT $LN5@Size
$LN4@Size:
	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Size:
	cmp	DWORD PTR _i$1[ebp], 0
	jl	SHORT $LN3@Size

; 99   : 
; 100  : 		if (dataBlock.edata[i] == 0) {

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+64]
	test	eax, eax
	jne	SHORT $LN2@Size

; 101  : 			// This one has default data, so we'll be able strip it off
; 102  : 			size -= sizeof(dataBlock.edata[i]);

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _size$[ebp], ecx

; 103  : 		} else {

	jmp	SHORT $LN1@Size
$LN2@Size:

; 104  : 			// We encountered non-default data, so we have to stop
; 105  : 			break;

	jmp	SHORT $LN3@Size
$LN1@Size:

; 106  : 		}
; 107  : 	}

	jmp	SHORT $LN4@Size
$LN3@Size:

; 108  : 
; 109  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 110  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Size@FalconRadioChatterMessage@@UBEHXZ ENDP		; FalconRadioChatterMessage::Size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FalconRadioChatterMessage@@UAE@XZ PROC		; FalconRadioChatterMessage::~FalconRadioChatterMessage
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FalconRadioChatterMessage@@6B@

; 91   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
	mov	esp, ebp
	pop	ebp
	ret	0
??1FalconRadioChatterMessage@@UAE@XZ ENDP		; FalconRadioChatterMessage::~FalconRadioChatterMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 1
_senderid$ = 12						; size = 8
_target$ = 20						; size = 8
??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z PROC	; FalconRadioChatterMessage::FalconRadioChatterMessage
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _senderid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _senderid$[ebp]
	push	eax
	push	1
	push	69					; 00000045H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@1@Z ; FalconEvent::FalconEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FalconRadioChatterMessage@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0DATA_BLOCK@FalconRadioChatterMessage@@QAE@XZ

; 83   : 	dataBlock.time_to_play = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0

; 84   : 	memset(dataBlock.edata,0,sizeof(short)*MAX_EVALS_PER_RADIO_MESSAGE);

	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 85   : 	dataBlock.voice_id = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+61], 0

; 86   : 	type;
; 87   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
__ehhandler$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FalconRadioChatterMessage@@QAE@EVVU_ID@@0@Z ENDP	; FalconRadioChatterMessage::FalconRadioChatterMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_entityId$ = 8						; size = 8
_target$ = 16						; size = 4
_loopback$ = 20						; size = 1
??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
; _this$ = ecx

; 72   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _loopback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entityId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _entityId$[ebp]
	push	eax
	push	1
	push	69					; 00000045H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEvent@@IAE@EW4HandlingThread@0@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconEvent::FalconEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7FalconRadioChatterMessage@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0DATA_BLOCK@FalconRadioChatterMessage@@QAE@XZ

; 73   : 	dataBlock.time_to_play = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0

; 74   : 	memset(dataBlock.edata,0,sizeof(short)*MAX_EVALS_PER_RADIO_MESSAGE);

	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 75   : 	dataBlock.voice_id = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+61], 0

; 76   : 	dataBlock.to = MESSAGE_FOR_TEAM;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+60], 1

; 77   : 
; 78   : //	MonoPrint ("RadioChatter\n");
; 79   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEvent@@MAE@XZ			; FalconEvent::~FalconEvent
__ehhandler$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ENDP ; FalconRadioChatterMessage::FalconRadioChatterMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
?ResetDefaultAwacsVoice@@YAXXZ PROC			; ResetDefaultAwacsVoice

; 1081 : {

	push	ebp
	mov	ebp, esp

; 1082 :     gDefaultAWACSVoice = g_voicemap.PickVoice(VoiceMapper::VOICE_AWACS, VoiceMapper::VOICE_SIDE_UNK);

	push	-1
	push	8
	mov	ecx, OFFSET ?g_voicemap@@3VVoiceMapper@@A ; g_voicemap
	call	?PickVoice@VoiceMapper@@QAEHHH@Z	; VoiceMapper::PickVoice
	mov	BYTE PTR _gDefaultAWACSVoice, al

; 1083 : }

	pop	ebp
	ret	0
?ResetDefaultAwacsVoice@@YAXXZ ENDP			; ResetDefaultAwacsVoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\msgsrc\radiochattermsg.cpp
_TEXT	SEGMENT
?GetDefaultAwacsVoice@@YAEXZ PROC			; GetDefaultAwacsVoice

; 1073 : {

	push	ebp
	mov	ebp, esp

; 1074 :     if (gDefaultAWACSVoice == 255) {

	movzx	eax, BYTE PTR _gDefaultAWACSVoice
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN1@GetDefault

; 1075 : 	gDefaultAWACSVoice = g_voicemap.PickVoice(VoiceMapper::VOICE_AWACS, VoiceMapper::VOICE_SIDE_UNK);

	push	-1
	push	8
	mov	ecx, OFFSET ?g_voicemap@@3VVoiceMapper@@A ; g_voicemap
	call	?PickVoice@VoiceMapper@@QAEHHH@Z	; VoiceMapper::PickVoice
	mov	BYTE PTR _gDefaultAWACSVoice, al
$LN1@GetDefault:

; 1076 :     }
; 1077 :     return gDefaultAWACSVoice;

	mov	al, BYTE PTR _gDefaultAWACSVoice

; 1078 : }

	pop	ebp
	ret	0
?GetDefaultAwacsVoice@@YAEXZ ENDP			; GetDefaultAwacsVoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCallsignIdx@SimBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCallsignIdx@SimBaseClass@@QAEHXZ PROC		; SimBaseClass::GetCallsignIdx, COMDAT
; _this$ = ecx

; 154  : 	int GetCallsignIdx () { return callsignIdx; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+232]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCallsignIdx@SimBaseClass@@QAEHXZ ENDP		; SimBaseClass::GetCallsignIdx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampaign@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsCampaign@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsCampaign, COMDAT
; _this$ = ecx

; 101  : 		{return (falconType & FalconCampaignEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN3@IsCampaign
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsCampaign
$LN3@IsCampaign:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsCampaign:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampaign@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetVoiceID@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVoiceID@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetVoiceID, COMDAT
; _this$ = ecx

; 153  : 	uchar GetVoiceID() const                      { return voiceID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+522]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVoiceID@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetVoiceID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetFlyState@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlyState@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetFlyState, COMDAT
; _this$ = ecx

; 147  : 	uchar GetFlyState (void) const                { return flyState; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+513]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlyState@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetFlyState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ PROC ; FalconSessionEntity::GetPlayerSquadron, COMDAT
; _this$ = ecx

; 140  : 	SquadronClass* GetPlayerSquadron(void)	const { return playerSquadronPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 476				; 000001dcH
	call	?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ ; VuBin<SquadronClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerSquadron@FalconSessionEntity@@QBEPAVSquadronClass@@XZ ENDP ; FalconSessionEntity::GetPlayerSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ PROC ; FalconSessionEntity::GetPlayerFlight, COMDAT
; _this$ = ecx

; 139  : 	FlightClass* GetPlayerFlight(void) const      { return playerFlightPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 480				; 000001e0H
	call	?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ; VuBin<FlightClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerFlight@FalconSessionEntity@@QBEPAVFlightClass@@XZ ENDP ; FalconSessionEntity::GetPlayerFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ PROC	; VuBin<FlightClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFlightClass@@@@QBEPAVFlightClass@@XZ ENDP	; VuBin<FlightClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ PROC ; VuBin<SquadronClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSquadronClass@@@@QBEPAVSquadronClass@@XZ ENDP ; VuBin<SquadronClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?EntityId@VuMessage@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?EntityId@VuMessage@@QBE?AVVU_ID@@XZ PROC		; VuMessage::EntityId, COMDAT
; _this$ = ecx

; 157  : 	VU_ID EntityId() const { return entityId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?EntityId@VuMessage@@QBE?AVVU_ID@@XZ ENDP		; VuMessage::EntityId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
