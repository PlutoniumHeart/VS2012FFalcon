; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\UI\SRC\common\waypoint.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?gActiveWPNum@@3FA				; gActiveWPNum
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
_BSS	SEGMENT
?gActiveWPNum@@3FA DW 01H DUP (?)			; gActiveWPNum
_BSS	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_powf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?pow@@YAMMM@Z					; pow
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z	; WayPointClass::SetWPTarget
PUBLIC	?SetWPAction@WayPointClass@@QAEXH@Z		; WayPointClass::SetWPAction
PUBLIC	?SetWPRouteAction@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPRouteAction
PUBLIC	?SetWPFormation@WayPointClass@@QAEXH@Z		; WayPointClass::SetWPFormation
PUBLIC	?SetWPFlag@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPFlag
PUBLIC	?UnSetWPFlag@WayPointClass@@QAEXK@Z		; WayPointClass::UnSetWPFlag
PUBLIC	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ	; WayPointClass::GetWPTargetID
PUBLIC	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
PUBLIC	?GetWPTargetBuilding@WayPointClass@@QAEEXZ	; WayPointClass::GetWPTargetBuilding
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetWPRouteAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPRouteAction
PUBLIC	?GetWPFormation@WayPointClass@@QAEHXZ		; WayPointClass::GetWPFormation
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetPrevWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetPrevWP
PUBLIC	?SetWPStationTime@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPStationTime
PUBLIC	?SetWPSpeed@WayPointClass@@QAEXM@Z		; WayPointClass::SetWPSpeed
PUBLIC	?GetWPSpeed@WayPointClass@@QAEMXZ		; WayPointClass::GetWPSpeed
PUBLIC	?GetWPAltitude@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAltitude
PUBLIC	?GetWPStationTime@WayPointClass@@QAEKXZ		; WayPointClass::GetWPStationTime
PUBLIC	?GetWPArrivalTime@WayPointClass@@QAEKXZ		; WayPointClass::GetWPArrivalTime
PUBLIC	?GetWPDepartureTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPDepartureTime
PUBLIC	?GetWPLocation@WayPointClass@@QBEXPAF0@Z	; WayPointClass::GetWPLocation
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetType@C_Base@@QAEFXZ				; C_Base::GetType
PUBLIC	?GetTextID@C_ListBox@@QAEJXZ			; C_ListBox::GetTextID
PUBLIC	?SetHour@C_Clock@@QAEXJ@Z			; C_Clock::SetHour
PUBLIC	?SetMinute@C_Clock@@QAEXJ@Z			; C_Clock::SetMinute
PUBLIC	?SetSecond@C_Clock@@QAEXJ@Z			; C_Clock::SetSecond
PUBLIC	?GetAppWnd@C_Handler@@QAEPAUHWND__@@XZ		; C_Handler::GetAppWnd
PUBLIC	?GetLast@C_Waypoint@@QAEPAVWAYPOINTLIST@@XZ	; C_Waypoint::GetLast
PUBLIC	?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ		; C_Map::GetCurWP
PUBLIC	?GetCurWPZ@C_Map@@QAEPAVC_Waypoint@@XZ		; C_Map::GetCurWPZ
PUBLIC	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ		; C_Map::GetCurWPID
PUBLIC	?GetMaxY@C_Map@@QAEMXZ				; C_Map::GetMaxY
PUBLIC	?get_ground_speed@@YAMMH@Z			; get_ground_speed
PUBLIC	?get_air_speed@@YAMMH@Z				; get_air_speed
PUBLIC	?refresh_waypoint@@YAXPAVWayPointClass@@@Z	; refresh_waypoint
PUBLIC	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z	; recalculate_waypoints
PUBLIC	?recalculate_waypoint@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint
PUBLIC	?IsValidWP@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ; IsValidWP
PUBLIC	?ValidateWayPoints@@YAXPAVFlightClass@@@Z	; ValidateWayPoints
PUBLIC	?WayPointErrorCode@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ; WayPointErrorCode
PUBLIC	?DeleteWPCB@@YAXJFPAVC_Base@@@Z			; DeleteWPCB
PUBLIC	?RefreshActionClusters@@YAXHPAVC_Window@@@Z	; RefreshActionClusters
PUBLIC	?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ; UpdateWaypointWindowInfo
PUBLIC	?GotoPrevWaypointCB@@YAXJFPAVC_Base@@@Z		; GotoPrevWaypointCB
PUBLIC	?GotoNextWaypointCB@@YAXJFPAVC_Base@@@Z		; GotoNextWaypointCB
PUBLIC	?SetupFlightSpecificControls@@YAXPAVFlightClass@@@Z ; SetupFlightSpecificControls
PUBLIC	?GotoFlightCB@@YAXJFPAVC_Base@@@Z		; GotoFlightCB
PUBLIC	?ChangeTOSCB@@YAXJFPAVC_Base@@@Z		; ChangeTOSCB
PUBLIC	?ChangeAirspeedCB@@YAXJFPAVC_Base@@@Z		; ChangeAirspeedCB
PUBLIC	?ChangeAltCB@@YAXJFPAVC_Base@@@Z		; ChangeAltCB
PUBLIC	?ChangePatrolCB@@YAXJFPAVC_Base@@@Z		; ChangePatrolCB
PUBLIC	?ChangeAirspeedLockCB@@YAXJFPAVC_Base@@@Z	; ChangeAirspeedLockCB
PUBLIC	?ChangeTOSLockCB@@YAXJFPAVC_Base@@@Z		; ChangeTOSLockCB
PUBLIC	?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint_list
PUBLIC	?set_waypoint_climb_mode@@YAXJFPAVC_Base@@@Z	; set_waypoint_climb_mode
PUBLIC	?set_waypoint_enroute_action@@YAXJFPAVC_Base@@@Z ; set_waypoint_enroute_action
PUBLIC	?set_waypoint_action@@YAXPAVWayPointClass@@H@Z	; set_waypoint_action
PUBLIC	?set_waypoint_action@@YAXJFPAVC_Base@@@Z	; set_waypoint_action
PUBLIC	?set_waypoint_formation@@YAXJFPAVC_Base@@@Z	; set_waypoint_formation
PUBLIC	?RebuildCurrentWPList@@YAXXZ			; RebuildCurrentWPList
PUBLIC	?DropWayPoint@@YAXPAVWayPointClass@@@Z		; DropWayPoint
PUBLIC	?WaypointCB@@YAXJFPAVC_Base@@@Z			; WaypointCB
PUBLIC	?update_active_flight@@YAXPAVUnitClass@@@Z	; update_active_flight
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?gActiveFlightID@@3VVU_ID@@A			; gActiveFlightID
PUBLIC	??_C@_06LFBINJ@?$CFs?5?$CF1d?$AA@		; `string'
PUBLIC	??_C@_07KMHNPNOO@?$CF1ld?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_04DIDHKLLF@?$CF1ld?$AA@			; `string'
PUBLIC	??_C@_0BK@EPDEPKNM@TYPE_LDROP?5in?5WaypointCB?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@BENICKHI@TYPE_LMOUSEUP?5in?5WaypointCB?6?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@36e6afcd
PUBLIC	__real@38499408
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e92491b
PUBLIC	__real@3e981d7e
PUBLIC	__real@3f0a35e2
PUBLIC	__real@3f333333
PUBLIC	__real@3f407c85
PUBLIC	__real@3f800000
PUBLIC	__real@3fa66666
PUBLIC	__real@3fed1671
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40200000
PUBLIC	__real@402df3b6
PUBLIC	__real@40600000
PUBLIC	__real@4064dccccccccccd
PUBLIC	__real@40883127
PUBLIC	__real@40e00000
PUBLIC	__real@41200000
PUBLIC	__real@424ccb78
PUBLIC	__real@44255eb8
PUBLIC	__real@4479c000
PUBLIC	__real@44b8e3d7
PUBLIC	__real@44ec347b
PUBLIC	__real@45044385
PUBLIC	__real@470cf900
PUBLIC	__real@48d5a678
PUBLIC	__real@4a5bba00
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	_rand:PROC
EXTRN	_sprintf:PROC
EXTRN	_fabs:PROC
EXTRN	_pow:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?SetWPTimes@WayPointClass@@QAEXK@Z:PROC		; WayPointClass::SetWPTimes
EXTRN	?DistanceTo@WayPointClass@@QAEMPAV1@@Z:PROC	; WayPointClass::DistanceTo
EXTRN	?SetWPAltitude@WayPointClass@@QAEXH@Z:PROC	; WayPointClass::SetWPAltitude
EXTRN	?SetWPLocation@WayPointClass@@QAEXFF@Z:PROC	; WayPointClass::SetWPLocation
EXTRN	?SetLocation@WayPointClass@@QAEXMMM@Z:PROC	; WayPointClass::SetLocation
EXTRN	?SetWPSpeed@@YAMPAVWayPointClass@@@Z:PROC	; SetWPSpeed
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?GetUnitByXY@@YAPAVUnitClass@@FF@Z:PROC		; GetUnitByXY
EXTRN	?MakeWaypointsDirty@UnitClass@@QAEXXZ:PROC	; UnitClass::MakeWaypointsDirty
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?GetMaxSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetMaxSpeed
EXTRN	?GetCruiseSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetCruiseSpeed
EXTRN	?AddWPAfter@UnitClass@@QAEPAVWayPointClass@@PAV2@FFHHKHE@Z:PROC ; UnitClass::AddWPAfter
EXTRN	?DeleteUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z:PROC ; UnitClass::DeleteUnitWP
EXTRN	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ:PROC ; UnitClass::GetCurrentUnitWP
EXTRN	?GetFeatureID@ObjectiveClass@@QAEHH@Z:PROC	; ObjectiveClass::GetFeatureID
EXTRN	?Distance@@YAMFFFF@Z:PROC			; Distance
EXTRN	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z:PROC	; FindUnit
EXTRN	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z:PROC ; GetObjectiveByXY
EXTRN	?SimToGrid@@YAFM@Z:PROC				; SimToGrid
EXTRN	?GetCallsign@@YAXHHPAD@Z:PROC			; GetCallsign
EXTRN	?GetCallsign@@YAXPAVFlightClass@@PAD@Z:PROC	; GetCallsign
EXTRN	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ:PROC ; FlightClass::GetOverrideWP
EXTRN	?CalculateFuelAvailable@FlightClass@@QAEJH@Z:PROC ; FlightClass::CalculateFuelAvailable
EXTRN	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z:PROC ; GetFeatureClassData
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetString@C_String@@QAEPADJ@Z:PROC		; C_String::GetString
EXTRN	?SetUserNumber@C_Base@@QAEXJJ@Z:PROC		; C_Base::SetUserNumber
EXTRN	?SetUserPtr@C_Base@@QAEXJPAX@Z:PROC		; C_Base::SetUserPtr
EXTRN	?SetUserCleanupPtr@C_Base@@QAEXJPAX@Z:PROC	; C_Base::SetUserCleanupPtr
EXTRN	?GetUserNumber@C_Base@@QAEJJ@Z:PROC		; C_Base::GetUserNumber
EXTRN	?GetUserPtr@C_Base@@QAEPAXJ@Z:PROC		; C_Base::GetUserPtr
EXTRN	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z:PROC	; C_ListBox::AddItem
EXTRN	?RemoveAllItems@C_ListBox@@QAEXXZ:PROC		; C_ListBox::RemoveAllItems
EXTRN	?SetValue@C_ListBox@@QAEXJ@Z:PROC		; C_ListBox::SetValue
EXTRN	?SetItemFlagBitOn@C_PopupList@@QAEXJJ@Z:PROC	; C_PopupList::SetItemFlagBitOn
EXTRN	?SetItemFlagBitOff@C_PopupList@@QAEXJJ@Z:PROC	; C_PopupList::SetItemFlagBitOff
EXTRN	?SetInteger@C_EditBox@@QAEXJ@Z:PROC		; C_EditBox::SetInteger
EXTRN	?GetMenu@C_PopupMgr@@QAEPAVC_PopupList@@J@Z:PROC ; C_PopupMgr::GetMenu
EXTRN	?SetTime@C_Clock@@QAEXJ@Z:PROC			; C_Clock::SetTime
EXTRN	?GetTime@C_Clock@@QAEJXZ:PROC			; C_Clock::GetTime
EXTRN	?UnHideCluster@C_Window@@QAEXJ@Z:PROC		; C_Window::UnHideCluster
EXTRN	?HideCluster@C_Window@@QAEXJ@Z:PROC		; C_Window::HideCluster
EXTRN	?RefreshWindow@C_Window@@QAEXXZ:PROC		; C_Window::RefreshWindow
EXTRN	?FindControl@C_Window@@QAEPAVC_Base@@J@Z:PROC	; C_Window::FindControl
EXTRN	?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z:PROC	; C_Handler::ShowWindow
EXTRN	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z:PROC ; C_Handler::WindowToFront
EXTRN	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z:PROC ; C_Handler::FindWindowA
EXTRN	?UpdateInfo@C_Waypoint@@QAEHJMM@Z:PROC		; C_Waypoint::UpdateInfo
EXTRN	?SetState@C_Waypoint@@QAEXJF@Z:PROC		; C_Waypoint::SetState
EXTRN	?SetCurrentWaypointList@C_Map@@QAEHVVU_ID@@@Z:PROC ; C_Map::SetCurrentWaypointList
EXTRN	?DrawMap@C_Map@@QAEXXZ:PROC			; C_Map::DrawMap
EXTRN	?Find@GlobalPositioningSystem@@QAEPAXJ@Z:PROC	; GlobalPositioningSystem::Find
EXTRN	?Update@GlobalPositioningSystem@@QAEXXZ:PROC	; GlobalPositioningSystem::Update
EXTRN	?Update@UI_Refresher@@QAEXPAVCampBaseClass@@J@Z:PROC ; UI_Refresher::Update
EXTRN	?tactical_set_orders@@YAXPAVBattalionClass@@VVU_ID@@FF@Z:PROC ; tactical_set_orders
EXTRN	?fixup_unit@@YAXPAVUnitClass@@@Z:PROC		; fixup_unit
EXTRN	?IsValidAction@@YAHHH@Z:PROC			; IsValidAction
EXTRN	?IsValidEnrouteAction@@YAHHH@Z:PROC		; IsValidEnrouteAction
EXTRN	?ChangeTimeCB@@YAXJFPAVC_Base@@@Z:PROC		; ChangeTimeCB
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?WPActStr@@3PAY0BE@DA:BYTE			; WPActStr
EXTRN	?gStringMgr@@3PAVC_String@@A:DWORD		; gStringMgr
EXTRN	?gPopupMgr@@3PAVC_PopupMgr@@A:DWORD		; gPopupMgr
EXTRN	?gMainHandler@@3PAVC_Handler@@A:DWORD		; gMainHandler
EXTRN	?gGps@@3PAVGlobalPositioningSystem@@A:DWORD	; gGps
EXTRN	?gMapMgr@@3PAVC_Map@@A:DWORD			; gMapMgr
EXTRN	?g_bAnyWaypointTask@@3_NA:BYTE			; g_bAnyWaypointTask
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?gActiveFlightID@@3VVU_ID@@A DQ 01H DUP (?)		; gActiveFlightID
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@4a5bba00
CONST	SEGMENT
__real@4a5bba00 DD 04a5bba00r			; 3.6e+006
CONST	ENDS
;	COMDAT __real@48d5a678
CONST	SEGMENT
__real@48d5a678 DD 048d5a678r			; 437556
CONST	ENDS
;	COMDAT __real@470cf900
CONST	SEGMENT
__real@470cf900 DD 0470cf900r			; 36089
CONST	ENDS
;	COMDAT __real@45044385
CONST	SEGMENT
__real@45044385 DD 045044385r			; 2116.22
CONST	ENDS
;	COMDAT __real@44ec347b
CONST	SEGMENT
__real@44ec347b DD 044ec347br			; 1889.64
CONST	ENDS
;	COMDAT __real@44b8e3d7
CONST	SEGMENT
__real@44b8e3d7 DD 044b8e3d7r			; 1479.12
CONST	ENDS
;	COMDAT __real@4479c000
CONST	SEGMENT
__real@4479c000 DD 04479c000r			; 999
CONST	ENDS
;	COMDAT __real@44255eb8
CONST	SEGMENT
__real@44255eb8 DD 044255eb8r			; 661.48
CONST	ENDS
;	COMDAT __real@424ccb78
CONST	SEGMENT
__real@424ccb78 DD 0424ccb78r			; 51.1987
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40883127
CONST	SEGMENT
__real@40883127 DD 040883127r			; 4.256
CONST	ENDS
;	COMDAT __real@4064dccccccccccd
CONST	SEGMENT
__real@4064dccccccccccd DQ 04064dccccccccccdr	; 166.9
CONST	ENDS
;	COMDAT __real@40600000
CONST	SEGMENT
__real@40600000 DD 040600000r			; 3.5
CONST	ENDS
;	COMDAT __real@402df3b6
CONST	SEGMENT
__real@402df3b6 DD 0402df3b6r			; 2.718
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fed1671
CONST	SEGMENT
__real@3fed1671 DD 03fed1671r			; 1.85225
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f407c85
CONST	SEGMENT
__real@3f407c85 DD 03f407c85r			; 0.7519
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f0a35e2
CONST	SEGMENT
__real@3f0a35e2 DD 03f0a35e2r			; 0.539885
CONST	ENDS
;	COMDAT __real@3e981d7e
CONST	SEGMENT
__real@3e981d7e DD 03e981d7er			; 0.2971
CONST	ENDS
;	COMDAT __real@3e92491b
CONST	SEGMENT
__real@3e92491b DD 03e92491br			; 0.285714
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@38499408
CONST	SEGMENT
__real@38499408 DD 038499408r			; 4.806e-005
CONST	ENDS
;	COMDAT __real@36e6afcd
CONST	SEGMENT
__real@36e6afcd DD 036e6afcdr			; 6.875e-006
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BENICKHI@TYPE_LMOUSEUP?5in?5WaypointCB?6?$AA@
CONST	SEGMENT
??_C@_0BN@BENICKHI@TYPE_LMOUSEUP?5in?5WaypointCB?6?$AA@ DB 'TYPE_LMOUSEUP'
	DB	' in WaypointCB', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EPDEPKNM@TYPE_LDROP?5in?5WaypointCB?6?$AA@
CONST	SEGMENT
??_C@_0BK@EPDEPKNM@TYPE_LDROP?5in?5WaypointCB?6?$AA@ DB 'TYPE_LDROP in Wa'
	DB	'ypointCB', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIDHKLLF@?$CF1ld?$AA@
CONST	SEGMENT
??_C@_04DIDHKLLF@?$CF1ld?$AA@ DB '%1ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMHNPNOO@?$CF1ld?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07KMHNPNOO@?$CF1ld?5?$CFs?$AA@ DB '%1ld %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFBINJ@?$CFs?5?$CF1d?$AA@
CONST	SEGMENT
??_C@_06LFBINJ@?$CFs?5?$CF1d?$AA@ DB '%s %1d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z$2
__ehfuncinfo$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gActiveFlightID$initializer$ DD FLAT:??__EgActiveFlightID@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_un$ = 8						; size = 4
?update_active_flight@@YAXPAVUnitClass@@@Z PROC		; update_active_flight

; 2197 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2198 : 	if (gMapMgr && vuDatabase->Find(gActiveFlightID) == un)

	cmp	DWORD PTR ?gMapMgr@@3PAVC_Map@@A, 0	; gMapMgr
	je	SHORT $LN2@update_act
	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	cmp	eax, DWORD PTR _un$[ebp]
	jne	SHORT $LN2@update_act

; 2199 : 	{
; 2200 : 		gMapMgr->SetCurrentWaypointList(un->Id());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _un$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?SetCurrentWaypointList@C_Map@@QAEHVVU_ID@@@Z ; C_Map::SetCurrentWaypointList
$LN2@update_act:

; 2201 : 	}
; 2202 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?update_active_flight@@YAXPAVUnitClass@@@Z ENDP		; update_active_flight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -152						; size = 8
$T2 = -144						; size = 8
$T3 = -136						; size = 8
$T4 = -128						; size = 8
$T5 = -120						; size = 8
$T6 = -112						; size = 8
$T7 = -104						; size = 8
$T8 = -96						; size = 8
tv795 = -88						; size = 4
_x$9 = -84						; size = 4
_z$10 = -80						; size = 4
_y$11 = -76						; size = 4
tv647 = -72						; size = 4
_wz$ = -68						; size = 4
tv547 = -64						; size = 4
tv352 = -60						; size = 4
_alt$12 = -56						; size = 4
_cur$13 = -52						; size = 4
_cur$14 = -48						; size = 4
tv537 = -44						; size = 4
_pw$15 = -40						; size = 4
_wx$ = -36						; size = 4
_wy$ = -32						; size = 4
_win$ = -28						; size = 4
_gx$ = -24						; size = 2
_gy$ = -20						; size = 2
_cwp$ = -16						; size = 4
_wpicon$ = -12						; size = 4
_wp$ = -8						; size = 4
_un$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_ctrl$ = 16						; size = 4
?WaypointCB@@YAXJFPAVC_Base@@@Z PROC			; WaypointCB

; 1962 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H

; 1963 : 	C_Window		*win=NULL;

	mov	DWORD PTR _win$[ebp], 0

; 1964 : 	Unit			un=NULL;

	mov	DWORD PTR _un$[ebp], 0

; 1965 : 	float			wx=0.0F,wy=0.0F,wz=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _wx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _wy$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _wz$[ebp], xmm0

; 1966 : 	GridIndex		gx=0,gy=0;

	xor	eax, eax
	mov	WORD PTR _gx$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _gy$[ebp], cx

; 1967 : 	C_Waypoint		*cwp=NULL;

	mov	DWORD PTR _cwp$[ebp], 0

; 1968 : 	WAYPOINTLIST	*wpicon=NULL;

	mov	DWORD PTR _wpicon$[ebp], 0

; 1969 : 	WayPointClass	*wp=NULL;//,*lwp=NULL;

	mov	DWORD PTR _wp$[ebp], 0

; 1970 : 
; 1971 : 	cwp = (C_Waypoint *) ctrl;

	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR _cwp$[ebp], edx

; 1972 : 	if(cwp)

	cmp	DWORD PTR _cwp$[ebp], 0
	je	SHORT $LN50@WaypointCB

; 1973 : 		wpicon=cwp->GetLast();

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetLast@C_Waypoint@@QAEPAVWAYPOINTLIST@@XZ ; C_Waypoint::GetLast
	mov	DWORD PTR _wpicon$[ebp], eax
$LN50@WaypointCB:

; 1974 : 
; 1975 : 	if(!cwp || !wpicon)

	cmp	DWORD PTR _cwp$[ebp], 0
	je	SHORT $LN48@WaypointCB
	cmp	DWORD PTR _wpicon$[ebp], 0
	jne	SHORT $LN49@WaypointCB
$LN48@WaypointCB:

; 1976 : 		return;

	jmp	$LN51@WaypointCB
$LN49@WaypointCB:

; 1977 : 
; 1978 : 	// The reason I changed this routine... (And it didn't screw up the waypoints)... is because you guys took out
; 1979 : 	// the altitude part of this routine (probably Robin)...
; 1980 : 	// This routine is used for both XY draging AND Z dragging, and you guys just assumed it was used for
; 1981 : 	// XY only, which screwed everything else up.
; 1982 : 	// Therefore, the Check for DragXY & DragY (where DragY is for altitude)
; 1983 : 	// beyond that, there has been NO logic changes to this routine
; 1984 : 	if (hittype == C_TYPE_LDROP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 73					; 00000049H
	jne	$LN47@WaypointCB

; 1985 : 	{
; 1986 : 		MonoPrint("TYPE_LDROP in WaypointCB\n");

	push	OFFSET ??_C@_0BK@EPDEPKNM@TYPE_LDROP?5in?5WaypointCB?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 1987 : 
; 1988 : 		// Drop and recalculate a waypoint if we're dropping a nub, otherwise
; 1989 : 		// Just relocate and recalculate the waypoint
; 1990 : 		un = (Unit)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$[ebp], eax

; 1991 : 		if (un)

	cmp	DWORD PTR _un$[ebp], 0
	je	$LN46@WaypointCB

; 1992 : 		{
; 1993 : 			gActiveFlightID = un->Id();

	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _un$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, edx
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, eax

; 1994 : 			if (wpicon->Icon->GetUserNumber(C_STATE_1) < 0)

	push	1
	mov	ecx, DWORD PTR _wpicon$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	test	eax, eax
	jge	$LN45@WaypointCB

; 1995 : 			{
; 1996 : 				// KCK: Peter, this is pointless, as the campaign will just replan it,
; 1997 : 				// And will not do what you think it will.
; 1998 : 
; 1999 : 				// This MAY be pointless, however, if the user drags this... it might as well let them do it
; 2000 : 				// besides, it is used for the SIM CAS waypoint as well as the Alternate Landing strip
; 2001 : 				// If the Alternate landing (or tanker) can't be changed (ever) the dragging should be disabled,
; 2002 : 				// NOT the call saying to move it
; 2003 : 				// Divert WP in Flight
; 2004 : 				if(un->IsFlight())

	mov	edx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	$LN40@WaypointCB

; 2005 : 				{
; 2006 : 					wp=((Flight)un)->GetOverrideWP();

	mov	ecx, DWORD PTR _un$[ebp]
	call	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ ; FlightClass::GetOverrideWP
	mov	DWORD PTR _wp$[ebp], eax

; 2007 : 					if(wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN40@WaypointCB

; 2008 : 					{
; 2009 : 						if(cwp->GetType() == C_TYPE_DRAGXY)

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	cwde
	cmp	eax, 38					; 00000026H
	jne	$LN42@WaypointCB

; 2010 : 						{
; 2011 : 							float	x,y,z;
; 2012 : 							wx = wpicon->worldx;

	mov	ecx, DWORD PTR _wpicon$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _wx$[ebp], xmm0

; 2013 : 							wy = wpicon->worldy;

	mov	edx, DWORD PTR _wpicon$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR _wy$[ebp], xmm0

; 2014 : 
; 2015 : 							x = (float) cwp->GetUserNumber (C_STATE_0) - wy;

	push	0
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR _wy$[ebp]
	movss	DWORD PTR _x$9[ebp], xmm0

; 2016 : 							y = wx;

	movss	xmm0, DWORD PTR _wx$[ebp]
	movss	DWORD PTR _y$11[ebp], xmm0

; 2017 : 							z = wp->GetWPAltitude() * -1.0F;

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _z$10[ebp], xmm0

; 2018 : 
; 2019 : 							wp->SetLocation (x, y, z);

	push	ecx
	movss	xmm0, DWORD PTR _z$10[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$9[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetLocation@WayPointClass@@QAEXMMM@Z	; WayPointClass::SetLocation
	jmp	SHORT $LN40@WaypointCB
$LN42@WaypointCB:

; 2020 : 						}
; 2021 : 						else if(cwp->GetType() == C_TYPE_DRAGY)

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	cwde
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN40@WaypointCB

; 2022 : 						{
; 2023 : 							wp->SetWPAltitude(-1*FloatToInt32(wpicon->worldy));

	mov	ecx, DWORD PTR _wpicon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPAltitude@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAltitude
$LN40@WaypointCB:

; 2024 : 						}
; 2025 : 					}
; 2026 : 				}
; 2027 : 			}
; 2028 : 			else

	jmp	$LN25@WaypointCB
$LN45@WaypointCB:

; 2029 : 			{
; 2030 : 				if(cwp->GetType() == C_TYPE_DRAGXY)

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	movsx	edx, ax
	cmp	edx, 38					; 00000026H
	jne	$LN38@WaypointCB

; 2031 : 				{
; 2032 : 					// Standard WP or WP nub
; 2033 : 					wx = wpicon->worldx;

	mov	eax, DWORD PTR _wpicon$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _wx$[ebp], xmm0

; 2034 : 					wy = gMapMgr->GetMaxY() - wpicon->worldy;

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetMaxY@C_Map@@QAEMXZ			; C_Map::GetMaxY
	fstp	DWORD PTR tv647[ebp]
	movss	xmm0, DWORD PTR tv647[ebp]
	mov	ecx, DWORD PTR _wpicon$[ebp]
	subss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _wy$[ebp], xmm0

; 2035 : 					gx = SimToGrid(wx);

	push	ecx
	movss	xmm0, DWORD PTR _wx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	WORD PTR _gx$[ebp], ax

; 2036 : 					gy = SimToGrid(wy);

	push	ecx
	movss	xmm0, DWORD PTR _wy$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	WORD PTR _gy$[ebp], ax

; 2037 : 
; 2038 : 					if (un->IsBattalion()){

	mov	edx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	je	SHORT $LN37@WaypointCB

; 2039 : 						CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 2040 : 						tactical_set_orders((Battalion)un, FalconNullId, gx, gy);

	movzx	eax, WORD PTR _gy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _gx$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR _un$[ebp]
	push	ecx
	call	?tactical_set_orders@@YAXPAVBattalionClass@@VVU_ID@@FF@Z ; tactical_set_orders
	add	esp, 20					; 00000014H

; 2041 : 						CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 2042 : 						return;

	jmp	$LN51@WaypointCB
	jmp	$LN29@WaypointCB
$LN37@WaypointCB:

; 2043 : 					}
; 2044 : 					else if (un->IsFlight())

	mov	edx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	$LN29@WaypointCB

; 2045 : 					{
; 2046 : 						gActiveWPNum = static_cast<short>(ID & 0xff);

	mov	eax, DWORD PTR _ID$[ebp]
	and	eax, 255				; 000000ffH
	mov	WORD PTR ?gActiveWPNum@@3FA, ax		; gActiveWPNum

; 2047 : 						wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 2048 : 						if (wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN29@WaypointCB

; 2049 : 						{
; 2050 : 							if (ID & 0x40000000) 

	mov	ecx, DWORD PTR _ID$[ebp]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN32@WaypointCB

; 2051 : 							{
; 2052 : 								int alt = wp->GetWPAltitude();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	DWORD PTR _alt$12[ebp], eax

; 2053 : 								WayPoint pw = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _pw$15[ebp], eax

; 2054 : 								if (pw)

	cmp	DWORD PTR _pw$15[ebp], 0
	je	SHORT $LN32@WaypointCB

; 2055 : 								{
; 2056 : 									if (pw->GetWPFlags() & WPF_HOLDCURRENT)

	mov	ecx, DWORD PTR _pw$15[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN31@WaypointCB

; 2057 : 										alt = pw->GetWPAltitude();

	mov	ecx, DWORD PTR _pw$15[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	DWORD PTR _alt$12[ebp], eax
$LN31@WaypointCB:

; 2058 : 									wp = un->AddWPAfter(pw,gx,gy,alt,FloatToInt32(wp->GetWPSpeed()),0,wp->GetWPRouteAction(),WP_NOTHING);

	push	0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	push	eax
	push	0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _alt$12[ebp]
	push	edx
	movzx	eax, WORD PTR _gy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _gx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pw$15[ebp]
	push	edx
	mov	ecx, DWORD PTR _un$[ebp]
	call	?AddWPAfter@UnitClass@@QAEPAVWayPointClass@@PAV2@FFHHKHE@Z ; UnitClass::AddWPAfter
	mov	DWORD PTR _wp$[ebp], eax
$LN32@WaypointCB:

; 2059 : 								}
; 2060 : 							}
; 2061 : 
; 2062 : 							wp->SetWPLocation(gx,gy);

	movzx	eax, WORD PTR _gy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _gx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPLocation@WayPointClass@@QAEXFF@Z	; WayPointClass::SetWPLocation

; 2063 : 							recalculate_waypoints(wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4

; 2064 : 							if (!(ID & 0x60000000))

	mov	eax, DWORD PTR _ID$[ebp]
	and	eax, 1610612736				; 60000000H
	jne	SHORT $LN29@WaypointCB

; 2065 : 							{
; 2066 : 								DropWayPoint(wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?DropWayPoint@@YAXPAVWayPointClass@@@Z	; DropWayPoint
	add	esp, 4

; 2067 : 								// Look for the Triangle OR square... and move to this spot also
; 2068 : 								if(cwp->UpdateInfo(0x20000000 + ID,wpicon->worldx,wpicon->worldy))

	mov	edx, DWORD PTR _wpicon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _wpicon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ID$[ebp]
	add	ecx, 536870912				; 20000000H
	push	ecx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?UpdateInfo@C_Waypoint@@QAEHJMM@Z	; C_Waypoint::UpdateInfo
	test	eax, eax
	je	SHORT $LN29@WaypointCB

; 2069 : 									cwp->Refresh();

	mov	edx, DWORD PTR _cwp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cwp$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN29@WaypointCB:

; 2070 : 							}
; 2071 : 						}
; 2072 : 					}
; 2073 : 				}

	jmp	SHORT $LN26@WaypointCB
$LN38@WaypointCB:

; 2074 : 				else if(cwp->GetType() == C_TYPE_DRAGY)

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	cwde
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN26@WaypointCB

; 2075 : 				{
; 2076 : 					// Standard WP or WP nub
; 2077 : 					wz = wpicon->worldy; // scale it

	mov	ecx, DWORD PTR _wpicon$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _wz$[ebp], xmm0

; 2078 : 
; 2079 : 					gActiveWPNum = static_cast<short>(ID & 0xff);

	mov	edx, DWORD PTR _ID$[ebp]
	and	edx, 255				; 000000ffH
	mov	WORD PTR ?gActiveWPNum@@3FA, dx		; gActiveWPNum

; 2080 : 					wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 2081 : 					if (wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN26@WaypointCB

; 2082 : 					{
; 2083 : 						wp->SetWPAltitude(-1*FloatToInt32(wpicon->worldy));

	mov	eax, DWORD PTR _wpicon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPAltitude@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAltitude

; 2084 : 						recalculate_waypoints(wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4

; 2085 : 						DropWayPoint(wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	call	?DropWayPoint@@YAXPAVWayPointClass@@@Z	; DropWayPoint
	add	esp, 4
$LN26@WaypointCB:

; 2086 : 					}
; 2087 : 				}
; 2088 : 				if(ID & 0x40000000)

	mov	eax, DWORD PTR _ID$[ebp]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN25@WaypointCB

; 2089 : 					PostMessage(gMainHandler->GetAppWnd(),FM_REBUILD_WP_LIST,0,0); // Have to do this because we can't delete the caller of this CB

	push	0
	push	0
	push	1066					; 0000042aH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?GetAppWnd@C_Handler@@QAEPAUHWND__@@XZ	; C_Handler::GetAppWnd
	push	eax
	call	DWORD PTR __imp__PostMessageA@16
$LN25@WaypointCB:

; 2090 : 			}
; 2091 : 			if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	ecx, 524288				; 00080000H
	je	SHORT $LN24@WaypointCB

; 2092 : 			{
; 2093 : 				UI_Refresher *cur;
; 2094 : 				fixup_unit(un);

	mov	edx, DWORD PTR _un$[ebp]
	push	edx
	call	?fixup_unit@@YAXPAVUnitClass@@@Z	; fixup_unit
	add	esp, 4

; 2095 : 				cur = (UI_Refresher*)gGps->Find(un->GetCampID());

	mov	eax, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR ?gGps@@3PAVGlobalPositioningSystem@@A ; gGps
	call	?Find@GlobalPositioningSystem@@QAEPAXJ@Z ; GlobalPositioningSystem::Find
	mov	DWORD PTR _cur$13[ebp], eax

; 2096 : 				if (cur)

	cmp	DWORD PTR _cur$13[ebp], 0
	je	SHORT $LN23@WaypointCB

; 2097 : 					cur->Update(un,0);

	push	0
	mov	edx, DWORD PTR _un$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$13[ebp]
	call	?Update@UI_Refresher@@QAEXPAVCampBaseClass@@J@Z ; UI_Refresher::Update
$LN23@WaypointCB:

; 2098 : 				gMapMgr->GetCurWP()->Refresh();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ	; C_Map::GetCurWP
	mov	DWORD PTR tv352[ebp], eax
	mov	eax, DWORD PTR tv352[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv352[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN24@WaypointCB:

; 2099 : 			}
; 2100 : 			un->MakeWaypointsDirty();

	mov	ecx, DWORD PTR _un$[ebp]
	call	?MakeWaypointsDirty@UnitClass@@QAEXXZ	; UnitClass::MakeWaypointsDirty
$LN46@WaypointCB:

; 2101 : 		}
; 2102 : 	}

	jmp	$LN2@WaypointCB
$LN47@WaypointCB:

; 2103 : 	else if(hittype == C_TYPE_LMOUSEUP)

	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 52					; 00000034H
	jne	$LN21@WaypointCB

; 2104 : 	{
; 2105 : 		// Just activate this unit and waypoint
; 2106 : 		un = (Unit)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$[ebp], eax

; 2107 : 		if(!un)

	cmp	DWORD PTR _un$[ebp], 0
	jne	SHORT $LN20@WaypointCB

; 2108 : 			return;

	jmp	$LN51@WaypointCB
$LN20@WaypointCB:

; 2109 : 
; 2110 : 		MonoPrint("TYPE_LMOUSEUP in WaypointCB\n");

	push	OFFSET ??_C@_0BN@BENICKHI@TYPE_LMOUSEUP?5in?5WaypointCB?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 2111 : 
; 2112 : 		if(un->IsFlight())

	mov	eax, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	$LN17@WaypointCB

; 2113 : 		{
; 2114 : 			gActiveFlightID = un->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _un$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, edx
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, eax

; 2115 : 			if(!(ID & 0x40000000))

	mov	ecx, DWORD PTR _ID$[ebp]
	and	ecx, 1073741824				; 40000000H
	jne	SHORT $LN18@WaypointCB

; 2116 : 			{
; 2117 : 				gActiveWPNum = static_cast<short>(ID & 0xff);

	mov	edx, DWORD PTR _ID$[ebp]
	and	edx, 255				; 000000ffH
	mov	WORD PTR ?gActiveWPNum@@3FA, dx		; gActiveWPNum

; 2118 : 				//			gActiveWPNum=control->GetUserNumber(C_STATE_1);
; 2119 : 				wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax
$LN18@WaypointCB:

; 2120 : 			}
; 2121 : 
; 2122 : 			win=gMainHandler->FindWindow(FLIGHT_PLAN_WIN);

	push	13000					; 000032c8H
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 2123 : 			if(win && wp)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN17@WaypointCB
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN17@WaypointCB

; 2124 : 			{
; 2125 : 				UpdateWaypointWindowInfo(win,wp,gActiveWPNum);

	push	1
	movsx	eax, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ; UpdateWaypointWindowInfo
	add	esp, 16					; 00000010H

; 2126 : 				win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow

; 2127 : 				gMainHandler->ShowWindow(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z ; C_Handler::ShowWindow

; 2128 : 				gMainHandler->WindowToFront(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront
$LN17@WaypointCB:

; 2129 : 			}
; 2130 : 		}
; 2131 : 	}

	jmp	$LN2@WaypointCB
$LN21@WaypointCB:

; 2132 : 	else if(hittype == C_TYPE_LMOUSEDOWN)

	movsx	edx, WORD PTR _hittype$[ebp]
	cmp	edx, 51					; 00000033H
	jne	$LN15@WaypointCB

; 2133 : 	{
; 2134 : 		// Just activate this unit and record the waypoint's current speed
; 2135 : 		if(!(ID & 0x40000000))

	mov	eax, DWORD PTR _ID$[ebp]
	and	eax, 1073741824				; 40000000H
	jne	SHORT $LN12@WaypointCB

; 2136 : 		{
; 2137 : 			un = (Unit)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$[ebp], eax

; 2138 : 			if(!un)

	cmp	DWORD PTR _un$[ebp], 0
	jne	SHORT $LN13@WaypointCB

; 2139 : 				return;

	jmp	$LN51@WaypointCB
$LN13@WaypointCB:

; 2140 : 
; 2141 : 			gActiveFlightID = un->Id();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _un$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, edx
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, eax

; 2142 : 			gActiveWPNum = static_cast<short>(ID & 0xff);

	mov	ecx, DWORD PTR _ID$[ebp]
	and	ecx, 255				; 000000ffH
	mov	WORD PTR ?gActiveWPNum@@3FA, cx		; gActiveWPNum

; 2143 : 			wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 2144 : 			if (wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN12@WaypointCB

; 2145 : 				SetWPSpeed(wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	call	?SetWPSpeed@@YAMPAVWayPointClass@@@Z	; SetWPSpeed
	fstp	ST(0)
	add	esp, 4
$LN12@WaypointCB:

; 2146 : 		}
; 2147 : 	}

	jmp	$LN2@WaypointCB
$LN15@WaypointCB:

; 2148 : 	else if (hittype == C_TYPE_MOUSEMOVE)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 61					; 0000003dH
	jne	$LN2@WaypointCB

; 2149 : 	{
; 2150 : 		// Check for Waypoints vs distance boxes
; 2151 : 		if(!(ID & 0x40000000))

	mov	ecx, DWORD PTR _ID$[ebp]
	and	ecx, 1073741824				; 40000000H
	jne	$LN2@WaypointCB

; 2152 : 		{
; 2153 : 			// Just update the waypoint's location and check for validity
; 2154 : 			un = (Unit)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$[ebp], eax

; 2155 : 			if(!un || !un->IsFlight())

	cmp	DWORD PTR _un$[ebp], 0
	je	SHORT $LN7@WaypointCB
	mov	eax, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN8@WaypointCB
$LN7@WaypointCB:

; 2156 : 				return;

	jmp	$LN51@WaypointCB
$LN8@WaypointCB:

; 2157 : 
; 2158 : 			gActiveFlightID = un->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _un$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, edx
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, eax

; 2159 : 			gActiveWPNum = static_cast<short>(ID & 0xff);

	mov	ecx, DWORD PTR _ID$[ebp]
	and	ecx, 255				; 000000ffH
	mov	WORD PTR ?gActiveWPNum@@3FA, cx		; gActiveWPNum

; 2160 : 			wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 2161 : 			if (wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN6@WaypointCB

; 2162 : 			{
; 2163 : 				if(cwp->GetType() == C_TYPE_DRAGXY)

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	movsx	edx, ax
	cmp	edx, 38					; 00000026H
	jne	SHORT $LN5@WaypointCB

; 2164 : 				{
; 2165 : 					wx = wpicon->worldx;

	mov	eax, DWORD PTR _wpicon$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _wx$[ebp], xmm0

; 2166 : 					wy = gMapMgr->GetMaxY() - wpicon->worldy;

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetMaxY@C_Map@@QAEMXZ			; C_Map::GetMaxY
	fstp	DWORD PTR tv795[ebp]
	movss	xmm0, DWORD PTR tv795[ebp]
	mov	ecx, DWORD PTR _wpicon$[ebp]
	subss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _wy$[ebp], xmm0

; 2167 : 					gx = SimToGrid(wx);

	push	ecx
	movss	xmm0, DWORD PTR _wx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	WORD PTR _gx$[ebp], ax

; 2168 : 					gy = SimToGrid(wy);

	push	ecx
	movss	xmm0, DWORD PTR _wy$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	WORD PTR _gy$[ebp], ax

; 2169 : 					wp->SetWPLocation(gx,gy);

	movzx	edx, WORD PTR _gy$[ebp]
	push	edx
	movzx	eax, WORD PTR _gx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPLocation@WayPointClass@@QAEXFF@Z	; WayPointClass::SetWPLocation
	jmp	SHORT $LN3@WaypointCB
$LN5@WaypointCB:

; 2170 : 				}
; 2171 : 				else if(cwp->GetType() == C_TYPE_DRAGY)

	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	movsx	ecx, ax
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN3@WaypointCB

; 2172 : 				{
; 2173 : 					wp->SetWPAltitude(-1*FloatToInt32(wpicon->worldy));

	mov	edx, DWORD PTR _wpicon$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPAltitude@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAltitude
$LN3@WaypointCB:

; 2174 : 				}
; 2175 : 				recalculate_waypoints(wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4
$LN6@WaypointCB:

; 2176 : 			}
; 2177 : 
; 2178 : 			if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)

	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	ecx, 524288				; 00080000H
	je	SHORT $LN2@WaypointCB

; 2179 : 			{
; 2180 : 				UI_Refresher *cur;
; 2181 : 				fixup_unit (un);

	mov	edx, DWORD PTR _un$[ebp]
	push	edx
	call	?fixup_unit@@YAXPAVUnitClass@@@Z	; fixup_unit
	add	esp, 4

; 2182 : 				cur = (UI_Refresher*)gGps->Find(un->GetCampID());

	mov	eax, DWORD PTR _un$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _un$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR ?gGps@@3PAVGlobalPositioningSystem@@A ; gGps
	call	?Find@GlobalPositioningSystem@@QAEPAXJ@Z ; GlobalPositioningSystem::Find
	mov	DWORD PTR _cur$14[ebp], eax

; 2183 : 				if (cur)

	cmp	DWORD PTR _cur$14[ebp], 0
	je	SHORT $LN1@WaypointCB

; 2184 : 					cur->Update(un,0);

	push	0
	mov	edx, DWORD PTR _un$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cur$14[ebp]
	call	?Update@UI_Refresher@@QAEXPAVCampBaseClass@@J@Z ; UI_Refresher::Update
$LN1@WaypointCB:

; 2185 : 				gMapMgr->GetCurWP()->Refresh();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ	; C_Map::GetCurWP
	mov	DWORD PTR tv537[ebp], eax
	mov	eax, DWORD PTR tv537[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv537[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 2186 : 				gMapMgr->GetCurWPZ()->Refresh();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPZ@C_Map@@QAEPAVC_Waypoint@@XZ	; C_Map::GetCurWPZ
	mov	DWORD PTR tv547[ebp], eax
	mov	ecx, DWORD PTR tv547[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv547[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN2@WaypointCB:
$LN51@WaypointCB:

; 2187 : 			}
; 2188 : 		}
; 2189 : 	}
; 2190 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WaypointCB@@YAXJFPAVC_Base@@@Z ENDP			; WaypointCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -60						; size = 8
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 8
$T5 = -28						; size = 8
_unit$ = -20						; size = 4
_action$ = -16						; size = 4
_ent$ = -12						; size = 4
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_wp$ = 8						; size = 4
?DropWayPoint@@YAXPAVWayPointClass@@@Z PROC		; DropWayPoint

; 1857 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 1858 : 	GridIndex		x,y;
; 1859 : 	CampBaseClass	*ent;
; 1860 : 	int				action;
; 1861 : 	Unit			unit;
; 1862 : 
; 1863 : 	if (!wp)

	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN18@DropWayPoi

; 1864 : 		return;

	jmp	$LN19@DropWayPoi
$LN18@DropWayPoi:

; 1865 : 
; 1866 : 	unit=(Unit)vuDatabase->Find(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _unit$[ebp], eax

; 1867 : 
; 1868 : 	action = wp->GetWPAction();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	mov	DWORD PTR _action$[ebp], eax

; 1869 : 	wp->GetWPLocation(&x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1870 : 
; 1871 : 	if (action == WP_TAKEOFF || action == WP_LAND)

	cmp	DWORD PTR _action$[ebp], 1
	je	SHORT $LN16@DropWayPoi
	cmp	DWORD PTR _action$[ebp], 7
	jne	SHORT $LN17@DropWayPoi
$LN16@DropWayPoi:

; 1872 : 	{
; 1873 : 		ent = GetObjectiveByXY(x,y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ; GetObjectiveByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1874 : 		if (ent && (ent->GetType() == TYPE_AIRBASE || ent->GetType() == TYPE_AIRSTRIP)){

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN15@DropWayPoi
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN14@DropWayPoi
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN15@DropWayPoi
$LN14@DropWayPoi:

; 1875 : 			wp->SetWPTarget(ent->Id());

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1876 : 		}
; 1877 : 		else {

	jmp	SHORT $LN13@DropWayPoi
$LN15@DropWayPoi:

; 1878 : 			wp->SetWPTarget(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN13@DropWayPoi:

; 1879 : 		}

	jmp	$LN12@DropWayPoi
$LN17@DropWayPoi:

; 1880 : 	}
; 1881 : 	else if (action == WP_STRIKE || action == WP_BOMB || action == WP_RECON)

	cmp	DWORD PTR _action$[ebp], 17		; 00000011H
	je	SHORT $LN10@DropWayPoi
	cmp	DWORD PTR _action$[ebp], 18		; 00000012H
	je	SHORT $LN10@DropWayPoi
	cmp	DWORD PTR _action$[ebp], 21		; 00000015H
	jne	SHORT $LN11@DropWayPoi
$LN10@DropWayPoi:

; 1882 : 	{
; 1883 : 		ent = GetObjectiveByXY(x,y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ; GetObjectiveByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1884 : 		if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN9@DropWayPoi

; 1885 : 			wp->SetWPTarget(ent->Id());

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1886 : 		else

	jmp	SHORT $LN8@DropWayPoi
$LN9@DropWayPoi:

; 1887 : 			wp->SetWPTarget(FalconNullId);

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN8@DropWayPoi:
	jmp	SHORT $LN12@DropWayPoi
$LN11@DropWayPoi:

; 1888 : 	}
; 1889 : 	else if (action == WP_INTERCEPT || action == WP_NAVSTRIKE || action == WP_GNDSTRIKE)

	cmp	DWORD PTR _action$[ebp], 13		; 0000000dH
	je	SHORT $LN5@DropWayPoi
	cmp	DWORD PTR _action$[ebp], 15		; 0000000fH
	je	SHORT $LN5@DropWayPoi
	cmp	DWORD PTR _action$[ebp], 14		; 0000000eH
	jne	SHORT $LN12@DropWayPoi
$LN5@DropWayPoi:

; 1890 : 	{
; 1891 : 		ent = GetUnitByXY(x,y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetUnitByXY@@YAPAVUnitClass@@FF@Z	; GetUnitByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1892 : 		if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN4@DropWayPoi

; 1893 : 			wp->SetWPTarget(ent->Id());

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1894 : 		else

	jmp	SHORT $LN12@DropWayPoi
$LN4@DropWayPoi:

; 1895 : 			wp->SetWPTarget(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN12@DropWayPoi:

; 1896 : 	}
; 1897 : 	if (unit->IsFlight())

	mov	edx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN19@DropWayPoi

; 1898 : 	{
; 1899 : 		// 2001-04-23 ADDED BY S.G. ONLY SET THE UNIT MISSION TARGET IF WE HAVE A TARGET (SO WE DON'T CLEAR PREVIOUS TARGETS)
; 1900 : 		if (wp->GetWPTargetID())

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN19@DropWayPoi

; 1901 : 			// END OF ADDED SECTION
; 1902 : 			((Flight)unit)->SetUnitMissionTarget(wp->GetWPTargetID());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ; WayPointClass::GetWPTargetID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _unit$[ebp]
	mov	eax, DWORD PTR [edx+1000]
	call	eax
$LN19@DropWayPoi:

; 1903 : 	}
; 1904 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DropWayPoint@@YAXPAVWayPointClass@@@Z ENDP		; DropWayPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
?RebuildCurrentWPList@@YAXXZ PROC			; RebuildCurrentWPList

; 1846 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1847 : 	if(gMapMgr)

	cmp	DWORD PTR ?gMapMgr@@3PAVC_Map@@A, 0	; gMapMgr
	je	SHORT $LN2@RebuildCur

; 1848 : 		gMapMgr->SetCurrentWaypointList(gMapMgr->GetCurWPID());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?SetCurrentWaypointList@C_Map@@QAEHVVU_ID@@@Z ; C_Map::SetCurrentWaypointList
$LN2@RebuildCur:

; 1849 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RebuildCurrentWPList@@YAXXZ ENDP			; RebuildCurrentWPList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_win$ = -12						; size = 4
_wp$ = -8						; size = 4
_lbox$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?set_waypoint_formation@@YAXJFPAVC_Base@@@Z PROC	; set_waypoint_formation

; 1752 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1753 : 	C_ListBox
; 1754 : 			*lbox;
; 1755 : 
; 1756 : 	WayPointClass
; 1757 : 			*wp;
; 1758 : 
; 1759 : 	C_Window
; 1760 : 			*win;
; 1761 : 
; 1762 : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN3@set_waypoi

; 1763 : 		return;

	jmp	SHORT $LN4@set_waypoi
$LN3@set_waypoi:

; 1764 : 
; 1765 : 	win=control->Parent_;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _win$[ebp], edx

; 1766 : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@set_waypoi

; 1767 : 		return;

	jmp	SHORT $LN4@set_waypoi
$LN2@set_waypoi:

; 1768 : 
; 1769 : 	lbox = (C_ListBox *) control;

	mov	eax, DWORD PTR _control$[ebp]
	mov	DWORD PTR _lbox$[ebp], eax

; 1770 : 
; 1771 : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1772 : 
; 1773 : 	if ((lbox) && (wp))

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN4@set_waypoi
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN4@set_waypoi

; 1774 : 		wp->SetWPFormation(lbox->GetTextID()-1);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFormation@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPFormation
$LN4@set_waypoi:

; 1775 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?set_waypoint_formation@@YAXJFPAVC_Base@@@Z ENDP	; set_waypoint_formation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_win$ = -16						; size = 4
_action$ = -12						; size = 4
_lbox$ = -8						; size = 4
_wp$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?set_waypoint_action@@YAXJFPAVC_Base@@@Z PROC		; set_waypoint_action

; 1719 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1720 : 	C_ListBox		*lbox;
; 1721 : 	WayPointClass	*wp;
; 1722 : 	C_Window		*win;
; 1723 : 	int				action;
; 1724 : 
; 1725 : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN3@set_waypoi

; 1726 : 		return;

	jmp	$LN4@set_waypoi
$LN3@set_waypoi:

; 1727 : 
; 1728 : 	win=control->Parent_;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _win$[ebp], edx

; 1729 : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@set_waypoi

; 1730 : 		return;

	jmp	SHORT $LN4@set_waypoi
$LN2@set_waypoi:

; 1731 : 
; 1732 : 	lbox = (C_ListBox *) control;

	mov	eax, DWORD PTR _control$[ebp]
	mov	DWORD PTR _lbox$[ebp], eax

; 1733 : 	if(!lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	jne	SHORT $LN1@set_waypoi

; 1734 : 		return;

	jmp	SHORT $LN4@set_waypoi
$LN1@set_waypoi:

; 1735 : 
; 1736 : 	action=lbox->GetTextID()-1;

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	sub	eax, 1
	mov	DWORD PTR _action$[ebp], eax

; 1737 : 	RefreshActionClusters(action, control->Parent_);

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _action$[ebp]
	push	eax
	call	?RefreshActionClusters@@YAXHPAVC_Window@@@Z ; RefreshActionClusters
	add	esp, 8

; 1738 : 	control->Refresh();

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1739 : 
; 1740 : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1741 : 	set_waypoint_action(wp,action);

	mov	ecx, DWORD PTR _action$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	call	?set_waypoint_action@@YAXPAVWayPointClass@@H@Z ; set_waypoint_action
	add	esp, 8

; 1742 : 
; 1743 : 	SetSteerPointValues(control->Parent_,wp,gActiveWPNum);

	movsx	eax, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z ; SetSteerPointValues
	add	esp, 12					; 0000000cH

; 1744 : 	refresh_waypoint(wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?refresh_waypoint@@YAXPAVWayPointClass@@@Z ; refresh_waypoint
	add	esp, 4
$LN4@set_waypoi:

; 1745 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?set_waypoint_action@@YAXJFPAVC_Base@@@Z ENDP		; set_waypoint_action
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 8
$T2 = -64						; size = 8
$T3 = -56						; size = 8
$T4 = -48						; size = 8
_oldflags$ = -40					; size = 4
_oldaction$ = -36					; size = 4
tv69 = -32						; size = 4
_pw$ = -28						; size = 4
_flags$ = -24						; size = 4
_ent$ = -20						; size = 4
_ey$ = -16						; size = 2
_ex$ = -12						; size = 2
_x$ = -8						; size = 2
_y$ = -4						; size = 2
_wp$ = 8						; size = 4
_action$ = 12						; size = 4
?set_waypoint_action@@YAXPAVWayPointClass@@H@Z PROC	; set_waypoint_action

; 1595 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 1596 : 	int				flags,oldaction,oldflags;
; 1597 : 	WayPoint		pw;
; 1598 : 	CampBaseClass	*ent;
; 1599 : 	GridIndex		x,y,ex=-1,ey=-1;

	or	eax, -1
	mov	WORD PTR _ex$[ebp], ax
	or	ecx, -1
	mov	WORD PTR _ey$[ebp], cx

; 1600 : 
; 1601 : 	if (!wp)

	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN36@set_waypoi

; 1602 : 		return;

	jmp	$LN37@set_waypoi
$LN36@set_waypoi:

; 1603 : 
; 1604 : 	oldaction = wp->GetWPAction();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	mov	DWORD PTR _oldaction$[ebp], eax

; 1605 : 	oldflags = wp->GetWPFlags();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	mov	DWORD PTR _oldflags$[ebp], eax

; 1606 : 	flags=0;

	mov	DWORD PTR _flags$[ebp], 0

; 1607 : 	switch (action)

	mov	edx, DWORD PTR _action$[ebp]
	mov	DWORD PTR tv69[ebp], edx
	mov	eax, DWORD PTR tv69[ebp]
	sub	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 25			; 00000019H
	ja	$LN34@set_waypoi
	mov	ecx, DWORD PTR tv69[ebp]
	movzx	edx, BYTE PTR $LN39@set_waypoi[ecx]
	jmp	DWORD PTR $LN40@set_waypoi[edx*4]
$LN33@set_waypoi:

; 1608 : 	{
; 1609 : 			case WP_TAKEOFF:
; 1610 : 					flags=WPF_TAKEOFF;

	mov	DWORD PTR _flags$[ebp], 128		; 00000080H

; 1611 : 					// Look for an airbase
; 1612 : 					wp->GetWPLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1613 : 					ent = GetObjectiveByXY(x,y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ; GetObjectiveByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1614 : 					if (ent && (ent->GetType() == TYPE_AIRBASE || ent->GetType() == TYPE_AIRSTRIP))

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN32@set_waypoi
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN31@set_waypoi
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN32@set_waypoi
$LN31@set_waypoi:

; 1615 : 						wp->SetWPTarget(ent->Id());

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1616 : 					else

	jmp	SHORT $LN30@set_waypoi
$LN32@set_waypoi:

; 1617 : 						wp->SetWPTarget(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN30@set_waypoi:

; 1618 : 					break;

	jmp	$LN34@set_waypoi
$LN29@set_waypoi:

; 1619 : 			case WP_LAND:
; 1620 : 					flags=WPF_LAND;

	mov	DWORD PTR _flags$[ebp], 256		; 00000100H

; 1621 : 					// Look for an airbase
; 1622 : 					wp->GetWPLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1623 : 					ent = GetObjectiveByXY(x,y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ; GetObjectiveByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1624 : 					if (ent && (ent->GetType() == TYPE_AIRBASE || ent->GetType() == TYPE_AIRSTRIP))

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN28@set_waypoi
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN27@set_waypoi
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN28@set_waypoi
$LN27@set_waypoi:

; 1625 : 						wp->SetWPTarget(ent->Id());

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1626 : 					else

	jmp	SHORT $LN26@set_waypoi
$LN28@set_waypoi:

; 1627 : 						wp->SetWPTarget(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN26@set_waypoi:

; 1628 : 					break;

	jmp	$LN34@set_waypoi
$LN25@set_waypoi:

; 1629 : 			case WP_ASSEMBLE:
; 1630 : 			case WP_POSTASSEMBLE:
; 1631 : 					flags=WPF_ASSEMBLE;

	mov	DWORD PTR _flags$[ebp], 2

; 1632 : 					wp->SetWPTarget(FalconNullId);

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1633 : 					break;

	jmp	$LN34@set_waypoi
$LN24@set_waypoi:

; 1634 : 			case WP_TANKER:
; 1635 : 			case WP_JAM:
; 1636 : 			case WP_SAD:
; 1637 : 			case WP_ELINT:
; 1638 : 					flags=WPF_TARGET;

	mov	DWORD PTR _flags$[ebp], 1

; 1639 : 					pw = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _pw$[ebp], eax

; 1640 : 					if (pw && pw->GetWPAction() == action)

	cmp	DWORD PTR _pw$[ebp], 0
	je	SHORT $LN23@set_waypoi
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, DWORD PTR _action$[ebp]
	jne	SHORT $LN23@set_waypoi

; 1641 : 						flags |= WPF_REPEAT;

	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, 64					; 00000040H
	mov	DWORD PTR _flags$[ebp], ecx
$LN23@set_waypoi:

; 1642 : 					wp->SetWPTarget(FalconNullId);

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1643 : 					break;

	jmp	$LN34@set_waypoi
$LN22@set_waypoi:

; 1644 : 			case WP_GNDSTRIKE:
; 1645 : 			case WP_CAP:
; 1646 : 					flags=WPF_TARGET;

	mov	DWORD PTR _flags$[ebp], 1

; 1647 : 					pw = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _pw$[ebp], eax

; 1648 : 					if (pw && pw->GetWPAction() == action)

	cmp	DWORD PTR _pw$[ebp], 0
	je	SHORT $LN21@set_waypoi
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, DWORD PTR _action$[ebp]
	jne	SHORT $LN21@set_waypoi

; 1649 : 						flags |= WPF_REPEAT;

	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, 64					; 00000040H
	mov	DWORD PTR _flags$[ebp], ecx
	jmp	SHORT $LN20@set_waypoi
$LN21@set_waypoi:

; 1650 : 					else if (pw)

	cmp	DWORD PTR _pw$[ebp], 0
	je	SHORT $LN20@set_waypoi

; 1651 : 					{
; 1652 : 						pw = wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _pw$[ebp], eax

; 1653 : 						if (pw && pw->GetWPAction() == action)

	cmp	DWORD PTR _pw$[ebp], 0
	je	SHORT $LN20@set_waypoi
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, DWORD PTR _action$[ebp]
	jne	SHORT $LN20@set_waypoi

; 1654 : 							flags |= WPF_CP;

	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _flags$[ebp], edx
$LN20@set_waypoi:

; 1655 : 					}
; 1656 : 					break;

	jmp	$LN34@set_waypoi
$LN17@set_waypoi:

; 1657 : 			case WP_ESCORT:
; 1658 : 			case WP_CA:
; 1659 : 			case WP_RESCUE:
; 1660 : 			case WP_ASW:
; 1661 : 					flags=WPF_TARGET;

	mov	DWORD PTR _flags$[ebp], 1

; 1662 : 					break;

	jmp	$LN34@set_waypoi
$LN16@set_waypoi:

; 1663 : 			case WP_AIRDROP:
; 1664 : 					flags=WPF_TARGET | WPF_LAND | WPF_TAKEOFF;

	mov	DWORD PTR _flags$[ebp], 385		; 00000181H

; 1665 : 					break;

	jmp	$LN34@set_waypoi
$LN15@set_waypoi:

; 1666 : 			case WP_PICKUP:
; 1667 : 					flags=WPF_LAND | WPF_TAKEOFF;

	mov	DWORD PTR _flags$[ebp], 384		; 00000180H

; 1668 : 					break;

	jmp	$LN34@set_waypoi
$LN14@set_waypoi:

; 1669 : 			case WP_INTERCEPT:
; 1670 : 			case WP_NAVSTRIKE:
; 1671 : 			case WP_SEAD:
; 1672 : 					flags=WPF_TARGET;

	mov	DWORD PTR _flags$[ebp], 1

; 1673 : 					// Look for a unit target
; 1674 : 					wp->GetWPLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1675 : 					ent = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _ent$[ebp], eax

; 1676 : 					if (ent && ent->IsUnit())

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN13@set_waypoi
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+232]
	call	edx
	test	eax, eax
	je	SHORT $LN13@set_waypoi

; 1677 : 						ent->GetLocation(&ex,&ey);

	lea	eax, DWORD PTR _ey$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN13@set_waypoi:

; 1678 : 					if (x != ex || y != ey)

	movsx	edx, WORD PTR _x$[ebp]
	movsx	eax, WORD PTR _ex$[ebp]
	cmp	edx, eax
	jne	SHORT $LN11@set_waypoi
	movsx	ecx, WORD PTR _y$[ebp]
	movsx	edx, WORD PTR _ey$[ebp]
	cmp	ecx, edx
	je	SHORT $LN12@set_waypoi
$LN11@set_waypoi:

; 1679 : 					{
; 1680 : 						ent = GetUnitByXY(x,y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?GetUnitByXY@@YAPAVUnitClass@@FF@Z	; GetUnitByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1681 : 						if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN10@set_waypoi

; 1682 : 							wp->SetWPTarget(ent->Id());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1683 : 						else

	jmp	SHORT $LN12@set_waypoi
$LN10@set_waypoi:

; 1684 : 							wp->SetWPTarget(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN12@set_waypoi:

; 1685 : 					}
; 1686 : 					break;

	jmp	$LN34@set_waypoi
$LN8@set_waypoi:

; 1687 : 			case WP_STRIKE:
; 1688 : 			case WP_BOMB:
; 1689 : 			case WP_RECON:
; 1690 : 					flags=WPF_TARGET;

	mov	DWORD PTR _flags$[ebp], 1

; 1691 : 					// Look for an objective target
; 1692 : 					wp->GetWPLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1693 : 					ent = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _ent$[ebp], eax

; 1694 : 					if (ent && ent->IsObjective())

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN7@set_waypoi
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN7@set_waypoi

; 1695 : 						ent->GetLocation(&ex,&ey);

	lea	ecx, DWORD PTR _ey$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN7@set_waypoi:

; 1696 : 					if (x != ex || y != ey)

	movsx	eax, WORD PTR _x$[ebp]
	movsx	ecx, WORD PTR _ex$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN5@set_waypoi
	movsx	edx, WORD PTR _y$[ebp]
	movsx	eax, WORD PTR _ey$[ebp]
	cmp	edx, eax
	je	SHORT $LN34@set_waypoi
$LN5@set_waypoi:

; 1697 : 					{
; 1698 : 						ent = GetObjectiveByXY(x,y);

	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetObjectiveByXY@@YAPAVObjectiveClass@@FF@Z ; GetObjectiveByXY
	add	esp, 8
	mov	DWORD PTR _ent$[ebp], eax

; 1699 : 						if (ent){

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN4@set_waypoi

; 1700 : 							wp->SetWPTarget(ent->Id());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget

; 1701 : 						}
; 1702 : 						else {

	jmp	SHORT $LN34@set_waypoi
$LN4@set_waypoi:

; 1703 : 							wp->SetWPTarget(FalconNullId);

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ; WayPointClass::SetWPTarget
$LN34@set_waypoi:

; 1704 : 						}
; 1705 : 					}
; 1706 : 					break;
; 1707 : 			default:
; 1708 : 					break;
; 1709 : 	}
; 1710 : 	wp->UnSetWPFlag(WPF_CRITICAL_MASK);

	push	2047					; 000007ffH
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag

; 1711 : 	wp->SetWPFlag(flags);

	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag

; 1712 : 	wp->SetWPAction(action);

	mov	eax, DWORD PTR _action$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPAction@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAction

; 1713 : 
; 1714 : 	if (action != oldaction && flags != oldflags)

	mov	ecx, DWORD PTR _action$[ebp]
	cmp	ecx, DWORD PTR _oldaction$[ebp]
	je	SHORT $LN37@set_waypoi
	mov	edx, DWORD PTR _flags$[ebp]
	cmp	edx, DWORD PTR _oldflags$[ebp]
	je	SHORT $LN37@set_waypoi

; 1715 : 		gMapMgr->SetCurrentWaypointList(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?SetCurrentWaypointList@C_Map@@QAEHVVU_ID@@@Z ; C_Map::SetCurrentWaypointList
$LN37@set_waypoi:

; 1716 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN40@set_waypoi:
	DD	$LN33@set_waypoi
	DD	$LN25@set_waypoi
	DD	$LN15@set_waypoi
	DD	$LN29@set_waypoi
	DD	$LN17@set_waypoi
	DD	$LN22@set_waypoi
	DD	$LN14@set_waypoi
	DD	$LN24@set_waypoi
	DD	$LN8@set_waypoi
	DD	$LN16@set_waypoi
	DD	$LN34@set_waypoi
$LN39@set_waypoi:
	DB	0
	DB	1
	DB	1
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	2
	DB	3
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	4
	DB	4
	DB	5
	DB	6
	DB	5
	DB	6
	DB	7
	DB	8
	DB	8
	DB	6
	DB	7
	DB	8
	DB	4
	DB	4
	DB	7
	DB	9
	DB	7
?set_waypoint_action@@YAXPAVWayPointClass@@H@Z ENDP	; set_waypoint_action
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_win$ = -12						; size = 4
_lbox$ = -8						; size = 4
_wp$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?set_waypoint_enroute_action@@YAXJFPAVC_Base@@@Z PROC	; set_waypoint_enroute_action

; 1563 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1564 : 	C_ListBox
; 1565 : 			*lbox;
; 1566 : 
; 1567 : 	WayPointClass
; 1568 : 			*wp;
; 1569 : 
; 1570 : 	C_Window
; 1571 : 			*win;
; 1572 : 
; 1573 : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN3@set_waypoi

; 1574 : 		return;

	jmp	SHORT $LN4@set_waypoi
$LN3@set_waypoi:

; 1575 : 
; 1576 : 	win=control->Parent_;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _win$[ebp], edx

; 1577 : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN2@set_waypoi

; 1578 : 		return;

	jmp	SHORT $LN4@set_waypoi
$LN2@set_waypoi:

; 1579 : 
; 1580 : 	lbox = (C_ListBox*) control;

	mov	eax, DWORD PTR _control$[ebp]
	mov	DWORD PTR _lbox$[ebp], eax

; 1581 : 
; 1582 : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1583 : 
; 1584 : 	if ((lbox) && (wp))

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN1@set_waypoi
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN1@set_waypoi

; 1585 : 		wp->SetWPRouteAction(lbox->GetTextID()-1);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPRouteAction@WayPointClass@@QAEXH@Z ; WayPointClass::SetWPRouteAction
$LN1@set_waypoi:

; 1586 : 
; 1587 : 	refresh_waypoint(wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?refresh_waypoint@@YAXPAVWayPointClass@@@Z ; refresh_waypoint
	add	esp, 4
$LN4@set_waypoi:

; 1588 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?set_waypoint_enroute_action@@YAXJFPAVC_Base@@@Z ENDP	; set_waypoint_enroute_action
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_win$ = -12						; size = 4
_lbox$ = -8						; size = 4
_wp$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?set_waypoint_climb_mode@@YAXJFPAVC_Base@@@Z PROC	; set_waypoint_climb_mode

; 1528 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1529 : 	C_ListBox
; 1530 : 			*lbox;
; 1531 : 
; 1532 : 	WayPointClass
; 1533 : 			*wp;
; 1534 : 
; 1535 : 	C_Window
; 1536 : 			*win;
; 1537 : 
; 1538 : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN5@set_waypoi

; 1539 : 		return;

	jmp	SHORT $LN6@set_waypoi
$LN5@set_waypoi:

; 1540 : 
; 1541 : 	win=control->Parent_;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _win$[ebp], edx

; 1542 : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN4@set_waypoi

; 1543 : 		return;

	jmp	SHORT $LN6@set_waypoi
$LN4@set_waypoi:

; 1544 : 
; 1545 : 	lbox = (C_ListBox*) control;

	mov	eax, DWORD PTR _control$[ebp]
	mov	DWORD PTR _lbox$[ebp], eax

; 1546 : 
; 1547 : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1548 : 
; 1549 : 	if ((lbox) && (wp))

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN6@set_waypoi
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN6@set_waypoi

; 1550 : 	{
; 1551 : 		if(lbox->GetTextID() == CLIMB_DELAY)

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	cmp	eax, 13060				; 00003304H
	jne	SHORT $LN2@set_waypoi

; 1552 : 			wp->SetWPFlag(WPF_HOLDCURRENT);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag

; 1553 : 		else

	jmp	SHORT $LN6@set_waypoi
$LN2@set_waypoi:

; 1554 : 			wp->UnSetWPFlag(WPF_HOLDCURRENT);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag
$LN6@set_waypoi:

; 1555 : 	}
; 1556 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?set_waypoint_climb_mode@@YAXJFPAVC_Base@@@Z ENDP	; set_waypoint_climb_mode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_dist$1 = -16						; size = 4
_time$2 = -12						; size = 4
_pw$3 = -8						; size = 4
_nw$4 = -4						; size = 4
_wp$ = 8						; size = 4
_minSpeed$ = 12						; size = 4
_maxSpeed$ = 16						; size = 4
?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z PROC ; recalculate_waypoint_list

; 1209 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi

; 1210 : 	// First, find out if we're time locked ourselves
; 1211 : 	if (wp->GetWPFlags() & WPF_TIME_LOCKED)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	$LN12@recalculat

; 1212 : 	{
; 1213 : 		// We're gonna have to do two recalculations, one before and one after this waypoint
; 1214 : 		WayPointClass	*pw,*nw;
; 1215 : 		float			dist;
; 1216 : 		int				time;
; 1217 : 		pw = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _pw$3[ebp], eax

; 1218 : 		nw = wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _nw$4[ebp], eax

; 1219 : 		if (pw && !(pw->GetWPFlags() & WPF_TIME_LOCKED))

	cmp	DWORD PTR _pw$3[ebp], 0
	je	SHORT $LN11@recalculat
	mov	ecx, DWORD PTR _pw$3[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	jne	SHORT $LN11@recalculat

; 1220 : 			recalculate_waypoint(pw, minSpeed, maxSpeed);

	mov	eax, DWORD PTR _maxSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minSpeed$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pw$3[ebp]
	push	edx
	call	?recalculate_waypoint@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@recalculat
$LN11@recalculat:

; 1221 : 		else if (pw)

	cmp	DWORD PTR _pw$3[ebp], 0
	je	SHORT $LN7@recalculat

; 1222 : 		{
; 1223 : 			// Simply set Speed between pw and wp
; 1224 : 			dist = wp->DistanceTo(pw);

	mov	eax, DWORD PTR _pw$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?DistanceTo@WayPointClass@@QAEMPAV1@@Z	; WayPointClass::DistanceTo
	fstp	DWORD PTR _dist$1[ebp]

; 1225 : 			time = wp->GetWPArrivalTime() - pw->GetWPDepartureTime();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	esi, eax
	mov	ecx, DWORD PTR _pw$3[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	sub	esi, eax
	mov	DWORD PTR _time$2[ebp], esi

; 1226 : 			if (time != 0)

	je	SHORT $LN8@recalculat

; 1227 : 				wp->SetWPSpeed((dist*CampaignHours)/time);

	movss	xmm0, DWORD PTR _dist$1[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	cvtsi2ss xmm1, DWORD PTR _time$2[ebp]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed

; 1228 : 			else

	jmp	SHORT $LN7@recalculat
$LN8@recalculat:

; 1229 : 				wp->SetWPSpeed(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed
$LN7@recalculat:

; 1230 : 		}
; 1231 : 		if (nw && !(nw->GetWPFlags() & WPF_TIME_LOCKED))

	cmp	DWORD PTR _nw$4[ebp], 0
	je	SHORT $LN6@recalculat
	mov	ecx, DWORD PTR _nw$4[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	jne	SHORT $LN6@recalculat

; 1232 : 			recalculate_waypoint(nw, minSpeed, maxSpeed);

	mov	ecx, DWORD PTR _maxSpeed$[ebp]
	push	ecx
	mov	edx, DWORD PTR _minSpeed$[ebp]
	push	edx
	mov	eax, DWORD PTR _nw$4[ebp]
	push	eax
	call	?recalculate_waypoint@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@recalculat
$LN6@recalculat:

; 1233 : 		else if (nw)

	cmp	DWORD PTR _nw$4[ebp], 0
	je	SHORT $LN2@recalculat

; 1234 : 		{
; 1235 : 			// Simply set Speed between nw and wp
; 1236 : 			dist = wp->DistanceTo(nw);

	mov	ecx, DWORD PTR _nw$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?DistanceTo@WayPointClass@@QAEMPAV1@@Z	; WayPointClass::DistanceTo
	fstp	DWORD PTR _dist$1[ebp]

; 1237 : 			time = nw->GetWPArrivalTime() - wp->GetWPDepartureTime();

	mov	ecx, DWORD PTR _nw$4[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	esi, eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	sub	esi, eax
	mov	DWORD PTR _time$2[ebp], esi

; 1238 : 			if (time != 0)

	je	SHORT $LN3@recalculat

; 1239 : 				nw->SetWPSpeed((dist*CampaignHours)/time);

	movss	xmm0, DWORD PTR _dist$1[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	cvtsi2ss xmm1, DWORD PTR _time$2[ebp]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _nw$4[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed

; 1240 : 			else

	jmp	SHORT $LN2@recalculat
$LN3@recalculat:

; 1241 : 				nw->SetWPSpeed(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _nw$4[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed
$LN2@recalculat:

; 1242 : 		}
; 1243 : 	}
; 1244 : 	else

	jmp	SHORT $LN1@recalculat
$LN12@recalculat:

; 1245 : 		recalculate_waypoint(wp, minSpeed, maxSpeed);

	mov	edx, DWORD PTR _maxSpeed$[ebp]
	push	edx
	mov	eax, DWORD PTR _minSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?recalculate_waypoint@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint
	add	esp, 12					; 0000000cH
$LN1@recalculat:

; 1246 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z ENDP ; recalculate_waypoint_list
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_flt$1 = -16						; size = 4
_lock$2 = -12						; size = 4
_wp$ = -8						; size = 4
_w$3 = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChangeTOSLockCB@@YAXJFPAVC_Base@@@Z PROC		; ChangeTOSLockCB

; 1098 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1099 : 	WayPointClass
; 1100 : 			*wp;
; 1101 : 
; 1102 : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1103 : 
; 1104 : 	// JB 010109 right clicks affect all waypoints
; 1105 : 	if(hittype == C_TYPE_RMOUSEDOWN)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 54					; 00000036H
	jne	$LN10@ChangeTOSL

; 1106 : 	{
; 1107 : 		WayPointClass *w;
; 1108 : 		int lock = wp->GetWPFlags () & WPF_TIME_LOCKED;

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	mov	DWORD PTR _lock$2[ebp], eax

; 1109 : 		FlightClass *flt = (Flight) vuDatabase->Find(gActiveFlightID);

	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$1[ebp], eax

; 1110 : 		w = flt->GetFirstUnitWP ();

	mov	ecx, DWORD PTR _flt$1[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$3[ebp], eax
$LN9@ChangeTOSL:

; 1111 : 		while (w)

	cmp	DWORD PTR _w$3[ebp], 0
	je	SHORT $LN8@ChangeTOSL

; 1112 : 		{
; 1113 : 			if (lock)

	cmp	DWORD PTR _lock$2[ebp], 0
	je	SHORT $LN7@ChangeTOSL

; 1114 : 				w->UnSetWPFlag (WPF_TIME_LOCKED);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _w$3[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag

; 1115 : 			else

	jmp	SHORT $LN6@ChangeTOSL
$LN7@ChangeTOSL:

; 1116 : 				w->SetWPFlag (WPF_TIME_LOCKED);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _w$3[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag
$LN6@ChangeTOSL:

; 1117 : 
; 1118 : 			w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$3[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$3[ebp], eax

; 1119 : 		}

	jmp	SHORT $LN9@ChangeTOSL
$LN8@ChangeTOSL:

; 1120 : 
; 1121 : 		if (lock)

	cmp	DWORD PTR _lock$2[ebp], 0
	je	SHORT $LN5@ChangeTOSL

; 1122 : 			control->SetState(0);

	push	0
	mov	eax, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 1123 : 		else

	jmp	SHORT $LN4@ChangeTOSL
$LN5@ChangeTOSL:

; 1124 : 			control->SetState(1);

	push	1
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN4@ChangeTOSL:

; 1125 : 
; 1126 : 		return;

	jmp	SHORT $LN11@ChangeTOSL
$LN10@ChangeTOSL:

; 1127 : 	}
; 1128 : 	// JB 010109
; 1129 : 
; 1130 : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 52					; 00000034H
	je	SHORT $LN3@ChangeTOSL

; 1131 : 		return;

	jmp	SHORT $LN11@ChangeTOSL
$LN3@ChangeTOSL:

; 1132 : 
; 1133 : 	if (wp->GetWPFlags () & WPF_TIME_LOCKED)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	SHORT $LN2@ChangeTOSL

; 1134 : 		wp->UnSetWPFlag (WPF_TIME_LOCKED);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag

; 1135 : 	else

	jmp	SHORT $LN11@ChangeTOSL
$LN2@ChangeTOSL:

; 1136 : 		wp->SetWPFlag (WPF_TIME_LOCKED);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag
$LN11@ChangeTOSL:

; 1137 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangeTOSLockCB@@YAXJFPAVC_Base@@@Z ENDP		; ChangeTOSLockCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_flt$1 = -16						; size = 4
_lock$2 = -12						; size = 4
_wp$ = -8						; size = 4
_w$3 = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChangeAirspeedLockCB@@YAXJFPAVC_Base@@@Z PROC		; ChangeAirspeedLockCB

; 1052 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1053 : 	WayPointClass
; 1054 : 			*wp;
; 1055 : 
; 1056 : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1057 : 
; 1058 : 	// JB 010109 right clicks affect all waypoints
; 1059 : 	if(hittype == C_TYPE_RMOUSEDOWN)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 54					; 00000036H
	jne	$LN10@ChangeAirs

; 1060 : 	{
; 1061 : 		WayPointClass *w;
; 1062 : 		int lock = wp->GetWPFlags () & WPF_SPEED_LOCKED;

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32768				; 00008000H
	mov	DWORD PTR _lock$2[ebp], eax

; 1063 : 		FlightClass *flt = (Flight) vuDatabase->Find(gActiveFlightID);

	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$1[ebp], eax

; 1064 : 		w = flt->GetFirstUnitWP ();

	mov	ecx, DWORD PTR _flt$1[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$3[ebp], eax
$LN9@ChangeAirs:

; 1065 : 		while (w)

	cmp	DWORD PTR _w$3[ebp], 0
	je	SHORT $LN8@ChangeAirs

; 1066 : 		{
; 1067 : 			if (lock)

	cmp	DWORD PTR _lock$2[ebp], 0
	je	SHORT $LN7@ChangeAirs

; 1068 : 				w->UnSetWPFlag (WPF_SPEED_LOCKED);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _w$3[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag

; 1069 : 			else

	jmp	SHORT $LN6@ChangeAirs
$LN7@ChangeAirs:

; 1070 : 				w->SetWPFlag (WPF_SPEED_LOCKED);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _w$3[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag
$LN6@ChangeAirs:

; 1071 : 
; 1072 : 			w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$3[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$3[ebp], eax

; 1073 : 		}

	jmp	SHORT $LN9@ChangeAirs
$LN8@ChangeAirs:

; 1074 : 
; 1075 : 		if (lock)

	cmp	DWORD PTR _lock$2[ebp], 0
	je	SHORT $LN5@ChangeAirs

; 1076 : 			control->SetState(0);

	push	0
	mov	eax, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 1077 : 		else

	jmp	SHORT $LN4@ChangeAirs
$LN5@ChangeAirs:

; 1078 : 			control->SetState(1);

	push	1
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN4@ChangeAirs:

; 1079 : 
; 1080 : 		return;

	jmp	SHORT $LN11@ChangeAirs
$LN10@ChangeAirs:

; 1081 : 	}
; 1082 : 	// JB 010109
; 1083 : 
; 1084 : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 52					; 00000034H
	je	SHORT $LN3@ChangeAirs

; 1085 : 		return;

	jmp	SHORT $LN11@ChangeAirs
$LN3@ChangeAirs:

; 1086 : 
; 1087 : 	if (wp->GetWPFlags () & WPF_SPEED_LOCKED)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@ChangeAirs

; 1088 : 		wp->UnSetWPFlag (WPF_SPEED_LOCKED);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?UnSetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::UnSetWPFlag

; 1089 : 	else

	jmp	SHORT $LN11@ChangeAirs
$LN2@ChangeAirs:

; 1090 : 		wp->SetWPFlag (WPF_SPEED_LOCKED);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag
$LN11@ChangeAirs:

; 1091 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangeAirspeedLockCB@@YAXJFPAVC_Base@@@Z ENDP		; ChangeAirspeedLockCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 8
_time$ = -16						; size = 4
_un$2 = -12						; size = 4
_clk$ = -8						; size = 4
_wp$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChangePatrolCB@@YAXJFPAVC_Base@@@Z PROC		; ChangePatrolCB

; 1008 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1009 : 	C_Clock			*clk;
; 1010 : 	CampaignTime	time;
; 1011 : 	WayPoint		wp;
; 1012 : 
; 1013 : 	if(hittype != C_TYPE_LMOUSEUP && hittype != C_TYPE_REPEAT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN7@ChangePatr
	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 70					; 00000046H
	je	SHORT $LN7@ChangePatr

; 1014 : 		return;

	jmp	$LN8@ChangePatr
$LN7@ChangePatr:

; 1015 : 
; 1016 : 	clk=(C_Clock*)control->Parent_->FindControl(control->GetUserNumber(0));

	push	0
	mov	ecx, DWORD PTR _control$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	push	eax
	mov	edx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _clk$[ebp], eax

; 1017 : 	if(clk)

	cmp	DWORD PTR _clk$[ebp], 0
	je	$LN8@ChangePatr

; 1018 : 	{
; 1019 : 		ChangeTimeCB(ID,hittype,control);

	mov	eax, DWORD PTR _control$[ebp]
	push	eax
	movzx	ecx, WORD PTR _hittype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	call	?ChangeTimeCB@@YAXJFPAVC_Base@@@Z	; ChangeTimeCB
	add	esp, 12					; 0000000cH

; 1020 : 
; 1021 : 		wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 1022 : 		if (wp && !(wp->GetWPFlags() & WPF_REPEAT))

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN5@ChangePatr
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	jne	SHORT $LN5@ChangePatr

; 1023 : 		{
; 1024 : 			if (wp->GetNextWP())		// 2001-11-17 M.N. this crashes in really rare conditions

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	SHORT $LN5@ChangePatr

; 1025 : 				wp = wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _wp$[ebp], eax
$LN5@ChangePatr:

; 1026 : 		}
; 1027 : 		if (!wp && !(wp->GetWPFlags() & WPF_REPEAT))

	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN3@ChangePatr
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	jne	SHORT $LN3@ChangePatr

; 1028 : 			return;

	jmp	$LN8@ChangePatr
$LN3@ChangePatr:

; 1029 : 
; 1030 : 		time = clk->GetTime() * VU_TICS_PER_SECOND;

	mov	ecx, DWORD PTR _clk$[ebp]
	call	?GetTime@C_Clock@@QAEJXZ		; C_Clock::GetTime
	imul	eax, 1000				; 000003e8H
	mov	DWORD PTR _time$[ebp], eax

; 1031 : 		wp->SetWPStationTime(time);

	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPStationTime@WayPointClass@@QAEXK@Z ; WayPointClass::SetWPStationTime

; 1032 : 		recalculate_waypoints(wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4

; 1033 : 
; 1034 : 		if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	edx, 524288				; 00080000H
	je	SHORT $LN8@ChangePatr

; 1035 : 		{
; 1036 : 			Flight	un = (Flight)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$2[ebp], eax

; 1037 : 			if(un)

	cmp	DWORD PTR _un$2[ebp], 0
	je	SHORT $LN8@ChangePatr

; 1038 : 			{
; 1039 : 				fixup_unit (un);

	mov	eax, DWORD PTR _un$2[ebp]
	push	eax
	call	?fixup_unit@@YAXPAVUnitClass@@@Z	; fixup_unit
	add	esp, 4

; 1040 : 				gGps->Update();

	mov	ecx, DWORD PTR ?gGps@@3PAVGlobalPositioningSystem@@A ; gGps
	call	?Update@GlobalPositioningSystem@@QAEXXZ	; GlobalPositioningSystem::Update

; 1041 : 				gMapMgr->DrawMap();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?DrawMap@C_Map@@QAEXXZ			; C_Map::DrawMap
$LN8@ChangePatr:

; 1042 : 			}
; 1043 : 		}
; 1044 : 	}
; 1045 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangePatrolCB@@YAXJFPAVC_Base@@@Z ENDP		; ChangePatrolCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
tv157 = -20						; size = 4
_speed$ = -16						; size = 4
_dir$ = -12						; size = 4
_wp$ = -8						; size = 4
_value$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?ChangeAltCB@@YAXJFPAVC_Base@@@Z PROC			; ChangeAltCB

; 946  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 947  : 	int				value=0,dir=0;

	mov	DWORD PTR _value$[ebp], 0
	mov	DWORD PTR _dir$[ebp], 0

; 948  : 	WayPointClass	*wp=NULL;

	mov	DWORD PTR _wp$[ebp], 0

; 949  : 	float			speed=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _speed$[ebp], xmm0

; 950  : 
; 951  : 	if ((hittype != C_TYPE_LMOUSEUP) &&	(hittype != C_TYPE_REPEAT) && (hittype != C_TYPE_LMOUSEDBLCLK))

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN18@ChangeAltC
	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 70					; 00000046H
	je	SHORT $LN18@ChangeAltC
	movsx	edx, WORD PTR _hittype$[ebp]
	cmp	edx, 53					; 00000035H
	je	SHORT $LN18@ChangeAltC

; 952  : 		return;

	jmp	$LN19@ChangeAltC
$LN18@ChangeAltC:

; 953  : 
; 954  : 	if(ID == ALT_INC)

	cmp	DWORD PTR _ID$[ebp], 13116		; 0000333cH
	jne	SHORT $LN17@ChangeAltC

; 955  : 		dir = 1;

	mov	DWORD PTR _dir$[ebp], 1
	jmp	SHORT $LN15@ChangeAltC
$LN17@ChangeAltC:

; 956  : 	else if(ID == ALT_DECR)

	cmp	DWORD PTR _ID$[ebp], 13117		; 0000333dH
	jne	SHORT $LN15@ChangeAltC

; 957  : 		dir = -1;

	mov	DWORD PTR _dir$[ebp], -1
$LN15@ChangeAltC:

; 958  : 
; 959  : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 960  : 	// 2002-03-15 ADDED BY S.G. Seen wp as NULL (bugtrack #1014). If that happens, return right away
; 961  : 	if (!wp)

	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN14@ChangeAltC

; 962  : 		return;

	jmp	$LN19@ChangeAltC
$LN14@ChangeAltC:

; 963  : 
; 964  : 	value = wp->GetWPAltitude();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	DWORD PTR _value$[ebp], eax

; 965  : 	speed = get_air_speed(wp->GetWPSpeed()*KM_TO_NM, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR tv157[ebp]
	mulss	xmm0, DWORD PTR __real@3f0a35e2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 8
	fstp	DWORD PTR _speed$[ebp]

; 966  : 
; 967  : 	if (value < 1000)

	cmp	DWORD PTR _value$[ebp], 1000		; 000003e8H
	jge	SHORT $LN13@ChangeAltC

; 968  : 		value += 100 * dir;

	mov	ecx, DWORD PTR _dir$[ebp]
	imul	ecx, 100				; 00000064H
	add	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], ecx
	jmp	SHORT $LN10@ChangeAltC
$LN13@ChangeAltC:

; 969  : 	else if (value < 40000)

	cmp	DWORD PTR _value$[ebp], 40000		; 00009c40H
	jge	SHORT $LN11@ChangeAltC

; 970  : 		value += 500 * dir;

	mov	edx, DWORD PTR _dir$[ebp]
	imul	edx, 500				; 000001f4H
	add	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], edx

; 971  : 	else

	jmp	SHORT $LN10@ChangeAltC
$LN11@ChangeAltC:

; 972  : 		value += 1000 * dir;

	mov	eax, DWORD PTR _dir$[ebp]
	imul	eax, 1000				; 000003e8H
	add	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], eax
$LN10@ChangeAltC:

; 973  : 
; 974  : 	if (value < 100)

	cmp	DWORD PTR _value$[ebp], 100		; 00000064H
	jge	SHORT $LN9@ChangeAltC

; 975  : 		value = 100;

	mov	DWORD PTR _value$[ebp], 100		; 00000064H
	jmp	SHORT $LN7@ChangeAltC
$LN9@ChangeAltC:

; 976  : 	else if (value > 80000)

	cmp	DWORD PTR _value$[ebp], 80000		; 00013880H
	jle	SHORT $LN7@ChangeAltC

; 977  : 		value = 80000;

	mov	DWORD PTR _value$[ebp], 80000		; 00013880H
$LN7@ChangeAltC:

; 978  : 
; 979  : 	if (wp->GetWPAction() == WP_TAKEOFF || wp->GetWPAction() == WP_LAND)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	je	SHORT $LN5@ChangeAltC
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	jne	SHORT $LN6@ChangeAltC
$LN5@ChangeAltC:

; 980  : 		value = 0;

	mov	DWORD PTR _value$[ebp], 0
$LN6@ChangeAltC:

; 981  : 
; 982  : 	wp->SetWPAltitude(value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPAltitude@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAltitude

; 983  : 
; 984  : 	if (wp->GetWPFlags () & WPF_SPEED_LOCKED)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@ChangeAltC

; 985  : 	{
; 986  : 		// Keep IAS constant
; 987  : 		speed = get_ground_speed(speed, value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?get_ground_speed@@YAMMH@Z		; get_ground_speed
	add	esp, 8
	fstp	DWORD PTR _speed$[ebp]

; 988  : 		wp->SetWPSpeed (speed*NM_TO_KM);

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR __real@3fed1671
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed

; 989  : 		recalculate_waypoints(wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4

; 990  : 	}
; 991  : 	else

	jmp	SHORT $LN3@ChangeAltC
$LN4@ChangeAltC:

; 992  : 		refresh_waypoint(wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?refresh_waypoint@@YAXPAVWayPointClass@@@Z ; refresh_waypoint
	add	esp, 4
$LN3@ChangeAltC:

; 993  : 
; 994  : 	// KCK HACK: Not sure how to just refresh this waypoint - so, I'm going to only rebuild the list 
; 995  : 	// once in a while for repeat, or on mouseup.
; 996  : 	if (hittype == C_TYPE_LMOUSEUP || !(rand()%4))

	movsx	edx, WORD PTR _hittype$[ebp]
	cmp	edx, 52					; 00000034H
	je	SHORT $LN1@ChangeAltC
	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN21@ChangeAltC
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN21@ChangeAltC:
	test	eax, eax
	jne	SHORT $LN2@ChangeAltC
$LN1@ChangeAltC:

; 997  : 	{
; 998  : 		// Rebuild the Z waypoint list (would be nice to just refresh)
; 999  : 		gMapMgr->SetCurrentWaypointList(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?SetCurrentWaypointList@C_Map@@QAEHVVU_ID@@@Z ; C_Map::SetCurrentWaypointList
$LN2@ChangeAltC:
$LN19@ChangeAltC:

; 1000 : 	}
; 1001 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangeAltCB@@YAXJFPAVC_Base@@@Z ENDP			; ChangeAltCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
tv146 = -20						; size = 4
_un$2 = -16						; size = 4
_speed$ = -12						; size = 4
_dir$ = -8						; size = 4
_wp$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?ChangeAirspeedCB@@YAXJFPAVC_Base@@@Z PROC		; ChangeAirspeedCB

; 902  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 903  : 	WayPointClass	*wp=NULL;

	mov	DWORD PTR _wp$[ebp], 0

; 904  : 	float			speed=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _speed$[ebp], xmm0

; 905  : 	int				dir=0;

	mov	DWORD PTR _dir$[ebp], 0

; 906  : 
; 907  : 	if ((hittype != C_TYPE_LMOUSEUP) &&	(hittype != C_TYPE_REPEAT) && (hittype != C_TYPE_LMOUSEDBLCLK))

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN8@ChangeAirs
	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 70					; 00000046H
	je	SHORT $LN8@ChangeAirs
	movsx	edx, WORD PTR _hittype$[ebp]
	cmp	edx, 53					; 00000035H
	je	SHORT $LN8@ChangeAirs

; 908  : 		return;

	jmp	$LN9@ChangeAirs
$LN8@ChangeAirs:

; 909  : 
; 910  : 	if (ID == AIRSPEED_DECR)

	cmp	DWORD PTR _ID$[ebp], 13115		; 0000333bH
	jne	SHORT $LN7@ChangeAirs

; 911  : 		dir = -1;

	mov	DWORD PTR _dir$[ebp], -1
	jmp	SHORT $LN5@ChangeAirs
$LN7@ChangeAirs:

; 912  : 	else if (ID == AIRSPEED_INC)

	cmp	DWORD PTR _ID$[ebp], 13114		; 0000333aH
	jne	SHORT $LN5@ChangeAirs

; 913  : 		dir = 1;

	mov	DWORD PTR _dir$[ebp], 1
$LN5@ChangeAirs:

; 914  : 
; 915  : 	wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 916  : 	if (wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN1@ChangeAirs

; 917  : 	{
; 918  : 		if (wp->GetPrevWP())

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	test	eax, eax
	je	SHORT $LN3@ChangeAirs

; 919  : 		{
; 920  : 			speed = wp->GetWPSpeed() + 10 * dir;

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv146[ebp]
	movss	xmm0, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR _dir$[ebp]
	imul	eax, 10					; 0000000aH
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	movss	DWORD PTR _speed$[ebp], xmm0

; 921  : 			wp->SetWPFlag (WPF_SPEED_LOCKED);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag

; 922  : 			wp->SetWPSpeed (speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed

; 923  : 			recalculate_waypoints (wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4
$LN3@ChangeAirs:

; 924  : 		}
; 925  : 
; 926  : 		if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)

	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	edx, 524288				; 00080000H
	je	SHORT $LN1@ChangeAirs

; 927  : 		{
; 928  : 			Flight	un;
; 929  : 
; 930  : 			un = (Flight)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$2[ebp], eax

; 931  : 			if(un)

	cmp	DWORD PTR _un$2[ebp], 0
	je	SHORT $LN1@ChangeAirs

; 932  : 			{
; 933  : 				fixup_unit (un);

	mov	eax, DWORD PTR _un$2[ebp]
	push	eax
	call	?fixup_unit@@YAXPAVUnitClass@@@Z	; fixup_unit
	add	esp, 4

; 934  : 				gGps->Update();

	mov	ecx, DWORD PTR ?gGps@@3PAVGlobalPositioningSystem@@A ; gGps
	call	?Update@GlobalPositioningSystem@@QAEXXZ	; GlobalPositioningSystem::Update

; 935  : 				gMapMgr->DrawMap();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?DrawMap@C_Map@@QAEXXZ			; C_Map::DrawMap
$LN1@ChangeAirs:
$LN9@ChangeAirs:

; 936  : 			}
; 937  : 		}
; 938  : 	}
; 939  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangeAirspeedCB@@YAXJFPAVC_Base@@@Z ENDP		; ChangeAirspeedCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_unit$ = -20						; size = 4
_t$ = -16						; size = 4
_un$2 = -12						; size = 4
_clk$ = -8						; size = 4
_wp$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChangeTOSCB@@YAXJFPAVC_Base@@@Z PROC			; ChangeTOSCB

; 822  : void ChangeTOSCB(long ID,short hittype,C_Base *control){

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 823  : 	C_Clock *clk;
; 824  : 	long t; 
; 825  : 	WayPoint wp;
; 826  : 
; 827  : 	if ((hittype != C_TYPE_LMOUSEUP) &&	(hittype != C_TYPE_LMOUSEDBLCLK) &&	(hittype != C_TYPE_REPEAT))

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN5@ChangeTOSC
	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 53					; 00000035H
	je	SHORT $LN5@ChangeTOSC
	movsx	edx, WORD PTR _hittype$[ebp]
	cmp	edx, 70					; 00000046H
	je	SHORT $LN5@ChangeTOSC

; 828  : 		return;

	jmp	$LN6@ChangeTOSC
$LN5@ChangeTOSC:

; 829  : 
; 830  : 	clk=(C_Clock*)control->Parent_->FindControl(control->GetUserNumber(0));

	push	0
	mov	ecx, DWORD PTR _control$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	push	eax
	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _clk$[ebp], eax

; 831  : 	if(clk)

	cmp	DWORD PTR _clk$[ebp], 0
	je	$LN4@ChangeTOSC

; 832  : 	{
; 833  : 		ChangeTimeCB(ID,hittype,control);

	mov	ecx, DWORD PTR _control$[ebp]
	push	ecx
	movzx	edx, WORD PTR _hittype$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?ChangeTimeCB@@YAXJFPAVC_Base@@@Z	; ChangeTimeCB
	add	esp, 12					; 0000000cH

; 834  : 
; 835  : 		wp = get_current_waypoint ();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 836  : 		if (wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN3@ChangeTOSC

; 837  : 		{
; 838  : 			wp->SetWPFlag (WPF_TIME_LOCKED);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPFlag@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlag

; 839  : 			t = clk->GetTime() * VU_TICS_PER_SECOND;

	mov	ecx, DWORD PTR _clk$[ebp]
	call	?GetTime@C_Clock@@QAEJXZ		; C_Clock::GetTime
	imul	eax, 1000				; 000003e8H
	mov	DWORD PTR _t$[ebp], eax

; 840  : 			wp->SetWPTimes(t);

	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?SetWPTimes@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPTimes

; 841  : 			recalculate_waypoints(wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4
$LN3@ChangeTOSC:

; 842  : 		}
; 843  : 
; 844  : 		if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	eax, 524288				; 00080000H
	je	SHORT $LN4@ChangeTOSC

; 845  : 		{
; 846  : 			Flight	un;
; 847  : 			un = (Flight)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$2[ebp], eax

; 848  : 			if(un)

	cmp	DWORD PTR _un$2[ebp], 0
	je	SHORT $LN4@ChangeTOSC

; 849  : 			{
; 850  : 				fixup_unit (un);

	mov	ecx, DWORD PTR _un$2[ebp]
	push	ecx
	call	?fixup_unit@@YAXPAVUnitClass@@@Z	; fixup_unit
	add	esp, 4

; 851  : 				gGps->Update();

	mov	ecx, DWORD PTR ?gGps@@3PAVGlobalPositioningSystem@@A ; gGps
	call	?Update@GlobalPositioningSystem@@QAEXXZ	; GlobalPositioningSystem::Update

; 852  : 				gMapMgr->DrawMap();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?DrawMap@C_Map@@QAEXXZ			; C_Map::DrawMap
$LN4@ChangeTOSC:

; 853  : 			}
; 854  : 		}
; 855  : 	}
; 856  : 	//sfr: lets get the units owner of this waypoints
; 857  : 	Unit unit = static_cast<Unit>(vuDatabase->Find(gActiveFlightID));

	mov	edx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _unit$[ebp], eax

; 858  : 	unit->MakeWaypointsDirty();

	mov	ecx, DWORD PTR _unit$[ebp]
	call	?MakeWaypointsDirty@UnitClass@@QAEXXZ	; UnitClass::MakeWaypointsDirty
$LN6@ChangeTOSC:

; 859  : 
; 860  : /*	
; 861  : 	C_Clock *clk;
; 862  : 	long t; 
; 863  : 	WayPoint wp;
; 864  : 
; 865  : 	if ((hittype != C_TYPE_LMOUSEUP) &&	(hittype != C_TYPE_LMOUSEDBLCLK) &&	(hittype != C_TYPE_REPEAT))
; 866  : 		return;
; 867  : 
; 868  : 	clk=(C_Clock*)control->Parent_->FindControl(control->GetUserNumber(0));
; 869  : 	if(clk)
; 870  : 	{
; 871  : 		ChangeTimeCB(ID,hittype,control);
; 872  : 
; 873  : 		wp = get_current_waypoint ();
; 874  : 		if (wp)
; 875  : 		{
; 876  : 			wp->SetWPFlag (WPF_TIME_LOCKED);
; 877  : 			t = clk->GetTime() * VU_TICS_PER_SECOND;
; 878  : 			wp->SetWPTimes(t);
; 879  : 			recalculate_waypoints(wp);
; 880  : 		}
; 881  : 
; 882  : 		if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)
; 883  : 		{
; 884  : 			Flight	un;
; 885  : 			un = (Flight)vuDatabase->Find(gMapMgr->GetCurWPID());
; 886  : 			if(un)
; 887  : 			{
; 888  : 				fixup_unit (un);
; 889  : 				gGps->Update();
; 890  : 				gMapMgr->DrawMap();
; 891  : 			}
; 892  : 		}
; 893  : 	}
; 894  : 	*/
; 895  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangeTOSCB@@YAXJFPAVC_Base@@@Z ENDP			; ChangeTOSCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 8
$T2 = -36						; size = 8
_prevwp$ = -28						; size = 4
_i$ = -24						; size = 4
_win$ = -20						; size = 4
_Pkg$ = -16						; size = 4
_curflt$ = -12						; size = 4
_wp$ = -8						; size = 4
_flt$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?GotoFlightCB@@YAXJFPAVC_Base@@@Z PROC			; GotoFlightCB

; 756  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 757  : 	C_Window *win;
; 758  : 	WayPoint wp,prevwp=NULL;

	mov	DWORD PTR _prevwp$[ebp], 0

; 759  : 	Package Pkg;
; 760  : 	Flight flt,curflt;
; 761  : 	int i;
; 762  : 
; 763  : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN13@GotoFlight

; 764  : 		return;

	jmp	$LN14@GotoFlight
$LN13@GotoFlight:

; 765  : 
; 766  : 	ID=((C_ListBox*)control)->GetTextID();

	mov	ecx, DWORD PTR _control$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR _ID$[ebp], eax

; 767  : 
; 768  : 	win=gMainHandler->FindWindow(FLIGHT_PLAN_WIN);

	push	13000					; 000032c8H
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 769  : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN14@GotoFlight

; 770  : 	{
; 771  : 		flt=(Flight)vuDatabase->Find(gActiveFlightID);

	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 772  : 		if(flt == NULL)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN11@GotoFlight

; 773  : 			return;

	jmp	$LN14@GotoFlight
$LN11@GotoFlight:

; 774  : 
; 775  : 		if(flt->GetCampID() != ID)

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, DWORD PTR _ID$[ebp]
	je	SHORT $LN10@GotoFlight

; 776  : 		{
; 777  : 			Pkg=(Package)flt->GetUnitParent();

	mov	edx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax+1008]
	call	edx
	mov	DWORD PTR _Pkg$[ebp], eax

; 778  : 			if(Pkg)

	cmp	DWORD PTR _Pkg$[ebp], 0
	je	SHORT $LN9@GotoFlight

; 779  : 			{
; 780  : 				curflt=(Flight)Pkg->GetFirstUnitElement();

	mov	eax, DWORD PTR _Pkg$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Pkg$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	mov	DWORD PTR _curflt$[ebp], eax
$LN8@GotoFlight:

; 781  : 				while(curflt && curflt->GetCampID() != ID)

	cmp	DWORD PTR _curflt$[ebp], 0
	je	SHORT $LN7@GotoFlight
	mov	ecx, DWORD PTR _curflt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _curflt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, DWORD PTR _ID$[ebp]
	je	SHORT $LN7@GotoFlight

; 782  : 					curflt=(Flight)Pkg->GetNextUnitElement();

	mov	edx, DWORD PTR _Pkg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _Pkg$[ebp]
	mov	edx, DWORD PTR [eax+1000]
	call	edx
	mov	DWORD PTR _curflt$[ebp], eax
	jmp	SHORT $LN8@GotoFlight
$LN7@GotoFlight:

; 783  : 			}
; 784  : 			else

	jmp	SHORT $LN6@GotoFlight
$LN9@GotoFlight:

; 785  : 				curflt=NULL;

	mov	DWORD PTR _curflt$[ebp], 0
$LN6@GotoFlight:

; 786  : 			flt=curflt;

	mov	eax, DWORD PTR _curflt$[ebp]
	mov	DWORD PTR _flt$[ebp], eax
$LN10@GotoFlight:

; 787  : 		}
; 788  : 		if(!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN5@GotoFlight

; 789  : 			return;

	jmp	$LN14@GotoFlight
$LN5@GotoFlight:

; 790  : 
; 791  : 		if (gActiveFlightID != flt->Id())

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _flt$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	ecx, OFFSET ?gActiveFlightID@@3VVU_ID@@A ; gActiveFlightID
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@GotoFlight

; 792  : 		{
; 793  : 			gActiveFlightID=flt->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _flt$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, ecx
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, edx

; 794  : 			ValidateWayPoints(flt);

	mov	eax, DWORD PTR _flt$[ebp]
	push	eax
	call	?ValidateWayPoints@@YAXPAVFlightClass@@@Z ; ValidateWayPoints
	add	esp, 4
$LN4@GotoFlight:

; 795  : 		}
; 796  : 
; 797  : 		wp=flt->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _wp$[ebp], eax

; 798  : 		prevwp=wp;

	mov	ecx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _prevwp$[ebp], ecx

; 799  : 		i=1;

	mov	DWORD PTR _i$[ebp], 1
$LN3@GotoFlight:

; 800  : 		while(i < gActiveWPNum && wp)

	movsx	edx, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN2@GotoFlight
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN2@GotoFlight

; 801  : 		{
; 802  : 			prevwp=wp;

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _prevwp$[ebp], eax

; 803  : 			wp=wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _wp$[ebp], eax

; 804  : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 805  : 		}

	jmp	SHORT $LN3@GotoFlight
$LN2@GotoFlight:

; 806  : 		if(wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN14@GotoFlight

; 807  : 		{
; 808  : 			UpdateWaypointWindowInfo(win,wp,i, FALSE);

	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ; UpdateWaypointWindowInfo
	add	esp, 16					; 00000010H

; 809  : 			win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow

; 810  : 			gMainHandler->ShowWindow(win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?ShowWindow@C_Handler@@QAEHPAVC_Window@@@Z ; C_Handler::ShowWindow

; 811  : 			gMainHandler->WindowToFront(win);

	mov	eax, DWORD PTR _win$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?WindowToFront@C_Handler@@QAEXPAVC_Window@@@Z ; C_Handler::WindowToFront

; 812  : 			gActiveWPNum=static_cast<short>(i);

	mov	cx, WORD PTR _i$[ebp]
	mov	WORD PTR ?gActiveWPNum@@3FA, cx		; gActiveWPNum
$LN14@GotoFlight:

; 813  : 		}
; 814  : 	}
; 815  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GotoFlightCB@@YAXJFPAVC_Base@@@Z ENDP			; GotoFlightCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_mission$ = -20						; size = 4
_win$ = -16						; size = 4
_menu$ = -12						; size = 4
_lbox$ = -8						; size = 4
_i$ = -4						; size = 4
_flt$ = 8						; size = 4
?SetupFlightSpecificControls@@YAXPAVFlightClass@@@Z PROC ; SetupFlightSpecificControls

; 689  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 690  : 	C_PopupList		*menu;
; 691  : 	C_ListBox		*lbox;
; 692  : 	C_Window *win;
; 693  : 	int				i,mission;
; 694  : 
; 695  : 	if(!flt) // it is possible to this to be null... so avoid PJW

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN18@SetupFligh

; 696  : 		return;

	jmp	$LN19@SetupFligh
$LN18@SetupFligh:

; 697  : 
; 698  : 	mission = flt->GetUnitMission();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	DWORD PTR _mission$[ebp], eax

; 699  : 	win=gMainHandler->FindWindow(FLIGHT_PLAN_WIN);

	push	13000					; 000032c8H
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 700  : 	menu=gPopupMgr->GetMenu(STEERPOINT_POP);

	push	18198					; 00004716H
	mov	ecx, DWORD PTR ?gPopupMgr@@3PAVC_PopupMgr@@A ; gPopupMgr
	call	?GetMenu@C_PopupMgr@@QAEPAVC_PopupList@@J@Z ; C_PopupMgr::GetMenu
	mov	DWORD PTR _menu$[ebp], eax

; 701  : 
; 702  : 	// Setup our possible waypoint actions
; 703  : 	lbox = (C_ListBox *)win->FindControl(ACTION_LISTBOX);

	push	13048					; 000032f8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 704  : 	if (lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN17@SetupFligh

; 705  : 	{
; 706  : 		// KCK NOTE: Peter mentioned that this should eventually simply disable invalid
; 707  : 		// actions, not rebuild the whole thingy.
; 708  : 		lbox->RemoveAllItems();

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?RemoveAllItems@C_ListBox@@QAEXXZ	; C_ListBox::RemoveAllItems

; 709  : 		for (i=0; i<WP_LAST; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@SetupFligh
$LN15@SetupFligh:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN16@SetupFligh:
	cmp	DWORD PTR _i$[ebp], 50			; 00000032H
	jge	$LN17@SetupFligh

; 710  : 		{
; 711  : 			if (IsValidAction(mission,i) || g_bAnyWaypointTask)     //Wombat778 9-27-2003 added || g_bAnyWaypointTask to allow selection of all tasks 

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _mission$[ebp]
	push	eax
	call	?IsValidAction@@YAHHH@Z			; IsValidAction
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@SetupFligh
	movzx	ecx, BYTE PTR ?g_bAnyWaypointTask@@3_NA	; g_bAnyWaypointTask
	test	ecx, ecx
	je	SHORT $LN13@SetupFligh
$LN12@SetupFligh:

; 712  : 			{
; 713  : 				if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN11@SetupFligh

; 714  : 					lbox->AddItem(i+1,C_TYPE_ITEM,WPActStr[39]);

	mov	edx, 20					; 00000014H
	imul	edx, 39					; 00000027H
	add	edx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	edx
	push	50					; 00000032H
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 715  : 				else

	jmp	SHORT $LN10@SetupFligh
$LN11@SetupFligh:

; 716  : 					lbox->AddItem(i+1,C_TYPE_ITEM,WPActStr[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	ecx
	push	50					; 00000032H
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem
$LN10@SetupFligh:

; 717  : 				menu->SetItemFlagBitOff(i|0x200,C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	eax, DWORD PTR _i$[ebp]
	or	eax, 512				; 00000200H
	push	eax
	mov	ecx, DWORD PTR _menu$[ebp]
	call	?SetItemFlagBitOff@C_PopupList@@QAEXJJ@Z ; C_PopupList::SetItemFlagBitOff

; 718  : 			}
; 719  : 			else

	jmp	SHORT $LN9@SetupFligh
$LN13@SetupFligh:

; 720  : 			{
; 721  : 				menu->SetItemFlagBitOn(i|0x200,C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _i$[ebp]
	or	ecx, 512				; 00000200H
	push	ecx
	mov	ecx, DWORD PTR _menu$[ebp]
	call	?SetItemFlagBitOn@C_PopupList@@QAEXJJ@Z	; C_PopupList::SetItemFlagBitOn
$LN9@SetupFligh:

; 722  : 			}
; 723  : 		}

	jmp	$LN15@SetupFligh
$LN17@SetupFligh:

; 724  : 	}
; 725  : 
; 726  : 	// Setup our possible enroute actions
; 727  : 	lbox = (C_ListBox *)win->FindControl(ENR_ACTION_LISTBOX);

	push	13089					; 00003321H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 728  : 	if (lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN19@SetupFligh

; 729  : 	{
; 730  : 		lbox->RemoveAllItems();

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?RemoveAllItems@C_ListBox@@QAEXXZ	; C_ListBox::RemoveAllItems

; 731  : 		for (i=0; i<WP_LAST; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@SetupFligh
$LN6@SetupFligh:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@SetupFligh:
	cmp	DWORD PTR _i$[ebp], 50			; 00000032H
	jge	$LN19@SetupFligh

; 732  : 		{
; 733  : 			if (IsValidEnrouteAction(mission,i))

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mission$[ebp]
	push	ecx
	call	?IsValidEnrouteAction@@YAHHH@Z		; IsValidEnrouteAction
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@SetupFligh

; 734  : 			{
; 735  : 				if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN3@SetupFligh

; 736  : 					lbox->AddItem(i+1,C_TYPE_ITEM,WPActStr[39]);

	mov	edx, 20					; 00000014H
	imul	edx, 39					; 00000027H
	add	edx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	edx
	push	50					; 00000032H
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 737  : 				else

	jmp	SHORT $LN2@SetupFligh
$LN3@SetupFligh:

; 738  : 					lbox->AddItem(i+1,C_TYPE_ITEM,WPActStr[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, OFFSET ?WPActStr@@3PAY0BE@DA	; WPActStr
	push	ecx
	push	50					; 00000032H
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem
$LN2@SetupFligh:

; 739  : 				menu->SetItemFlagBitOff(i|0x100,C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	eax, DWORD PTR _i$[ebp]
	or	eax, 256				; 00000100H
	push	eax
	mov	ecx, DWORD PTR _menu$[ebp]
	call	?SetItemFlagBitOff@C_PopupList@@QAEXJJ@Z ; C_PopupList::SetItemFlagBitOff

; 740  : 			}
; 741  : 			else

	jmp	SHORT $LN1@SetupFligh
$LN4@SetupFligh:

; 742  : 			{
; 743  : 				menu->SetItemFlagBitOn(i|0x100,C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _i$[ebp]
	or	ecx, 256				; 00000100H
	push	ecx
	mov	ecx, DWORD PTR _menu$[ebp]
	call	?SetItemFlagBitOn@C_PopupList@@QAEXJJ@Z	; C_PopupList::SetItemFlagBitOn
$LN1@SetupFligh:

; 744  : 			}
; 745  : 		}

	jmp	$LN6@SetupFligh
$LN19@SetupFligh:

; 746  : 	}
; 747  : 
; 748  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetupFlightSpecificControls@@YAXPAVFlightClass@@@Z ENDP ; SetupFlightSpecificControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_prevwp$ = -20						; size = 4
_flt$ = -16						; size = 4
_win$ = -12						; size = 4
_i$ = -8						; size = 4
_wp$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?GotoNextWaypointCB@@YAXJFPAVC_Base@@@Z PROC		; GotoNextWaypointCB

; 610  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 611  : 	C_Window *win;
; 612  : 	Flight flt;
; 613  : 	WayPoint wp,prevwp;
; 614  : 	int i;
; 615  : 
; 616  : 	if (hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN7@GotoNextWa

; 617  : 		return;

	jmp	$LN8@GotoNextWa
$LN7@GotoNextWa:

; 618  : 
; 619  : 	if(gActiveFlightID == FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, OFFSET ?gActiveFlightID@@3VVU_ID@@A ; gActiveFlightID
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GotoNextWa

; 620  : 		return;

	jmp	$LN8@GotoNextWa
$LN6@GotoNextWa:

; 621  : 
; 622  : 	win=control->Parent_;

	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _win$[ebp], eax

; 623  : 
; 624  : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN8@GotoNextWa

; 625  : 	{
; 626  : 		flt=(Flight)FindUnit(gActiveFlightID);

	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	edx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _flt$[ebp], eax

; 627  : 		if(flt == NULL)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN4@GotoNextWa

; 628  : 			return;

	jmp	$LN8@GotoNextWa
$LN4@GotoNextWa:

; 629  : 
; 630  : 		wp=flt->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _wp$[ebp], eax

; 631  : 		i=0;

	mov	DWORD PTR _i$[ebp], 0

; 632  : 		prevwp=wp;

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _prevwp$[ebp], eax
$LN3@GotoNextWa:

; 633  : 		while(i < gActiveWPNum && wp)

	movsx	ecx, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN2@GotoNextWa
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN2@GotoNextWa

; 634  : 		{
; 635  : 			prevwp=wp;

	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _prevwp$[ebp], edx

; 636  : 			wp=wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _wp$[ebp], eax

; 637  : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 638  : 		}

	jmp	SHORT $LN3@GotoNextWa
$LN2@GotoNextWa:

; 639  : 		if(wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN8@GotoNextWa

; 640  : 		{
; 641  : 			gActiveWPNum++;

	mov	cx, WORD PTR ?gActiveWPNum@@3FA		; gActiveWPNum
	add	cx, 1
	mov	WORD PTR ?gActiveWPNum@@3FA, cx		; gActiveWPNum

; 642  : 			UpdateWaypointWindowInfo(win,wp,gActiveWPNum);

	push	1
	movsx	edx, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	push	edx
	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ; UpdateWaypointWindowInfo
	add	esp, 16					; 00000010H

; 643  : 			win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN8@GotoNextWa:

; 644  : 		}
; 645  : 	}
; 646  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GotoNextWaypointCB@@YAXJFPAVC_Base@@@Z ENDP		; GotoNextWaypointCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_prevwp$ = -20						; size = 4
_flt$ = -16						; size = 4
_win$ = -12						; size = 4
_i$ = -8						; size = 4
_wp$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?GotoPrevWaypointCB@@YAXJFPAVC_Base@@@Z PROC		; GotoPrevWaypointCB

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 569  : 	C_Window *win;
; 570  : 	Flight flt;
; 571  : 	WayPoint wp,prevwp;
; 572  : 	int i;
; 573  : 
; 574  : 	if (hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN8@GotoPrevWa

; 575  : 		return;

	jmp	$LN9@GotoPrevWa
$LN8@GotoPrevWa:

; 576  : 
; 577  : 	if(gActiveFlightID == FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, OFFSET ?gActiveFlightID@@3VVU_ID@@A ; gActiveFlightID
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@GotoPrevWa

; 578  : 		return;

	jmp	$LN9@GotoPrevWa
$LN7@GotoPrevWa:

; 579  : 
; 580  : 	if(gActiveWPNum < 2)

	movsx	edx, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	cmp	edx, 2
	jge	SHORT $LN6@GotoPrevWa

; 581  : 		return;

	jmp	$LN9@GotoPrevWa
$LN6@GotoPrevWa:

; 582  : 
; 583  : 	win=control->Parent_;

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _win$[ebp], ecx

; 584  : 
; 585  : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN9@GotoPrevWa

; 586  : 	{
; 587  : 		gActiveWPNum--;

	mov	dx, WORD PTR ?gActiveWPNum@@3FA		; gActiveWPNum
	sub	dx, 1
	mov	WORD PTR ?gActiveWPNum@@3FA, dx		; gActiveWPNum

; 588  : 
; 589  : 		flt=(Flight)FindUnit(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _flt$[ebp], eax

; 590  : 		if(flt == NULL) return;

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN4@GotoPrevWa
	jmp	SHORT $LN9@GotoPrevWa
$LN4@GotoPrevWa:

; 591  : 
; 592  : 		wp=flt->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _wp$[ebp], eax

; 593  : 		i=1;

	mov	DWORD PTR _i$[ebp], 1

; 594  : 		prevwp=wp;

	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _prevwp$[ebp], edx
$LN3@GotoPrevWa:

; 595  : 		while(i < gActiveWPNum && wp)

	movsx	eax, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@GotoPrevWa
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN2@GotoPrevWa

; 596  : 		{
; 597  : 			prevwp=wp;

	mov	ecx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _prevwp$[ebp], ecx

; 598  : 			wp=wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _wp$[ebp], eax

; 599  : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 600  : 		}

	jmp	SHORT $LN3@GotoPrevWa
$LN2@GotoPrevWa:

; 601  : 		if(wp)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN9@GotoPrevWa

; 602  : 		{
; 603  : 			UpdateWaypointWindowInfo(win,wp,i);

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	call	?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ; UpdateWaypointWindowInfo
	add	esp, 16					; 00000010H

; 604  : 			win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN9@GotoPrevWa:

; 605  : 		}
; 606  : 	}
; 607  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GotoPrevWaypointCB@@YAXJFPAVC_Base@@@Z ENDP		; GotoPrevWaypointCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_tm$ = -164						; size = 4
tv739 = -160						; size = 4
tv750 = -156						; size = 4
tv192 = -152						; size = 4
_speed$1 = -148						; size = 4
_errors$ = -144						; size = 4
_alt_delta$ = -140					; size = 4
_clk$ = -136						; size = 4
_ebox$ = -132						; size = 4
_curflt$ = -128						; size = 4
_ispeed$ = -124						; size = 4
_prev_wp$ = -120					; size = 4
_Pkg$ = -116						; size = 4
_txt$ = -112						; size = 4
_flt$ = -108						; size = 4
_btn$ = -104						; size = 4
_lbox$ = -100						; size = 4
_buffer$ = -96						; size = 90
__$ArrayPad$ = -4					; size = 4
_win$ = 8						; size = 4
_wp$ = 12						; size = 4
_wpnum$ = 16						; size = 4
_callsign_update$ = 20					; size = 4
?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z PROC ; UpdateWaypointWindowInfo

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 346  : 	long ispeed,errors;
; 347  : 	long alt_delta;
; 348  : 	CampaignTime tm;
; 349  : 	C_Text *txt;
; 350  : 	C_EditBox *ebox;
; 351  : 	C_ListBox *lbox;
; 352  : 	C_Button *btn;
; 353  : 	C_Clock *clk;
; 354  : 	Package Pkg;
; 355  : 	Flight flt,curflt;
; 356  : 	WayPointClass *prev_wp;
; 357  : 	_TCHAR buffer[90];
; 358  : 
; 359  : 	flt=(Flight)vuDatabase->Find(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 360  : 	if(!win || !wp || !flt)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN50@UpdateWayp
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN50@UpdateWayp
	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN51@UpdateWayp
$LN50@UpdateWayp:

; 361  : 		return;

	jmp	$LN52@UpdateWayp
$LN51@UpdateWayp:

; 362  : 
; 363  : 	SetSteerPointValues(win, wp, wpnum);

	mov	edx, DWORD PTR _wpnum$[ebp]
	push	edx
	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z ; SetSteerPointValues
	add	esp, 12					; 0000000cH

; 364  : 	RefreshActionClusters(wp->GetWPAction(),win);

	mov	edx, DWORD PTR _win$[ebp]
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	push	eax
	call	?RefreshActionClusters@@YAXHPAVC_Window@@@Z ; RefreshActionClusters
	add	esp, 8

; 365  : 
; 366  : 	prev_wp = wp->GetPrevWP ();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _prev_wp$[ebp], eax

; 367  : 
; 368  : 	btn = (C_Button *) win->FindControl (PREV_STPT);

	push	13035					; 000032ebH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _btn$[ebp], eax

; 369  : 	if (prev_wp)

	cmp	DWORD PTR _prev_wp$[ebp], 0
	je	SHORT $LN49@UpdateWayp

; 370  : 		btn->SetFlagBitOff (C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	eax, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 371  : 	else

	jmp	SHORT $LN48@UpdateWayp
$LN49@UpdateWayp:

; 372  : 		btn->SetFlagBitOn (C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN48@UpdateWayp:

; 373  : 
; 374  : 	btn = (C_Button *) win->FindControl (NEXT_STPT);

	push	13036					; 000032ecH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _btn$[ebp], eax

; 375  : 	if (wp->GetNextWP ())

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	SHORT $LN47@UpdateWayp

; 376  : 		btn->SetFlagBitOff (C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 377  : 	else

	jmp	SHORT $LN46@UpdateWayp
$LN47@UpdateWayp:

; 378  : 		btn->SetFlagBitOn (C_BIT_INVISIBLE);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN46@UpdateWayp:

; 379  : 
; 380  : 	gActiveWPNum=static_cast<short>(wpnum);

	mov	cx, WORD PTR _wpnum$[ebp]
	mov	WORD PTR ?gActiveWPNum@@3FA, cx		; gActiveWPNum

; 381  : 
; 382  : 	txt=(C_Text *)win->FindControl(FLIGHT_TITLE);

	push	18040					; 00004678H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 383  : 	if(txt && flt->GetUnitParent())

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN45@UpdateWayp
	mov	edx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax+1008]
	call	edx
	test	eax, eax
	je	SHORT $LN45@UpdateWayp

; 384  : 	{
; 385  : 		_stprintf(buffer,"%s %1d",gStringMgr->GetString(TXT_PKG),((Package)flt->GetUnitParent())->GetCampID());

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR tv192[ebp], eax
	mov	ecx, DWORD PTR tv192[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv192[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	push	181					; 000000b5H
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	push	OFFSET ??_C@_06LFBINJ@?$CFs?5?$CF1d?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 386  : 		txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
$LN45@UpdateWayp:

; 387  : 	}
; 388  : 
; 389  : 	btn = (C_Button *) win->FindControl (DELETE_WAYPOINT);

	push	40101					; 00009ca5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _btn$[ebp], eax

; 390  : 	if (btn)

	cmp	DWORD PTR _btn$[ebp], 0
	je	SHORT $LN44@UpdateWayp

; 391  : 		btn->SetCallback(DeleteWPCB);

	push	OFFSET ?DeleteWPCB@@YAXJFPAVC_Base@@@Z	; DeleteWPCB
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN44@UpdateWayp:

; 392  : 
; 393  : 	if (callsign_update)

	cmp	DWORD PTR _callsign_update$[ebp], 0
	je	$LN42@UpdateWayp

; 394  : 	{
; 395  : 		lbox=(C_ListBox*)win->FindControl(LID_FLIGHT_CALLSIGN);

	push	13513					; 000034c9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 396  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN42@UpdateWayp

; 397  : 		{
; 398  : 			lbox->RemoveAllItems();

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?RemoveAllItems@C_ListBox@@QAEXXZ	; C_ListBox::RemoveAllItems

; 399  : 			Pkg=(Package)flt->GetUnitParent();

	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	mov	DWORD PTR _Pkg$[ebp], eax

; 400  : 			if(Pkg)

	cmp	DWORD PTR _Pkg$[ebp], 0
	je	SHORT $LN41@UpdateWayp

; 401  : 			{
; 402  : 				curflt=(Flight)Pkg->GetFirstUnitElement();

	mov	ecx, DWORD PTR _Pkg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _Pkg$[ebp]
	mov	eax, DWORD PTR [edx+996]
	call	eax
	mov	DWORD PTR _curflt$[ebp], eax
$LN40@UpdateWayp:

; 403  : 				while(curflt)

	cmp	DWORD PTR _curflt$[ebp], 0
	je	SHORT $LN39@UpdateWayp

; 404  : 				{
; 405  : 					GetCallsign(curflt,buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curflt$[ebp]
	push	edx
	call	?GetCallsign@@YAXPAVFlightClass@@PAD@Z	; GetCallsign
	add	esp, 8

; 406  : 					lbox->AddItem(curflt->GetCampID(),C_TYPE_ITEM,buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	50					; 00000032H
	mov	ecx, DWORD PTR _curflt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _curflt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 407  : 					curflt=(Flight)Pkg->GetNextUnitElement();

	mov	edx, DWORD PTR _Pkg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _Pkg$[ebp]
	mov	edx, DWORD PTR [eax+1000]
	call	edx
	mov	DWORD PTR _curflt$[ebp], eax

; 408  : 				}

	jmp	SHORT $LN40@UpdateWayp
$LN39@UpdateWayp:

; 409  : 				lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	eax, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 410  : 			}
; 411  : 			else

	jmp	SHORT $LN38@UpdateWayp
$LN41@UpdateWayp:

; 412  : 			{
; 413  : 				GetCallsign(flt,buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _flt$[ebp]
	push	edx
	call	?GetCallsign@@YAXPAVFlightClass@@PAD@Z	; GetCallsign
	add	esp, 8

; 414  : 				lbox->AddItem(flt->GetCampID(),C_TYPE_ITEM,buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	50					; 00000032H
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem

; 415  : 				lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	edx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
$LN38@UpdateWayp:

; 416  : 			}
; 417  : 			lbox->SetValue(flt->GetCampID());

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN42@UpdateWayp:

; 418  : 		}
; 419  : 	}
; 420  : 
; 421  : 	lbox=(C_ListBox *)win->FindControl(STPT_LABEL);

	push	13026					; 000032e2H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 422  : 	if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN31@UpdateWayp

; 423  : 	{
; 424  : 		if(wp->GetWPFlags() & WPF_TARGET)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	SHORT $LN36@UpdateWayp

; 425  : 			lbox->SetValue(TGT_WP);

	push	18033					; 00004671H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
	jmp	SHORT $LN31@UpdateWayp
$LN36@UpdateWayp:

; 426  : 		else if(wp->GetWPFlags() & WPF_IP)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 8
	je	SHORT $LN34@UpdateWayp

; 427  : 			lbox->SetValue(IP_WP);

	push	18031					; 0000466fH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
	jmp	SHORT $LN31@UpdateWayp
$LN34@UpdateWayp:

; 428  : 		else if(wp->GetWPFlags() & WPF_CP)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32					; 00000020H
	je	SHORT $LN32@UpdateWayp

; 429  : 			lbox->SetValue(CP_WP);

	push	18032					; 00004670H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 430  : 		else

	jmp	SHORT $LN31@UpdateWayp
$LN32@UpdateWayp:

; 431  : 			lbox->SetValue(STPT_WP);

	push	18030					; 0000466eH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN31@UpdateWayp:

; 432  : 	}
; 433  : 	ebox=(C_EditBox *)win->FindControl(STPT_FIELD);

	push	13027					; 000032e3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 434  : 	if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN30@UpdateWayp

; 435  : 	{
; 436  : 		ebox->SetInteger(wpnum);

	mov	edx, DWORD PTR _wpnum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger

; 437  : 		ebox->Refresh();

	mov	eax, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN30@UpdateWayp:

; 438  : 	}
; 439  : 
; 440  : 	btn = (C_Button *) win->FindControl (TOS_LOCK);

	push	13113					; 00003339H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _btn$[ebp], eax

; 441  : 	if (btn)

	cmp	DWORD PTR _btn$[ebp], 0
	je	SHORT $LN27@UpdateWayp

; 442  : 	{
; 443  : 		if (wp->GetWPFlags () & WPF_TIME_LOCKED)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	SHORT $LN28@UpdateWayp

; 444  : 			btn->SetState (1);

	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 445  : 		else

	jmp	SHORT $LN27@UpdateWayp
$LN28@UpdateWayp:

; 446  : 			btn->SetState (0);

	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN27@UpdateWayp:

; 447  : 	}
; 448  : 
; 449  : 	clk=(C_Clock *)win->FindControl(TOS_FIELD);

	push	13043					; 000032f3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _clk$[ebp], eax

; 450  : 	if(clk)

	cmp	DWORD PTR _clk$[ebp], 0
	je	SHORT $LN26@UpdateWayp

; 451  : 	{
; 452  : 		tm = wp->GetWPArrivalTime() / VU_TICS_PER_SECOND;

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _tm$[ebp], eax

; 453  : 		// tm += 30*CampaignMinutes; // What the hell is this about? - RH
; 454  : 		clk->SetTime(tm);

	mov	edx, DWORD PTR _tm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetTime@C_Clock@@QAEXJ@Z		; C_Clock::SetTime

; 455  : 		clk->Refresh();

	mov	eax, DWORD PTR _clk$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _clk$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN26@UpdateWayp:

; 456  : 	}
; 457  : 
; 458  : 	btn = (C_Button *) win->FindControl (AIRSPEED_LOCK);

	push	13112					; 00003338H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _btn$[ebp], eax

; 459  : 	if (btn)

	cmp	DWORD PTR _btn$[ebp], 0
	je	SHORT $LN23@UpdateWayp

; 460  : 	{
; 461  : 		if (wp->GetWPFlags () & WPF_SPEED_LOCKED)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32768				; 00008000H
	je	SHORT $LN24@UpdateWayp

; 462  : 			btn->SetState (1);

	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 463  : 		else

	jmp	SHORT $LN23@UpdateWayp
$LN24@UpdateWayp:

; 464  : 			btn->SetState (0);

	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN23@UpdateWayp:

; 465  : 	}
; 466  : 
; 467  : 	txt=(C_Text *)win->FindControl(AIRSPEED_FIELD);

	push	13044					; 000032f4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 468  : 	if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	$LN22@UpdateWayp

; 469  : 	{
; 470  : 		if (prev_wp)

	cmp	DWORD PTR _prev_wp$[ebp], 0
	je	$LN21@UpdateWayp

; 471  : 		{
; 472  : 			float				speed;
; 473  : 			// Air Speed in nm/hr
; 474  : 			if (wp->GetWPFlags() & WPF_HOLDCURRENT)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN20@UpdateWayp

; 475  : 				speed = static_cast<float>(FloatToInt32(get_air_speed (wp->GetWPSpeed()*KM_TO_NM, prev_wp->GetWPAltitude())));

	mov	ecx, DWORD PTR _prev_wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv739[ebp]
	movss	xmm0, DWORD PTR tv739[ebp]
	mulss	xmm0, DWORD PTR __real@3f0a35e2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$1[ebp], xmm0

; 476  : 			else

	jmp	SHORT $LN19@UpdateWayp
$LN20@UpdateWayp:

; 477  : 				speed = static_cast<float>(FloatToInt32(get_air_speed (wp->GetWPSpeed()*KM_TO_NM, wp->GetWPAltitude())));

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv750[ebp]
	movss	xmm0, DWORD PTR tv750[ebp]
	mulss	xmm0, DWORD PTR __real@3f0a35e2
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _speed$1[ebp], xmm0
$LN19@UpdateWayp:

; 478  : 			ispeed=FloatToInt32(speed+2.5F)/5;

	movss	xmm0, DWORD PTR _speed$1[ebp]
	addss	xmm0, DWORD PTR __real@40200000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _ispeed$[ebp], eax

; 479  : 			ispeed*=5;

	mov	edx, DWORD PTR _ispeed$[ebp]
	imul	edx, 5
	mov	DWORD PTR _ispeed$[ebp], edx

; 480  : 			if (speed > 999) ispeed = 999;

	movss	xmm0, DWORD PTR _speed$1[ebp]
	comiss	xmm0, DWORD PTR __real@4479c000
	jbe	SHORT $LN18@UpdateWayp
	mov	DWORD PTR _ispeed$[ebp], 999		; 000003e7H
$LN18@UpdateWayp:

; 481  : 		}
; 482  : 		else

	jmp	SHORT $LN17@UpdateWayp
$LN21@UpdateWayp:

; 483  : 		{
; 484  : 			ispeed=0;

	mov	DWORD PTR _ispeed$[ebp], 0
$LN17@UpdateWayp:

; 485  : 		}
; 486  : 
; 487  : 		_stprintf(buffer,"%1ld %s",ispeed,gStringMgr->GetString(TXT_KTS));

	push	180					; 000000b4H
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	mov	eax, DWORD PTR _ispeed$[ebp]
	push	eax
	push	OFFSET ??_C@_07KMHNPNOO@?$CF1ld?5?$CFs?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 488  : 
; 489  : 		txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
$LN22@UpdateWayp:

; 490  : 	}
; 491  : 
; 492  : 	txt = (C_Text *) win->FindControl (ALT_FIELD);

	push	13045					; 000032f5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 493  : 	if (txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN16@UpdateWayp

; 494  : 	{
; 495  : 		_stprintf (buffer, "%1ld", wp->GetWPAltitude ());

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	push	eax
	push	OFFSET ??_C@_04DIDHKLLF@?$CF1ld?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 496  : 		txt->SetText (buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
$LN16@UpdateWayp:

; 497  : 	}
; 498  : 
; 499  : 	// Figure out wether we have an altitude change and show the appropriate choices
; 500  : 	if (prev_wp)

	cmp	DWORD PTR _prev_wp$[ebp], 0
	je	SHORT $LN15@UpdateWayp

; 501  : 		alt_delta = wp->GetWPAltitude() - prev_wp->GetWPAltitude();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	mov	esi, eax
	mov	ecx, DWORD PTR _prev_wp$[ebp]
	call	?GetWPAltitude@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAltitude
	sub	esi, eax
	mov	DWORD PTR _alt_delta$[ebp], esi

; 502  : 	else

	jmp	SHORT $LN14@UpdateWayp
$LN15@UpdateWayp:

; 503  : 		alt_delta = 0;

	mov	DWORD PTR _alt_delta$[ebp], 0
$LN14@UpdateWayp:

; 504  : 	if (alt_delta < 0)

	cmp	DWORD PTR _alt_delta$[ebp], 0
	jge	SHORT $LN13@UpdateWayp

; 505  : 	{
; 506  : 		win->HideCluster(200);

	push	200					; 000000c8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 507  : 		win->UnHideCluster(300);

	push	300					; 0000012cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 508  : 		win->UnHideCluster(100);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster
	jmp	SHORT $LN10@UpdateWayp
$LN13@UpdateWayp:

; 509  : 	}
; 510  : 	else if (alt_delta > 0)

	cmp	DWORD PTR _alt_delta$[ebp], 0
	jle	SHORT $LN11@UpdateWayp

; 511  : 	{
; 512  : 		win->HideCluster(300);

	push	300					; 0000012cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 513  : 		win->UnHideCluster(200);

	push	200					; 000000c8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 514  : 		win->UnHideCluster(100);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 515  : 	}
; 516  : 	else

	jmp	SHORT $LN10@UpdateWayp
$LN11@UpdateWayp:

; 517  : 	{
; 518  : 		win->HideCluster(200);

	push	200					; 000000c8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 519  : 		win->HideCluster(300);

	push	300					; 0000012cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 520  : 		win->HideCluster(100);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster
$LN10@UpdateWayp:

; 521  : 	}
; 522  : 	lbox=(C_ListBox *)win->FindControl(CLIMB_LISTBOX);

	push	13046					; 000032f6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 523  : 	if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN7@UpdateWayp

; 524  : 	{
; 525  : 		if(wp->GetWPFlags() & WPF_HOLDCURRENT)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 2048				; 00000800H
	je	SHORT $LN8@UpdateWayp

; 526  : 			lbox->SetValue(CLIMB_DELAY);

	push	13060					; 00003304H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 527  : 		else

	jmp	SHORT $LN7@UpdateWayp
$LN8@UpdateWayp:

; 528  : 			lbox->SetValue(CLIMB_IMMEDIATE);

	push	13059					; 00003303H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN7@UpdateWayp:

; 529  : 	}
; 530  : 
; 531  : 	lbox=(C_ListBox *)win->FindControl(FORM_LISTBOX);

	push	13047					; 000032f7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 532  : 	if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN6@UpdateWayp

; 533  : 	{
; 534  : 		lbox->SetValue (wp->GetWPFormation()+1);

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFormation@WayPointClass@@QAEHXZ	; WayPointClass::GetWPFormation
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN6@UpdateWayp:

; 535  : 	}
; 536  : 
; 537  : 	lbox=(C_ListBox *)win->FindControl(ENR_ACTION_LISTBOX);

	push	13089					; 00003321H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 538  : 	if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN5@UpdateWayp

; 539  : 	{
; 540  : 		lbox->SetValue (wp->GetWPRouteAction()+1);

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN5@UpdateWayp:

; 541  : 	}
; 542  : 
; 543  : 	lbox=(C_ListBox *)win->FindControl(ACTION_LISTBOX);

	push	13048					; 000032f8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 544  : 	if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN4@UpdateWayp

; 545  : 	{
; 546  : 		lbox->SetValue(wp->GetWPAction()+1);

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN4@UpdateWayp:

; 547  : 		//		SteerPointTypeCB(ACTION_LISTBOX,C_TYPE_SELECT,lbox);
; 548  : 	}
; 549  : 
; 550  : 	// Draw Error boxes
; 551  : 	errors = WayPointErrorCode (wp, flt);

	mov	ecx, DWORD PTR _flt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	call	?WayPointErrorCode@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ; WayPointErrorCode
	add	esp, 8
	mov	DWORD PTR _errors$[ebp], eax

; 552  : 	win->HideCluster(80);

	push	80					; 00000050H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 553  : 	win->HideCluster(81);

	push	81					; 00000051H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 554  : 	win->HideCluster(82);

	push	82					; 00000052H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 555  : 	if (errors & WPERROR_NO_TARGET)

	mov	eax, DWORD PTR _errors$[ebp]
	and	eax, 1
	je	SHORT $LN3@UpdateWayp

; 556  : 		win->UnHideCluster(82);

	push	82					; 00000052H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster
$LN3@UpdateWayp:

; 557  : 	if (errors & WPERROR_SPEED)

	mov	ecx, DWORD PTR _errors$[ebp]
	and	ecx, 2
	je	SHORT $LN2@UpdateWayp

; 558  : 		win->UnHideCluster(81);

	push	81					; 00000051H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster
$LN2@UpdateWayp:

; 559  : 	if (errors & WPERROR_TIME)

	mov	edx, DWORD PTR _errors$[ebp]
	and	edx, 4
	je	SHORT $LN1@UpdateWayp

; 560  : 		win->UnHideCluster(80);

	push	80					; 00000050H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster
$LN1@UpdateWayp:
$LN52@UpdateWayp:

; 561  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ENDP ; UpdateWaypointWindowInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
tv78 = -4						; size = 4
_action$ = 8						; size = 4
_win$ = 12						; size = 4
?RefreshActionClusters@@YAXHPAVC_Window@@@Z PROC	; RefreshActionClusters

; 299  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 300  : 	win->HideCluster(13063);

	push	13063					; 00003307H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 301  : 	win->HideCluster(13065);

	push	13065					; 00003309H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 302  : 	win->HideCluster(13068);

	push	13068					; 0000330cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 303  : 	win->HideCluster(13070);

	push	13070					; 0000330eH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 304  : 	win->HideCluster(13074);

	push	13074					; 00003312H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 305  : 	win->HideCluster(13075);

	push	13075					; 00003313H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 306  : 	win->HideCluster(13079);

	push	13079					; 00003317H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?HideCluster@C_Window@@QAEXJ@Z		; C_Window::HideCluster

; 307  : 
; 308  : 	switch (action)

	mov	eax, DWORD PTR _action$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 25			; 00000019H
	ja	SHORT $LN1@RefreshAct
	mov	edx, DWORD PTR tv78[ebp]
	movzx	eax, BYTE PTR $LN11@RefreshAct[edx]
	jmp	DWORD PTR $LN12@RefreshAct[eax*4]
$LN6@RefreshAct:

; 309  : 	{
; 310  : 			case WP_TAKEOFF:
; 311  : 			case WP_LAND:
; 312  : 					win->UnHideCluster(13068);

	push	13068					; 0000330cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 313  : 					break;

	jmp	SHORT $LN9@RefreshAct
$LN5@RefreshAct:

; 314  : 			case WP_TANKER:
; 315  : 			case WP_REARM:
; 316  : 			case WP_ELINT:
; 317  : 			case WP_JAM:
; 318  : 			case WP_CAP:
; 319  : 			case WP_CASCP:
; 320  : 					win->UnHideCluster(13070);

	push	13070					; 0000330eH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 321  : 					break;

	jmp	SHORT $LN9@RefreshAct
$LN4@RefreshAct:

; 322  : 			case WP_INTERCEPT:
; 323  : 					win->UnHideCluster(13074);

	push	13074					; 00003312H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 324  : 					break;

	jmp	SHORT $LN9@RefreshAct
$LN3@RefreshAct:

; 325  : 			case WP_PICKUP:
; 326  : 			case WP_AIRDROP:
; 327  : 					win->UnHideCluster(13074);

	push	13074					; 00003312H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 328  : 					win->UnHideCluster(13075);

	push	13075					; 00003313H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 329  : 					break;

	jmp	SHORT $LN9@RefreshAct
$LN2@RefreshAct:

; 330  : 			case WP_STRIKE:
; 331  : 			case WP_BOMB:
; 332  : 					win->UnHideCluster(13079);

	push	13079					; 00003317H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster

; 333  : 					break;

	jmp	SHORT $LN9@RefreshAct
$LN1@RefreshAct:

; 334  : 			default:
; 335  : 					win->UnHideCluster(13063);

	push	13063					; 00003307H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?UnHideCluster@C_Window@@QAEXJ@Z	; C_Window::UnHideCluster
$LN9@RefreshAct:

; 336  : 					break;
; 337  : 	}
; 338  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@RefreshAct:
	DD	$LN6@RefreshAct
	DD	$LN5@RefreshAct
	DD	$LN3@RefreshAct
	DD	$LN4@RefreshAct
	DD	$LN2@RefreshAct
	DD	$LN1@RefreshAct
$LN11@RefreshAct:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	0
	DB	5
	DB	1
	DB	5
	DB	5
	DB	1
	DB	3
	DB	5
	DB	5
	DB	5
	DB	4
	DB	4
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	1
?RefreshActionClusters@@YAXHPAVC_Window@@@Z ENDP	; RefreshActionClusters
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T2 = -260						; size = 8
$T3 = -252						; size = 8
$T4 = -244						; size = 8
$T5 = -236						; size = 4
$T6 = -232						; size = 4
$T7 = -228						; size = 4
tv138 = -224						; size = 4
$T8 = -220						; size = 4
_fid$ = -216						; size = 4
tv285 = -212						; size = 4
tv376 = -208						; size = 4
_flt$ = -204						; size = 4
$T9 = -200						; size = 4
$T10 = -196						; size = 4
_hr$ = -192						; size = 4
_fc$11 = -188						; size = 4
_sc$ = -184						; size = 4
_mn$ = -180						; size = 4
_flags$ = -176						; size = 4
_time$ = -172						; size = 4
_action$ = -168						; size = 4
_clk$ = -164						; size = 4
_tmpID$ = -160						; size = 4
_ent$ = -156						; size = 4
_txt$ = -152						; size = 4
_buffer$ = -148						; size = 130
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_win$ = 8						; size = 4
_wp$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z PROC ; SetSteerPointValues

; 126  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 127  : 	CampEntity		ent;
; 128  : 	Flight			flt = NULL;

	mov	DWORD PTR _flt$[ebp], 0

; 129  : 	long			hr,mn,sc,action,flags,fid;
; 130  : 	CampaignTime	time;
; 131  : 	C_Text			*txt=NULL;

	mov	DWORD PTR _txt$[ebp], 0

; 132  : 	C_Clock			*clk;
; 133  : 	VU_ID			*tmpID;
; 134  : 	_TCHAR			buffer[130];
; 135  : 
; 136  : 	flt=(Flight)vuDatabase->Find(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 137  : 	if (!flt || !wp)

	cmp	DWORD PTR _flt$[ebp], 0
	je	SHORT $LN45@SetSteerPo
	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN46@SetSteerPo
$LN45@SetSteerPo:

; 138  : 		return;

	jmp	$LN47@SetSteerPo
$LN46@SetSteerPo:

; 139  : 
; 140  : 	// Depending on a combination of waypoint flags and action type, we may have special 
; 141  : 	// data associated with this waypoint
; 142  : 	action = wp->GetWPAction();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	mov	DWORD PTR _action$[ebp], eax

; 143  : 	flags = wp->GetWPFlags();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	mov	DWORD PTR _flags$[ebp], eax

; 144  : 	if ((flags & WPF_TAKEOFF) || (flags & WPF_LAND))

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 128				; 00000080H
	jne	SHORT $LN43@SetSteerPo
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 256				; 00000100H
	je	$LN44@SetSteerPo
$LN43@SetSteerPo:

; 145  : 	{
; 146  : 		// Associate an airbase/carrier
; 147  : 		ent = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _ent$[ebp], eax

; 148  : 		txt=(C_Text *)win->FindControl(LANDING_FIELD); // Takeoff/landing airbase name

	push	13103					; 0000332fH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 149  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	$LN44@SetSteerPo

; 150  : 		{
; 151  : 			tmpID=(VU_ID*)txt->GetUserPtr(_UI95_VU_ID_SLOT_);

	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?GetUserPtr@C_Base@@QAEPAXJ@Z		; C_Base::GetUserPtr
	mov	DWORD PTR _tmpID$[ebp], eax

; 152  : 			if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN41@SetSteerPo

; 153  : 			{
; 154  : 				tmpID=new VU_ID;

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN49@SetSteerPo
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN50@SetSteerPo
$LN49@SetSteerPo:
	mov	DWORD PTR tv138[ebp], 0
$LN50@SetSteerPo:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _tmpID$[ebp], edx

; 155  : 				*tmpID=ent->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _tmpID$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 156  : 				txt->SetUserCleanupPtr(_UI95_VU_ID_SLOT_,tmpID);

	mov	ecx, DWORD PTR _tmpID$[ebp]
	push	ecx
	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserCleanupPtr@C_Base@@QAEXJPAX@Z	; C_Base::SetUserCleanupPtr

; 157  : 				tmpID=NULL;

	mov	DWORD PTR _tmpID$[ebp], 0

; 158  : 				if (ent->IsObjective())

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN40@SetSteerPo

; 159  : 					ent->GetName(buffer,30,TRUE);

	push	1
	push	30					; 0000001eH
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 160  : 				else

	jmp	SHORT $LN39@SetSteerPo
$LN40@SetSteerPo:

; 161  : 					ent->GetName(buffer,30,FALSE);

	push	0
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+380]
	call	edx
$LN39@SetSteerPo:

; 162  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 163  : 			}
; 164  : 			else

	jmp	SHORT $LN38@SetSteerPo
$LN41@SetSteerPo:

; 165  : 			{
; 166  : 				if (tmpID)

	cmp	DWORD PTR _tmpID$[ebp], 0
	je	SHORT $LN37@SetSteerPo

; 167  : 					txt->SetUserPtr(_UI95_VU_ID_SLOT_,NULL);

	push	0
	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserPtr@C_Base@@QAEXJPAX@Z		; C_Base::SetUserPtr
$LN37@SetSteerPo:

; 168  : 				_tcscpy(buffer,gStringMgr->GetString(TXT_NO_AIRBASE));

	push	204					; 000000ccH
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 169  : 				txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
$LN38@SetSteerPo:

; 170  : 			}
; 171  : 			txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN44@SetSteerPo:

; 172  : 		}
; 173  : 	}
; 174  : 	if (((flags & WPF_TARGET) && (action == WP_INTERCEPT || action == WP_NAVSTRIKE || action == WP_GNDSTRIKE)) || action == WP_PICKUP || action == WP_AIRDROP)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	je	SHORT $LN34@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 13		; 0000000dH
	je	SHORT $LN35@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 15		; 0000000fH
	je	SHORT $LN35@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 14		; 0000000eH
	je	SHORT $LN35@SetSteerPo
$LN34@SetSteerPo:
	cmp	DWORD PTR _action$[ebp], 6
	je	SHORT $LN35@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 25		; 00000019H
	jne	$LN36@SetSteerPo
$LN35@SetSteerPo:

; 175  : 	{
; 176  : 		// Associate a UNIT target
; 177  : 		ent = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _ent$[ebp], eax

; 178  : 		if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN33@SetSteerPo

; 179  : 		{
; 180  : 			if (ent->IsFlight())

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN32@SetSteerPo

; 181  : 				GetCallsign (((Flight)ent)->callsign_id, ((Flight)ent)->callsign_num, buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	push	edx
	mov	eax, DWORD PTR _ent$[ebp]
	movzx	ecx, BYTE PTR [eax+425]
	push	ecx
	call	?GetCallsign@@YAXHHPAD@Z		; GetCallsign
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN31@SetSteerPo
$LN32@SetSteerPo:

; 182  : 			else if (ent->IsObjective())

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN30@SetSteerPo

; 183  : 				ent->GetName(buffer,30,TRUE);

	push	1
	push	30					; 0000001eH
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 184  : 			else

	jmp	SHORT $LN31@SetSteerPo
$LN30@SetSteerPo:

; 185  : 				ent->GetName(buffer,30,FALSE);

	push	0
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+380]
	call	edx
$LN31@SetSteerPo:

; 186  : 		}
; 187  : 		else

	jmp	SHORT $LN28@SetSteerPo
$LN33@SetSteerPo:

; 188  : 			_tcscpy(buffer,gStringMgr->GetString(TXT_NO_TARGET));

	push	188					; 000000bcH
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN28@SetSteerPo:

; 189  : 
; 190  : 		txt=(C_Text *)win->FindControl(UNIT_FIELD); // Target Name

	push	13105					; 00003331H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 191  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	$LN36@SetSteerPo

; 192  : 		{
; 193  : 			tmpID=(VU_ID*)txt->GetUserPtr(_UI95_VU_ID_SLOT_);

	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?GetUserPtr@C_Base@@QAEPAXJ@Z		; C_Base::GetUserPtr
	mov	DWORD PTR _tmpID$[ebp], eax

; 194  : 			if(ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN26@SetSteerPo

; 195  : 			{
; 196  : 				tmpID=new VU_ID;

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN51@SetSteerPo
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	DWORD PTR tv285[ebp], eax
	jmp	SHORT $LN52@SetSteerPo
$LN51@SetSteerPo:
	mov	DWORD PTR tv285[ebp], 0
$LN52@SetSteerPo:
	mov	ecx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _tmpID$[ebp], edx

; 197  : 				*tmpID=ent->Id();

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _tmpID$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 198  : 				txt->SetUserCleanupPtr(_UI95_VU_ID_SLOT_,tmpID);

	mov	ecx, DWORD PTR _tmpID$[ebp]
	push	ecx
	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserCleanupPtr@C_Base@@QAEXJPAX@Z	; C_Base::SetUserCleanupPtr

; 199  : 				tmpID=NULL;

	mov	DWORD PTR _tmpID$[ebp], 0
	jmp	SHORT $LN25@SetSteerPo
$LN26@SetSteerPo:

; 200  : 			}
; 201  : 			else if(tmpID)

	cmp	DWORD PTR _tmpID$[ebp], 0
	je	SHORT $LN25@SetSteerPo

; 202  : 				txt->SetUserPtr(_UI95_VU_ID_SLOT_,NULL);

	push	0
	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserPtr@C_Base@@QAEXJPAX@Z		; C_Base::SetUserPtr
$LN25@SetSteerPo:

; 203  : 			txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 204  : 			txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN36@SetSteerPo:

; 205  : 		}
; 206  : 	}
; 207  : 	if ((flags & WPF_TARGET) && (action == WP_STRIKE || action == WP_BOMB || action == WP_RECON))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	je	$LN23@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 17		; 00000011H
	je	SHORT $LN22@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 18		; 00000012H
	je	SHORT $LN22@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 21		; 00000015H
	jne	$LN23@SetSteerPo
$LN22@SetSteerPo:

; 208  : 	{
; 209  : 		// Associate an OBJECTIVE target
; 210  : 		ent = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _ent$[ebp], eax

; 211  : 		if (ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN21@SetSteerPo

; 212  : 		{
; 213  : 			if (ent->IsObjective())

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN20@SetSteerPo

; 214  : 				ent->GetName(buffer,30,TRUE);

	push	1
	push	30					; 0000001eH
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+380]
	call	eax

; 215  : 			else

	jmp	SHORT $LN19@SetSteerPo
$LN20@SetSteerPo:

; 216  : 				ent->GetName(buffer,30,FALSE);

	push	0
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [eax+380]
	call	edx
$LN19@SetSteerPo:

; 217  : 		}
; 218  : 		else

	jmp	SHORT $LN18@SetSteerPo
$LN21@SetSteerPo:

; 219  : 			_tcscpy(buffer,gStringMgr->GetString(TXT_NO_TARGET));

	push	188					; 000000bcH
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN18@SetSteerPo:

; 220  : 
; 221  : 		txt=(C_Text *)win->FindControl(OBJECTIVE_FIELD); // Target Name

	push	13093					; 00003325H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 222  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	$LN17@SetSteerPo

; 223  : 		{
; 224  : 			tmpID=(VU_ID*)txt->GetUserPtr(_UI95_VU_ID_SLOT_);

	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?GetUserPtr@C_Base@@QAEPAXJ@Z		; C_Base::GetUserPtr
	mov	DWORD PTR _tmpID$[ebp], eax

; 225  : 			if(ent)

	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN16@SetSteerPo

; 226  : 			{
; 227  : 				tmpID=new VU_ID;

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN53@SetSteerPo
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	DWORD PTR tv376[ebp], eax
	jmp	SHORT $LN54@SetSteerPo
$LN53@SetSteerPo:
	mov	DWORD PTR tv376[ebp], 0
$LN54@SetSteerPo:
	mov	ecx, DWORD PTR tv376[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _tmpID$[ebp], edx

; 228  : 				*tmpID=ent->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _tmpID$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 229  : 				txt->SetUserCleanupPtr(_UI95_VU_ID_SLOT_,tmpID);

	mov	ecx, DWORD PTR _tmpID$[ebp]
	push	ecx
	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserCleanupPtr@C_Base@@QAEXJPAX@Z	; C_Base::SetUserCleanupPtr

; 230  : 				tmpID=NULL;

	mov	DWORD PTR _tmpID$[ebp], 0
	jmp	SHORT $LN15@SetSteerPo
$LN16@SetSteerPo:

; 231  : 			}
; 232  : 			else if(tmpID)

	cmp	DWORD PTR _tmpID$[ebp], 0
	je	SHORT $LN15@SetSteerPo

; 233  : 				txt->SetUserPtr(_UI95_VU_ID_SLOT_,NULL);

	push	0
	push	6
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserPtr@C_Base@@QAEXJPAX@Z		; C_Base::SetUserPtr
$LN15@SetSteerPo:

; 234  : 			txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 235  : 			txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN17@SetSteerPo:

; 236  : 		}
; 237  : 		txt=(C_Text *)win->FindControl(FEATURE_FIELD);	// Target building

	push	13095					; 00003327H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 238  : 		if(txt && ent && ent->IsObjective())

	cmp	DWORD PTR _txt$[ebp], 0
	je	$LN23@SetSteerPo
	cmp	DWORD PTR _ent$[ebp], 0
	je	$LN23@SetSteerPo
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	$LN23@SetSteerPo

; 239  : 		{
; 240  : 			FeatureClassDataType	*fc;
; 241  : 			fid = wp->GetWPTargetBuilding();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTargetBuilding@WayPointClass@@QAEEXZ ; WayPointClass::GetWPTargetBuilding
	movzx	ecx, al
	mov	DWORD PTR _fid$[ebp], ecx

; 242  : 			if (fid < 255)

	cmp	DWORD PTR _fid$[ebp], 255		; 000000ffH
	jge	SHORT $LN12@SetSteerPo

; 243  : 				fc = GetFeatureClassData(((Objective)ent)->GetFeatureID(fid));

	mov	edx, DWORD PTR _fid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _ent$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$11[ebp], eax

; 244  : 			else

	jmp	SHORT $LN11@SetSteerPo
$LN12@SetSteerPo:

; 245  : 				fc = NULL;

	mov	DWORD PTR _fc$11[ebp], 0
$LN11@SetSteerPo:

; 246  : 			txt->SetUserNumber(C_STATE_0,wp->GetWPTargetBuilding());

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTargetBuilding@WayPointClass@@QAEEXZ ; WayPointClass::GetWPTargetBuilding
	movzx	eax, al
	push	eax
	push	0
	mov	ecx, DWORD PTR _txt$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 247  : 			if (fc)

	cmp	DWORD PTR _fc$11[ebp], 0
	je	SHORT $LN10@SetSteerPo

; 248  : 				txt->SetText(fc->Name);

	mov	ecx, DWORD PTR _fc$11[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 249  : 			else

	jmp	SHORT $LN9@SetSteerPo
$LN10@SetSteerPo:

; 250  : 			{
; 251  : 				_tcscpy(buffer,gStringMgr->GetString(TXT_NOT_ASSIGNED));

	push	187					; 000000bbH
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 252  : 				txt->SetText(buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx
$LN9@SetSteerPo:

; 253  : 			}
; 254  : 			txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN23@SetSteerPo:

; 255  : 		}
; 256  : 	}
; 257  : 	if ((flags & WPF_REPEAT) || (wp->GetNextWP() && (wp->GetNextWP()->GetWPFlags() & WPF_REPEAT)))

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN7@SetSteerPo
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	$LN8@SetSteerPo
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	ecx, eax
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	$LN8@SetSteerPo
$LN7@SetSteerPo:

; 258  : 	{
; 259  : 		// Associate a patrol/station time
; 260  : 		if (flags & WPF_REPEAT)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 64					; 00000040H
	je	SHORT $LN6@SetSteerPo

; 261  : 			time = wp->GetWPStationTime();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPStationTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPStationTime
	mov	DWORD PTR _time$[ebp], eax

; 262  : 		else

	jmp	SHORT $LN5@SetSteerPo
$LN6@SetSteerPo:

; 263  : 			time = wp->GetNextWP()->GetWPStationTime();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	ecx, eax
	call	?GetWPStationTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPStationTime
	mov	DWORD PTR _time$[ebp], eax
$LN5@SetSteerPo:

; 264  : 		hr = time / CampaignHours;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 3600000				; 0036ee80H
	div	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 265  : 		mn = (time / CampaignMinutes) % 60;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _mn$[ebp], edx

; 266  : 		sc = (time / CampaignSeconds) % 60;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _sc$[ebp], edx

; 267  : 		clk=(C_Clock *)win->FindControl(PATROL_FIELD);

	push	13109					; 00003335H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _clk$[ebp], eax

; 268  : 		if(clk)

	cmp	DWORD PTR _clk$[ebp], 0
	je	SHORT $LN8@SetSteerPo

; 269  : 		{
; 270  : 			clk->SetHour(hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetHour@C_Clock@@QAEXJ@Z		; C_Clock::SetHour

; 271  : 			clk->SetMinute(mn);

	mov	eax, DWORD PTR _mn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetMinute@C_Clock@@QAEXJ@Z		; C_Clock::SetMinute

; 272  : 			clk->SetSecond(sc);

	mov	ecx, DWORD PTR _sc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetSecond@C_Clock@@QAEXJ@Z		; C_Clock::SetSecond

; 273  : 			clk->Refresh();

	mov	edx, DWORD PTR _clk$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _clk$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN8@SetSteerPo:

; 274  : 		}
; 275  : 	}
; 276  : 	if (action == WP_PICKUP || action == WP_AIRDROP)

	cmp	DWORD PTR _action$[ebp], 6
	je	SHORT $LN2@SetSteerPo
	cmp	DWORD PTR _action$[ebp], 25		; 00000019H
	jne	$LN47@SetSteerPo
$LN2@SetSteerPo:

; 277  : 	{
; 278  : 		// Associate a patrol/station time
; 279  : 		time = wp->GetWPStationTime();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPStationTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPStationTime
	mov	DWORD PTR _time$[ebp], eax

; 280  : 		hr = time / CampaignHours;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 3600000				; 0036ee80H
	div	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 281  : 		mn = (time / CampaignMinutes) % 60;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _mn$[ebp], edx

; 282  : 		sc = (time / CampaignSeconds) % 60;

	mov	eax, DWORD PTR _time$[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _sc$[ebp], edx

; 283  : 		clk=(C_Clock *)win->FindControl(LOITER_FIELD);

	push	13100					; 0000332cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _clk$[ebp], eax

; 284  : 		if(clk)

	cmp	DWORD PTR _clk$[ebp], 0
	je	SHORT $LN47@SetSteerPo

; 285  : 		{
; 286  : 			clk->SetHour(hr);

	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetHour@C_Clock@@QAEXJ@Z		; C_Clock::SetHour

; 287  : 			clk->SetMinute(mn);

	mov	eax, DWORD PTR _mn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetMinute@C_Clock@@QAEXJ@Z		; C_Clock::SetMinute

; 288  : 			clk->SetSecond(sc);

	mov	ecx, DWORD PTR _sc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _clk$[ebp]
	call	?SetSecond@C_Clock@@QAEXJ@Z		; C_Clock::SetSecond

; 289  : 			clk->Refresh();

	mov	edx, DWORD PTR _clk$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _clk$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN47@SetSteerPo:

; 290  : 		}
; 291  : 	}
; 292  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z$0:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z$2:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSteerPointValues@@YAXPAVC_Window@@PAVWayPointClass@@H@Z ENDP ; SetSteerPointValues
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_flt$ = -12						; size = 4
_i$ = -8						; size = 4
_wp$ = -4						; size = 4
?get_current_waypoint@@YAPAVWayPointClass@@XZ PROC	; get_current_waypoint

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 94   : 	int
; 95   : 			i;
; 96   : 
; 97   : 	FlightClass
; 98   : 			*flt;
; 99   : 
; 100  : 	WayPointClass
; 101  : 			*wp;
; 102  : 
; 103  : 	flt = (Flight) vuDatabase->Find(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 104  : 
; 105  : 	if (!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN3@get_curren

; 106  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@get_curren
$LN3@get_curren:

; 107  : 
; 108  : 	wp = flt->GetFirstUnitWP ();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _wp$[ebp], eax

; 109  : 	i = 1;

	mov	DWORD PTR _i$[ebp], 1
$LN2@get_curren:

; 110  : 
; 111  : 	while (wp && i < gActiveWPNum)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN1@get_curren
	movsx	edx, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN1@get_curren

; 112  : 	{
; 113  : 		wp = wp->GetNextWP ();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _wp$[ebp], eax

; 114  : 		i ++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 115  : 	}

	jmp	SHORT $LN2@get_curren
$LN1@get_curren:

; 116  : 
; 117  : 	return wp;

	mov	eax, DWORD PTR _wp$[ebp]
$LN4@get_curren:

; 118  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?get_current_waypoint@@YAPAVWayPointClass@@XZ ENDP	; get_current_waypoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
;	COMDAT ??__EgActiveFlightID@@YAXXZ
text$yc	SEGMENT
??__EgActiveFlightID@@YAXXZ PROC			; `dynamic initializer for 'gActiveFlightID'', COMDAT

; 83   : VU_ID gActiveFlightID=FalconNullId; // Currently selected waypoint flight

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A, eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4, ecx
	pop	ebp
	ret	0
??__EgActiveFlightID@@YAXXZ ENDP			; `dynamic initializer for 'gActiveFlightID''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
$T1 = -32						; size = 8
$T2 = -24						; size = 8
_nw$ = -16						; size = 4
_un$3 = -12						; size = 4
_flt$ = -8						; size = 4
_wp$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?DeleteWPCB@@YAXJFPAVC_Base@@@Z PROC			; DeleteWPCB

; 649  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 650  : 	WayPoint		wp,nw;
; 651  : 	Flight			flt;
; 652  : 
; 653  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN6@DeleteWPCB

; 654  : 		return;

	jmp	$LN7@DeleteWPCB
$LN6@DeleteWPCB:

; 655  : 
; 656  : 	flt=(Flight)vuDatabase->Find(gActiveFlightID);

	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 657  : 	wp = get_current_waypoint();

	call	?get_current_waypoint@@YAPAVWayPointClass@@XZ ; get_current_waypoint
	mov	DWORD PTR _wp$[ebp], eax

; 658  : 
; 659  : 	if (!wp || !flt)

	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN4@DeleteWPCB
	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN5@DeleteWPCB
$LN4@DeleteWPCB:

; 660  : 		return;

	jmp	$LN7@DeleteWPCB
$LN5@DeleteWPCB:

; 661  : 
; 662  : 	nw = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _nw$[ebp], eax

; 663  : 	if ((wp->GetPrevWP()) && (wp->GetNextWP ()))

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	test	eax, eax
	je	SHORT $LN3@DeleteWPCB
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	SHORT $LN3@DeleteWPCB

; 664  : 	{
; 665  : 		flt->DeleteUnitWP(wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flt$[ebp]
	call	?DeleteUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::DeleteUnitWP
$LN3@DeleteWPCB:

; 666  : 	}
; 667  : 
; 668  : 	recalculate_waypoints(nw);

	mov	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ; recalculate_waypoints
	add	esp, 4

; 669  : 	gMapMgr->SetCurrentWaypointList (flt->Id());

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _flt$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?SetCurrentWaypointList@C_Map@@QAEHVVU_ID@@@Z ; C_Map::SetCurrentWaypointList

; 670  : 	if (TheCampaign.Flags & CAMP_TACTICAL_EDIT)

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A+64
	and	eax, 524288				; 00080000H
	je	SHORT $LN7@DeleteWPCB

; 671  : 	{
; 672  : 		Flight	un;
; 673  : 
; 674  : 		un = (Flight)vuDatabase->Find(gMapMgr->GetCurWPID());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ	; C_Map::GetCurWPID
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _un$3[ebp], eax

; 675  : 		if(un)

	cmp	DWORD PTR _un$3[ebp], 0
	je	SHORT $LN7@DeleteWPCB

; 676  : 		{
; 677  : 			fixup_unit (un);

	mov	ecx, DWORD PTR _un$3[ebp]
	push	ecx
	call	?fixup_unit@@YAXPAVUnitClass@@@Z	; fixup_unit
	add	esp, 4

; 678  : 			gGps->Update();

	mov	ecx, DWORD PTR ?gGps@@3PAVGlobalPositioningSystem@@A ; gGps
	call	?Update@GlobalPositioningSystem@@QAEXXZ	; GlobalPositioningSystem::Update

; 679  : 			gMapMgr->DrawMap();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?DrawMap@C_Map@@QAEXXZ			; C_Map::DrawMap
$LN7@DeleteWPCB:

; 680  : 		}
; 681  : 	}
; 682  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteWPCB@@YAXJFPAVC_Base@@@Z ENDP			; DeleteWPCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
tv260 = -68						; size = 4
tv254 = -64						; size = 4
_dist$ = -60						; size = 4
tv238 = -56						; size = 4
tv231 = -52						; size = 4
_fuelAvail$ = -48					; size = 4
_missionTime$ = -44					; size = 4
_takeoff$ = -40						; size = 4
_ent$1 = -36						; size = 4
_maxSpeed$ = -32					; size = 4
_minSpeed$ = -28					; size = 4
_time$ = -24						; size = 4
_land$ = -20						; size = 4
_speed$ = -16						; size = 4
_action$ = -12						; size = 4
_pw$ = -8						; size = 4
_errors$ = -4						; size = 4
_wp$ = 8						; size = 4
_flt$ = 12						; size = 4
?WayPointErrorCode@@YAHPAVWayPointClass@@PAVFlightClass@@@Z PROC ; WayPointErrorCode

; 1413 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi

; 1414 : 	WayPointClass	*pw;
; 1415 : 	float			dist,speed,minSpeed,maxSpeed;
; 1416 : 	int				errors=0,action;

	mov	DWORD PTR _errors$[ebp], 0

; 1417 : 	unsigned int	fuelAvail;
; 1418 : 	long			time;
; 1419 : 	CampaignTime	missionTime,takeoff,land;
; 1420 : 
; 1421 : 	// Check for bad target/airbase/patrol times
; 1422 : 	action = wp->GetWPAction();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	mov	DWORD PTR _action$[ebp], eax

; 1423 : 	if (action == WP_TAKEOFF || action == WP_LAND || action == WP_STRIKE || action == WP_BOMB ||
; 1424 : 					action == WP_INTERCEPT || action == WP_RECON || action == WP_NAVSTRIKE)

	cmp	DWORD PTR _action$[ebp], 1
	je	SHORT $LN16@WayPointEr
	cmp	DWORD PTR _action$[ebp], 7
	je	SHORT $LN16@WayPointEr
	cmp	DWORD PTR _action$[ebp], 17		; 00000011H
	je	SHORT $LN16@WayPointEr
	cmp	DWORD PTR _action$[ebp], 18		; 00000012H
	je	SHORT $LN16@WayPointEr
	cmp	DWORD PTR _action$[ebp], 13		; 0000000dH
	je	SHORT $LN16@WayPointEr
	cmp	DWORD PTR _action$[ebp], 21		; 00000015H
	je	SHORT $LN16@WayPointEr
	cmp	DWORD PTR _action$[ebp], 15		; 0000000fH
	jne	SHORT $LN15@WayPointEr
$LN16@WayPointEr:

; 1425 : 	{
; 1426 : 		// Requires a valid campaign entity
; 1427 : 		CampEntity ent = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _ent$1[ebp], eax

; 1428 : 		if (!ent)

	cmp	DWORD PTR _ent$1[ebp], 0
	jne	SHORT $LN15@WayPointEr

; 1429 : 			errors |= WPERROR_NO_TARGET;

	mov	eax, DWORD PTR _errors$[ebp]
	or	eax, 1
	mov	DWORD PTR _errors$[ebp], eax
$LN15@WayPointEr:

; 1430 : 	}
; 1431 : 
; 1432 : 	// Check for fuel
; 1433 : 	pw = flt->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _pw$[ebp], eax

; 1434 : 	takeoff = land = pw->GetWPDepartureTime();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	DWORD PTR _land$[ebp], eax
	mov	ecx, DWORD PTR _land$[ebp]
	mov	DWORD PTR _takeoff$[ebp], ecx
$LN14@WayPointEr:

; 1435 : 	while (pw && pw->GetWPAction() != WP_LAND)

	cmp	DWORD PTR _pw$[ebp], 0
	je	SHORT $LN13@WayPointEr
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	je	SHORT $LN13@WayPointEr

; 1436 : 		pw = pw->GetNextWP();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _pw$[ebp], eax
	jmp	SHORT $LN14@WayPointEr
$LN13@WayPointEr:

; 1437 : 	if (pw)

	cmp	DWORD PTR _pw$[ebp], 0
	je	SHORT $LN12@WayPointEr

; 1438 : 		land = pw->GetWPArrivalTime();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	DWORD PTR _land$[ebp], eax
$LN12@WayPointEr:

; 1439 : 	missionTime = land-takeoff;

	mov	edx, DWORD PTR _land$[ebp]
	sub	edx, DWORD PTR _takeoff$[ebp]
	mov	DWORD PTR _missionTime$[ebp], edx

; 1440 : 	fuelAvail = flt->CalculateFuelAvailable(255);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _flt$[ebp]
	call	?CalculateFuelAvailable@FlightClass@@QAEJH@Z ; FlightClass::CalculateFuelAvailable
	mov	DWORD PTR _fuelAvail$[ebp], eax

; 1441 : 	if ((missionTime/CampaignMinutes) * flt->GetUnitClassData()->Rate > fuelAvail)

	mov	eax, DWORD PTR _missionTime$[ebp]
	xor	edx, edx
	mov	ecx, 60000				; 0000ea60H
	div	ecx
	mov	esi, eax
	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	movsx	edx, WORD PTR [eax+264]
	imul	esi, edx
	cmp	esi, DWORD PTR _fuelAvail$[ebp]
	jbe	SHORT $LN11@WayPointEr

; 1442 : 		errors |= WPERROR_FUEL;

	mov	eax, DWORD PTR _errors$[ebp]
	or	eax, 8
	mov	DWORD PTR _errors$[ebp], eax
$LN11@WayPointEr:

; 1443 : 
; 1444 : 	// Do minimum speed checks
; 1445 : 	//TJL 11/23/03 Cruise/Max distinction removed. Speeds based on straight KM to NM
; 1446 : 	//converion from movespeed in F4browse.  Make error aircraft specific.
; 1447 : 	//minSpeed = flt->GetCruiseSpeed()/2.0F - 20.0F;
; 1448 : 	//maxSpeed = flt->GetMaxSpeed() + 20.0F;
; 1449 : 	minSpeed = flt->GetCruiseSpeed() * 0.7F;

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetCruiseSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCruiseSpeed
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR _minSpeed$[ebp], xmm0

; 1450 : 	maxSpeed = flt->GetMaxSpeed() * 1.3F;

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetMaxSpeed@UnitClass@@QBEHXZ		; UnitClass::GetMaxSpeed
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _maxSpeed$[ebp], xmm0

; 1451 : 
; 1452 : 	if ((wp->GetWPFlags() & WPF_ALTERNATE) || wp->GetWPAction() == WP_REFUEL)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1024				; 00000400H
	jne	SHORT $LN9@WayPointEr
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	jne	SHORT $LN10@WayPointEr
$LN9@WayPointEr:

; 1453 : 		return errors;

	mov	eax, DWORD PTR _errors$[ebp]
	jmp	$LN18@WayPointEr
$LN10@WayPointEr:

; 1454 : 	if (wp->GetWPSpeed() < minSpeed && wp->GetPrevWP())

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv231[ebp]
	movss	xmm0, DWORD PTR _minSpeed$[ebp]
	comiss	xmm0, DWORD PTR tv231[ebp]
	jbe	SHORT $LN8@WayPointEr
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	test	eax, eax
	je	SHORT $LN8@WayPointEr

; 1455 : 		errors |= WPERROR_SPEED;

	mov	ecx, DWORD PTR _errors$[ebp]
	or	ecx, 2
	mov	DWORD PTR _errors$[ebp], ecx
$LN8@WayPointEr:

; 1456 : 	if (wp->GetWPSpeed() > maxSpeed)

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv238[ebp]
	movss	xmm0, DWORD PTR tv238[ebp]
	comiss	xmm0, DWORD PTR _maxSpeed$[ebp]
	jbe	SHORT $LN7@WayPointEr

; 1457 : 		errors |= WPERROR_SPEED;

	mov	edx, DWORD PTR _errors$[ebp]
	or	edx, 2
	mov	DWORD PTR _errors$[ebp], edx
$LN7@WayPointEr:

; 1458 : 
; 1459 : 	// Check for valid speeds/times
; 1460 : 	pw = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _pw$[ebp], eax

; 1461 : 	if (pw)

	cmp	DWORD PTR _pw$[ebp], 0
	je	$LN2@WayPointEr

; 1462 : 	{
; 1463 : 		time = wp->GetWPArrivalTime() - pw->GetWPDepartureTime();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	esi, eax
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	sub	esi, eax
	mov	DWORD PTR _time$[ebp], esi

; 1464 : 		if (time <= 1)

	cmp	DWORD PTR _time$[ebp], 1
	jg	SHORT $LN5@WayPointEr

; 1465 : 			errors |= WPERROR_TIME;

	mov	eax, DWORD PTR _errors$[ebp]
	or	eax, 4
	mov	DWORD PTR _errors$[ebp], eax
$LN5@WayPointEr:

; 1466 : 		dist = wp->DistanceTo(pw);

	mov	ecx, DWORD PTR _pw$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?DistanceTo@WayPointClass@@QAEMPAV1@@Z	; WayPointClass::DistanceTo
	fstp	DWORD PTR _dist$[ebp]

; 1467 : 		if (time)

	cmp	DWORD PTR _time$[ebp], 0
	je	SHORT $LN4@WayPointEr

; 1468 : 			speed = (dist * CampaignHours) / time;

	movss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	cvtsi2ss xmm1, DWORD PTR _time$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _speed$[ebp], xmm0

; 1469 : 		else

	jmp	SHORT $LN3@WayPointEr
$LN4@WayPointEr:

; 1470 : 			speed = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _speed$[ebp], xmm0
$LN3@WayPointEr:

; 1471 : 		if (speed < minSpeed || speed > maxSpeed || fabs(speed - wp->GetWPSpeed()) > 10.0F)

	movss	xmm0, DWORD PTR _minSpeed$[ebp]
	comiss	xmm0, DWORD PTR _speed$[ebp]
	ja	SHORT $LN1@WayPointEr
	movss	xmm0, DWORD PTR _speed$[ebp]
	comiss	xmm0, DWORD PTR _maxSpeed$[ebp]
	ja	SHORT $LN1@WayPointEr
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv254[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	subss	xmm0, DWORD PTR tv254[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv260[ebp]
	movss	xmm0, DWORD PTR tv260[ebp]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN2@WayPointEr
$LN1@WayPointEr:

; 1472 : 			errors |= WPERROR_SPEED;

	mov	edx, DWORD PTR _errors$[ebp]
	or	edx, 2
	mov	DWORD PTR _errors$[ebp], edx
$LN2@WayPointEr:

; 1473 : 	}
; 1474 : 	return errors;

	mov	eax, DWORD PTR _errors$[ebp]
$LN18@WayPointEr:

; 1475 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?WayPointErrorCode@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ENDP ; WayPointErrorCode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_w$ = -16						; size = 4
_campID$ = -12						; size = 4
_cwp$ = -8						; size = 4
_i$ = -4						; size = 4
_flt$ = 8						; size = 4
?ValidateWayPoints@@YAXPAVFlightClass@@@Z PROC		; ValidateWayPoints

; 1488 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1489 : 	C_Waypoint		*cwp;
; 1490 : 	WayPoint		w;
; 1491 : 	int				i=1;

	mov	DWORD PTR _i$[ebp], 1

; 1492 : 	int				campID;
; 1493 : 
; 1494 : 	if (!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN7@ValidateWa

; 1495 : 		return;

	jmp	$LN8@ValidateWa
$LN7@ValidateWa:

; 1496 : 
; 1497 : 	campID = flt->GetCampID();

	mov	eax, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	mov	DWORD PTR _campID$[ebp], ecx

; 1498 : 	cwp = gMapMgr->GetCurWP();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ	; C_Map::GetCurWP
	mov	DWORD PTR _cwp$[ebp], eax

; 1499 : 	w = flt->GetFirstUnitWP();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN6@ValidateWa:

; 1500 : 	while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN5@ValidateWa

; 1501 : 	{
; 1502 : 		if (!IsValidWP(w,flt))

	mov	edx, DWORD PTR _flt$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	?IsValidWP@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ; IsValidWP
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@ValidateWa

; 1503 : 		{
; 1504 : 			cwp->SetState(campID*256+i,2);

	push	2
	mov	ecx, DWORD PTR _campID$[ebp]
	shl	ecx, 8
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1505 : 			cwp->SetState(0x40000000+(campID*256)+i,2);

	push	2
	mov	edx, DWORD PTR _campID$[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1073741824]
	push	ecx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState
	jmp	SHORT $LN3@ValidateWa
$LN4@ValidateWa:

; 1506 : 		}
; 1507 : 		else if (w == flt->GetCurrentUnitWP())

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	cmp	DWORD PTR _w$[ebp], eax
	jne	SHORT $LN2@ValidateWa

; 1508 : 		{
; 1509 : 			cwp->SetState(campID*256+i,0);

	push	0
	mov	edx, DWORD PTR _campID$[ebp]
	shl	edx, 8
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1510 : 			cwp->SetState(0x40000000+(campID*256)+i,1);

	push	1
	mov	eax, DWORD PTR _campID$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1073741824]
	push	edx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1511 : 		}
; 1512 : 		else

	jmp	SHORT $LN3@ValidateWa
$LN2@ValidateWa:

; 1513 : 		{
; 1514 : 			cwp->SetState(campID*256+i,0);

	push	0
	mov	eax, DWORD PTR _campID$[ebp]
	shl	eax, 8
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1515 : 			cwp->SetState(0x40000000+(campID*256)+i,0);

	push	0
	mov	ecx, DWORD PTR _campID$[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1073741824]
	push	eax
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState
$LN3@ValidateWa:

; 1516 : 		}
; 1517 : 		i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 1518 : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 1519 : 	}

	jmp	$LN6@ValidateWa
$LN5@ValidateWa:

; 1520 : 	cwp->Refresh();

	mov	edx, DWORD PTR _cwp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cwp$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN8@ValidateWa:

; 1521 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ValidateWayPoints@@YAXPAVFlightClass@@@Z ENDP		; ValidateWayPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_errors$ = -4						; size = 4
_wp$ = 8						; size = 4
_flt$ = 12						; size = 4
?IsValidWP@@YAHPAVWayPointClass@@PAVFlightClass@@@Z PROC ; IsValidWP

; 1478 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1479 : 	int				errors;
; 1480 : 
; 1481 : 	errors = WayPointErrorCode(wp, flt);

	mov	eax, DWORD PTR _flt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?WayPointErrorCode@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ; WayPointErrorCode
	add	esp, 8
	mov	DWORD PTR _errors$[ebp], eax

; 1482 : 	if (errors)

	cmp	DWORD PTR _errors$[ebp], 0
	je	SHORT $LN1@IsValidWP

; 1483 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN2@IsValidWP
$LN1@IsValidWP:

; 1484 : 	return TRUE;

	mov	eax, 1
$LN2@IsValidWP:

; 1485 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsValidWP@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ENDP ; IsValidWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
tv350 = -100						; size = 8
tv340 = -92						; size = 8
tv389 = -84						; size = 4
tv465 = -80						; size = 4
tv382 = -76						; size = 4
tv325 = -72						; size = 4
tv463 = -68						; size = 4
tv347 = -64						; size = 4
tv337 = -60						; size = 4
_lockedTime$ = -56					; size = 4
_endTime$ = -52						; size = 4
_dist$ = -48						; size = 4
_startTime$ = -44					; size = 4
_d$ = -40						; size = 4
_speed$ = -36						; size = 4
_pw$ = -32						; size = 4
_nw$ = -28						; size = 4
_now$ = -24						; size = 4
_w$ = -20						; size = 4
_y$ = -16						; size = 2
_ny$ = -12						; size = 2
_x$ = -8						; size = 2
_nx$ = -4						; size = 2
_wp$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?recalculate_waypoint@@YAXPAVWayPointClass@@HH@Z PROC	; recalculate_waypoint

; 1274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 1275 : 	GridIndex		x,y,nx,ny;
; 1276 : 	float			speed,dist,d;
; 1277 : 	WayPointClass	*pw,*nw,*w;
; 1278 : 	CampaignTime	startTime=0,endTime=0,lockedTime=0,now;

	mov	DWORD PTR _startTime$[ebp], 0
	mov	DWORD PTR _endTime$[ebp], 0
	mov	DWORD PTR _lockedTime$[ebp], 0

; 1279 : 
; 1280 : 	if (!wp)

	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN35@recalculat

; 1281 : 		return;

	jmp	$LN36@recalculat
$LN35@recalculat:

; 1282 : 
; 1283 : 	ShiAssert(!(wp->GetWPFlags() & WPF_TIME_LOCKED));
; 1284 : 
; 1285 : 	// KCK: This is annoyingly complex.
; 1286 : 	// Basically, we're trying to either move times in/out from the changed waypoint
; 1287 : 	// or smooth speeds between two time locked waypoints,
; 1288 : 
; 1289 : 	// First, find out if we're between a time locked pair, or if we've got open ends
; 1290 : 	pw = nw = wp;

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR _nw$[ebp], eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR _pw$[ebp], ecx

; 1291 : 	w = wp->GetPrevWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _w$[ebp], eax
$LN34@recalculat:

; 1292 : 	while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN33@recalculat

; 1293 : 	{
; 1294 : 		pw = w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR _pw$[ebp], edx

; 1295 : 		if (w->GetWPFlags() & WPF_TIME_LOCKED)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	SHORT $LN32@recalculat

; 1296 : 			break;

	jmp	SHORT $LN33@recalculat
$LN32@recalculat:

; 1297 : 		w = w->GetPrevWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _w$[ebp], eax

; 1298 : 	}

	jmp	SHORT $LN34@recalculat
$LN33@recalculat:

; 1299 : 	w = wp->GetNextWP();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax
$LN31@recalculat:

; 1300 : 	while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN30@recalculat

; 1301 : 	{
; 1302 : 		nw = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _nw$[ebp], eax

; 1303 : 		if (w->GetWPFlags() & WPF_TIME_LOCKED)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	SHORT $LN29@recalculat

; 1304 : 			break;

	jmp	SHORT $LN30@recalculat
$LN29@recalculat:

; 1305 : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 1306 : 	}

	jmp	SHORT $LN31@recalculat
$LN30@recalculat:

; 1307 : 	if ((pw->GetWPFlags() & WPF_TIME_LOCKED) && (nw->GetWPFlags() & WPF_TIME_LOCKED))

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	$LN28@recalculat
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	$LN28@recalculat

; 1308 : 	{
; 1309 : 		// We're between timelocked stuff. smooth the speeds
; 1310 : 		startTime = pw->GetWPDepartureTime();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	DWORD PTR _startTime$[ebp], eax

; 1311 : 		endTime = nw->GetWPArrivalTime();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	DWORD PTR _endTime$[ebp], eax

; 1312 : 		// Now calculate the total adjustable distance and time
; 1313 : 		dist = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dist$[ebp], xmm0

; 1314 : 		pw->GetWPLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1315 : 		w = pw->GetNextWP();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax
$LN27@recalculat:

; 1316 : 		while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN26@recalculat

; 1317 : 		{
; 1318 : 			w->GetWPLocation(&nx,&ny);

	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1319 : 			d = Distance(x,y,nx,ny);

	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1320 : 			if (w->GetWPFlags() & WPF_SPEED_LOCKED)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32768				; 00008000H
	je	SHORT $LN25@recalculat

; 1321 : 				lockedTime += FloatToInt32((d * CampaignHours) / w->GetWPSpeed());		// This time is locked up

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	mov	ecx, DWORD PTR _w$[ebp]
	movss	DWORD PTR tv463[ebp], xmm0
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv325[ebp]
	movss	xmm0, DWORD PTR tv463[ebp]
	divss	xmm0, DWORD PTR tv325[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	eax, DWORD PTR _lockedTime$[ebp]
	mov	DWORD PTR _lockedTime$[ebp], eax

; 1322 : 			else

	jmp	SHORT $LN24@recalculat
$LN25@recalculat:

; 1323 : 				dist += d;

	movss	xmm0, DWORD PTR _dist$[ebp]
	addss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0
$LN24@recalculat:

; 1324 : 			x = nx;

	mov	ax, WORD PTR _nx$[ebp]
	mov	WORD PTR _x$[ebp], ax

; 1325 : 			y = ny;

	mov	cx, WORD PTR _ny$[ebp]
	mov	WORD PTR _y$[ebp], cx

; 1326 : 			if (w == nw)

	mov	edx, DWORD PTR _w$[ebp]
	cmp	edx, DWORD PTR _nw$[ebp]
	jne	SHORT $LN23@recalculat

; 1327 : 				break;

	jmp	SHORT $LN26@recalculat
$LN23@recalculat:

; 1328 : 			w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 1329 : 		}

	jmp	$LN27@recalculat
$LN26@recalculat:

; 1330 : 		// Now calculate our new average speed and apply it
; 1331 : 		if (startTime > endTime)

	mov	eax, DWORD PTR _startTime$[ebp]
	cmp	eax, DWORD PTR _endTime$[ebp]
	jbe	SHORT $LN22@recalculat

; 1332 : 			speed = (dist * CampaignHours) / (((startTime - endTime)*-1) - lockedTime);

	movss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	mov	ecx, DWORD PTR _startTime$[ebp]
	sub	ecx, DWORD PTR _endTime$[ebp]
	imul	ecx, -1
	sub	ecx, DWORD PTR _lockedTime$[ebp]
	mov	DWORD PTR tv337[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv337[ebp]
	mov	edx, DWORD PTR tv337[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv340[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv340[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _speed$[ebp], xmm0

; 1333 : 		else

	jmp	SHORT $LN21@recalculat
$LN22@recalculat:

; 1334 : 			speed = (dist * CampaignHours) / ((endTime - startTime) - lockedTime);

	movss	xmm0, DWORD PTR _dist$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	mov	eax, DWORD PTR _endTime$[ebp]
	sub	eax, DWORD PTR _startTime$[ebp]
	sub	eax, DWORD PTR _lockedTime$[ebp]
	mov	DWORD PTR tv347[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv347[ebp]
	mov	ecx, DWORD PTR tv347[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv350[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv350[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _speed$[ebp], xmm0
$LN21@recalculat:

; 1335 : 		pw->GetWPLocation(&x,&y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1336 : 		now = startTime;

	mov	ecx, DWORD PTR _startTime$[ebp]
	mov	DWORD PTR _now$[ebp], ecx

; 1337 : 		w = pw->GetNextWP();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax
$LN20@recalculat:

; 1338 : 		while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN19@recalculat

; 1339 : 		{
; 1340 : 			w->GetWPLocation(&nx,&ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1341 : 			d = Distance(x,y,nx,ny);

	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1342 : 			if (!(w->GetWPFlags() & WPF_SPEED_LOCKED))

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 32768				; 00008000H
	jne	SHORT $LN18@recalculat

; 1343 : 			{
; 1344 : 				w->SetWPSpeed(speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPSpeed@WayPointClass@@QAEXM@Z	; WayPointClass::SetWPSpeed

; 1345 : 				if (speed)

	movss	xmm0, DWORD PTR _speed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@recalculat

; 1346 : 					now += FloatToInt32((d * CampaignHours) / speed);

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	divss	xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	eax, DWORD PTR _now$[ebp]
	mov	DWORD PTR _now$[ebp], eax
$LN17@recalculat:

; 1347 : 			}

	jmp	SHORT $LN15@recalculat
$LN18@recalculat:

; 1348 : 			else if (w->GetWPSpeed())

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv382[ebp]
	movss	xmm0, DWORD PTR tv382[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@recalculat

; 1349 : 				now += FloatToInt32((d * CampaignHours) / w->GetWPSpeed());

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	mov	ecx, DWORD PTR _w$[ebp]
	movss	DWORD PTR tv465[ebp], xmm0
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR tv389[ebp]
	movss	xmm0, DWORD PTR tv465[ebp]
	divss	xmm0, DWORD PTR tv389[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	eax, DWORD PTR _now$[ebp]
	mov	DWORD PTR _now$[ebp], eax
$LN15@recalculat:

; 1350 : 			if (w == nw)

	mov	edx, DWORD PTR _w$[ebp]
	cmp	edx, DWORD PTR _nw$[ebp]
	jne	SHORT $LN14@recalculat

; 1351 : 				break;

	jmp	SHORT $LN19@recalculat
$LN14@recalculat:

; 1352 : 			w->SetWPTimes(now);

	mov	eax, DWORD PTR _now$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPTimes@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPTimes

; 1353 : 			now += w->GetWPStationTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPStationTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPStationTime
	add	eax, DWORD PTR _now$[ebp]
	mov	DWORD PTR _now$[ebp], eax

; 1354 : 			x = nx;

	mov	cx, WORD PTR _nx$[ebp]
	mov	WORD PTR _x$[ebp], cx

; 1355 : 			y = ny;

	mov	dx, WORD PTR _ny$[ebp]
	mov	WORD PTR _y$[ebp], dx

; 1356 : 			w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 1357 : 		}

	jmp	$LN20@recalculat
$LN19@recalculat:

; 1358 : 	}
; 1359 : 	else

	jmp	$LN6@recalculat
$LN28@recalculat:

; 1360 : 	{
; 1361 : 		// We've got one or more open ends, adjust times while keeping speeds
; 1362 : 		if (nw && (nw->GetWPFlags() & WPF_TIME_LOCKED))

	cmp	DWORD PTR _nw$[ebp], 0
	je	$LN12@recalculat
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 16384				; 00004000H
	je	$LN12@recalculat

; 1363 : 		{
; 1364 : 			// Push backwards from nw (keep speeds constant)
; 1365 : 			now = nw->GetWPArrivalTime();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPArrivalTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPArrivalTime
	mov	DWORD PTR _now$[ebp], eax

; 1366 : 			nw->GetWPLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1367 : 			w = nw->GetPrevWP();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _w$[ebp], eax
$LN11@recalculat:

; 1368 : 			while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN10@recalculat

; 1369 : 			{
; 1370 : 				w->GetWPLocation(&nx,&ny);

	lea	edx, DWORD PTR _ny$[ebp]
	push	edx
	lea	eax, DWORD PTR _nx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1371 : 				d = Distance(x,y,nx,ny);

	movzx	ecx, WORD PTR _ny$[ebp]
	push	ecx
	movzx	edx, WORD PTR _nx$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1372 : 				speed = nw->GetWPSpeed();

	mov	ecx, DWORD PTR _nw$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR _speed$[ebp]

; 1373 : 				if (speed)

	movss	xmm0, DWORD PTR _speed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@recalculat

; 1374 : 					now -= FloatToInt32((d * CampaignHours) / speed);

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	divss	xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _now$[ebp]
	sub	edx, eax
	mov	DWORD PTR _now$[ebp], edx
$LN9@recalculat:

; 1375 : 				now -= w->GetWPStationTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPStationTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPStationTime
	mov	ecx, DWORD PTR _now$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _now$[ebp], ecx

; 1376 : 				w->SetWPTimes(now);

	mov	edx, DWORD PTR _now$[ebp]
	push	edx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPTimes@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPTimes

; 1377 : 				if (w == pw)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	eax, DWORD PTR _pw$[ebp]
	jne	SHORT $LN8@recalculat

; 1378 : 					break;

	jmp	SHORT $LN10@recalculat
$LN8@recalculat:

; 1379 : 				x = nx;

	mov	cx, WORD PTR _nx$[ebp]
	mov	WORD PTR _x$[ebp], cx

; 1380 : 				y = ny;

	mov	dx, WORD PTR _ny$[ebp]
	mov	WORD PTR _y$[ebp], dx

; 1381 : 				nw = w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _nw$[ebp], eax

; 1382 : 				w = w->GetPrevWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _w$[ebp], eax

; 1383 : 			}

	jmp	$LN11@recalculat
$LN10@recalculat:

; 1384 : 		}
; 1385 : 		else if (pw)

	jmp	$LN6@recalculat
$LN12@recalculat:
	cmp	DWORD PTR _pw$[ebp], 0
	je	$LN6@recalculat

; 1386 : 		{
; 1387 : 			// Push forward from pw
; 1388 : 			now = pw->GetWPDepartureTime();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	DWORD PTR _now$[ebp], eax

; 1389 : 			pw->GetWPLocation(&x,&y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1390 : 			w = pw->GetNextWP();

	mov	ecx, DWORD PTR _pw$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax
$LN5@recalculat:

; 1391 : 			while (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN4@recalculat

; 1392 : 			{
; 1393 : 				w->GetWPLocation(&nx,&ny);

	lea	eax, DWORD PTR _ny$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 1394 : 				d = Distance(x,y,nx,ny);

	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?Distance@@YAMFFFF@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _d$[ebp]

; 1395 : 				speed = w->GetWPSpeed();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPSpeed@WayPointClass@@QAEMXZ	; WayPointClass::GetWPSpeed
	fstp	DWORD PTR _speed$[ebp]

; 1396 : 				if (speed)

	movss	xmm0, DWORD PTR _speed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@recalculat

; 1397 : 					now += FloatToInt32((d * CampaignHours) / speed);

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR __real@4a5bba00
	divss	xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	eax, DWORD PTR _now$[ebp]
	mov	DWORD PTR _now$[ebp], eax
$LN3@recalculat:

; 1398 : 				w->SetWPTimes(now);

	mov	eax, DWORD PTR _now$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPTimes@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPTimes

; 1399 : 				now = w->GetWPDepartureTime();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	DWORD PTR _now$[ebp], eax

; 1400 : 				if (w == nw)

	mov	ecx, DWORD PTR _w$[ebp]
	cmp	ecx, DWORD PTR _nw$[ebp]
	jne	SHORT $LN2@recalculat

; 1401 : 					break;

	jmp	SHORT $LN4@recalculat
$LN2@recalculat:

; 1402 : 				x = nx;

	mov	dx, WORD PTR _nx$[ebp]
	mov	WORD PTR _x$[ebp], dx

; 1403 : 				y = ny;

	mov	ax, WORD PTR _ny$[ebp]
	mov	WORD PTR _y$[ebp], ax

; 1404 : 				w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 1405 : 			}

	jmp	$LN5@recalculat
$LN4@recalculat:
$LN6@recalculat:
$LN36@recalculat:

; 1406 : 		}
; 1407 : 		else
; 1408 : 			ShiAssert(0);
; 1409 : 	}
; 1410 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate_waypoint@@YAXPAVWayPointClass@@HH@Z ENDP	; recalculate_waypoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_minSpeed$ = -12					; size = 4
_maxSpeed$ = -8						; size = 4
_flt$ = -4						; size = 4
_wp$ = 8						; size = 4
?recalculate_waypoints@@YAXPAVWayPointClass@@@Z PROC	; recalculate_waypoints

; 1250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1251 : 	FlightClass		*flt;
; 1252 : 	int				minSpeed,maxSpeed;
; 1253 : 
; 1254 : 	flt = (Flight) vuDatabase->Find (gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1255 : 	//if (!flt || !wp || !flt->IsFlight())
; 1256 : 	if (!flt || !wp) // JB 010326 Allow ground units

	cmp	DWORD PTR _flt$[ebp], 0
	je	SHORT $LN1@recalculat
	cmp	DWORD PTR _wp$[ebp], 0
	jne	SHORT $LN2@recalculat
$LN1@recalculat:

; 1257 : 		return;

	jmp	SHORT $LN3@recalculat
$LN2@recalculat:

; 1258 : 	//TJL 11/22/03 Remove /2 division
; 1259 : 	//minSpeed = flt->GetCruiseSpeed()/2;
; 1260 : 	minSpeed = flt->GetCruiseSpeed();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetCruiseSpeed@UnitClass@@QBEHXZ	; UnitClass::GetCruiseSpeed
	mov	DWORD PTR _minSpeed$[ebp], eax

; 1261 : 	maxSpeed = flt->GetMaxSpeed();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetMaxSpeed@UnitClass@@QBEHXZ		; UnitClass::GetMaxSpeed
	mov	DWORD PTR _maxSpeed$[ebp], eax

; 1262 : 
; 1263 : 	// Do the recalculation
; 1264 : 	recalculate_waypoint_list(wp, minSpeed, maxSpeed);

	mov	edx, DWORD PTR _maxSpeed$[ebp]
	push	edx
	mov	eax, DWORD PTR _minSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	call	?recalculate_waypoint_list@@YAXPAVWayPointClass@@HH@Z ; recalculate_waypoint_list
	add	esp, 12					; 0000000cH

; 1265 : 
; 1266 : 	// Check for errors
; 1267 : 	ValidateWayPoints(flt);

	mov	edx, DWORD PTR _flt$[ebp]
	push	edx
	call	?ValidateWayPoints@@YAXPAVFlightClass@@@Z ; ValidateWayPoints
	add	esp, 4

; 1268 : 
; 1269 : 	// Refresh
; 1270 : 	refresh_waypoint(wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	call	?refresh_waypoint@@YAXPAVWayPointClass@@@Z ; refresh_waypoint
	add	esp, 4
$LN3@recalculat:

; 1271 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?recalculate_waypoints@@YAXPAVWayPointClass@@@Z ENDP	; recalculate_waypoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_win$ = -24						; size = 4
_campID$ = -20						; size = 4
_flt$ = -16						; size = 4
_w$ = -12						; size = 4
_i$ = -8						; size = 4
_cwp$ = -4						; size = 4
_wp$ = 8						; size = 4
?refresh_waypoint@@YAXPAVWayPointClass@@@Z PROC		; refresh_waypoint

; 1152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1153 : 	C_Window		*win=NULL;

	mov	DWORD PTR _win$[ebp], 0

; 1154 : 	C_Waypoint		*cwp=NULL;

	mov	DWORD PTR _cwp$[ebp], 0

; 1155 : 	FlightClass		*flt=NULL;

	mov	DWORD PTR _flt$[ebp], 0

; 1156 : 	WayPointClass	*w=NULL;

	mov	DWORD PTR _w$[ebp], 0

; 1157 : 	int				i=0,campID=0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _campID$[ebp], 0

; 1158 : 
; 1159 : 	flt = (Flight) vuDatabase->Find(gActiveFlightID);

	mov	eax, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?gActiveFlightID@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flt$[ebp], eax

; 1160 : 	if (!flt)

	cmp	DWORD PTR _flt$[ebp], 0
	jne	SHORT $LN11@refresh_wa

; 1161 : 		return;

	jmp	$LN12@refresh_wa
$LN11@refresh_wa:

; 1162 : 
; 1163 : 	w = flt->GetFirstUnitWP ();

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 1164 : 	i = 1;

	mov	DWORD PTR _i$[ebp], 1
$LN10@refresh_wa:

; 1165 : 	while (w && w != wp)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN9@refresh_wa
	mov	edx, DWORD PTR _w$[ebp]
	cmp	edx, DWORD PTR _wp$[ebp]
	je	SHORT $LN9@refresh_wa

; 1166 : 	{
; 1167 : 		w = w->GetNextWP ();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 1168 : 		i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1169 : 	}

	jmp	SHORT $LN10@refresh_wa
$LN9@refresh_wa:

; 1170 : 	if (!w)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN8@refresh_wa

; 1171 : 		return;

	jmp	$LN12@refresh_wa
$LN8@refresh_wa:

; 1172 : 
; 1173 : 	// Paint leg red, if we have errors
; 1174 : 	campID = flt->GetCampID();

	mov	ecx, DWORD PTR _flt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flt$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	mov	DWORD PTR _campID$[ebp], ecx

; 1175 : 	cwp = gMapMgr->GetCurWP();

	mov	ecx, DWORD PTR ?gMapMgr@@3PAVC_Map@@A	; gMapMgr
	call	?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ	; C_Map::GetCurWP
	mov	DWORD PTR _cwp$[ebp], eax

; 1176 : 	if (!cwp)

	cmp	DWORD PTR _cwp$[ebp], 0
	jne	SHORT $LN7@refresh_wa

; 1177 : 		return;

	jmp	$LN12@refresh_wa
$LN7@refresh_wa:

; 1178 : 	if (!IsValidWP(w,flt))

	mov	edx, DWORD PTR _flt$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	?IsValidWP@@YAHPAVWayPointClass@@PAVFlightClass@@@Z ; IsValidWP
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@refresh_wa

; 1179 : 	{
; 1180 : 		cwp->SetState(campID*256+i,2);

	push	2
	mov	ecx, DWORD PTR _campID$[ebp]
	shl	ecx, 8
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1181 : 		cwp->SetState(0x40000000+(campID*256)+i,2);

	push	2
	mov	edx, DWORD PTR _campID$[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1073741824]
	push	ecx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState
	jmp	SHORT $LN5@refresh_wa
$LN6@refresh_wa:

; 1182 : 	}
; 1183 : 	else if (w == flt->GetCurrentUnitWP())

	mov	ecx, DWORD PTR _flt$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	cmp	DWORD PTR _w$[ebp], eax
	jne	SHORT $LN4@refresh_wa

; 1184 : 	{
; 1185 : 		cwp->SetState(campID*256+i,0);

	push	0
	mov	edx, DWORD PTR _campID$[ebp]
	shl	edx, 8
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1186 : 		cwp->SetState(0x40000000+(campID*256)+i,1);

	push	1
	mov	eax, DWORD PTR _campID$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1073741824]
	push	edx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1187 : 	}
; 1188 : 	else

	jmp	SHORT $LN5@refresh_wa
$LN4@refresh_wa:

; 1189 : 	{
; 1190 : 		cwp->SetState(campID*256+i,0);

	push	0
	mov	eax, DWORD PTR _campID$[ebp]
	shl	eax, 8
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState

; 1191 : 		cwp->SetState(0x40000000+(campID*256)+i,0);

	push	0
	mov	ecx, DWORD PTR _campID$[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1073741824]
	push	eax
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?SetState@C_Waypoint@@QAEXJF@Z		; C_Waypoint::SetState
$LN5@refresh_wa:

; 1192 : 	}
; 1193 : 	cwp->Refresh();

	mov	ecx, DWORD PTR _cwp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cwp$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1194 : 
; 1195 : 	gActiveWPNum = static_cast<short>(i);

	mov	cx, WORD PTR _i$[ebp]
	mov	WORD PTR ?gActiveWPNum@@3FA, cx		; gActiveWPNum

; 1196 : 
; 1197 : 	if (gMainHandler)

	cmp	DWORD PTR ?gMainHandler@@3PAVC_Handler@@A, 0 ; gMainHandler
	je	SHORT $LN2@refresh_wa

; 1198 : 		win = gMainHandler->FindWindow (FLIGHT_PLAN_WIN);

	push	13000					; 000032c8H
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax
$LN2@refresh_wa:

; 1199 : 
; 1200 : 	if (win)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN12@refresh_wa

; 1201 : 	{
; 1202 : 		UpdateWaypointWindowInfo (win, wp, gActiveWPNum);

	push	1
	movsx	edx, WORD PTR ?gActiveWPNum@@3FA	; gActiveWPNum
	push	edx
	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?UpdateWaypointWindowInfo@@YAXPAVC_Window@@PAVWayPointClass@@HH@Z ; UpdateWaypointWindowInfo
	add	esp, 16					; 00000010H

; 1203 : 		win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN12@refresh_wa:

; 1204 : 	}
; 1205 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?refresh_waypoint@@YAXPAVWayPointClass@@@Z ENDP		; refresh_waypoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
tv267 = -72						; size = 8
tv263 = -64						; size = 4
tv254 = -60						; size = 4
tv242 = -56						; size = 4
tv237 = -52						; size = 4
tv228 = -48						; size = 4
tv216 = -44						; size = 4
tv204 = -40						; size = 4
tv197 = -36						; size = 4
_qpasl1$ = -32						; size = 4
_pa$ = -28						; size = 4
_rsigma$ = -24						; size = 4
_oper$ = -20						; size = 4
_qc$ = -16						; size = 4
_vcas$ = -12						; size = 4
_ttheta$ = -8						; size = 4
_mach$ = -4						; size = 4
_speed$ = 8						; size = 4
_altitude$ = 12						; size = 4
?get_air_speed@@YAMMH@Z PROC				; get_air_speed

; 1807 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 1808 : 	float rsigma, pa, mach, qc, qpasl1, vcas, oper, ttheta; 
; 1809 : 
; 1810 : 	if (altitude <= 36089){

	cmp	DWORD PTR _altitude$[ebp], 36089	; 00008cf9H
	jg	SHORT $LN6@get_air_sp

; 1811 : 		ttheta = 1.0F - 0.000006875F * altitude;

	cvtsi2ss xmm0, DWORD PTR _altitude$[ebp]
	mulss	xmm0, DWORD PTR __real@36e6afcd
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _ttheta$[ebp], xmm1

; 1812 : 		rsigma = static_cast<float>(pow (ttheta, 4.256F));

	push	ecx
	movss	xmm0, DWORD PTR __real@40883127
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ttheta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR _rsigma$[ebp]

; 1813 : 	}	
; 1814 : 	else {

	jmp	SHORT $LN5@get_air_sp
$LN6@get_air_sp:

; 1815 : 		ttheta = 0.7519F;

	movss	xmm0, DWORD PTR __real@3f407c85
	movss	DWORD PTR _ttheta$[ebp], xmm0

; 1816 : 		rsigma = static_cast<float>(0.2971F * pow (2.718F, 0.00004806F * (36089.0F - altitude)));

	cvtsi2ss xmm0, DWORD PTR _altitude$[ebp]
	movss	xmm1, DWORD PTR __real@470cf900
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@38499408
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR __real@402df3b6
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv197[ebp]
	movss	xmm0, DWORD PTR tv197[ebp]
	mulss	xmm0, DWORD PTR __real@3e981d7e
	movss	DWORD PTR _rsigma$[ebp], xmm0
$LN5@get_air_sp:

; 1817 : 	}
; 1818 : 
; 1819 : 	mach = static_cast<float>(speed / (sqrt (ttheta) * AASLK));

	push	ecx
	movss	xmm0, DWORD PTR _ttheta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv204[ebp]
	movss	xmm0, DWORD PTR tv204[ebp]
	mulss	xmm0, DWORD PTR __real@44255eb8
	movss	xmm1, DWORD PTR _speed$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _mach$[ebp], xmm1

; 1820 : 	pa  = ttheta * rsigma * PASL;

	movss	xmm0, DWORD PTR _ttheta$[ebp]
	mulss	xmm0, DWORD PTR _rsigma$[ebp]
	mulss	xmm0, DWORD PTR __real@45044385
	movss	DWORD PTR _pa$[ebp], xmm0

; 1821 : 
; 1822 : 	if (mach <= 1.0F){

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _mach$[ebp]
	jb	SHORT $LN4@get_air_sp

; 1823 : 		qc = ((float)pow((1.0F + 0.2F * mach * mach), 3.5F) - 1.0F)*pa;

	push	ecx
	movss	xmm0, DWORD PTR __real@40600000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _mach$[ebp]
	mulss	xmm0, DWORD PTR _mach$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv216[ebp]
	movss	xmm0, DWORD PTR tv216[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _pa$[ebp]
	movss	DWORD PTR _qc$[ebp], xmm0

; 1824 : 	}
; 1825 : 	else {

	jmp	$LN3@get_air_sp
$LN4@get_air_sp:

; 1826 : 		qc = static_cast<float>(((166.9*mach*mach)/(float)(pow((7.0F - 1.0F/(mach*mach)), 2.5F)) - 1.0F)*pa);

	cvtss2sd xmm0, DWORD PTR _mach$[ebp]
	mulsd	xmm0, QWORD PTR __real@4064dccccccccccd
	cvtss2sd xmm1, DWORD PTR _mach$[ebp]
	mulsd	xmm0, xmm1
	push	ecx
	movss	xmm1, DWORD PTR __real@40200000
	movss	DWORD PTR [esp], xmm1
	movss	xmm1, DWORD PTR _mach$[ebp]
	mulss	xmm1, DWORD PTR _mach$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, xmm1
	movss	xmm1, DWORD PTR __real@40e00000
	subss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movsd	QWORD PTR tv267[ebp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv228[ebp]
	movss	xmm0, DWORD PTR tv228[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR tv267[ebp]
	divsd	xmm1, xmm0
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	cvtss2sd xmm0, DWORD PTR _pa$[ebp]
	mulsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _qc$[ebp], xmm0
$LN3@get_air_sp:

; 1827 : 	}
; 1828 : 
; 1829 : 	qpasl1 = qc / PASL + 1.0F;

	movss	xmm0, DWORD PTR _qc$[ebp]
	divss	xmm0, DWORD PTR __real@45044385
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _qpasl1$[ebp], xmm0

; 1830 : 	vcas = static_cast<float>(1479.12F * sqrt (pow (qpasl1, 0.285714F) - 1.0F));

	push	ecx
	movss	xmm0, DWORD PTR __real@3e92491b
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _qpasl1$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv237[ebp]
	movss	xmm0, DWORD PTR tv237[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv242[ebp]
	movss	xmm0, DWORD PTR tv242[ebp]
	mulss	xmm0, DWORD PTR __real@44b8e3d7
	movss	DWORD PTR _vcas$[ebp], xmm0

; 1831 : 
; 1832 : 	if (qc > 1889.64F){

	movss	xmm0, DWORD PTR _qc$[ebp]
	comiss	xmm0, DWORD PTR __real@44ec347b
	jbe	$LN2@get_air_sp

; 1833 : 		oper = static_cast<float>(qpasl1 * pow ((7.0F - AASLK * AASLK / (vcas * vcas)), 2.5F));

	push	ecx
	movss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _vcas$[ebp]
	mulss	xmm0, DWORD PTR _vcas$[ebp]
	movss	xmm1, DWORD PTR __real@48d5a678
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@40e00000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv254[ebp]
	movss	xmm0, DWORD PTR tv254[ebp]
	mulss	xmm0, DWORD PTR _qpasl1$[ebp]
	movss	DWORD PTR _oper$[ebp], xmm0

; 1834 : 
; 1835 : 		// sfr: holy shit, is this correct?
; 1836 : 		if (oper < 0.0F) oper = 0.1F;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _oper$[ebp]
	jbe	SHORT $LN1@get_air_sp
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _oper$[ebp], xmm0
$LN1@get_air_sp:

; 1837 : 		{
; 1838 : 			vcas = static_cast<float>(51.1987F * sqrt(oper));

	push	ecx
	movss	xmm0, DWORD PTR _oper$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv263[ebp]
	movss	xmm0, DWORD PTR tv263[ebp]
	mulss	xmm0, DWORD PTR __real@424ccb78
	movss	DWORD PTR _vcas$[ebp], xmm0
$LN2@get_air_sp:

; 1839 : 		}
; 1840 : 	}
; 1841 : 
; 1842 : 	return vcas;

	fld	DWORD PTR _vcas$[ebp]

; 1843 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?get_air_speed@@YAMMH@Z ENDP				; get_air_speed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\common\waypoint.cpp
_TEXT	SEGMENT
_vcas$ = -12						; size = 4
_error$ = -8						; size = 4
_vtas$ = -4						; size = 4
_speed$ = 8						; size = 4
_altitude$ = 12						; size = 4
?get_ground_speed@@YAMMH@Z PROC				; get_ground_speed

; 1783 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1784 : 	float vcas,	vtas, error;
; 1785 : 	vtas = speed;

	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR _vtas$[ebp], xmm0

; 1786 : 	error = speed / 2.0F;

	movss	xmm0, DWORD PTR _speed$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _error$[ebp], xmm0
$LN4@get_ground:

; 1787 : 
; 1788 : 	while (error > 0.1F){

	movss	xmm0, DWORD PTR _error$[ebp]
	comiss	xmm0, DWORD PTR __real@3dcccccd
	jbe	SHORT $LN3@get_ground

; 1789 : 		vcas = get_air_speed (vtas, altitude);

	mov	eax, DWORD PTR _altitude$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _vtas$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 8
	fstp	DWORD PTR _vcas$[ebp]

; 1790 : 		if (vcas < speed){

	movss	xmm0, DWORD PTR _speed$[ebp]
	comiss	xmm0, DWORD PTR _vcas$[ebp]
	jbe	SHORT $LN2@get_ground

; 1791 : 			vtas += error;

	movss	xmm0, DWORD PTR _vtas$[ebp]
	addss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _vtas$[ebp], xmm0

; 1792 : 		}
; 1793 : 		else{

	jmp	SHORT $LN1@get_ground
$LN2@get_ground:

; 1794 : 			vtas -= error;

	movss	xmm0, DWORD PTR _vtas$[ebp]
	subss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _vtas$[ebp], xmm0
$LN1@get_ground:

; 1795 : 		}
; 1796 : 		error /= 2.0F;

	movss	xmm0, DWORD PTR _error$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _error$[ebp], xmm0

; 1797 : 	}

	jmp	SHORT $LN4@get_ground
$LN3@get_ground:

; 1798 : 	return vtas;

	fld	DWORD PTR _vtas$[ebp]

; 1799 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?get_ground_speed@@YAMMH@Z ENDP				; get_ground_speed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cmap.h
;	COMDAT ?GetMaxY@C_Map@@QAEMXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?GetMaxY@C_Map@@QAEMXZ PROC				; C_Map::GetMaxY, COMDAT
; _this$ = ecx

; 202  : 		float GetMaxY() { return(maxy); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+732]
	movss	DWORD PTR tv68[ebp], xmm0
	fld	DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMaxY@C_Map@@QAEMXZ ENDP				; C_Map::GetMaxY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cmap.h
;	COMDAT ?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ PROC			; C_Map::GetCurWPID, COMDAT
; _this$ = ecx

; 171  : 		VU_ID GetCurWPID() { return(WPUnitID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1084]
	mov	edx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetCurWPID@C_Map@@QAE?AVVU_ID@@XZ ENDP			; C_Map::GetCurWPID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cmap.h
;	COMDAT ?GetCurWPZ@C_Map@@QAEPAVC_Waypoint@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurWPZ@C_Map@@QAEPAVC_Waypoint@@XZ PROC		; C_Map::GetCurWPZ, COMDAT
; _this$ = ecx

; 170  : 		C_Waypoint *GetCurWPZ() { return(CurWPZ_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1096]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurWPZ@C_Map@@QAEPAVC_Waypoint@@XZ ENDP		; C_Map::GetCurWPZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cmap.h
;	COMDAT ?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ PROC		; C_Map::GetCurWP, COMDAT
; _this$ = ecx

; 169  : 		C_Waypoint *GetCurWP() { return(CurWP_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1092]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurWP@C_Map@@QAEPAVC_Waypoint@@XZ ENDP		; C_Map::GetCurWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95_ext\cwaypnt.h
;	COMDAT ?GetLast@C_Waypoint@@QAEPAVWAYPOINTLIST@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLast@C_Waypoint@@QAEPAVWAYPOINTLIST@@XZ PROC	; C_Waypoint::GetLast, COMDAT
; _this$ = ecx

; 92   : 		WAYPOINTLIST *GetLast() { return(LastWP_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLast@C_Waypoint@@QAEPAVWAYPOINTLIST@@XZ ENDP	; C_Waypoint::GetLast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\chandler.h
;	COMDAT ?GetAppWnd@C_Handler@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAppWnd@C_Handler@@QAEPAUHWND__@@XZ PROC		; C_Handler::GetAppWnd, COMDAT
; _this$ = ecx

; 244  : 		HWND GetAppWnd() { return(AppWindow_);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAppWnd@C_Handler@@QAEPAUHWND__@@XZ ENDP		; C_Handler::GetAppWnd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cclock.h
;	COMDAT ?SetSecond@C_Clock@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?SetSecond@C_Clock@@QAEXJ@Z PROC			; C_Clock::SetSecond, COMDAT
; _this$ = ecx

; 65   : 		void SetSecond(long sc)		{ if(Second_) Second_->SetInteger(sc); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+132], 0
	je	SHORT $LN2@SetSecond
	mov	ecx, DWORD PTR _sc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+132]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN2@SetSecond:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSecond@C_Clock@@QAEXJ@Z ENDP			; C_Clock::SetSecond
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cclock.h
;	COMDAT ?SetMinute@C_Clock@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mn$ = 8						; size = 4
?SetMinute@C_Clock@@QAEXJ@Z PROC			; C_Clock::SetMinute, COMDAT
; _this$ = ecx

; 64   : 		void SetMinute(long mn)		{ if(Minute_) Minute_->SetInteger(mn); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN2@SetMinute
	mov	ecx, DWORD PTR _mn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+128]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN2@SetMinute:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMinute@C_Clock@@QAEXJ@Z ENDP			; C_Clock::SetMinute
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cclock.h
;	COMDAT ?SetHour@C_Clock@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
?SetHour@C_Clock@@QAEXJ@Z PROC				; C_Clock::SetHour, COMDAT
; _this$ = ecx

; 63   : 		void SetHour(long hr)		{ if(Hour_) Hour_->SetInteger(hr); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN2@SetHour
	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN2@SetHour:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHour@C_Clock@@QAEXJ@Z ENDP				; C_Clock::SetHour
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?GetTextID@C_ListBox@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTextID@C_ListBox@@QAEJXZ PROC			; C_ListBox::GetTextID, COMDAT
; _this$ = ecx

; 109  : 		long GetTextID() { return(LabelVal_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextID@C_ListBox@@QAEJXZ ENDP			; C_ListBox::GetTextID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetType@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@C_Base@@QAEFXZ PROC				; C_Base::GetType, COMDAT
; _this$ = ecx

; 135  : 		short GetType()				{ return(Type_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+22]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@C_Base@@QAEFXZ ENDP				; C_Base::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ PROC	; UnitClass::GetFirstUnitWP, COMDAT
; _this$ = ecx

; 431  : 	WayPoint GetFirstUnitWP()				{ return wp_list; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ENDP	; UnitClass::GetFirstUnitWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPLocation@WayPointClass@@QBEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetWPLocation@WayPointClass@@QBEXPAF0@Z PROC		; WayPointClass::GetWPLocation, COMDAT
; _this$ = ecx

; 205  : 	void GetWPLocation (GridIndex* x, GridIndex* y) const { *x = GridX; *y = GridY; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWPLocation@WayPointClass@@QBEXPAF0@Z ENDP		; WayPointClass::GetWPLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPDepartureTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPDepartureTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPDepartureTime, COMDAT
; _this$ = ecx

; 203  : 	CampaignTime GetWPDepartureTime()				{ return Depart; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPDepartureTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPDepartureTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPArrivalTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPArrivalTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPArrivalTime, COMDAT
; _this$ = ecx

; 202  : 	CampaignTime GetWPArrivalTime()					{ return Arrive; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPArrivalTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPArrivalTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPStationTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPStationTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPStationTime, COMDAT
; _this$ = ecx

; 201  : 	CampaignTime GetWPStationTime()					{ return (int)(Depart-Arrive); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPStationTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPStationTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAltitude@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAltitude@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPAltitude, COMDAT
; _this$ = ecx

; 199  : 	int GetWPAltitude()								{ return (int)(GridZ*GRIDZ_SCALE_FACTOR); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	imul	eax, 10					; 0000000aH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAltitude@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPSpeed@WayPointClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPSpeed@WayPointClass@@QAEMXZ PROC			; WayPointClass::GetWPSpeed, COMDAT
; _this$ = ecx

; 197  : 	float GetWPSpeed (void)							{ return Speed; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPSpeed@WayPointClass@@QAEMXZ ENDP			; WayPointClass::GetWPSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPSpeed@WayPointClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetWPSpeed@WayPointClass@@QAEXM@Z PROC			; WayPointClass::SetWPSpeed, COMDAT
; _this$ = ecx

; 196  : 	void SetWPSpeed (float s)						{ Speed = s; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax+36], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPSpeed@WayPointClass@@QAEXM@Z ENDP			; WayPointClass::SetWPSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPStationTime@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetWPStationTime@WayPointClass@@QAEXK@Z PROC		; WayPointClass::SetWPStationTime, COMDAT
; _this$ = ecx

; 193  : 	void SetWPStationTime (CampaignTime t)			{ Depart = Arrive + t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPStationTime@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::SetWPStationTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetPrevWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrevWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetPrevWP, COMDAT
; _this$ = ecx

; 176  : 	WayPoint GetPrevWP (void)						{ return PrevWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetPrevWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFormation@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFormation@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPFormation, COMDAT
; _this$ = ecx

; 172  : 	int GetWPFormation (void)						{ return (int)Formation; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+26]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFormation@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPFormation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPRouteAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPRouteAction@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPRouteAction, COMDAT
; _this$ = ecx

; 171  : 	int GetWPRouteAction(void)						{ return (int)RouteAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+25]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPRouteAction@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPRouteAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetBuilding@WayPointClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTargetBuilding@WayPointClass@@QAEEXZ PROC		; WayPointClass::GetWPTargetBuilding, COMDAT
; _this$ = ecx

; 169  : 	uchar GetWPTargetBuilding (void)				{ return TargetBuilding; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+27]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTargetBuilding@WayPointClass@@QAEEXZ ENDP		; WayPointClass::GetWPTargetBuilding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ PROC ; WayPointClass::GetWPTarget, COMDAT
; _this$ = ecx

; 168  : 	CampEntity GetWPTarget (void)					{ return (CampEntity)vuDatabase->Find(TargetID); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ENDP ; WayPointClass::GetWPTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ PROC	; WayPointClass::GetWPTargetID, COMDAT
; _this$ = ecx

; 167  : 	VU_ID GetWPTargetID (void)						{ return TargetID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWPTargetID@WayPointClass@@QAE?AVVU_ID@@XZ ENDP	; WayPointClass::GetWPTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?UnSetWPFlag@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?UnSetWPFlag@WayPointClass@@QAEXK@Z PROC		; WayPointClass::UnSetWPFlag, COMDAT
; _this$ = ecx

; 165  : 	void UnSetWPFlag (ulong f)						{ Flags &= ~((ulong)(f)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _f$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?UnSetWPFlag@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::UnSetWPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPFlag@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?SetWPFlag@WayPointClass@@QAEXK@Z PROC			; WayPointClass::SetWPFlag, COMDAT
; _this$ = ecx

; 164  : 	void SetWPFlag (ulong f)						{ Flags |= (ulong) f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPFlag@WayPointClass@@QAEXK@Z ENDP			; WayPointClass::SetWPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPFormation@WayPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?SetWPFormation@WayPointClass@@QAEXH@Z PROC		; WayPointClass::SetWPFormation, COMDAT
; _this$ = ecx

; 162  : 	void SetWPFormation (int f)						{ Formation = (uchar) f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _f$[ebp]
	mov	BYTE PTR [eax+26], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPFormation@WayPointClass@@QAEXH@Z ENDP		; WayPointClass::SetWPFormation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPRouteAction@WayPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetWPRouteAction@WayPointClass@@QAEXH@Z PROC		; WayPointClass::SetWPRouteAction, COMDAT
; _this$ = ecx

; 161  : 	void SetWPRouteAction (int a)					{ RouteAction = (uchar) a; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _a$[ebp]
	mov	BYTE PTR [eax+25], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPRouteAction@WayPointClass@@QAEXH@Z ENDP		; WayPointClass::SetWPRouteAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPAction@WayPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetWPAction@WayPointClass@@QAEXH@Z PROC		; WayPointClass::SetWPAction, COMDAT
; _this$ = ecx

; 160  : 	void SetWPAction (int a)						{ Action = (uchar) a; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _a$[ebp]
	mov	BYTE PTR [eax+24], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPAction@WayPointClass@@QAEXH@Z ENDP		; WayPointClass::SetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 8
?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z PROC		; WayPointClass::SetWPTarget, COMDAT
; _this$ = ecx

; 158  : 	void SetWPTarget (VU_ID e)						{ TargetID = e; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _e$[ebp+4]
	mov	DWORD PTR [eax+20], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWPTarget@WayPointClass@@QAEXVVU_ID@@@Z ENDP		; WayPointClass::SetWPTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?pow@@YAMMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
?pow@@YAMMM@Z PROC					; pow, COMDAT

; 533  :         {return (powf(_X, _Y)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_powf
	add	esp, 8
	pop	ebp
	ret	0
?pow@@YAMMM@Z ENDP					; pow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _powf
_TEXT	SEGMENT
tv77 = -12						; size = 8
tv79 = -4						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT

; 428  :         {return ((float)pow((double)_X, (double)_Y)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_powf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
