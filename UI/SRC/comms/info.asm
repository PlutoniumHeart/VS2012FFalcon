; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\UI\SRC\comms\info.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?OkCB@@3P6AXXZA					; OkCB
PUBLIC	?CancelCB@@3P6AXXZA				; CancelCB
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?modify@@3HA					; modify
PUBLIC	?GameName@@3PADA				; GameName
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
_BSS	SEGMENT
?OkCB@@3P6AXXZA DD 01H DUP (?)				; OkCB
?CancelCB@@3P6AXXZA DD 01H DUP (?)			; CancelCB
?modify@@3HA DD	01H DUP (?)				; modify
_BSS	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
_DATA	SEGMENT
?GameName@@3PADA DB 'Uninitialized', 00H		; GameName
	ORG $+5
_DATA	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?GameName@VuGameEntity@@QAEPADXZ		; VuGameEntity::GameName
PUBLIC	?Callsign@LogBookData@@QAEPADXZ			; LogBookData::Callsign
PUBLIC	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ	; RulesClass::GetRules
PUBLIC	?GetFlightModelType@RulesClass@@QAEHXZ		; RulesClass::GetFlightModelType
PUBLIC	?GetWeaponEffectiveness@RulesClass@@QAEHXZ	; RulesClass::GetWeaponEffectiveness
PUBLIC	?GetAvionicsType@RulesClass@@QAEHXZ		; RulesClass::GetAvionicsType
PUBLIC	?GetAutopilotMode@RulesClass@@QAEHXZ		; RulesClass::GetAutopilotMode
PUBLIC	?GetRefuelingMode@RulesClass@@QAEHXZ		; RulesClass::GetRefuelingMode
PUBLIC	?GetPadlockMode@RulesClass@@QAEHXZ		; RulesClass::GetPadlockMode
PUBLIC	?BlackoutOn@RulesClass@@QAEHXZ			; RulesClass::BlackoutOn
PUBLIC	?NoBlackout@RulesClass@@QAEHXZ			; RulesClass::NoBlackout
PUBLIC	?UnlimitedFuel@RulesClass@@QAEHXZ		; RulesClass::UnlimitedFuel
PUBLIC	?UnlimitedChaff@RulesClass@@QAEHXZ		; RulesClass::UnlimitedChaff
PUBLIC	?CollisionsOn@RulesClass@@QAEHXZ		; RulesClass::CollisionsOn
PUBLIC	?NoCollisions@RulesClass@@QAEHXZ		; RulesClass::NoCollisions
PUBLIC	?NameTagsOn@RulesClass@@QAEHXZ			; RulesClass::NameTagsOn
PUBLIC	?WeatherOn@RulesClass@@QAEHXZ			; RulesClass::WeatherOn
PUBLIC	?ExternalViewOn@RulesClass@@QAEHXZ		; RulesClass::ExternalViewOn
PUBLIC	?InvulnerableOn@RulesClass@@QAEHXZ		; RulesClass::InvulnerableOn
PUBLIC	?SetSimFlag@RulesClass@@QAEXH@Z			; RulesClass::SetSimFlag
PUBLIC	?ClearSimFlag@RulesClass@@QAEXH@Z		; RulesClass::ClearSimFlag
PUBLIC	?SetGenFlag@RulesClass@@QAEXH@Z			; RulesClass::SetGenFlag
PUBLIC	?ClearGenFlag@RulesClass@@QAEXH@Z		; RulesClass::ClearGenFlag
PUBLIC	?SetMaxPlayers@RulesClass@@QAEXH@Z		; RulesClass::SetMaxPlayers
PUBLIC	?GetFlightModelType@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetFlightModelType
PUBLIC	?GetWeaponEffectiveness@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetWeaponEffectiveness
PUBLIC	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetAvionicsType
PUBLIC	?GetAutopilotMode@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetAutopilotMode
PUBLIC	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetRefuelingMode
PUBLIC	?GetPadlockMode@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetPadlockMode
PUBLIC	?BlackoutOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::BlackoutOn
PUBLIC	?UnlimitedFuel@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::UnlimitedFuel
PUBLIC	?UnlimitedChaff@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::UnlimitedChaff
PUBLIC	?CollisionsOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::CollisionsOn
PUBLIC	?NameTagsOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::NameTagsOn
PUBLIC	?InvulnerableOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::InvulnerableOn
PUBLIC	?WeatherOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::WeatherOn
PUBLIC	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z		; PlayerOptionsClass::SetSimFlag
PUBLIC	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::ClearSimFlag
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetType@C_Base@@QAEFXZ				; C_Base::GetType
PUBLIC	?_GetCType_@C_Base@@QAEFXZ			; C_Base::_GetCType_
PUBLIC	?GetTextID@C_ListBox@@QAEJXZ			; C_ListBox::GetTextID
PUBLIC	?GetInteger@C_EditBox@@QAEJXZ			; C_EditBox::GetInteger
PUBLIC	?GetSliderMax@C_Slider@@QAEJXZ			; C_Slider::GetSliderMax
PUBLIC	?GetSliderMin@C_Slider@@QAEJXZ			; C_Slider::GetSliderMin
PUBLIC	?GetSliderPos@C_Slider@@QAEJXZ			; C_Slider::GetSliderPos
PUBLIC	?GetGroup@C_Window@@QAEJXZ			; C_Window::GetGroup
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?CheckCompliance@@YAXXZ				; CheckCompliance
PUBLIC	?INFOSetupRulesControls@@YAXXZ			; INFOSetupRulesControls
PUBLIC	?INFOSetupControls@@YAXXZ			; INFOSetupControls
PUBLIC	?UpdateRules@@YAXXZ				; UpdateRules
PUBLIC	?ComplyCB@@YAXJFPAVC_Base@@@Z			; ComplyCB
PUBLIC	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z	; CheckButtonCompliance
PUBLIC	?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z		; ListBoxChangeCB
PUBLIC	?SliderChangeCB@@YAXJFPAVC_Base@@@Z		; SliderChangeCB
PUBLIC	?ButtonChangeCB@@YAXJFPAVC_Base@@@Z		; ButtonChangeCB
PUBLIC	?INFOHookupControls@@YAXXZ			; INFOHookupControls
PUBLIC	?SetupInfoWindow@@YAXP6AXXZ0@Z			; SetupInfoWindow
PUBLIC	?CopyRulesToGame@@YAXPAVFalconGameEntity@@@Z	; CopyRulesToGame
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?CurrRules@@3VRulesClass@@A			; CurrRules
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@40800000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__ismbcalnum:PROC
EXTRN	_sprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0RulesClass@@QAE@XZ:PROC			; RulesClass::RulesClass
EXTRN	?Initialize@RulesClass@@QAEXXZ:PROC		; RulesClass::Initialize
EXTRN	?SaveRules@RulesClass@@QAEHPAD@Z:PROC		; RulesClass::SaveRules
EXTRN	?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z:PROC ; RulesClass::LoadRules
EXTRN	?SetPassword@RulesClass@@QAEHPAD@Z:PROC		; RulesClass::SetPassword
EXTRN	?SaveOptions@PlayerOptionsClass@@QAEHPAD@Z:PROC	; PlayerOptionsClass::SaveOptions
EXTRN	?InCompliance@PlayerOptionsClass@@QAEHPAURulesStruct@@@Z:PROC ; PlayerOptionsClass::InCompliance
EXTRN	?ComplyWRules@PlayerOptionsClass@@QAEXPAURulesStruct@@@Z:PROC ; PlayerOptionsClass::ComplyWRules
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetString@C_String@@QAEPADJ@Z:PROC		; C_String::GetString
EXTRN	?SetUserNumber@C_Base@@QAEXJJ@Z:PROC		; C_Base::SetUserNumber
EXTRN	?GetUserNumber@C_Base@@QAEJJ@Z:PROC		; C_Base::GetUserNumber
EXTRN	?SetLabel@C_Button@@QAEXJJ@Z:PROC		; C_Button::SetLabel
EXTRN	?SetValue@C_ListBox@@QAEXJ@Z:PROC		; C_ListBox::SetValue
EXTRN	?SetText@C_EditBox@@QAEXPAD@Z:PROC		; C_EditBox::SetText
EXTRN	?SetInteger@C_EditBox@@QAEXJ@Z:PROC		; C_EditBox::SetInteger
EXTRN	?GetText@C_EditBox@@QAEPADXZ:PROC		; C_EditBox::GetText
EXTRN	?SetFgColor@C_EditBox@@QAEXK@Z:PROC		; C_EditBox::SetFgColor
EXTRN	?SetColor@C_Line@@QAEXK@Z:PROC			; C_Line::SetColor
EXTRN	?SetSliderPos@C_Slider@@QAEXJ@Z:PROC		; C_Slider::SetSliderPos
EXTRN	?RefreshWindow@C_Window@@QAEXXZ:PROC		; C_Window::RefreshWindow
EXTRN	?FindControl@C_Window@@QAEPAVC_Base@@J@Z:PROC	; C_Window::FindControl
EXTRN	?EnableWindowGroup@C_Handler@@QAEXJ@Z:PROC	; C_Handler::EnableWindowGroup
EXTRN	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z:PROC ; C_Handler::FindWindowA
EXTRN	?CheckPassword@FalconGameEntity@@QAEJPAD@Z:PROC	; FalconGameEntity::CheckPassword
EXTRN	?GetTargetGame@UIComms@@QAEPAVVuGameEntity@@XZ:PROC ; UIComms::GetTargetGame
EXTRN	?CloseWindowCB@@YAXJFPAVC_Base@@@Z:PROC		; CloseWindowCB
EXTRN	?AreYouSure@@YAXJJP6AXJFPAVC_Base@@@Z1@Z:PROC	; AreYouSure
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?gLangIDNum@@3HA:DWORD				; gLangIDNum
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuPlayerPoolGroup@@3PAVVuGameEntity@@A:DWORD	; vuPlayerPoolGroup
EXTRN	?LogBook@@3VLogBookData@@A:BYTE			; LogBook
EXTRN	?gRules@@3PAVRulesClass@@A:BYTE			; gRules
EXTRN	?RuleMode@@3W4RulesModes@@A:DWORD		; RuleMode
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gStringMgr@@3PAVC_String@@A:DWORD		; gStringMgr
EXTRN	?gCommsMgr@@3PAVUIComms@@A:DWORD		; gCommsMgr
EXTRN	?gMainHandler@@3PAVC_Handler@@A:DWORD		; gMainHandler
EXTRN	?INFOLoaded@@3HA:DWORD				; INFOLoaded
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?CurrRules@@3VRulesClass@@A DB 04cH DUP (?)		; CurrRules
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_CurrRules$initializer$ DD FLAT:??__ECurrRules@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?CopyRulesToGame@@YAXPAVFalconGameEntity@@@Z PROC	; CopyRulesToGame

; 1924 : {

	push	ebp
	mov	ebp, esp

; 1925 : 	//game->UpdateRules(gRules[RuleMode].GetRules());
; 1926 : }

	pop	ebp
	ret	0
?CopyRulesToGame@@YAXPAVFalconGameEntity@@@Z ENDP	; CopyRulesToGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_win$ = -12						; size = 4
_game$ = -8						; size = 4
tv88 = -4						; size = 4
_tOkCB$ = 8						; size = 4
_tCancelCB$ = 12					; size = 4
?SetupInfoWindow@@YAXP6AXXZ0@Z PROC			; SetupInfoWindow

; 1396 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1397 : 	FalconGameEntity *game;
; 1398 : 	C_Window *win;
; 1399 : 
; 1400 : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 1401 : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN9@SetupInfoW

; 1402 : 	{
; 1403 : 		if(tCancelCB)

	cmp	DWORD PTR _tCancelCB$[ebp], 0
	je	SHORT $LN8@SetupInfoW

; 1404 : 			(*tCancelCB)();

	call	DWORD PTR _tCancelCB$[ebp]
$LN8@SetupInfoW:

; 1405 : 		return;

	jmp	$LN10@SetupInfoW
$LN9@SetupInfoW:

; 1406 : 	}
; 1407 : 	/*if(FalconLocalGame != vuPlayerPoolGroup)
; 1408 : 		CurrRules = &FalconLocalGameEntity->rules;
; 1409 : 	else if(gCommsMgr->GetTargetGame())
; 1410 : 		CurrRules = &((FalconGameEntity *)gCommsMgr->GetTargetGame())->rules;
; 1411 : 	else
; 1412 : 		CurrRules = &gRules[RuleMode];*/
; 1413 : 	game = (FalconGameEntity *)gCommsMgr->GetTargetGame();

	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?GetTargetGame@UIComms@@QAEPAVVuGameEntity@@XZ ; UIComms::GetTargetGame
	mov	DWORD PTR _game$[ebp], eax

; 1414 : 	if(game)

	cmp	DWORD PTR _game$[ebp], 0
	je	SHORT $LN7@SetupInfoW

; 1415 : 	{
; 1416 : 		CurrRules.LoadRules(game->rules.GetRules());

	mov	ecx, DWORD PTR _game$[ebp]
	add	ecx, 356				; 00000164H
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z ; RulesClass::LoadRules

; 1417 : 		modify = FALSE;

	mov	DWORD PTR ?modify@@3HA, 0		; modify

; 1418 : 	}
; 1419 : 	else

	jmp	SHORT $LN6@SetupInfoW
$LN7@SetupInfoW:

; 1420 : 	{
; 1421 : 		modify = TRUE;

	mov	DWORD PTR ?modify@@3HA, 1		; modify

; 1422 : 		CurrRules.LoadRules(gRules[RuleMode].GetRules());

	mov	ecx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	ecx, 76					; 0000004cH
	add	ecx, OFFSET ?gRules@@3PAVRulesClass@@A	; gRules
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z ; RulesClass::LoadRules
$LN6@SetupInfoW:

; 1423 : 	}
; 1424 : 	
; 1425 : 	OkCB = tOkCB;

	mov	eax, DWORD PTR _tOkCB$[ebp]
	mov	DWORD PTR ?OkCB@@3P6AXXZA, eax		; OkCB

; 1426 : 	CancelCB = tCancelCB;

	mov	ecx, DWORD PTR _tCancelCB$[ebp]
	mov	DWORD PTR ?CancelCB@@3P6AXXZA, ecx	; CancelCB

; 1427 : 
; 1428 : 	
; 1429 : 	if(!INFOLoaded)

	cmp	DWORD PTR ?INFOLoaded@@3HA, 0		; INFOLoaded
	jne	$LN5@SetupInfoW

; 1430 : 	{
; 1431 : 		switch(gLangIDNum)

	mov	edx, DWORD PTR ?gLangIDNum@@3HA		; gLangIDNum
	mov	DWORD PTR tv88[ebp], edx
	mov	eax, DWORD PTR tv88[ebp]
	sub	eax, 1
	mov	DWORD PTR tv88[ebp], eax
	cmp	DWORD PTR tv88[ebp], 6
	ja	SHORT $LN3@SetupInfoW
	mov	ecx, DWORD PTR tv88[ebp]
	movzx	edx, BYTE PTR $LN12@SetupInfoW[ecx]
	jmp	DWORD PTR $LN13@SetupInfoW[edx*4]
$LN2@SetupInfoW:

; 1432 : 		{
; 1433 : 			case F4LANG_ENGLISH:
; 1434 : 			case F4LANG_UK:
; 1435 : 			case F4LANG_GERMAN:
; 1436 : 				_stprintf(GameName,"%s%s",LogBook.Callsign(),gStringMgr->GetString(TXT_APPEND_GAME));

	push	397					; 0000018dH
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	push	OFFSET ?GameName@@3PADA			; GameName
	call	_sprintf
	add	esp, 16					; 00000010H

; 1437 : 				break;

	jmp	SHORT $LN3@SetupInfoW
$LN1@SetupInfoW:

; 1438 : 			case F4LANG_FRENCH:
; 1439 : 			case F4LANG_SPANISH:
; 1440 : 			case F4LANG_ITALIAN:
; 1441 : 			case F4LANG_PORTUGESE:
; 1442 : 				_stprintf(GameName,"%s %s",gStringMgr->GetString(TXT_APPEND_GAME),LogBook.Callsign());

	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	push	397					; 0000018dH
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetString@C_String@@QAEPADJ@Z		; C_String::GetString
	push	eax
	push	OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
	push	OFFSET ?GameName@@3PADA			; GameName
	call	_sprintf
	add	esp, 16					; 00000010H
$LN3@SetupInfoW:

; 1443 : 				break;
; 1444 : 		}
; 1445 : 
; 1446 : 		INFOHookupControls();	

	call	?INFOHookupControls@@YAXXZ		; INFOHookupControls

; 1447 : 		INFOLoaded++;

	mov	eax, DWORD PTR ?INFOLoaded@@3HA		; INFOLoaded
	add	eax, 1
	mov	DWORD PTR ?INFOLoaded@@3HA, eax		; INFOLoaded
$LN5@SetupInfoW:

; 1448 : 	}
; 1449 : 
; 1450 : 	INFOSetupControls();

	call	?INFOSetupControls@@YAXXZ		; INFOSetupControls

; 1451 : 
; 1452 : 	gMainHandler->EnableWindowGroup(win->GetGroup());

	mov	ecx, DWORD PTR _win$[ebp]
	call	?GetGroup@C_Window@@QAEJXZ		; C_Window::GetGroup
	push	eax
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?EnableWindowGroup@C_Handler@@QAEXJ@Z	; C_Handler::EnableWindowGroup
$LN10@SetupInfoW:

; 1453 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@SetupInfoW:
	DD	$LN2@SetupInfoW
	DD	$LN1@SetupInfoW
$LN12@SetupInfoW:
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
?SetupInfoWindow@@YAXP6AXXZ0@Z ENDP			; SetupInfoWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_slider$ = -16						; size = 4
_win$ = -12						; size = 4
_lbox$ = -8						; size = 4
_button$ = -4						; size = 4
?INFOHookupControls@@YAXXZ PROC				; INFOHookupControls

; 1199 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1200 : 	C_Window	*win;
; 1201 : 	C_Button	*button;
; 1202 : 	C_ListBox	*lbox;
; 1203 : 	C_Slider	*slider;
; 1204 : 
; 1205 : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 1206 : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN33@INFOHookup

; 1207 : 		return;

	jmp	$LN34@INFOHookup
$LN33@INFOHookup:

; 1208 : 
; 1209 : 	button=(C_Button *)win->FindControl(CLOSE_WINDOW);

	push	80001					; 00013881H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1210 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN32@INFOHookup

; 1211 : 		button->SetCallback(CloseInfoWindowCB);

	push	OFFSET ?CloseInfoWindowCB@@YAXJFPAVC_Base@@@Z ; CloseInfoWindowCB
	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN32@INFOHookup:

; 1212 : 	
; 1213 : 	button=(C_Button *)win->FindControl(INFO_CANCEL);

	push	5005					; 0000138dH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1214 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN31@INFOHookup

; 1215 : 		button->SetCallback(CloseInfoWindowCB);

	push	OFFSET ?CloseInfoWindowCB@@YAXJFPAVC_Base@@@Z ; CloseInfoWindowCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN31@INFOHookup:

; 1216 : 	
; 1217 : 	button=(C_Button *)win->FindControl(INFO_COMPLY);

	push	5006					; 0000138eH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1218 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN30@INFOHookup

; 1219 : 		button->SetCallback(ComplyCB);

	push	OFFSET ?ComplyCB@@YAXJFPAVC_Base@@@Z	; ComplyCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN30@INFOHookup:

; 1220 : 	/*
; 1221 : 	INFO_COMPLY
; 1222 : 	VEHICLE_SIZE_READOUT_REQ
; 1223 : 	VEHICLE_SIZE_REQ
; 1224 : 	VEHICLE_SIZE_CUR
; 1225 : 	VEHICLE_SIZE_READOUT_CUR
; 1226 : 
; 1227 :   all of these need special callbacks to only allow the host to change them
; 1228 : 
; 1229 : 	FUEL_REQ
; 1230 : 	CHAFFLARES_REQ
; 1231 : 	COLLISIONS_REQ
; 1232 : 	BLACKOUT_REQ
; 1233 : 	IDTAGS_REQ
; 1234 : 	WEATHER_REQ
; 1235 : 	INVULNERABILITY_REQ
; 1236 : 	VEHICLE_SIZE_REQ
; 1237 : 	FLTMOD_REQ
; 1238 : 	RADAR_REQ
; 1239 : 	WEAPEFF_REQ
; 1240 : 	AUTOPILOT_REQ
; 1241 : 	REFUELING_REQ
; 1242 : 	PADLOCK_REQ
; 1243 : 	*/
; 1244 : 	lbox=(C_ListBox *)win->FindControl(FLTMOD_CUR);

	push	5012					; 00001394H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1245 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN29@INFOHookup

; 1246 : 		lbox->SetCallback(ListBoxChangeCB);

	push	OFFSET ?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ; ListBoxChangeCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN29@INFOHookup:

; 1247 : 
; 1248 : 	
; 1249 : 	lbox=(C_ListBox *)win->FindControl(RADAR_CUR);

	push	5016					; 00001398H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1250 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN28@INFOHookup

; 1251 : 		lbox->SetCallback(ListBoxChangeCB);

	push	OFFSET ?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ; ListBoxChangeCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN28@INFOHookup:

; 1252 : 	
; 1253 : 	
; 1254 : 	lbox=(C_ListBox *)win->FindControl(WEAPEFF_CUR);

	push	5021					; 0000139dH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1255 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN27@INFOHookup

; 1256 : 		lbox->SetCallback(ListBoxChangeCB);

	push	OFFSET ?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ; ListBoxChangeCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN27@INFOHookup:

; 1257 : 	
; 1258 : 	
; 1259 : 	lbox=(C_ListBox *)win->FindControl(AUTOPILOT_CUR);

	push	5008					; 00001390H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1260 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN26@INFOHookup

; 1261 : 		lbox->SetCallback(ListBoxChangeCB);

	push	OFFSET ?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ; ListBoxChangeCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN26@INFOHookup:

; 1262 : 
; 1263 : 	lbox=(C_ListBox *)win->FindControl(PADLOCK_CUR);

	push	5052					; 000013bcH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1264 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN25@INFOHookup

; 1265 : 		lbox->SetCallback(ListBoxChangeCB);

	push	OFFSET ?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ; ListBoxChangeCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN25@INFOHookup:

; 1266 : 	
; 1267 : 	lbox=(C_ListBox *)win->FindControl(REFUELING_CUR);

	push	5038					; 000013aeH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1268 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN24@INFOHookup

; 1269 : 		lbox->SetCallback(ListBoxChangeCB);

	push	OFFSET ?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ; ListBoxChangeCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN24@INFOHookup:

; 1270 : 	
; 1271 : 	button=(C_Button *)win->FindControl(FUEL_CUR);

	push	5050					; 000013baH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1272 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN23@INFOHookup

; 1273 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN23@INFOHookup:

; 1274 : 	
; 1275 : 	button=(C_Button *)win->FindControl(CHAFFLARES_CUR);

	push	5046					; 000013b6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1276 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN22@INFOHookup

; 1277 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN22@INFOHookup:

; 1278 : 	
; 1279 : 	button=(C_Button *)win->FindControl(COLLISIONS_CUR);

	push	5028					; 000013a4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1280 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN21@INFOHookup

; 1281 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN21@INFOHookup:

; 1282 : 	
; 1283 : 	button=(C_Button *)win->FindControl(BLACKOUT_CUR);

	push	5030					; 000013a6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1284 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN20@INFOHookup

; 1285 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN20@INFOHookup:

; 1286 : 	
; 1287 : 	
; 1288 : 	button=(C_Button *)win->FindControl(IDTAGS_CUR);

	push	5048					; 000013b8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1289 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN19@INFOHookup

; 1290 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN19@INFOHookup:

; 1291 : 	
; 1292 : 	button=(C_Button *)win->FindControl(WEATHER_CUR);

	push	5032					; 000013a8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1293 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN18@INFOHookup

; 1294 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN18@INFOHookup:

; 1295 : 	
; 1296 : 
; 1297 : 	button=(C_Button *)win->FindControl(INVULNERABILITY_CUR); 

	push	5055					; 000013bfH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1298 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN17@INFOHookup

; 1299 : 		button->SetCallback(ButtonChangeCB);

	push	OFFSET ?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ; ButtonChangeCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN17@INFOHookup:

; 1300 : 
; 1301 : 	/* May need to hit this if veh mag is 1
; 1302 : 	button=(C_Button *)win->FindControl(AUTO_SCALE);
; 1303 : 	if(button != NULL)
; 1304 : 	{
; 1305 : 		if(button->GetState() == C_STATE_1)
; 1306 : 			PlayerOptions.SetObjFlag(DISP_OBJ_DYN_SCALING);
; 1307 : 		else
; 1308 : 			PlayerOptions.ClearObjFlag(DISP_OBJ_DYN_SCALING);
; 1309 : 	}*/
; 1310 : 
; 1311 : 	slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_CUR);

	push	5034					; 000013aaH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 1312 : 	if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	SHORT $LN16@INFOHookup

; 1313 : 		slider->SetCallback(SliderChangeCB);

	push	OFFSET ?SliderChangeCB@@YAXJFPAVC_Base@@@Z ; SliderChangeCB
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN16@INFOHookup:

; 1314 : 
; 1315 : 	//required values
; 1316 : 
; 1317 : 	lbox=(C_ListBox *)win->FindControl(FLTMOD_REQ);

	push	5011					; 00001393H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1318 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN15@INFOHookup

; 1319 : 		lbox->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN15@INFOHookup:

; 1320 : 
; 1321 : 	
; 1322 : 	lbox=(C_ListBox *)win->FindControl(RADAR_REQ);

	push	5015					; 00001397H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1323 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN14@INFOHookup

; 1324 : 		lbox->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN14@INFOHookup:

; 1325 : 	
; 1326 : 	
; 1327 : 	lbox=(C_ListBox *)win->FindControl(WEAPEFF_REQ);

	push	5020					; 0000139cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1328 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN13@INFOHookup

; 1329 : 		lbox->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN13@INFOHookup:

; 1330 : 	
; 1331 : 	
; 1332 : 	lbox=(C_ListBox *)win->FindControl(AUTOPILOT_REQ);

	push	5007					; 0000138fH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1333 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN12@INFOHookup

; 1334 : 		lbox->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN12@INFOHookup:

; 1335 : 
; 1336 : 	lbox=(C_ListBox *)win->FindControl(PADLOCK_REQ);

	push	5051					; 000013bbH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1337 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN11@INFOHookup

; 1338 : 		lbox->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN11@INFOHookup:

; 1339 : 	
; 1340 : 	lbox=(C_ListBox *)win->FindControl(REFUELING_REQ);

	push	5037					; 000013adH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1341 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN10@INFOHookup

; 1342 : 		lbox->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN10@INFOHookup:

; 1343 : 	
; 1344 : 	button=(C_Button *)win->FindControl(FUEL_REQ);

	push	5049					; 000013b9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1345 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN9@INFOHookup

; 1346 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN9@INFOHookup:

; 1347 : 	
; 1348 : 	button=(C_Button *)win->FindControl(CHAFFLARES_REQ);

	push	5045					; 000013b5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1349 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN8@INFOHookup

; 1350 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN8@INFOHookup:

; 1351 : 	
; 1352 : 	button=(C_Button *)win->FindControl(COLLISIONS_REQ);

	push	5027					; 000013a3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1353 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN7@INFOHookup

; 1354 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN7@INFOHookup:

; 1355 : 	
; 1356 : 	button=(C_Button *)win->FindControl(BLACKOUT_REQ);

	push	5029					; 000013a5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1357 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN6@INFOHookup

; 1358 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN6@INFOHookup:

; 1359 : 	
; 1360 : 	
; 1361 : 	button=(C_Button *)win->FindControl(IDTAGS_REQ);

	push	5047					; 000013b7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1362 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN5@INFOHookup

; 1363 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN5@INFOHookup:

; 1364 : 	
; 1365 : 	button=(C_Button *)win->FindControl(WEATHER_REQ);

	push	5031					; 000013a7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1366 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN4@INFOHookup

; 1367 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN4@INFOHookup:

; 1368 : 	
; 1369 : 
; 1370 : 	button=(C_Button *)win->FindControl(EXT_VIEWS_REQ);

	push	5057					; 000013c1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1371 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN3@INFOHookup

; 1372 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN3@INFOHookup:

; 1373 : 	
; 1374 : 	button=(C_Button *)win->FindControl(INVULNERABILITY_REQ); 

	push	5054					; 000013beH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1375 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN2@INFOHookup

; 1376 : 		button->SetCallback(RuleControlCB);

	push	OFFSET ?RuleControlCB@@YAXJFPAVC_Base@@@Z ; RuleControlCB
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN2@INFOHookup:

; 1377 : 
; 1378 : 	/* May need to hit this if veh mag is 1
; 1379 : 	button=(C_Button *)win->FindControl(AUTO_SCALE);
; 1380 : 	if(button != NULL)
; 1381 : 	{
; 1382 : 		if(button->GetState() == C_STATE_1)
; 1383 : 			PlayerOptions.SetObjFlag(DISP_OBJ_DYN_SCALING);
; 1384 : 		else
; 1385 : 			PlayerOptions.ClearObjFlag(DISP_OBJ_DYN_SCALING);
; 1386 : 	}*/
; 1387 : 
; 1388 : 	
; 1389 : 	
; 1390 : 	slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_REQ);

	push	5033					; 000013a9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 1391 : 	if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	SHORT $LN34@INFOHookup

; 1392 : 		slider->SetCallback(SliderRuleControlCB);

	push	OFFSET ?SliderRuleControlCB@@YAXJFPAVC_Base@@@Z ; SliderRuleControlCB
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
$LN34@INFOHookup:

; 1393 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?INFOHookupControls@@YAXXZ ENDP				; INFOHookupControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?CloseInfoWindowCB@@YAXJFPAVC_Base@@@Z PROC		; CloseInfoWindowCB

; 1188 : {

	push	ebp
	mov	ebp, esp

; 1189 : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN2@CloseInfoW

; 1190 : 		return;

	jmp	SHORT $LN3@CloseInfoW
$LN2@CloseInfoW:

; 1191 : 
; 1192 : 	if(CancelCB)

	cmp	DWORD PTR ?CancelCB@@3P6AXXZA, 0	; CancelCB
	je	SHORT $LN1@CloseInfoW

; 1193 : 		(*CancelCB)();

	call	DWORD PTR ?CancelCB@@3P6AXXZA		; CancelCB
$LN1@CloseInfoW:

; 1194 : 
; 1195 : 	CloseWindowCB(ID,hittype,control);

	mov	ecx, DWORD PTR _control$[ebp]
	push	ecx
	movzx	edx, WORD PTR _hittype$[ebp]
	push	edx
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	?CloseWindowCB@@YAXJFPAVC_Base@@@Z	; CloseWindowCB
	add	esp, 12					; 0000000cH
$LN3@CloseInfoW:

; 1196 : }

	pop	ebp
	ret	0
?CloseInfoWindowCB@@YAXJFPAVC_Base@@@Z ENDP		; CloseInfoWindowCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?RuleControlCB@@YAXJFPAVC_Base@@@Z PROC			; RuleControlCB

; 1165 : {

	push	ebp
	mov	ebp, esp

; 1166 : 	if(!control)

	cmp	DWORD PTR _control$[ebp], 0
	jne	SHORT $LN6@RuleContro

; 1167 : 		return;

	jmp	$LN7@RuleContro
$LN6@RuleContro:

; 1168 : 
; 1169 : 	if((hittype != C_TYPE_LMOUSEUP) && (hittype != C_TYPE_SELECT))

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN5@RuleContro
	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 28					; 0000001cH
	je	SHORT $LN5@RuleContro

; 1170 : 		return;

	jmp	SHORT $LN7@RuleContro
$LN5@RuleContro:

; 1171 : 
; 1172 : 	if(modify && control->_GetCType_() == _CNTL_BUTTON_) // if host I assume

	cmp	DWORD PTR ?modify@@3HA, 0		; modify
	je	SHORT $LN4@RuleContro
	mov	ecx, DWORD PTR _control$[ebp]
	call	?_GetCType_@C_Base@@QAEFXZ		; C_Base::_GetCType_
	movsx	edx, ax
	cmp	edx, 16387				; 00004003H
	jne	SHORT $LN4@RuleContro

; 1173 : 	{
; 1174 : 		if(control->GetState())

	mov	eax, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	test	ecx, ecx
	je	SHORT $LN3@RuleContro

; 1175 : 			control->SetState(0);

	push	0
	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 1176 : 		else

	jmp	SHORT $LN2@RuleContro
$LN3@RuleContro:

; 1177 : 			control->SetState(1);

	push	1
	mov	eax, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN2@RuleContro:

; 1178 : 		control->Refresh();

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1179 : 	}
; 1180 : 	else

	jmp	SHORT $LN1@RuleContro
$LN4@RuleContro:

; 1181 : 		return;

	jmp	SHORT $LN7@RuleContro
$LN1@RuleContro:

; 1182 : 
; 1183 : 	INFOSaveRules();

	call	?INFOSaveRules@@YAXXZ			; INFOSaveRules

; 1184 : 	CheckCompliance();

	call	?CheckCompliance@@YAXXZ			; CheckCompliance
$LN7@RuleContro:

; 1185 : }

	pop	ebp
	ret	0
?RuleControlCB@@YAXJFPAVC_Base@@@Z ENDP			; RuleControlCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
tv169 = -16						; size = 4
_scale$ = -12						; size = 4
_ebox$1 = -8						; size = 4
_slider$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?SliderRuleControlCB@@YAXJFPAVC_Base@@@Z PROC		; SliderRuleControlCB

; 1138 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi

; 1139 : 	if(hittype != C_TYPE_MOUSEMOVE)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 61					; 0000003dH
	je	SHORT $LN3@SliderRule

; 1140 : 		return;

	jmp	$LN4@SliderRule
$LN3@SliderRule:

; 1141 : 
; 1142 : 	C_Slider	*slider;
; 1143 : 	int			scale;
; 1144 : 
; 1145 : 	slider=(C_Slider *)control;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	DWORD PTR _slider$[ebp], ecx

; 1146 : 	scale = static_cast<int>(((float)slider->GetSliderPos()/(slider->GetSliderMax()-slider->GetSliderMin()) * 4 + 1.5F));

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderPos@C_Slider@@QAEJXZ		; C_Slider::GetSliderPos
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	movss	DWORD PTR tv169[ebp], xmm0
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR tv169[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR __real@3fc00000
	cvttss2si edx, xmm1
	mov	DWORD PTR _scale$[ebp], edx

; 1147 : 
; 1148 : 	if(scale != slider->GetUserNumber(2))

	push	2
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	cmp	DWORD PTR _scale$[ebp], eax
	je	SHORT $LN2@SliderRule

; 1149 : 	{
; 1150 : 		C_EditBox *ebox;
; 1151 : 		ebox = (C_EditBox *)control->Parent_->FindControl(slider->GetUserNumber(0));

	push	0
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	push	eax
	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$1[ebp], eax

; 1152 : 		if(ebox)

	cmp	DWORD PTR _ebox$1[ebp], 0
	je	SHORT $LN1@SliderRule

; 1153 : 		{
; 1154 : 			ebox->SetInteger(scale);

	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ebox$1[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger

; 1155 : 			ebox->Refresh();

	mov	edx, DWORD PTR _ebox$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ebox$1[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN1@SliderRule:

; 1156 : 		}
; 1157 : 
; 1158 : 		INFOSaveRules();

	call	?INFOSaveRules@@YAXXZ			; INFOSaveRules

; 1159 : 		CheckCompliance();

	call	?CheckCompliance@@YAXXZ			; CheckCompliance
$LN2@SliderRule:

; 1160 : 	}
; 1161 : 	slider->SetUserNumber(2,scale);

	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber
$LN4@SliderRule:

; 1162 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?SliderRuleControlCB@@YAXJFPAVC_Base@@@Z ENDP		; SliderRuleControlCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
?INFOSaveRulesToFile@@YAXXZ PROC			; INFOSaveRulesToFile

; 1132 : {

	push	ebp
	mov	ebp, esp

; 1133 : 	if(modify)

	cmp	DWORD PTR ?modify@@3HA, 0		; modify
	je	SHORT $LN2@INFOSaveRu

; 1134 : 		CurrRules.SaveRules(LogBook.Callsign());

	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?SaveRules@RulesClass@@QAEHPAD@Z	; RulesClass::SaveRules
$LN2@INFOSaveRu:

; 1135 : }

	pop	ebp
	ret	0
?INFOSaveRulesToFile@@YAXXZ ENDP			; INFOSaveRulesToFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_btn$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ButtonChangeCB@@YAXJFPAVC_Base@@@Z PROC		; ButtonChangeCB

; 1110 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1111 : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN3@ButtonChan

; 1112 : 		return;

	jmp	SHORT $LN4@ButtonChan
$LN3@ButtonChan:

; 1113 : 
; 1114 : 	C_Button *btn;
; 1115 : 	btn = (C_Button *)control;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	DWORD PTR _btn$[ebp], ecx

; 1116 : 
; 1117 : 	if(btn->GetState() != C_STATE_0)

	mov	edx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	test	eax, eax
	je	SHORT $LN2@ButtonChan

; 1118 : 	{
; 1119 : 		btn->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 1120 : 		btn->Refresh();

	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1121 : 	}
; 1122 : 	else

	jmp	SHORT $LN1@ButtonChan
$LN2@ButtonChan:

; 1123 : 	{
; 1124 : 		btn->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 1125 : 		btn->Refresh();		// MN was missed 

	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@ButtonChan:

; 1126 : 	}
; 1127 : 
; 1128 : 	CheckCompliance();

	call	?CheckCompliance@@YAXXZ			; CheckCompliance
$LN4@ButtonChan:

; 1129 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ButtonChangeCB@@YAXJFPAVC_Base@@@Z ENDP		; ButtonChangeCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
tv171 = -16						; size = 4
_scale$ = -12						; size = 4
_ebox$1 = -8						; size = 4
_slider$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?SliderChangeCB@@YAXJFPAVC_Base@@@Z PROC		; SliderChangeCB

; 1085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi

; 1086 : 	if(hittype != C_TYPE_MOUSEMOVE)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 61					; 0000003dH
	je	SHORT $LN3@SliderChan

; 1087 : 		return;

	jmp	$LN4@SliderChan
$LN3@SliderChan:

; 1088 : 
; 1089 : 	C_Slider	*slider;
; 1090 : 	int			scale;
; 1091 : 
; 1092 : 	slider=(C_Slider *)control;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	DWORD PTR _slider$[ebp], ecx

; 1093 : 	scale = FloatToInt32((float)slider->GetSliderPos()/(slider->GetSliderMax()-slider->GetSliderMin()) * 4 + 1.5F);

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderPos@C_Slider@@QAEJXZ		; C_Slider::GetSliderPos
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	movss	DWORD PTR tv171[ebp], xmm0
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR tv171[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR __real@3fc00000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _scale$[ebp], eax

; 1094 : 
; 1095 : 	if(scale != slider->GetUserNumber(2))

	push	2
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	cmp	DWORD PTR _scale$[ebp], eax
	je	SHORT $LN2@SliderChan

; 1096 : 	{	
; 1097 : 		C_EditBox *ebox;
; 1098 : 		ebox = (C_EditBox *)control->Parent_->FindControl(slider->GetUserNumber(0));

	push	0
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	push	eax
	mov	edx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$1[ebp], eax

; 1099 : 		if(ebox)

	cmp	DWORD PTR _ebox$1[ebp], 0
	je	SHORT $LN1@SliderChan

; 1100 : 		{
; 1101 : 			ebox->SetInteger(scale);

	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ebox$1[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger

; 1102 : 			ebox->Refresh();

	mov	ecx, DWORD PTR _ebox$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$1[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@SliderChan:

; 1103 : 		}
; 1104 : 		CheckCompliance();

	call	?CheckCompliance@@YAXXZ			; CheckCompliance
$LN2@SliderChan:

; 1105 : 	}
; 1106 : 	slider->SetUserNumber(2,scale);

	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber
$LN4@SliderChan:

; 1107 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?SliderChangeCB@@YAXJFPAVC_Base@@@Z ENDP		; SliderChangeCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z PROC		; ListBoxChangeCB

; 1077 : {

	push	ebp
	mov	ebp, esp

; 1078 : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN1@ListBoxCha

; 1079 : 		return;

	jmp	SHORT $LN2@ListBoxCha
$LN1@ListBoxCha:

; 1080 : 	
; 1081 : 	CheckCompliance();

	call	?CheckCompliance@@YAXXZ			; CheckCompliance
$LN2@ListBoxCha:

; 1082 : }

	pop	ebp
	ret	0
?ListBoxChangeCB@@YAXJFPAVC_Base@@@Z ENDP		; ListBoxChangeCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_button$ = 8						; size = 4
_test$ = 12						; size = 4
?CheckButtonCompliance@@YAHPAVC_Button@@H@Z PROC	; CheckButtonCompliance

; 676  : {

	push	ebp
	mov	ebp, esp

; 677  : 	if(button->GetState() == C_STATE_1 && test)

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN5@CheckButto
	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN5@CheckButto

; 678  : 	{
; 679  : 		button->SetState(C_STATE_2);

	push	2
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 680  : 		button->Refresh();

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 681  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN6@CheckButto
	jmp	SHORT $LN4@CheckButto
$LN5@CheckButto:

; 682  : 	}
; 683  : 	else if(button->GetState() == C_STATE_2 && !test)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 2
	jne	SHORT $LN3@CheckButto
	cmp	DWORD PTR _test$[ebp], 0
	jne	SHORT $LN3@CheckButto

; 684  : 	{
; 685  : 		button->SetState(C_STATE_1);

	push	1
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 686  : 		button->Refresh();

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 687  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN6@CheckButto
	jmp	SHORT $LN4@CheckButto
$LN3@CheckButto:

; 688  : 	}
; 689  : 	else if(button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 2
	jne	SHORT $LN4@CheckButto

; 690  : 	{
; 691  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN6@CheckButto
$LN4@CheckButto:

; 692  : 	}
; 693  : 	return TRUE;

	mov	eax, 1
$LN6@CheckButto:

; 694  : }

	pop	ebp
	ret	0
?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ENDP	; CheckButtonCompliance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_game$ = -52						; size = 4
_head$ = -48						; size = 4
_tail$ = -44						; size = 4
_ebox$ = -40						; size = 4
_name$ = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ComplyCB@@YAXJFPAVC_Base@@@Z PROC			; ComplyCB

; 596  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 597  : 	FalconGameEntity *game;
; 598  : 	C_EditBox *ebox;
; 599  : 	_TCHAR name[30];
; 600  : 	_TCHAR *head,*tail;
; 601  : 
; 602  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN16@ComplyCB

; 603  : 		return;

	jmp	$LN17@ComplyCB
$LN16@ComplyCB:

; 604  : 
; 605  : 	game=(FalconGameEntity*)gCommsMgr->GetTargetGame();

	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?GetTargetGame@UIComms@@QAEPAVVuGameEntity@@XZ ; UIComms::GetTargetGame
	mov	DWORD PTR _game$[ebp], eax

; 606  : 
; 607  : 	ebox = (C_EditBox *)control->Parent_->FindControl(INFO_GAMENAME);

	push	5025					; 000013a1H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 608  : 	if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	$LN15@ComplyCB

; 609  : 	{
; 610  : 		if(ebox->GetText())

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	test	eax, eax
	je	SHORT $LN14@ComplyCB

; 611  : 			_tcscpy(name,ebox->GetText());

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	push	eax
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 612  : 		else

	jmp	SHORT $LN13@ComplyCB
$LN14@ComplyCB:

; 613  : 			_tcscpy(name,GameName);

	push	OFFSET ?GameName@@3PADA			; GameName
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN13@ComplyCB:

; 614  : 
; 615  : 		head=name;

	lea	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR _head$[ebp], ecx
$LN12@ComplyCB:

; 616  : 
; 617  : 		while(*head && !_istalnum(*head))

	mov	edx, DWORD PTR _head$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN11@ComplyCB
	mov	ecx, DWORD PTR _head$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	__ismbcalnum
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN11@ComplyCB

; 618  : 			head++;

	mov	eax, DWORD PTR _head$[ebp]
	add	eax, 1
	mov	DWORD PTR _head$[ebp], eax
	jmp	SHORT $LN12@ComplyCB
$LN11@ComplyCB:

; 619  : 
; 620  : 		tail=head;

	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR _tail$[ebp], ecx
$LN10@ComplyCB:

; 621  : 		while(*tail)

	mov	edx, DWORD PTR _tail$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN8@ComplyCB

; 622  : 			tail++;

	mov	ecx, DWORD PTR _tail$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tail$[ebp], ecx
	jmp	SHORT $LN10@ComplyCB
$LN8@ComplyCB:

; 623  : 
; 624  : 		while(tail != head && !_istalnum(*tail))

	mov	edx, DWORD PTR _tail$[ebp]
	cmp	edx, DWORD PTR _head$[ebp]
	je	SHORT $LN7@ComplyCB
	mov	eax, DWORD PTR _tail$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	__ismbcalnum
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN7@ComplyCB

; 625  : 			tail--;

	mov	edx, DWORD PTR _tail$[ebp]
	sub	edx, 1
	mov	DWORD PTR _tail$[ebp], edx
	jmp	SHORT $LN8@ComplyCB
$LN7@ComplyCB:

; 626  : 
; 627  : 		tail++;

	mov	eax, DWORD PTR _tail$[ebp]
	add	eax, 1
	mov	DWORD PTR _tail$[ebp], eax

; 628  : 		*tail=0;

	mov	ecx, DWORD PTR _tail$[ebp]
	mov	BYTE PTR [ecx], 0

; 629  : 
; 630  : 		if((tail-head) < (3*sizeof(_TCHAR)) || !(*head))

	mov	edx, DWORD PTR _tail$[ebp]
	sub	edx, DWORD PTR _head$[ebp]
	cmp	edx, 3
	jb	SHORT $LN5@ComplyCB
	mov	eax, DWORD PTR _head$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN6@ComplyCB
$LN5@ComplyCB:

; 631  : 		{
; 632  : 			AreYouSure(TXT_ERROR,TXT_INVALID_GAMENAME,CloseWindowCB,CloseWindowCB);

	push	OFFSET ?CloseWindowCB@@YAXJFPAVC_Base@@@Z ; CloseWindowCB
	push	OFFSET ?CloseWindowCB@@YAXJFPAVC_Base@@@Z ; CloseWindowCB
	push	156					; 0000009cH
	push	242					; 000000f2H
	call	?AreYouSure@@YAXJJP6AXJFPAVC_Base@@@Z1@Z ; AreYouSure
	add	esp, 16					; 00000010H

; 633  : 			return;

	jmp	$LN17@ComplyCB
$LN6@ComplyCB:

; 634  : 		}
; 635  : 
; 636  : 		ebox->Refresh();

	mov	edx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 637  : 		ebox->SetText(head);

	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetText@C_EditBox@@QAEXPAD@Z		; C_EditBox::SetText

; 638  : 		ebox->Refresh();

	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN15@ComplyCB:

; 639  : 	}
; 640  : 
; 641  : 	INFOSaveValues();/*

	call	?INFOSaveValues@@YAXXZ			; INFOSaveValues

; 642  : 	if( PlayerOptions.InCompliance(CurrRules.GetRules()) )
; 643  : 	{
; 644  : 		PlayerOptions.SaveOptions();
; 645  : 		CloseWindowCB(ID,hittype,control);
; 646  : 	}
; 647  : 	else
; 648  : 	{
; 649  : 		PlayerOptions.ComplyWRules(CurrRules.GetRules());
; 650  : 		PlayerOptions.SaveOptions();
; 651  : 		INFOSetupControls();
; 652  : 	}*/
; 653  : 	ebox=(C_EditBox*)control->Parent_->FindControl(INFO_PASSWORD);

	push	5026					; 000013a2H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 654  : 	if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN4@ComplyCB

; 655  : 	{
; 656  : 		game=(FalconGameEntity*)gCommsMgr->GetTargetGame();

	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?GetTargetGame@UIComms@@QAEPAVVuGameEntity@@XZ ; UIComms::GetTargetGame
	mov	DWORD PTR _game$[ebp], eax

; 657  : 		if(game && OkCB)

	cmp	DWORD PTR _game$[ebp], 0
	je	SHORT $LN4@ComplyCB
	cmp	DWORD PTR ?OkCB@@3P6AXXZA, 0		; OkCB
	je	SHORT $LN4@ComplyCB

; 658  : 		{
; 659  : 			if(!game->CheckPassword(ebox->GetText()))

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	push	eax
	mov	ecx, DWORD PTR _game$[ebp]
	call	?CheckPassword@FalconGameEntity@@QAEJPAD@Z ; FalconGameEntity::CheckPassword
	test	eax, eax
	jne	SHORT $LN4@ComplyCB

; 660  : 			{
; 661  : 				AreYouSure(TXT_ERROR,TXT_WRONGPASSWORD,NULL,CloseWindowCB);

	push	OFFSET ?CloseWindowCB@@YAXJFPAVC_Base@@@Z ; CloseWindowCB
	push	0
	push	114					; 00000072H
	push	242					; 000000f2H
	call	?AreYouSure@@YAXJJP6AXJFPAVC_Base@@@Z1@Z ; AreYouSure
	add	esp, 16					; 00000010H

; 662  : 				return;

	jmp	SHORT $LN17@ComplyCB
$LN4@ComplyCB:

; 663  : 			}
; 664  : 		}
; 665  : 	}
; 666  : 
; 667  : 	PlayerOptions.ComplyWRules(CurrRules.GetRules());

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ComplyWRules@PlayerOptionsClass@@QAEXPAURulesStruct@@@Z ; PlayerOptionsClass::ComplyWRules

; 668  : 	PlayerOptions.SaveOptions();

	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SaveOptions@PlayerOptionsClass@@QAEHPAD@Z ; PlayerOptionsClass::SaveOptions

; 669  : 
; 670  : 	CloseWindowCB(ID,hittype,control);

	mov	edx, DWORD PTR _control$[ebp]
	push	edx
	movzx	eax, WORD PTR _hittype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	call	?CloseWindowCB@@YAXJFPAVC_Base@@@Z	; CloseWindowCB
	add	esp, 12					; 0000000cH

; 671  : 	if(OkCB)

	cmp	DWORD PTR ?OkCB@@3P6AXXZA, 0		; OkCB
	je	SHORT $LN17@ComplyCB

; 672  : 		(*OkCB)();

	call	DWORD PTR ?OkCB@@3P6AXXZA		; OkCB
$LN17@ComplyCB:

; 673  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ComplyCB@@YAXJFPAVC_Base@@@Z ENDP			; ComplyCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
_win$ = -16						; size = 4
tv87 = -12						; size = 4
tv72 = -8						; size = 4
_button$ = -4						; size = 4
?UpdateRules@@YAXXZ PROC				; UpdateRules

; 565  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 566  : 	if (vuPlayerPoolGroup != vuLocalGame)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@UpdateRule
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN10@UpdateRule
$LN9@UpdateRule:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	DWORD PTR tv72[ebp], eax
$LN10@UpdateRule:
	mov	ecx, DWORD PTR ?vuPlayerPoolGroup@@3PAVVuGameEntity@@A ; vuPlayerPoolGroup
	cmp	ecx, DWORD PTR tv72[ebp]
	je	SHORT $LN6@UpdateRule

; 567  : 		CurrRules.LoadRules(FalconLocalGame->rules.GetRules());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@UpdateRule
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN12@UpdateRule
$LN11@UpdateRule:
	mov	DWORD PTR tv87[ebp], 0
$LN12@UpdateRule:
	mov	ecx, DWORD PTR tv87[ebp]
	add	ecx, 356				; 00000164H
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z ; RulesClass::LoadRules
$LN6@UpdateRule:

; 568  : 	if (!gMainHandler)

	cmp	DWORD PTR ?gMainHandler@@3PAVC_Handler@@A, 0 ; gMainHandler
	jne	SHORT $LN5@UpdateRule

; 569  : 		return;

	jmp	SHORT $LN7@UpdateRule
$LN5@UpdateRule:

; 570  : 
; 571  : 	INFOSetupRulesControls();

	call	?INFOSetupRulesControls@@YAXXZ		; INFOSetupRulesControls

; 572  : 
; 573  : 	C_Window *win;
; 574  : 	C_Button *button;
; 575  : 
; 576  : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 577  : 	if(win == NULL)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN4@UpdateRule

; 578  : 		return;

	jmp	SHORT $LN7@UpdateRule
$LN4@UpdateRule:

; 579  : 	
; 580  : 	button=(C_Button *)win->FindControl(INFO_COMPLY);

	push	5006					; 0000138eH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 581  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN7@UpdateRule

; 582  : 	{
; 583  : 		if(PlayerOptions.InCompliance(CurrRules.GetRules()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?InCompliance@PlayerOptionsClass@@QAEHPAURulesStruct@@@Z ; PlayerOptionsClass::InCompliance
	test	eax, eax
	je	SHORT $LN2@UpdateRule

; 584  : 		{
; 585  : 			button->SetLabel(0,TXT_OK);

	push	113					; 00000071H
	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	call	?SetLabel@C_Button@@QAEXJJ@Z		; C_Button::SetLabel

; 586  : 		}
; 587  : 		else

	jmp	SHORT $LN1@UpdateRule
$LN2@UpdateRule:

; 588  : 		{
; 589  : 			button->SetLabel(0,TXT_COMPLY);

	push	112					; 00000070H
	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	call	?SetLabel@C_Button@@QAEXJJ@Z		; C_Button::SetLabel
$LN1@UpdateRule:

; 590  : 		}
; 591  : 		button->Refresh();

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN7@UpdateRule:

; 592  : 	}
; 593  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRules@@YAXXZ ENDP				; UpdateRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
tv159 = -40						; size = 4
tv267 = -36						; size = 4
tv240 = -32						; size = 4
tv213 = -28						; size = 4
tv186 = -24						; size = 4
_ebox$ = -20						; size = 4
_slider$ = -16						; size = 4
_win$ = -12						; size = 4
_lbox$ = -8						; size = 4
_button$ = -4						; size = 4
?INFOSetupControls@@YAXXZ PROC				; INFOSetupControls

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 343  : 	C_Window	*win;
; 344  : 	C_Button	*button;
; 345  : 	C_ListBox	*lbox;
; 346  : 	C_Slider	*slider;
; 347  : 	C_EditBox	*ebox;
; 348  : 	
; 349  : 	
; 350  : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 351  : 	if(win == NULL)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN61@INFOSetupC

; 352  : 		return;

	jmp	$LN62@INFOSetupC
$LN61@INFOSetupC:

; 353  : 	
; 354  : 	button=(C_Button *)win->FindControl(INFO_COMPLY);

	push	5006					; 0000138eH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 355  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN60@INFOSetupC

; 356  : 	{
; 357  : 		if(PlayerOptions.InCompliance(CurrRules.GetRules()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?InCompliance@PlayerOptionsClass@@QAEHPAURulesStruct@@@Z ; PlayerOptionsClass::InCompliance
	test	eax, eax
	je	SHORT $LN59@INFOSetupC

; 358  : 		{
; 359  : 			button->SetLabel(0,TXT_OK);

	push	113					; 00000071H
	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	call	?SetLabel@C_Button@@QAEXJJ@Z		; C_Button::SetLabel

; 360  : 		}
; 361  : 		else

	jmp	SHORT $LN58@INFOSetupC
$LN59@INFOSetupC:

; 362  : 		{
; 363  : 			button->SetLabel(0,TXT_COMPLY);

	push	112					; 00000070H
	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	call	?SetLabel@C_Button@@QAEXJJ@Z		; C_Button::SetLabel
$LN58@INFOSetupC:

; 364  : 		}
; 365  : 		button->Refresh();

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN60@INFOSetupC:

; 366  : 	}
; 367  : 
; 368  : 	lbox=(C_ListBox *)win->FindControl(FLTMOD_CUR);

	push	5012					; 00001394H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 369  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN57@INFOSetupC

; 370  : 	{
; 371  : 		if(PlayerOptions.GetFlightModelType()==FMAccurate)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetFlightModelType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetFlightModelType
	cmp	eax, 2
	jne	SHORT $LN56@INFOSetupC

; 372  : 			lbox->SetValue(FLTMOD_1);

	push	5013					; 00001395H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 373  : 		else

	jmp	SHORT $LN55@INFOSetupC
$LN56@INFOSetupC:

; 374  : 			lbox->SetValue(FLTMOD_2);

	push	5014					; 00001396H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN55@INFOSetupC:

; 375  : 
; 376  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN57@INFOSetupC:

; 377  : 	}
; 378  : 
; 379  : 	lbox=(C_ListBox *)win->FindControl(RADAR_CUR);

	push	5016					; 00001398H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 380  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN54@INFOSetupC

; 381  : 	{
; 382  : 		switch(PlayerOptions.GetAvionicsType())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	mov	DWORD PTR tv159[ebp], eax
	cmp	DWORD PTR tv159[ebp], 3
	ja	SHORT $LN52@INFOSetupC
	mov	ecx, DWORD PTR tv159[ebp]
	jmp	DWORD PTR $LN64@INFOSetupC[ecx*4]
$LN51@INFOSetupC:

; 383  : 		{
; 384  : 			// M.N. full realism mode added
; 385  : 		case ATRealisticAV:
; 386  : 			lbox->SetValue(RADAR_0);

	push	5069					; 000013cdH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 387  : 			break;

	jmp	SHORT $LN52@INFOSetupC
$LN50@INFOSetupC:

; 388  : 		case ATRealistic:
; 389  : 			lbox->SetValue(RADAR_1);

	push	5017					; 00001399H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 390  : 			break;

	jmp	SHORT $LN52@INFOSetupC
$LN49@INFOSetupC:

; 391  : 		case ATSimplified:
; 392  : 			lbox->SetValue(RADAR_2);

	push	5018					; 0000139aH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 393  : 			break;

	jmp	SHORT $LN52@INFOSetupC
$LN48@INFOSetupC:

; 394  : 		case ATEasy:
; 395  : 			lbox->SetValue(RADAR_3);

	push	5019					; 0000139bH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN52@INFOSetupC:

; 396  : 			break;
; 397  : 		}
; 398  : 		lbox->Refresh();

	mov	edx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN54@INFOSetupC:

; 399  : 	}
; 400  : 
; 401  : 	lbox=(C_ListBox *)win->FindControl(WEAPEFF_CUR);

	push	5021					; 0000139dH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 402  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN47@INFOSetupC

; 403  : 	{
; 404  : 		switch(PlayerOptions.GetWeaponEffectiveness())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetWeaponEffectiveness@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetWeaponEffectiveness
	mov	DWORD PTR tv186[ebp], eax
	cmp	DWORD PTR tv186[ebp], 0
	je	SHORT $LN42@INFOSetupC
	cmp	DWORD PTR tv186[ebp], 1
	je	SHORT $LN43@INFOSetupC
	cmp	DWORD PTR tv186[ebp], 2
	je	SHORT $LN44@INFOSetupC
	jmp	SHORT $LN45@INFOSetupC
$LN44@INFOSetupC:

; 405  : 		{
; 406  : 		case WEAccurate:
; 407  : 			lbox->SetValue(WEAPEFF_1);

	push	5022					; 0000139eH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 408  : 			break;

	jmp	SHORT $LN45@INFOSetupC
$LN43@INFOSetupC:

; 409  : 		case WEEnhanced:
; 410  : 			lbox->SetValue(WEAPEFF_2);

	push	5023					; 0000139fH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 411  : 			break;

	jmp	SHORT $LN45@INFOSetupC
$LN42@INFOSetupC:

; 412  : 		case WEExaggerated:
; 413  : 			lbox->SetValue(WEAPEFF_3);

	push	5024					; 000013a0H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN45@INFOSetupC:

; 414  : 			break;
; 415  : 		}
; 416  : 		lbox->Refresh();

	mov	eax, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN47@INFOSetupC:

; 417  : 	}
; 418  : 
; 419  : 	lbox=(C_ListBox *)win->FindControl(AUTOPILOT_CUR);

	push	5008					; 00001390H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 420  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN41@INFOSetupC

; 421  : 	{
; 422  : 		switch(PlayerOptions.GetAutopilotMode())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAutopilotMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAutopilotMode
	mov	DWORD PTR tv213[ebp], eax
	cmp	DWORD PTR tv213[ebp], 0
	je	SHORT $LN36@INFOSetupC
	cmp	DWORD PTR tv213[ebp], 1
	je	SHORT $LN37@INFOSetupC
	cmp	DWORD PTR tv213[ebp], 2
	je	SHORT $LN38@INFOSetupC
	jmp	SHORT $LN39@INFOSetupC
$LN38@INFOSetupC:

; 423  : 		{
; 424  : 		case APNormal:
; 425  : 			lbox->SetValue(AUTO_1);

	push	5009					; 00001391H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 426  : 			break;

	jmp	SHORT $LN39@INFOSetupC
$LN37@INFOSetupC:

; 427  : 		case APEnhanced:
; 428  : 			lbox->SetValue(AUTO_2);

	push	5010					; 00001392H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 429  : 			break;

	jmp	SHORT $LN39@INFOSetupC
$LN36@INFOSetupC:

; 430  : 		case APIntelligent:
; 431  : 			lbox->SetValue(AUTO_3);

	push	5059					; 000013c3H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN39@INFOSetupC:

; 432  : 			break;
; 433  : 		}
; 434  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN41@INFOSetupC:

; 435  : 	}
; 436  : 
; 437  : 	lbox=(C_ListBox *)win->FindControl(REFUELING_CUR);

	push	5038					; 000013aeH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 438  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN35@INFOSetupC

; 439  : 	{
; 440  : 		switch(PlayerOptions.GetRefuelingMode())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	mov	DWORD PTR tv240[ebp], eax
	cmp	DWORD PTR tv240[ebp], 1
	je	SHORT $LN32@INFOSetupC
	cmp	DWORD PTR tv240[ebp], 2
	je	SHORT $LN31@INFOSetupC
	cmp	DWORD PTR tv240[ebp], 3
	je	SHORT $LN30@INFOSetupC
	jmp	SHORT $LN33@INFOSetupC
$LN32@INFOSetupC:

; 441  : 		{
; 442  : 		case ARRealistic:
; 443  : 			lbox->SetValue(REFUEL_1);

	push	5039					; 000013afH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 444  : 			break;

	jmp	SHORT $LN33@INFOSetupC
$LN31@INFOSetupC:

; 445  : 		case ARModerated:
; 446  : 			lbox->SetValue(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 447  : 			break;

	jmp	SHORT $LN33@INFOSetupC
$LN30@INFOSetupC:

; 448  : 		case ARSimplistic:
; 449  : 			lbox->SetValue(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN33@INFOSetupC:

; 450  : 			break;
; 451  : 		}
; 452  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN35@INFOSetupC:

; 453  : 	}
; 454  : 
; 455  : 	lbox=(C_ListBox *)win->FindControl(PADLOCK_CUR);

	push	5052					; 000013bcH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 456  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN29@INFOSetupC

; 457  : 	{
; 458  : 		switch(PlayerOptions.GetPadlockMode())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetPadlockMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetPadlockMode
	mov	DWORD PTR tv267[ebp], eax
	cmp	DWORD PTR tv267[ebp], 0
	je	SHORT $LN24@INFOSetupC
	cmp	DWORD PTR tv267[ebp], 1
	je	SHORT $LN25@INFOSetupC
	cmp	DWORD PTR tv267[ebp], 2
	je	SHORT $LN26@INFOSetupC
	jmp	SHORT $LN27@INFOSetupC
$LN26@INFOSetupC:

; 459  : 		{
; 460  : 		case PDDisabled:
; 461  : 			lbox->SetValue(PADLOCK_4);

	push	5053					; 000013bdH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 462  : 			break;

	jmp	SHORT $LN27@INFOSetupC
$LN25@INFOSetupC:

; 463  : 		case PDRealistic:
; 464  : 			lbox->SetValue(PADLOCK_1);

	push	5042					; 000013b2H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 465  : 			break;

	jmp	SHORT $LN27@INFOSetupC
$LN24@INFOSetupC:

; 466  : 		case PDEnhanced:
; 467  : 			lbox->SetValue(PADLOCK_2);

	push	5043					; 000013b3H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN27@INFOSetupC:

; 468  : 			break;
; 469  : 		//case PDSuper:
; 470  : 		//	lbox->SetValue(PADLOCK_3);
; 471  : 		//	break;
; 472  : 		}
; 473  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN29@INFOSetupC:

; 474  : 	}
; 475  : 	
; 476  : 	button=(C_Button *)win->FindControl(FUEL_CUR);

	push	5050					; 000013baH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 477  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN23@INFOSetupC

; 478  : 	{
; 479  : 		if(PlayerOptions.UnlimitedFuel())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?UnlimitedFuel@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::UnlimitedFuel
	test	eax, eax
	je	SHORT $LN22@INFOSetupC

; 480  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 481  : 		else

	jmp	SHORT $LN21@INFOSetupC
$LN22@INFOSetupC:

; 482  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN21@INFOSetupC:

; 483  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN23@INFOSetupC:

; 484  : 	}
; 485  : 
; 486  : 	button=(C_Button *)win->FindControl(CHAFFLARES_CUR);

	push	5046					; 000013b6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 487  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN20@INFOSetupC

; 488  : 	{
; 489  : 		if(PlayerOptions.UnlimitedChaff())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?UnlimitedChaff@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::UnlimitedChaff
	test	eax, eax
	je	SHORT $LN19@INFOSetupC

; 490  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 491  : 		else

	jmp	SHORT $LN18@INFOSetupC
$LN19@INFOSetupC:

; 492  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN18@INFOSetupC:

; 493  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN20@INFOSetupC:

; 494  : 		
; 495  : 	}
; 496  : 
; 497  : 	button=(C_Button *)win->FindControl(COLLISIONS_CUR);

	push	5028					; 000013a4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 498  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN17@INFOSetupC

; 499  : 	{
; 500  : 		if(PlayerOptions.CollisionsOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?CollisionsOn@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::CollisionsOn
	test	eax, eax
	je	SHORT $LN16@INFOSetupC

; 501  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 502  : 		else

	jmp	SHORT $LN15@INFOSetupC
$LN16@INFOSetupC:

; 503  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN15@INFOSetupC:

; 504  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN17@INFOSetupC:

; 505  : 	}
; 506  : 
; 507  : 	button=(C_Button *)win->FindControl(BLACKOUT_CUR);

	push	5030					; 000013a6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 508  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN14@INFOSetupC

; 509  : 	{
; 510  : 		if(PlayerOptions.BlackoutOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?BlackoutOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::BlackoutOn
	test	eax, eax
	je	SHORT $LN13@INFOSetupC

; 511  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 512  : 		else

	jmp	SHORT $LN12@INFOSetupC
$LN13@INFOSetupC:

; 513  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN12@INFOSetupC:

; 514  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN14@INFOSetupC:

; 515  : 	}
; 516  : 	
; 517  : 	button=(C_Button *)win->FindControl(IDTAGS_CUR);

	push	5048					; 000013b8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 518  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN11@INFOSetupC

; 519  : 	{
; 520  : 		if(PlayerOptions.NameTagsOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?NameTagsOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::NameTagsOn
	test	eax, eax
	je	SHORT $LN10@INFOSetupC

; 521  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 522  : 		else

	jmp	SHORT $LN9@INFOSetupC
$LN10@INFOSetupC:

; 523  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN9@INFOSetupC:

; 524  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN11@INFOSetupC:

; 525  : 	}
; 526  : 
; 527  : 	button=(C_Button *)win->FindControl(WEATHER_CUR);

	push	5032					; 000013a8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 528  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN8@INFOSetupC

; 529  : 	{
; 530  : 		if(PlayerOptions.WeatherOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?WeatherOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::WeatherOn
	test	eax, eax
	je	SHORT $LN7@INFOSetupC

; 531  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 532  : 		else

	jmp	SHORT $LN6@INFOSetupC
$LN7@INFOSetupC:

; 533  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN6@INFOSetupC:

; 534  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN8@INFOSetupC:

; 535  : 	}
; 536  : 
; 537  : 	button=(C_Button *)win->FindControl(INVULNERABILITY_CUR); 

	push	5055					; 000013bfH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 538  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN5@INFOSetupC

; 539  : 	{
; 540  : 		if(PlayerOptions.InvulnerableOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?InvulnerableOn@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::InvulnerableOn
	test	eax, eax
	je	SHORT $LN4@INFOSetupC

; 541  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 542  : 		else

	jmp	SHORT $LN3@INFOSetupC
$LN4@INFOSetupC:

; 543  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN3@INFOSetupC:

; 544  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN5@INFOSetupC:

; 545  : 	}
; 546  : 
; 547  : 	slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_CUR);

	push	5034					; 000013aaH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 548  : 	if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	$LN1@INFOSetupC

; 549  : 	{
; 550  : 		slider->SetSliderPos(static_cast<long>((slider->GetSliderMax()-slider->GetSliderMin())*((PlayerOptions.ObjMagnification) - 1)/4));

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+20
	subss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40800000
	cvttss2si ecx, xmm0
	push	ecx
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?SetSliderPos@C_Slider@@QAEXJ@Z		; C_Slider::SetSliderPos

; 551  : 		ebox = (C_EditBox *)win->FindControl(VEHICLE_SIZE_READOUT_CUR);

	push	5036					; 000013acH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 552  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN1@INFOSetupC

; 553  : 		{
; 554  : 			ebox->SetInteger(static_cast<short>(PlayerOptions.ObjMagnification));

	cvttss2si edx, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+20
	movsx	eax, dx
	push	eax
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger

; 555  : 			ebox->Refresh();

	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 556  : 			slider->SetUserNumber(0,VEHICLE_SIZE_READOUT_CUR);

	push	5036					; 000013acH
	push	0
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber
$LN1@INFOSetupC:

; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : 	INFOSetupRulesControls();

	call	?INFOSetupRulesControls@@YAXXZ		; INFOSetupRulesControls

; 561  : 	CheckCompliance();

	call	?CheckCompliance@@YAXXZ			; CheckCompliance
$LN62@INFOSetupC:

; 562  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN64@INFOSetupC:
	DD	$LN48@INFOSetupC
	DD	$LN49@INFOSetupC
	DD	$LN50@INFOSetupC
	DD	$LN51@INFOSetupC
?INFOSetupControls@@YAXXZ ENDP				; INFOSetupControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
tv248 = -44						; size = 4
tv424 = -40						; size = 4
tv380 = -36						; size = 4
tv336 = -32						; size = 4
tv292 = -28						; size = 4
_slider$ = -24						; size = 4
_host$ = -20						; size = 4
_win$ = -16						; size = 4
_ebox$ = -12						; size = 4
_button$ = -8						; size = 4
_lbox$ = -4						; size = 4
?INFOSetupRulesControls@@YAXXZ PROC			; INFOSetupRulesControls

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi

; 42   : 	C_Window	*win;
; 43   : 	C_Button	*button;
; 44   : 	C_ListBox	*lbox;
; 45   : 	C_Slider	*slider;
; 46   : 	C_EditBox	*ebox;
; 47   : 
; 48   : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 49   : 	if(win == NULL)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN83@INFOSetupR

; 50   : 		return;

	jmp	$LN84@INFOSetupR
$LN83@INFOSetupR:

; 51   : 
; 52   : 	int host = modify;

	mov	eax, DWORD PTR ?modify@@3HA		; modify
	mov	DWORD PTR _host$[ebp], eax

; 53   : 	//if(FalconLocalGame == vuPlayerPoolGroup)
; 54   : 	//if(vuLocalSessionEntity->Game())
; 55   : 		//host = TRUE;
; 56   : 	//if this is true, we are the host
; 57   : 	/*
; 58   : 	if( FalconLocalGameEntity && FalconLocalSession &&
; 59   : 		FalconLocalGameEntity->OwnerId() == FalconLocalSession->Id() )
; 60   : 			host = TRUE;
; 61   : 	else if(!gCommsMgr->GetTargetGame() && !FalconLocalGameEntity)
; 62   : 		host = TRUE;
; 63   : 
; 64   : 	if(gCommsMgr->GetSettings()->Rules.GameStatus != GAME_WAITING)
; 65   : 		host = FALSE;*/
; 66   : 
; 67   : 	ebox = (C_EditBox *)win->FindControl(INFO_GAMENAME);

	push	5025					; 000013a1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 68   : 	if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN82@INFOSetupR

; 69   : 	{
; 70   : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN81@INFOSetupR

; 71   : 			ebox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 72   : 		else

	jmp	SHORT $LN80@INFOSetupR
$LN81@INFOSetupR:

; 73   : 			ebox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN80@INFOSetupR:

; 74   : 
; 75   : //		if(FalconLocalGame != vuPlayerPoolGroup)
; 76   : //			ebox->SetText(FalconLocalGameEntity->GameName());
; 77   : //		else 
; 78   : 		if(gCommsMgr->GetTargetGame())

	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?GetTargetGame@UIComms@@QAEPAVVuGameEntity@@XZ ; UIComms::GetTargetGame
	test	eax, eax
	je	SHORT $LN79@INFOSetupR

; 79   : 			ebox->SetText( gCommsMgr->GetTargetGame()->GameName() );

	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?GetTargetGame@UIComms@@QAEPAVVuGameEntity@@XZ ; UIComms::GetTargetGame
	mov	ecx, eax
	call	?GameName@VuGameEntity@@QAEPADXZ	; VuGameEntity::GameName
	push	eax
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetText@C_EditBox@@QAEXPAD@Z		; C_EditBox::SetText

; 80   : 		else

	jmp	SHORT $LN78@INFOSetupR
$LN79@INFOSetupR:

; 81   : 		{
; 82   : 			ebox->SetText(GameName); 

	push	OFFSET ?GameName@@3PADA			; GameName
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetText@C_EditBox@@QAEXPAD@Z		; C_EditBox::SetText
$LN78@INFOSetupR:

; 83   : 		}
; 84   : 		
; 85   : 		ebox->Refresh();

	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN82@INFOSetupR:

; 86   : 	}
; 87   : 
; 88   : 	ebox = (C_EditBox *)win->FindControl(MAX_PLAYERS);

	push	5056					; 000013c0H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 89   : 	if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN77@INFOSetupR

; 90   : 	{
; 91   : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN76@INFOSetupR

; 92   : 			ebox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 93   : 		else

	jmp	SHORT $LN75@INFOSetupR
$LN76@INFOSetupR:

; 94   : 			ebox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN75@INFOSetupR:

; 95   : 
; 96   : 		ebox->SetInteger(CurrRules.MaxPlayers);

	mov	ecx, DWORD PTR ?CurrRules@@3VRulesClass@@A+20
	push	ecx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger

; 97   : 		ebox->Refresh();

	mov	edx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN77@INFOSetupR:

; 98   : 	}
; 99   : 
; 100  : 	lbox=(C_ListBox *)win->FindControl(FLTMOD_REQ);

	push	5011					; 00001393H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 101  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN74@INFOSetupR

; 102  : 	{
; 103  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN73@INFOSetupR

; 104  : 			lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	eax, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 105  : 		else

	jmp	SHORT $LN72@INFOSetupR
$LN73@INFOSetupR:

; 106  : 			lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN72@INFOSetupR:

; 107  : 
; 108  : 		if(CurrRules.GetFlightModelType()==FMAccurate)

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetFlightModelType@RulesClass@@QAEHXZ	; RulesClass::GetFlightModelType
	cmp	eax, 2
	jne	SHORT $LN71@INFOSetupR

; 109  : 			lbox->SetValue(FLTMOD_1);

	push	5013					; 00001395H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 110  : 		else

	jmp	SHORT $LN70@INFOSetupR
$LN71@INFOSetupR:

; 111  : 			lbox->SetValue(FLTMOD_2);

	push	5014					; 00001396H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN70@INFOSetupR:

; 112  : 
; 113  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN74@INFOSetupR:

; 114  : 	}
; 115  : 
; 116  : 	lbox=(C_ListBox *)win->FindControl(RADAR_REQ);

	push	5015					; 00001397H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 117  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN69@INFOSetupR

; 118  : 	{
; 119  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN68@INFOSetupR

; 120  : 			lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 121  : 		else

	jmp	SHORT $LN67@INFOSetupR
$LN68@INFOSetupR:

; 122  : 			lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN67@INFOSetupR:

; 123  : 
; 124  : 		switch(CurrRules.GetAvionicsType())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetAvionicsType@RulesClass@@QAEHXZ	; RulesClass::GetAvionicsType
	mov	DWORD PTR tv248[ebp], eax
	cmp	DWORD PTR tv248[ebp], 3
	ja	SHORT $LN65@INFOSetupR
	mov	ecx, DWORD PTR tv248[ebp]
	jmp	DWORD PTR $LN86@INFOSetupR[ecx*4]
$LN64@INFOSetupR:

; 125  : 		{
; 126  : 			// M.N. full realism mode added
; 127  : 		case ATRealisticAV:
; 128  : 			lbox->SetValue(RADAR_0);

	push	5069					; 000013cdH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 129  : 			break;

	jmp	SHORT $LN65@INFOSetupR
$LN63@INFOSetupR:

; 130  : 		case ATRealistic:
; 131  : 			lbox->SetValue(RADAR_1);

	push	5017					; 00001399H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 132  : 			break;

	jmp	SHORT $LN65@INFOSetupR
$LN62@INFOSetupR:

; 133  : 		case ATSimplified:
; 134  : 			lbox->SetValue(RADAR_2);

	push	5018					; 0000139aH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 135  : 			break;

	jmp	SHORT $LN65@INFOSetupR
$LN61@INFOSetupR:

; 136  : 		case ATEasy:
; 137  : 			lbox->SetValue(RADAR_3);

	push	5019					; 0000139bH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN65@INFOSetupR:

; 138  : 			break;
; 139  : 		}
; 140  : 		lbox->Refresh();

	mov	edx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN69@INFOSetupR:

; 141  : 	}
; 142  : 
; 143  : 	lbox=(C_ListBox *)win->FindControl(WEAPEFF_REQ);

	push	5020					; 0000139cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 144  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN60@INFOSetupR

; 145  : 	{
; 146  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN59@INFOSetupR

; 147  : 			lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	eax, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 148  : 		else

	jmp	SHORT $LN58@INFOSetupR
$LN59@INFOSetupR:

; 149  : 			lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN58@INFOSetupR:

; 150  : 
; 151  : 		switch(CurrRules.GetWeaponEffectiveness())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetWeaponEffectiveness@RulesClass@@QAEHXZ ; RulesClass::GetWeaponEffectiveness
	mov	DWORD PTR tv292[ebp], eax
	cmp	DWORD PTR tv292[ebp], 0
	je	SHORT $LN53@INFOSetupR
	cmp	DWORD PTR tv292[ebp], 1
	je	SHORT $LN54@INFOSetupR
	cmp	DWORD PTR tv292[ebp], 2
	je	SHORT $LN55@INFOSetupR
	jmp	SHORT $LN56@INFOSetupR
$LN55@INFOSetupR:

; 152  : 		{
; 153  : 		case WEAccurate:
; 154  : 			lbox->SetValue(WEAPEFF_1);

	push	5022					; 0000139eH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 155  : 			break;

	jmp	SHORT $LN56@INFOSetupR
$LN54@INFOSetupR:

; 156  : 		case WEEnhanced:
; 157  : 			lbox->SetValue(WEAPEFF_2);

	push	5023					; 0000139fH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 158  : 			break;

	jmp	SHORT $LN56@INFOSetupR
$LN53@INFOSetupR:

; 159  : 		case WEExaggerated:
; 160  : 			lbox->SetValue(WEAPEFF_3);

	push	5024					; 000013a0H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN56@INFOSetupR:

; 161  : 			break;
; 162  : 		}
; 163  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN60@INFOSetupR:

; 164  : 	}
; 165  : 
; 166  : 	lbox=(C_ListBox *)win->FindControl(AUTOPILOT_REQ);

	push	5007					; 0000138fH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 167  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN52@INFOSetupR

; 168  : 	{
; 169  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN51@INFOSetupR

; 170  : 			lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 171  : 		else

	jmp	SHORT $LN50@INFOSetupR
$LN51@INFOSetupR:

; 172  : 			lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN50@INFOSetupR:

; 173  : 
; 174  : 		switch(CurrRules.GetAutopilotMode())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetAutopilotMode@RulesClass@@QAEHXZ	; RulesClass::GetAutopilotMode
	mov	DWORD PTR tv336[ebp], eax
	cmp	DWORD PTR tv336[ebp], 0
	je	SHORT $LN45@INFOSetupR
	cmp	DWORD PTR tv336[ebp], 1
	je	SHORT $LN46@INFOSetupR
	cmp	DWORD PTR tv336[ebp], 2
	je	SHORT $LN47@INFOSetupR
	jmp	SHORT $LN48@INFOSetupR
$LN47@INFOSetupR:

; 175  : 		{
; 176  : 		case APNormal:
; 177  : 			lbox->SetValue(AUTO_1);

	push	5009					; 00001391H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 178  : 			break;

	jmp	SHORT $LN48@INFOSetupR
$LN46@INFOSetupR:

; 179  : 		case APEnhanced:
; 180  : 			lbox->SetValue(AUTO_2);

	push	5010					; 00001392H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 181  : 			break;

	jmp	SHORT $LN48@INFOSetupR
$LN45@INFOSetupR:

; 182  : 		case APIntelligent:
; 183  : 			lbox->SetValue(AUTO_3);

	push	5059					; 000013c3H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN48@INFOSetupR:

; 184  : 			break;
; 185  : 		}
; 186  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN52@INFOSetupR:

; 187  : 	}
; 188  : 
; 189  : 	lbox=(C_ListBox *)win->FindControl(REFUELING_REQ);

	push	5037					; 000013adH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 190  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN44@INFOSetupR

; 191  : 	{
; 192  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN43@INFOSetupR

; 193  : 			lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 194  : 		else

	jmp	SHORT $LN42@INFOSetupR
$LN43@INFOSetupR:

; 195  : 			lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN42@INFOSetupR:

; 196  : 
; 197  : 		switch(CurrRules.GetRefuelingMode())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetRefuelingMode@RulesClass@@QAEHXZ	; RulesClass::GetRefuelingMode
	mov	DWORD PTR tv380[ebp], eax
	cmp	DWORD PTR tv380[ebp], 1
	je	SHORT $LN39@INFOSetupR
	cmp	DWORD PTR tv380[ebp], 2
	je	SHORT $LN38@INFOSetupR
	cmp	DWORD PTR tv380[ebp], 3
	je	SHORT $LN37@INFOSetupR
	jmp	SHORT $LN40@INFOSetupR
$LN39@INFOSetupR:

; 198  : 		{
; 199  : 		case ARRealistic:
; 200  : 			lbox->SetValue(REFUEL_1);

	push	5039					; 000013afH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 201  : 			break;

	jmp	SHORT $LN40@INFOSetupR
$LN38@INFOSetupR:

; 202  : 		case ARModerated:
; 203  : 			lbox->SetValue(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 204  : 			break;

	jmp	SHORT $LN40@INFOSetupR
$LN37@INFOSetupR:

; 205  : 		case ARSimplistic:
; 206  : 			lbox->SetValue(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN40@INFOSetupR:

; 207  : 			break;
; 208  : 		}
; 209  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN44@INFOSetupR:

; 210  : 	}
; 211  : 
; 212  : 	lbox=(C_ListBox *)win->FindControl(PADLOCK_REQ);

	push	5051					; 000013bbH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 213  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN36@INFOSetupR

; 214  : 	{
; 215  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN35@INFOSetupR

; 216  : 			lbox->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 217  : 		else

	jmp	SHORT $LN34@INFOSetupR
$LN35@INFOSetupR:

; 218  : 			lbox->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN34@INFOSetupR:

; 219  : 
; 220  : 		switch(CurrRules.GetPadlockMode())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?GetPadlockMode@RulesClass@@QAEHXZ	; RulesClass::GetPadlockMode
	mov	DWORD PTR tv424[ebp], eax
	cmp	DWORD PTR tv424[ebp], 0
	je	SHORT $LN29@INFOSetupR
	cmp	DWORD PTR tv424[ebp], 1
	je	SHORT $LN30@INFOSetupR
	cmp	DWORD PTR tv424[ebp], 2
	je	SHORT $LN31@INFOSetupR
	jmp	SHORT $LN32@INFOSetupR
$LN31@INFOSetupR:

; 221  : 		{
; 222  : 		case PDDisabled:
; 223  : 			lbox->SetValue(PADLOCK_4);

	push	5053					; 000013bdH
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 224  : 			break;

	jmp	SHORT $LN32@INFOSetupR
$LN30@INFOSetupR:

; 225  : 		case PDRealistic:
; 226  : 			lbox->SetValue(PADLOCK_1);

	push	5042					; 000013b2H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue

; 227  : 			break;

	jmp	SHORT $LN32@INFOSetupR
$LN29@INFOSetupR:

; 228  : 		case PDEnhanced:
; 229  : 			lbox->SetValue(PADLOCK_2);

	push	5043					; 000013b3H
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN32@INFOSetupR:

; 230  : 			break;
; 231  : 		//case PDSuper:
; 232  : 		//	lbox->SetValue(PADLOCK_3);
; 233  : 		//	break;
; 234  : 		}
; 235  : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN36@INFOSetupR:

; 236  : 	}
; 237  : 
; 238  : 	button=(C_Button *)win->FindControl(FUEL_REQ);

	push	5049					; 000013b9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 239  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN28@INFOSetupR

; 240  : 	{
; 241  : 		if(CurrRules.UnlimitedFuel())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?UnlimitedFuel@RulesClass@@QAEHXZ	; RulesClass::UnlimitedFuel
	test	eax, eax
	je	SHORT $LN27@INFOSetupR

; 242  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 243  : 		else

	jmp	SHORT $LN26@INFOSetupR
$LN27@INFOSetupR:

; 244  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN26@INFOSetupR:

; 245  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN28@INFOSetupR:

; 246  : 	}
; 247  : 
; 248  : 	button=(C_Button *)win->FindControl(CHAFFLARES_REQ);

	push	5045					; 000013b5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 249  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN25@INFOSetupR

; 250  : 	{
; 251  : 		if(CurrRules.UnlimitedChaff())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?UnlimitedChaff@RulesClass@@QAEHXZ	; RulesClass::UnlimitedChaff
	test	eax, eax
	je	SHORT $LN24@INFOSetupR

; 252  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 253  : 		else

	jmp	SHORT $LN23@INFOSetupR
$LN24@INFOSetupR:

; 254  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN23@INFOSetupR:

; 255  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN25@INFOSetupR:

; 256  : 		
; 257  : 	}
; 258  : 
; 259  : 	button=(C_Button *)win->FindControl(COLLISIONS_REQ);

	push	5027					; 000013a3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 260  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN22@INFOSetupR

; 261  : 	{
; 262  : 		if(CurrRules.CollisionsOn())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?CollisionsOn@RulesClass@@QAEHXZ	; RulesClass::CollisionsOn
	test	eax, eax
	je	SHORT $LN21@INFOSetupR

; 263  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 264  : 		else

	jmp	SHORT $LN20@INFOSetupR
$LN21@INFOSetupR:

; 265  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN20@INFOSetupR:

; 266  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN22@INFOSetupR:

; 267  : 	}
; 268  : 
; 269  : 	button=(C_Button *)win->FindControl(BLACKOUT_REQ);

	push	5029					; 000013a5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 270  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN19@INFOSetupR

; 271  : 	{
; 272  : 		if(CurrRules.BlackoutOn())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?BlackoutOn@RulesClass@@QAEHXZ		; RulesClass::BlackoutOn
	test	eax, eax
	je	SHORT $LN18@INFOSetupR

; 273  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 274  : 		else

	jmp	SHORT $LN17@INFOSetupR
$LN18@INFOSetupR:

; 275  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN17@INFOSetupR:

; 276  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN19@INFOSetupR:

; 277  : 	}
; 278  : 
; 279  : 
; 280  : 	button=(C_Button *)win->FindControl(IDTAGS_REQ);

	push	5047					; 000013b7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 281  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN16@INFOSetupR

; 282  : 	{
; 283  : 		if(CurrRules.NameTagsOn())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?NameTagsOn@RulesClass@@QAEHXZ		; RulesClass::NameTagsOn
	test	eax, eax
	je	SHORT $LN15@INFOSetupR

; 284  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 285  : 		else

	jmp	SHORT $LN14@INFOSetupR
$LN15@INFOSetupR:

; 286  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN14@INFOSetupR:

; 287  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN16@INFOSetupR:

; 288  : 	}
; 289  : 
; 290  : 	button=(C_Button *)win->FindControl(WEATHER_REQ);

	push	5031					; 000013a7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 291  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN13@INFOSetupR

; 292  : 	{
; 293  : 		if(CurrRules.WeatherOn())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?WeatherOn@RulesClass@@QAEHXZ		; RulesClass::WeatherOn
	test	eax, eax
	je	SHORT $LN12@INFOSetupR

; 294  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 295  : 		else

	jmp	SHORT $LN11@INFOSetupR
$LN12@INFOSetupR:

; 296  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN11@INFOSetupR:

; 297  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN13@INFOSetupR:

; 298  : 	}
; 299  : 
; 300  : 	button=(C_Button *)win->FindControl(INVULNERABILITY_REQ); 

	push	5054					; 000013beH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 301  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN10@INFOSetupR

; 302  : 	{
; 303  : 		if(CurrRules.InvulnerableOn())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?InvulnerableOn@RulesClass@@QAEHXZ	; RulesClass::InvulnerableOn
	test	eax, eax
	je	SHORT $LN9@INFOSetupR

; 304  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 305  : 		else

	jmp	SHORT $LN8@INFOSetupR
$LN9@INFOSetupR:

; 306  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN8@INFOSetupR:

; 307  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN10@INFOSetupR:

; 308  : 	}
; 309  : 
; 310  : 	button=(C_Button *)win->FindControl(EXT_VIEWS_REQ); 

	push	5057					; 000013c1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 311  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN7@INFOSetupR

; 312  : 	{			
; 313  : 		if(CurrRules.ExternalViewOn())

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?ExternalViewOn@RulesClass@@QAEHXZ	; RulesClass::ExternalViewOn
	test	eax, eax
	je	SHORT $LN6@INFOSetupR

; 314  : 			button->SetState(C_STATE_1);

	push	1
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 315  : 		else

	jmp	SHORT $LN5@INFOSetupR
$LN6@INFOSetupR:

; 316  : 			button->SetState(C_STATE_0);

	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN5@INFOSetupR:

; 317  : 		button->Refresh();

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN7@INFOSetupR:

; 318  : 	}
; 319  : 
; 320  : 	slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_REQ);

	push	5033					; 000013a9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 321  : 	if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	$LN1@INFOSetupR

; 322  : 	{	
; 323  : 		if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	SHORT $LN3@INFOSetupR

; 324  : 			slider->SetFlagBitOn(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 325  : 		else

	jmp	SHORT $LN2@INFOSetupR
$LN3@INFOSetupR:

; 326  : 			slider->SetFlagBitOff(C_BIT_ENABLED);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _slider$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN2@INFOSetupR:

; 327  : 
; 328  : 		slider->SetSliderPos(static_cast<long>((slider->GetSliderMax()-slider->GetSliderMin())*((CurrRules.ObjMagnification) - 1)/4.0f));

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR ?CurrRules@@3VRulesClass@@A+24
	subss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40800000
	cvttss2si ecx, xmm0
	push	ecx
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?SetSliderPos@C_Slider@@QAEXJ@Z		; C_Slider::SetSliderPos

; 329  : 		ebox = (C_EditBox *)win->FindControl(VEHICLE_SIZE_READOUT_REQ);

	push	5035					; 000013abH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 330  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN1@INFOSetupR

; 331  : 		{
; 332  : 			ebox->SetInteger(static_cast<long>(CurrRules.ObjMagnification));

	cvttss2si edx, DWORD PTR ?CurrRules@@3VRulesClass@@A+24
	push	edx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger

; 333  : 			ebox->Refresh();

	mov	eax, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 334  : 			slider->SetUserNumber(0,VEHICLE_SIZE_READOUT_REQ);

	push	5035					; 000013abH
	push	0
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber
$LN1@INFOSetupR:

; 335  : 		}
; 336  : 	}
; 337  : 	win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN84@INFOSetupR:

; 338  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN86@INFOSetupR:
	DD	$LN61@INFOSetupR
	DD	$LN62@INFOSetupR
	DD	$LN63@INFOSetupR
	DD	$LN64@INFOSetupR
?INFOSetupRulesControls@@YAXXZ ENDP			; INFOSetupRulesControls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
;	COMDAT ??__ECurrRules@@YAXXZ
text$yc	SEGMENT
??__ECurrRules@@YAXXZ PROC				; `dynamic initializer for 'CurrRules'', COMDAT

; 34   : RulesClass CurrRules;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	??0RulesClass@@QAE@XZ			; RulesClass::RulesClass
	pop	ebp
	ret	0
??__ECurrRules@@YAXXZ ENDP				; `dynamic initializer for 'CurrRules''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
tv756 = -80						; size = 4
tv549 = -76						; size = 4
tv519 = -72						; size = 4
tv503 = -68						; size = 4
tv487 = -64						; size = 4
tv471 = -60						; size = 4
tv455 = -56						; size = 4
tv397 = -52						; size = 4
tv277 = -48						; size = 4
tv221 = -44						; size = 4
tv333 = -40						; size = 4
tv157 = -36						; size = 4
_ebox$ = -32						; size = 4
_slider$ = -28						; size = 4
_lbox$ = -24						; size = 4
_InCompliance$ = -20					; size = 4
_win$ = -16						; size = 4
_button$ = -12						; size = 4
_MakeRed$ = -8						; size = 4
_line$ = -4						; size = 4
?CheckCompliance@@YAXXZ PROC				; CheckCompliance

; 697  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi

; 698  : 	C_Window *win = gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 699  : 	if(!win)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN88@CheckCompl

; 700  : 		return;

	jmp	$LN89@CheckCompl
$LN88@CheckCompl:

; 701  : 
; 702  : 	C_ListBox *lbox;
; 703  : 	C_Button *button;
; 704  : 	C_Slider *slider;
; 705  : 	C_EditBox *ebox;
; 706  : 	C_Line *line;
; 707  : 
; 708  : 	int InCompliance = TRUE;

	mov	DWORD PTR _InCompliance$[ebp], 1

; 709  : 	int MakeRed = 0;

	mov	DWORD PTR _MakeRed$[ebp], 0

; 710  : 
; 711  : 	lbox=(C_ListBox *)win->FindControl(FLTMOD_CUR);

	push	5012					; 00001394H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 712  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN82@CheckCompl

; 713  : 	{
; 714  : 		if(lbox->GetTextID()==FLTMOD_2)

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	cmp	eax, 5014				; 00001396H
	jne	SHORT $LN85@CheckCompl

; 715  : 			if(CurrRules.SimFlightModel > FMSimplified)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+32, 0
	jle	SHORT $LN85@CheckCompl

; 716  : 				{
; 717  : 					InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 718  : 					MakeRed++;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	add	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
$LN85@CheckCompl:

; 719  : 				}
; 720  : 
; 721  : 		line = (C_Line *)win->FindControl(FLTMOD_LINE);

	push	5063					; 000013c7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _line$[ebp], eax

; 722  : 		if(MakeRed && line)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN84@CheckCompl
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN84@CheckCompl

; 723  : 		{
; 724  : 			//lbox->SetNormColor(RGB(255,0,0));
; 725  : 			//lbox->Refresh();
; 726  : 			
; 727  : 			line->SetColor(RGB(230,0,0));

	push	230					; 000000e6H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 728  : 			line->Refresh();

	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 729  : 			MakeRed--;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
	jmp	SHORT $LN82@CheckCompl
$LN84@CheckCompl:

; 730  : 		}
; 731  : 		else if(line)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN82@CheckCompl

; 732  : 		{
; 733  : 			//lbox->SetNormColor(RGB(230,230,230));
; 734  : 			//lbox->Refresh();
; 735  : 			line->SetColor(RGB(65,128,173));

	push	11370561				; 00ad8041H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 736  : 			line->Refresh();

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN82@CheckCompl:

; 737  : 		}
; 738  : 	}
; 739  : 	
; 740  : 	lbox=(C_ListBox *)win->FindControl(RADAR_CUR);

	push	5016					; 00001398H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 741  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN69@CheckCompl

; 742  : 	{
; 743  : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv157[ebp], eax
	cmp	DWORD PTR tv157[ebp], 5017		; 00001399H
	je	SHORT $LN78@CheckCompl
	cmp	DWORD PTR tv157[ebp], 5018		; 0000139aH
	je	SHORT $LN76@CheckCompl
	cmp	DWORD PTR tv157[ebp], 5019		; 0000139bH
	je	SHORT $LN74@CheckCompl
	jmp	SHORT $LN72@CheckCompl
$LN78@CheckCompl:

; 744  : 		{
; 745  : 		case RADAR_1:
; 746  : 			if(CurrRules.SimAvionicsType > ATRealistic)		// we've now a fourth setting

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+40, 2
	jle	SHORT $LN77@CheckCompl

; 747  : 			{
; 748  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 749  : 				MakeRed++;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	add	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
$LN77@CheckCompl:

; 750  : 			}
; 751  : 			break;

	jmp	SHORT $LN79@CheckCompl
$LN76@CheckCompl:

; 752  : 		case RADAR_2:
; 753  : 			if(CurrRules.SimAvionicsType > ATSimplified)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+40, 1
	jle	SHORT $LN75@CheckCompl

; 754  : 			{
; 755  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 756  : 				MakeRed++;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
$LN75@CheckCompl:

; 757  : 			}
; 758  : 			break;

	jmp	SHORT $LN79@CheckCompl
$LN74@CheckCompl:

; 759  : 		case RADAR_3:
; 760  : 			if(CurrRules.SimAvionicsType > ATEasy)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+40, 0
	jle	SHORT $LN73@CheckCompl

; 761  : 			{
; 762  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 763  : 				MakeRed++;

	mov	edx, DWORD PTR _MakeRed$[ebp]
	add	edx, 1
	mov	DWORD PTR _MakeRed$[ebp], edx
$LN73@CheckCompl:
$LN72@CheckCompl:
$LN79@CheckCompl:

; 764  : 			}
; 765  : 			break;
; 766  : 		default:
; 767  : 			break;
; 768  : 		}
; 769  : 
; 770  : 		line = (C_Line *)win->FindControl(RADAR_LINE);

	push	5064					; 000013c8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _line$[ebp], eax

; 771  : 		if(MakeRed && line)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN71@CheckCompl
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN71@CheckCompl

; 772  : 		{
; 773  : 			//lbox->SetNormColor(RGB(255,0,0));
; 774  : 			//lbox->Refresh();
; 775  : 			
; 776  : 			line->SetColor(RGB(230,0,0));

	push	230					; 000000e6H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 777  : 			line->Refresh();

	mov	eax, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 778  : 			MakeRed--;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
	jmp	SHORT $LN69@CheckCompl
$LN71@CheckCompl:

; 779  : 		}
; 780  : 		else if(line)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN69@CheckCompl

; 781  : 		{
; 782  : 			//lbox->SetNormColor(RGB(230,230,230));
; 783  : 			//lbox->Refresh();
; 784  : 			line->SetColor(RGB(65,128,173));

	push	11370561				; 00ad8041H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 785  : 			line->Refresh();

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN69@CheckCompl:

; 786  : 		}
; 787  : 	}
; 788  : 	
; 789  : 	lbox=(C_ListBox *)win->FindControl(WEAPEFF_CUR);

	push	5021					; 0000139dH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 790  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN58@CheckCompl

; 791  : 	{
; 792  : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv221[ebp], eax
	cmp	DWORD PTR tv221[ebp], 5023		; 0000139fH
	je	SHORT $LN65@CheckCompl
	cmp	DWORD PTR tv221[ebp], 5024		; 000013a0H
	je	SHORT $LN63@CheckCompl
	jmp	SHORT $LN61@CheckCompl
$LN65@CheckCompl:

; 793  : 		{
; 794  : 		case WEAPEFF_2:
; 795  : 			if(CurrRules.SimWeaponEffect > WEEnhanced)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+36, 1
	jle	SHORT $LN64@CheckCompl

; 796  : 			{
; 797  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 798  : 				MakeRed++;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	add	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
$LN64@CheckCompl:

; 799  : 			}
; 800  : 			break;

	jmp	SHORT $LN66@CheckCompl
$LN63@CheckCompl:

; 801  : 		case WEAPEFF_3:
; 802  : 			if(CurrRules.SimWeaponEffect > WEExaggerated)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+36, 0
	jle	SHORT $LN62@CheckCompl

; 803  : 			{
; 804  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 805  : 				MakeRed++;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
$LN62@CheckCompl:
$LN61@CheckCompl:
$LN66@CheckCompl:

; 806  : 			}
; 807  : 			break;
; 808  : 		default:
; 809  : 			break;
; 810  : 		}
; 811  : 
; 812  : 		line = (C_Line *)win->FindControl(WEAPEFF_LINE);

	push	5065					; 000013c9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _line$[ebp], eax

; 813  : 		if(MakeRed && line)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN60@CheckCompl
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN60@CheckCompl

; 814  : 		{
; 815  : 			//lbox->SetNormColor(RGB(255,0,0));
; 816  : 			//lbox->Refresh();
; 817  : 			
; 818  : 			line->SetColor(RGB(230,0,0));

	push	230					; 000000e6H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 819  : 			line->Refresh();

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 820  : 			MakeRed--;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	sub	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
	jmp	SHORT $LN58@CheckCompl
$LN60@CheckCompl:

; 821  : 		}
; 822  : 		else if(line)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN58@CheckCompl

; 823  : 		{
; 824  : 			//lbox->SetNormColor(RGB(230,230,230));
; 825  : 			//lbox->Refresh();
; 826  : 			line->SetColor(RGB(65,128,173));

	push	11370561				; 00ad8041H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 827  : 			line->Refresh();

	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN58@CheckCompl:

; 828  : 		}
; 829  : 	}
; 830  : 	
; 831  : 	lbox=(C_ListBox *)win->FindControl(AUTOPILOT_CUR);

	push	5008					; 00001390H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 832  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN47@CheckCompl

; 833  : 	{
; 834  : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv277[ebp], eax
	cmp	DWORD PTR tv277[ebp], 5010		; 00001392H
	je	SHORT $LN54@CheckCompl
	cmp	DWORD PTR tv277[ebp], 5059		; 000013c3H
	je	SHORT $LN52@CheckCompl
	jmp	SHORT $LN50@CheckCompl
$LN54@CheckCompl:

; 835  : 		{
; 836  : 		case AUTO_2:
; 837  : 			if(CurrRules.SimAutopilotType > APEnhanced)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+44, 1
	jle	SHORT $LN53@CheckCompl

; 838  : 			{
; 839  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 840  : 				MakeRed++;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
$LN53@CheckCompl:

; 841  : 			}
; 842  : 			break;

	jmp	SHORT $LN55@CheckCompl
$LN52@CheckCompl:

; 843  : 		case AUTO_3:
; 844  : 			if(CurrRules.SimAutopilotType > APIntelligent)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+44, 0
	jle	SHORT $LN51@CheckCompl

; 845  : 			{
; 846  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 847  : 				MakeRed++;

	mov	edx, DWORD PTR _MakeRed$[ebp]
	add	edx, 1
	mov	DWORD PTR _MakeRed$[ebp], edx
$LN51@CheckCompl:
$LN50@CheckCompl:
$LN55@CheckCompl:

; 848  : 			}
; 849  : 			break;
; 850  : 		default:
; 851  : 			break;
; 852  : 		}
; 853  : 
; 854  : 		line = (C_Line *)win->FindControl(AUTOPILOT_LINE);

	push	5066					; 000013caH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _line$[ebp], eax

; 855  : 		if(MakeRed && line)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN49@CheckCompl
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN49@CheckCompl

; 856  : 		{
; 857  : 			//lbox->SetNormColor(RGB(255,0,0));
; 858  : 			//lbox->Refresh();
; 859  : 			
; 860  : 			line->SetColor(RGB(230,0,0));

	push	230					; 000000e6H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 861  : 			line->Refresh();

	mov	eax, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 862  : 			MakeRed--;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
	jmp	SHORT $LN47@CheckCompl
$LN49@CheckCompl:

; 863  : 		}
; 864  : 		else if(line)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN47@CheckCompl

; 865  : 		{
; 866  : 			//lbox->SetNormColor(RGB(230,230,230));
; 867  : 			//lbox->Refresh();
; 868  : 			line->SetColor(RGB(65,128,173));

	push	11370561				; 00ad8041H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 869  : 			line->Refresh();

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN47@CheckCompl:

; 870  : 		}
; 871  : 	}
; 872  : 
; 873  : 	lbox=(C_ListBox *)win->FindControl(PADLOCK_CUR);

	push	5052					; 000013bcH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 874  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN34@CheckCompl

; 875  : 	{
; 876  : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv333[ebp], eax
	cmp	DWORD PTR tv333[ebp], 5042		; 000013b2H
	je	SHORT $LN43@CheckCompl
	cmp	DWORD PTR tv333[ebp], 5043		; 000013b3H
	je	SHORT $LN41@CheckCompl
	cmp	DWORD PTR tv333[ebp], 5053		; 000013bdH
	je	SHORT $LN39@CheckCompl
	jmp	SHORT $LN37@CheckCompl
$LN43@CheckCompl:

; 877  : 		{
; 878  : 		case PADLOCK_1:
; 879  : 			if(CurrRules.SimPadlockMode > PDRealistic)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+52, 1
	jle	SHORT $LN42@CheckCompl

; 880  : 			{
; 881  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 882  : 				MakeRed++;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	add	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
$LN42@CheckCompl:

; 883  : 			}
; 884  : 			break;

	jmp	SHORT $LN44@CheckCompl
$LN41@CheckCompl:

; 885  : 		case PADLOCK_2:
; 886  : 			if(CurrRules.SimPadlockMode > PDEnhanced)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+52, 0
	jle	SHORT $LN40@CheckCompl

; 887  : 			{
; 888  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 889  : 				MakeRed++;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
$LN40@CheckCompl:

; 890  : 			}
; 891  : 			break;

	jmp	SHORT $LN44@CheckCompl
$LN39@CheckCompl:

; 892  : 		case PADLOCK_4:
; 893  : 			if(CurrRules.SimPadlockMode > PDDisabled)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+52, 2
	jle	SHORT $LN38@CheckCompl

; 894  : 			{
; 895  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 896  : 				MakeRed++;

	mov	edx, DWORD PTR _MakeRed$[ebp]
	add	edx, 1
	mov	DWORD PTR _MakeRed$[ebp], edx
$LN38@CheckCompl:
$LN37@CheckCompl:
$LN44@CheckCompl:

; 897  : 			}
; 898  : 			break;
; 899  : 	/*	case PADLOCK_3:
; 900  : 			if(CurrRules.SimPadlockMode > PDSuper)
; 901  : 			{
; 902  : 				InCompliance = FALSE;
; 903  : 				MakeRed++;
; 904  : 			}
; 905  : 			break;*/
; 906  : 		default:
; 907  : 			break;
; 908  : 		}
; 909  : 
; 910  : 		line = (C_Line *)win->FindControl(PADLOCK_LINE);

	push	5068					; 000013ccH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _line$[ebp], eax

; 911  : 		if(MakeRed && line)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN36@CheckCompl
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN36@CheckCompl

; 912  : 		{
; 913  : 			//lbox->SetNormColor(RGB(255,0,0));
; 914  : 			//lbox->Refresh();
; 915  : 			
; 916  : 			line->SetColor(RGB(230,0,0));

	push	230					; 000000e6H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 917  : 			line->Refresh();

	mov	eax, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 918  : 			MakeRed--;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
	jmp	SHORT $LN34@CheckCompl
$LN36@CheckCompl:

; 919  : 		}
; 920  : 		else if(line)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN34@CheckCompl

; 921  : 		{
; 922  : 			//lbox->SetNormColor(RGB(230,230,230));
; 923  : 			//lbox->Refresh();
; 924  : 			line->SetColor(RGB(65,128,173));

	push	11370561				; 00ad8041H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 925  : 			line->Refresh();

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN34@CheckCompl:

; 926  : 		}
; 927  : 	}
; 928  : 	
; 929  : 	lbox=(C_ListBox *)win->FindControl(REFUELING_CUR);

	push	5038					; 000013aeH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 930  : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	$LN23@CheckCompl

; 931  : 	{
; 932  : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv397[ebp], eax
	cmp	DWORD PTR tv397[ebp], 5040		; 000013b0H
	je	SHORT $LN30@CheckCompl
	cmp	DWORD PTR tv397[ebp], 5041		; 000013b1H
	je	SHORT $LN28@CheckCompl
	jmp	SHORT $LN26@CheckCompl
$LN30@CheckCompl:

; 933  : 		{
; 934  : 		case REFUEL_2:
; 935  : 			if(CurrRules.SimAirRefuelingMode < ARModerated)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+48, 2
	jge	SHORT $LN29@CheckCompl

; 936  : 			{
; 937  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 938  : 				MakeRed++;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	add	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
$LN29@CheckCompl:

; 939  : 			}
; 940  : 			break;

	jmp	SHORT $LN31@CheckCompl
$LN28@CheckCompl:

; 941  : 		case REFUEL_3:
; 942  : 			if(CurrRules.SimAirRefuelingMode < ARSimplistic)

	cmp	DWORD PTR ?CurrRules@@3VRulesClass@@A+48, 3
	jge	SHORT $LN27@CheckCompl

; 943  : 			{
; 944  : 				InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 945  : 				MakeRed++;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	add	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx
$LN27@CheckCompl:
$LN26@CheckCompl:
$LN31@CheckCompl:

; 946  : 			}
; 947  : 			break;
; 948  : 		default:
; 949  : 			break;
; 950  : 		}
; 951  : 
; 952  : 		line = (C_Line *)win->FindControl(REFUELING_LINE);

	push	5067					; 000013cbH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _line$[ebp], eax

; 953  : 		if(MakeRed && line)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN25@CheckCompl
	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN25@CheckCompl

; 954  : 		{
; 955  : 			//lbox->SetNormColor(RGB(255,0,0));
; 956  : 			//lbox->Refresh();
; 957  : 			
; 958  : 			line->SetColor(RGB(230,0,0));

	push	230					; 000000e6H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 959  : 			line->Refresh();

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 960  : 			MakeRed--;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	sub	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
	jmp	SHORT $LN23@CheckCompl
$LN25@CheckCompl:

; 961  : 		}
; 962  : 		else if(line)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN23@CheckCompl

; 963  : 		{
; 964  : 			//lbox->SetNormColor(RGB(230,230,230));
; 965  : 			//lbox->Refresh();
; 966  : 			line->SetColor(RGB(65,128,173));

	push	11370561				; 00ad8041H
	mov	ecx, DWORD PTR _line$[ebp]
	call	?SetColor@C_Line@@QAEXK@Z		; C_Line::SetColor

; 967  : 			line->Refresh();

	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN23@CheckCompl:

; 968  : 		}
; 969  : 	}
; 970  : 	
; 971  : 	button=(C_Button *)win->FindControl(FUEL_CUR);

	push	5050					; 000013baH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 972  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN21@CheckCompl

; 973  : 	{
; 974  : 		if(!CheckButtonCompliance(button,!CurrRules.UnlimitedFuel()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?UnlimitedFuel@RulesClass@@QAEHXZ	; RulesClass::UnlimitedFuel
	test	eax, eax
	jne	SHORT $LN91@CheckCompl
	mov	DWORD PTR tv455[ebp], 1
	jmp	SHORT $LN92@CheckCompl
$LN91@CheckCompl:
	mov	DWORD PTR tv455[ebp], 0
$LN92@CheckCompl:
	mov	ecx, DWORD PTR tv455[ebp]
	push	ecx
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CheckCompl

; 975  : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN21@CheckCompl:

; 976  : 	}
; 977  : 	
; 978  : 	button=(C_Button *)win->FindControl(CHAFFLARES_CUR);

	push	5046					; 000013b6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 979  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN19@CheckCompl

; 980  : 	{
; 981  : 		if(!CheckButtonCompliance(button,!CurrRules.UnlimitedChaff()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?UnlimitedChaff@RulesClass@@QAEHXZ	; RulesClass::UnlimitedChaff
	test	eax, eax
	jne	SHORT $LN93@CheckCompl
	mov	DWORD PTR tv471[ebp], 1
	jmp	SHORT $LN94@CheckCompl
$LN93@CheckCompl:
	mov	DWORD PTR tv471[ebp], 0
$LN94@CheckCompl:
	mov	eax, DWORD PTR tv471[ebp]
	push	eax
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CheckCompl

; 982  : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN19@CheckCompl:

; 983  : 	}
; 984  : 	
; 985  : 	button=(C_Button *)win->FindControl(COLLISIONS_CUR);

	push	5028					; 000013a4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 986  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN17@CheckCompl

; 987  : 	{
; 988  : 		if(!CheckButtonCompliance(button,!CurrRules.NoCollisions()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?NoCollisions@RulesClass@@QAEHXZ	; RulesClass::NoCollisions
	test	eax, eax
	jne	SHORT $LN95@CheckCompl
	mov	DWORD PTR tv487[ebp], 1
	jmp	SHORT $LN96@CheckCompl
$LN95@CheckCompl:
	mov	DWORD PTR tv487[ebp], 0
$LN96@CheckCompl:
	mov	edx, DWORD PTR tv487[ebp]
	push	edx
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@CheckCompl

; 989  : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN17@CheckCompl:

; 990  : 	}
; 991  : 	
; 992  : 	button=(C_Button *)win->FindControl(BLACKOUT_CUR);

	push	5030					; 000013a6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 993  : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN15@CheckCompl

; 994  : 	{
; 995  : 		if(!CheckButtonCompliance(button,!CurrRules.NoBlackout()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?NoBlackout@RulesClass@@QAEHXZ		; RulesClass::NoBlackout
	test	eax, eax
	jne	SHORT $LN97@CheckCompl
	mov	DWORD PTR tv503[ebp], 1
	jmp	SHORT $LN98@CheckCompl
$LN97@CheckCompl:
	mov	DWORD PTR tv503[ebp], 0
$LN98@CheckCompl:
	mov	ecx, DWORD PTR tv503[ebp]
	push	ecx
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CheckCompl

; 996  : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN15@CheckCompl:

; 997  : 	}
; 998  : 	
; 999  : 	
; 1000 : 	button=(C_Button *)win->FindControl(IDTAGS_CUR);

	push	5048					; 000013b8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1001 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN13@CheckCompl

; 1002 : 	{
; 1003 : 		if(!CheckButtonCompliance(button,!CurrRules.NameTagsOn()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?NameTagsOn@RulesClass@@QAEHXZ		; RulesClass::NameTagsOn
	test	eax, eax
	jne	SHORT $LN99@CheckCompl
	mov	DWORD PTR tv519[ebp], 1
	jmp	SHORT $LN100@CheckCompl
$LN99@CheckCompl:
	mov	DWORD PTR tv519[ebp], 0
$LN100@CheckCompl:
	mov	eax, DWORD PTR tv519[ebp]
	push	eax
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CheckCompl

; 1004 : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN13@CheckCompl:

; 1005 : 	}
; 1006 : 	
; 1007 : 	button=(C_Button *)win->FindControl(WEATHER_CUR);

	push	5032					; 000013a8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1008 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN11@CheckCompl

; 1009 : 	{
; 1010 : 		if(!CheckButtonCompliance(button,CurrRules.WeatherOn()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?WeatherOn@RulesClass@@QAEHXZ		; RulesClass::WeatherOn
	push	eax
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@CheckCompl

; 1011 : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN11@CheckCompl:

; 1012 : 	}
; 1013 : 	
; 1014 : 
; 1015 : 	button=(C_Button *)win->FindControl(INVULNERABILITY_CUR); 

	push	5055					; 000013bfH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1016 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN9@CheckCompl

; 1017 : 	{
; 1018 : 		if(!CheckButtonCompliance(button,!CurrRules.InvulnerableOn()) )

	mov	ecx, OFFSET ?CurrRules@@3VRulesClass@@A	; CurrRules
	call	?InvulnerableOn@RulesClass@@QAEHXZ	; RulesClass::InvulnerableOn
	test	eax, eax
	jne	SHORT $LN101@CheckCompl
	mov	DWORD PTR tv549[ebp], 1
	jmp	SHORT $LN102@CheckCompl
$LN101@CheckCompl:
	mov	DWORD PTR tv549[ebp], 0
$LN102@CheckCompl:
	mov	eax, DWORD PTR tv549[ebp]
	push	eax
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	call	?CheckButtonCompliance@@YAHPAVC_Button@@H@Z ; CheckButtonCompliance
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CheckCompl

; 1019 : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0
$LN9@CheckCompl:

; 1020 : 	}
; 1021 : 
; 1022 : 	/* May need to hit this if veh mag is 1
; 1023 : 	button=(C_Button *)win->FindControl(AUTO_SCALE);
; 1024 : 	if(button != NULL)
; 1025 : 	{
; 1026 : 		if(!CheckButtonCompliance(button,!CurrRules.InvulnerableOn()) )
; 1027 : 			InCompliance = FALSE;
; 1028 : 
; 1029 : 		if(button->GetState() == C_STATE_1)
; 1030 : 			PlayerOptions.SetObjFlag(DISP_OBJ_DYN_SCALING);
; 1031 : 		else
; 1032 : 			PlayerOptions.ClearObjFlag(DISP_OBJ_DYN_SCALING);
; 1033 : 	}*/
; 1034 : 
; 1035 : 	
; 1036 : 	
; 1037 : 	slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_CUR);

	push	5034					; 000013aaH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 1038 : 	if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	$LN6@CheckCompl

; 1039 : 	{
; 1040 : 		if(CurrRules.ObjMagnification < (int)( (float)slider->GetSliderPos()/( slider->GetSliderMax() - slider->GetSliderMin() ) * 4 + 1.5f ) )

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderPos@C_Slider@@QAEJXZ		; C_Slider::GetSliderPos
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	movss	DWORD PTR tv756[ebp], xmm0
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR tv756[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR __real@3fc00000
	cvttss2si edx, xmm1
	cvtsi2ss xmm0, edx
	comiss	xmm0, DWORD PTR ?CurrRules@@3VRulesClass@@A+24
	jbe	SHORT $LN7@CheckCompl

; 1041 : 		{
; 1042 : 			InCompliance = FALSE;

	mov	DWORD PTR _InCompliance$[ebp], 0

; 1043 : 			MakeRed++;

	mov	eax, DWORD PTR _MakeRed$[ebp]
	add	eax, 1
	mov	DWORD PTR _MakeRed$[ebp], eax
$LN7@CheckCompl:

; 1044 : 		}
; 1045 : 		ebox = (C_EditBox *)win->FindControl(slider->GetUserNumber(0));

	push	0
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetUserNumber@C_Base@@QAEJJ@Z		; C_Base::GetUserNumber
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 1046 : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN6@CheckCompl

; 1047 : 		{
; 1048 : 			if(MakeRed)

	cmp	DWORD PTR _MakeRed$[ebp], 0
	je	SHORT $LN5@CheckCompl

; 1049 : 			{
; 1050 : 				ebox->SetFgColor(RGB(255,0,0));

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetFgColor@C_EditBox@@QAEXK@Z		; C_EditBox::SetFgColor

; 1051 : 				MakeRed--;

	mov	ecx, DWORD PTR _MakeRed$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _MakeRed$[ebp], ecx

; 1052 : 			}
; 1053 : 			else

	jmp	SHORT $LN4@CheckCompl
$LN5@CheckCompl:

; 1054 : 			{
; 1055 : 				ebox->SetFgColor(RGB(0,255,0));

	push	65280					; 0000ff00H
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetFgColor@C_EditBox@@QAEXK@Z		; C_EditBox::SetFgColor
$LN4@CheckCompl:

; 1056 : 			}
; 1057 : 			ebox->Refresh();

	mov	edx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN6@CheckCompl:

; 1058 : 		}
; 1059 : 	}
; 1060 : 
; 1061 : 	button=(C_Button *)win->FindControl(INFO_COMPLY);

	push	5006					; 0000138eH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1062 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN3@CheckCompl

; 1063 : 	{
; 1064 : 		if(InCompliance)

	cmp	DWORD PTR _InCompliance$[ebp], 0
	je	SHORT $LN2@CheckCompl

; 1065 : 		{
; 1066 : 			button->SetLabel(0,TXT_OK);

	push	113					; 00000071H
	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	call	?SetLabel@C_Button@@QAEXJJ@Z		; C_Button::SetLabel

; 1067 : 		}
; 1068 : 		else

	jmp	SHORT $LN1@CheckCompl
$LN2@CheckCompl:

; 1069 : 		{
; 1070 : 			button->SetLabel(0,TXT_COMPLY);

	push	112					; 00000070H
	push	0
	mov	ecx, DWORD PTR _button$[ebp]
	call	?SetLabel@C_Button@@QAEXJJ@Z		; C_Button::SetLabel
$LN1@CheckCompl:

; 1071 : 		}
; 1072 : 		button->Refresh();

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN3@CheckCompl:
$LN89@CheckCompl:

; 1073 : 	}
; 1074 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckCompliance@@YAXXZ ENDP				; CheckCompliance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
tv606 = -132						; size = 4
_host$ = -128						; size = 4
tv74 = -124						; size = 4
tv274 = -120						; size = 4
tv245 = -116						; size = 4
tv303 = -112						; size = 4
tv216 = -108						; size = 4
tv183 = -104						; size = 4
_slider$ = -100						; size = 4
_ebox$ = -96						; size = 4
_lbox$ = -92						; size = 4
_win$ = -88						; size = 4
_button$ = -84						; size = 4
_tempRules$ = -80					; size = 76
__$ArrayPad$ = -4					; size = 4
?INFOSaveRules@@YAXXZ PROC				; INFOSaveRules

; 1457 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 1458 : 	C_Window	*win;
; 1459 : 	C_Button	*button;
; 1460 : 	C_ListBox	*lbox;
; 1461 : 	C_Slider	*slider;
; 1462 : 	C_EditBox	*ebox;
; 1463 : 	RulesClass  tempRules;

	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	??0RulesClass@@QAE@XZ			; RulesClass::RulesClass

; 1464 : 
; 1465 : 	tempRules.Initialize();

	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?Initialize@RulesClass@@QAEXXZ		; RulesClass::Initialize

; 1466 : 
; 1467 : 	if (vuPlayerPoolGroup != vuLocalGame)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN69@INFOSaveRu
	mov	DWORD PTR tv74[ebp], 0
	jmp	SHORT $LN70@INFOSaveRu
$LN69@INFOSaveRu:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	DWORD PTR tv74[ebp], eax
$LN70@INFOSaveRu:
	mov	ecx, DWORD PTR ?vuPlayerPoolGroup@@3PAVVuGameEntity@@A ; vuPlayerPoolGroup
	cmp	ecx, DWORD PTR tv74[ebp]
	je	SHORT $LN66@INFOSaveRu

; 1468 : 		return;

	jmp	$LN67@INFOSaveRu
$LN66@INFOSaveRu:

; 1469 : 
; 1470 : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 1471 : 	
; 1472 : 	if(win == NULL)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN65@INFOSaveRu

; 1473 : 		return;

	jmp	$LN67@INFOSaveRu
$LN65@INFOSaveRu:

; 1474 : 
; 1475 : 	int host = FALSE;

	mov	DWORD PTR _host$[ebp], 0

; 1476 : /*
; 1477 : 	if(FalconLocalGameEntity && FalconLocalSession && FalconLocalGameEntity->OwnerId() == FalconLocalSession->Id())
; 1478 : 		host = TRUE;
; 1479 : 	else if(!gCommsMgr->GetTargetGame() && !FalconLocalGameEntity)
; 1480 : 	*/	host = modify;

	mov	edx, DWORD PTR ?modify@@3HA		; modify
	mov	DWORD PTR _host$[ebp], edx

; 1481 : 
; 1482 : 	if(host)

	cmp	DWORD PTR _host$[ebp], 0
	je	$LN64@INFOSaveRu

; 1483 : 	{
; 1484 : 		ebox = (C_EditBox *)win->FindControl(INFO_GAMENAME);

	push	5025					; 000013a1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 1485 : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN63@INFOSaveRu

; 1486 : 		{
; 1487 : 			//if(FalconLocalGame && _tcscmp( FalconLocalGame->GameName(),ebox->GetText() ) )
; 1488 : 			//	FalconLocalGame->SetGameName(ebox->GetText());
; 1489 : 			_tcscpy(GameName,ebox->GetText());

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	push	eax
	push	OFFSET ?GameName@@3PADA			; GameName
	call	_strcpy
	add	esp, 8
$LN63@INFOSaveRu:

; 1490 : 		}
; 1491 : 
; 1492 : 		ebox = (C_EditBox *)win->FindControl(INFO_PASSWORD);

	push	5026					; 000013a2H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 1493 : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN61@INFOSaveRu

; 1494 : 		{
; 1495 : 			if(ebox->GetText())

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	test	eax, eax
	je	SHORT $LN61@INFOSaveRu

; 1496 : 				tempRules.SetPassword(ebox->GetText());

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	push	eax
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetPassword@RulesClass@@QAEHPAD@Z	; RulesClass::SetPassword
$LN61@INFOSaveRu:

; 1497 : 			//if(FalconLocalGameEntity)
; 1498 : 				//FalconLocalGameEntity->EncipherPassword(CurrRules.Password,RUL_PW_LEN);
; 1499 : 		}
; 1500 : 
; 1501 : 		ebox = (C_EditBox *)win->FindControl(MAX_PLAYERS);

	push	5056					; 000013c0H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 1502 : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN60@INFOSaveRu

; 1503 : 		{
; 1504 : 			tempRules.SetMaxPlayers(ebox->GetInteger());

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetInteger@C_EditBox@@QAEJXZ		; C_EditBox::GetInteger
	push	eax
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetMaxPlayers@RulesClass@@QAEXH@Z	; RulesClass::SetMaxPlayers
$LN60@INFOSaveRu:

; 1505 : 		}
; 1506 : 
; 1507 : 		lbox=(C_ListBox *)win->FindControl(FLTMOD_REQ);

	push	5011					; 00001393H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1508 : 		if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN57@INFOSaveRu

; 1509 : 		{
; 1510 : 			if((lbox->GetTextID())==FLTMOD_1)

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	cmp	eax, 5013				; 00001395H
	jne	SHORT $LN58@INFOSaveRu

; 1511 : 				tempRules.SimFlightModel = FMAccurate;

	mov	DWORD PTR _tempRules$[ebp+32], 2

; 1512 : 			else

	jmp	SHORT $LN57@INFOSaveRu
$LN58@INFOSaveRu:

; 1513 : 				tempRules.SimFlightModel = FMSimplified;

	mov	DWORD PTR _tempRules$[ebp+32], 0
$LN57@INFOSaveRu:

; 1514 : 		}
; 1515 : 
; 1516 : 		lbox=(C_ListBox *)win->FindControl(RADAR_REQ);

	push	5015					; 00001397H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1517 : 		if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN54@INFOSaveRu

; 1518 : 		{
; 1519 : 			switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv183[ebp], eax
	mov	eax, DWORD PTR tv183[ebp]
	sub	eax, 5017				; 00001399H
	mov	DWORD PTR tv183[ebp], eax
	cmp	DWORD PTR tv183[ebp], 52		; 00000034H
	ja	SHORT $LN54@INFOSaveRu
	mov	ecx, DWORD PTR tv183[ebp]
	movzx	edx, BYTE PTR $LN71@INFOSaveRu[ecx]
	jmp	DWORD PTR $LN72@INFOSaveRu[edx*4]
$LN53@INFOSaveRu:

; 1520 : 			{
; 1521 : 				// M.N. full realism mode added
; 1522 : 			case RADAR_0:
; 1523 : 				tempRules.SimAvionicsType = ATRealisticAV;

	mov	DWORD PTR _tempRules$[ebp+40], 3

; 1524 : 				break;

	jmp	SHORT $LN54@INFOSaveRu
$LN52@INFOSaveRu:

; 1525 : 			case RADAR_1:
; 1526 : 				tempRules.SimAvionicsType = ATRealistic;

	mov	DWORD PTR _tempRules$[ebp+40], 2

; 1527 : 				break;

	jmp	SHORT $LN54@INFOSaveRu
$LN51@INFOSaveRu:

; 1528 : 			case RADAR_2:
; 1529 : 				tempRules.SimAvionicsType = ATSimplified;

	mov	DWORD PTR _tempRules$[ebp+40], 1

; 1530 : 				break;

	jmp	SHORT $LN54@INFOSaveRu
$LN50@INFOSaveRu:

; 1531 : 			case RADAR_3:
; 1532 : 				tempRules.SimAvionicsType = ATEasy;

	mov	DWORD PTR _tempRules$[ebp+40], 0
$LN54@INFOSaveRu:

; 1533 : 				break;
; 1534 : 			}
; 1535 : 		}
; 1536 : 
; 1537 : 		lbox=(C_ListBox *)win->FindControl(WEAPEFF_REQ);

	push	5020					; 0000139cH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1538 : 		if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN47@INFOSaveRu

; 1539 : 		{
; 1540 : 			switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv216[ebp], eax
	cmp	DWORD PTR tv216[ebp], 5022		; 0000139eH
	je	SHORT $LN46@INFOSaveRu
	cmp	DWORD PTR tv216[ebp], 5023		; 0000139fH
	je	SHORT $LN45@INFOSaveRu
	cmp	DWORD PTR tv216[ebp], 5024		; 000013a0H
	je	SHORT $LN44@INFOSaveRu
	jmp	SHORT $LN47@INFOSaveRu
$LN46@INFOSaveRu:

; 1541 : 			{
; 1542 : 			case WEAPEFF_1:
; 1543 : 				tempRules.SimWeaponEffect = WEAccurate;

	mov	DWORD PTR _tempRules$[ebp+36], 2

; 1544 : 				break;

	jmp	SHORT $LN47@INFOSaveRu
$LN45@INFOSaveRu:

; 1545 : 			case WEAPEFF_2:
; 1546 : 				tempRules.SimWeaponEffect = WEEnhanced;

	mov	DWORD PTR _tempRules$[ebp+36], 1

; 1547 : 				break;

	jmp	SHORT $LN47@INFOSaveRu
$LN44@INFOSaveRu:

; 1548 : 			case WEAPEFF_3:
; 1549 : 				tempRules.SimWeaponEffect = WEExaggerated;

	mov	DWORD PTR _tempRules$[ebp+36], 0
$LN47@INFOSaveRu:

; 1550 : 				break;
; 1551 : 			}
; 1552 : 		}
; 1553 : 
; 1554 : 		lbox=(C_ListBox *)win->FindControl(AUTOPILOT_REQ);

	push	5007					; 0000138fH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1555 : 		if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN41@INFOSaveRu

; 1556 : 		{
; 1557 : 			switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv245[ebp], eax
	cmp	DWORD PTR tv245[ebp], 5009		; 00001391H
	je	SHORT $LN40@INFOSaveRu
	cmp	DWORD PTR tv245[ebp], 5010		; 00001392H
	je	SHORT $LN39@INFOSaveRu
	cmp	DWORD PTR tv245[ebp], 5059		; 000013c3H
	je	SHORT $LN38@INFOSaveRu
	jmp	SHORT $LN41@INFOSaveRu
$LN40@INFOSaveRu:

; 1558 : 			{
; 1559 : 			case AUTO_1:
; 1560 : 				tempRules.SimAutopilotType = APNormal;

	mov	DWORD PTR _tempRules$[ebp+44], 2

; 1561 : 				break;

	jmp	SHORT $LN41@INFOSaveRu
$LN39@INFOSaveRu:

; 1562 : 			case AUTO_2:
; 1563 : 				tempRules.SimAutopilotType = APEnhanced;

	mov	DWORD PTR _tempRules$[ebp+44], 1

; 1564 : 				break;

	jmp	SHORT $LN41@INFOSaveRu
$LN38@INFOSaveRu:

; 1565 : 			case AUTO_3:
; 1566 : 				tempRules.SimAutopilotType = APIntelligent;

	mov	DWORD PTR _tempRules$[ebp+44], 0
$LN41@INFOSaveRu:

; 1567 : 				break;
; 1568 : 			}
; 1569 : 		}
; 1570 : 
; 1571 : 		lbox=(C_ListBox *)win->FindControl(PADLOCK_REQ);

	push	5051					; 000013bbH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1572 : 		if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN35@INFOSaveRu

; 1573 : 		{
; 1574 : 			switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv274[ebp], eax
	cmp	DWORD PTR tv274[ebp], 5042		; 000013b2H
	je	SHORT $LN33@INFOSaveRu
	cmp	DWORD PTR tv274[ebp], 5043		; 000013b3H
	je	SHORT $LN32@INFOSaveRu
	cmp	DWORD PTR tv274[ebp], 5053		; 000013bdH
	je	SHORT $LN34@INFOSaveRu
	jmp	SHORT $LN35@INFOSaveRu
$LN34@INFOSaveRu:

; 1575 : 			{
; 1576 : 			case PADLOCK_4:
; 1577 : 				tempRules.SimPadlockMode = PDDisabled;

	mov	DWORD PTR _tempRules$[ebp+52], 2

; 1578 : 				break;

	jmp	SHORT $LN35@INFOSaveRu
$LN33@INFOSaveRu:

; 1579 : 			case PADLOCK_1:
; 1580 : 				tempRules.SimPadlockMode = PDRealistic;

	mov	DWORD PTR _tempRules$[ebp+52], 1

; 1581 : 				break;

	jmp	SHORT $LN35@INFOSaveRu
$LN32@INFOSaveRu:

; 1582 : 			case PADLOCK_2:
; 1583 : 				tempRules.SimPadlockMode = PDEnhanced;

	mov	DWORD PTR _tempRules$[ebp+52], 0
$LN35@INFOSaveRu:

; 1584 : 				break;
; 1585 : 			//case PADLOCK_3:
; 1586 : 			//	tempRules.SimPadlockMode = PDSuper;
; 1587 : 			//	break;
; 1588 : 			}
; 1589 : 		}
; 1590 : 
; 1591 : 		lbox=(C_ListBox *)win->FindControl(REFUELING_REQ);

	push	5037					; 000013adH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1592 : 		if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN29@INFOSaveRu

; 1593 : 		{
; 1594 : 			switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv303[ebp], eax
	cmp	DWORD PTR tv303[ebp], 5039		; 000013afH
	je	SHORT $LN28@INFOSaveRu
	cmp	DWORD PTR tv303[ebp], 5040		; 000013b0H
	je	SHORT $LN27@INFOSaveRu
	cmp	DWORD PTR tv303[ebp], 5041		; 000013b1H
	je	SHORT $LN26@INFOSaveRu
	jmp	SHORT $LN29@INFOSaveRu
$LN28@INFOSaveRu:

; 1595 : 			{
; 1596 : 			case REFUEL_1:
; 1597 : 				tempRules.SimAirRefuelingMode = ARRealistic;

	mov	DWORD PTR _tempRules$[ebp+48], 1

; 1598 : 				break;

	jmp	SHORT $LN29@INFOSaveRu
$LN27@INFOSaveRu:

; 1599 : 			case REFUEL_2:
; 1600 : 				tempRules.SimAirRefuelingMode = ARModerated;

	mov	DWORD PTR _tempRules$[ebp+48], 2

; 1601 : 				break;

	jmp	SHORT $LN29@INFOSaveRu
$LN26@INFOSaveRu:

; 1602 : 			case REFUEL_3:
; 1603 : 				tempRules.SimAirRefuelingMode = ARSimplistic;

	mov	DWORD PTR _tempRules$[ebp+48], 3
$LN29@INFOSaveRu:

; 1604 : 				break;
; 1605 : 			}
; 1606 : 		}
; 1607 : 
; 1608 : 		button=(C_Button *)win->FindControl(FUEL_REQ);

	push	5049					; 000013b9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1609 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN23@INFOSaveRu

; 1610 : 		{
; 1611 : 			if(button->GetState() == C_STATE_1)

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN24@INFOSaveRu

; 1612 : 				tempRules.SetSimFlag (SIM_UNLIMITED_FUEL);

	push	4
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetSimFlag@RulesClass@@QAEXH@Z		; RulesClass::SetSimFlag

; 1613 : 			else

	jmp	SHORT $LN23@INFOSaveRu
$LN24@INFOSaveRu:

; 1614 : 				tempRules.ClearSimFlag (SIM_UNLIMITED_FUEL);

	push	4
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearSimFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearSimFlag
$LN23@INFOSaveRu:

; 1615 : 		}
; 1616 : 
; 1617 : 		button=(C_Button *)win->FindControl(CHAFFLARES_REQ);

	push	5045					; 000013b5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1618 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN20@INFOSaveRu

; 1619 : 		{
; 1620 : 			if(button->GetState() == C_STATE_1)

	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 1
	jne	SHORT $LN21@INFOSaveRu

; 1621 : 				tempRules.SetSimFlag (SIM_UNLIMITED_CHAFF);

	push	16					; 00000010H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetSimFlag@RulesClass@@QAEXH@Z		; RulesClass::SetSimFlag

; 1622 : 			else

	jmp	SHORT $LN20@INFOSaveRu
$LN21@INFOSaveRu:

; 1623 : 				tempRules.ClearSimFlag (SIM_UNLIMITED_CHAFF);

	push	16					; 00000010H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearSimFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearSimFlag
$LN20@INFOSaveRu:

; 1624 : 			
; 1625 : 		}
; 1626 : 
; 1627 : 		button=(C_Button *)win->FindControl(COLLISIONS_REQ);

	push	5027					; 000013a3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1628 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN17@INFOSaveRu

; 1629 : 		{
; 1630 : 			if(button->GetState() == C_STATE_1)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN18@INFOSaveRu

; 1631 : 				tempRules.SetSimFlag (SIM_NO_COLLISIONS);

	push	32					; 00000020H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetSimFlag@RulesClass@@QAEXH@Z		; RulesClass::SetSimFlag

; 1632 : 			else

	jmp	SHORT $LN17@INFOSaveRu
$LN18@INFOSaveRu:

; 1633 : 				tempRules.ClearSimFlag (SIM_NO_COLLISIONS);

	push	32					; 00000020H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearSimFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearSimFlag
$LN17@INFOSaveRu:

; 1634 : 		}
; 1635 : 
; 1636 : 		button=(C_Button *)win->FindControl(BLACKOUT_REQ);

	push	5029					; 000013a5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1637 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN14@INFOSaveRu

; 1638 : 		{
; 1639 : 			if(button->GetState() == C_STATE_1)

	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 1
	jne	SHORT $LN15@INFOSaveRu

; 1640 : 				tempRules.SetSimFlag (SIM_NO_BLACKOUT);

	push	2
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetSimFlag@RulesClass@@QAEXH@Z		; RulesClass::SetSimFlag

; 1641 : 			else

	jmp	SHORT $LN14@INFOSaveRu
$LN15@INFOSaveRu:

; 1642 : 				tempRules.ClearSimFlag (SIM_NO_BLACKOUT);

	push	2
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearSimFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearSimFlag
$LN14@INFOSaveRu:

; 1643 : 		}
; 1644 : 
; 1645 : 
; 1646 : 		button=(C_Button *)win->FindControl(IDTAGS_REQ);

	push	5047					; 000013b7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1647 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN11@INFOSaveRu

; 1648 : 		{
; 1649 : 			if(button->GetState() == C_STATE_1)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN12@INFOSaveRu

; 1650 : 				tempRules.SetSimFlag (SIM_NAMETAGS);

	push	64					; 00000040H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetSimFlag@RulesClass@@QAEXH@Z		; RulesClass::SetSimFlag

; 1651 : 			else

	jmp	SHORT $LN11@INFOSaveRu
$LN12@INFOSaveRu:

; 1652 : 				tempRules.ClearSimFlag (SIM_NAMETAGS);			

	push	64					; 00000040H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearSimFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearSimFlag
$LN11@INFOSaveRu:

; 1653 : 		}
; 1654 : 
; 1655 : 		button=(C_Button *)win->FindControl(WEATHER_REQ);

	push	5031					; 000013a7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1656 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN8@INFOSaveRu

; 1657 : 		{
; 1658 : 			if(button->GetState() == C_STATE_1)

	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 1
	jne	SHORT $LN9@INFOSaveRu

; 1659 : 				tempRules.SetGenFlag(GEN_NO_WEATHER);

	push	1
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetGenFlag@RulesClass@@QAEXH@Z		; RulesClass::SetGenFlag

; 1660 : 			else

	jmp	SHORT $LN8@INFOSaveRu
$LN9@INFOSaveRu:

; 1661 : 				tempRules.ClearGenFlag(GEN_NO_WEATHER);

	push	1
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearGenFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearGenFlag
$LN8@INFOSaveRu:

; 1662 : 		}
; 1663 : 
; 1664 : 
; 1665 : 		button=(C_Button *)win->FindControl(INVULNERABILITY_REQ); 

	push	5054					; 000013beH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1666 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN5@INFOSaveRu

; 1667 : 		{
; 1668 : 			if(button->GetState() == C_STATE_1)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN6@INFOSaveRu

; 1669 : 				tempRules.SetSimFlag(SIM_INVULNERABLE);

	push	512					; 00000200H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetSimFlag@RulesClass@@QAEXH@Z		; RulesClass::SetSimFlag

; 1670 : 			else

	jmp	SHORT $LN5@INFOSaveRu
$LN6@INFOSaveRu:

; 1671 : 				tempRules.ClearSimFlag(SIM_INVULNERABLE);

	push	512					; 00000200H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearSimFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearSimFlag
$LN5@INFOSaveRu:

; 1672 : 		}
; 1673 : 
; 1674 : 		button=(C_Button *)win->FindControl(EXT_VIEWS_REQ); 

	push	5057					; 000013c1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1675 : 		if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN2@INFOSaveRu

; 1676 : 		{		
; 1677 : 			if(button->GetState() == C_STATE_1)

	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 1
	jne	SHORT $LN3@INFOSaveRu

; 1678 : 				tempRules.SetGenFlag(GEN_EXTERNAL_VIEW);

	push	32					; 00000020H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?SetGenFlag@RulesClass@@QAEXH@Z		; RulesClass::SetGenFlag

; 1679 : 			else

	jmp	SHORT $LN2@INFOSaveRu
$LN3@INFOSaveRu:

; 1680 : 				tempRules.ClearGenFlag(GEN_EXTERNAL_VIEW);

	push	32					; 00000020H
	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?ClearGenFlag@RulesClass@@QAEXH@Z	; RulesClass::ClearGenFlag
$LN2@INFOSaveRu:

; 1681 : 		}
; 1682 : 
; 1683 : 		/* May need to hit this if veh mag is 1
; 1684 : 		button=(C_Button *)win->FindControl(AUTO_SCALE);
; 1685 : 		if(button != NULL)
; 1686 : 		{
; 1687 : 			if(button->GetState() == C_STATE_1)
; 1688 : 				PlayerOptions.SetObjFlag(DISP_OBJ_DYN_SCALING);
; 1689 : 			else
; 1690 : 				PlayerOptions.ClearObjFlag(DISP_OBJ_DYN_SCALING);
; 1691 : 		}*/
; 1692 : 
; 1693 : 		slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_REQ);

	push	5033					; 000013a9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 1694 : 		if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	SHORT $LN1@INFOSaveRu

; 1695 : 		{
; 1696 : 			tempRules.ObjMagnification = static_cast<float>((int)( (float)slider->GetSliderPos()/( slider->GetSliderMax() - slider->GetSliderMin() ) * 4 + 1.5f ));

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderPos@C_Slider@@QAEJXZ		; C_Slider::GetSliderPos
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	movss	DWORD PTR tv606[ebp], xmm0
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR tv606[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR __real@3fc00000
	cvttss2si ecx, xmm1
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _tempRules$[ebp+24], xmm0
$LN1@INFOSaveRu:

; 1697 : 		}
; 1698 : 
; 1699 : //		if(FalconLocalGameEntity)
; 1700 : //			FalconLocalGameEntity->UpdateRules(tempRules.GetRules());
; 1701 : //		else
; 1702 : 			gRules[RuleMode].LoadRules(tempRules.GetRules());

	lea	ecx, DWORD PTR _tempRules$[ebp]
	call	?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ; RulesClass::GetRules
	push	eax
	mov	ecx, DWORD PTR ?RuleMode@@3W4RulesModes@@A ; RuleMode
	imul	ecx, 76					; 0000004cH
	add	ecx, OFFSET ?gRules@@3PAVRulesClass@@A	; gRules
	call	?LoadRules@RulesClass@@QAEXPAURulesStruct@@@Z ; RulesClass::LoadRules
$LN64@INFOSaveRu:
$LN67@INFOSaveRu:

; 1703 : 	}
; 1704 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN72@INFOSaveRu:
	DD	$LN52@INFOSaveRu
	DD	$LN51@INFOSaveRu
	DD	$LN50@INFOSaveRu
	DD	$LN53@INFOSaveRu
	DD	$LN54@INFOSaveRu
$LN71@INFOSaveRu:
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?INFOSaveRules@@YAXXZ ENDP				; INFOSaveRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\comms\info.cpp
_TEXT	SEGMENT
$T1 = -68						; size = 8
$T2 = -60						; size = 8
tv647 = -52						; size = 4
_host$ = -48						; size = 4
tv136 = -44						; size = 4
tv80 = -40						; size = 4
tv270 = -36						; size = 4
tv249 = -32						; size = 4
tv228 = -28						; size = 4
tv207 = -24						; size = 4
_slider$ = -20						; size = 4
tv187 = -16						; size = 4
_win$ = -12						; size = 4
_lbox$ = -8						; size = 4
_button$ = -4						; size = 4
?INFOSaveValues@@YAXXZ PROC				; INFOSaveValues

; 1707 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi

; 1708 : 	C_Window	*win;
; 1709 : 	C_Button	*button;
; 1710 : 	C_ListBox	*lbox;
; 1711 : 	C_Slider	*slider;
; 1712 : 	
; 1713 : 	
; 1714 : 	win=gMainHandler->FindWindow(INFO_WIN);

	push	5004					; 0000138cH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 1715 : 	
; 1716 : 	if(win == NULL)

	cmp	DWORD PTR _win$[ebp], 0
	jne	SHORT $LN65@INFOSaveVa

; 1717 : 		return;

	jmp	$LN66@INFOSaveVa
$LN65@INFOSaveVa:

; 1718 : 
; 1719 : 	int host = FALSE;

	mov	DWORD PTR _host$[ebp], 0

; 1720 : 
; 1721 : 	if(FalconLocalGame && FalconLocalSession && FalconLocalGame->OwnerId() == FalconLocalSession->Id())

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN68@INFOSaveVa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN69@INFOSaveVa
$LN68@INFOSaveVa:
	mov	DWORD PTR tv80[ebp], 0
$LN69@INFOSaveVa:
	cmp	DWORD PTR tv80[ebp], 0
	je	SHORT $LN64@INFOSaveVa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	test	eax, eax
	je	SHORT $LN64@INFOSaveVa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN70@INFOSaveVa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN71@INFOSaveVa
$LN70@INFOSaveVa:
	mov	DWORD PTR tv136[ebp], 0
$LN71@INFOSaveVa:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR tv136[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN64@INFOSaveVa

; 1722 : 		host = TRUE;

	mov	DWORD PTR _host$[ebp], 1
$LN64@INFOSaveVa:

; 1723 : 	
; 1724 : 	lbox=(C_ListBox *)win->FindControl(FLTMOD_CUR);

	push	5012					; 00001394H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1725 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN63@INFOSaveVa

; 1726 : 	{
; 1727 : 		if((lbox->GetTextID())==FLTMOD_1)

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	cmp	eax, 5013				; 00001395H
	jne	SHORT $LN62@INFOSaveVa

; 1728 : 			PlayerOptions.SimFlightModel = FMAccurate;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+56, 2

; 1729 : 		else

	jmp	SHORT $LN61@INFOSaveVa
$LN62@INFOSaveVa:

; 1730 : 			PlayerOptions.SimFlightModel = FMSimplified;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+56, 0
$LN61@INFOSaveVa:

; 1731 : 
; 1732 : 		lbox->Refresh();

	mov	edx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN63@INFOSaveVa:

; 1733 : 	}
; 1734 : 	
; 1735 : 	lbox=(C_ListBox *)win->FindControl(RADAR_CUR);

	push	5016					; 00001398H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1736 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN60@INFOSaveVa

; 1737 : 	{
; 1738 : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv187[ebp], eax
	mov	eax, DWORD PTR tv187[ebp]
	sub	eax, 5017				; 00001399H
	mov	DWORD PTR tv187[ebp], eax
	cmp	DWORD PTR tv187[ebp], 52		; 00000034H
	ja	SHORT $LN58@INFOSaveVa
	mov	ecx, DWORD PTR tv187[ebp]
	movzx	edx, BYTE PTR $LN72@INFOSaveVa[ecx]
	jmp	DWORD PTR $LN73@INFOSaveVa[edx*4]
$LN57@INFOSaveVa:

; 1739 : 		{
; 1740 : 			// M.N. full realism mode added
; 1741 : 		case RADAR_0:
; 1742 : 			PlayerOptions.SimAvionicsType = ATRealisticAV;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+64, 3

; 1743 : 			break;

	jmp	SHORT $LN58@INFOSaveVa
$LN56@INFOSaveVa:

; 1744 : 		case RADAR_1:
; 1745 : 			PlayerOptions.SimAvionicsType = ATRealistic;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+64, 2

; 1746 : 			break;

	jmp	SHORT $LN58@INFOSaveVa
$LN55@INFOSaveVa:

; 1747 : 		case RADAR_2:
; 1748 : 			PlayerOptions.SimAvionicsType = ATSimplified;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+64, 1

; 1749 : 			break;

	jmp	SHORT $LN58@INFOSaveVa
$LN54@INFOSaveVa:

; 1750 : 		case RADAR_3:
; 1751 : 			PlayerOptions.SimAvionicsType = ATEasy;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+64, 0
$LN58@INFOSaveVa:

; 1752 : 			break;
; 1753 : 		}
; 1754 : 		lbox->Refresh();

	mov	eax, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN60@INFOSaveVa:

; 1755 : 	}
; 1756 : 	
; 1757 : 	lbox=(C_ListBox *)win->FindControl(WEAPEFF_CUR);

	push	5021					; 0000139dH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1758 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN53@INFOSaveVa

; 1759 : 	{
; 1760 : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv207[ebp], eax
	cmp	DWORD PTR tv207[ebp], 5022		; 0000139eH
	je	SHORT $LN50@INFOSaveVa
	cmp	DWORD PTR tv207[ebp], 5023		; 0000139fH
	je	SHORT $LN49@INFOSaveVa
	cmp	DWORD PTR tv207[ebp], 5024		; 000013a0H
	je	SHORT $LN48@INFOSaveVa
	jmp	SHORT $LN51@INFOSaveVa
$LN50@INFOSaveVa:

; 1761 : 		{
; 1762 : 		case WEAPEFF_1:
; 1763 : 			PlayerOptions.SimWeaponEffect = WEAccurate;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+60, 2

; 1764 : 			break;

	jmp	SHORT $LN51@INFOSaveVa
$LN49@INFOSaveVa:

; 1765 : 		case WEAPEFF_2:
; 1766 : 			PlayerOptions.SimWeaponEffect = WEEnhanced;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+60, 1

; 1767 : 			break;

	jmp	SHORT $LN51@INFOSaveVa
$LN48@INFOSaveVa:

; 1768 : 		case WEAPEFF_3:
; 1769 : 			PlayerOptions.SimWeaponEffect = WEExaggerated;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+60, 0
$LN51@INFOSaveVa:

; 1770 : 			break;
; 1771 : 		}
; 1772 : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN53@INFOSaveVa:

; 1773 : 	}
; 1774 : 	
; 1775 : 	lbox=(C_ListBox *)win->FindControl(AUTOPILOT_CUR);

	push	5008					; 00001390H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1776 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN47@INFOSaveVa

; 1777 : 	{
; 1778 : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv228[ebp], eax
	cmp	DWORD PTR tv228[ebp], 5009		; 00001391H
	je	SHORT $LN44@INFOSaveVa
	cmp	DWORD PTR tv228[ebp], 5010		; 00001392H
	je	SHORT $LN43@INFOSaveVa
	cmp	DWORD PTR tv228[ebp], 5059		; 000013c3H
	je	SHORT $LN42@INFOSaveVa
	jmp	SHORT $LN45@INFOSaveVa
$LN44@INFOSaveVa:

; 1779 : 		{
; 1780 : 		case AUTO_1:
; 1781 : 			PlayerOptions.SimAutopilotType = APNormal;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+68, 2

; 1782 : 			break;

	jmp	SHORT $LN45@INFOSaveVa
$LN43@INFOSaveVa:

; 1783 : 		case AUTO_2:
; 1784 : 			PlayerOptions.SimAutopilotType = APEnhanced;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+68, 1

; 1785 : 			break;

	jmp	SHORT $LN45@INFOSaveVa
$LN42@INFOSaveVa:

; 1786 : 		case AUTO_3:
; 1787 : 			PlayerOptions.SimAutopilotType = APIntelligent;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+68, 0
$LN45@INFOSaveVa:

; 1788 : 			break;
; 1789 : 		}
; 1790 : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN47@INFOSaveVa:

; 1791 : 	}
; 1792 : 
; 1793 : 	lbox=(C_ListBox *)win->FindControl(PADLOCK_CUR);

	push	5052					; 000013bcH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1794 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN41@INFOSaveVa

; 1795 : 	{
; 1796 : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv249[ebp], eax
	cmp	DWORD PTR tv249[ebp], 5042		; 000013b2H
	je	SHORT $LN37@INFOSaveVa
	cmp	DWORD PTR tv249[ebp], 5043		; 000013b3H
	je	SHORT $LN36@INFOSaveVa
	cmp	DWORD PTR tv249[ebp], 5053		; 000013bdH
	je	SHORT $LN38@INFOSaveVa
	jmp	SHORT $LN39@INFOSaveVa
$LN38@INFOSaveVa:

; 1797 : 		{
; 1798 : 		case PADLOCK_4:
; 1799 : 			PlayerOptions.SimPadlockMode = PDDisabled;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+76, 2

; 1800 : 			break;

	jmp	SHORT $LN39@INFOSaveVa
$LN37@INFOSaveVa:

; 1801 : 		case PADLOCK_1:
; 1802 : 			PlayerOptions.SimPadlockMode = PDRealistic;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+76, 1

; 1803 : 			break;

	jmp	SHORT $LN39@INFOSaveVa
$LN36@INFOSaveVa:

; 1804 : 		case PADLOCK_2:
; 1805 : 			PlayerOptions.SimPadlockMode = PDEnhanced;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+76, 0
$LN39@INFOSaveVa:

; 1806 : 			break;
; 1807 : 		//case PADLOCK_3:
; 1808 : 		//	PlayerOptions.SimPadlockMode = PDSuper;
; 1809 : 		//	break;
; 1810 : 		}
; 1811 : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN41@INFOSaveVa:

; 1812 : 	}
; 1813 : 	
; 1814 : 	lbox=(C_ListBox *)win->FindControl(REFUELING_CUR);

	push	5038					; 000013aeH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1815 : 	if(lbox != NULL)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN35@INFOSaveVa

; 1816 : 	{
; 1817 : 		switch(lbox->GetTextID())

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR tv270[ebp], eax
	cmp	DWORD PTR tv270[ebp], 5039		; 000013afH
	je	SHORT $LN32@INFOSaveVa
	cmp	DWORD PTR tv270[ebp], 5040		; 000013b0H
	je	SHORT $LN31@INFOSaveVa
	cmp	DWORD PTR tv270[ebp], 5041		; 000013b1H
	je	SHORT $LN30@INFOSaveVa
	jmp	SHORT $LN33@INFOSaveVa
$LN32@INFOSaveVa:

; 1818 : 		{
; 1819 : 		case REFUEL_1:
; 1820 : 			PlayerOptions.SimAirRefuelingMode = ARRealistic;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+72, 1

; 1821 : 			break;

	jmp	SHORT $LN33@INFOSaveVa
$LN31@INFOSaveVa:

; 1822 : 		case REFUEL_2:
; 1823 : 			PlayerOptions.SimAirRefuelingMode = ARModerated;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+72, 2

; 1824 : 			break;

	jmp	SHORT $LN33@INFOSaveVa
$LN30@INFOSaveVa:

; 1825 : 		case REFUEL_3:
; 1826 : 			PlayerOptions.SimAirRefuelingMode = ARSimplistic;

	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+72, 3
$LN33@INFOSaveVa:

; 1827 : 			break;
; 1828 : 		}
; 1829 : 		lbox->Refresh();

	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN35@INFOSaveVa:

; 1830 : 	}
; 1831 : 	
; 1832 : 	button=(C_Button *)win->FindControl(FUEL_CUR);

	push	5050					; 000013baH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1833 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN26@INFOSaveVa

; 1834 : 	{
; 1835 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN27@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN28@INFOSaveVa
$LN27@INFOSaveVa:

; 1836 : 			PlayerOptions.SetSimFlag (SIM_UNLIMITED_FUEL);

	push	4
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag

; 1837 : 		else

	jmp	SHORT $LN26@INFOSaveVa
$LN28@INFOSaveVa:

; 1838 : 			PlayerOptions.ClearSimFlag (SIM_UNLIMITED_FUEL);

	push	4
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag
$LN26@INFOSaveVa:

; 1839 : 	}
; 1840 : 	
; 1841 : 	button=(C_Button *)win->FindControl(CHAFFLARES_CUR);

	push	5046					; 000013b6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1842 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN22@INFOSaveVa

; 1843 : 	{
; 1844 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN23@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN24@INFOSaveVa
$LN23@INFOSaveVa:

; 1845 : 			PlayerOptions.SetSimFlag (SIM_UNLIMITED_CHAFF);

	push	16					; 00000010H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag

; 1846 : 		else

	jmp	SHORT $LN22@INFOSaveVa
$LN24@INFOSaveVa:

; 1847 : 			PlayerOptions.ClearSimFlag (SIM_UNLIMITED_CHAFF);

	push	16					; 00000010H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag
$LN22@INFOSaveVa:

; 1848 : 		
; 1849 : 	}
; 1850 : 	
; 1851 : 	button=(C_Button *)win->FindControl(COLLISIONS_CUR);

	push	5028					; 000013a4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1852 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN18@INFOSaveVa

; 1853 : 	{
; 1854 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN19@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN20@INFOSaveVa
$LN19@INFOSaveVa:

; 1855 : 			PlayerOptions.SetSimFlag (SIM_NO_COLLISIONS);

	push	32					; 00000020H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag

; 1856 : 		else

	jmp	SHORT $LN18@INFOSaveVa
$LN20@INFOSaveVa:

; 1857 : 			PlayerOptions.ClearSimFlag (SIM_NO_COLLISIONS);

	push	32					; 00000020H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag
$LN18@INFOSaveVa:

; 1858 : 	}
; 1859 : 	
; 1860 : 	button=(C_Button *)win->FindControl(BLACKOUT_CUR);

	push	5030					; 000013a6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1861 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN14@INFOSaveVa

; 1862 : 	{
; 1863 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN15@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN16@INFOSaveVa
$LN15@INFOSaveVa:

; 1864 : 			PlayerOptions.SetSimFlag (SIM_NO_BLACKOUT);

	push	2
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag

; 1865 : 		else

	jmp	SHORT $LN14@INFOSaveVa
$LN16@INFOSaveVa:

; 1866 : 			PlayerOptions.ClearSimFlag (SIM_NO_BLACKOUT);

	push	2
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag
$LN14@INFOSaveVa:

; 1867 : 	}
; 1868 : 	
; 1869 : 	
; 1870 : 	button=(C_Button *)win->FindControl(IDTAGS_CUR);

	push	5048					; 000013b8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1871 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN10@INFOSaveVa

; 1872 : 	{
; 1873 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN11@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN12@INFOSaveVa
$LN11@INFOSaveVa:

; 1874 : 			PlayerOptions.SetSimFlag (SIM_NAMETAGS);

	push	64					; 00000040H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag

; 1875 : 		else

	jmp	SHORT $LN10@INFOSaveVa
$LN12@INFOSaveVa:

; 1876 : 			PlayerOptions.ClearSimFlag (SIM_NAMETAGS);			

	push	64					; 00000040H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag
$LN10@INFOSaveVa:

; 1877 : 	}
; 1878 : 	
; 1879 : 	button=(C_Button *)win->FindControl(WEATHER_CUR);

	push	5032					; 000013a8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1880 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN6@INFOSaveVa

; 1881 : 	{
; 1882 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN7@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN8@INFOSaveVa
$LN7@INFOSaveVa:

; 1883 : 			PlayerOptions.GeneralFlags |= GEN_NO_WEATHER;

	mov	ecx, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+84
	or	ecx, 1
	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+84, ecx

; 1884 : 		else

	jmp	SHORT $LN6@INFOSaveVa
$LN8@INFOSaveVa:

; 1885 : 			PlayerOptions.GeneralFlags &= ~GEN_NO_WEATHER;

	mov	edx, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+84
	and	edx, -2					; fffffffeH
	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+84, edx
$LN6@INFOSaveVa:

; 1886 : 	}
; 1887 : 	
; 1888 : 
; 1889 : 	button=(C_Button *)win->FindControl(INVULNERABILITY_CUR); 

	push	5055					; 000013bfH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _button$[ebp], eax

; 1890 : 	if(button != NULL)

	cmp	DWORD PTR _button$[ebp], 0
	je	SHORT $LN2@INFOSaveVa

; 1891 : 	{
; 1892 : 		if(button->GetState() == C_STATE_1 || button->GetState() == C_STATE_2)

	mov	eax, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	movsx	ecx, ax
	cmp	ecx, 1
	je	SHORT $LN3@INFOSaveVa
	mov	edx, DWORD PTR _button$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _button$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	cmp	eax, 2
	jne	SHORT $LN4@INFOSaveVa
$LN3@INFOSaveVa:

; 1893 : 			PlayerOptions.SetSimFlag(SIM_INVULNERABLE);

	push	512					; 00000200H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag

; 1894 : 		else

	jmp	SHORT $LN2@INFOSaveVa
$LN4@INFOSaveVa:

; 1895 : 			PlayerOptions.ClearSimFlag(SIM_INVULNERABLE);

	push	512					; 00000200H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag
$LN2@INFOSaveVa:

; 1896 : 	}
; 1897 : 
; 1898 : 	/* May need to hit this if veh mag is 1
; 1899 : 	button=(C_Button *)win->FindControl(AUTO_SCALE);
; 1900 : 	if(button != NULL)
; 1901 : 	{
; 1902 : 		if(button->GetState() == C_STATE_1)
; 1903 : 			PlayerOptions.SetObjFlag(DISP_OBJ_DYN_SCALING);
; 1904 : 		else
; 1905 : 			PlayerOptions.ClearObjFlag(DISP_OBJ_DYN_SCALING);
; 1906 : 	}*/
; 1907 : 
; 1908 : 	
; 1909 : 	
; 1910 : 	slider=(C_Slider *)win->FindControl(VEHICLE_SIZE_CUR);

	push	5034					; 000013aaH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _slider$[ebp], eax

; 1911 : 	if(slider != NULL)

	cmp	DWORD PTR _slider$[ebp], 0
	je	SHORT $LN1@INFOSaveVa

; 1912 : 	{
; 1913 : 		PlayerOptions.ObjMagnification = static_cast<float>((int)( (float)slider->GetSliderPos()/( slider->GetSliderMax() - slider->GetSliderMin() ) * 4 + 1.5f ));

	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderPos@C_Slider@@QAEJXZ		; C_Slider::GetSliderPos
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	movss	DWORD PTR tv647[ebp], xmm0
	call	?GetSliderMax@C_Slider@@QAEJXZ		; C_Slider::GetSliderMax
	mov	esi, eax
	mov	ecx, DWORD PTR _slider$[ebp]
	call	?GetSliderMin@C_Slider@@QAEJXZ		; C_Slider::GetSliderMin
	sub	esi, eax
	cvtsi2ss xmm0, esi
	movss	xmm1, DWORD PTR tv647[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR __real@3fc00000
	cvttss2si ecx, xmm1
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+20, xmm0
$LN1@INFOSaveVa:

; 1914 : 	}
; 1915 : 	
; 1916 : 	PlayerOptions.SaveOptions();

	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SaveOptions@PlayerOptionsClass@@QAEHPAD@Z ; PlayerOptionsClass::SaveOptions

; 1917 : 
; 1918 : 	INFOSaveRules();

	call	?INFOSaveRules@@YAXXZ			; INFOSaveRules

; 1919 : 	INFOSaveRulesToFile();

	call	?INFOSaveRulesToFile@@YAXXZ		; INFOSaveRulesToFile
$LN66@INFOSaveVa:

; 1920 : 
; 1921 : }//SaveValues

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN73@INFOSaveVa:
	DD	$LN56@INFOSaveVa
	DD	$LN55@INFOSaveVa
	DD	$LN54@INFOSaveVa
	DD	$LN57@INFOSaveVa
	DD	$LN58@INFOSaveVa
$LN72@INFOSaveVa:
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?INFOSaveValues@@YAXXZ ENDP				; INFOSaveValues
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cwindow.h
;	COMDAT ?GetGroup@C_Window@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroup@C_Window@@QAEJXZ PROC				; C_Window::GetGroup, COMDAT
; _this$ = ecx

; 317  : 		long GetGroup(void) { return(Group_);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroup@C_Window@@QAEJXZ ENDP				; C_Window::GetGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cslider.h
;	COMDAT ?GetSliderPos@C_Slider@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSliderPos@C_Slider@@QAEJXZ PROC			; C_Slider::GetSliderPos, COMDAT
; _this$ = ecx

; 56   : 		long GetSliderPos() { if(GetType() == C_TYPE_VERTICAL) return(SY_); return(SX_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@C_Base@@QAEFXZ			; C_Base::GetType
	cwde
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN1@GetSliderP
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	jmp	SHORT $LN2@GetSliderP
$LN1@GetSliderP:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
$LN2@GetSliderP:
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSliderPos@C_Slider@@QAEJXZ ENDP			; C_Slider::GetSliderPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cslider.h
;	COMDAT ?GetSliderMin@C_Slider@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSliderMin@C_Slider@@QAEJXZ PROC			; C_Slider::GetSliderMin, COMDAT
; _this$ = ecx

; 55   : 		long GetSliderMin() { return(MinPos_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+120]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSliderMin@C_Slider@@QAEJXZ ENDP			; C_Slider::GetSliderMin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cslider.h
;	COMDAT ?GetSliderMax@C_Slider@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSliderMax@C_Slider@@QAEJXZ PROC			; C_Slider::GetSliderMax, COMDAT
; _this$ = ecx

; 54   : 		long GetSliderMax() { return(MaxPos_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSliderMax@C_Slider@@QAEJXZ ENDP			; C_Slider::GetSliderMax
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ceditbox.h
;	COMDAT ?GetInteger@C_EditBox@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInteger@C_EditBox@@QAEJXZ PROC			; C_EditBox::GetInteger, COMDAT
; _this$ = ecx

; 71   : 		long GetInteger() { return(Integer_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+108]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInteger@C_EditBox@@QAEJXZ ENDP			; C_EditBox::GetInteger
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?GetTextID@C_ListBox@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTextID@C_ListBox@@QAEJXZ PROC			; C_ListBox::GetTextID, COMDAT
; _this$ = ecx

; 109  : 		long GetTextID() { return(LabelVal_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextID@C_ListBox@@QAEJXZ ENDP			; C_ListBox::GetTextID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?_GetCType_@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_GetCType_@C_Base@@QAEFXZ PROC				; C_Base::_GetCType_, COMDAT
; _this$ = ecx

; 136  : 		short _GetCType_()			{ return(_CType_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?_GetCType_@C_Base@@QAEFXZ ENDP				; C_Base::_GetCType_
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?GetType@C_Base@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@C_Base@@QAEFXZ PROC				; C_Base::GetType, COMDAT
; _this$ = ecx

; 135  : 		short GetType()				{ return(Type_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+22]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@C_Base@@QAEFXZ ENDP				; C_Base::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::ClearSimFlag, COMDAT
; _this$ = ecx

; 188  : 	void ClearSimFlag (int flag)							{SimFlags &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::ClearSimFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?SetSimFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetSimFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::SetSimFlag, COMDAT
; _this$ = ecx

; 187  : 	void SetSimFlag (int flag)								{SimFlags |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSimFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::SetSimFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?WeatherOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?WeatherOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::WeatherOn, COMDAT
; _this$ = ecx

; 160  : 	int WeatherOn (void)									{ return !(GeneralFlags & GEN_NO_WEATHER); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	and	ecx, 1
	jne	SHORT $LN3@WeatherOn
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@WeatherOn
$LN3@WeatherOn:
	mov	DWORD PTR tv67[ebp], 0
$LN4@WeatherOn:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?WeatherOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::WeatherOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?InvulnerableOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?InvulnerableOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::InvulnerableOn, COMDAT
; _this$ = ecx

; 158  : 	int	InvulnerableOn(void)								{ return (SimFlags & SIM_INVULNERABLE) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 512				; 00000200H
	je	SHORT $LN3@Invulnerab
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@Invulnerab
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Invulnerab
$LN3@Invulnerab:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Invulnerab:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InvulnerableOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::InvulnerableOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?NameTagsOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?NameTagsOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::NameTagsOn, COMDAT
; _this$ = ecx

; 155  : 	int NameTagsOn (void)									{ return (SimFlags & SIM_NAMETAGS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 64					; 00000040H
	je	SHORT $LN3@NameTagsOn
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@NameTagsOn
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@NameTagsOn
$LN3@NameTagsOn:
	mov	DWORD PTR tv68[ebp], 0
$LN4@NameTagsOn:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?NameTagsOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::NameTagsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?CollisionsOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?CollisionsOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::CollisionsOn, COMDAT
; _this$ = ecx

; 153  : 	int CollisionsOn (void)									{ return !(SimFlags & SIM_NO_COLLISIONS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN3@Collisions
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@Collisions
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Collisions
$LN3@Collisions:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Collisions:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?CollisionsOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::CollisionsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?UnlimitedChaff@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?UnlimitedChaff@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::UnlimitedChaff, COMDAT
; _this$ = ecx

; 152  : 	int UnlimitedChaff (void)								{ return (SimFlags & SIM_UNLIMITED_CHAFF) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@UnlimitedC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@UnlimitedC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@UnlimitedC
$LN3@UnlimitedC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UnlimitedC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?UnlimitedChaff@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::UnlimitedChaff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?UnlimitedFuel@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?UnlimitedFuel@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::UnlimitedFuel, COMDAT
; _this$ = ecx

; 150  : 	int UnlimitedFuel (void)								{ return (SimFlags & SIM_UNLIMITED_FUEL) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 4
	je	SHORT $LN3@UnlimitedF
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@UnlimitedF
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@UnlimitedF
$LN3@UnlimitedF:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UnlimitedF:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?UnlimitedFuel@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::UnlimitedFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?BlackoutOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?BlackoutOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::BlackoutOn, COMDAT
; _this$ = ecx

; 148  : 	int BlackoutOn (void)									{ return !(SimFlags & SIM_NO_BLACKOUT) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 2
	jne	SHORT $LN3@BlackoutOn
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@BlackoutOn
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@BlackoutOn
$LN3@BlackoutOn:
	mov	DWORD PTR tv68[ebp], 0
$LN4@BlackoutOn:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?BlackoutOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::BlackoutOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetPadlockMode@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPadlockMode@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::GetPadlockMode, COMDAT
; _this$ = ecx

; 145  : 	int GetPadlockMode (void)								{ return SimPadlockMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPadlockMode@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::GetPadlockMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetRefuelingMode, COMDAT
; _this$ = ecx

; 144  : 	int GetRefuelingMode (void)								{ return SimAirRefuelingMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetRefuelingMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetAutopilotMode@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAutopilotMode@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetAutopilotMode, COMDAT
; _this$ = ecx

; 143  : 	int GetAutopilotMode (void)								{ return SimAutopilotType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAutopilotMode@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetAutopilotMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetAvionicsType@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvionicsType@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetAvionicsType, COMDAT
; _this$ = ecx

; 142  : 	int GetAvionicsType (void)								{ return SimAvionicsType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetAvionicsType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetWeaponEffectiveness@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponEffectiveness@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetWeaponEffectiveness, COMDAT
; _this$ = ecx

; 141  : 	int GetWeaponEffectiveness (void)						{ return SimWeaponEffect; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponEffectiveness@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetWeaponEffectiveness
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetFlightModelType@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlightModelType@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetFlightModelType, COMDAT
; _this$ = ecx

; 140  : 	int GetFlightModelType (void)							{ return SimFlightModel; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightModelType@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetFlightModelType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?SetMaxPlayers@RulesClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?SetMaxPlayers@RulesClass@@QAEXH@Z PROC			; RulesClass::SetMaxPlayers, COMDAT
; _this$ = ecx

; 83   : 		void SetMaxPlayers(int num)								{if(num>0) MaxPlayers = num; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _num$[ebp], 0
	jle	SHORT $LN2@SetMaxPlay
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN2@SetMaxPlay:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMaxPlayers@RulesClass@@QAEXH@Z ENDP			; RulesClass::SetMaxPlayers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?ClearGenFlag@RulesClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearGenFlag@RulesClass@@QAEXH@Z PROC			; RulesClass::ClearGenFlag, COMDAT
; _this$ = ecx

; 80   : 		void ClearGenFlag (int flag)							{GeneralFlags &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+72]
	and	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+72], dx
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearGenFlag@RulesClass@@QAEXH@Z ENDP			; RulesClass::ClearGenFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?SetGenFlag@RulesClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetGenFlag@RulesClass@@QAEXH@Z PROC			; RulesClass::SetGenFlag, COMDAT
; _this$ = ecx

; 79   : 		void SetGenFlag (int flag)								{GeneralFlags |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+72], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGenFlag@RulesClass@@QAEXH@Z ENDP			; RulesClass::SetGenFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?ClearSimFlag@RulesClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearSimFlag@RulesClass@@QAEXH@Z PROC			; RulesClass::ClearSimFlag, COMDAT
; _this$ = ecx

; 78   : 		void ClearSimFlag (int flag)							{SimFlags &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearSimFlag@RulesClass@@QAEXH@Z ENDP			; RulesClass::ClearSimFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?SetSimFlag@RulesClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetSimFlag@RulesClass@@QAEXH@Z PROC			; RulesClass::SetSimFlag, COMDAT
; _this$ = ecx

; 77   : 		void SetSimFlag (int flag)								{SimFlags |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSimFlag@RulesClass@@QAEXH@Z ENDP			; RulesClass::SetSimFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?InvulnerableOn@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?InvulnerableOn@RulesClass@@QAEHXZ PROC			; RulesClass::InvulnerableOn, COMDAT
; _this$ = ecx

; 75   : 		int	InvulnerableOn(void)								{ return (SimFlags & SIM_INVULNERABLE) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 512				; 00000200H
	je	SHORT $LN3@Invulnerab
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@Invulnerab
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@Invulnerab
$LN3@Invulnerab:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Invulnerab:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InvulnerableOn@RulesClass@@QAEHXZ ENDP			; RulesClass::InvulnerableOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?ExternalViewOn@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
?ExternalViewOn@RulesClass@@QAEHXZ PROC			; RulesClass::ExternalViewOn, COMDAT
; _this$ = ecx

; 74   : 		int ExternalViewOn (void)								{ return (GeneralFlags & GEN_EXTERNAL_VIEW) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@ExternalVi
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@ExternalVi
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@ExternalVi
$LN3@ExternalVi:
	mov	DWORD PTR tv73[ebp], 0
$LN4@ExternalVi:
	mov	eax, DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ExternalViewOn@RulesClass@@QAEHXZ ENDP			; RulesClass::ExternalViewOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?WeatherOn@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?WeatherOn@RulesClass@@QAEHXZ PROC			; RulesClass::WeatherOn, COMDAT
; _this$ = ecx

; 71   : 		int WeatherOn (void)									{ return !(GeneralFlags & GEN_NO_WEATHER); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+72]
	and	ecx, 1
	jne	SHORT $LN3@WeatherOn
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@WeatherOn
$LN3@WeatherOn:
	mov	DWORD PTR tv72[ebp], 0
$LN4@WeatherOn:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?WeatherOn@RulesClass@@QAEHXZ ENDP			; RulesClass::WeatherOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?NameTagsOn@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?NameTagsOn@RulesClass@@QAEHXZ PROC			; RulesClass::NameTagsOn, COMDAT
; _this$ = ecx

; 70   : 		int NameTagsOn (void)									{ return (SimFlags & SIM_NAMETAGS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 64					; 00000040H
	je	SHORT $LN3@NameTagsOn
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@NameTagsOn
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@NameTagsOn
$LN3@NameTagsOn:
	mov	DWORD PTR tv72[ebp], 0
$LN4@NameTagsOn:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?NameTagsOn@RulesClass@@QAEHXZ ENDP			; RulesClass::NameTagsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?NoCollisions@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?NoCollisions@RulesClass@@QAEHXZ PROC			; RulesClass::NoCollisions, COMDAT
; _this$ = ecx

; 69   : 		int NoCollisions (void)									{ return (SimFlags & SIM_NO_COLLISIONS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@NoCollisio
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@NoCollisio
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@NoCollisio
$LN3@NoCollisio:
	mov	DWORD PTR tv72[ebp], 0
$LN4@NoCollisio:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?NoCollisions@RulesClass@@QAEHXZ ENDP			; RulesClass::NoCollisions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?CollisionsOn@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv71 = -4						; size = 4
?CollisionsOn@RulesClass@@QAEHXZ PROC			; RulesClass::CollisionsOn, COMDAT
; _this$ = ecx

; 68   : 		int CollisionsOn (void)									{ return !(SimFlags & SIM_NO_COLLISIONS); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN3@Collisions
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@Collisions
$LN3@Collisions:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Collisions:
	mov	eax, DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?CollisionsOn@RulesClass@@QAEHXZ ENDP			; RulesClass::CollisionsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?UnlimitedChaff@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?UnlimitedChaff@RulesClass@@QAEHXZ PROC			; RulesClass::UnlimitedChaff, COMDAT
; _this$ = ecx

; 67   : 		int UnlimitedChaff (void)								{ return (SimFlags & SIM_UNLIMITED_CHAFF) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@UnlimitedC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@UnlimitedC
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@UnlimitedC
$LN3@UnlimitedC:
	mov	DWORD PTR tv72[ebp], 0
$LN4@UnlimitedC:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?UnlimitedChaff@RulesClass@@QAEHXZ ENDP			; RulesClass::UnlimitedChaff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?UnlimitedFuel@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?UnlimitedFuel@RulesClass@@QAEHXZ PROC			; RulesClass::UnlimitedFuel, COMDAT
; _this$ = ecx

; 65   : 		int UnlimitedFuel (void)								{ return (SimFlags & SIM_UNLIMITED_FUEL) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 4
	je	SHORT $LN3@UnlimitedF
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@UnlimitedF
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@UnlimitedF
$LN3@UnlimitedF:
	mov	DWORD PTR tv72[ebp], 0
$LN4@UnlimitedF:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?UnlimitedFuel@RulesClass@@QAEHXZ ENDP			; RulesClass::UnlimitedFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?NoBlackout@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv72 = -4						; size = 4
?NoBlackout@RulesClass@@QAEHXZ PROC			; RulesClass::NoBlackout, COMDAT
; _this$ = ecx

; 64   : 		int NoBlackout (void)									{ return (SimFlags & SIM_NO_BLACKOUT) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 2
	je	SHORT $LN3@NoBlackout
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@NoBlackout
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@NoBlackout
$LN3@NoBlackout:
	mov	DWORD PTR tv72[ebp], 0
$LN4@NoBlackout:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?NoBlackout@RulesClass@@QAEHXZ ENDP			; RulesClass::NoBlackout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?BlackoutOn@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv71 = -4						; size = 4
?BlackoutOn@RulesClass@@QAEHXZ PROC			; RulesClass::BlackoutOn, COMDAT
; _this$ = ecx

; 63   : 		int BlackoutOn (void)									{ return !(SimFlags & SIM_NO_BLACKOUT); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 2
	jne	SHORT $LN3@BlackoutOn
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@BlackoutOn
$LN3@BlackoutOn:
	mov	DWORD PTR tv71[ebp], 0
$LN4@BlackoutOn:
	mov	eax, DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?BlackoutOn@RulesClass@@QAEHXZ ENDP			; RulesClass::BlackoutOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetPadlockMode@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPadlockMode@RulesClass@@QAEHXZ PROC			; RulesClass::GetPadlockMode, COMDAT
; _this$ = ecx

; 61   : 		int GetPadlockMode (void)								{ return SimPadlockMode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPadlockMode@RulesClass@@QAEHXZ ENDP			; RulesClass::GetPadlockMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetRefuelingMode@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefuelingMode@RulesClass@@QAEHXZ PROC		; RulesClass::GetRefuelingMode, COMDAT
; _this$ = ecx

; 60   : 		int GetRefuelingMode (void)								{ return SimAirRefuelingMode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefuelingMode@RulesClass@@QAEHXZ ENDP		; RulesClass::GetRefuelingMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetAutopilotMode@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAutopilotMode@RulesClass@@QAEHXZ PROC		; RulesClass::GetAutopilotMode, COMDAT
; _this$ = ecx

; 59   : 		int GetAutopilotMode (void)								{ return SimAutopilotType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAutopilotMode@RulesClass@@QAEHXZ ENDP		; RulesClass::GetAutopilotMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetAvionicsType@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvionicsType@RulesClass@@QAEHXZ PROC		; RulesClass::GetAvionicsType, COMDAT
; _this$ = ecx

; 58   : 		int GetAvionicsType (void)								{ return SimAvionicsType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAvionicsType@RulesClass@@QAEHXZ ENDP		; RulesClass::GetAvionicsType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetWeaponEffectiveness@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponEffectiveness@RulesClass@@QAEHXZ PROC		; RulesClass::GetWeaponEffectiveness, COMDAT
; _this$ = ecx

; 57   : 		int GetWeaponEffectiveness (void)						{ return SimWeaponEffect; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponEffectiveness@RulesClass@@QAEHXZ ENDP		; RulesClass::GetWeaponEffectiveness
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetFlightModelType@RulesClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlightModelType@RulesClass@@QAEHXZ PROC		; RulesClass::GetFlightModelType, COMDAT
; _this$ = ecx

; 56   : 		int GetFlightModelType (void)							{ return SimFlightModel; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightModelType@RulesClass@@QAEHXZ ENDP		; RulesClass::GetFlightModelType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?GetRules@RulesClass@@QAEPAURulesStruct@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRules@RulesClass@@QAEPAURulesStruct@@XZ PROC	; RulesClass::GetRules, COMDAT
; _this$ = ecx

; 49   : 		RulesStruct* GetRules(void)								{return (this);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRules@RulesClass@@QAEPAURulesStruct@@XZ ENDP	; RulesClass::GetRules
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\logbook.h
;	COMDAT ?Callsign@LogBookData@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Callsign@LogBookData@@QAEPADXZ PROC			; LogBookData::Callsign, COMDAT
; _this$ = ecx

; 171  : 	_TCHAR *Callsign(void)							{return Pilot.Callsign;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 21					; 00000015H
	mov	esp, ebp
	pop	ebp
	ret	0
?Callsign@LogBookData@@QAEPADXZ ENDP			; LogBookData::Callsign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?GameName@VuGameEntity@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GameName@VuGameEntity@@QAEPADXZ PROC			; VuGameEntity::GameName, COMDAT
; _this$ = ecx

; 400  : 	char *GameName()		{ return gameName_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]
	mov	esp, ebp
	pop	ebp
	ret	0
?GameName@VuGameEntity@@QAEPADXZ ENDP			; VuGameEntity::GameName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
END
