; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\UI\SRC\campaign\cstores.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Cleanup@StoresList@@QAEXXZ			; StoresList::Cleanup
PUBLIC	?Create@StoresList@@QAEPAUStoresStr@@JPADJJJMF@Z ; StoresList::Create
PUBLIC	?AddHardPoint@StoresList@@QAEXJJF@Z		; StoresList::AddHardPoint
PUBLIC	?Find@StoresList@@QAEPAUStoresStr@@J@Z		; StoresList::Find
PUBLIC	?Add@StoresList@@QAEXPAUStoresStr@@PAPAU2@@Z	; StoresList::Add
PUBLIC	?RemoveAll@StoresList@@QAEXPAPAUStoresStr@@@Z	; StoresList::RemoveAll
PUBLIC	?RemoveAll@StoresList@@QAEXJ@Z			; StoresList::RemoveAll
PUBLIC	?Remove@StoresList@@QAEXJPAPAUStoresStr@@@Z	; StoresList::Remove
PUBLIC	?Sort@StoresList@@QAEXJ@Z			; StoresList::Sort
PUBLIC	?GetFirst@StoresList@@QAEPAUStoresStr@@J@Z	; StoresList::GetFirst
PUBLIC	?GetNext@StoresList@@QAEPAUStoresStr@@XZ	; StoresList::GetNext
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_strcpy:PROC
EXTRN	_stricmp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cstores.h
;	COMDAT ?GetNext@StoresList@@QAEPAUStoresStr@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@StoresList@@QAEPAUStoresStr@@XZ PROC		; StoresList::GetNext, COMDAT
; _this$ = ecx

; 133  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 			if(current)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@GetNext

; 135  : 			{
; 136  : 				current=current->Next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR [eax+20], ecx

; 137  : 				if(current)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN3@GetNext

; 138  : 					return(current);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	jmp	SHORT $LN4@GetNext
$LN3@GetNext:

; 139  : 			}
; 140  : 			if(GetType_ == _ALL_ && ListID_ < _OTHER_)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 3
	jne	SHORT $LN1@GetNext
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 2
	jge	SHORT $LN1@GetNext

; 141  : 			{
; 142  : 				ListID_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 143  : 				current=Stores_[ListID_];	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+20], ecx

; 144  : 				return(current);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	jmp	SHORT $LN4@GetNext
$LN1@GetNext:

; 145  : 			}
; 146  : 			return(NULL);

	xor	eax, eax
$LN4@GetNext:

; 147  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@StoresList@@QAEPAUStoresStr@@XZ ENDP		; StoresList::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cstores.h
;	COMDAT ?GetFirst@StoresList@@QAEPAUStoresStr@@J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?GetFirst@StoresList@@QAEPAUStoresStr@@J@Z PROC		; StoresList::GetFirst, COMDAT
; _this$ = ecx

; 111  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 			GetType_=ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 113  : 			if(GetType_ == _ALL_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 3
	jne	SHORT $LN7@GetFirst

; 114  : 				ListID_=_AIR_TO_AIR_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 115  : 			else

	jmp	SHORT $LN6@GetFirst
$LN7@GetFirst:

; 116  : 				ListID_=ID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN6@GetFirst:

; 117  : 			if(GetType_ == _ALL_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 3
	jne	SHORT $LN5@GetFirst

; 118  : 			{
; 119  : 				current=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
$LN4@GetFirst:

; 120  : 				while(!current && ListID_ < _ALL_)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN3@GetFirst
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 3
	jge	SHORT $LN3@GetFirst

; 121  : 				{
; 122  : 					current=Stores_[ListID_];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+20], edx

; 123  : 					if(!current)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@GetFirst

; 124  : 						ListID_++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN2@GetFirst:

; 125  : 				}

	jmp	SHORT $LN4@GetFirst
$LN3@GetFirst:

; 126  : 			}
; 127  : 			else

	jmp	SHORT $LN1@GetFirst
$LN5@GetFirst:

; 128  : 				current=Stores_[ListID_];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+20], edx
$LN1@GetFirst:

; 129  : 
; 130  : 			return(current);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 131  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFirst@StoresList@@QAEPAUStoresStr@@J@Z ENDP		; StoresList::GetFirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
_this$ = -104						; size = 4
_list$ = -100						; size = 4
_i$ = -96						; size = 4
_sort1$ = -92						; size = 4
_sort2$ = -88						; size = 4
_temp$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_ID$ = 8						; size = 4
?Sort@StoresList@@QAEXJ@Z PROC				; StoresList::Sort
; _this$ = ecx

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 	STORESLIST *list;
; 124  : 	STORESLIST *sort1,*sort2;
; 125  : 	STORESLIST temp;
; 126  : 	int i;
; 127  : 
; 128  : 	if(ID >= _ALL_) return;

	cmp	DWORD PTR _ID$[ebp], 3
	jl	SHORT $LN16@Sort
	jmp	$LN17@Sort
$LN16@Sort:

; 129  : 
; 130  : 	list=Stores_[ID];

	mov	eax, DWORD PTR _ID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _list$[ebp], edx

; 131  : 
; 132  : 	if(list == NULL)

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN15@Sort

; 133  : 		return;

	jmp	$LN17@Sort
$LN15@Sort:

; 134  : 
; 135  : 	sort2=list->Next;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _sort2$[ebp], ecx
$LN14@Sort:

; 136  : 
; 137  : 	while(sort2)

	cmp	DWORD PTR _sort2$[ebp], 0
	je	$LN13@Sort

; 138  : 	{
; 139  : 		sort1=list;

	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR _sort1$[ebp], edx
$LN12@Sort:

; 140  : 		while(sort1 != sort2)

	mov	eax, DWORD PTR _sort1$[ebp]
	cmp	eax, DWORD PTR _sort2$[ebp]
	je	$LN11@Sort

; 141  : 		{
; 142  : 			if(stricmp(sort2->Name,sort1->Name) < 0)

	mov	ecx, DWORD PTR _sort1$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _sort2$[ebp]
	add	edx, 4
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jge	$LN1@Sort

; 143  : 			{
; 144  : 				temp.ID=sort1->ID;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 145  : 				_tcscpy(temp.Name,sort1->Name);

	mov	edx, DWORD PTR _sort1$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR _temp$[ebp+4]
	push	eax
	call	_strcpy
	add	esp, 8

; 146  : 				temp.Type=sort1->Type;

	mov	ecx, DWORD PTR _sort1$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _temp$[ebp+24], edx

; 147  : 				temp.Weight=sort1->Weight;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _temp$[ebp+28], ecx

; 148  : 				temp.Fuel=sort1->Fuel;

	mov	edx, DWORD PTR _sort1$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _temp$[ebp+32], eax

; 149  : 				temp.DragFactor=sort1->DragFactor;

	mov	ecx, DWORD PTR _sort1$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR _temp$[ebp+40], xmm0

; 150  : 				temp.Stock=sort1->Stock;

	mov	edx, DWORD PTR _sort1$[ebp]
	mov	ax, WORD PTR [edx+36]
	mov	WORD PTR _temp$[ebp+36], ax

; 151  : 				for(i=0;i<HARDPOINT_MAX;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@Sort
$LN8@Sort:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@Sort:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN7@Sort

; 152  : 					temp.HardPoint[i]=sort1->HardPoint[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _sort1$[ebp]
	mov	ax, WORD PTR [ecx+eax*2+44]
	mov	WORD PTR _temp$[ebp+edx*2+44], ax
	jmp	SHORT $LN8@Sort
$LN7@Sort:

; 153  : 
; 154  : 				sort1->ID=sort2->ID;

	mov	ecx, DWORD PTR _sort1$[ebp]
	mov	edx, DWORD PTR _sort2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 155  : 				_tcscpy(sort1->Name,sort2->Name);

	mov	ecx, DWORD PTR _sort2$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _sort1$[ebp]
	add	edx, 4
	push	edx
	call	_strcpy
	add	esp, 8

; 156  : 				sort1->Type=sort2->Type;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 157  : 				sort1->Weight=sort2->Weight;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 158  : 				sort1->Fuel=sort2->Fuel;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 159  : 				sort1->DragFactor=sort2->DragFactor;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx

; 160  : 				sort1->Stock=sort2->Stock;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	dx, WORD PTR [ecx+36]
	mov	WORD PTR [eax+36], dx

; 161  : 				for(i=0;i<HARDPOINT_MAX;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Sort
$LN5@Sort:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Sort:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN4@Sort

; 162  : 					sort1->HardPoint[i]=sort2->HardPoint[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _sort1$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _sort2$[ebp]
	mov	ax, WORD PTR [esi+eax*2+44]
	mov	WORD PTR [edx+ecx*2+44], ax
	jmp	SHORT $LN5@Sort
$LN4@Sort:

; 163  : 			
; 164  : 				sort2->ID=temp.ID;

	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx], edx

; 165  : 				_tcscpy(sort2->Name,temp.Name);

	lea	eax, DWORD PTR _temp$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _sort2$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8

; 166  : 				sort2->Type=temp.Type;

	mov	edx, DWORD PTR _sort2$[ebp]
	mov	eax, DWORD PTR _temp$[ebp+24]
	mov	DWORD PTR [edx+24], eax

; 167  : 				sort2->Weight=temp.Weight;

	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR _temp$[ebp+28]
	mov	DWORD PTR [ecx+28], edx

; 168  : 				sort2->Fuel=temp.Fuel;

	mov	eax, DWORD PTR _sort2$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp+32]
	mov	DWORD PTR [eax+32], ecx

; 169  : 				sort2->DragFactor=temp.DragFactor;

	mov	edx, DWORD PTR _sort2$[ebp]
	movss	xmm0, DWORD PTR _temp$[ebp+40]
	movss	DWORD PTR [edx+40], xmm0

; 170  : 				sort2->Stock=temp.Stock;

	mov	eax, DWORD PTR _sort2$[ebp]
	mov	cx, WORD PTR _temp$[ebp+36]
	mov	WORD PTR [eax+36], cx

; 171  : 				for(i=0;i<HARDPOINT_MAX;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Sort
$LN2@Sort:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Sort:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN1@Sort

; 172  : 					sort2->HardPoint[i]=temp.HardPoint[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _sort2$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	dx, WORD PTR _temp$[ebp+edx*2+44]
	mov	WORD PTR [ecx+eax*2+44], dx
	jmp	SHORT $LN2@Sort
$LN1@Sort:

; 173  : 			}
; 174  : 			sort1=sort1->Next;

	mov	eax, DWORD PTR _sort1$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _sort1$[ebp], ecx

; 175  : 		}

	jmp	$LN12@Sort
$LN11@Sort:

; 176  : 		sort2=sort2->Next;

	mov	edx, DWORD PTR _sort2$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _sort2$[ebp], eax

; 177  : 	}

	jmp	$LN14@Sort
$LN13@Sort:
$LN17@Sort:

; 178  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?Sort@StoresList@@QAEXJ@Z ENDP				; StoresList::Sort
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 4
_delme$ = -12						; size = 4
$T2 = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_top$ = 12						; size = 4
?Remove@StoresList@@QAEXJPAPAUStoresStr@@@Z PROC	; StoresList::Remove
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	STORESLIST *cur,*delme;
; 96   : 
; 97   : 	if(*top == NULL) return;

	mov	eax, DWORD PTR _top$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@Remove
	jmp	$LN7@Remove
$LN6@Remove:

; 98   : 
; 99   : 	cur=*top;

	mov	ecx, DWORD PTR _top$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx

; 100  : 	if((*top)->ID == ID)

	mov	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _ID$[ebp]
	jne	SHORT $LN3@Remove

; 101  : 	{
; 102  : 		*top=cur->Next;

	mov	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax], edx

; 103  : 		delete cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 104  : 	}
; 105  : 	else

	jmp	SHORT $LN7@Remove
$LN3@Remove:

; 106  : 	{
; 107  : 		while(cur->Next)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN7@Remove

; 108  : 		{
; 109  : 			if(cur->Next->ID == ID)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@Remove

; 110  : 			{
; 111  : 				delme=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _delme$[ebp], ecx

; 112  : 				cur->Next=cur->Next->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [eax+76]
	mov	DWORD PTR [ecx+76], edx

; 113  : 				delete delme;

	mov	eax, DWORD PTR _delme$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 114  : 				return;

	jmp	SHORT $LN7@Remove
$LN1@Remove:

; 115  : 			}
; 116  : 			cur=cur->Next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _cur$[ebp], eax

; 117  : 		}

	jmp	SHORT $LN3@Remove
$LN7@Remove:

; 118  : 	}
; 119  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Remove@StoresList@@QAEXJPAPAUStoresStr@@@Z ENDP	; StoresList::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cstores.h
;	COMDAT ?RemoveAll@StoresList@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?RemoveAll@StoresList@@QAEXJ@Z PROC			; StoresList::RemoveAll, COMDAT
; _this$ = ecx

; 99   : 		void RemoveAll(long ID) { if(ID < _ALL_) RemoveAll(&Stores_[ID]); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _ID$[ebp], 3
	jge	SHORT $LN2@RemoveAll
	mov	eax, DWORD PTR _ID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@StoresList@@QAEXPAPAUStoresStr@@@Z ; StoresList::RemoveAll
$LN2@RemoveAll:
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveAll@StoresList@@QAEXJ@Z ENDP			; StoresList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
_prev$ = -8						; size = 4
_cur$ = -4						; size = 4
_list$ = 8						; size = 4
?RemoveAll@StoresList@@QAEXPAPAUStoresStr@@@Z PROC	; StoresList::RemoveAll
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	STORESLIST *cur,*prev;
; 82   : 
; 83   : 	cur=*list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@RemoveAll:

; 84   : 	while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@RemoveAll

; 85   : 	{
; 86   : 		prev=cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], edx

; 87   : 		cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _cur$[ebp], ecx

; 88   : 		delete prev;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 89   : 	}

	jmp	SHORT $LN2@RemoveAll
$LN1@RemoveAll:

; 90   : 	*list=NULL;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx], 0

; 91   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveAll@StoresList@@QAEXPAPAUStoresStr@@@Z ENDP	; StoresList::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_store$ = 8						; size = 4
_list$ = 12						; size = 4
?Add@StoresList@@QAEXPAUStoresStr@@PAPAU2@@Z PROC	; StoresList::Add
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	STORESLIST *cur;
; 65   : 
; 66   : 	if(store == NULL) return;

	cmp	DWORD PTR _store$[ebp], 0
	jne	SHORT $LN5@Add
	jmp	SHORT $LN6@Add
$LN5@Add:

; 67   : 
; 68   : 	if(*list == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@Add

; 69   : 		*list=store;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR _store$[ebp]
	mov	DWORD PTR [ecx], edx

; 70   : 	else

	jmp	SHORT $LN6@Add
$LN4@Add:

; 71   : 	{
; 72   : 		cur=*list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@Add:

; 73   : 		while(cur->Next)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN1@Add

; 74   : 			cur=cur->Next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN2@Add
$LN1@Add:

; 75   : 		cur->Next=store;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _store$[ebp]
	mov	DWORD PTR [edx+76], eax
$LN6@Add:

; 76   : 	}
; 77   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Add@StoresList@@QAEXPAUStoresStr@@PAPAU2@@Z ENDP	; StoresList::Add
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\cstores.h
;	COMDAT ?Find@StoresList@@QAEPAUStoresStr@@J@Z
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?Find@StoresList@@QAEPAUStoresStr@@J@Z PROC		; StoresList::Find, COMDAT
; _this$ = ecx

; 68   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 			STORESLIST *cur;
; 70   : 
; 71   : 			if(current)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@Find

; 72   : 			{
; 73   : 				if(current->ID == ID)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN5@Find

; 74   : 					return(current);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	jmp	SHORT $LN6@Find
$LN5@Find:

; 75   : 			}
; 76   : 			cur=GetFirst(_ALL_);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirst@StoresList@@QAEPAUStoresStr@@J@Z ; StoresList::GetFirst
	mov	DWORD PTR _cur$[ebp], eax
$LN3@Find:

; 77   : 			while(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@Find

; 78   : 			{
; 79   : 				if(cur->ID == ID)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@Find

; 80   : 					return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN6@Find
$LN1@Find:

; 81   : 				cur=GetNext();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNext@StoresList@@QAEPAUStoresStr@@XZ ; StoresList::GetNext
	mov	DWORD PTR _cur$[ebp], eax

; 82   : 			}

	jmp	SHORT $LN3@Find
$LN2@Find:

; 83   : 			return(NULL);

	xor	eax, eax
$LN6@Find:

; 84   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?Find@StoresList@@QAEPAUStoresStr@@J@Z ENDP		; StoresList::Find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cur$ = -4						; size = 4
_ID$ = 8						; size = 4
_hp$ = 12						; size = 4
_count$ = 16						; size = 2
?AddHardPoint@StoresList@@QAEXJJF@Z PROC		; StoresList::AddHardPoint
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	STORESLIST *cur;
; 53   : 
; 54   : 	cur=Find(ID);

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@StoresList@@QAEPAUStoresStr@@J@Z	; StoresList::Find
	mov	DWORD PTR _cur$[ebp], eax

; 55   : 
; 56   : 	if(cur == NULL || hp >= HARDPOINT_MAX)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@AddHardPoi
	cmp	DWORD PTR _hp$[ebp], 16			; 00000010H
	jl	SHORT $LN2@AddHardPoi
$LN1@AddHardPoi:

; 57   : 		return;

	jmp	SHORT $LN3@AddHardPoi
$LN2@AddHardPoi:

; 58   : 
; 59   : 	cur->HardPoint[hp]=count;

	mov	ecx, DWORD PTR _hp$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ax, WORD PTR _count$[ebp]
	mov	WORD PTR [edx+ecx*2+44], ax
$LN3@AddHardPoi:

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddHardPoint@StoresList@@QAEXJJF@Z ENDP		; StoresList::AddHardPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_store$ = -4						; size = 4
_ID$ = 8						; size = 4
_Name$ = 12						; size = 4
_Type$ = 16						; size = 4
_wgt$ = 20						; size = 4
_fuel$ = 24						; size = 4
_df$ = 28						; size = 4
_stock$ = 32						; size = 2
?Create@StoresList@@QAEPAUStoresStr@@JPADJJJMF@Z PROC	; StoresList::Create
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 26   : 	STORESLIST *store;
; 27   : 	int i;
; 28   : 
; 29   : 	if(Find(ID))

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@StoresList@@QAEPAUStoresStr@@J@Z	; StoresList::Find
	test	eax, eax
	je	SHORT $LN5@Create

; 30   : 		return(current);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	jmp	$LN6@Create
$LN5@Create:

; 31   : 
; 32   : 	store=new STORESLIST;

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _store$[ebp], edx

; 33   : 	if(store == NULL)

	cmp	DWORD PTR _store$[ebp], 0
	jne	SHORT $LN4@Create

; 34   : 		return(NULL);

	xor	eax, eax
	jmp	$LN6@Create
$LN4@Create:

; 35   : 
; 36   : 	store->ID=ID;

	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax], ecx

; 37   : 	_tcscpy(store->Name,Name);

	mov	edx, DWORD PTR _Name$[ebp]
	push	edx
	mov	eax, DWORD PTR _store$[ebp]
	add	eax, 4
	push	eax
	call	_strcpy
	add	esp, 8

; 38   : 	store->Type=Type;

	mov	ecx, DWORD PTR _store$[ebp]
	mov	edx, DWORD PTR _Type$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 39   : 	store->Weight=wgt;

	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR _wgt$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 40   : 	store->Fuel=fuel;

	mov	edx, DWORD PTR _store$[ebp]
	mov	eax, DWORD PTR _fuel$[ebp]
	mov	DWORD PTR [edx+32], eax

; 41   : 	store->DragFactor=df;

	mov	ecx, DWORD PTR _store$[ebp]
	movss	xmm0, DWORD PTR _df$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 42   : 	store->Stock=stock;

	mov	edx, DWORD PTR _store$[ebp]
	mov	ax, WORD PTR _stock$[ebp]
	mov	WORD PTR [edx+36], ax

; 43   : 	for(i=0;i<HARDPOINT_MAX;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Create
$LN2@Create:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@Create:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN1@Create

; 44   : 		store->HardPoint[i]=0;

	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _store$[ebp]
	mov	WORD PTR [ecx+eax*2+44], dx
	jmp	SHORT $LN2@Create
$LN1@Create:

; 45   : 	store->Next=NULL;

	mov	edx, DWORD PTR _store$[ebp]
	mov	DWORD PTR [edx+76], 0

; 46   : 
; 47   : 	return(store);

	mov	eax, DWORD PTR _store$[ebp]
$LN6@Create:

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?Create@StoresList@@QAEPAUStoresStr@@JPADJJJMF@Z ENDP	; StoresList::Create
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\src\campaign\cstores.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?Cleanup@StoresList@@QAEXXZ PROC			; StoresList::Cleanup
; _this$ = ecx

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 13   : 	int i;
; 14   : 
; 15   : 	for(i=0;i<_ALL_;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Cleanup
$LN5@Cleanup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Cleanup:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN4@Cleanup

; 16   : 		RemoveAll(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@StoresList@@QAEXJ@Z		; StoresList::RemoveAll
	jmp	SHORT $LN5@Cleanup
$LN4@Cleanup:

; 17   : 	for(i=0;i<_ALL_;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Cleanup
$LN2@Cleanup:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Cleanup:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN1@Cleanup

; 18   : 		Stores_[0]=NULL;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax], 0
	jmp	SHORT $LN2@Cleanup
$LN1@Cleanup:

; 19   : 	current=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 20   : 	ListID_=_ALL_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 3

; 21   : 	GetType_=_ALL_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 3

; 22   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@StoresList@@QAEXXZ ENDP			; StoresList::Cleanup
_TEXT	ENDS
END
