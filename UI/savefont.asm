; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\Tools\ui_tools\savefont.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?CurrentChar@@3JA				; CurrentChar
PUBLIC	?CurrentFontID@@3JA				; CurrentFontID
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?ItemID@@3JA					; ItemID
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?FontList@@3PAY0CA@DA				; FontList
PUBLIC	?fontlog@@3PAUtagLOGFONTA@@A			; fontlog
PUBLIC	?CreatedLogFont@@3UtagLOGFONTA@@A		; CreatedLogFont
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?CreatedFont@@3PAVC_Fontmgr@@A			; CreatedFont
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
_BSS	SEGMENT
?FontList@@3PAY0CA@DA DB 01900H DUP (?)			; FontList
?fontlog@@3PAUtagLOGFONTA@@A DB 02ee0H DUP (?)		; fontlog
?CreatedLogFont@@3UtagLOGFONTA@@A DB 03cH DUP (?)	; CreatedLogFont
?CreatedFont@@3PAVC_Fontmgr@@A DD 01H DUP (?)		; CreatedFont
_BSS	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
_DATA	SEGMENT
?CurrentChar@@3JA DD 0ffffffffH				; CurrentChar
?CurrentFontID@@3JA DD 01H				; CurrentFontID
?ItemID@@3JA DD	01H					; ItemID
_LF_TRUE_FALSE DD 00H
	DD	00H
	DD	01H
	DD	0ffab4b94H
_LF_CHARSET DD	00H
	DD	00H
	DD	0ffH
	DD	02H
	DD	0ffab4b94H
_LF_OUT_PRECISION DD 00H
	DD	02H
	DD	00H
	DD	01H
	DD	03H
	DD	0ffab4b94H
_LF_CLIP_PRECISION DD 00H
	DD	01H
	DD	00H
	DD	02H
	DD	0ffab4b94H
_LF_QUALITY DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	0ffab4b94H
_LF_PITCH DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	0ffab4b94H
_LF_FAMILY DD	00H
	DD	050H
	DD	00H
	DD	030H
	DD	010H
	DD	040H
	DD	020H
	DD	0ffab4b94H
_DATA	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetID@C_Fontmgr@@QAEJXZ			; C_Fontmgr::GetID
PUBLIC	?First@C_Fontmgr@@QAEFXZ			; C_Fontmgr::First
PUBLIC	?Last@C_Fontmgr@@QAEFXZ				; C_Fontmgr::Last
PUBLIC	?GetName@C_Fontmgr@@QAEPADXZ			; C_Fontmgr::GetName
PUBLIC	?SetID@C_Fontmgr@@QAEXJ@Z			; C_Fontmgr::SetID
PUBLIC	?SetName@C_Fontmgr@@QAEXPAD@Z			; C_Fontmgr::SetName
PUBLIC	?SetHeight@C_Fontmgr@@QAEXJ@Z			; C_Fontmgr::SetHeight
PUBLIC	?SetRange@C_Fontmgr@@QAEXJJ@Z			; C_Fontmgr::SetRange
PUBLIC	?SetBPL@C_Fontmgr@@QAEXJ@Z			; C_Fontmgr::SetBPL
PUBLIC	?SetTable@C_Fontmgr@@QAEXJPAVCharStr@@@Z	; C_Fontmgr::SetTable
PUBLIC	?SetData@C_Fontmgr@@QAEXJPAD@Z			; C_Fontmgr::SetData
PUBLIC	?SetKerning@C_Fontmgr@@QAEXJPAVKerningStr@@@Z	; C_Fontmgr::SetKerning
PUBLIC	?GetHash@C_Font@@QAEPAVC_Hash@@XZ		; C_Font::GetHash
PUBLIC	?SetGroup@C_Base@@QAEXJ@Z			; C_Base::SetGroup
PUBLIC	?SetClient@C_Base@@QAEXF@Z			; C_Base::SetClient
PUBLIC	?GetTextID@C_ListBox@@QAEJXZ			; C_ListBox::GetTextID
PUBLIC	?GetInteger@C_EditBox@@QAEJXZ			; C_EditBox::GetInteger
PUBLIC	?ChooseFontCB@@YAXJFPAVC_Base@@@Z		; ChooseFontCB
PUBLIC	?SearchList@@YAJJQAJ@Z				; SearchList
PUBLIC	?SetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z	; SetWindowLOGFONT
PUBLIC	?GetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z	; GetWindowLOGFONT
PUBLIC	?testme@@YGHPBUtagLOGFONTA@@PBUtagTEXTMETRICA@@KJ@Z ; testme
PUBLIC	?GetAllFonts@@YAXPAUHDC__@@PAD@Z		; GetAllFonts
PUBLIC	?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z	; FontToBFT
PUBLIC	?ChoosePairCB@@YAXJFPAVC_Base@@@Z		; ChoosePairCB
PUBLIC	?PrintPairs@@YAXPAVC_Window@@J@Z		; PrintPairs
PUBLIC	?IncreaseLead@@YAXJFPAVC_Base@@@Z		; IncreaseLead
PUBLIC	?DecreaseLead@@YAXJFPAVC_Base@@@Z		; DecreaseLead
PUBLIC	?IncreaseTrail@@YAXJFPAVC_Base@@@Z		; IncreaseTrail
PUBLIC	?DecreaseTrail@@YAXJFPAVC_Base@@@Z		; DecreaseTrail
PUBLIC	?IncreaseWidth@@YAXJFPAVC_Base@@@Z		; IncreaseWidth
PUBLIC	?DecreaseWidth@@YAXJFPAVC_Base@@@Z		; DecreaseWidth
PUBLIC	?IncreaseKern@@YAXJFPAVC_Base@@@Z		; IncreaseKern
PUBLIC	?DecreaseKern@@YAXJFPAVC_Base@@@Z		; DecreaseKern
PUBLIC	?ChooseCharCB@@YAXJFPAVC_Base@@@Z		; ChooseCharCB
PUBLIC	?MakeFontList@@YAXJ@Z				; MakeFontList
PUBLIC	?CreateTheFontCB@@YAXJFPAVC_Base@@@Z		; CreateTheFontCB
PUBLIC	?CreateFontCB@@YAXJFPAVC_Base@@@Z		; CreateFontCB
PUBLIC	?SaveFontCB@@YAXJFPAVC_Base@@@Z			; SaveFontCB
PUBLIC	?ChooseAvailableFontCB@@YAXJFPAVC_Base@@@Z	; ChooseAvailableFontCB
PUBLIC	?InitFontTool@@YAXXZ				; InitFontTool
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CD@DOIEOFHK@Failed?5to?5display?5character?5?$CI?$CF1d@ ; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_03GNGPFOOL@?$CF1d?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_04DIDHKLLF@?$CF1ld?$AA@			; `string'
PUBLIC	??_C@_06LJFKJACB@?$FL?$CF1ld?$FN?$AA@		; `string'
PUBLIC	??_C@_0M@HLHFMOMN@Font?5Window?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__CreateFontIndirectA@4:PROC
EXTRN	__imp__EnumFontsA@16:PROC
EXTRN	__imp__GetCharABCWidthsA@16:PROC
EXTRN	__imp__GetPixel@12:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__SetPixel@16:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__GetTextMetricsA@8:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__GetTextFaceA@12:PROC
EXTRN	__imp__GetKerningPairsA@12:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	_sprintf:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?Add@C_Hash@@QAEXJPAX@Z:PROC			; C_Hash::Add
EXTRN	?Remove@C_Hash@@QAEXJ@Z:PROC			; C_Hash::Remove
EXTRN	??0C_Fontmgr@@QAE@XZ:PROC			; C_Fontmgr::C_Fontmgr
EXTRN	?Width@C_Fontmgr@@QAEJPAD@Z:PROC		; C_Fontmgr::Width
EXTRN	?Height@C_Fontmgr@@QAEJXZ:PROC			; C_Fontmgr::Height
EXTRN	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z:PROC	; C_Fontmgr::GetChar
EXTRN	?Save@C_Fontmgr@@QAEXPAD@Z:PROC			; C_Fontmgr::Save
EXTRN	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z:PROC		; C_Font::Find
EXTRN	?AddText@C_String@@QAEJPBD@Z:PROC		; C_String::AddText
EXTRN	?GetText@C_String@@QAEPADJ@Z:PROC		; C_String::GetText
EXTRN	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z:PROC ; UI_Enter
EXTRN	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z:PROC	; UI_Leave
EXTRN	?SetUserNumber@C_Base@@QAEXJJ@Z:PROC		; C_Base::SetUserNumber
EXTRN	??0C_Button@@QAE@XZ:PROC			; C_Button::C_Button
EXTRN	?Setup@C_Button@@QAEXJFJJ@Z:PROC		; C_Button::Setup
EXTRN	?SetAllLabel@C_Button@@QAEXPAD@Z:PROC		; C_Button::SetAllLabel
EXTRN	?SetColor@C_Button@@QAEXFK@Z:PROC		; C_Button::SetColor
EXTRN	?SetLabelOffset@C_Button@@QAEXFJJ@Z:PROC	; C_Button::SetLabelOffset
EXTRN	?SetText@C_Button@@QAEXFPBD@Z:PROC		; C_Button::SetText
EXTRN	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z:PROC	; C_ListBox::AddItem
EXTRN	?RemoveAllItems@C_ListBox@@QAEXXZ:PROC		; C_ListBox::RemoveAllItems
EXTRN	?SetValue@C_ListBox@@QAEXJ@Z:PROC		; C_ListBox::SetValue
EXTRN	?SetText@C_EditBox@@QAEXPAD@Z:PROC		; C_EditBox::SetText
EXTRN	?SetInteger@C_EditBox@@QAEXJ@Z:PROC		; C_EditBox::SetInteger
EXTRN	?GetText@C_EditBox@@QAEPADXZ:PROC		; C_EditBox::GetText
EXTRN	?ScanClientAreas@C_Window@@QAEXXZ:PROC		; C_Window::ScanClientAreas
EXTRN	?AddControl@C_Window@@QAEXPAVC_Base@@@Z:PROC	; C_Window::AddControl
EXTRN	?RemoveControl@C_Window@@QAEXJ@Z:PROC		; C_Window::RemoveControl
EXTRN	?RefreshWindow@C_Window@@QAEXXZ:PROC		; C_Window::RefreshWindow
EXTRN	?FindControl@C_Window@@QAEPAVC_Base@@J@Z:PROC	; C_Window::FindControl
EXTRN	_MonoPrint:PROC
EXTRN	?EnableWindowGroup@C_Handler@@QAEXJ@Z:PROC	; C_Handler::EnableWindowGroup
EXTRN	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z:PROC ; C_Handler::FindWindowA
EXTRN	?DeleteGroupList@@YAXJ@Z:PROC			; DeleteGroupList
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gFontList@@3PAVC_Font@@A:DWORD			; gFontList
EXTRN	?gStringMgr@@3PAVC_String@@A:DWORD		; gStringMgr
EXTRN	?hInst@@3PAUHINSTANCE__@@A:DWORD		; hInst
EXTRN	?gMainHandler@@3PAVC_Handler@@A:DWORD		; gMainHandler
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_mywin	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLHFMOMN@Font?5Window?$AA@
CONST	SEGMENT
??_C@_0M@HLHFMOMN@Font?5Window?$AA@ DB 'Font Window', 00H ; `string'
CONST	ENDS
;	COMDAT ?FontWinName@?1??InitFontTool@@YAXXZ@4PADA
_DATA	SEGMENT
?FontWinName@?1??InitFontTool@@YAXXZ@4PADA DB 'Font Window', 00H ; `InitFontTool'::`2'::FontWinName
_DATA	ENDS
;	COMDAT ??_C@_06LJFKJACB@?$FL?$CF1ld?$FN?$AA@
CONST	SEGMENT
??_C@_06LJFKJACB@?$FL?$CF1ld?$FN?$AA@ DB '[%1ld]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIDHKLLF@?$CF1ld?$AA@
CONST	SEGMENT
??_C@_04DIDHKLLF@?$CF1ld?$AA@ DB '%1ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GNGPFOOL@?$CF1d?$AA@
CONST	SEGMENT
??_C@_03GNGPFOOL@?$CF1d?$AA@ DB '%1d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DOIEOFHK@Failed?5to?5display?5character?5?$CI?$CF1d@
CONST	SEGMENT
??_C@_0CD@DOIEOFHK@Failed?5to?5display?5character?5?$CI?$CF1d@ DB 'Failed'
	DB	' to display character (%1d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?MakeFontList@@YAXJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeFontList@@YAXJ@Z$0
__unwindtable$?PrintPairs@@YAXPAVC_Window@@J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintPairs@@YAXPAVC_Window@@J@Z$0
__unwindtable$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z$0
__ehfuncinfo$?MakeFontList@@YAXJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeFontList@@YAXJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?PrintPairs@@YAXPAVC_Window@@J@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PrintPairs@@YAXPAVC_Window@@J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_myclass$ = -64						; size = 48
_win$ = -16						; size = 4
_hdc$ = -12						; size = 4
_lbox$ = -8						; size = 4
_i$ = -4						; size = 4
?InitFontTool@@YAXXZ PROC				; InitFontTool

; 982  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 983  : 	C_Window *win;
; 984  : 	C_ListBox *lbox;
; 985  : 	HDC hdc;
; 986  : 	int i;
; 987  : 	WNDCLASSEX myclass;
; 988  : 	static char FontWinName[]="Font Window";
; 989  : 
; 990  : 	myclass.cbSize=sizeof(myclass);

	mov	DWORD PTR _myclass$[ebp], 48		; 00000030H

; 991  : 	myclass.style=CS_HREDRAW|CS_VREDRAW;

	mov	DWORD PTR _myclass$[ebp+4], 3

; 992  : 	myclass.lpfnWndProc=NULL;

	mov	DWORD PTR _myclass$[ebp+8], 0

; 993  : 	myclass.cbClsExtra=0;

	mov	DWORD PTR _myclass$[ebp+12], 0

; 994  : 	myclass.cbWndExtra=0;

	mov	DWORD PTR _myclass$[ebp+16], 0

; 995  : 	myclass.hInstance=hInst;

	mov	eax, DWORD PTR ?hInst@@3PAUHINSTANCE__@@A ; hInst
	mov	DWORD PTR _myclass$[ebp+20], eax

; 996  : 	myclass.hIcon=LoadIcon(NULL,IDI_APPLICATION);

	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _myclass$[ebp+24], eax

; 997  : 	myclass.hCursor=LoadCursor(NULL,IDC_ARROW);

	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _myclass$[ebp+28], eax

; 998  : 	myclass.hbrBackground=(HBRUSH)GetStockObject(BLACK_BRUSH);

	push	4
	call	DWORD PTR __imp__GetStockObject@4
	mov	DWORD PTR _myclass$[ebp+32], eax

; 999  : 	myclass.lpszMenuName=NULL;

	mov	DWORD PTR _myclass$[ebp+36], 0

; 1000 : 	myclass.hIconSm=LoadIcon(NULL,IDI_APPLICATION);

	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _myclass$[ebp+44], eax

; 1001 : 
; 1002 : 	RegisterClassEx(&myclass);

	lea	ecx, DWORD PTR _myclass$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegisterClassExA@4

; 1003 : 	mywin=CreateWindow(FontWinName,"Font Window",
; 1004 : 		WS_OVERLAPPEDWINDOW,
; 1005 : 		300,
; 1006 : 		300,
; 1007 : 		SCREEN_SIZE,
; 1008 : 		SCREEN_SIZE,
; 1009 : 		NULL,
; 1010 : 		NULL,
; 1011 : 		hInst,
; 1012 : 		NULL);

	push	0
	mov	edx, DWORD PTR ?hInst@@3PAUHINSTANCE__@@A ; hInst
	push	edx
	push	0
	push	0
	push	500					; 000001f4H
	push	500					; 000001f4H
	push	300					; 0000012cH
	push	300					; 0000012cH
	push	13565952				; 00cf0000H
	push	OFFSET ??_C@_0M@HLHFMOMN@Font?5Window?$AA@
	push	OFFSET ?FontWinName@?1??InitFontTool@@YAXXZ@4PADA
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _mywin, eax

; 1013 : 
; 1014 : 	ShowWindow(mywin,0);

	push	0
	mov	eax, DWORD PTR _mywin
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 1015 : 	UpdateWindow(mywin);

	mov	ecx, DWORD PTR _mywin
	push	ecx
	call	DWORD PTR __imp__UpdateWindow@4

; 1016 : 
; 1017 : 	win=gMainHandler->FindWindow(LOGFONT_WIN);

	push	988776621				; 3aef88adH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 1018 : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN5@InitFontTo

; 1019 : 	{
; 1020 : 		ItemID=1;

	mov	DWORD PTR ?ItemID@@3JA, 1		; ItemID

; 1021 : 		hdc=GetDC(mywin);

	mov	edx, DWORD PTR _mywin
	push	edx
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hdc$[ebp], eax

; 1022 : 		GetAllFonts(hdc,NULL);

	push	0
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	?GetAllFonts@@YAXPAUHDC__@@PAD@Z	; GetAllFonts
	add	esp, 8

; 1023 : 		ReleaseDC(mywin,hdc);

	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mywin
	push	edx
	call	DWORD PTR __imp__ReleaseDC@8

; 1024 : 
; 1025 : 		lbox=(C_ListBox *)win->FindControl(LB_ENUM_FONTS);

	push	988776639				; 3aef88bfH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 1026 : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN5@InitFontTo

; 1027 : 		{
; 1028 : 			lbox->RemoveAllItems();

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?RemoveAllItems@C_ListBox@@QAEXXZ	; C_ListBox::RemoveAllItems

; 1029 : 			lbox->SetCallback(ChooseAvailableFontCB);

	push	OFFSET ?ChooseAvailableFontCB@@YAXJFPAVC_Base@@@Z ; ChooseAvailableFontCB
	mov	eax, DWORD PTR _lbox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lbox$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax

; 1030 : 			for(i=1;i<ItemID;i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@InitFontTo
$LN2@InitFontTo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@InitFontTo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?ItemID@@3JA		; ItemID
	jge	SHORT $LN5@InitFontTo

; 1031 : 				lbox->AddItem(i,C_TYPE_ITEM,FontList[i]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, OFFSET ?FontList@@3PAY0CA@DA	; FontList
	push	eax
	push	50					; 00000032H
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?AddItem@C_ListBox@@QAEPAV1@JFPAD@Z	; C_ListBox::AddItem
	jmp	SHORT $LN2@InitFontTo
$LN5@InitFontTo:

; 1032 : 		}
; 1033 : 	}
; 1034 : 	ChooseFontCB(1,C_TYPE_SELECT,NULL);

	push	0
	push	28					; 0000001cH
	push	1
	call	?ChooseFontCB@@YAXJFPAVC_Base@@@Z	; ChooseFontCB
	add	esp, 12					; 0000000cH

; 1035 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitFontTool@@YAXXZ ENDP				; InitFontTool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_idx$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChooseAvailableFontCB@@YAXJFPAVC_Base@@@Z PROC		; ChooseAvailableFontCB

; 970  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 971  : 	int idx;
; 972  : 
; 973  : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN1@ChooseAvai

; 974  : 		return;

	jmp	SHORT $LN2@ChooseAvai
$LN1@ChooseAvai:

; 975  : 
; 976  : 	idx=((C_ListBox*)control)->GetTextID();

	mov	ecx, DWORD PTR _control$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR _idx$[ebp], eax

; 977  : 	memcpy(&CreatedLogFont,&fontlog[idx],sizeof(LOGFONT));

	push	60					; 0000003cH
	mov	ecx, DWORD PTR _idx$[ebp]
	imul	ecx, 60					; 0000003cH
	add	ecx, OFFSET ?fontlog@@3PAUtagLOGFONTA@@A ; fontlog
	push	ecx
	push	OFFSET ?CreatedLogFont@@3UtagLOGFONTA@@A ; CreatedLogFont
	call	_memcpy
	add	esp, 12					; 0000000cH

; 978  : 	SetWindowLOGFONT(&CreatedLogFont);

	push	OFFSET ?CreatedLogFont@@3UtagLOGFONTA@@A ; CreatedLogFont
	call	?SetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z ; SetWindowLOGFONT
	add	esp, 4
$LN2@ChooseAvai:

; 979  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChooseAvailableFontCB@@YAXJFPAVC_Base@@@Z ENDP		; ChooseAvailableFontCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_ebox$ = -8						; size = 4
_win$ = -4						; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?SaveFontCB@@YAXJFPAVC_Base@@@Z PROC			; SaveFontCB

; 932  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 933  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN5@SaveFontCB

; 934  : 		return;

	jmp	SHORT $LN6@SaveFontCB
$LN5@SaveFontCB:

; 935  : 
; 936  : 	C_Window *win;
; 937  : 	C_EditBox *ebox;
; 938  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	ecx, WORD PTR _hittype$[ebp]
	cmp	ecx, 52					; 00000034H
	je	SHORT $LN4@SaveFontCB

; 939  : 		return;

	jmp	SHORT $LN6@SaveFontCB
$LN4@SaveFontCB:

; 940  : 
; 941  : 	win=control->Parent_;

	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _win$[ebp], eax

; 942  : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN6@SaveFontCB

; 943  : 	{
; 944  : 		ebox=(C_EditBox*)win->FindControl(FONT_NAME_BOX);

	push	988776611				; 3aef88a3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 945  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN6@SaveFontCB

; 946  : 		{
; 947  : 			if(CreatedFont)

	cmp	DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A, 0 ; CreatedFont
	je	SHORT $LN6@SaveFontCB

; 948  : 				CreatedFont->Save(ebox->GetText());

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	push	eax
	mov	ecx, DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A ; CreatedFont
	call	?Save@C_Fontmgr@@QAEXPAD@Z		; C_Fontmgr::Save
$LN6@SaveFontCB:

; 949  : 		}
; 950  : 	}
; 951  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveFontCB@@YAXJFPAVC_Base@@@Z ENDP			; SaveFontCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?CreateFontCB@@YAXJFPAVC_Base@@@Z PROC			; CreateFontCB

; 924  : {

	push	ebp
	mov	ebp, esp

; 925  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN1@CreateFont

; 926  : 		return;

	jmp	SHORT $LN2@CreateFont
$LN1@CreateFont:

; 927  : 
; 928  : 	gMainHandler->EnableWindowGroup(-200);

	push	-200					; ffffff38H
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?EnableWindowGroup@C_Handler@@QAEXJ@Z	; C_Handler::EnableWindowGroup
$LN2@CreateFont:

; 929  : }

	pop	ebp
	ret	0
?CreateFontCB@@YAXJFPAVC_Base@@@Z ENDP			; CreateFontCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?CreateTheFontCB@@YAXJFPAVC_Base@@@Z PROC		; CreateTheFontCB

; 904  : {

	push	ebp
	mov	ebp, esp

; 905  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@CreateTheF

; 906  : 		return;

	jmp	$LN5@CreateTheF
$LN4@CreateTheF:

; 907  : 
; 908  : 	if(CreatedFont)

	cmp	DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A, 0 ; CreatedFont
	je	SHORT $LN3@CreateTheF

; 909  : 	{
; 910  : 		if(CreatedFont->GetID() == 100)

	mov	ecx, DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A ; CreatedFont
	call	?GetID@C_Fontmgr@@QAEJXZ		; C_Fontmgr::GetID
	cmp	eax, 100				; 00000064H
	jne	SHORT $LN2@CreateTheF

; 911  : 			gFontList->GetHash()->Remove(100);

	push	100					; 00000064H
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHash@C_Font@@QAEPAVC_Hash@@XZ	; C_Font::GetHash
	mov	ecx, eax
	call	?Remove@C_Hash@@QAEXJ@Z			; C_Hash::Remove
$LN2@CreateTheF:

; 912  : 		CreatedFont=NULL;

	mov	DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A, 0 ; CreatedFont
$LN3@CreateTheF:

; 913  : 	}
; 914  : 	GetWindowLOGFONT(&CreatedLogFont);

	push	OFFSET ?CreatedLogFont@@3UtagLOGFONTA@@A ; CreatedLogFont
	call	?GetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z ; GetWindowLOGFONT
	add	esp, 4

; 915  : 	CreatedFont=FontToBFT(100,&CreatedLogFont);

	push	OFFSET ?CreatedLogFont@@3UtagLOGFONTA@@A ; CreatedLogFont
	push	100					; 00000064H
	call	?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z ; FontToBFT
	add	esp, 8
	mov	DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A, eax ; CreatedFont

; 916  : 	if(CreatedFont)

	cmp	DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A, 0 ; CreatedFont
	je	SHORT $LN5@CreateTheF

; 917  : 	{
; 918  : 		gFontList->GetHash()->Add(100,CreatedFont);

	mov	ecx, DWORD PTR ?CreatedFont@@3PAVC_Fontmgr@@A ; CreatedFont
	push	ecx
	push	100					; 00000064H
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?GetHash@C_Font@@QAEPAVC_Hash@@XZ	; C_Font::GetHash
	mov	ecx, eax
	call	?Add@C_Hash@@QAEXJPAX@Z			; C_Hash::Add

; 919  : 		ChooseFontCB(100,C_TYPE_SELECT,NULL);

	push	0
	push	28					; 0000001cH
	push	100					; 00000064H
	call	?ChooseFontCB@@YAXJFPAVC_Base@@@Z	; ChooseFontCB
	add	esp, 12					; 0000000cH
$LN5@CreateTheF:

; 920  : 	}
; 921  : }

	pop	ebp
	ret	0
?CreateTheFontCB@@YAXJFPAVC_Base@@@Z ENDP		; CreateTheFontCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_j$ = -212						; size = 4
_numperline$ = -208					; size = 4
_Leave$ = -204						; size = 4
_btnid$ = -200						; size = 4
$T2 = -196						; size = 4
_numchars$ = -192					; size = 4
$T3 = -188						; size = 4
tv209 = -184						; size = 4
$T4 = -180						; size = 4
_ebox$ = -176						; size = 4
_y$ = -172						; size = 4
_x$ = -168						; size = 4
_charw$ = -164						; size = 4
_i$ = -160						; size = 4
_curfont$ = -156					; size = 4
_startchar$ = -152					; size = 4
_txt$ = -148						; size = 4
_win$ = -144						; size = 4
_btn$ = -140						; size = 4
_buffer$ = -136						; size = 120
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_FontID$ = 8						; size = 4
?MakeFontList@@YAXJ@Z PROC				; MakeFontList

; 802  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakeFontList@@YAXJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 803  : 	C_Window *win;
; 804  : 	C_EditBox *ebox;
; 805  : 	long i,j,x,y;
; 806  : 	long startchar,numchars;
; 807  : 	long charw;
; 808  : 	long btnid;
; 809  : 	C_Fontmgr *curfont;
; 810  : 	_TCHAR buffer[120];
; 811  : 	long numperline;
; 812  : 	C_Button *btn;
; 813  : 	C_Text *txt;
; 814  : 	F4CSECTIONHANDLE *Leave;
; 815  : 
; 816  : 	win=gMainHandler->FindWindow(FONT_ED_WIN);

	push	988776610				; 3aef88a2H
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 817  : 	if(!win || !FontID)

	cmp	DWORD PTR _win$[ebp], 0
	je	SHORT $LN11@MakeFontLi
	cmp	DWORD PTR _FontID$[ebp], 0
	jne	SHORT $LN12@MakeFontLi
$LN11@MakeFontLi:

; 818  : 		return;

	jmp	$LN14@MakeFontLi
$LN12@MakeFontLi:

; 819  : 
; 820  : 	curfont=gFontList->Find(FontID);

	mov	eax, DWORD PTR _FontID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _curfont$[ebp], eax

; 821  : 	if(!curfont)

	cmp	DWORD PTR _curfont$[ebp], 0
	jne	SHORT $LN10@MakeFontLi

; 822  : 		return;

	jmp	$LN14@MakeFontLi
$LN10@MakeFontLi:

; 823  : 
; 824  : 	Leave=UI_Enter(win);

	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?UI_Enter@@YAPAUF4CSECTIONHANDLE@@PAVC_Window@@@Z ; UI_Enter
	add	esp, 4
	mov	DWORD PTR _Leave$[ebp], eax

; 825  : 
; 826  : 	ebox=(C_EditBox*)win->FindControl(FONT_NAME_BOX);

	push	988776611				; 3aef88a3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 827  : 	if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN9@MakeFontLi

; 828  : 		ebox->SetFont(FontID);

	mov	edx, DWORD PTR _FontID$[ebp]
	push	edx
	mov	eax, DWORD PTR _ebox$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ebox$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN9@MakeFontLi:

; 829  : 
; 830  : 	DeleteGroupList(FONT_ED_WIN);

	push	988776610				; 3aef88a2H
	call	?DeleteGroupList@@YAXJ@Z		; DeleteGroupList
	add	esp, 4

; 831  : 
; 832  : 	charw=curfont->Width("M");

	push	OFFSET ??_C@_01PLPBNMEI@M?$AA@
	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Width@C_Fontmgr@@QAEJPAD@Z		; C_Fontmgr::Width
	mov	DWORD PTR _charw$[ebp], eax

; 833  : 	numperline=(win->ClientArea_[1].right - win->ClientArea_[1].left) / (charw + 60);

	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _win$[ebp]
	mov	esi, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [eax+ecx+176]
	sub	eax, DWORD PTR [esi+edx+168]
	mov	ecx, DWORD PTR _charw$[ebp]
	add	ecx, 60					; 0000003cH
	cdq
	idiv	ecx
	mov	DWORD PTR _numperline$[ebp], eax

; 834  : 	startchar=curfont->First();

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	mov	DWORD PTR _startchar$[ebp], edx

; 835  : 	numchars=curfont->Last() - startchar;

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	sub	eax, DWORD PTR _startchar$[ebp]
	mov	DWORD PTR _numchars$[ebp], eax

; 836  : 
; 837  : 	if(CurrentChar < startchar)

	mov	ecx, DWORD PTR ?CurrentChar@@3JA	; CurrentChar
	cmp	ecx, DWORD PTR _startchar$[ebp]
	jge	SHORT $LN8@MakeFontLi

; 838  : 		CurrentChar=startchar;

	mov	edx, DWORD PTR _startchar$[ebp]
	mov	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
$LN8@MakeFontLi:

; 839  : 
; 840  : 	if(CurrentChar >= (startchar-numchars))

	mov	eax, DWORD PTR _startchar$[ebp]
	sub	eax, DWORD PTR _numchars$[ebp]
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jl	SHORT $LN7@MakeFontLi

; 841  : 		CurrentChar=startchar;

	mov	ecx, DWORD PTR _startchar$[ebp]
	mov	DWORD PTR ?CurrentChar@@3JA, ecx	; CurrentChar
$LN7@MakeFontLi:

; 842  : 
; 843  : 	txt=(C_Text*)win->FindControl(FONT_NAME);

	push	988776608				; 3aef88a0H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 844  : 	if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN6@MakeFontLi

; 845  : 	{
; 846  : 		txt->SetText(curfont->GetName());

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?GetName@C_Fontmgr@@QAEPADXZ		; C_Fontmgr::GetName
	push	eax
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 847  : 		txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN6@MakeFontLi:

; 848  : 	}
; 849  : 
; 850  : 	_stprintf(buffer,"%1ld",curfont->Height());

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	push	eax
	push	OFFSET ??_C@_04DIDHKLLF@?$CF1ld?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 851  : 	txt=(C_Text*)win->FindControl(PITCH_SIZE);

	push	988776609				; 3aef88a1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 852  : 	if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN5@MakeFontLi

; 853  : 	{
; 854  : 		txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 855  : 		txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN5@MakeFontLi:

; 856  : 	}
; 857  : 
; 858  : 	x=5;

	mov	DWORD PTR _x$[ebp], 5

; 859  : 	y=5;

	mov	DWORD PTR _y$[ebp], 5

; 860  : 
; 861  : 	btnid=FONT_CHAR_BASE+startchar;

	mov	ecx, DWORD PTR _startchar$[ebp]
	add	ecx, 988776000				; 3aef8640H
	mov	DWORD PTR _btnid$[ebp], ecx

; 862  : 
; 863  : 	j=0;

	mov	DWORD PTR _j$[ebp], 0

; 864  : 	for(i=0;i<numchars;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MakeFontLi
$LN3@MakeFontLi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@MakeFontLi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numchars$[ebp]
	jge	$LN2@MakeFontLi

; 865  : 	{
; 866  : 		buffer[0]=static_cast<char>(startchar+i);

	mov	ecx, DWORD PTR _startchar$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR _buffer$[ebp+edx], cl

; 867  : 		buffer[1]=0;

	mov	DWORD PTR $T3[ebp], 1
	cmp	DWORD PTR $T3[ebp], 120			; 00000078H
	jae	SHORT $LN15@MakeFontLi
	jmp	SHORT $LN16@MakeFontLi
$LN15@MakeFontLi:
	call	___report_rangecheckfailure
$LN16@MakeFontLi:
	mov	eax, DWORD PTR $T3[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 0

; 868  : 
; 869  : 		btn=new C_Button;

	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN17@MakeFontLi
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0C_Button@@QAE@XZ			; C_Button::C_Button
	mov	DWORD PTR tv209[ebp], eax
	jmp	SHORT $LN18@MakeFontLi
$LN17@MakeFontLi:
	mov	DWORD PTR tv209[ebp], 0
$LN18@MakeFontLi:
	mov	ecx, DWORD PTR tv209[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _btn$[ebp], edx

; 870  : 		btn->Setup(btnid+i,C_TYPE_RADIO,x,y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	27					; 0000001bH
	mov	edx, DWORD PTR _btnid$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?Setup@C_Button@@QAEXJFJJ@Z		; C_Button::Setup

; 871  : 		btn->SetGroup(-100);

	push	-100					; ffffff9cH
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetGroup@C_Base@@QAEXJ@Z		; C_Base::SetGroup

; 872  : 		btn->SetFont(FontID);

	mov	eax, DWORD PTR _FontID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 873  : 		btn->SetText(C_STATE_0,gStringMgr->GetText(gStringMgr->AddText(buffer)));

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetText@C_Button@@QAEXFPBD@Z		; C_Button::SetText

; 874  : 		btn->SetText(C_STATE_1,gStringMgr->GetText(gStringMgr->AddText(buffer)));

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetText@C_Button@@QAEXFPBD@Z		; C_Button::SetText

; 875  : 		sprintf(buffer,"[%1ld]",startchar+i);

	mov	eax, DWORD PTR _startchar$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_06LJFKJACB@?$FL?$CF1ld?$FN?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 876  : 		btn->SetAllLabel(gStringMgr->GetText(gStringMgr->AddText(buffer)));

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetAllLabel@C_Button@@QAEXPAD@Z	; C_Button::SetAllLabel

; 877  : 		btn->SetLabelOffset(C_STATE_0,charw+5,0);

	push	0
	mov	eax, DWORD PTR _charw$[ebp]
	add	eax, 5
	push	eax
	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetLabelOffset@C_Button@@QAEXFJJ@Z	; C_Button::SetLabelOffset

; 878  : 		btn->SetLabelOffset(C_STATE_1,charw+5,0);

	push	0
	mov	ecx, DWORD PTR _charw$[ebp]
	add	ecx, 5
	push	ecx
	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetLabelOffset@C_Button@@QAEXFJJ@Z	; C_Button::SetLabelOffset

; 879  : 		btn->SetColor(C_STATE_0,0xcccccc);

	push	13421772				; 00ccccccH
	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetColor@C_Button@@QAEXFK@Z		; C_Button::SetColor

; 880  : 		btn->SetColor(C_STATE_1,0x00ff00);

	push	65280					; 0000ff00H
	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetColor@C_Button@@QAEXFK@Z		; C_Button::SetColor

; 881  : 		btn->SetClient(1);

	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 882  : 		btn->SetCallback(ChooseCharCB);

	push	OFFSET ?ChooseCharCB@@YAXJFPAVC_Base@@@Z ; ChooseCharCB
	mov	edx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [eax+100]
	call	edx

; 883  : 		btn->SetUserNumber(_UI95_DELGROUP_SLOT_,_UI95_DELGROUP_ID_);

	push	5551212					; 0054b46cH
	push	7
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 884  : 
; 885  : 		win->AddControl(btn);

	mov	eax, DWORD PTR _btn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl

; 886  : 
; 887  : 		x+=charw + charw*6;

	mov	ecx, DWORD PTR _charw$[ebp]
	imul	ecx, 6
	add	ecx, DWORD PTR _charw$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], ecx

; 888  : 		if(x >= win->ClientArea_[1].right-charw*4)

	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _charw$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _win$[ebp]
	mov	edx, DWORD PTR [ecx+edx+176]
	sub	edx, eax
	cmp	DWORD PTR _x$[ebp], edx
	jl	SHORT $LN1@MakeFontLi

; 889  : 		{
; 890  : 			x=5;

	mov	DWORD PTR _x$[ebp], 5

; 891  : 			y+=curfont->Height()+5;

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5]
	mov	DWORD PTR _y$[ebp], edx
$LN1@MakeFontLi:

; 892  : 		}
; 893  : 	}

	jmp	$LN3@MakeFontLi
$LN2@MakeFontLi:

; 894  : 
; 895  : 	PrintPairs(win,FontID);

	mov	eax, DWORD PTR _FontID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	push	ecx
	call	?PrintPairs@@YAXPAVC_Window@@J@Z	; PrintPairs
	add	esp, 8

; 896  : 
; 897  : 	UI_Leave(Leave);

	mov	edx, DWORD PTR _Leave$[ebp]
	push	edx
	call	?UI_Leave@@YAXPAUF4CSECTIONHANDLE@@@Z	; UI_Leave
	add	esp, 4

; 898  : 	win->ScanClientAreas();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?ScanClientAreas@C_Window@@QAEXXZ	; C_Window::ScanClientAreas

; 899  : 	win->update_ |= C_DRAW_REFRESHALL;

	mov	eax, DWORD PTR _win$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	or	ecx, 2
	mov	edx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [edx+104], ecx

; 900  : 	win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN14@MakeFontLi:

; 901  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MakeFontList@@YAXJ@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?MakeFontList@@YAXJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakeFontList@@YAXJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakeFontList@@YAXJ@Z ENDP				; MakeFontList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_fnt$ = -28						; size = 4
_chr$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChooseCharCB@@YAXJFPAVC_Base@@@Z PROC			; ChooseCharCB

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 716  : 	C_Fontmgr *fnt;
; 717  : 	CharStr   *chr;
; 718  : 	C_Text *txt;
; 719  : 	char buffer[10];
; 720  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN16@ChooseChar

; 721  : 		return;

	jmp	$LN17@ChooseChar
$LN16@ChooseChar:

; 722  : 
; 723  : 	CurrentChar=ID-FONT_CHAR_BASE;

	mov	ecx, DWORD PTR _ID$[ebp]
	sub	ecx, 988776000				; 3aef8640H
	mov	DWORD PTR ?CurrentChar@@3JA, ecx	; CurrentChar

; 724  : 	PrintPairs(control->Parent_,CurrentFontID);

	mov	edx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	edx
	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?PrintPairs@@YAXPAVC_Window@@J@Z	; PrintPairs
	add	esp, 8

; 725  : 	control->Refresh();

	mov	edx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 726  : 	fnt=gFontList->Find(CurrentFontID);

	mov	eax, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _fnt$[ebp], eax

; 727  : 	if(fnt && CurrentChar  > 0)

	cmp	DWORD PTR _fnt$[ebp], 0
	je	$LN15@ChooseChar
	cmp	DWORD PTR ?CurrentChar@@3JA, 0		; CurrentChar
	jle	$LN15@ChooseChar

; 728  : 	{
; 729  : 		chr=fnt->GetChar(static_cast<short>(CurrentChar));

	movzx	ecx, WORD PTR ?CurrentChar@@3JA
	push	ecx
	mov	ecx, DWORD PTR _fnt$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 730  : 		if(chr)

	cmp	DWORD PTR _chr$[ebp], 0
	je	$LN14@ChooseChar

; 731  : 		{
; 732  : 			sprintf(buffer,"%1d",chr->lead);

	mov	edx, DWORD PTR _chr$[ebp]
	movsx	eax, BYTE PTR [edx+2]
	push	eax
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 733  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_1);

	push	5039					; 000013afH
	mov	edx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 734  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN13@ChooseChar

; 735  : 			{
; 736  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 737  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN13@ChooseChar:

; 738  : 			}
; 739  : 			sprintf(buffer,"%1d",chr->w);

	mov	ecx, DWORD PTR _chr$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 740  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 741  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN12@ChooseChar

; 742  : 			{
; 743  : 				txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 744  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN12@ChooseChar:

; 745  : 			}
; 746  : 			sprintf(buffer,"%1d",chr->trail);

	mov	ecx, DWORD PTR _chr$[ebp]
	movsx	edx, BYTE PTR [ecx+3]
	push	edx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 747  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 748  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN11@ChooseChar

; 749  : 			{
; 750  : 				txt->SetText(buffer);

	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 751  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN11@ChooseChar:

; 752  : 			}
; 753  : 		}
; 754  : 		else

	jmp	$LN10@ChooseChar
$LN14@ChooseChar:

; 755  : 		{
; 756  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_1);

	push	5039					; 000013afH
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 757  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN9@ChooseChar

; 758  : 			{
; 759  : 				txt->SetText(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 760  : 				txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN9@ChooseChar:

; 761  : 			}
; 762  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 763  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN8@ChooseChar

; 764  : 			{
; 765  : 				txt->SetText(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 766  : 				txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN8@ChooseChar:

; 767  : 			}
; 768  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 769  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN10@ChooseChar

; 770  : 			{
; 771  : 				txt->SetText(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 772  : 				txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN10@ChooseChar:

; 773  : 			}
; 774  : 		}
; 775  : 	}
; 776  : 	else

	jmp	$LN17@ChooseChar
$LN15@ChooseChar:

; 777  : 	{
; 778  : 		txt=(C_Text*)control->Parent_->FindControl(REFUEL_1);

	push	5039					; 000013afH
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 779  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN5@ChooseChar

; 780  : 		{
; 781  : 			txt->SetText(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 782  : 			txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN5@ChooseChar:

; 783  : 		}
; 784  : 		txt=(C_Text*)control->Parent_->FindControl(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 785  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN4@ChooseChar

; 786  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN4@ChooseChar

; 787  : 		{
; 788  : 			txt->SetText(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 789  : 			txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN4@ChooseChar:

; 790  : 		}
; 791  : 		txt=(C_Text*)control->Parent_->FindControl(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 792  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN17@ChooseChar

; 793  : 		if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN17@ChooseChar

; 794  : 		{
; 795  : 			txt->SetText(" ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 796  : 			txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN17@ChooseChar:

; 797  : 		}
; 798  : 	}
; 799  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ChooseCharCB@@YAXJFPAVC_Base@@@Z ENDP			; ChooseCharCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?DecreaseKern@@YAXJFPAVC_Base@@@Z PROC			; DecreaseKern

; 709  : {

	push	ebp
	mov	ebp, esp

; 710  : 	if(hittype != C_TYPE_LMOUSEUP)
; 711  : 		return;
; 712  : }

	pop	ebp
	ret	0
?DecreaseKern@@YAXJFPAVC_Base@@@Z ENDP			; DecreaseKern
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
___formal$ = 16						; size = 4
?IncreaseKern@@YAXJFPAVC_Base@@@Z PROC			; IncreaseKern

; 703  : {

	push	ebp
	mov	ebp, esp

; 704  : 	if(hittype != C_TYPE_LMOUSEUP)
; 705  : 		return;
; 706  : }

	pop	ebp
	ret	0
?IncreaseKern@@YAXJFPAVC_Base@@@Z ENDP			; IncreaseKern
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_chr$ = -28						; size = 4
_cur$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?DecreaseWidth@@YAXJFPAVC_Base@@@Z PROC			; DecreaseWidth

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 674  : 	C_Fontmgr *cur;
; 675  : 	CharStr *chr;
; 676  : 	C_Text *txt;
; 677  : 	char buffer[10];
; 678  : 
; 679  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@DecreaseWi

; 680  : 		return;

	jmp	$LN5@DecreaseWi
$LN4@DecreaseWi:

; 681  : 
; 682  : 	cur=gFontList->Find(CurrentFontID);

	mov	ecx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 683  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@DecreaseWi

; 684  : 	{
; 685  : 		if(CurrentChar >= cur->First() && CurrentChar <= cur->Last())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	cmp	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
	jl	$LN5@DecreaseWi
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jg	$LN5@DecreaseWi

; 686  : 		{
; 687  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 688  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN1@DecreaseWi

; 689  : 			{
; 690  : 				chr=cur->GetChar(static_cast<short>(CurrentChar));

	movzx	edx, WORD PTR ?CurrentChar@@3JA
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 691  : 				chr->w--;

	mov	eax, DWORD PTR _chr$[ebp]
	mov	cl, BYTE PTR [eax+1]
	sub	cl, 1
	mov	edx, DWORD PTR _chr$[ebp]
	mov	BYTE PTR [edx+1], cl

; 692  : 				sprintf(buffer,"%1d",chr->w);

	mov	eax, DWORD PTR _chr$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 693  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 694  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@DecreaseWi:

; 695  : 			}
; 696  : 			control->Parent_->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+104], eax

; 697  : 			control->Parent_->RefreshWindow();

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN5@DecreaseWi:

; 698  : 		}
; 699  : 	}
; 700  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DecreaseWidth@@YAXJFPAVC_Base@@@Z ENDP			; DecreaseWidth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_chr$ = -28						; size = 4
_cur$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?IncreaseWidth@@YAXJFPAVC_Base@@@Z PROC			; IncreaseWidth

; 643  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 644  : 	C_Fontmgr *cur;
; 645  : 	CharStr *chr;
; 646  : 	C_Text *txt;
; 647  : 	char buffer[10];
; 648  : 
; 649  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@IncreaseWi

; 650  : 		return;

	jmp	$LN5@IncreaseWi
$LN4@IncreaseWi:

; 651  : 
; 652  : 	cur=gFontList->Find(CurrentFontID);

	mov	ecx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 653  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@IncreaseWi

; 654  : 	{
; 655  : 		if(CurrentChar >= cur->First() && CurrentChar <= cur->Last())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	cmp	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
	jl	$LN5@IncreaseWi
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jg	$LN5@IncreaseWi

; 656  : 		{
; 657  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_2);

	push	5040					; 000013b0H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 658  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN1@IncreaseWi

; 659  : 			{
; 660  : 				chr=cur->GetChar(static_cast<short>(CurrentChar));

	movzx	edx, WORD PTR ?CurrentChar@@3JA
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 661  : 				chr->w++;

	mov	eax, DWORD PTR _chr$[ebp]
	mov	cl, BYTE PTR [eax+1]
	add	cl, 1
	mov	edx, DWORD PTR _chr$[ebp]
	mov	BYTE PTR [edx+1], cl

; 662  : 				sprintf(buffer,"%1d",chr->w);

	mov	eax, DWORD PTR _chr$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 663  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 664  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@IncreaseWi:

; 665  : 			}
; 666  : 			control->Parent_->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+104], eax

; 667  : 			control->Parent_->RefreshWindow();

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN5@IncreaseWi:

; 668  : 		}
; 669  : 	}
; 670  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?IncreaseWidth@@YAXJFPAVC_Base@@@Z ENDP			; IncreaseWidth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_chr$ = -28						; size = 4
_cur$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?DecreaseTrail@@YAXJFPAVC_Base@@@Z PROC			; DecreaseTrail

; 613  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 614  : 	C_Fontmgr *cur;
; 615  : 	CharStr *chr;
; 616  : 	C_Text *txt;
; 617  : 	char buffer[10];
; 618  : 
; 619  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@DecreaseTr

; 620  : 		return;

	jmp	$LN5@DecreaseTr
$LN4@DecreaseTr:

; 621  : 
; 622  : 	cur=gFontList->Find(CurrentFontID);

	mov	ecx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 623  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@DecreaseTr

; 624  : 	{
; 625  : 		if(CurrentChar >= cur->First() && CurrentChar <= cur->Last())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	cmp	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
	jl	$LN5@DecreaseTr
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jg	$LN5@DecreaseTr

; 626  : 		{
; 627  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 628  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN1@DecreaseTr

; 629  : 			{
; 630  : 				chr=cur->GetChar(static_cast<short>(CurrentChar));

	movzx	edx, WORD PTR ?CurrentChar@@3JA
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 631  : 				chr->trail--;

	mov	eax, DWORD PTR _chr$[ebp]
	mov	cl, BYTE PTR [eax+3]
	sub	cl, 1
	mov	edx, DWORD PTR _chr$[ebp]
	mov	BYTE PTR [edx+3], cl

; 632  : 				sprintf(buffer,"%1d",chr->trail);

	mov	eax, DWORD PTR _chr$[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	push	ecx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 633  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 634  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@DecreaseTr:

; 635  : 			}
; 636  : 			control->Parent_->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+104], eax

; 637  : 			control->Parent_->RefreshWindow();

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN5@DecreaseTr:

; 638  : 		}
; 639  : 	}
; 640  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DecreaseTrail@@YAXJFPAVC_Base@@@Z ENDP			; DecreaseTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_chr$ = -28						; size = 4
_cur$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?IncreaseTrail@@YAXJFPAVC_Base@@@Z PROC			; IncreaseTrail

; 583  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 584  : 	C_Fontmgr *cur;
; 585  : 	CharStr *chr;
; 586  : 	C_Text *txt;
; 587  : 	char buffer[10];
; 588  : 
; 589  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@IncreaseTr

; 590  : 		return;

	jmp	$LN5@IncreaseTr
$LN4@IncreaseTr:

; 591  : 
; 592  : 	cur=gFontList->Find(CurrentFontID);

	mov	ecx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 593  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@IncreaseTr

; 594  : 	{
; 595  : 		if(CurrentChar >= cur->First() && CurrentChar <= cur->Last())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	cmp	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
	jl	$LN5@IncreaseTr
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jg	$LN5@IncreaseTr

; 596  : 		{
; 597  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_3);

	push	5041					; 000013b1H
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 598  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN1@IncreaseTr

; 599  : 			{
; 600  : 				chr=cur->GetChar(static_cast<short>(CurrentChar));

	movzx	edx, WORD PTR ?CurrentChar@@3JA
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 601  : 				chr->trail++;

	mov	eax, DWORD PTR _chr$[ebp]
	mov	cl, BYTE PTR [eax+3]
	add	cl, 1
	mov	edx, DWORD PTR _chr$[ebp]
	mov	BYTE PTR [edx+3], cl

; 602  : 				sprintf(buffer,"%1d",chr->trail);

	mov	eax, DWORD PTR _chr$[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	push	ecx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 603  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 604  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@IncreaseTr:

; 605  : 			}
; 606  : 			control->Parent_->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+104], eax

; 607  : 			control->Parent_->RefreshWindow();

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN5@IncreaseTr:

; 608  : 		}
; 609  : 	}
; 610  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?IncreaseTrail@@YAXJFPAVC_Base@@@Z ENDP			; IncreaseTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_chr$ = -28						; size = 4
_cur$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?DecreaseLead@@YAXJFPAVC_Base@@@Z PROC			; DecreaseLead

; 553  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 554  : 	C_Fontmgr *cur;
; 555  : 	CharStr *chr;
; 556  : 	C_Text *txt;
; 557  : 	char buffer[10];
; 558  : 
; 559  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@DecreaseLe

; 560  : 		return;

	jmp	$LN5@DecreaseLe
$LN4@DecreaseLe:

; 561  : 
; 562  : 	cur=gFontList->Find(CurrentFontID);

	mov	ecx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 563  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@DecreaseLe

; 564  : 	{
; 565  : 		if(CurrentChar >= cur->First() && CurrentChar <= cur->Last())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	cmp	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
	jl	$LN5@DecreaseLe
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jg	$LN5@DecreaseLe

; 566  : 		{
; 567  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_1);

	push	5039					; 000013afH
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 568  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN1@DecreaseLe

; 569  : 			{
; 570  : 				chr=cur->GetChar(static_cast<short>(CurrentChar));

	movzx	edx, WORD PTR ?CurrentChar@@3JA
	push	edx
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 571  : 				chr->lead--;

	mov	eax, DWORD PTR _chr$[ebp]
	mov	cl, BYTE PTR [eax+2]
	sub	cl, 1
	mov	edx, DWORD PTR _chr$[ebp]
	mov	BYTE PTR [edx+2], cl

; 572  : 				sprintf(buffer,"%1d",chr->lead);

	mov	eax, DWORD PTR _chr$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	push	ecx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 573  : 				txt->SetText(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax

; 574  : 				txt->Refresh();

	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@DecreaseLe:

; 575  : 			}
; 576  : 			control->Parent_->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+104], eax

; 577  : 			control->Parent_->RefreshWindow();

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN5@DecreaseLe:

; 578  : 		}
; 579  : 	}
; 580  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DecreaseLead@@YAXJFPAVC_Base@@@Z ENDP			; DecreaseLead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_chr$ = -28						; size = 4
_cur$ = -24						; size = 4
_txt$ = -20						; size = 4
_buffer$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?IncreaseLead@@YAXJFPAVC_Base@@@Z PROC			; IncreaseLead

; 523  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 524  : 	C_Fontmgr *cur;
; 525  : 	CharStr *chr;
; 526  : 	C_Text *txt;
; 527  : 	char buffer[10];
; 528  : 
; 529  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN4@IncreaseLe

; 530  : 		return;

	jmp	$LN5@IncreaseLe
$LN4@IncreaseLe:

; 531  : 
; 532  : 	cur=gFontList->Find(CurrentFontID);

	mov	ecx, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	ecx
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _cur$[ebp], eax

; 533  : 	if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@IncreaseLe

; 534  : 	{
; 535  : 		if(CurrentChar >= cur->First() && CurrentChar <= cur->Last())

	mov	ecx, DWORD PTR _cur$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	edx, ax
	cmp	DWORD PTR ?CurrentChar@@3JA, edx	; CurrentChar
	jl	$LN5@IncreaseLe
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	cwde
	cmp	DWORD PTR ?CurrentChar@@3JA, eax	; CurrentChar
	jg	$LN5@IncreaseLe

; 536  : 		{
; 537  : 			txt=(C_Text*)control->Parent_->FindControl(REFUEL_1);

	push	5039					; 000013afH
	mov	ecx, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _txt$[ebp], eax

; 538  : 			if(txt)

	cmp	DWORD PTR _txt$[ebp], 0
	je	SHORT $LN1@IncreaseLe

; 539  : 			{
; 540  : 				chr=cur->GetChar(static_cast<char>(CurrentChar));

	movsx	dx, BYTE PTR ?CurrentChar@@3JA
	movzx	eax, dx
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	call	?GetChar@C_Fontmgr@@QAEPAVCharStr@@F@Z	; C_Fontmgr::GetChar
	mov	DWORD PTR _chr$[ebp], eax

; 541  : 				chr->lead++;

	mov	ecx, DWORD PTR _chr$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	add	dl, 1
	mov	eax, DWORD PTR _chr$[ebp]
	mov	BYTE PTR [eax+2], dl

; 542  : 				sprintf(buffer,"%1d",chr->lead);

	mov	ecx, DWORD PTR _chr$[ebp]
	movsx	edx, BYTE PTR [ecx+2]
	push	edx
	push	OFFSET ??_C@_03GNGPFOOL@?$CF1d?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 543  : 				txt->SetText(buffer);

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 544  : 				txt->Refresh();

	mov	eax, DWORD PTR _txt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _txt$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN1@IncreaseLe:

; 545  : 			}
; 546  : 			control->Parent_->update_ |= C_DRAW_REFRESHALL;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx+104], eax

; 547  : 			control->Parent_->RefreshWindow();

	mov	eax, DWORD PTR _control$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN5@IncreaseLe:

; 548  : 		}
; 549  : 	}
; 550  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?IncreaseLead@@YAXJFPAVC_Base@@@Z ENDP			; IncreaseLead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_numperline$ = -88					; size = 4
$T2 = -84						; size = 4
_btnid$ = -80						; size = 4
$T3 = -76						; size = 4
tv145 = -72						; size = 4
$T4 = -68						; size = 4
_charw$ = -64						; size = 4
_numchars$ = -60					; size = 4
_startchar$ = -56					; size = 4
_y$ = -52						; size = 4
_j$ = -48						; size = 4
_x$ = -44						; size = 4
_curfont$ = -40						; size = 4
_i$ = -36						; size = 4
_btn$ = -32						; size = 4
_buffer$ = -28						; size = 10
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_win$ = 8						; size = 4
_FontID$ = 12						; size = 4
?PrintPairs@@YAXPAVC_Window@@J@Z PROC			; PrintPairs

; 465  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrintPairs@@YAXPAVC_Window@@J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 466  : 	C_Button *btn;
; 467  : 	_TCHAR buffer[10];
; 468  : 	long i,j,numchars,startchar;
; 469  : 	C_Fontmgr *curfont;
; 470  : 	long charw,btnid;
; 471  : 	long x,y,numperline;
; 472  : 
; 473  : 	curfont=gFontList->Find(FontID);

	mov	eax, DWORD PTR _FontID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gFontList@@3PAVC_Font@@A ; gFontList
	call	?Find@C_Font@@QAEPAVC_Fontmgr@@J@Z	; C_Font::Find
	mov	DWORD PTR _curfont$[ebp], eax

; 474  : 	if(!curfont)

	cmp	DWORD PTR _curfont$[ebp], 0
	jne	SHORT $LN8@PrintPairs

; 475  : 		return;

	jmp	$LN10@PrintPairs
$LN8@PrintPairs:

; 476  : 
; 477  : 	startchar=curfont->First();

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?First@C_Fontmgr@@QAEFXZ		; C_Fontmgr::First
	movsx	ecx, ax
	mov	DWORD PTR _startchar$[ebp], ecx

; 478  : 	numchars=curfont->Last() - startchar;

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Last@C_Fontmgr@@QAEFXZ			; C_Fontmgr::Last
	movsx	edx, ax
	sub	edx, DWORD PTR _startchar$[ebp]
	mov	DWORD PTR _numchars$[ebp], edx

; 479  : 	charw=curfont->Width("M");

	push	OFFSET ??_C@_01PLPBNMEI@M?$AA@
	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Width@C_Fontmgr@@QAEJPAD@Z		; C_Fontmgr::Width
	mov	DWORD PTR _charw$[ebp], eax

; 480  : 	numperline=(win->ClientArea_[2].right - win->ClientArea_[2].left) / (charw*4);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, DWORD PTR _win$[ebp]
	mov	esi, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+eax+176]
	sub	eax, DWORD PTR [esi+ecx+168]
	mov	ecx, DWORD PTR _charw$[ebp]
	shl	ecx, 2
	cdq
	idiv	ecx
	mov	DWORD PTR _numperline$[ebp], eax

; 481  : 
; 482  : 	x=5;

	mov	DWORD PTR _x$[ebp], 5

; 483  : 	y=5;

	mov	DWORD PTR _y$[ebp], 5

; 484  : 
; 485  : 	btnid=KERN_CHAR_BASE+startchar;

	mov	edx, DWORD PTR _startchar$[ebp]
	add	edx, 988777000				; 3aef8a28H
	mov	DWORD PTR _btnid$[ebp], edx

; 486  : 
; 487  : 	for(i=0;i<numchars;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@PrintPairs
$LN6@PrintPairs:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@PrintPairs:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numchars$[ebp]
	jge	SHORT $LN5@PrintPairs

; 488  : 		win->RemoveControl(btnid+i);

	mov	edx, DWORD PTR _btnid$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _win$[ebp]
	call	?RemoveControl@C_Window@@QAEXJ@Z	; C_Window::RemoveControl
	jmp	SHORT $LN6@PrintPairs
$LN5@PrintPairs:

; 489  : 
; 490  : 	j=0;

	mov	DWORD PTR _j$[ebp], 0

; 491  : 	for(i=0;i<numchars;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@PrintPairs
$LN3@PrintPairs:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@PrintPairs:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numchars$[ebp]
	jge	$LN10@PrintPairs

; 492  : 	{
; 493  : 		buffer[0]=static_cast<char>(CurrentChar);

	mov	edx, 1
	imul	edx, 0
	mov	al, BYTE PTR ?CurrentChar@@3JA
	mov	BYTE PTR _buffer$[ebp+edx], al

; 494  : 		buffer[1]=static_cast<char>(startchar+i);

	mov	ecx, DWORD PTR _startchar$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _buffer$[ebp+edx], cl

; 495  : 		buffer[2]=0;

	mov	eax, 1
	shl	eax, 1
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 10			; 0000000aH
	jae	SHORT $LN11@PrintPairs
	jmp	SHORT $LN12@PrintPairs
$LN11@PrintPairs:
	call	___report_rangecheckfailure
$LN12@PrintPairs:
	mov	ecx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _buffer$[ebp+ecx], 0

; 496  : 
; 497  : 		btn=new C_Button;

	push	160					; 000000a0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN13@PrintPairs
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0C_Button@@QAE@XZ			; C_Button::C_Button
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN14@PrintPairs
$LN13@PrintPairs:
	mov	DWORD PTR tv145[ebp], 0
$LN14@PrintPairs:
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _btn$[ebp], eax

; 498  : 		btn->Setup(btnid+i,C_TYPE_RADIO,x,y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	27					; 0000001bH
	mov	eax, DWORD PTR _btnid$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?Setup@C_Button@@QAEXJFJJ@Z		; C_Button::Setup

; 499  : 		btn->SetGroup(-100);

	push	-100					; ffffff9cH
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetGroup@C_Base@@QAEXJ@Z		; C_Base::SetGroup

; 500  : 		btn->SetFont(FontID);

	mov	ecx, DWORD PTR _FontID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx

; 501  : 		btn->SetText(C_STATE_0,gStringMgr->GetText(gStringMgr->AddText(buffer)));

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetText@C_Button@@QAEXFPBD@Z		; C_Button::SetText

; 502  : 		btn->SetText(C_STATE_1,gStringMgr->GetText(gStringMgr->AddText(buffer)));

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?AddText@C_String@@QAEJPBD@Z		; C_String::AddText
	push	eax
	mov	ecx, DWORD PTR ?gStringMgr@@3PAVC_String@@A ; gStringMgr
	call	?GetText@C_String@@QAEPADJ@Z		; C_String::GetText
	push	eax
	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetText@C_Button@@QAEXFPBD@Z		; C_Button::SetText

; 503  : 		btn->SetColor(C_STATE_0,0xcccccc);

	push	13421772				; 00ccccccH
	push	0
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetColor@C_Button@@QAEXFK@Z		; C_Button::SetColor

; 504  : 		btn->SetColor(C_STATE_1,0x00ff00);

	push	65280					; 0000ff00H
	push	1
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetColor@C_Button@@QAEXFK@Z		; C_Button::SetColor

; 505  : 		btn->SetClient(2);

	push	2
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetClient@C_Base@@QAEXF@Z		; C_Base::SetClient

; 506  : 		btn->SetCallback(ChoosePairCB);

	push	OFFSET ?ChoosePairCB@@YAXJFPAVC_Base@@@Z ; ChoosePairCB
	mov	edx, DWORD PTR _btn$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _btn$[ebp]
	mov	edx, DWORD PTR [eax+100]
	call	edx

; 507  : 		btn->SetUserNumber(_UI95_DELGROUP_SLOT_,_UI95_DELGROUP_ID_);

	push	5551212					; 0054b46cH
	push	7
	mov	ecx, DWORD PTR _btn$[ebp]
	call	?SetUserNumber@C_Base@@QAEXJJ@Z		; C_Base::SetUserNumber

; 508  : 
; 509  : 		win->AddControl(btn);

	mov	eax, DWORD PTR _btn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _win$[ebp]
	call	?AddControl@C_Window@@QAEXPAVC_Base@@@Z	; C_Window::AddControl

; 510  : 
; 511  : 		x+=charw*4;

	mov	ecx, DWORD PTR _charw$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _x$[ebp], eax

; 512  : 		j++;

	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx

; 513  : 		if(j >= numperline)

	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _numperline$[ebp]
	jl	SHORT $LN1@PrintPairs

; 514  : 		{
; 515  : 			x=5;

	mov	DWORD PTR _x$[ebp], 5

; 516  : 			y+=curfont->Height()+5;

	mov	ecx, DWORD PTR _curfont$[ebp]
	call	?Height@C_Fontmgr@@QAEJXZ		; C_Fontmgr::Height
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5]
	mov	DWORD PTR _y$[ebp], edx

; 517  : 			j=0;

	mov	DWORD PTR _j$[ebp], 0
$LN1@PrintPairs:

; 518  : 		}
; 519  : 	}

	jmp	$LN3@PrintPairs
$LN10@PrintPairs:

; 520  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PrintPairs@@YAXPAVC_Window@@J@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?PrintPairs@@YAXPAVC_Window@@J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrintPairs@@YAXPAVC_Window@@J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrintPairs@@YAXPAVC_Window@@J@Z ENDP			; PrintPairs
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChoosePairCB@@YAXJFPAVC_Base@@@Z PROC			; ChoosePairCB

; 457  : {

	push	ebp
	mov	ebp, esp

; 458  : 	if(hittype != C_TYPE_LMOUSEUP)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 52					; 00000034H
	je	SHORT $LN1@ChoosePair

; 459  : 		return;

	jmp	SHORT $LN2@ChoosePair
$LN1@ChoosePair:

; 460  : 
; 461  : 	control->Refresh();

	mov	ecx, DWORD PTR _control$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _control$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN2@ChoosePair:

; 462  : }

	pop	ebp
	ret	0
?ChoosePairCB@@YAXJFPAVC_Base@@@Z ENDP			; ChoosePairCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
$T2 = -264						; size = 4
$T3 = -260						; size = 4
_charw$ = -256						; size = 4
$T4 = -252						; size = 4
_charh$ = -248						; size = 4
$T5 = -244						; size = 4
$T6 = -240						; size = 4
$T7 = -236						; size = 4
$T8 = -232						; size = 4
$T9 = -228						; size = 4
$T10 = -224						; size = 4
$T11 = -220						; size = 4
tv226 = -216						; size = 4
_DataSize$ = -212					; size = 4
$T12 = -208						; size = 4
$T13 = -204						; size = 4
$T14 = -200						; size = 4
_lastchar$ = -196					; size = 4
_KernSize$ = -192					; size = 4
_CharData$ = -188					; size = 4
_j$ = -184						; size = 4
_yoff$ = -180						; size = 4
_CharPtr$ = -176					; size = 4
_firstchar$ = -172					; size = 4
_kerns$ = -168						; size = 4
_ABCList$ = -164					; size = 4
_xoff$ = -160						; size = 4
_mykerns$ = -156					; size = 4
_bytesperline$ = -152					; size = 4
_numchars$ = -148					; size = 4
_MyChars$ = -144					; size = 4
_newfont$ = -140					; size = 4
_y$ = -136						; size = 4
_x$ = -132						; size = 4
_hdc$ = -128						; size = 4
_font$ = -124						; size = 4
_i$ = -120						; size = 4
_buffer$ = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_logfont$ = 12						; size = 4
?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z PROC	; FontToBFT

; 308  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 309  : 	FONTLIST *font;
; 310  : 	char buffer[100];
; 311  : 	long firstchar;
; 312  : 	long lastchar;
; 313  : 	long numchars;
; 314  : 	long DataSize;
; 315  : 	long KernSize;
; 316  : 	long xoff,yoff;
; 317  : 	long i,j,x,y;
; 318  : 	long charw,charh;
; 319  : 	long bytesperline;
; 320  : 	unsigned char *CharData,*CharPtr;
; 321  : 	HDC hdc;
; 322  : 	KERNINGPAIR *kerns;
; 323  : 	KerningStr *mykerns;
; 324  : 	ABC *ABCList;
; 325  : 	CharStr *MyChars;
; 326  : 	C_Fontmgr *newfont;
; 327  : 
; 328  : //	surface=UI95_CreateDDSurface(gMainDDraw,SCREEN_SIZE,SCREEN_SIZE);
; 329  : //	if(!surface)
; 330  : //	{
; 331  : //		MonoPrint("Can't create DDSurface for Font conversion to BFT\n");
; 332  : //		return(NULL);
; 333  : //	}
; 334  : 
; 335  : 	font=new FONTLIST;

	push	136					; 00000088H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR _font$[ebp], eax

; 336  : 	font->Font_=CreateFontIndirect(logfont);

	mov	ecx, DWORD PTR _logfont$[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateFontIndirectA@4
	mov	edx, DWORD PTR _font$[ebp]
	mov	DWORD PTR [edx+4], eax

; 337  : 	if(font->Font_ == NULL)

	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN31@FontToBFT

; 338  : 	{
; 339  : 		delete font;

	mov	ecx, DWORD PTR _font$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 340  : 		return(NULL);

	xor	eax, eax
	jmp	$LN33@FontToBFT
$LN31@FontToBFT:

; 341  : 	}
; 342  : 
; 343  : 	font->ID_=ID;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax], ecx

; 344  : 	hdc=GetDC(mywin);

	mov	edx, DWORD PTR _mywin
	push	edx
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hdc$[ebp], eax

; 345  : 	SelectObject(hdc,font->Font_);

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8

; 346  : 	GetTextFace(hdc,99,buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	push	99					; 00000063H
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetTextFaceA@12

; 347  : 	GetTextMetrics(hdc,&font->Metrics_);

	mov	edx, DWORD PTR _font$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetTextMetricsA@8

; 348  : 	ReleaseDC(mywin,hdc);

	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mywin
	push	edx
	call	DWORD PTR __imp__ReleaseDC@8

; 349  : 
; 350  : // Get Kerning tables
; 351  : 	kerns=new KERNINGPAIR[256*256];

	push	524288					; 00080000H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	eax, DWORD PTR $T11[ebp]
	mov	DWORD PTR _kerns$[ebp], eax

; 352  : 	mykerns=new KerningStr[256*256];

	push	393216					; 00060000H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _mykerns$[ebp], ecx

; 353  : 	ABCList=new ABC[256];

	push	3072					; 00000c00H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _ABCList$[ebp], edx

; 354  : 
; 355  : 	hdc=GetDC(mywin);

	mov	eax, DWORD PTR _mywin
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hdc$[ebp], eax

; 356  : 	SelectObject(hdc,font->Font_);

	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SelectObject@8

; 357  : 	KernSize=GetKerningPairs(hdc,65536,kerns);

	mov	ecx, DWORD PTR _kerns$[ebp]
	push	ecx
	push	65536					; 00010000H
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetKerningPairsA@12
	mov	DWORD PTR _KernSize$[ebp], eax

; 358  : 	GetCharABCWidths(hdc,font->Metrics_.tmFirstChar,font->Metrics_.tmLastChar,ABCList);

	mov	eax, DWORD PTR _ABCList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	movzx	edx, BYTE PTR [ecx+57]
	push	edx
	mov	eax, DWORD PTR _font$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetCharABCWidthsA@16

; 359  : 	ReleaseDC(mywin,hdc);

	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mywin
	push	ecx
	call	DWORD PTR __imp__ReleaseDC@8

; 360  : 
; 361  : 	for(i=0;i<KernSize;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@FontToBFT
$LN29@FontToBFT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN30@FontToBFT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _KernSize$[ebp]
	jge	SHORT $LN28@FontToBFT

; 362  : 	{
; 363  : 		mykerns[i].first  = kerns[i].wFirst;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _mykerns$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _kerns$[ebp]
	mov	ax, WORD PTR [esi+eax*8]
	mov	WORD PTR [edx+ecx], ax

; 364  : 		mykerns[i].second = kerns[i].wSecond;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _mykerns$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _kerns$[ebp]
	mov	ax, WORD PTR [esi+eax*8+2]
	mov	WORD PTR [edx+ecx+2], ax

; 365  : 		mykerns[i].add    = static_cast<short>(kerns[i].iKernAmount);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _mykerns$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _kerns$[ebp]
	mov	ax, WORD PTR [esi+eax*8+4]
	mov	WORD PTR [edx+ecx+4], ax

; 366  : 	}

	jmp	SHORT $LN29@FontToBFT
$LN28@FontToBFT:

; 367  : 
; 368  : 	delete kerns;

	mov	ecx, DWORD PTR _kerns$[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 369  : 	// Generate font table
; 370  : 
; 371  : 	firstchar=font->Metrics_.tmFirstChar;

	mov	eax, DWORD PTR _font$[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	mov	DWORD PTR _firstchar$[ebp], ecx

; 372  : 	lastchar=font->Metrics_.tmLastChar;

	mov	edx, DWORD PTR _font$[ebp]
	movzx	eax, BYTE PTR [edx+57]
	mov	DWORD PTR _lastchar$[ebp], eax

; 373  : 	numchars=lastchar-firstchar+1;

	mov	ecx, DWORD PTR _lastchar$[ebp]
	sub	ecx, DWORD PTR _firstchar$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numchars$[ebp], ecx

; 374  : 
; 375  : 	MyChars=new CharStr[numchars];

	xor	ecx, ecx
	mov	eax, DWORD PTR _numchars$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR _MyChars$[ebp], eax

; 376  : 	memset(MyChars,0,sizeof(CharStr)*numchars);

	mov	ecx, DWORD PTR _numchars$[ebp]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _MyChars$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 377  : 
; 378  : 	// Check All Kerning
; 379  : 	for(j=0;j<KernSize;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN27@FontToBFT
$LN26@FontToBFT:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN27@FontToBFT:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _KernSize$[ebp]
	jge	SHORT $LN25@FontToBFT

; 380  : 	{
; 381  : 		for(i=0;i<numchars;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@FontToBFT
$LN23@FontToBFT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN24@FontToBFT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numchars$[ebp]
	jge	SHORT $LN22@FontToBFT

; 382  : 			if((firstchar+i) == mykerns[i].first)

	mov	ecx, DWORD PTR _firstchar$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 6
	mov	eax, DWORD PTR _mykerns$[ebp]
	movsx	edx, WORD PTR [eax+edx]
	cmp	ecx, edx
	jne	SHORT $LN21@FontToBFT

; 383  : 				MyChars[i].flags=_FNT_CHECK_KERNING_;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _MyChars$[ebp]
	mov	BYTE PTR [ecx+eax*4], 64		; 00000040H
$LN21@FontToBFT:

; 384  : 	}

	jmp	SHORT $LN23@FontToBFT
$LN22@FontToBFT:
	jmp	SHORT $LN26@FontToBFT
$LN25@FontToBFT:

; 385  : 
; 386  : 	for(i=0;i<numchars;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@FontToBFT
$LN19@FontToBFT:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN20@FontToBFT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numchars$[ebp]
	jge	SHORT $LN18@FontToBFT

; 387  : 	{
; 388  : 		MyChars[i].lead=static_cast<char>(ABCList[i].abcA);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _MyChars$[ebp]
	mov	esi, DWORD PTR _ABCList$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [eax+edx*4+2], cl

; 389  : 		MyChars[i].w=static_cast<BYTE>(ABCList[i].abcB);

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _MyChars$[ebp]
	mov	esi, DWORD PTR _ABCList$[ebp]
	mov	dl, BYTE PTR [esi+edx+4]
	mov	BYTE PTR [ecx+eax*4+1], dl

; 390  : 		MyChars[i].trail=static_cast<char>(ABCList[i].abcC);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _MyChars$[ebp]
	mov	esi, DWORD PTR _ABCList$[ebp]
	mov	al, BYTE PTR [esi+eax+8]
	mov	BYTE PTR [edx+ecx*4+3], al

; 391  : 	}

	jmp	SHORT $LN19@FontToBFT
$LN18@FontToBFT:

; 392  : 
; 393  : 	delete ABCList;

	mov	ecx, DWORD PTR _ABCList$[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	mov	edx, DWORD PTR $T10[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 394  : 
; 395  : 	// Create Font Resource
; 396  : 
; 397  : 	newfont=new C_Fontmgr;

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN34@FontToBFT
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0C_Fontmgr@@QAE@XZ			; C_Fontmgr::C_Fontmgr
	mov	DWORD PTR tv226[ebp], eax
	jmp	SHORT $LN35@FontToBFT
$LN34@FontToBFT:
	mov	DWORD PTR tv226[ebp], 0
$LN35@FontToBFT:
	mov	eax, DWORD PTR tv226[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _newfont$[ebp], ecx

; 398  : 	newfont->SetID(ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetID@C_Fontmgr@@QAEXJ@Z		; C_Fontmgr::SetID

; 399  : 	newfont->SetName(buffer);

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetName@C_Fontmgr@@QAEXPAD@Z		; C_Fontmgr::SetName

; 400  : 	newfont->SetHeight(font->Metrics_.tmHeight);

	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetHeight@C_Fontmgr@@QAEXJ@Z		; C_Fontmgr::SetHeight

; 401  : 	bytesperline=font->Metrics_.tmMaxCharWidth / 8 + 1;

	mov	eax, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	mov	DWORD PTR _bytesperline$[ebp], eax

; 402  : 	newfont->SetBPL(bytesperline);

	mov	ecx, DWORD PTR _bytesperline$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetBPL@C_Fontmgr@@QAEXJ@Z		; C_Fontmgr::SetBPL

; 403  : 	newfont->SetRange(firstchar,lastchar);

	mov	edx, DWORD PTR _lastchar$[ebp]
	push	edx
	mov	eax, DWORD PTR _firstchar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetRange@C_Fontmgr@@QAEXJJ@Z		; C_Fontmgr::SetRange

; 404  : 	newfont->SetTable(numchars,MyChars);

	mov	ecx, DWORD PTR _MyChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numchars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetTable@C_Fontmgr@@QAEXJPAVCharStr@@@Z ; C_Fontmgr::SetTable

; 405  : 	newfont->SetKerning(KernSize,mykerns);

	mov	eax, DWORD PTR _mykerns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _KernSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetKerning@C_Fontmgr@@QAEXJPAVKerningStr@@@Z ; C_Fontmgr::SetKerning

; 406  : 	CharData=new unsigned char[bytesperline * font->Metrics_.tmHeight * numchars];

	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR _bytesperline$[ebp]
	imul	eax, DWORD PTR [edx+12]
	imul	eax, DWORD PTR _numchars$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _CharData$[ebp], ecx

; 407  : 	DataSize=numchars * font->Metrics_.tmHeight * bytesperline;

	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR _numchars$[ebp]
	imul	eax, DWORD PTR [edx+12]
	imul	eax, DWORD PTR _bytesperline$[ebp]
	mov	DWORD PTR _DataSize$[ebp], eax

; 408  : 	newfont->SetData(DataSize,(char *)CharData);

	mov	ecx, DWORD PTR _CharData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _DataSize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _newfont$[ebp]
	call	?SetData@C_Fontmgr@@QAEXJPAD@Z		; C_Fontmgr::SetData

; 409  : 	memset(CharData,0,DataSize);

	mov	eax, DWORD PTR _DataSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _CharData$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 410  : 
; 411  : 	CharPtr=CharData;

	mov	edx, DWORD PTR _CharData$[ebp]
	mov	DWORD PTR _CharPtr$[ebp], edx

; 412  : 
; 413  : 	buffer[0]=0;

	mov	eax, 1
	imul	eax, 0
	mov	DWORD PTR $T14[ebp], eax
	cmp	DWORD PTR $T14[ebp], 100		; 00000064H
	jae	SHORT $LN36@FontToBFT
	jmp	SHORT $LN37@FontToBFT
$LN36@FontToBFT:
	call	___report_rangecheckfailure
$LN37@FontToBFT:
	mov	ecx, DWORD PTR $T14[ebp]
	mov	BYTE PTR _buffer$[ebp+ecx], 0

; 414  : 	buffer[1]=0;

	mov	DWORD PTR $T12[ebp], 1
	cmp	DWORD PTR $T12[ebp], 100		; 00000064H
	jae	SHORT $LN38@FontToBFT
	jmp	SHORT $LN39@FontToBFT
$LN38@FontToBFT:
	call	___report_rangecheckfailure
$LN39@FontToBFT:
	mov	edx, DWORD PTR $T12[ebp]
	mov	BYTE PTR _buffer$[ebp+edx], 0

; 415  : 	hdc=GetDC(mywin);

	mov	eax, DWORD PTR _mywin
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hdc$[ebp], eax

; 416  : 	// Clear surface
; 417  : 	for(y=0;y<SCREEN_SIZE;y++)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN17@FontToBFT
$LN16@FontToBFT:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN17@FontToBFT:
	cmp	DWORD PTR _y$[ebp], 500			; 000001f4H
	jge	SHORT $LN15@FontToBFT

; 418  : 		for(x=0;x<SCREEN_SIZE;x++)

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN14@FontToBFT
$LN13@FontToBFT:
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 1
	mov	DWORD PTR _x$[ebp], edx
$LN14@FontToBFT:
	cmp	DWORD PTR _x$[ebp], 500			; 000001f4H
	jge	SHORT $LN12@FontToBFT

; 419  : 			SetPixel(hdc,x,y,0);

	push	0
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetPixel@16
	jmp	SHORT $LN13@FontToBFT
$LN12@FontToBFT:
	jmp	SHORT $LN16@FontToBFT
$LN15@FontToBFT:

; 420  : 
; 421  : 	for(i=0;i<numchars;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@FontToBFT
$LN10@FontToBFT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@FontToBFT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numchars$[ebp]
	jge	$LN9@FontToBFT

; 422  : 	{
; 423  : 		xoff=10;

	mov	DWORD PTR _xoff$[ebp], 10		; 0000000aH

; 424  : 		yoff=10;

	mov	DWORD PTR _yoff$[ebp], 10		; 0000000aH

; 425  : 
; 426  : 		SelectObject(hdc,font->Font_);

	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8

; 427  : 		SetBkMode(hdc,TRANSPARENT);

	push	1
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8

; 428  : 		SetTextColor(hdc,0xffffff);

	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextColor@8

; 429  : 
; 430  : 		buffer[0]=static_cast<char>(firstchar + i);

	mov	ecx, DWORD PTR _firstchar$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR _buffer$[ebp+edx], cl

; 431  : 
; 432  : 		if(!TextOut(hdc,xoff,yoff,buffer,1))

	push	1
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yoff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xoff$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__TextOutA@20
	test	eax, eax
	jne	SHORT $LN8@FontToBFT

; 433  : 			MonoPrint("Failed to display character (%1d)\n",buffer[0]);

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _buffer$[ebp+ecx]
	push	edx
	push	OFFSET ??_C@_0CD@DOIEOFHK@Failed?5to?5display?5character?5?$CI?$CF1d@
	call	_MonoPrint
	add	esp, 8
$LN8@FontToBFT:

; 434  : 
; 435  : 		xoff+=MyChars[i].lead;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _MyChars$[ebp]
	movsx	edx, BYTE PTR [ecx+eax*4+2]
	add	edx, DWORD PTR _xoff$[ebp]
	mov	DWORD PTR _xoff$[ebp], edx

; 436  : 		charw=MyChars[i].w;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _MyChars$[ebp]
	movzx	edx, BYTE PTR [ecx+eax*4+1]
	mov	DWORD PTR _charw$[ebp], edx

; 437  : 		charh=font->Metrics_.tmHeight;

	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _charh$[ebp], ecx

; 438  : 
; 439  : 		// Copy pixels that have been set
; 440  : 		// Use GetPixel(x,y) instead
; 441  : 		for(y=0;y<charh;y++)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN7@FontToBFT
$LN6@FontToBFT:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN7@FontToBFT:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _charh$[ebp]
	jge	$LN5@FontToBFT

; 442  : 			for(x=0;x<charw;x++)

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN4@FontToBFT
$LN3@FontToBFT:
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$[ebp], ecx
$LN4@FontToBFT:
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _charw$[ebp]
	jge	$LN2@FontToBFT

; 443  : 				if(GetPixel(hdc,xoff+x,yoff+y))

	mov	eax, DWORD PTR _yoff$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xoff$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetPixel@12
	test	eax, eax
	je	$LN1@FontToBFT

; 444  : 				{
; 445  : 					CharPtr[y * bytesperline + x/8]|=1 << (x % 8);

	mov	esi, DWORD PTR _y$[ebp]
	imul	esi, DWORD PTR _bytesperline$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	esi, eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN42@FontToBFT
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN42@FontToBFT:
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _CharPtr$[ebp]
	movzx	ecx, BYTE PTR [ecx+esi]
	or	ecx, eax
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _bytesperline$[ebp]
	add	eax, DWORD PTR _CharPtr$[ebp]
	mov	BYTE PTR [eax+edx], cl

; 446  : 					SetPixel(hdc,xoff+x,yoff+y,0);

	push	0
	mov	eax, DWORD PTR _yoff$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xoff$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetPixel@16
$LN1@FontToBFT:

; 447  : 				}
; 448  : 
; 449  : 		CharPtr+=bytesperline * font->Metrics_.tmHeight;

	jmp	$LN3@FontToBFT
$LN2@FontToBFT:
	jmp	$LN6@FontToBFT
$LN5@FontToBFT:
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR _bytesperline$[ebp]
	imul	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _CharPtr$[ebp]
	mov	DWORD PTR _CharPtr$[ebp], ecx

; 450  : 	}

	jmp	$LN10@FontToBFT
$LN9@FontToBFT:

; 451  : 	ReleaseDC(mywin,hdc);

	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	mov	eax, DWORD PTR _mywin
	push	eax
	call	DWORD PTR __imp__ReleaseDC@8

; 452  : 
; 453  : 	return(newfont);

	mov	eax, DWORD PTR _newfont$[ebp]
$LN33@FontToBFT:

; 454  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z$0:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FontToBFT@@YAPAVC_Fontmgr@@JPAUtagLOGFONTA@@@Z ENDP	; FontToBFT
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_hdc$ = 8						; size = 4
_facename$ = 12						; size = 4
?GetAllFonts@@YAXPAUHDC__@@PAD@Z PROC			; GetAllFonts

; 301  : {

	push	ebp
	mov	ebp, esp

; 302  : 	EnumFonts(hdc,facename,testme,0);

	push	0
	push	OFFSET ?testme@@YGHPBUtagLOGFONTA@@PBUtagTEXTMETRICA@@KJ@Z ; testme
	mov	eax, DWORD PTR _facename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__EnumFontsA@16

; 303  : }

	pop	ebp
	ret	0
?GetAllFonts@@YAXPAUHDC__@@PAD@Z ENDP			; GetAllFonts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_logfnt$ = 8						; size = 4
_metrics$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?testme@@YGHPBUtagLOGFONTA@@PBUtagTEXTMETRICA@@KJ@Z PROC ; testme

; 287  : {

	push	ebp
	mov	ebp, esp

; 288  : 	if(ItemID < 200)

	cmp	DWORD PTR ?ItemID@@3JA, 200		; ItemID, 000000c8H
	jge	SHORT $LN2@testme

; 289  : 	{
; 290  : 		if(metrics->tmPitchAndFamily & TMPF_TRUETYPE)

	mov	eax, DWORD PTR _metrics$[ebp]
	movzx	ecx, BYTE PTR [eax+51]
	and	ecx, 4
	je	SHORT $LN2@testme

; 291  : 		{
; 292  : 			memcpy(&fontlog[ItemID],logfnt,sizeof(LOGFONT));

	push	60					; 0000003cH
	mov	edx, DWORD PTR _logfnt$[ebp]
	push	edx
	mov	eax, DWORD PTR ?ItemID@@3JA		; ItemID
	imul	eax, 60					; 0000003cH
	add	eax, OFFSET ?fontlog@@3PAUtagLOGFONTA@@A ; fontlog
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 293  : 			strcpy(FontList[ItemID],logfnt->lfFaceName);

	mov	ecx, DWORD PTR _logfnt$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR ?ItemID@@3JA		; ItemID
	shl	edx, 5
	add	edx, OFFSET ?FontList@@3PAY0CA@DA	; FontList
	push	edx
	call	_strcpy
	add	esp, 8

; 294  : 			ItemID++;

	mov	eax, DWORD PTR ?ItemID@@3JA		; ItemID
	add	eax, 1
	mov	DWORD PTR ?ItemID@@3JA, eax		; ItemID
$LN2@testme:

; 295  : 		}
; 296  : 	}
; 297  : 	return(1);

	mov	eax, 1

; 298  : }

	pop	ebp
	ret	16					; 00000010H
?testme@@YGHPBUtagLOGFONTA@@PBUtagTEXTMETRICA@@KJ@Z ENDP ; testme
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_win$ = -12						; size = 4
_ebox$ = -8						; size = 4
_lbox$ = -4						; size = 4
_log$ = 8						; size = 4
?GetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z PROC		; GetWindowLOGFONT

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 196  : 	C_Window *win;
; 197  : 	C_EditBox *ebox;
; 198  : 	C_ListBox *lbox;
; 199  : 
; 200  : 	if(!log)

	cmp	DWORD PTR _log$[ebp], 0
	jne	SHORT $LN17@GetWindowL

; 201  : 		return;

	jmp	$LN18@GetWindowL
$LN17@GetWindowL:

; 202  : 
; 203  : 	win=gMainHandler->FindWindow(LOGFONT_WIN);

	push	988776621				; 3aef88adH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 204  : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN18@GetWindowL

; 205  : 	{
; 206  : 		ebox=(C_EditBox*)win->FindControl(EB_HEIGHT);

	push	988776622				; 3aef88aeH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 207  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN15@GetWindowL

; 208  : 		{
; 209  : 			log->lfHeight=ebox->GetInteger();

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetInteger@C_EditBox@@QAEJXZ		; C_EditBox::GetInteger
	mov	ecx, DWORD PTR _log$[ebp]
	mov	DWORD PTR [ecx], eax
$LN15@GetWindowL:

; 210  : 		}
; 211  : 		ebox=(C_EditBox*)win->FindControl(EB_WIDTH);

	push	988776623				; 3aef88afH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 212  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN14@GetWindowL

; 213  : 		{
; 214  : 			log->lfWidth=ebox->GetInteger();

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetInteger@C_EditBox@@QAEJXZ		; C_EditBox::GetInteger
	mov	edx, DWORD PTR _log$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN14@GetWindowL:

; 215  : 		}
; 216  : 		ebox=(C_EditBox*)win->FindControl(EB_ESCAPEMENT);

	push	988776624				; 3aef88b0H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 217  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN13@GetWindowL

; 218  : 		{
; 219  : 			log->lfEscapement=ebox->GetInteger();

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetInteger@C_EditBox@@QAEJXZ		; C_EditBox::GetInteger
	mov	ecx, DWORD PTR _log$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN13@GetWindowL:

; 220  : 		}
; 221  : 		ebox=(C_EditBox*)win->FindControl(EB_ORIENTATION);

	push	988776625				; 3aef88b1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 222  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN12@GetWindowL

; 223  : 		{
; 224  : 			log->lfOrientation=ebox->GetInteger();

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetInteger@C_EditBox@@QAEJXZ		; C_EditBox::GetInteger
	mov	edx, DWORD PTR _log$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN12@GetWindowL:

; 225  : 		}
; 226  : 		ebox=(C_EditBox*)win->FindControl(EB_WEIGHT);

	push	988776626				; 3aef88b2H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 227  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN11@GetWindowL

; 228  : 		{
; 229  : 			log->lfWeight=ebox->GetInteger();

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetInteger@C_EditBox@@QAEJXZ		; C_EditBox::GetInteger
	mov	ecx, DWORD PTR _log$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN11@GetWindowL:

; 230  : 		}
; 231  : 		lbox=(C_ListBox*)win->FindControl(LB_ITALIC);

	push	988776627				; 3aef88b3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 232  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN10@GetWindowL

; 233  : 		{
; 234  : 			log->lfItalic=static_cast<BYTE>(LF_TRUE_FALSE[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	edx, DWORD PTR _log$[ebp]
	mov	al, BYTE PTR _LF_TRUE_FALSE[eax*4]
	mov	BYTE PTR [edx+20], al
$LN10@GetWindowL:

; 235  : 		}
; 236  : 		lbox=(C_ListBox*)win->FindControl(LB_UNDERLINE);

	push	988776628				; 3aef88b4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 237  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN9@GetWindowL

; 238  : 		{
; 239  : 			log->lfUnderline=static_cast<BYTE>(LF_TRUE_FALSE[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	mov	dl, BYTE PTR _LF_TRUE_FALSE[eax*4]
	mov	BYTE PTR [ecx+21], dl
$LN9@GetWindowL:

; 240  : 		}
; 241  : 		lbox=(C_ListBox*)win->FindControl(LB_STRIKEOUT);

	push	988776629				; 3aef88b5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 242  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN8@GetWindowL

; 243  : 		{
; 244  : 			log->lfStrikeOut=static_cast<BYTE>(LF_TRUE_FALSE[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	mov	dl, BYTE PTR _LF_TRUE_FALSE[eax*4]
	mov	BYTE PTR [ecx+22], dl
$LN8@GetWindowL:

; 245  : 		}
; 246  : 		lbox=(C_ListBox*)win->FindControl(LB_CHARSET);

	push	988776630				; 3aef88b6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 247  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN7@GetWindowL

; 248  : 		{
; 249  : 			log->lfCharSet=static_cast<BYTE>(LF_CHARSET[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	mov	dl, BYTE PTR _LF_CHARSET[eax*4]
	mov	BYTE PTR [ecx+23], dl
$LN7@GetWindowL:

; 250  : 		}
; 251  : 		lbox=(C_ListBox*)win->FindControl(LB_OUTPRECISION);

	push	988776631				; 3aef88b7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 252  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN6@GetWindowL

; 253  : 		{
; 254  : 			log->lfOutPrecision=static_cast<BYTE>(LF_OUT_PRECISION[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	mov	dl, BYTE PTR _LF_OUT_PRECISION[eax*4]
	mov	BYTE PTR [ecx+24], dl
$LN6@GetWindowL:

; 255  : 		}
; 256  : 		lbox=(C_ListBox*)win->FindControl(LB_CLIPPRECISION);

	push	988776632				; 3aef88b8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 257  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN5@GetWindowL

; 258  : 		{
; 259  : 			log->lfClipPrecision=static_cast<BYTE>(LF_CLIP_PRECISION[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	mov	dl, BYTE PTR _LF_CLIP_PRECISION[eax*4]
	mov	BYTE PTR [ecx+25], dl
$LN5@GetWindowL:

; 260  : 		}
; 261  : 		lbox=(C_ListBox*)win->FindControl(LB_QUALITY);

	push	988776633				; 3aef88b9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 262  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN4@GetWindowL

; 263  : 		{
; 264  : 			log->lfQuality=static_cast<BYTE>(LF_QUALITY[lbox->GetTextID()]);

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	mov	dl, BYTE PTR _LF_QUALITY[eax*4]
	mov	BYTE PTR [ecx+26], dl
$LN4@GetWindowL:

; 265  : 		}
; 266  : 		log->lfPitchAndFamily=0;

	mov	eax, DWORD PTR _log$[ebp]
	mov	BYTE PTR [eax+27], 0

; 267  : 		lbox=(C_ListBox*)win->FindControl(LB_PITCH);

	push	988776634				; 3aef88baH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 268  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN3@GetWindowL

; 269  : 		{
; 270  : 			log->lfPitchAndFamily |= LF_PITCH[lbox->GetTextID()];

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	movzx	edx, BYTE PTR [ecx+27]
	or	edx, DWORD PTR _LF_PITCH[eax*4]
	mov	eax, DWORD PTR _log$[ebp]
	mov	BYTE PTR [eax+27], dl
$LN3@GetWindowL:

; 271  : 		}
; 272  : 		lbox=(C_ListBox*)win->FindControl(LB_FAMILY);

	push	988776635				; 3aef88bbH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 273  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN2@GetWindowL

; 274  : 		{
; 275  : 			log->lfPitchAndFamily |= LF_FAMILY[lbox->GetTextID()];

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	ecx, DWORD PTR _log$[ebp]
	movzx	edx, BYTE PTR [ecx+27]
	or	edx, DWORD PTR _LF_FAMILY[eax*4]
	mov	eax, DWORD PTR _log$[ebp]
	mov	BYTE PTR [eax+27], dl
$LN2@GetWindowL:

; 276  : 		}
; 277  : 		ebox=(C_EditBox*)win->FindControl(EB_FACENAME);

	push	988776636				; 3aef88bcH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 278  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN18@GetWindowL

; 279  : 		{
; 280  : 			strcpy(log->lfFaceName,ebox->GetText());

	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?GetText@C_EditBox@@QAEPADXZ		; C_EditBox::GetText
	push	eax
	mov	ecx, DWORD PTR _log$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_strcpy
	add	esp, 8
$LN18@GetWindowL:

; 281  : 		}
; 282  : 	}
; 283  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z ENDP		; GetWindowLOGFONT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_ebox$ = -12						; size = 4
_win$ = -8						; size = 4
_lbox$ = -4						; size = 4
_log$ = 8						; size = 4
?SetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z PROC		; SetWindowLOGFONT

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 104  : 	C_Window *win;
; 105  : 	C_EditBox *ebox;
; 106  : 	C_ListBox *lbox;
; 107  : 
; 108  : 	if(!log)

	cmp	DWORD PTR _log$[ebp], 0
	jne	SHORT $LN17@SetWindowL

; 109  : 		return;

	jmp	$LN18@SetWindowL
$LN17@SetWindowL:

; 110  : 
; 111  : 	win=gMainHandler->FindWindow(LOGFONT_WIN);

	push	988776621				; 3aef88adH
	mov	ecx, DWORD PTR ?gMainHandler@@3PAVC_Handler@@A ; gMainHandler
	call	?FindWindowA@C_Handler@@QAEPAVC_Window@@J@Z ; C_Handler::FindWindowA
	mov	DWORD PTR _win$[ebp], eax

; 112  : 	if(win)

	cmp	DWORD PTR _win$[ebp], 0
	je	$LN18@SetWindowL

; 113  : 	{
; 114  : 		ebox=(C_EditBox*)win->FindControl(EB_HEIGHT);

	push	988776622				; 3aef88aeH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 115  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN15@SetWindowL

; 116  : 		{
; 117  : 			ebox->SetInteger(log->lfHeight);

	mov	eax, DWORD PTR _log$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN15@SetWindowL:

; 118  : 		}
; 119  : 		ebox=(C_EditBox*)win->FindControl(EB_WIDTH);

	push	988776623				; 3aef88afH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 120  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN14@SetWindowL

; 121  : 		{
; 122  : 			ebox->SetInteger(log->lfWidth);

	mov	edx, DWORD PTR _log$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN14@SetWindowL:

; 123  : 		}
; 124  : 		ebox=(C_EditBox*)win->FindControl(EB_ESCAPEMENT);

	push	988776624				; 3aef88b0H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 125  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN13@SetWindowL

; 126  : 		{
; 127  : 			ebox->SetInteger(log->lfEscapement);

	mov	ecx, DWORD PTR _log$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN13@SetWindowL:

; 128  : 		}
; 129  : 		ebox=(C_EditBox*)win->FindControl(EB_ORIENTATION);

	push	988776625				; 3aef88b1H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 130  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN12@SetWindowL

; 131  : 		{
; 132  : 			ebox->SetInteger(log->lfOrientation);

	mov	eax, DWORD PTR _log$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN12@SetWindowL:

; 133  : 		}
; 134  : 		ebox=(C_EditBox*)win->FindControl(EB_WEIGHT);

	push	988776626				; 3aef88b2H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 135  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN11@SetWindowL

; 136  : 		{
; 137  : 			ebox->SetInteger(log->lfWeight);

	mov	edx, DWORD PTR _log$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetInteger@C_EditBox@@QAEXJ@Z		; C_EditBox::SetInteger
$LN11@SetWindowL:

; 138  : 		}
; 139  : 		lbox=(C_ListBox*)win->FindControl(LB_ITALIC);

	push	988776627				; 3aef88b3H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 140  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN10@SetWindowL

; 141  : 		{
; 142  : 			lbox->SetValue(SearchList(log->lfItalic,LF_TRUE_FALSE));

	push	OFFSET _LF_TRUE_FALSE
	mov	ecx, DWORD PTR _log$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	push	edx
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN10@SetWindowL:

; 143  : 		}
; 144  : 		lbox=(C_ListBox*)win->FindControl(LB_UNDERLINE);

	push	988776628				; 3aef88b4H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 145  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN9@SetWindowL

; 146  : 		{
; 147  : 			lbox->SetValue(SearchList(log->lfUnderline,LF_TRUE_FALSE));

	push	OFFSET _LF_TRUE_FALSE
	mov	eax, DWORD PTR _log$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	push	ecx
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN9@SetWindowL:

; 148  : 		}
; 149  : 		lbox=(C_ListBox*)win->FindControl(LB_STRIKEOUT);

	push	988776629				; 3aef88b5H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 150  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN8@SetWindowL

; 151  : 		{
; 152  : 			lbox->SetValue(SearchList(log->lfStrikeOut,LF_TRUE_FALSE));

	push	OFFSET _LF_TRUE_FALSE
	mov	edx, DWORD PTR _log$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	push	eax
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN8@SetWindowL:

; 153  : 		}
; 154  : 		lbox=(C_ListBox*)win->FindControl(LB_CHARSET);

	push	988776630				; 3aef88b6H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 155  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN7@SetWindowL

; 156  : 		{
; 157  : 			lbox->SetValue(SearchList(log->lfCharSet,LF_CHARSET));

	push	OFFSET _LF_CHARSET
	mov	ecx, DWORD PTR _log$[ebp]
	movzx	edx, BYTE PTR [ecx+23]
	push	edx
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN7@SetWindowL:

; 158  : 		}
; 159  : 		lbox=(C_ListBox*)win->FindControl(LB_OUTPRECISION);

	push	988776631				; 3aef88b7H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 160  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN6@SetWindowL

; 161  : 		{
; 162  : 			lbox->SetValue(SearchList(log->lfOutPrecision,LF_OUT_PRECISION));

	push	OFFSET _LF_OUT_PRECISION
	mov	eax, DWORD PTR _log$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	push	ecx
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN6@SetWindowL:

; 163  : 		}
; 164  : 		lbox=(C_ListBox*)win->FindControl(LB_CLIPPRECISION);

	push	988776632				; 3aef88b8H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 165  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN5@SetWindowL

; 166  : 		{
; 167  : 			lbox->SetValue(SearchList(log->lfClipPrecision,LF_OUT_PRECISION));

	push	OFFSET _LF_OUT_PRECISION
	mov	edx, DWORD PTR _log$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	push	eax
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN5@SetWindowL:

; 168  : 		}
; 169  : 		lbox=(C_ListBox*)win->FindControl(LB_QUALITY);

	push	988776633				; 3aef88b9H
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 170  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN4@SetWindowL

; 171  : 		{
; 172  : 			lbox->SetValue(SearchList(log->lfQuality,LF_QUALITY));

	push	OFFSET _LF_QUALITY
	mov	ecx, DWORD PTR _log$[ebp]
	movzx	edx, BYTE PTR [ecx+26]
	push	edx
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN4@SetWindowL:

; 173  : 		}
; 174  : 		lbox=(C_ListBox*)win->FindControl(LB_PITCH);

	push	988776634				; 3aef88baH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 175  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN3@SetWindowL

; 176  : 		{
; 177  : 			lbox->SetValue(SearchList(log->lfPitchAndFamily & 3,LF_PITCH));

	push	OFFSET _LF_PITCH
	mov	eax, DWORD PTR _log$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	and	ecx, 3
	push	ecx
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN3@SetWindowL:

; 178  : 		}
; 179  : 		lbox=(C_ListBox*)win->FindControl(LB_FAMILY);

	push	988776635				; 3aef88bbH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _lbox$[ebp], eax

; 180  : 		if(lbox)

	cmp	DWORD PTR _lbox$[ebp], 0
	je	SHORT $LN2@SetWindowL

; 181  : 		{
; 182  : 			lbox->SetValue(SearchList(log->lfPitchAndFamily & 0xfc,LF_FAMILY));

	push	OFFSET _LF_FAMILY
	mov	edx, DWORD PTR _log$[ebp]
	movzx	eax, BYTE PTR [edx+27]
	and	eax, 252				; 000000fcH
	push	eax
	call	?SearchList@@YAJJQAJ@Z			; SearchList
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?SetValue@C_ListBox@@QAEXJ@Z		; C_ListBox::SetValue
$LN2@SetWindowL:

; 183  : 		}
; 184  : 		ebox=(C_EditBox*)win->FindControl(EB_FACENAME);

	push	988776636				; 3aef88bcH
	mov	ecx, DWORD PTR _win$[ebp]
	call	?FindControl@C_Window@@QAEPAVC_Base@@J@Z ; C_Window::FindControl
	mov	DWORD PTR _ebox$[ebp], eax

; 185  : 		if(ebox)

	cmp	DWORD PTR _ebox$[ebp], 0
	je	SHORT $LN1@SetWindowL

; 186  : 		{
; 187  : 			ebox->SetText(log->lfFaceName);

	mov	ecx, DWORD PTR _log$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _ebox$[ebp]
	call	?SetText@C_EditBox@@QAEXPAD@Z		; C_EditBox::SetText
$LN1@SetWindowL:

; 188  : 		}
; 189  : 		win->update_ |= C_DRAW_REFRESHALL;

	mov	edx, DWORD PTR _win$[ebp]
	mov	eax, DWORD PTR [edx+104]
	or	eax, 2
	mov	ecx, DWORD PTR _win$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 190  : 		win->RefreshWindow();

	mov	ecx, DWORD PTR _win$[ebp]
	call	?RefreshWindow@C_Window@@QAEXXZ		; C_Window::RefreshWindow
$LN18@SetWindowL:

; 191  : 	}
; 192  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetWindowLOGFONT@@YAXPAUtagLOGFONTA@@@Z ENDP		; SetWindowLOGFONT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
_val$ = 8						; size = 4
_list$ = 12						; size = 4
?SearchList@@YAJJQAJ@Z PROC				; SearchList

; 93   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 94   : 	int i;
; 95   : 
; 96   : 	for(i=1;list[i] != -5551212;i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SearchList
$LN3@SearchList:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SearchList:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [edx+ecx*4], -5551212		; ffab4b94H
	je	SHORT $LN2@SearchList

; 97   : 		if(list[i] == val)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _val$[ebp]
	jne	SHORT $LN1@SearchList

; 98   : 			return(i);

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@SearchList
$LN1@SearchList:

; 99   : 	return(0);

	jmp	SHORT $LN3@SearchList
$LN2@SearchList:
	xor	eax, eax
$LN5@SearchList:

; 100  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SearchList@@YAJJQAJ@Z ENDP				; SearchList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\tools\ui_tools\savefont.cpp
_TEXT	SEGMENT
_lbox$ = -4						; size = 4
_ID$ = 8						; size = 4
_hittype$ = 12						; size = 2
_control$ = 16						; size = 4
?ChooseFontCB@@YAXJFPAVC_Base@@@Z PROC			; ChooseFontCB

; 954  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 955  : 	C_ListBox *lbox;
; 956  : 	if(hittype != C_TYPE_SELECT)

	movsx	eax, WORD PTR _hittype$[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN3@ChooseFont

; 957  : 		return;

	jmp	SHORT $LN4@ChooseFont
$LN3@ChooseFont:

; 958  : 
; 959  : 	if(control)

	cmp	DWORD PTR _control$[ebp], 0
	je	SHORT $LN2@ChooseFont

; 960  : 	{
; 961  : 		lbox=(C_ListBox*)control;

	mov	ecx, DWORD PTR _control$[ebp]
	mov	DWORD PTR _lbox$[ebp], ecx

; 962  : 		CurrentFontID=lbox->GetTextID();

	mov	ecx, DWORD PTR _lbox$[ebp]
	call	?GetTextID@C_ListBox@@QAEJXZ		; C_ListBox::GetTextID
	mov	DWORD PTR ?CurrentFontID@@3JA, eax	; CurrentFontID

; 963  : 	}
; 964  : 	else

	jmp	SHORT $LN1@ChooseFont
$LN2@ChooseFont:

; 965  : 		CurrentFontID=ID;

	mov	edx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR ?CurrentFontID@@3JA, edx	; CurrentFontID
$LN1@ChooseFont:

; 966  : 	MakeFontList(CurrentFontID);

	mov	eax, DWORD PTR ?CurrentFontID@@3JA	; CurrentFontID
	push	eax
	call	?MakeFontList@@YAXJ@Z			; MakeFontList
	add	esp, 4
$LN4@ChooseFont:

; 967  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChooseFontCB@@YAXJFPAVC_Base@@@Z ENDP			; ChooseFontCB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\ceditbox.h
;	COMDAT ?GetInteger@C_EditBox@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInteger@C_EditBox@@QAEJXZ PROC			; C_EditBox::GetInteger, COMDAT
; _this$ = ecx

; 71   : 		long GetInteger() { return(Integer_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+108]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInteger@C_EditBox@@QAEJXZ ENDP			; C_EditBox::GetInteger
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\clistbox.h
;	COMDAT ?GetTextID@C_ListBox@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTextID@C_ListBox@@QAEJXZ PROC			; C_ListBox::GetTextID, COMDAT
; _this$ = ecx

; 109  : 		long GetTextID() { return(LabelVal_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextID@C_ListBox@@QAEJXZ ENDP			; C_ListBox::GetTextID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetClient@C_Base@@QAEXF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_client$ = 8						; size = 2
?SetClient@C_Base@@QAEXF@Z PROC				; C_Base::SetClient, COMDAT
; _this$ = ecx

; 98   : 		void SetClient(short client)							{ Client_=client; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _client$[ebp]
	mov	WORD PTR [eax+40], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetClient@C_Base@@QAEXF@Z ENDP				; C_Base::SetClient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cbase.h
;	COMDAT ?SetGroup@C_Base@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetGroup@C_Base@@QAEXJ@Z PROC				; C_Base::SetGroup, COMDAT
; _this$ = ecx

; 96   : 		void SetGroup(long id)									{ Section_[_GROUP_]=id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGroup@C_Base@@QAEXJ@Z ENDP				; C_Base::SetGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfonts.h
;	COMDAT ?GetHash@C_Font@@QAEPAVC_Hash@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHash@C_Font@@QAEPAVC_Hash@@XZ PROC			; C_Font::GetHash, COMDAT
; _this$ = ecx

; 65   : 		C_Hash *GetHash() { return(Fonts_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHash@C_Font@@QAEPAVC_Hash@@XZ ENDP			; C_Font::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetKerning@C_Fontmgr@@QAEXJPAVKerningStr@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_count$ = 8						; size = 4
_kernlist$ = 12						; size = 4
?SetKerning@C_Fontmgr@@QAEXJPAVKerningStr@@@Z PROC	; C_Fontmgr::SetKerning, COMDAT
; _this$ = ecx

; 120  : 		void SetKerning(long count,KerningStr *kernlist)	{ kNumKerns_=count; if(count) kernList_=kernlist; else kernList_=NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+60], ecx
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN2@SetKerning
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _kernlist$[ebp]
	mov	DWORD PTR [edx+64], eax
	jmp	SHORT $LN3@SetKerning
$LN2@SetKerning:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 0
$LN3@SetKerning:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetKerning@C_Fontmgr@@QAEXJPAVKerningStr@@@Z ENDP	; C_Fontmgr::SetKerning
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetData@C_Fontmgr@@QAEXJPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_data$ = 12						; size = 4
?SetData@C_Fontmgr@@QAEXJPAD@Z PROC			; C_Fontmgr::SetData, COMDAT
; _this$ = ecx

; 119  : 		void SetData(long size,char *data)					{ dSize_=size; if(size) fontData_=data; else fontData_=NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+52], ecx
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@SetData
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+56], eax
	jmp	SHORT $LN3@SetData
$LN2@SetData:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0
$LN3@SetData:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetData@C_Fontmgr@@QAEXJPAD@Z ENDP			; C_Fontmgr::SetData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetTable@C_Fontmgr@@QAEXJPAVCharStr@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_count$ = 8						; size = 4
_table$ = 12						; size = 4
?SetTable@C_Fontmgr@@QAEXJPAVCharStr@@@Z PROC		; C_Fontmgr::SetTable, COMDAT
; _this$ = ecx

; 118  : 		void SetTable(long count,CharStr *table)			{ fNumChars_ = count; if(count) fontTable_=table; else fontTable_=NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+44], ecx
	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN2@SetTable
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+48], eax
	jmp	SHORT $LN3@SetTable
$LN2@SetTable:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
$LN3@SetTable:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTable@C_Fontmgr@@QAEXJPAVCharStr@@@Z ENDP		; C_Fontmgr::SetTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetBPL@C_Fontmgr@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_BPL$ = 8						; size = 4
?SetBPL@C_Fontmgr@@QAEXJ@Z PROC				; C_Fontmgr::SetBPL, COMDAT
; _this$ = ecx

; 117  : 		void SetBPL(long BPL)								{ bytesperline_ = BPL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _BPL$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBPL@C_Fontmgr@@QAEXJ@Z ENDP				; C_Fontmgr::SetBPL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetRange@C_Fontmgr@@QAEXJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?SetRange@C_Fontmgr@@QAEXJJ@Z PROC			; C_Fontmgr::SetRange, COMDAT
; _this$ = ecx

; 116  : 		void SetRange(long first,long last)					{ first_ = static_cast<short>(first); last_ = static_cast<short>(last); } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _first$[ebp]
	mov	WORD PTR [eax+68], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _last$[ebp]
	mov	WORD PTR [edx+70], ax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRange@C_Fontmgr@@QAEXJJ@Z ENDP			; C_Fontmgr::SetRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetHeight@C_Fontmgr@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_height$ = 8						; size = 4
?SetHeight@C_Fontmgr@@QAEXJ@Z PROC			; C_Fontmgr::SetHeight, COMDAT
; _this$ = ecx

; 115  : 		void SetHeight(long height)							{ height_ = height; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHeight@C_Fontmgr@@QAEXJ@Z ENDP			; C_Fontmgr::SetHeight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetName@C_Fontmgr@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?SetName@C_Fontmgr@@QAEXPAD@Z PROC			; C_Fontmgr::SetName, COMDAT
; _this$ = ecx

; 114  : 		void SetName(char *name)							{ if(name) strcpy(name_,name); else memset(name,0,32); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN2@SetName
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN3@SetName
$LN2@SetName:
	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN3@SetName:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetName@C_Fontmgr@@QAEXPAD@Z ENDP			; C_Fontmgr::SetName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?SetID@C_Fontmgr@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ID$ = 8						; size = 4
?SetID@C_Fontmgr@@QAEXJ@Z PROC				; C_Fontmgr::SetID, COMDAT
; _this$ = ecx

; 113  : 		void SetID(long ID)									{ ID_ = ID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@C_Fontmgr@@QAEXJ@Z ENDP				; C_Fontmgr::SetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?GetName@C_Fontmgr@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetName@C_Fontmgr@@QAEPADXZ PROC			; C_Fontmgr::GetName, COMDAT
; _this$ = ecx

; 89   : 		char *GetName() { return(name_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetName@C_Fontmgr@@QAEPADXZ ENDP			; C_Fontmgr::GetName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?Last@C_Fontmgr@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Last@C_Fontmgr@@QAEFXZ PROC				; C_Fontmgr::Last, COMDAT
; _this$ = ecx

; 81   : 		short Last()  { return(last_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+70]
	mov	esp, ebp
	pop	ebp
	ret	0
?Last@C_Fontmgr@@QAEFXZ ENDP				; C_Fontmgr::Last
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?First@C_Fontmgr@@QAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?First@C_Fontmgr@@QAEFXZ PROC				; C_Fontmgr::First, COMDAT
; _this$ = ecx

; 80   : 		short First() { return(first_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?First@C_Fontmgr@@QAEFXZ ENDP				; C_Fontmgr::First
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui95\cfontres.h
;	COMDAT ?GetID@C_Fontmgr@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@C_Fontmgr@@QAEJXZ PROC				; C_Fontmgr::GetID, COMDAT
; _this$ = ecx

; 78   : 		long GetID() { return(ID_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@C_Fontmgr@@QAEJXZ ENDP				; C_Fontmgr::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
