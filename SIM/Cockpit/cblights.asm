; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Cockpit\cblights.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?shootCue@@3_NA					; shootCue
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
_BSS	SEGMENT
?shootCue@@3_NA DB 01H DUP (?)				; shootCue
_BSS	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetTypeAC@AirframeClass@@QAEHXZ		; AirframeClass::GetTypeAC
PUBLIC	?EpuIsAir@AirframeClass@@QAEHXZ			; AirframeClass::EpuIsAir
PUBLIC	?EpuIsHydrazine@AirframeClass@@QAEHXZ		; AirframeClass::EpuIsHydrazine
PUBLIC	?HydraulicA@AirframeClass@@QAEHXZ		; AirframeClass::HydraulicA
PUBLIC	?HydraulicB@AirframeClass@@QAEHXZ		; AirframeClass::HydraulicB
PUBLIC	?HydraulicOK@AirframeClass@@QAEHXZ		; AirframeClass::HydraulicOK
PUBLIC	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
PUBLIC	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
PUBLIC	?Fuel@AirframeClass@@QAEMXZ			; AirframeClass::Fuel
PUBLIC	?FuelFlow@AirframeClass@@QAEMXZ			; AirframeClass::FuelFlow
PUBLIC	?NumGear@AirframeClass@@QBEHXZ			; AirframeClass::NumGear
PUBLIC	?GetAeroData@AirframeClass@@QBEMH@Z		; AirframeClass::GetAeroData
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	?LowAltPriority@VehRwrClass@@QAEHXZ		; VehRwrClass::LowAltPriority
PUBLIC	?HasActivity@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::HasActivity
PUBLIC	?LaunchIndication@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LaunchIndication
PUBLIC	?IsPriority@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::IsPriority
PUBLIC	?TargetSep@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::TargetSep
PUBLIC	?ShowNaval@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::ShowNaval
PUBLIC	?CBEECMPwrLight@@YAXPAX@Z			; CBEECMPwrLight
PUBLIC	?CBEECMFailLight@@YAXPAX@Z			; CBEECMFailLight
PUBLIC	?CBEAOAIndLight@@YAXPAX@Z			; CBEAOAIndLight
PUBLIC	?CBEAOAFastLight@@YAXPAX@Z			; CBEAOAFastLight
PUBLIC	?CBERefuelLight@@YAXPAX@Z			; CBERefuelLight
PUBLIC	?CBEDiscLight@@YAXPAX@Z				; CBEDiscLight
PUBLIC	?CheckLandingGearHandle@@YAXPAX@Z		; CheckLandingGearHandle
PUBLIC	?CBECaution1@@YAXPAX@Z				; CBECaution1
PUBLIC	?CBECaution2@@YAXPAX@Z				; CBECaution2
PUBLIC	?CBECaution3@@YAXPAX@Z				; CBECaution3
PUBLIC	?CBECaution4@@YAXPAX@Z				; CBECaution4
PUBLIC	?CBECaution5@@YAXPAX@Z				; CBECaution5
PUBLIC	?CBECaution6@@YAXPAX@Z				; CBECaution6
PUBLIC	?CBEThreatWarn7@@YAXPAX@Z			; CBEThreatWarn7
PUBLIC	?CBEThreatWarn8@@YAXPAX@Z			; CBEThreatWarn8
PUBLIC	?CBEThreatWarn9@@YAXPAX@Z			; CBEThreatWarn9
PUBLIC	?CBEThreatWarn10@@YAXPAX@Z			; CBEThreatWarn10
PUBLIC	?CBECaution7@@YAXPAX@Z				; CBECaution7
PUBLIC	?CBECaution8@@YAXPAX@Z				; CBECaution8
PUBLIC	?CBECaution9@@YAXPAX@Z				; CBECaution9
PUBLIC	?CBECaution10@@YAXPAX@Z				; CBECaution10
PUBLIC	?CBECaution11@@YAXPAX@Z				; CBECaution11
PUBLIC	?CBECaution12@@YAXPAX@Z				; CBECaution12
PUBLIC	?CBECaution13@@YAXPAX@Z				; CBECaution13
PUBLIC	?CBECaution14@@YAXPAX@Z				; CBECaution14
PUBLIC	?CBECaution15@@YAXPAX@Z				; CBECaution15
PUBLIC	?CBECaution16@@YAXPAX@Z				; CBECaution16
PUBLIC	?CBECaution17@@YAXPAX@Z				; CBECaution17
PUBLIC	?CBEHydPressA@@YAXPAX@Z				; CBEHydPressA
PUBLIC	?CBEHydPressB@@YAXPAX@Z				; CBEHydPressB
PUBLIC	?CBEEng2WarningLight@@YAXPAX@Z			; CBEEng2WarningLight
PUBLIC	?CBELockLight@@YAXPAX@Z				; CBELockLight
PUBLIC	?CBEShootLight@@YAXPAX@Z			; CBEShootLight
PUBLIC	?CBEMarkerBeacon@@YAXPAX@Z			; CBEMarkerBeacon
PUBLIC	?CBEFrontLandGearLight@@YAXPAX@Z		; CBEFrontLandGearLight
PUBLIC	?CBELeftLandGearLight@@YAXPAX@Z			; CBELeftLandGearLight
PUBLIC	?CBERightLandGearLight@@YAXPAX@Z		; CBERightLandGearLight
PUBLIC	?CBECheckMasterCaution@@YAXPAX@Z		; CBECheckMasterCaution
PUBLIC	?CBEAuxWarnActL@@YAXPAX@Z			; CBEAuxWarnActL
PUBLIC	?CBELaunchL@@YAXPAX@Z				; CBELaunchL
PUBLIC	?CBEHandoffL@@YAXPAX@Z				; CBEHandoffL
PUBLIC	?CBEPriModeL@@YAXPAX@Z				; CBEPriModeL
PUBLIC	?CBEUnknownL@@YAXPAX@Z				; CBEUnknownL
PUBLIC	?CBENavalL@@YAXPAX@Z				; CBENavalL
PUBLIC	?CBETgtSepL@@YAXPAX@Z				; CBETgtSepL
PUBLIC	?CBEAuxWarnSearchL@@YAXPAX@Z			; CBEAuxWarnSearchL
PUBLIC	?CBEAuxWarnAltL@@YAXPAX@Z			; CBEAuxWarnAltL
PUBLIC	?CBEAuxWarnPwrL@@YAXPAX@Z			; CBEAuxWarnPwrL
PUBLIC	?CBEEpuRun@@YAXPAX@Z				; CBEEpuRun
PUBLIC	?CBEJfsRun@@YAXPAX@Z				; CBEJfsRun
PUBLIC	?CBEConfigLight@@YAXPAX@Z			; CBEConfigLight
PUBLIC	?CBEInteriorLight@@YAXPAX@Z			; CBEInteriorLight
PUBLIC	?CBECautionFwdFuel@@YAXPAX@Z			; CBECautionFwdFuel
PUBLIC	?CBECautionAftFuel@@YAXPAX@Z			; CBECautionAftFuel
PUBLIC	?CBECautionSec@@YAXPAX@Z			; CBECautionSec
PUBLIC	?CBECautionOxyLow@@YAXPAX@Z			; CBECautionOxyLow
PUBLIC	?CBECautionProbeHeat@@YAXPAX@Z			; CBECautionProbeHeat
PUBLIC	?CBECautionSeatNotArmed@@YAXPAX@Z		; CBECautionSeatNotArmed
PUBLIC	?CBECautionBUC@@YAXPAX@Z			; CBECautionBUC
PUBLIC	?CBECautionFuelOilHot@@YAXPAX@Z			; CBECautionFuelOilHot
PUBLIC	?CBECautionAntiSkid@@YAXPAX@Z			; CBECautionAntiSkid
PUBLIC	?CBECautionMainGen@@YAXPAX@Z			; CBECautionMainGen
PUBLIC	?CBECautionStbyGen@@YAXPAX@Z			; CBECautionStbyGen
PUBLIC	?CBEFlcsPMG@@YAXPAX@Z				; CBEFlcsPMG
PUBLIC	?CBEEpuGen@@YAXPAX@Z				; CBEEpuGen
PUBLIC	?CBEEpuPmg@@YAXPAX@Z				; CBEEpuPmg
PUBLIC	?CBEToFlcs@@YAXPAX@Z				; CBEToFlcs
PUBLIC	?CBEFlcsRly@@YAXPAX@Z				; CBEFlcsRly
PUBLIC	?CBEBatteryFail@@YAXPAX@Z			; CBEBatteryFail
PUBLIC	?CBEEpuAir@@YAXPAX@Z				; CBEEpuAir
PUBLIC	?CBEEpuHydrazine@@YAXPAX@Z			; CBEEpuHydrazine
PUBLIC	?CBECautionElectric@@YAXPAX@Z			; CBECautionElectric
PUBLIC	?CBETFFail@@YAXPAX@Z				; CBETFFail
PUBLIC	?CBEEwsPanelPower@@YAXPAX@Z			; CBEEwsPanelPower
PUBLIC	?CBECanopyLight@@YAXPAX@Z			; CBECanopyLight
PUBLIC	?CBEInstrumentLight@@YAXPAX@Z			; CBEInstrumentLight
PUBLIC	?CBESpotLight@@YAXPAX@Z				; CBESpotLight
PUBLIC	?CBETFRLight@@YAXPAX@Z				; CBETFRLight
PUBLIC	?CBEGearHandleLight@@YAXPAX@Z			; CBEGearHandleLight
PUBLIC	?CBEADIOff@@YAXPAX@Z				; CBEADIOff
PUBLIC	?CBEADIAux@@YAXPAX@Z				; CBEADIAux
PUBLIC	?CBEHSIOff@@YAXPAX@Z				; CBEHSIOff
PUBLIC	?CBELEFLight@@YAXPAX@Z				; CBELEFLight
PUBLIC	?CBECanopyDamage@@YAXPAX@Z			; CBECanopyDamage
PUBLIC	?CBEBUPADIFlag@@YAXPAX@Z			; CBEBUPADIFlag
PUBLIC	?CBEAVTRRunLight@@YAXPAX@Z			; CBEAVTRRunLight
PUBLIC	?CBEGSFlag@@YAXPAX@Z				; CBEGSFlag
PUBLIC	?CBELOCFlag@@YAXPAX@Z				; CBELOCFlag
PUBLIC	?CBEVVIOFF@@YAXPAX@Z				; CBEVVIOFF
PUBLIC	?CBECockpitFeatures@@YAXPAX@Z			; CBECockpitFeatures
PUBLIC	?CBECkptWingLight@@YAXPAX@Z			; CBECkptWingLight
PUBLIC	?CBECkptStrobeLight@@YAXPAX@Z			; CBECkptStrobeLight
PUBLIC	?GetDOFValue@SimMoverClass@@QAEMH@Z		; SimMoverClass::GetDOFValue
PUBLIC	?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInteriorLight
PUBLIC	?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInstrumentLight
PUBLIC	?GetSpotLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetSpotLight
PUBLIC	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsComplex@AircraftClass@@QAEHXZ		; AircraftClass::IsComplex
PUBLIC	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
PUBLIC	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?AVTROn@SimulationDriver@@QAEHXZ		; SimulationDriver::AVTROn
PUBLIC	?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z	; CheckThreatWarn
PUBLIC	?CheckCaution2@@YAXPAXW4type_CSubSystem@@1@Z	; CheckCaution2
PUBLIC	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z	; CheckCaution1
PUBLIC	?CBECkptWingLightFlash@@YAXPAX@Z		; CBECkptWingLightFlash
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f19999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@40d9999a
PUBLIC	__real@40dccccd
PUBLIC	__real@4114cccd
PUBLIC	__real@41380000
PUBLIC	__real@41600000
PUBLIC	__real@41680000
PUBLIC	__real@41700000
PUBLIC	__real@41780000
PUBLIC	__real@42140000
PUBLIC	__real@42700000
PUBLIC	__real@433e0000
PUBLIC	__real@437a0000
PUBLIC	__real@443b8000
PUBLIC	__real@44898000
PUBLIC	__real@c59c4000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?ManualSelect@PlayerRwrClass@@QAEHXZ:PROC	; PlayerRwrClass::ManualSelect
EXTRN	?LightSearch@PlayerRwrClass@@QAEHXZ:PROC	; PlayerRwrClass::LightSearch
EXTRN	?LightUnknowns@PlayerRwrClass@@QAEHXZ:PROC	; PlayerRwrClass::LightUnknowns
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetMasterCautionLight@CPMisc@@QAEHXZ:PROC	; CPMisc::GetMasterCautionLight
EXTRN	?StepMasterCautionLight@CPMisc@@QAEXXZ:PROC	; CPMisc::StepMasterCautionLight
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?aeroDataset@@3PAVAeroDataSet@@A:DWORD		; aeroDataset
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?ComplexGearDOF@@3PAHA:BYTE			; ComplexGearDOF
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_bTO_LDG_LightFix@@3_NA:BYTE			; g_bTO_LDG_LightFix
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c59c4000
CONST	SEGMENT
__real@c59c4000 DD 0c59c4000r			; -5000
CONST	ENDS
;	COMDAT __real@44898000
CONST	SEGMENT
__real@44898000 DD 044898000r			; 1100
CONST	ENDS
;	COMDAT __real@443b8000
CONST	SEGMENT
__real@443b8000 DD 0443b8000r			; 750
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@433e0000
CONST	SEGMENT
__real@433e0000 DD 0433e0000r			; 190
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42140000
CONST	SEGMENT
__real@42140000 DD 042140000r			; 37
CONST	ENDS
;	COMDAT __real@41780000
CONST	SEGMENT
__real@41780000 DD 041780000r			; 15.5
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41680000
CONST	SEGMENT
__real@41680000 DD 041680000r			; 14.5
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41380000
CONST	SEGMENT
__real@41380000 DD 041380000r			; 11.5
CONST	ENDS
;	COMDAT __real@4114cccd
CONST	SEGMENT
__real@4114cccd DD 04114cccdr			; 9.3
CONST	ENDS
;	COMDAT __real@40dccccd
CONST	SEGMENT
__real@40dccccd DD 040dccccdr			; 6.9
CONST	ENDS
;	COMDAT __real@40d9999a
CONST	SEGMENT
__real@40d9999a DD 040d9999ar			; 6.8
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECkptWingLightFlash@@YAXPAX@Z PROC			; CBECkptWingLightFlash

; 1876 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1877 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1878 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBECkptWin

; 1879 : 		return;

	jmp	SHORT $LN4@CBECkptWin
$LN3@CBECkptWin:

; 1880 : 	}
; 1881 : 
; 1882 : 	CPLight*			pCPLight;
; 1883 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1884 : 
; 1885 : 	if(playerAC->CockpitWingLightFlash){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+893]
	test	edx, edx
	je	SHORT $LN2@CBECkptWin

; 1886 : 		pCPLight->mState = CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1887 : 	}
; 1888 : 	else {

	jmp	SHORT $LN4@CBECkptWin
$LN2@CBECkptWin:

; 1889 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN4@CBECkptWin:

; 1890 : 	}
; 1891 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECkptWingLightFlash@@YAXPAX@Z ENDP			; CBECkptWingLightFlash
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
_subsystem$ = 12					; size = 4
?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z PROC	; CheckCaution1

; 495  : void CheckCaution1(void	* pObject, type_CSubSystem subsystem) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 496  : 
; 497  : 	CPLight*			pCPLight;
; 498  : 	FackClass*		faultSys;
; 499  : 
; 500  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 501  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 502  : 
; 503  : #if 0
; 504  : //VWF Hack for testing
; 505  : 		if(pCPLight->mState == CPLIGHT_ON) {
; 506  : 			pCPLight->mState = CPLIGHT_OFF;
; 507  : 		}
; 508  : 		else {
; 509  : 			pCPLight->mState = CPLIGHT_ON;
; 510  : 		}
; 511  : #endif
; 512  : 
; 513  : //	if(faultSys->IsFlagSet()) {
; 514  : 
; 515  : 		if(faultSys->GetFault(subsystem)) {

	mov	ecx, DWORD PTR _subsystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN2@CheckCauti

; 516  : 			pCPLight->mState	= CPLIGHT_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 517  : 		}
; 518  : 		else{

	jmp	SHORT $LN3@CheckCauti
$LN2@CheckCauti:

; 519  : 			pCPLight->mState	= CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN3@CheckCauti:

; 520  : 		} 
; 521  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ENDP	; CheckCaution1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_stateSysA$ = -16					; size = 4
_stateSysB$ = -12					; size = 4
_pCPLight$ = -8						; size = 4
_faultSys$ = -4						; size = 4
_pObject$ = 8						; size = 4
_subsystem1$ = 12					; size = 4
_subsystem2$ = 16					; size = 4
?CheckCaution2@@YAXPAXW4type_CSubSystem@@1@Z PROC	; CheckCaution2

; 467  : 						 type_CSubSystem subsystem2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 468  : 
; 469  : 	CPLight*			pCPLight;
; 470  : 	FackClass*		faultSys;
; 471  : 	BOOL				stateSysA, stateSysB;
; 472  : 
; 473  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 474  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 475  : 
; 476  : #if 0
; 477  : 	//VWF Hack for testing
; 478  : 		if(pCPLight->mState == CPLIGHT_ON) {
; 479  : 			pCPLight->mState = CPLIGHT_OFF;
; 480  : 		}
; 481  : 		else {
; 482  : 			pCPLight->mState = CPLIGHT_ON;
; 483  : 		}
; 484  : #endif
; 485  : 
; 486  : //	if(faultSys->IsFlagSet()) {
; 487  : 
; 488  : 		stateSysB = faultSys->GetFault(subsystem1);

	mov	ecx, DWORD PTR _subsystem1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	mov	DWORD PTR _stateSysB$[ebp], eax

; 489  : 		stateSysA = faultSys->GetFault(subsystem2);

	mov	edx, DWORD PTR _subsystem2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	mov	DWORD PTR _stateSysA$[ebp], eax

; 490  : 		
; 491  : 		pCPLight->mState = stateSysB * 2 + stateSysA;

	mov	eax, DWORD PTR _stateSysB$[ebp]
	mov	ecx, DWORD PTR _stateSysA$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], edx

; 492  : //	}
; 493  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckCaution2@@YAXPAXW4type_CSubSystem@@1@Z ENDP	; CheckCaution2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -20						; size = 4
tv84 = -16						; size = 4
_pCPLight$ = -12					; size = 4
_val$ = -8						; size = 4
_theRwr$ = -4						; size = 4
_pObject$ = 8						; size = 4
_subSystem$ = 12					; size = 4
?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z PROC	; CheckThreatWarn

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 407  : CPLight* pCPLight = (CPLight*) pObject;;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 408  : PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor ((AircraftClass*)pCPLight->mpOwnship, SensorClass::RWR);

	push	2
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$[ebp], eax

; 409  : int val = FALSE;

	mov	DWORD PTR _val$[ebp], 0

; 410  : 
; 411  :    switch (subSystem)

	mov	eax, DWORD PTR _subSystem$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	cmp	DWORD PTR tv84[ebp], 9
	ja	$LN13@CheckThrea
	mov	ecx, DWORD PTR tv84[ebp]
	jmp	DWORD PTR $LN19@CheckThrea[ecx*4]
$LN12@CheckThrea:

; 412  :    {
; 413  :       case handoff:
; 414  :          val = theRwr->ManualSelect();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?ManualSelect@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ManualSelect
	mov	DWORD PTR _val$[ebp], eax

; 415  :       break;

	jmp	$LN13@CheckThrea
$LN11@CheckThrea:

; 416  : 
; 417  :       case missile_launch:
; 418  :          // If we have a launch warning and we're in the "ON" part of the blink cycle
; 419  :          val = theRwr->LaunchIndication() && (vuxRealTime & 0x200);

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LaunchIndication@PlayerRwrClass@@QAEHXZ ; PlayerRwrClass::LaunchIndication
	test	eax, eax
	je	SHORT $LN17@CheckThrea
	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	je	SHORT $LN17@CheckThrea
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN18@CheckThrea
$LN17@CheckThrea:
	mov	DWORD PTR tv92[ebp], 0
$LN18@CheckThrea:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR _val$[ebp], eax

; 420  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN10@CheckThrea:

; 421  : 
; 422  :       case pri_mode:
; 423  :          val = theRwr->IsPriority();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?IsPriority@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::IsPriority
	mov	DWORD PTR _val$[ebp], eax

; 424  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN9@CheckThrea:

; 425  : 
; 426  :       case sys_test:
; 427  :          val = theRwr->ShowNaval();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?ShowNaval@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowNaval
	mov	DWORD PTR _val$[ebp], eax

; 428  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN8@CheckThrea:

; 429  : 
; 430  :       case tgt_t:
; 431  :          val = theRwr->TargetSep();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?TargetSep@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::TargetSep
	mov	DWORD PTR _val$[ebp], eax

; 432  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN7@CheckThrea:

; 433  : 
; 434  :       case unk:
; 435  :          val = theRwr->LightUnknowns();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LightUnknowns@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LightUnknowns
	mov	DWORD PTR _val$[ebp], eax

; 436  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN6@CheckThrea:

; 437  : 
; 438  :       case search:
; 439  :          val = theRwr->LightSearch();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LightSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LightSearch
	mov	DWORD PTR _val$[ebp], eax

; 440  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN5@CheckThrea:

; 441  : 
; 442  :       case activate_power:
; 443  :          val = theRwr->HasActivity();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?HasActivity@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::HasActivity
	mov	DWORD PTR _val$[ebp], eax

; 444  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN4@CheckThrea:

; 445  : 
; 446  :       case low_altitude:
; 447  :          val = theRwr->LowAltPriority();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LowAltPriority@VehRwrClass@@QAEHXZ	; VehRwrClass::LowAltPriority
	mov	DWORD PTR _val$[ebp], eax

; 448  :       break;

	jmp	SHORT $LN13@CheckThrea
$LN3@CheckThrea:

; 449  : 
; 450  :       case system_power:
; 451  :          val = theRwr->IsOn();

	mov	ecx, DWORD PTR _theRwr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRwr$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	mov	DWORD PTR _val$[ebp], eax
$LN13@CheckThrea:

; 452  :       break;
; 453  :    }
; 454  : 
; 455  : 	if(val)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN2@CheckThrea

; 456  :    {
; 457  : 		pCPLight->mState = CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 458  : 	}
; 459  : 	else

	jmp	SHORT $LN15@CheckThrea
$LN2@CheckThrea:

; 460  :    {
; 461  : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN15@CheckThrea:

; 462  : 	}
; 463  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@CheckThrea:
	DD	$LN12@CheckThrea
	DD	$LN11@CheckThrea
	DD	$LN10@CheckThrea
	DD	$LN9@CheckThrea
	DD	$LN8@CheckThrea
	DD	$LN7@CheckThrea
	DD	$LN6@CheckThrea
	DD	$LN5@CheckThrea
	DD	$LN3@CheckThrea
	DD	$LN4@CheckThrea
?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z ENDP	; CheckThreatWarn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?AVTROn@SimulationDriver@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AVTROn@SimulationDriver@@QAEHXZ PROC			; SimulationDriver::AVTROn, COMDAT
; _this$ = ecx

; 100  : 	int AVTROn (void) {return avtrOn;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+356]
	mov	esp, ebp
	pop	ebp
	ret	0
?AVTROn@SimulationDriver@@QAEHXZ ENDP			; SimulationDriver::AVTROn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -1						; size = 1
_lt$ = 8						; size = 4
?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z PROC ; AircraftClass::ElecIsSet, COMDAT
; _this$ = ecx

; 535  : 	bool ElecIsSet(ElectricLights lt) { return (elecLights & lt) ? true : false; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1492]
	and	ecx, DWORD PTR _lt$[ebp]
	je	SHORT $LN3@ElecIsSet
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@ElecIsSet
$LN3@ElecIsSet:
	mov	BYTE PTR tv67[ebp], 0
$LN4@ElecIsSet:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ENDP ; AircraftClass::ElecIsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ PROC ; AircraftClass::MainPower, COMDAT
; _this$ = ecx

; 519  : 	MainPowerType MainPower() { return mainPower; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1484]
	mov	esp, ebp
	pop	ebp
	ret	0
?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ENDP ; AircraftClass::MainPower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsComplex@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsComplex@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsComplex, COMDAT
; _this$ = ecx

; 336  : 	int            IsComplex (void) {return ((acFlags & isComplex) ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 4
	je	SHORT $LN3@IsComplex
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsComplex
$LN3@IsComplex:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsComplex:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsComplex@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsComplex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z PROC	; AircraftClass::INSState, COMDAT
; _this$ = ecx

; 211  : 	int INSState(INSAlignFlags fl) { return (INSFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@INSState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@INSState
$LN3@INSState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@INSState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ENDP	; AircraftClass::INSState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetSpotLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpotLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ PROC ; AircraftClass::GetSpotLight, COMDAT
; _this$ = ecx

; 113  : 	LightSwitch GetSpotLight() const { return spotLight; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+752]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpotLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ENDP ; AircraftClass::GetSpotLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ PROC ; AircraftClass::GetInstrumentLight, COMDAT
; _this$ = ecx

; 112  : 	LightSwitch GetInstrumentLight() const { return instrumentLight; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+748]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ENDP ; AircraftClass::GetInstrumentLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ PROC ; AircraftClass::GetInteriorLight, COMDAT
; _this$ = ecx

; 111  : 	LightSwitch GetInteriorLight() const { return interiorLight; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+744]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ENDP ; AircraftClass::GetInteriorLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetDOFValue@SimMoverClass@@QAEMH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_dof$ = 8						; size = 4
?GetDOFValue@SimMoverClass@@QAEMH@Z PROC		; SimMoverClass::GetDOFValue, COMDAT
; _this$ = ecx

; 132  : 	float GetDOFValue (int dof) { ShiAssert(dof < numDofs); return dof < numDofs ? DOFData[dof] : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dof$[ebp]
	cmp	ecx, DWORD PTR [eax+600]
	jge	SHORT $LN3@GetDOFValu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	mov	ecx, DWORD PTR _dof$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@GetDOFValu
$LN3@GetDOFValu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@GetDOFValu:
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFValue@SimMoverClass@@QAEMH@Z ENDP		; SimMoverClass::GetDOFValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECkptStrobeLight@@YAXPAX@Z PROC			; CBECkptStrobeLight

; 1893 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1894 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1895 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBECkptStr

; 1896 : 		return;

	jmp	SHORT $LN4@CBECkptStr
$LN3@CBECkptStr:

; 1897 : 	}
; 1898 : 
; 1899 : 	CPLight*			pCPLight;
; 1900 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1901 : 
; 1902 : 	if(playerAC->CockpitStrobeLight){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+894]
	test	edx, edx
	je	SHORT $LN2@CBECkptStr

; 1903 : 		pCPLight->mState = CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1904 : 	}
; 1905 : 	else{

	jmp	SHORT $LN4@CBECkptStr
$LN2@CBECkptStr:

; 1906 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN4@CBECkptStr:

; 1907 : 	}
; 1908 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECkptStrobeLight@@YAXPAX@Z ENDP			; CBECkptStrobeLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECkptWingLight@@YAXPAX@Z PROC			; CBECkptWingLight

; 1858 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1859 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1860 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBECkptWin

; 1861 : 		return;

	jmp	SHORT $LN4@CBECkptWin
$LN3@CBECkptWin:

; 1862 : 	}
; 1863 : 
; 1864 : 	CPLight*			pCPLight;
; 1865 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1866 : 
; 1867 : 	if (playerAC->CockpitWingLight && PlayerOptions.ObjDetailLevel > 1.0F){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+892]
	test	edx, edx
	je	SHORT $LN2@CBECkptWin
	movss	xmm0, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+16
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN2@CBECkptWin

; 1868 : 		pCPLight->mState = CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1869 : 	}
; 1870 : 	else{

	jmp	SHORT $LN1@CBECkptWin
$LN2@CBECkptWin:

; 1871 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN1@CBECkptWin:
$LN4@CBECkptWin:

; 1872 : 	}
; 1873 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECkptWingLight@@YAXPAX@Z ENDP			; CBECkptWingLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECockpitFeatures@@YAXPAX@Z PROC			; CBECockpitFeatures

; 1850 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1851 : 	CPLight*			pCPLight;
; 1852 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1853 : 
; 1854 : 	//always on
; 1855 : 	pCPLight->mState = CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 1856 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECockpitFeatures@@YAXPAX@Z ENDP			; CBECockpitFeatures
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEVVIOFF@@YAXPAX@Z PROC				; CBEVVIOFF

; 1826 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1827 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1828 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBEVVIOFF

; 1829 : 		return;

	jmp	SHORT $LN4@CBEVVIOFF
$LN3@CBEVVIOFF:

; 1830 : 	}
; 1831 : 
; 1832 : 	CPLight*			pCPLight;
; 1833 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1834 : 	
; 1835 : 	//Off when emergency power is gone
; 1836 : 	if (playerAC->currentPower < AircraftClass::PowerEmergencyBus){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [ecx+1488], 3
	jge	SHORT $LN2@CBEVVIOFF

; 1837 : 		pCPLight->mState = CPLIGHT_ON;	//Flag visible

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1838 : 	// MD -- 20031011: Move to otwloop.cpp
; 1839 : 	//	cockpitFlightData.SetHsiBit(FlightData::VVI);
; 1840 : 	//	cockpitFlightData.SetHsiBit(FlightData::AOA);
; 1841 : 	}
; 1842 : 	else {

	jmp	SHORT $LN4@CBEVVIOFF
$LN2@CBEVVIOFF:

; 1843 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag invisible

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN4@CBEVVIOFF:

; 1844 : 	// MD -- 20031011: Move to otwloop.cpp
; 1845 : 	//	cockpitFlightData.ClearHsiBit(FlightData::VVI);
; 1846 : 	//	cockpitFlightData.ClearHsiBit(FlightData::AOA);
; 1847 : 	}
; 1848 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEVVIOFF@@YAXPAX@Z ENDP				; CBEVVIOFF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBELOCFlag@@YAXPAX@Z PROC				; CBELOCFlag

; 1798 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1799 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1800 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN5@CBELOCFlag

; 1801 : 		return;

	jmp	SHORT $LN6@CBELOCFlag
$LN5@CBELOCFlag:

; 1802 : 	}
; 1803 : 
; 1804 : 	CPLight*			pCPLight;
; 1805 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1806 : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN4@CBELOCFlag

; 1807 : 	{
; 1808 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1809 : 		return;

	jmp	SHORT $LN6@CBELOCFlag
$LN4@CBELOCFlag:

; 1810 : 	}
; 1811 : 	
; 1812 : 	if (playerAC->LOCValid == FALSE || playerAC->currentPower == AircraftClass::PowerNone){

	mov	eax, DWORD PTR _playerAC$[ebp]
	movzx	ecx, BYTE PTR [eax+837]
	test	ecx, ecx
	je	SHORT $LN2@CBELOCFlag
	mov	edx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [edx+1488], 0
	jne	SHORT $LN3@CBELOCFlag
$LN2@CBELOCFlag:

; 1813 : 		pCPLight->mState = CPLIGHT_ON;	//Flag visible

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1814 : 		// MD -- 20031011: Move to otwloop.cpp
; 1815 : 		//	cockpitFlightData.SetHsiBit(FlightData::ADI_LOC);
; 1816 : 	}
; 1817 : 	else {

	jmp	SHORT $LN6@CBELOCFlag
$LN3@CBELOCFlag:

; 1818 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag invisible

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN6@CBELOCFlag:

; 1819 : 		// MD -- 20031011: Move to otwloop.cpp
; 1820 : 		//	cockpitFlightData.ClearHsiBit(FlightData::ADI_LOC);
; 1821 : 	}
; 1822 : 
; 1823 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBELOCFlag@@YAXPAX@Z ENDP				; CBELOCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEGSFlag@@YAXPAX@Z PROC				; CBEGSFlag

; 1771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1772 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1773 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN5@CBEGSFlag

; 1774 : 		return;

	jmp	SHORT $LN6@CBEGSFlag
$LN5@CBEGSFlag:

; 1775 : 	}
; 1776 : 
; 1777 : 	CPLight*			pCPLight;
; 1778 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1779 : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN4@CBEGSFlag

; 1780 : 	{
; 1781 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1782 : 		return;

	jmp	SHORT $LN6@CBEGSFlag
$LN4@CBEGSFlag:

; 1783 : 	}
; 1784 : 	
; 1785 : 	if (playerAC->GSValid == FALSE || playerAC->currentPower == AircraftClass::PowerNone){

	mov	eax, DWORD PTR _playerAC$[ebp]
	movzx	ecx, BYTE PTR [eax+836]
	test	ecx, ecx
	je	SHORT $LN2@CBEGSFlag
	mov	edx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [edx+1488], 0
	jne	SHORT $LN3@CBEGSFlag
$LN2@CBEGSFlag:

; 1786 : 		pCPLight->mState = CPLIGHT_ON;	//Flag visible

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1787 : 	// MD -- 20031011: Move to otwloop.cpp
; 1788 : 	//	cockpitFlightData.SetHsiBit(FlightData::ADI_GS);
; 1789 : 	}
; 1790 : 	else {

	jmp	SHORT $LN6@CBEGSFlag
$LN3@CBEGSFlag:

; 1791 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag invisible

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN6@CBEGSFlag:

; 1792 : 	// MD -- 20031011: Move to otwloop.cpp
; 1793 : 	//	cockpitFlightData.ClearHsiBit(FlightData::ADI_GS);
; 1794 : 	}
; 1795 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEGSFlag@@YAXPAX@Z ENDP				; CBEGSFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEAVTRRunLight@@YAXPAX@Z PROC				; CBEAVTRRunLight

; 1752 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1753 : 	CPLight*			pCPLight;
; 1754 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1755 : 	
; 1756 : 	if(SimDriver.AVTROn())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?AVTROn@SimulationDriver@@QAEHXZ	; SimulationDriver::AVTROn
	test	eax, eax
	je	SHORT $LN2@CBEAVTRRun

; 1757 : 	{
; 1758 : 		pCPLight->mState = CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 1759 : 		// MD -- 20031011: Move to otwloop.cpp
; 1760 : 		//cockpitFlightData.SetHsiBit(FlightData::AVTR);
; 1761 : 	}
; 1762 : 	else

	jmp	SHORT $LN3@CBEAVTRRun
$LN2@CBEAVTRRun:

; 1763 : 	{
; 1764 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN3@CBEAVTRRun:

; 1765 : 		// MD -- 20031011: Move to otwloop.cpp
; 1766 : 		//cockpitFlightData.ClearHsiBit(FlightData::AVTR);
; 1767 : 	}
; 1768 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEAVTRRunLight@@YAXPAX@Z ENDP				; CBEAVTRRunLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEBUPADIFlag@@YAXPAX@Z PROC				; CBEBUPADIFlag

; 1725 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1726 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1727 : 	if (playerAC == NULL || playerAC->mFaults == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN4@CBEBUPADIF
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN5@CBEBUPADIF
$LN4@CBEBUPADIF:

; 1728 : 		return;

	jmp	SHORT $LN6@CBEBUPADIF
$LN5@CBEBUPADIF:

; 1729 : 	}
; 1730 : 
; 1731 : 	CPLight*			pCPLight;
; 1732 : 	pCPLight	= (CPLight*) pObject;

	mov	ecx, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], ecx

; 1733 : 	if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN3@CBEBUPADIF

; 1734 : 	{
; 1735 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1736 : 		return;

	jmp	SHORT $LN6@CBEBUPADIF
$LN3@CBEBUPADIF:

; 1737 : 	}
; 1738 : 
; 1739 : 	if (playerAC->INSState(AircraftClass::BUP_ADI_OFF_IN)){

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN2@CBEBUPADIF

; 1740 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag in

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 1741 : 		// MD -- 20031011: Move to otwloop.cpp
; 1742 : 		//cockpitFlightData.ClearHsiBit(FlightData::BUP_ADI_OFF);
; 1743 : 	}
; 1744 : 	else {

	jmp	SHORT $LN6@CBEBUPADIF
$LN2@CBEBUPADIF:

; 1745 : 		pCPLight->mState = CPLIGHT_ON;	//Flag out

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1
$LN6@CBEBUPADIF:

; 1746 : 		// MD -- 20031011: Move to otwloop.cpp
; 1747 : 		//cockpitFlightData.SetHsiBit(FlightData::BUP_ADI_OFF);
; 1748 : 	}
; 1749 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEBUPADIFlag@@YAXPAX@Z ENDP				; CBEBUPADIFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECanopyDamage@@YAXPAX@Z PROC				; CBECanopyDamage

; 1708 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1709 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1710 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBECanopyD

; 1711 : 		return;

	jmp	SHORT $LN4@CBECanopyD
$LN3@CBECanopyD:

; 1712 : 	}
; 1713 : 
; 1714 : 	CPLight*			pCPLight;
; 1715 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1716 : 	if (playerAC->CanopyDamaged){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+852]
	test	edx, edx
	je	SHORT $LN2@CBECanopyD

; 1717 : 		pCPLight->mState = CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1718 : 	}
; 1719 : 	else {

	jmp	SHORT $LN4@CBECanopyD
$LN2@CBECanopyD:

; 1720 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN4@CBECanopyD:

; 1721 : 	}
; 1722 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECanopyDamage@@YAXPAX@Z ENDP				; CBECanopyDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBELEFLight@@YAXPAX@Z PROC				; CBELEFLight

; 1691 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1692 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1693 : 	if (playerAC == NULL || playerAC->mFaults == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN3@CBELEFLigh
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN4@CBELEFLigh
$LN3@CBELEFLigh:

; 1694 : 		return;

	jmp	SHORT $LN5@CBELEFLigh
$LN4@CBELEFLigh:

; 1695 : 	}
; 1696 : 
; 1697 : 	CPLight*			pCPLight;
; 1698 : 	pCPLight	= (CPLight*) pObject;

	mov	ecx, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], ecx

; 1699 : 	if (playerAC->mFaults->GetFault(lef_fault)){

	push	35					; 00000023H
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN2@CBELEFLigh

; 1700 : 		pCPLight->mState = CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1701 : 	}
; 1702 : 	else{

	jmp	SHORT $LN5@CBELEFLigh
$LN2@CBELEFLigh:

; 1703 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN5@CBELEFLigh:

; 1704 : 	}
; 1705 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBELEFLight@@YAXPAX@Z ENDP				; CBELEFLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEHSIOff@@YAXPAX@Z PROC				; CBEHSIOff

; 1664 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1665 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1666 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN4@CBEHSIOff

; 1667 : 		return;

	jmp	SHORT $LN5@CBEHSIOff
$LN4@CBEHSIOff:

; 1668 : 	}
; 1669 : 
; 1670 : 	CPLight*			pCPLight;
; 1671 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1672 : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN3@CBEHSIOff

; 1673 : 	{
; 1674 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1675 : 		return;

	jmp	SHORT $LN5@CBEHSIOff
$LN3@CBEHSIOff:

; 1676 : 	}
; 1677 : 
; 1678 : 	if (playerAC->INSState(AircraftClass::INS_HSI_OFF_IN)){

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN2@CBEHSIOff

; 1679 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag in

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1680 : 		// MD -- 20031011: Move to otwloop.cpp
; 1681 : 		//cockpitFlightData.ClearHsiBit(FlightData::HSI_OFF);
; 1682 : 	}
; 1683 : 	else {

	jmp	SHORT $LN5@CBEHSIOff
$LN2@CBEHSIOff:

; 1684 : 		pCPLight->mState = CPLIGHT_ON;	//Flag out

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN5@CBEHSIOff:

; 1685 : 		// MD -- 20031011: Move to otwloop.cpp
; 1686 : 		//cockpitFlightData.SetHsiBit(FlightData::HSI_OFF);
; 1687 : 	}
; 1688 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEHSIOff@@YAXPAX@Z ENDP				; CBEHSIOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEADIAux@@YAXPAX@Z PROC				; CBEADIAux

; 1637 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1638 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1639 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN4@CBEADIAux

; 1640 : 		return;

	jmp	SHORT $LN5@CBEADIAux
$LN4@CBEADIAux:

; 1641 : 	}
; 1642 : 
; 1643 : 	CPLight*			pCPLight;
; 1644 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1645 : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN3@CBEADIAux

; 1646 : 	{
; 1647 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1648 : 		return;

	jmp	SHORT $LN5@CBEADIAux
$LN3@CBEADIAux:

; 1649 : 	}
; 1650 : 
; 1651 : 	if(playerAC->INSState(AircraftClass::INS_ADI_AUX_IN)){

	push	256					; 00000100H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN2@CBEADIAux

; 1652 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag in

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1653 : 		// MD -- 20031011: Move to otwloop.cpp
; 1654 : 		//cockpitFlightData.ClearHsiBit(FlightData::ADI_AUX);
; 1655 : 	}
; 1656 : 	else {

	jmp	SHORT $LN5@CBEADIAux
$LN2@CBEADIAux:

; 1657 : 		pCPLight->mState = CPLIGHT_ON;	//Flag out

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN5@CBEADIAux:

; 1658 : 		// MD -- 20031011: Move to otwloop.cpp
; 1659 : 		//cockpitFlightData.SetHsiBit(FlightData::ADI_AUX);
; 1660 : 	}
; 1661 : 
; 1662 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEADIAux@@YAXPAX@Z ENDP				; CBEADIAux
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEADIOff@@YAXPAX@Z PROC				; CBEADIOff

; 1611 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1612 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1613 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN4@CBEADIOff

; 1614 : 		return;

	jmp	SHORT $LN5@CBEADIOff
$LN4@CBEADIOff:

; 1615 : 	}
; 1616 : 
; 1617 : 	CPLight*			pCPLight;
; 1618 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1619 : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN3@CBEADIOff

; 1620 : 	{
; 1621 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1622 : 		return;

	jmp	SHORT $LN5@CBEADIOff
$LN3@CBEADIOff:

; 1623 : 	}
; 1624 : 
; 1625 : 	if(playerAC->INSState(AircraftClass::INS_ADI_OFF_IN)){

	push	128					; 00000080H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN2@CBEADIOff

; 1626 : 		pCPLight->mState = CPLIGHT_OFF;	//Flag in

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1627 : 		// MD -- 20031011: Move to otwloop.cpp
; 1628 : 		//cockpitFlightData.ClearHsiBit(FlightData::ADI_OFF);
; 1629 : 	}
; 1630 : 	else {

	jmp	SHORT $LN5@CBEADIOff
$LN2@CBEADIOff:

; 1631 : 		pCPLight->mState = CPLIGHT_ON;	//Flag out

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN5@CBEADIOff:

; 1632 : 		// MD -- 20031011: Move to otwloop.cpp
; 1633 : 		//cockpitFlightData.SetHsiBit(FlightData::ADI_OFF);
; 1634 : 	}
; 1635 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEADIOff@@YAXPAX@Z ENDP				; CBEADIOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEGearHandleLight@@YAXPAX@Z PROC			; CBEGearHandleLight

; 1546 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1547 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1548 : 	if (playerAC == NULL || !SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP)){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN14@CBEGearHan
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN15@CBEGearHan
$LN14@CBEGearHan:

; 1549 : 		return;

	jmp	$LN16@CBEGearHan
$LN15@CBEGearHan:

; 1550 : 	}
; 1551 : 
; 1552 : 	CPLight *pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1553 : 	//MI according to the -1, the light only lights up
; 1554 : 	//if the gear is moving
; 1555 : 	
; 1556 : 	if(playerAC->af->gearHandle <= 0.0F){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1556]
	jb	$LN13@CBEGearHan

; 1557 : 		//handle in the up position. Check if our gear is locked
; 1558 : 		//or if we have a T/O LDG config warning
; 1559 : 		//MI check for electrics
; 1560 : 		if(playerAC->MainPower() == AircraftClass::MainPowerOff){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	test	eax, eax
	jne	SHORT $LN12@CBEGearHan

; 1561 : 			pCPLight->mState = CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1562 : 			return;

	jmp	$LN16@CBEGearHan
$LN12@CBEGearHan:

; 1563 : 		}
; 1564 :         
; 1565 : 		if (playerAC->af->gearPos == 0.0F) //0 = gear up

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@CBEGearHan

; 1566 : 		{
; 1567 : 			if(!playerAC->mFaults->GetFault(FaultClass::gear_fault) &&			
; 1568 : 				!playerAC->mFaults->GetFault(to_ldg_config))

	push	15					; 0000000fH
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN10@CBEGearHan
	push	9
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN10@CBEGearHan

; 1569 : 			{ 
; 1570 : 				pCPLight->mState = CPLIGHT_OFF; //Light off

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1571 : 			}
; 1572 : 			else {

	jmp	SHORT $LN9@CBEGearHan
$LN10@CBEGearHan:

; 1573 : 				pCPLight->mState = CPLIGHT_ON; //handle up and something causing our light to go on

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1
$LN9@CBEGearHan:

; 1574 : 			}
; 1575 : 		} 
; 1576 : 		else {

	jmp	SHORT $LN8@CBEGearHan
$LN11@CBEGearHan:

; 1577 : 			pCPLight->mState = CPLIGHT_ON; //handle up and something causing our light to go on

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN8@CBEGearHan:

; 1578 : 		}

	jmp	$LN1@CBEGearHan
$LN13@CBEGearHan:

; 1579 : 	}
; 1580 : 	else if (playerAC->af->gearHandle > 0.0F) {

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1556]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@CBEGearHan

; 1581 : 		//MI check for electrics
; 1582 : 		if(playerAC->MainPower() == AircraftClass::MainPowerOff){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	test	eax, eax
	jne	SHORT $LN5@CBEGearHan

; 1583 : 			pCPLight->mState = 2;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 2

; 1584 : 			return;

	jmp	SHORT $LN16@CBEGearHan
$LN5@CBEGearHan:

; 1585 : 		}
; 1586 : 		//handle down. Here it's only on if our gear isn't locked
; 1587 : 		if (playerAC->af->gearPos == 1.0F)	//1 = gear down

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1552]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@CBEGearHan

; 1588 : 		{
; 1589 : 			if(!playerAC->mFaults->GetFault(FaultClass::gear_fault)){

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@CBEGearHan

; 1590 : 					pCPLight->mState = 2; //Light off

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 2

; 1591 : 			}
; 1592 : 			else {

	jmp	SHORT $LN2@CBEGearHan
$LN3@CBEGearHan:

; 1593 : 				pCPLight->mState = 3; //handle down and something causing our light to go on

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 3
$LN2@CBEGearHan:

; 1594 : 			}
; 1595 : 		}
; 1596 : 		else {

	jmp	SHORT $LN1@CBEGearHan
$LN4@CBEGearHan:

; 1597 : 			pCPLight->mState = 3; //handle down and something causing our light to go on

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 3
$LN1@CBEGearHan:
$LN16@CBEGearHan:

; 1598 : 		}
; 1599 : 	}
; 1600 : 
; 1601 : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 1602 : 		// looking at the cockpit view.
; 1603 : 		//if (pCPLight->mState) 
; 1604 : 		//	cockpitFlightData.SetLightBit2(FlightData::GEARHANDLE);
; 1605 : 		//else 
; 1606 : 		//	cockpitFlightData.ClearLightBit2(FlightData::GEARHANDLE);
; 1607 : 
; 1608 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEGearHandleLight@@YAXPAX@Z ENDP			; CBEGearHandleLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBETFRLight@@YAXPAX@Z PROC				; CBETFRLight

; 1521 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1522 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1523 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBETFRLigh

; 1524 : 		return;

	jmp	SHORT $LN4@CBETFRLigh
$LN3@CBETFRLigh:

; 1525 : 	}
; 1526 : 
; 1527 : 	CPLight*			pCPLight;
; 1528 : 	
; 1529 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1530 : 	if (playerAC->AutopilotType() == AircraftClass::LantirnAP){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 3
	jne	SHORT $LN2@CBETFRLigh

; 1531 : 		pCPLight->mState = CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 1532 : 	}
; 1533 : 	else {

	jmp	SHORT $LN4@CBETFRLigh
$LN2@CBETFRLigh:

; 1534 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN4@CBETFRLigh:

; 1535 : 	}
; 1536 : 
; 1537 : 	// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 1538 : 	// looking at the cockpit view.
; 1539 : 	//if (pCPLight->mState) 
; 1540 : 	//	cockpitFlightData.SetLightBit2(FlightData::TFR_ENGAGED);
; 1541 : 	//else 
; 1542 : 	//	cockpitFlightData.ClearLightBit2(FlightData::TFR_ENGAGED);
; 1543 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBETFRLight@@YAXPAX@Z ENDP				; CBETFRLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv89 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBESpotLight@@YAXPAX@Z PROC				; CBESpotLight

; 1334 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1335 :     CPLight	*pCPLight;
; 1336 :     
; 1337 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1338 :     
; 1339 :     if(!((AircraftClass*) pCPLight->mpOwnship)->HasPower(AircraftClass::SpotLightPower))

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	jne	SHORT $LN7@CBESpotLig

; 1340 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1341 :     else {

	jmp	SHORT $LN8@CBESpotLig
$LN7@CBESpotLig:

; 1342 : 	switch(((AircraftClass*) pCPLight->mpOwnship)->GetSpotLight()) {

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetSpotLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetSpotLight
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN3@CBESpotLig
	cmp	DWORD PTR tv89[ebp], 1
	je	SHORT $LN2@CBESpotLig
	cmp	DWORD PTR tv89[ebp], 2
	je	SHORT $LN1@CBESpotLig
	jmp	SHORT $LN8@CBESpotLig
$LN3@CBESpotLig:

; 1343 : 	case AircraftClass::LT_OFF:
; 1344 : 	    pCPLight->mState =CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 1345 : 	    break;

	jmp	SHORT $LN8@CBESpotLig
$LN2@CBESpotLig:

; 1346 : 	case AircraftClass::LT_LOW:
; 1347 : 	    pCPLight->mState = 1;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1348 : 	    break;

	jmp	SHORT $LN8@CBESpotLig
$LN1@CBESpotLig:

; 1349 : 	case AircraftClass::LT_NORMAL:
; 1350 : 	    pCPLight->mState = 2;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2
$LN8@CBESpotLig:

; 1351 : 	    break;
; 1352 : 	}
; 1353 :     }
; 1354 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBESpotLight@@YAXPAX@Z ENDP				; CBESpotLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv89 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEInstrumentLight@@YAXPAX@Z PROC			; CBEInstrumentLight

; 1310 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1311 :     CPLight	*pCPLight;
; 1312 :     
; 1313 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1314 :     
; 1315 :     if(!((AircraftClass*) pCPLight->mpOwnship)->HasPower(AircraftClass::InstrumentLightPower))

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	jne	SHORT $LN7@CBEInstrum

; 1316 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1317 :     else {

	jmp	SHORT $LN8@CBEInstrum
$LN7@CBEInstrum:

; 1318 : 	switch(((AircraftClass*) pCPLight->mpOwnship)->GetInstrumentLight()) {

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInstrumentLight
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN3@CBEInstrum
	cmp	DWORD PTR tv89[ebp], 1
	je	SHORT $LN2@CBEInstrum
	cmp	DWORD PTR tv89[ebp], 2
	je	SHORT $LN1@CBEInstrum
	jmp	SHORT $LN8@CBEInstrum
$LN3@CBEInstrum:

; 1319 : 	case AircraftClass::LT_OFF:
; 1320 : 	    pCPLight->mState =CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 1321 : 	    break;

	jmp	SHORT $LN8@CBEInstrum
$LN2@CBEInstrum:

; 1322 : 	case AircraftClass::LT_LOW:
; 1323 : 	    pCPLight->mState = 1;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1324 : 	    break;

	jmp	SHORT $LN8@CBEInstrum
$LN1@CBEInstrum:

; 1325 : 	case AircraftClass::LT_NORMAL:
; 1326 : 	    pCPLight->mState = 2;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2
$LN8@CBEInstrum:

; 1327 : 	    break;
; 1328 : 	}
; 1329 :     }
; 1330 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEInstrumentLight@@YAXPAX@Z ENDP			; CBEInstrumentLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv153 = -32						; size = 4
tv148 = -28						; size = 4
_faultSys$ = -24					; size = 4
_canopyopen$ = -20					; size = 4
tv129 = -16						; size = 4
tv88 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECanopyLight@@YAXPAX@Z PROC				; CBECanopyLight

; 1493 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 1494 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1495 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN6@CBECanopyL

; 1496 : 		return;

	jmp	$LN7@CBECanopyL
$LN6@CBECanopyL:

; 1497 : 	}
; 1498 : 
; 1499 : 	CPLight*			pCPLight;
; 1500 : 	FackClass*		faultSys;
; 1501 : 
; 1502 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1503 : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 1504 : 	int canopyopen;
; 1505 : 	if (playerAC->IsComplex()){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN5@CBECanopyL

; 1506 : 	    canopyopen = playerAC->GetDOFValue(COMP_CANOPY_DOF) > 0;

	push	30					; 0000001eH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv148[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@CBECanopyL
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN10@CBECanopyL
$LN9@CBECanopyL:
	mov	DWORD PTR tv88[ebp], 0
$LN10@CBECanopyL:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _canopyopen$[ebp], ecx

; 1507 : 	}
; 1508 : 	else {

	jmp	SHORT $LN4@CBECanopyL
$LN5@CBECanopyL:

; 1509 : 	    canopyopen = playerAC->GetDOFValue(SIMP_CANOPY_DOF) > 0;

	push	23					; 00000017H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv153[ebp]
	movss	xmm0, DWORD PTR tv153[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN11@CBECanopyL
	mov	DWORD PTR tv129[ebp], 1
	jmp	SHORT $LN12@CBECanopyL
$LN11@CBECanopyL:
	mov	DWORD PTR tv129[ebp], 0
$LN12@CBECanopyL:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _canopyopen$[ebp], edx
$LN4@CBECanopyL:

; 1510 : 	}
; 1511 : 
; 1512 : 	if(canopyopen || (faultSys && faultSys->GetFault(canopy))){

	cmp	DWORD PTR _canopyopen$[ebp], 0
	jne	SHORT $LN2@CBECanopyL
	cmp	DWORD PTR _faultSys$[ebp], 0
	je	SHORT $LN3@CBECanopyL
	push	8
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECanopyL
$LN2@CBECanopyL:

; 1513 : 		pCPLight->mState = CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1514 : 	}
; 1515 : 	else{

	jmp	SHORT $LN1@CBECanopyL
$LN3@CBECanopyL:

; 1516 : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN1@CBECanopyL:
$LN7@CBECanopyL:

; 1517 : 	}
; 1518 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECanopyLight@@YAXPAX@Z ENDP				; CBECanopyLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEwsPanelPower@@YAXPAX@Z PROC			; CBEEwsPanelPower

; 1473 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1474 : 	//Pseudo light for the digital displays of the EWS panel. If we don't have power, nothing 
; 1475 : 	//should be displayed
; 1476 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1477 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBEEwsPane

; 1478 : 		return;

	jmp	SHORT $LN4@CBEEwsPane
$LN3@CBEEwsPane:

; 1479 : 	}
; 1480 : 
; 1481 : 	CPLight *pCPLight;
; 1482 : 
; 1483 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1484 : 
; 1485 : 	if (playerAC->HasPower(AircraftClass::ChaffFlareCount)){

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	SHORT $LN2@CBEEwsPane

; 1486 : 		pCPLight->mState	= CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 1487 : 	}
; 1488 : 	else {

	jmp	SHORT $LN4@CBEEwsPane
$LN2@CBEEwsPane:

; 1489 : 		pCPLight->mState	= CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN4@CBEEwsPane:

; 1490 : 	}
; 1491 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEwsPanelPower@@YAXPAX@Z ENDP			; CBEEwsPanelPower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBETFFail@@YAXPAX@Z PROC				; CBETFFail

; 1454 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1455 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1456 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBETFFail

; 1457 : 		return;

	jmp	SHORT $LN4@CBETFFail
$LN3@CBETFFail:

; 1458 : 	}
; 1459 : 
; 1460 : 	CPLight	*pCPLight;
; 1461 :     
; 1462 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1463 :     
; 1464 : 	if (playerAC->RFState == 2){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [ecx+1520], 2
	jne	SHORT $LN2@CBETFFail

; 1465 : 		pCPLight->mState	= CPLIGHT_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1466 : 	}
; 1467 : 	else {

	jmp	SHORT $LN4@CBETFFail
$LN2@CBETFFail:

; 1468 : 		pCPLight->mState	= CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN4@CBETFFail:

; 1469 : 	}
; 1470 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBETFFail@@YAXPAX@Z ENDP				; CBETFFail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionElectric@@YAXPAX@Z PROC			; CBECautionElectric

; 1256 : {

	push	ebp
	mov	ebp, esp

; 1257 :     CheckCaution1(pObject, elec_fault);

	push	34					; 00000022H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1258 : }

	pop	ebp
	ret	0
?CBECautionElectric@@YAXPAX@Z ENDP			; CBECautionElectric
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEpuHydrazine@@YAXPAX@Z PROC				; CBEEpuHydrazine

; 1430 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1431 :     CPLight	*pCPLight;
; 1432 :     
; 1433 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1434 :     
; 1435 :     if(((AircraftClass*) pCPLight->mpOwnship)->af->EpuIsHydrazine())

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?EpuIsHydrazine@AirframeClass@@QAEHXZ	; AirframeClass::EpuIsHydrazine
	test	eax, eax
	je	SHORT $LN2@CBEEpuHydr

; 1436 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1437 :     else

	jmp	SHORT $LN3@CBEEpuHydr
$LN2@CBEEpuHydr:

; 1438 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEEpuHydr:

; 1439 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEpuHydrazine@@YAXPAX@Z ENDP				; CBEEpuHydrazine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEpuAir@@YAXPAX@Z PROC				; CBEEpuAir

; 1442 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1443 :     CPLight	*pCPLight;
; 1444 :     
; 1445 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1446 :     
; 1447 :     if(((AircraftClass*) pCPLight->mpOwnship)->af->EpuIsAir())

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?EpuIsAir@AirframeClass@@QAEHXZ		; AirframeClass::EpuIsAir
	test	eax, eax
	je	SHORT $LN2@CBEEpuAir

; 1448 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1449 :     else

	jmp	SHORT $LN3@CBEEpuAir
$LN2@CBEEpuAir:

; 1450 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEEpuAir:

; 1451 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEpuAir@@YAXPAX@Z ENDP				; CBEEpuAir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEBatteryFail@@YAXPAX@Z PROC				; CBEBatteryFail

; 1418 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1419 :     CPLight	*pCPLight;
; 1420 :     
; 1421 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1422 :     
; 1423 :     if(((AircraftClass*) pCPLight->mpOwnship)->ElecIsSet(AircraftClass::ElecBatteryFail))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CBEBattery

; 1424 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1425 :     else

	jmp	SHORT $LN3@CBEBattery
$LN2@CBEBattery:

; 1426 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEBattery:

; 1427 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEBatteryFail@@YAXPAX@Z ENDP				; CBEBatteryFail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEFlcsRly@@YAXPAX@Z PROC				; CBEFlcsRly

; 1406 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1407 :     CPLight	*pCPLight;
; 1408 :     
; 1409 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1410 :     
; 1411 :     if(((AircraftClass*) pCPLight->mpOwnship)->ElecIsSet(AircraftClass::ElecFlcsRly))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CBEFlcsRly

; 1412 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1413 :     else

	jmp	SHORT $LN3@CBEFlcsRly
$LN2@CBEFlcsRly:

; 1414 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEFlcsRly:

; 1415 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEFlcsRly@@YAXPAX@Z ENDP				; CBEFlcsRly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEToFlcs@@YAXPAX@Z PROC				; CBEToFlcs

; 1394 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1395 :     CPLight	*pCPLight;
; 1396 :     
; 1397 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1398 :     
; 1399 :     if(((AircraftClass*) pCPLight->mpOwnship)->ElecIsSet(AircraftClass::ElecToFlcs))

	push	8
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CBEToFlcs

; 1400 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1401 :     else

	jmp	SHORT $LN3@CBEToFlcs
$LN2@CBEToFlcs:

; 1402 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEToFlcs:

; 1403 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEToFlcs@@YAXPAX@Z ENDP				; CBEToFlcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEpuPmg@@YAXPAX@Z PROC				; CBEEpuPmg

; 1382 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1383 :     CPLight	*pCPLight;
; 1384 :     
; 1385 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1386 :     
; 1387 :     if(((AircraftClass*) pCPLight->mpOwnship)->ElecIsSet(AircraftClass::ElecEpuPmg))

	push	4
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CBEEpuPmg

; 1388 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1389 :     else

	jmp	SHORT $LN3@CBEEpuPmg
$LN2@CBEEpuPmg:

; 1390 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEEpuPmg:

; 1391 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEpuPmg@@YAXPAX@Z ENDP				; CBEEpuPmg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEpuGen@@YAXPAX@Z PROC				; CBEEpuGen

; 1370 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1371 :     CPLight	*pCPLight;
; 1372 :     
; 1373 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1374 :     
; 1375 :     if(((AircraftClass*) pCPLight->mpOwnship)->ElecIsSet(AircraftClass::ElecEpuGen))

	push	2
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CBEEpuGen

; 1376 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1377 :     else

	jmp	SHORT $LN3@CBEEpuGen
$LN2@CBEEpuGen:

; 1378 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEEpuGen:

; 1379 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEpuGen@@YAXPAX@Z ENDP				; CBEEpuGen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEFlcsPMG@@YAXPAX@Z PROC				; CBEFlcsPMG

; 1358 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1359 :     CPLight	*pCPLight;
; 1360 :     
; 1361 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1362 :     
; 1363 :     if(((AircraftClass*) pCPLight->mpOwnship)->ElecIsSet(AircraftClass::ElecFlcsPmg))

	push	1
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CBEFlcsPMG

; 1364 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1365 :     else

	jmp	SHORT $LN3@CBEFlcsPMG
$LN2@CBEFlcsPMG:

; 1366 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEFlcsPMG:

; 1367 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEFlcsPMG@@YAXPAX@Z ENDP				; CBEFlcsPMG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECautionStbyGen@@YAXPAX@Z PROC			; CBECautionStbyGen

; 1274 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1275 :     CPLight	*pCPLight;
; 1276 :     
; 1277 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1278 :     if(((AircraftClass*) pCPLight->mpOwnship)->af->GeneratorRunning(AirframeClass::GenStdby))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
	test	eax, eax
	je	SHORT $LN2@CBECaution

; 1279 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1280 :     else

	jmp	SHORT $LN3@CBECaution
$LN2@CBECaution:

; 1281 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN3@CBECaution:

; 1282 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECautionStbyGen@@YAXPAX@Z ENDP			; CBECautionStbyGen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECautionMainGen@@YAXPAX@Z PROC			; CBECautionMainGen

; 1262 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1263 :     CPLight	*pCPLight;
; 1264 :     
; 1265 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1266 :     if(((AircraftClass*) pCPLight->mpOwnship)->af->GeneratorRunning(AirframeClass::GenMain))

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
	test	eax, eax
	je	SHORT $LN2@CBECaution

; 1267 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0

; 1268 :     else

	jmp	SHORT $LN3@CBECaution
$LN2@CBECaution:

; 1269 : 	pCPLight->mState	= CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN3@CBECaution:

; 1270 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECautionMainGen@@YAXPAX@Z ENDP			; CBECautionMainGen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionAntiSkid@@YAXPAX@Z PROC			; CBECautionAntiSkid

; 1250 : {

	push	ebp
	mov	ebp, esp

; 1251 :     CheckCaution1(pObject, anti_skid_fault);

	push	31					; 0000001fH
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1252 : }

	pop	ebp
	ret	0
?CBECautionAntiSkid@@YAXPAX@Z ENDP			; CBECautionAntiSkid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionFuelOilHot@@YAXPAX@Z PROC			; CBECautionFuelOilHot

; 1244 : {

	push	ebp
	mov	ebp, esp

; 1245 :     CheckCaution1(pObject, fueloil_hot_fault);

	push	30					; 0000001eH
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1246 : }

	pop	ebp
	ret	0
?CBECautionFuelOilHot@@YAXPAX@Z ENDP			; CBECautionFuelOilHot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionBUC@@YAXPAX@Z PROC				; CBECautionBUC

; 1238 : {

	push	ebp
	mov	ebp, esp

; 1239 :     CheckCaution1(pObject, buc_fault);

	push	29					; 0000001dH
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1240 : }

	pop	ebp
	ret	0
?CBECautionBUC@@YAXPAX@Z ENDP				; CBECautionBUC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionSeatNotArmed@@YAXPAX@Z PROC			; CBECautionSeatNotArmed

; 1232 : {

	push	ebp
	mov	ebp, esp

; 1233 :     CheckCaution1(pObject, seat_notarmed_fault);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1234 : }

	pop	ebp
	ret	0
?CBECautionSeatNotArmed@@YAXPAX@Z ENDP			; CBECautionSeatNotArmed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionProbeHeat@@YAXPAX@Z PROC			; CBECautionProbeHeat

; 1226 : {

	push	ebp
	mov	ebp, esp

; 1227 :     CheckCaution1(pObject, probeheat_fault);

	push	27					; 0000001bH
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1228 : }

	pop	ebp
	ret	0
?CBECautionProbeHeat@@YAXPAX@Z ENDP			; CBECautionProbeHeat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionOxyLow@@YAXPAX@Z PROC			; CBECautionOxyLow

; 1220 : {

	push	ebp
	mov	ebp, esp

; 1221 :     CheckCaution1(pObject, oxy_low_fault);

	push	21					; 00000015H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1222 : }

	pop	ebp
	ret	0
?CBECautionOxyLow@@YAXPAX@Z ENDP			; CBECautionOxyLow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionSec@@YAXPAX@Z PROC				; CBECautionSec

; 1214 : {

	push	ebp
	mov	ebp, esp

; 1215 :     CheckCaution1(pObject, sec_fault);

	push	26					; 0000001aH
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1216 : }

	pop	ebp
	ret	0
?CBECautionSec@@YAXPAX@Z ENDP				; CBECautionSec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionAftFuel@@YAXPAX@Z PROC			; CBECautionAftFuel

; 1208 : {

	push	ebp
	mov	ebp, esp

; 1209 :     CheckCaution1(pObject, aft_fuel_low_fault);

	push	23					; 00000017H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1210 : }

	pop	ebp
	ret	0
?CBECautionAftFuel@@YAXPAX@Z ENDP			; CBECautionAftFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECautionFwdFuel@@YAXPAX@Z PROC			; CBECautionFwdFuel

; 1202 : {

	push	ebp
	mov	ebp, esp

; 1203 :     CheckCaution1(pObject, fwd_fuel_low_fault);

	push	22					; 00000016H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1204 : }

	pop	ebp
	ret	0
?CBECautionFwdFuel@@YAXPAX@Z ENDP			; CBECautionFwdFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv89 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEInteriorLight@@YAXPAX@Z PROC			; CBEInteriorLight

; 1286 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1287 :     CPLight	*pCPLight;
; 1288 :     
; 1289 :     pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1290 :     
; 1291 :     if(!((AircraftClass*) pCPLight->mpOwnship)->HasPower(AircraftClass::InteriorLightPower))

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	jne	SHORT $LN7@CBEInterio

; 1292 : 	pCPLight->mState	= CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1293 :     else {

	jmp	SHORT $LN8@CBEInterio
$LN7@CBEInterio:

; 1294 : 	switch(((AircraftClass*) pCPLight->mpOwnship)->GetInteriorLight()) {

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInteriorLight
	mov	DWORD PTR tv89[ebp], eax
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN3@CBEInterio
	cmp	DWORD PTR tv89[ebp], 1
	je	SHORT $LN2@CBEInterio
	cmp	DWORD PTR tv89[ebp], 2
	je	SHORT $LN1@CBEInterio
	jmp	SHORT $LN8@CBEInterio
$LN3@CBEInterio:

; 1295 : 	case AircraftClass::LT_OFF:
; 1296 : 	    pCPLight->mState =CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 1297 : 	    break;

	jmp	SHORT $LN8@CBEInterio
$LN2@CBEInterio:

; 1298 : 	case AircraftClass::LT_LOW:
; 1299 : 	    pCPLight->mState = 1;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1300 : 	    break;

	jmp	SHORT $LN8@CBEInterio
$LN1@CBEInterio:

; 1301 : 	case AircraftClass::LT_NORMAL:
; 1302 : 	    pCPLight->mState = 2;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2
$LN8@CBEInterio:

; 1303 : 	    break;
; 1304 : 	}
; 1305 :     }
; 1306 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEInteriorLight@@YAXPAX@Z ENDP			; CBEInteriorLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEConfigLight@@YAXPAX@Z PROC				; CBEConfigLight

; 1181 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1182 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1183 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@CBEConfigL

; 1184 : 		return;

	jmp	SHORT $LN4@CBEConfigL
$LN3@CBEConfigL:

; 1185 : 	}
; 1186 : 
; 1187 : 	CPLight	*pCPLight;
; 1188 : 
; 1189 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1190 : 
; 1191 : 	//Check if our lightbit is set
; 1192 : 	if (playerAC->mFaults->GetFault(stores_config_fault)){

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN2@CBEConfigL

; 1193 : 		pCPLight->mState	= CPLIGHT_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1194 : 	}
; 1195 : 	else {

	jmp	SHORT $LN4@CBEConfigL
$LN2@CBEConfigL:

; 1196 : 		pCPLight->mState	= CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN4@CBEConfigL:

; 1197 : 	}
; 1198 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEConfigLight@@YAXPAX@Z ENDP				; CBEConfigLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEJfsRun@@YAXPAX@Z PROC				; CBEJfsRun

; 1148 : void CBEJfsRun(void * pObject) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1149 : 
; 1150 : 	CPLight	*pCPLight;
; 1151 : 
; 1152 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1153 : 	
; 1154 : 	// JPO Is JFS running.
; 1155 : 	if(((AircraftClass*) pCPLight->mpOwnship)->af->IsSet(AirframeClass::JfsStart)) {

	push	268435456				; 10000000H
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN2@CBEJfsRun

; 1156 : 	    pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1157 : 	}
; 1158 : 	else{

	jmp	SHORT $LN3@CBEJfsRun
$LN2@CBEJfsRun:

; 1159 : 	    pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEJfsRun:

; 1160 : 	}
; 1161 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEJfsRun@@YAXPAX@Z ENDP				; CBEJfsRun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEpuRun@@YAXPAX@Z PROC				; CBEEpuRun

; 1164 : void CBEEpuRun(void * pObject) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1165 : 
; 1166 : 	CPLight	*pCPLight;
; 1167 : 
; 1168 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1169 : 	
; 1170 : 	// JPO Is EPU running.
; 1171 : 	if(((AircraftClass*) pCPLight->mpOwnship)->af->GeneratorRunning(AirframeClass::GenEpu)) {

	push	4
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
	test	eax, eax
	je	SHORT $LN2@CBEEpuRun

; 1172 : 	    pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1173 : 	}
; 1174 : 	else{

	jmp	SHORT $LN3@CBEEpuRun
$LN2@CBEEpuRun:

; 1175 : 	    pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEEpuRun:

; 1176 : 	}
; 1177 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEpuRun@@YAXPAX@Z ENDP				; CBEEpuRun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv130 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEAuxWarnPwrL@@YAXPAX@Z PROC				; CBEAuxWarnPwrL

; 284  : void CBEAuxWarnPwrL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 285  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 286  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEAuxWarn
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn

; 287  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 288  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEAuxWarn

; 289  : 			pCPLight->mState = (theRwr->IsOn() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRwr$1[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	test	eax, eax
	je	SHORT $LN5@CBEAuxWarn
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN6@CBEAuxWarn
$LN5@CBEAuxWarn:
	mov	DWORD PTR tv130[ebp], 0
$LN6@CBEAuxWarn:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEAuxWarn:

; 290  : 		}
; 291  : 		//MI extracting Data
; 292  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 293  : 		// looking at the cockpit view.
; 294  : 		//if (pCPLight->mState) 
; 295  : 		//{
; 296  : 		//	cockpitFlightData.SetLightBit2(FlightData::AuxPwr);
; 297  : 		//}
; 298  : 		//else 
; 299  : 		//{
; 300  : 		//	cockpitFlightData.ClearLightBit2(FlightData::AuxPwr);
; 301  : 		//}
; 302  : 	}
; 303  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEAuxWarnPwrL@@YAXPAX@Z ENDP				; CBEAuxWarnPwrL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv128 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEAuxWarnAltL@@YAXPAX@Z PROC				; CBEAuxWarnAltL

; 262  : void CBEAuxWarnAltL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 263  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 264  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEAuxWarn
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn

; 265  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 266  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEAuxWarn

; 267  : 			pCPLight->mState = (theRwr->LowAltPriority() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?LowAltPriority@VehRwrClass@@QAEHXZ	; VehRwrClass::LowAltPriority
	test	eax, eax
	je	SHORT $LN5@CBEAuxWarn
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN6@CBEAuxWarn
$LN5@CBEAuxWarn:
	mov	DWORD PTR tv128[ebp], 0
$LN6@CBEAuxWarn:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEAuxWarn:

; 268  : 		}
; 269  : 		//MI extracting Data
; 270  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 271  : 		// looking at the cockpit view.
; 272  : 		//if (pCPLight->mState) 
; 273  : 		//{
; 274  : 		//	cockpitFlightData.SetLightBit2(FlightData::AuxLow);
; 275  : 		//}
; 276  : 		//else 
; 277  : 		//{
; 278  : 		//	cockpitFlightData.ClearLightBit2(FlightData::AuxLow);
; 279  : 		//}
; 280  : 	}
; 281  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEAuxWarnAltL@@YAXPAX@Z ENDP				; CBEAuxWarnAltL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEAuxWarnSearchL@@YAXPAX@Z PROC			; CBEAuxWarnSearchL

; 240  : void CBEAuxWarnSearchL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 241  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 242  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEAuxWarn
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn

; 243  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 244  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEAuxWarn

; 245  : 			pCPLight->mState = (theRwr->LightSearch() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?LightSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LightSearch
	test	eax, eax
	je	SHORT $LN5@CBEAuxWarn
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBEAuxWarn
$LN5@CBEAuxWarn:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBEAuxWarn:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEAuxWarn:

; 246  : 		}
; 247  : 		//MI extracting Data
; 248  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 249  : 		// looking at the cockpit view.
; 250  : 		//if (pCPLight->mState) 
; 251  : 		//{
; 252  : 		//	cockpitFlightData.SetLightBit2(FlightData::AuxSrch);
; 253  : 		//}
; 254  : 		//else 
; 255  : 		//{
; 256  : 		//	cockpitFlightData.ClearLightBit2(FlightData::AuxSrch);
; 257  : 		//}
; 258  : 	}
; 259  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEAuxWarnSearchL@@YAXPAX@Z ENDP			; CBEAuxWarnSearchL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBETgtSepL@@YAXPAX@Z PROC				; CBETgtSepL

; 218  : void CBETgtSepL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 219  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 220  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBETgtSepL
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBETgtSepL
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBETgtSepL

; 221  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 222  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBETgtSepL

; 223  : 			pCPLight->mState = (theRwr->TargetSep() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?TargetSep@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::TargetSep
	test	eax, eax
	je	SHORT $LN5@CBETgtSepL
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBETgtSepL
$LN5@CBETgtSepL:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBETgtSepL:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBETgtSepL:

; 224  : 		}
; 225  : 		//MI extracting Data
; 226  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 227  : 		// looking at the cockpit view.
; 228  : 		//if (pCPLight->mState) 
; 229  : 		//{
; 230  : 		//	cockpitFlightData.SetLightBit2(FlightData::TgtSep);
; 231  : 		//}
; 232  : 		//else 
; 233  : 		//{
; 234  : 		//	cockpitFlightData.ClearLightBit2(FlightData::TgtSep);
; 235  : 		//}
; 236  : 	}
; 237  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBETgtSepL@@YAXPAX@Z ENDP				; CBETgtSepL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBENavalL@@YAXPAX@Z PROC				; CBENavalL

; 197  : void CBENavalL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 198  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 199  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBENavalL
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBENavalL
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBENavalL

; 200  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 201  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBENavalL

; 202  : 			pCPLight->mState = (theRwr->ShowNaval() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?ShowNaval@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowNaval
	test	eax, eax
	je	SHORT $LN5@CBENavalL
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBENavalL
$LN5@CBENavalL:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBENavalL:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBENavalL:

; 203  : 		}
; 204  : 		//MI extracting Data
; 205  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 206  : 		// looking at the cockpit view.
; 207  : 		//if (pCPLight->mState)
; 208  : 		//{
; 209  : 		//	cockpitFlightData.SetLightBit2(FlightData::Naval);
; 210  : 		//}
; 211  : 		//else 
; 212  : 		//{
; 213  : 		//	cockpitFlightData.ClearLightBit2(FlightData::Naval);
; 214  : 		//}
; 215  : 	}
; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBENavalL@@YAXPAX@Z ENDP				; CBENavalL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEUnknownL@@YAXPAX@Z PROC				; CBEUnknownL

; 176  : void CBEUnknownL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 177  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 178  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEUnknown
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEUnknown
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEUnknown

; 179  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 180  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEUnknown

; 181  : 			pCPLight->mState = (theRwr->LightUnknowns() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?LightUnknowns@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LightUnknowns
	test	eax, eax
	je	SHORT $LN5@CBEUnknown
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBEUnknown
$LN5@CBEUnknown:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBEUnknown:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEUnknown:

; 182  : 		}
; 183  : 		//MI extracting Data
; 184  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 185  : 		// looking at the cockpit view.
; 186  : 		//if (pCPLight->mState) 
; 187  : 		//{
; 188  : 		//	cockpitFlightData.SetLightBit2(FlightData::Unk);
; 189  : 		//}
; 190  : 		//else 
; 191  : 		//{
; 192  : 		//	cockpitFlightData.ClearLightBit2(FlightData::Unk);
; 193  : 		//}
; 194  : 	}
; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEUnknownL@@YAXPAX@Z ENDP				; CBEUnknownL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEPriModeL@@YAXPAX@Z PROC				; CBEPriModeL

; 154  : void CBEPriModeL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 155  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 156  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEPriMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEPriMode
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEPriMode

; 157  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 158  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEPriMode

; 159  : 			pCPLight->mState = (theRwr->IsPriority() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?IsPriority@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::IsPriority
	test	eax, eax
	je	SHORT $LN5@CBEPriMode
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBEPriMode
$LN5@CBEPriMode:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBEPriMode:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEPriMode:

; 160  : 		}
; 161  : 		//MI extracting DATA
; 162  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 163  : 		// looking at the cockpit view.
; 164  : 		//if (pCPLight->mState) 
; 165  : 		//{
; 166  : 		//	cockpitFlightData.SetLightBit2(FlightData::PriMode);
; 167  : 		//}
; 168  : 		//else 
; 169  : 		//{
; 170  : 		//	cockpitFlightData.ClearLightBit2(FlightData::PriMode);
; 171  : 		//}
; 172  : 	}
; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEPriModeL@@YAXPAX@Z ENDP				; CBEPriModeL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEHandoffL@@YAXPAX@Z PROC				; CBEHandoffL

; 132  : void CBEHandoffL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 133  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 134  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEHandoff
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEHandoff
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEHandoff

; 135  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 136  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEHandoff

; 137  : 			pCPLight->mState = (theRwr->ManualSelect() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?ManualSelect@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ManualSelect
	test	eax, eax
	je	SHORT $LN5@CBEHandoff
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBEHandoff
$LN5@CBEHandoff:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBEHandoff:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEHandoff:

; 138  : 		}
; 139  : 		//MI extracting Data
; 140  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 141  : 		// looking at the cockpit view.
; 142  : 		//if (pCPLight->mState) 
; 143  : 		//{
; 144  : 		//	cockpitFlightData.SetLightBit2(FlightData::HandOff);
; 145  : 		//}
; 146  : 		//else 
; 147  : 		//{
; 148  : 		//	cockpitFlightData.ClearLightBit2(FlightData::HandOff);
; 149  : 		//}
; 150  : 	}
; 151  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEHandoffL@@YAXPAX@Z ENDP				; CBEHandoffL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBELaunchL@@YAXPAX@Z PROC				; CBELaunchL

; 110  : void CBELaunchL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 111  : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 112  :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBELaunchL
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBELaunchL
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBELaunchL

; 113  : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 114  : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBELaunchL

; 115  : 			pCPLight->mState = (theRwr->LaunchIndication() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?LaunchIndication@PlayerRwrClass@@QAEHXZ ; PlayerRwrClass::LaunchIndication
	test	eax, eax
	je	SHORT $LN5@CBELaunchL
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBELaunchL
$LN5@CBELaunchL:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBELaunchL:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBELaunchL:

; 116  : 		}
; 117  : 		//MI extracting Data
; 118  : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 119  : 		// looking at the cockpit view.
; 120  : 		//if (pCPLight->mState) 
; 121  : 		//{
; 122  : 		//	cockpitFlightData.SetLightBit2(FlightData::Launch);
; 123  : 		//}
; 124  : 		//else 
; 125  : 		//{
; 126  : 		//	cockpitFlightData.ClearLightBit2(FlightData::Launch);
; 127  : 		//}
; 128  : 	}
; 129  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBELaunchL@@YAXPAX@Z ENDP				; CBELaunchL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv92 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_theRwr$1 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEAuxWarnActL@@YAXPAX@Z PROC				; CBEAuxWarnActL

; 89   : void CBEAuxWarnActL(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 90   : 	CPLight*	pCPLight = (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 91   :    if (pCPLight && (SimDriver.GetPlayerEntity()) && (SimDriver.GetPlayerEntity()->IsSetFlag(MOTION_OWNSHIP))) {

	cmp	DWORD PTR _pCPLight$[ebp], 0
	je	SHORT $LN3@CBEAuxWarn
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@CBEAuxWarn

; 92   : 	   PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::RWR);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$1[ebp], eax

; 93   : 		if(theRwr) {

	cmp	DWORD PTR _theRwr$1[ebp], 0
	je	SHORT $LN3@CBEAuxWarn

; 94   : 			pCPLight->mState = (theRwr->HasActivity() != FALSE);

	mov	ecx, DWORD PTR _theRwr$1[ebp]
	call	?HasActivity@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::HasActivity
	test	eax, eax
	je	SHORT $LN5@CBEAuxWarn
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN6@CBEAuxWarn
$LN5@CBEAuxWarn:
	mov	DWORD PTR tv92[ebp], 0
$LN6@CBEAuxWarn:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN3@CBEAuxWarn:

; 95   : 		}
; 96   : 		//MI extracting Data
; 97   : 		// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 98   : 		// looking at the cockpit view.
; 99   : 		//if (pCPLight->mState) 
; 100  : 		//{
; 101  : 		//	cockpitFlightData.SetLightBit2(FlightData::AuxAct);
; 102  : 		//}
; 103  : 		//else 
; 104  : 		//{
; 105  : 		//	cockpitFlightData.ClearLightBit2(FlightData::AuxAct);
; 106  : 		//}
; 107  : 	}
; 108  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEAuxWarnActL@@YAXPAX@Z ENDP				; CBEAuxWarnActL
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECheckMasterCaution@@YAXPAX@Z PROC			; CBECheckMasterCaution

; 364  : void CBECheckMasterCaution(void * pObject) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 365  : 
; 366  : 	CPLight *pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 367  : 
; 368  : 	OTWDriver.pCockpitManager->mMiscStates.StepMasterCautionLight();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	add	ecx, 284				; 0000011cH
	call	?StepMasterCautionLight@CPMisc@@QAEXXZ	; CPMisc::StepMasterCautionLight

; 369  : 	pCPLight->mState = OTWDriver.pCockpitManager->mMiscStates.GetMasterCautionLight();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	add	ecx, 284				; 0000011cH
	call	?GetMasterCautionLight@CPMisc@@QAEHXZ	; CPMisc::GetMasterCautionLight
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 370  : 
; 371  : 	// sfr: testing this
; 372  : #if 0
; 373  : 	OTWDriver.GetVirtualCockpit()->SetSwitchMask( 2, pCPLight->mState);
; 374  : #endif
; 375  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECheckMasterCaution@@YAXPAX@Z ENDP			; CBECheckMasterCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv236 = -28						; size = 4
tv242 = -24						; size = 4
tv226 = -20						; size = 4
tv220 = -16						; size = 4
tv89 = -12						; size = 4
_gear$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBERightLandGearLight@@YAXPAX@Z PROC			; CBERightLandGearLight

; 1087 : void CBERightLandGearLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1088 : 
; 1089 : 	CPLight	*pCPLight;
; 1090 : 
; 1091 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1092 : 
; 1093 : 	int gear = min(2, ((AircraftClass*) pCPLight->mpOwnship)->af->NumGear());

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 2
	jle	SHORT $LN9@CBERightLa
	mov	DWORD PTR tv89[ebp], 2
	jmp	SHORT $LN10@CBERightLa
$LN9@CBERightLa:
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	ecx, DWORD PTR [ecx+932]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	mov	DWORD PTR tv89[ebp], eax
$LN10@CBERightLa:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _gear$[ebp], edx

; 1094 : 	if(((AircraftClass*) pCPLight->mpOwnship)->af->gear[gear].flags & GearData::GearProblem)

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _gear$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR [edx+1256]
	mov	edx, DWORD PTR [ecx+eax+12]
	and	edx, 15					; 0000000fH
	je	SHORT $LN6@CBERightLa

; 1095 : 	{
; 1096 :  	   pCPLight->mState	= 2;  // Damaged

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2

; 1097 : 	}
; 1098 : 	else

	jmp	$LN1@CBERightLa
$LN6@CBERightLa:

; 1099 : 	{
; 1100 : 		if(((AircraftClass*) pCPLight->mpOwnship)->GetDOFValue(ComplexGearDOF[gear]/*COMP_NOS_GEAR+gear*/) ==  // MLR 2/22/2004 - 
; 1101 : 			((AircraftClass*) pCPLight->mpOwnship)->af->GetAeroData(AeroDataSet::NosGearRng+gear*4)*DTR)

	mov	ecx, DWORD PTR _gear$[ebp]
	mov	edx, DWORD PTR ?ComplexGearDOF@@3PAHA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv220[ebp]
	movss	xmm0, DWORD PTR tv220[ebp]
	mov	ecx, DWORD PTR _gear$[ebp]
	lea	edx, DWORD PTR [ecx*4+17]
	push	edx
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	ecx, DWORD PTR [ecx+932]
	movss	DWORD PTR tv242[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv226[ebp]
	movss	xmm0, DWORD PTR tv226[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv242[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@CBERightLa

; 1102 : 		{
; 1103 : 		   pCPLight->mState	= 1; // Down

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1
	jmp	SHORT $LN1@CBERightLa
$LN4@CBERightLa:

; 1104 : 		}
; 1105 : 		else if (((AircraftClass*) pCPLight->mpOwnship)->GetDOFValue(ComplexGearDOF[gear]/*COMP_NOS_GEAR+gear*/)) // MLR 2/22/2004 - 

	mov	eax, DWORD PTR _gear$[ebp]
	mov	ecx, DWORD PTR ?ComplexGearDOF@@3PAHA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv236[ebp]
	movss	xmm0, DWORD PTR tv236[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CBERightLa

; 1106 : 		{
; 1107 : 	 	   pCPLight->mState	= 2; // In Transit

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2

; 1108 : 		}
; 1109 : 		else

	jmp	SHORT $LN1@CBERightLa
$LN2@CBERightLa:

; 1110 : 		{
; 1111 : 		   pCPLight->mState	= 0; // Up

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN1@CBERightLa:

; 1112 : 		}
; 1113 : 	}
; 1114 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBERightLandGearLight@@YAXPAX@Z ENDP			; CBERightLandGearLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv236 = -28						; size = 4
tv242 = -24						; size = 4
tv226 = -20						; size = 4
tv220 = -16						; size = 4
tv89 = -12						; size = 4
_gear$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBELeftLandGearLight@@YAXPAX@Z PROC			; CBELeftLandGearLight

; 1057 : void CBELeftLandGearLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 1058 : 
; 1059 : 	CPLight	*pCPLight;
; 1060 : 
; 1061 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1062 : 
; 1063 : 	int gear = min(1, ((AircraftClass*) pCPLight->mpOwnship)->af->NumGear());

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	SHORT $LN9@CBELeftLan
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN10@CBELeftLan
$LN9@CBELeftLan:
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	ecx, DWORD PTR [ecx+932]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	mov	DWORD PTR tv89[ebp], eax
$LN10@CBELeftLan:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _gear$[ebp], edx

; 1064 : 	if(((AircraftClass*) pCPLight->mpOwnship)->af->gear[gear].flags & GearData::GearProblem)

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _gear$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR [edx+1256]
	mov	edx, DWORD PTR [ecx+eax+12]
	and	edx, 15					; 0000000fH
	je	SHORT $LN6@CBELeftLan

; 1065 : 	{
; 1066 :  	   pCPLight->mState	= 2;  // Damaged

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2

; 1067 : 	}
; 1068 : 	else

	jmp	$LN1@CBELeftLan
$LN6@CBELeftLan:

; 1069 : 	{
; 1070 : 		if(((AircraftClass*) pCPLight->mpOwnship)->GetDOFValue(ComplexGearDOF[gear]/*COMP_NOS_GEAR+gear*/) ==  // MLR 2/22/2004 - 
; 1071 : 			((AircraftClass*) pCPLight->mpOwnship)->af->GetAeroData(AeroDataSet::NosGearRng+gear*4)*DTR)

	mov	ecx, DWORD PTR _gear$[ebp]
	mov	edx, DWORD PTR ?ComplexGearDOF@@3PAHA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv220[ebp]
	movss	xmm0, DWORD PTR tv220[ebp]
	mov	ecx, DWORD PTR _gear$[ebp]
	lea	edx, DWORD PTR [ecx*4+17]
	push	edx
	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	ecx, DWORD PTR [ecx+932]
	movss	DWORD PTR tv242[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv226[ebp]
	movss	xmm0, DWORD PTR tv226[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv242[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@CBELeftLan

; 1072 : 		{
; 1073 : 		   pCPLight->mState	= 1; // Down

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1
	jmp	SHORT $LN1@CBELeftLan
$LN4@CBELeftLan:

; 1074 : 		}
; 1075 : 		else if (((AircraftClass*) pCPLight->mpOwnship)->GetDOFValue(ComplexGearDOF[gear]/*COMP_NOS_GEAR+gear*/)) // MLR 2/22/2004 - 

	mov	eax, DWORD PTR _gear$[ebp]
	mov	ecx, DWORD PTR ?ComplexGearDOF@@3PAHA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv236[ebp]
	movss	xmm0, DWORD PTR tv236[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CBELeftLan

; 1076 : 		{
; 1077 : 	 	   pCPLight->mState	= 2; // In Transit

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 2

; 1078 : 		}
; 1079 : 		else

	jmp	SHORT $LN1@CBELeftLan
$LN2@CBELeftLan:

; 1080 : 		{
; 1081 : 		   pCPLight->mState	= 0; // Up

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN1@CBELeftLan:

; 1082 : 		}
; 1083 : 	}
; 1084 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBELeftLandGearLight@@YAXPAX@Z ENDP			; CBELeftLandGearLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv200 = -20						; size = 4
tv206 = -16						; size = 4
tv190 = -12						; size = 4
tv185 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEFrontLandGearLight@@YAXPAX@Z PROC			; CBEFrontLandGearLight

; 1028 : void CBEFrontLandGearLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1029 : 
; 1030 : 	CPLight	*pCPLight;
; 1031 : 
; 1032 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1033 : 
; 1034 : 	if( ((AircraftClass*) pCPLight->mpOwnship)->af->gear[0].flags & GearData::GearProblem)

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+1256]
	mov	eax, DWORD PTR [edx+ecx+12]
	and	eax, 15					; 0000000fH
	je	SHORT $LN6@CBEFrontLa

; 1035 :    {
; 1036 :  	   pCPLight->mState	= 2;  // Damaged

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 2

; 1037 :    }
; 1038 :    else

	jmp	$LN1@CBEFrontLa
$LN6@CBEFrontLa:

; 1039 :    {
; 1040 : 	   if(((AircraftClass*) pCPLight->mpOwnship)->GetDOFValue(ComplexGearDOF[0]/*COMP_NOS_GEAR*/) ==  // MLR 2/22/2004 - 
; 1041 : 		   ((AircraftClass*) pCPLight->mpOwnship)->af->GetAeroData(AeroDataSet::NosGearRng)*DTR)

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?ComplexGearDOF@@3PAHA[edx]
	push	eax
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv185[ebp]
	movss	xmm0, DWORD PTR tv185[ebp]
	push	17					; 00000011H
	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR tv206[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv190[ebp]
	movss	xmm0, DWORD PTR tv190[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv206[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@CBEFrontLa

; 1042 : 		{
; 1043 : 		   pCPLight->mState	= 1; // Down

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
	jmp	SHORT $LN1@CBEFrontLa
$LN4@CBEFrontLa:

; 1044 : 	   }
; 1045 : 	   else if (((AircraftClass*) pCPLight->mpOwnship)->GetDOFValue(ComplexGearDOF[0]/*COMP_NOS_GEAR)*/)) // MLR 2/22/2004 - 

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?ComplexGearDOF@@3PAHA[edx]
	push	eax
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CBEFrontLa

; 1046 : 		{
; 1047 : 	 	   pCPLight->mState	= 2; // In Transit

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 2

; 1048 : 		}
; 1049 : 		else

	jmp	SHORT $LN1@CBEFrontLa
$LN2@CBEFrontLa:

; 1050 : 		{
; 1051 : 		   pCPLight->mState	= 0; // Up

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN1@CBEFrontLa:

; 1052 : 	   }
; 1053 :    }
; 1054 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEFrontLandGearLight@@YAXPAX@Z ENDP			; CBEFrontLandGearLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBEMarkerBeacon@@YAXPAX@Z PROC				; CBEMarkerBeacon

; 1952 : {

	push	ebp
	mov	ebp, esp

; 1953 : 	/*
; 1954 : 	CPLight*			pCPLight;
; 1955 : 	pCPLight	= (CPLight*) pObject;
; 1956 : 
; 1957 : 
; 1958 : 	if(SimDriver.GetPlayerEntity() )
; 1959 : 	{
; 1960 : 		if (cockpitFlightData.IsSetHsi(FlightData::OuterMarker))
; 1961 : 			pCPLight->mState = 1;  // blue
; 1962 : 		else if (cockpitFlightData.IsSetHsi(FlightData::MiddleMarker))
; 1963 : 			pCPLight->mState = 2;  // orange
; 1964 : 		else
; 1965 : 			pCPLight->mState = CPLIGHT_OFF;
; 1966 : 	}*/
; 1967 : }

	pop	ebp
	ret	0
?CBEMarkerBeacon@@YAXPAX@Z ENDP				; CBEMarkerBeacon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEShootLight@@YAXPAX@Z PROC				; CBEShootLight

; 1931 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1932 : 	
; 1933 : 	CPLight*			pCPLight;
; 1934 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1935 : 
; 1936 : 
; 1937 : 	if(SimDriver.GetPlayerEntity() )

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN4@CBEShootLi

; 1938 : 	{
; 1939 : 		if(shootCue == 1)

	movzx	ecx, BYTE PTR ?shootCue@@3_NA		; shootCue
	cmp	ecx, 1
	jne	SHORT $LN2@CBEShootLi

; 1940 : 			pCPLight->mState = CPLIGHT_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 1941 : 		else

	jmp	SHORT $LN4@CBEShootLi
$LN2@CBEShootLi:

; 1942 : 			pCPLight->mState = CPLIGHT_OFF;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN4@CBEShootLi:

; 1943 : 	}
; 1944 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEShootLight@@YAXPAX@Z ENDP				; CBEShootLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pclassPtr$ = -12					; size = 4
_pCPLight$ = -8						; size = 4
_rdc$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBELockLight@@YAXPAX@Z PROC				; CBELockLight

; 1912 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1913 : 	CPLight*			pCPLight;
; 1914 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1915 : 	Falcon4EntityClassType*		pclassPtr=NULL;

	mov	DWORD PTR _pclassPtr$[ebp], 0

; 1916 : 
; 1917 : 	RadarDopplerClass*			rdc = NULL;

	mov	DWORD PTR _rdc$[ebp], 0

; 1918 : 
; 1919 : 	rdc = (RadarDopplerClass*)FindSensor(SimDriver.GetPlayerEntity(), SensorClass::Radar);

	push	1
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _rdc$[ebp], eax

; 1920 : 	if(rdc)

	cmp	DWORD PTR _rdc$[ebp], 0
	je	SHORT $LN4@CBELockLig

; 1921 : 	{
; 1922 : 		if (rdc->CurrentTarget())

	mov	ecx, DWORD PTR _rdc$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN2@CBELockLig

; 1923 : 			pCPLight->mState = CPLIGHT_ON;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 1924 : 		else

	jmp	SHORT $LN4@CBELockLig
$LN2@CBELockLig:

; 1925 : 			pCPLight->mState = CPLIGHT_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN4@CBELockLig:

; 1926 : 	}
; 1927 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBELockLight@@YAXPAX@Z ENDP				; CBELockLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -20					; size = 4
_pCPLight$ = -16					; size = 4
_fire$ = -12						; size = 4
_engine$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEEng2WarningLight@@YAXPAX@Z PROC			; CBEEng2WarningLight

; 985  : void CBEEng2WarningLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 986  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 987  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN5@CBEEng2War

; 988  : 		return;

	jmp	$LN6@CBEEng2War
$LN5@CBEEng2War:

; 989  : 	}
; 990  : 
; 991  : 	CPLight*			pCPLight;
; 992  : 	FackClass*		faultSys;
; 993  : 
; 994  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 995  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 996  : 
; 997  : 
; 998  : 	// MD -- 20031221: re-wrote this so that the ENGINE half of this split face works like
; 999  : 	// the dash one says it does.
; 1000 : 	// NB!!!!  I changed the state table swapping the last two over so any cockpit art that
; 1001 : 	// has four state support needs to flip the last two srcloc lines in the dat file for
; 1002 : 	// this lamp now.
; 1003 : 
; 1004 : 	int engine = 0, fire = 0;

	mov	DWORD PTR _engine$[ebp], 0
	mov	DWORD PTR _fire$[ebp], 0

; 1005 : 
; 1006 : 	if (
; 1007 : 		((playerAC->af->rpm2 <= 0.6F) &&
; 1008 : 		(playerAC->MainPower() == AircraftClass::MainPowerMain)) || 
; 1009 : 		(cockpitFlightData.ftit2 > 1100.0F)
; 1010 : 	){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR [edx+1216]
	jb	SHORT $LN2@CBEEng2War
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	cmp	eax, 2
	je	SHORT $LN3@CBEEng2War
$LN2@CBEEng2War:
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+100
	comiss	xmm0, DWORD PTR __real@44898000
	jbe	SHORT $LN4@CBEEng2War
$LN3@CBEEng2War:

; 1011 : 		engine = 1;

	mov	DWORD PTR _engine$[ebp], 1
$LN4@CBEEng2War:

; 1012 : 	}
; 1013 : 
; 1014 : 	if (faultSys->GetFault(FaultClass::eng2_fault) & eng_fire){

	push	9
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 3
	je	SHORT $LN1@CBEEng2War

; 1015 : 		fire = 2;

	mov	DWORD PTR _fire$[ebp], 2
$LN1@CBEEng2War:

; 1016 : 	}
; 1017 : 
; 1018 : 	pCPLight->mState = engine + fire; // 0 == off, 1 == ENGINE, 2 == ENG FIRE, 3 == both

	mov	eax, DWORD PTR _engine$[ebp]
	add	eax, DWORD PTR _fire$[ebp]
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], eax
$LN6@CBEEng2War:

; 1019 : 
; 1020 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEEng2WarningLight@@YAXPAX@Z ENDP			; CBEEng2WarningLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEHydPressB@@YAXPAX@Z PROC				; CBEHydPressB

; 1132 : void CBEHydPressB(void * pObject) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1133 : 
; 1134 : 	CPLight	*pCPLight;
; 1135 : 
; 1136 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1137 : 	
; 1138 : 	// JPO B circuit failure
; 1139 : 	if(((AircraftClass*) pCPLight->mpOwnship)->af->HydraulicB()) {

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?HydraulicB@AirframeClass@@QAEHXZ	; AirframeClass::HydraulicB
	test	eax, eax
	je	SHORT $LN2@CBEHydPres

; 1140 : 	    pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1141 : 	}
; 1142 : 	else{

	jmp	SHORT $LN3@CBEHydPres
$LN2@CBEHydPres:

; 1143 : 	    pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEHydPres:

; 1144 : 	}
; 1145 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEHydPressB@@YAXPAX@Z ENDP				; CBEHydPressB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEHydPressA@@YAXPAX@Z PROC				; CBEHydPressA

; 1116 : void CBEHydPressA(void * pObject) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1117 : 
; 1118 : 	CPLight	*pCPLight;
; 1119 : 
; 1120 : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 1121 :     
; 1122 : 	// JPO A circuit failure
; 1123 : 	if(((AircraftClass*) pCPLight->mpOwnship)->af->HydraulicA()) {

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR [edx+932]
	call	?HydraulicA@AirframeClass@@QAEHXZ	; AirframeClass::HydraulicA
	test	eax, eax
	je	SHORT $LN2@CBEHydPres

; 1124 : 		pCPLight->mState	= CPLIGHT_ON;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 1125 : 	}
; 1126 : 	else{

	jmp	SHORT $LN3@CBEHydPres
$LN2@CBEHydPres:

; 1127 : 		pCPLight->mState	= CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN3@CBEHydPres:

; 1128 : 	}
; 1129 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEHydPressA@@YAXPAX@Z ENDP				; CBEHydPressA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECaution17@@YAXPAX@Z PROC				; CBECaution17

; 1023 : void CBECaution17(void * pObject) {

	push	ebp
	mov	ebp, esp

; 1024 : 	CheckCaution1(pObject, alt_low);

	push	2
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 1025 : }

	pop	ebp
	ret	0
?CBECaution17@@YAXPAX@Z ENDP				; CBECaution17
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -20					; size = 4
_pCPLight$ = -16					; size = 4
_fire$ = -12						; size = 4
_engine$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution16@@YAXPAX@Z PROC				; CBECaution16

; 926  : void CBECaution16(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 927  : 	CPLight*			pCPLight;
; 928  : 	FackClass*		faultSys;
; 929  : 
; 930  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 931  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 932  : 
; 933  : #if 0
; 934  : 	// These are not faults, they are cautions
; 935  : 	switch (faultSys->GetFault(FaultClass::eng_fault)) {
; 936  : 	case eng_fire: // JPO just an engine fire 
; 937  : 	    pCPLight->mState = 3;
; 938  : 	    break;
; 939  : 	case 0: // nothing
; 940  : 	    pCPLight->mState = 0;
; 941  : 	    break;
; 942  : 	default: // either just something else or both
; 943  : 	    if (faultSys->GetFault(FaultClass::eng_fault) & eng_fire)
; 944  : 		pCPLight->mState = 2;
; 945  : 	    else
; 946  : 		pCPLight->mState = 1;
; 947  : 	    break;
; 948  : 	}
; 949  : 
; 950  : #endif
; 951  : 
; 952  : 	// MD -- 20031221: re-wrote this so that the ENGINE half of this split face works like
; 953  : 	// the dash one says it does.
; 954  : 	// NB!!!!  I changed the state table swapping the last two over so any cockpit art that
; 955  : 	// has four state support needs to flip the last two srcloc lines in the dat file for
; 956  : 	// this lamp now.
; 957  : 
; 958  : 	int engine = 0, fire = 0;

	mov	DWORD PTR _engine$[ebp], 0
	mov	DWORD PTR _fire$[ebp], 0

; 959  : 
; 960  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 961  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN5@CBECaution

; 962  : 		return;

	jmp	SHORT $LN6@CBECaution
$LN5@CBECaution:

; 963  : 	}
; 964  : 
; 965  : 	if (
; 966  : 		(
; 967  : 			(playerAC->af->rpm <= 0.6F) &&
; 968  : 			(playerAC->MainPower() == AircraftClass::MainPowerMain)
; 969  : 		) || 
; 970  : 		(cockpitFlightData.ftit > 1100.0F)
; 971  : 	){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR [edx+1212]
	jb	SHORT $LN2@CBECaution
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	cmp	eax, 2
	je	SHORT $LN3@CBECaution
$LN2@CBECaution:
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+96
	comiss	xmm0, DWORD PTR __real@44898000
	jbe	SHORT $LN4@CBECaution
$LN3@CBECaution:

; 972  : 		engine = 1;

	mov	DWORD PTR _engine$[ebp], 1
$LN4@CBECaution:

; 973  : 	}
; 974  : 
; 975  : 	if (faultSys->GetFault(FaultClass::eng_fault) & eng_fire){

	push	8
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 3
	je	SHORT $LN1@CBECaution

; 976  : 		fire = 2;

	mov	DWORD PTR _fire$[ebp], 2
$LN1@CBECaution:

; 977  : 	}
; 978  : 
; 979  : 	pCPLight->mState = engine + fire; // 0 == off, 1 == ENGINE, 2 == ENG FIRE, 3 == both

	mov	eax, DWORD PTR _engine$[ebp]
	add	eax, DWORD PTR _fire$[ebp]
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], eax
$LN6@CBECaution:

; 980  : 
; 981  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution16@@YAXPAX@Z ENDP				; CBECaution16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -16					; size = 4
tv91 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution15@@YAXPAX@Z PROC				; CBECaution15

; 906  : void CBECaution15(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 907  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 908  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN1@CBECaution

; 909  : 		return;

	jmp	SHORT $LN2@CBECaution
$LN1@CBECaution:

; 910  : 	}
; 911  : 
; 912  : 	CPLight*			pCPLight;
; 913  : 	FackClass*		faultSys;
; 914  : 
; 915  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 916  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 917  : 
; 918  : 	pCPLight->mState = (playerAC->af->rpm * 37.0F) < 15.0F ||
; 919  : 	    faultSys->GetFault(FaultClass::eng_fault) != 0 ||
; 920  : 	    !playerAC->af->HydraulicOK();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1212]
	mulss	xmm0, DWORD PTR __real@42140000
	movss	xmm1, DWORD PTR __real@41700000
	comiss	xmm1, xmm0
	ja	SHORT $LN4@CBECaution
	push	8
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN4@CBECaution
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?HydraulicOK@AirframeClass@@QAEHXZ	; AirframeClass::HydraulicOK
	test	eax, eax
	je	SHORT $LN4@CBECaution
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN5@CBECaution
$LN4@CBECaution:
	mov	DWORD PTR tv91[ebp], 1
$LN5@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN2@CBECaution:

; 921  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution15@@YAXPAX@Z ENDP				; CBECaution15
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv162 = -32						; size = 4
tv157 = -28						; size = 4
_canopyopen$ = -24					; size = 4
tv130 = -20						; size = 4
tv89 = -16						; size = 4
_faultSys$ = -12					; size = 4
_playerAC$ = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution14@@YAXPAX@Z PROC				; CBECaution14

; 872  : void CBECaution14(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 873  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 874  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN6@CBECaution

; 875  : 		return;

	jmp	$LN7@CBECaution
$LN6@CBECaution:

; 876  : 	}
; 877  : 
; 878  : 	CPLight*			pCPLight;
; 879  : 	FackClass*		faultSys;
; 880  : 
; 881  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 882  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 883  : 
; 884  : 	//pCPLight->mState = (2 * faultSys->GetFault(FaultClass::fcc_fault) || faultSys->GetFault(FaultClass::dmux_fault)) + faultSys->GetFault(FaultClass::hud_fault);
; 885  : 	pCPLight->mState = 0;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 886  : // copied canopy fault code
; 887  : 	int canopyopen;
; 888  : 	if (playerAC->IsComplex()){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN5@CBECaution

; 889  : 	    canopyopen = playerAC->GetDOFValue(COMP_CANOPY_DOF) > 0;

	push	30					; 0000001eH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR tv157[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@CBECaution
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN10@CBECaution
$LN9@CBECaution:
	mov	DWORD PTR tv89[ebp], 0
$LN10@CBECaution:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _canopyopen$[ebp], edx

; 890  : 	}
; 891  : 	else {

	jmp	SHORT $LN4@CBECaution
$LN5@CBECaution:

; 892  : 	    canopyopen = playerAC->GetDOFValue(SIMP_CANOPY_DOF) > 0;

	push	23					; 00000017H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN11@CBECaution
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN12@CBECaution
$LN11@CBECaution:
	mov	DWORD PTR tv130[ebp], 0
$LN12@CBECaution:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _canopyopen$[ebp], eax
$LN4@CBECaution:

; 893  : 	}
; 894  : 
; 895  : 	if (canopyopen || (faultSys && faultSys->GetFault(canopy))){

	cmp	DWORD PTR _canopyopen$[ebp], 0
	jne	SHORT $LN2@CBECaution
	cmp	DWORD PTR _faultSys$[ebp], 0
	je	SHORT $LN3@CBECaution
	push	8
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
$LN2@CBECaution:

; 896  : 		pCPLight->mState = 1;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1
$LN3@CBECaution:

; 897  : 	}
; 898  : 
; 899  : 	if (faultSys->GetFault(FaultClass::fcc_fault)){

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN1@CBECaution

; 900  : 		pCPLight->mState += 2;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	eax, DWORD PTR [edx+148]
	add	eax, 2
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], eax
$LN1@CBECaution:
$LN7@CBECaution:

; 901  : 	}
; 902  : 
; 903  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution14@@YAXPAX@Z ENDP				; CBECaution14
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv179 = -20						; size = 4
tv174 = -16						; size = 4
tv168 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution13@@YAXPAX@Z PROC				; CBECaution13

; 831  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 832  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 833  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN9@CBECaution

; 834  : 		return;

	jmp	$LN10@CBECaution
$LN9@CBECaution:

; 835  : 	}
; 836  : 
; 837  : 	CPLight*			pCPLight;
; 838  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 839  : 	
; 840  : 	if (playerAC->OnGround()){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN8@CBECaution

; 841  : 		//MI set it to off here
; 842  : 		pCPLight->mState = CPLIGHT_OFF;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 843  : 	}
; 844  : 	else {

	jmp	$LN1@CBECaution
$LN8@CBECaution:

; 845  : 		if(g_bTO_LDG_LightFix) {

	movzx	edx, BYTE PTR ?g_bTO_LDG_LightFix@@3_NA	; g_bTO_LDG_LightFix
	test	edx, edx
	je	SHORT $LN6@CBECaution

; 846  : 			if (playerAC->mFaults && playerAC->mFaults->GetFault(to_ldg_config)){

	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+928], 0
	je	SHORT $LN5@CBECaution
	push	9
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN5@CBECaution

; 847  : 				pCPLight->mState = TRUE;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 848  : 			}
; 849  : 			else{

	jmp	SHORT $LN4@CBECaution
$LN5@CBECaution:

; 850  : 				pCPLight->mState = FALSE;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN4@CBECaution:

; 851  : 			}
; 852  : 		}
; 853  : 		else {

	jmp	$LN1@CBECaution
$LN6@CBECaution:

; 854  : 			if (
; 855  : 				//RV - I-Hawk - changed altitude value from 10000 to 5000 according to Dannycoh
; 856  : 				(playerAC->ZPos() > -5000.0F) &&
; 857  : 				(playerAC->GetKias() < 190.0F) && 
; 858  : 				(playerAC->ZDelta() * 60.0F >= 250.0F) && 
; 859  : 				(playerAC->af->gearPos != 1.0F)
; 860  : 			){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv168[ebp]
	comiss	xmm0, DWORD PTR __real@c59c4000
	jbe	SHORT $LN2@CBECaution
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv174[ebp]
	movss	xmm0, DWORD PTR __real@433e0000
	comiss	xmm0, DWORD PTR tv174[ebp]
	jbe	SHORT $LN2@CBECaution
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv179[ebp]
	movss	xmm0, DWORD PTR tv179[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR __real@437a0000
	jb	SHORT $LN2@CBECaution
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CBECaution

; 861  : 				pCPLight->mState = TRUE;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 862  : 			}
; 863  : 			else {

	jmp	SHORT $LN1@CBECaution
$LN2@CBECaution:

; 864  : 				pCPLight->mState = FALSE;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN1@CBECaution:
$LN10@CBECaution:

; 865  : 			}
; 866  : 		}
; 867  : 	}
; 868  : 	//(In air and Altitude < 10,000ft and speed < 190 kts and descent >= 250FPM and LGs not down or TEF's not down) or (on ground and TEF's not fullydown) or (
; 869  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution13@@YAXPAX@Z ENDP				; CBECaution13
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution12@@YAXPAX@Z PROC				; CBECaution12

; 819  : void CBECaution12(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 820  : 	CPLight*			pCPLight;
; 821  : 	FackClass*		faultSys;
; 822  : 
; 823  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 824  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 825  : 
; 826  : 	pCPLight->mState = (faultSys->GetFault(FaultClass::eng_fault) != 0) ;

	push	8
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 827  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution12@@YAXPAX@Z ENDP				; CBECaution12
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECaution11@@YAXPAX@Z PROC				; CBECaution11

; 814  : void CBECaution11(void * pObject) {

	push	ebp
	mov	ebp, esp

; 815  :   CheckCaution1(pObject, cabin_press_fault); // ... and again

	push	20					; 00000014H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 816  : }

	pop	ebp
	ret	0
?CBECaution11@@YAXPAX@Z ENDP				; CBECaution11
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBECaution10@@YAXPAX@Z PROC				; CBECaution10

; 809  : void CBECaution10(void * pObject) {

	push	ebp
	mov	ebp, esp

; 810  :   CheckCaution1(pObject, nws_fault); // JPO - lets use the routine...

	push	19					; 00000013H
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckCaution1@@YAXPAXW4type_CSubSystem@@@Z ; CheckCaution1
	add	esp, 8

; 811  : }

	pop	ebp
	ret	0
?CBECaution10@@YAXPAX@Z ENDP				; CBECaution10
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution9@@YAXPAX@Z PROC				; CBECaution9

; 797  : void CBECaution9(void *pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 798  : 	CPLight*			pCPLight;
; 799  : 	FackClass*		faultSys;
; 800  : 
; 801  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 802  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 803  : 
; 804  : 	// use the hook caution to set it!
; 805  : 	pCPLight->mState = faultSys->GetFault(hook_fault) != 0;

	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 806  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution9@@YAXPAX@Z ENDP				; CBECaution9
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution8@@YAXPAX@Z PROC				; CBECaution8

; 785  : void CBECaution8(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 786  : 	CPLight*			pCPLight;
; 787  : 	FackClass*		faultSys;
; 788  : 
; 789  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 790  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 791  : 
; 792  : 	// JPO Fix
; 793  : 	pCPLight->mState = faultSys->GetFault(FaultClass::rwr_fault) != 0;

	push	25					; 00000019H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 794  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution8@@YAXPAX@Z ENDP				; CBECaution8
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution7@@YAXPAX@Z PROC				; CBECaution7

; 773  : void CBECaution7(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 774  : 	CPLight*			pCPLight;
; 775  : 	FackClass*		faultSys;
; 776  : 
; 777  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 778  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 779  : 
; 780  : 	// IFF - JPO fix
; 781  : 	pCPLight->mState = faultSys->GetFault(FaultClass::iff_fault) != 0;

	push	19					; 00000013H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 782  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution7@@YAXPAX@Z ENDP				; CBECaution7
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBEThreatWarn10@@YAXPAX@Z PROC				; CBEThreatWarn10

; 676  : void CBEThreatWarn10(void * pObject) {

	push	ebp
	mov	ebp, esp

; 677  : 
; 678  : 	CheckThreatWarn(pObject, system_power);

	push	8
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z ; CheckThreatWarn
	add	esp, 8

; 679  : }

	pop	ebp
	ret	0
?CBEThreatWarn10@@YAXPAX@Z ENDP				; CBEThreatWarn10
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBEThreatWarn9@@YAXPAX@Z PROC				; CBEThreatWarn9

; 671  : void CBEThreatWarn9(void * pObject) {

	push	ebp
	mov	ebp, esp

; 672  : 
; 673  : 	CheckThreatWarn(pObject, low_altitude);

	push	9
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z ; CheckThreatWarn
	add	esp, 8

; 674  : }

	pop	ebp
	ret	0
?CBEThreatWarn9@@YAXPAX@Z ENDP				; CBEThreatWarn9
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBEThreatWarn8@@YAXPAX@Z PROC				; CBEThreatWarn8

; 666  : void CBEThreatWarn8(void * pObject) {

	push	ebp
	mov	ebp, esp

; 667  : 
; 668  : 	CheckThreatWarn(pObject, activate_power);

	push	7
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z ; CheckThreatWarn
	add	esp, 8

; 669  : }

	pop	ebp
	ret	0
?CBEThreatWarn8@@YAXPAX@Z ENDP				; CBEThreatWarn8
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
?CBEThreatWarn7@@YAXPAX@Z PROC				; CBEThreatWarn7

; 661  : void CBEThreatWarn7(void * pObject) {

	push	ebp
	mov	ebp, esp

; 662  : 
; 663  : 	CheckThreatWarn(pObject, search);

	push	6
	mov	eax, DWORD PTR _pObject$[ebp]
	push	eax
	call	?CheckThreatWarn@@YAXPAXW4type_TWSubSystem@@@Z ; CheckThreatWarn
	add	esp, 8

; 664  : }

	pop	ebp
	ret	0
?CBEThreatWarn7@@YAXPAX@Z ENDP				; CBEThreatWarn7
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution6@@YAXPAX@Z PROC				; CBECaution6

; 761  : void CBECaution6(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 762  : 	CPLight*			pCPLight;
; 763  : 	FackClass*		faultSys;
; 764  : 
; 765  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 766  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 767  : 
; 768  : 	// JPO fix
; 769  : 	pCPLight->mState = faultSys->GetFault(FaultClass::ralt_fault) != 0;

	push	24					; 00000018H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 770  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution6@@YAXPAX@Z ENDP				; CBECaution6
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -16					; size = 4
tv88 = -12						; size = 4
tv81 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution5@@YAXPAX@Z PROC				; CBECaution5

; 743  : void CBECaution5(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 744  : 
; 745  : 	CPLight*		pCPLight;
; 746  : 	FackClass*		faultSys;
; 747  : 
; 748  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 749  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 750  : 
; 751  : 	// JPO fix
; 752  : 	if(!g_bRealisticAvionics){

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN2@CBECaution

; 753  : 		pCPLight->mState = faultSys->GetFault(FaultClass::amux_fault) != 0;

	push	0
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN5@CBECaution
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN6@CBECaution
$LN5@CBECaution:
	mov	DWORD PTR tv81[ebp], 0
$LN6@CBECaution:
	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR [edx+148], eax

; 754  : 	}
; 755  : 	else{

	jmp	SHORT $LN3@CBECaution
$LN2@CBECaution:

; 756  : 		pCPLight->mState = SimDriver.GetPlayerAircraft()->mFaults->NeedAckAvioncFault != 0;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+928]
	cmp	DWORD PTR [ecx+560], 0
	je	SHORT $LN7@CBECaution
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN8@CBECaution
$LN7@CBECaution:
	mov	DWORD PTR tv88[ebp], 0
$LN8@CBECaution:
	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR [edx+148], eax
$LN3@CBECaution:

; 757  : 	}
; 758  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution5@@YAXPAX@Z ENDP				; CBECaution5
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -20					; size = 4
tv128 = -16						; size = 4
tv86 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution4@@YAXPAX@Z PROC				; CBECaution4

; 727  : void CBECaution4(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 728  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 729  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN1@CBECaution

; 730  : 		return;

	jmp	SHORT $LN2@CBECaution
$LN1@CBECaution:

; 731  : 	}
; 732  : 
; 733  : 	CPLight*			pCPLight;
; 734  : 	FackClass*		faultSys;
; 735  : 
; 736  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 737  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 738  : 
; 739  : 	pCPLight->mState = (playerAC->af->Fuel() < 750.0F) || faultSys->GetFault(FaultClass::fms_fault);

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv128[ebp]
	movss	xmm0, DWORD PTR __real@443b8000
	comiss	xmm0, DWORD PTR tv128[ebp]
	ja	SHORT $LN4@CBECaution
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN4@CBECaution
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN5@CBECaution
$LN4@CBECaution:
	mov	DWORD PTR tv86[ebp], 1
$LN5@CBECaution:
	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR [edx+148], eax
$LN2@CBECaution:

; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution4@@YAXPAX@Z ENDP				; CBECaution4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
tv136 = -20						; size = 4
_faultSys$ = -16					; size = 4
tv90 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution3@@YAXPAX@Z PROC				; CBECaution3

; 709  : void CBECaution3(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 710  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 711  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN1@CBECaution

; 712  : 		return;

	jmp	SHORT $LN2@CBECaution
$LN1@CBECaution:

; 713  : 	}
; 714  : 
; 715  : 	CPLight*			pCPLight;
; 716  : 	FackClass*		faultSys;
; 717  : 
; 718  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 719  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 720  : 	pCPLight->mState = (faultSys->GetFault(FaultClass::eng_fault) != 0) && 
; 721  : 	    playerAC->af->rpm <= 0.75 &&
; 722  : 	    playerAC->af->FuelFlow() > 0.0f
; 723  : 	; // JPO

	push	8
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN4@CBECaution
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	cvtss2sd xmm0, DWORD PTR [edx+1212]
	movsd	xmm1, QWORD PTR __real@3fe8000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN4@CBECaution
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?FuelFlow@AirframeClass@@QAEMXZ		; AirframeClass::FuelFlow
	fstp	DWORD PTR tv136[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@CBECaution
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN5@CBECaution
$LN4@CBECaution:
	mov	DWORD PTR tv90[ebp], 0
$LN5@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [ecx+148], edx
$LN2@CBECaution:

; 724  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution3@@YAXPAX@Z ENDP				; CBECaution3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution2@@YAXPAX@Z PROC				; CBECaution2

; 696  : void CBECaution2(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 697  : 
; 698  : 	CPLight*			pCPLight;
; 699  : 	FackClass*		faultSys;
; 700  : 
; 701  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 702  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 703  : 
; 704  : 	// JPO
; 705  : 	pCPLight->mState = faultSys->GetFault(le_flaps_fault) != 0;

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 706  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution2@@YAXPAX@Z ENDP				; CBECaution2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_faultSys$ = -12					; size = 4
tv79 = -8						; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBECaution1@@YAXPAX@Z PROC				; CBECaution1

; 684  : void CBECaution1(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 685  : 
; 686  : 	CPLight*			pCPLight;
; 687  : 	FackClass*		faultSys;
; 688  : 
; 689  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 690  : 	faultSys	= ((AircraftClass*) pCPLight->mpOwnship)->mFaults;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR [edx+928]
	mov	DWORD PTR _faultSys$[ebp], eax

; 691  : 
; 692  : 	pCPLight->mState = faultSys->GetFault(FaultClass::flcs_fault) != 0;

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN3@CBECaution
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@CBECaution
$LN3@CBECaution:
	mov	DWORD PTR tv79[ebp], 0
$LN4@CBECaution:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+148], edx

; 693  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBECaution1@@YAXPAX@Z ENDP				; CBECaution1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -12					; size = 4
_currentState$ = -8					; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CheckLandingGearHandle@@YAXPAX@Z PROC			; CheckLandingGearHandle

; 377  : void CheckLandingGearHandle(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 378  : 
; 379  : 	CPLight *pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 380  : 	int	currentState;
; 381  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 382  : 	if (playerAC == NULL || !playerAC->IsSetFlag(MOTION_OWNSHIP)){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN7@CheckLandi
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN8@CheckLandi
$LN7@CheckLandi:

; 383  : 		return;

	jmp	$LN9@CheckLandi
$LN8@CheckLandi:

; 384  : 	}
; 385  : 
; 386  : 	if (playerAC->af->gearHandle <= 0.0F){ 

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1556]
	jb	SHORT $LN6@CheckLandi

; 387  : 		if(playerAC->af->gearPos == 0.0F && !playerAC->mFaults->GetFault(FaultClass::gear_fault)){

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@CheckLandi
	push	15					; 0000000fH
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN5@CheckLandi

; 388  : 			currentState = 0;				// handle up & wheels locked				

	mov	DWORD PTR _currentState$[ebp], 0

; 389  : 		}
; 390  : 		else {

	jmp	SHORT $LN4@CheckLandi
$LN5@CheckLandi:

; 391  : 			currentState = 1;				// handle up & wheels moving

	mov	DWORD PTR _currentState$[ebp], 1
$LN4@CheckLandi:

; 392  : 		}
; 393  : 	}
; 394  : 	else {

	jmp	SHORT $LN1@CheckLandi
$LN6@CheckLandi:

; 395  : 		if (playerAC->af->gearPos == 1.0F && !playerAC->mFaults->GetFault(FaultClass::gear_fault)){

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1552]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@CheckLandi
	push	15					; 0000000fH
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@CheckLandi

; 396  : 			currentState = 2;				// handle down & wheels locked

	mov	DWORD PTR _currentState$[ebp], 2

; 397  : 		}
; 398  : 		else {

	jmp	SHORT $LN1@CheckLandi
$LN2@CheckLandi:

; 399  : 			currentState = 3;				// handle down & wheels moving

	mov	DWORD PTR _currentState$[ebp], 3
$LN1@CheckLandi:

; 400  : 		}
; 401  : 	}
; 402  : 	pCPLight->mState = currentState;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR _currentState$[ebp]
	mov	DWORD PTR [eax+148], ecx
$LN9@CheckLandi:

; 403  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckLandingGearHandle@@YAXPAX@Z ENDP			; CheckLandingGearHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEDiscLight@@YAXPAX@Z PROC				; CBEDiscLight

; 644  : void CBEDiscLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 645  : 
; 646  : 	CPLight*		pCPLight;
; 647  : 
; 648  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 649  : 
; 650  : 	if(OTWDriver.pCockpitManager->mMiscStates.mRefuelState == CPLIGHT_AR_NWS_DISC)

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [ecx+308], 3
	jne	SHORT $LN2@CBEDiscLig

; 651  : 	{
; 652  : 		pCPLight->mState	= TRUE;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 1

; 653  : 	}
; 654  : 	else {

	jmp	SHORT $LN3@CBEDiscLig
$LN2@CBEDiscLig:

; 655  : 		pCPLight->mState	= FALSE;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN3@CBEDiscLig:

; 656  : 	}
; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEDiscLight@@YAXPAX@Z ENDP				; CBEDiscLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBERefuelLight@@YAXPAX@Z PROC				; CBERefuelLight

; 607  : void CBERefuelLight(void * pObject){

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 608  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 609  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN6@CBERefuelL

; 610  : 		return;

	jmp	$LN7@CBERefuelL
$LN6@CBERefuelL:

; 611  : 	}	
; 612  : 	CPLight*		pCPLight;
; 613  : 
; 614  : 	pCPLight				= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 615  : 
; 616  : // MD -- 20031215: moving this to cautions.cpp to ensure that the state is set independent of whether the lamp is being
; 617  : // drawn in the OTW view currently or not,
; 618  : //	if(OTWDriver.pCockpitManager->mMiscStates.mRefuelState == 3 && (vuxGameTime > (OTWDriver.pCockpitManager->mMiscStates.mRefuelTimer + 3000))) {
; 619  : //		OTWDriver.pCockpitManager->mMiscStates.SetRefuelState(0);
; 620  : //	}
; 621  : 
; 622  : 	
; 623  : 
; 624  : 	if (playerAC->af->IsSet(AirframeClass::NoseSteerOn)) {

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN5@CBERefuelL

; 625  : 		pCPLight->mState	= CPLIGHT_AR_NWS_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 2
$LN5@CBERefuelL:

; 626  : 	}
; 627  : 
; 628  : 	if (playerAC->af->IsEngineFlag(AirframeClass::FuelDoorOpen)){

	push	4
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
	test	eax, eax
	je	SHORT $LN4@CBERefuelL

; 629  : 		pCPLight->mState	= CPLIGHT_AR_NWS_RDY;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 630  : 		if (OTWDriver.pCockpitManager->mMiscStates.mRefuelState >CPLIGHT_AR_NWS_RDY){

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [edx+308], 1
	jle	SHORT $LN3@CBERefuelL

; 631  : 			pCPLight->mState	= OTWDriver.pCockpitManager->mMiscStates.mRefuelState;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+308]
	mov	DWORD PTR [eax+148], edx
$LN3@CBERefuelL:

; 632  : 		}
; 633  : 	}
; 634  : 	//MI NWS light fix
; 635  : 	//else if (!SimDriver.GetPlayerEntity()->af->IsEngineFlag(AirframeClass::FuelDoorOpen) && pCPLight->mState > CPLIGHT_AR_NWS_RDY )
; 636  : 	else if (

	jmp	SHORT $LN7@CBERefuelL
$LN4@CBERefuelL:

; 637  : 		!playerAC->af->IsEngineFlag(AirframeClass::FuelDoorOpen) && 
; 638  : 		!playerAC->af->IsSet(AirframeClass::NoseSteerOn)
; 639  : 	){

	push	4
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
	test	eax, eax
	jne	SHORT $LN7@CBERefuelL
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN7@CBERefuelL

; 640  : 		pCPLight->mState = CPLIGHT_AR_NWS_OFF;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN7@CBERefuelL:

; 641  : 	}
; 642  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBERefuelLight@@YAXPAX@Z ENDP				; CBERefuelLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_currentAOAVal$ = -8					; size = 4
_pCPLight$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEAOAFastLight@@YAXPAX@Z PROC				; CBEAOAFastLight

; 583  : extern void CBEAOAFastLight(void * pObject){

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 584  : 	
; 585  : 	CPLight*		pCPLight;
; 586  : 	float			currentAOAVal;
; 587  : 
; 588  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 589  : 	currentAOAVal = cockpitFlightData.alpha;

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	movss	DWORD PTR _currentAOAVal$[ebp], xmm0

; 590  : 
; 591  : 	//MI in realistic these only work with gear down //JPG 2 Jan 04 - Nosir, -1 says AoA indexer is operational regardless of gear position
; 592  : /*	if(g_bRealisticAvionics && SimDriver.GetPlayerEntity() && 
; 593  : 		SimDriver.GetPlayerEntity()->af->gearPos < 0.8F)
; 594  : 	{
; 595  : 		pCPLight->mState = CPLIGHT_AOA_OFF;
; 596  : 		return;
; 597  : 	}*/
; 598  : 
; 599  : 	if(currentAOAVal < 11.5F) {

	movss	xmm0, DWORD PTR __real@41380000
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN2@CBEAOAFast

; 600  : 		pCPLight->mState = 1;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 1

; 601  : 	}
; 602  : 	else {

	jmp	SHORT $LN1@CBEAOAFast
$LN2@CBEAOAFast:

; 603  : 		pCPLight->mState = 0;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN1@CBEAOAFast:

; 604  : 	}
; 605  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEAOAFastLight@@YAXPAX@Z ENDP				; CBEAOAFastLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_playerAC$ = -16					; size = 4
tv70 = -12						; size = 4
_pCPLight$ = -8						; size = 4
_currentAOAVal$ = -4					; size = 4
_pObject$ = 8						; size = 4
?CBEAOAIndLight@@YAXPAX@Z PROC				; CBEAOAIndLight

; 523  : void CBEAOAIndLight(void * pObject){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 524  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 525  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN21@CBEAOAIndL

; 526  : 		return;

	jmp	$LN22@CBEAOAIndL
$LN21@CBEAOAIndL:

; 527  : 	}
; 528  : 
; 529  : 	CPLight*		pCPLight;
; 530  : 	float			currentAOAVal;
; 531  : 
; 532  : 	pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 533  : 	currentAOAVal = cockpitFlightData.alpha;

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	movss	DWORD PTR _currentAOAVal$[ebp], xmm0

; 534  : 
; 535  : 	//MI in realistic these only work with gear down  //JPG 2 Jan 04 - Nosir, -1 says AoA indexer is operational regardless of gear position
; 536  : /*	if(g_bRealisticAvionics && SimDriver.GetPlayerEntity() && 
; 537  : 		SimDriver.GetPlayerEntity()->af->gearPos < 0.8F)
; 538  : 	{
; 539  : 		pCPLight->mState = CPLIGHT_AOA_OFF;
; 540  : 		return;
; 541  : 	}*/
; 542  : 	//TJL 03/08/04 F18
; 543  : 
; 544  : 	switch (playerAC->af->GetTypeAC()){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GetTypeAC@AirframeClass@@QAEHXZ	; AirframeClass::GetTypeAC
	mov	DWORD PTR tv70[ebp], eax
	mov	edx, DWORD PTR tv70[ebp]
	sub	edx, 6
	mov	DWORD PTR tv70[ebp], edx
	cmp	DWORD PTR tv70[ebp], 4
	ja	$LN6@CBEAOAIndL
	mov	eax, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN24@CBEAOAIndL[eax*4]
$LN18@CBEAOAIndL:

; 545  : 		case 8:
; 546  : 		case 9:
; 547  : 		case 10:
; 548  : 			if (currentAOAVal >= 9.3F){

	movss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	comiss	xmm0, DWORD PTR __real@4114cccd
	jb	SHORT $LN17@CBEAOAIndL

; 549  : 				pCPLight->mState = CPLIGHT_AOA_SLOW;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 3
	jmp	SHORT $LN13@CBEAOAIndL
$LN17@CBEAOAIndL:

; 550  : 			}
; 551  : 			else if((currentAOAVal < 9.3F) && (currentAOAVal >= 6.9F)) {

	movss	xmm0, DWORD PTR __real@4114cccd
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN15@CBEAOAIndL
	movss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	comiss	xmm0, DWORD PTR __real@40dccccd
	jb	SHORT $LN15@CBEAOAIndL

; 552  : 				pCPLight->mState = CPLIGHT_AOA_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 2
	jmp	SHORT $LN13@CBEAOAIndL
$LN15@CBEAOAIndL:

; 553  : 			}
; 554  : 			else if(currentAOAVal < 6.8F) {

	movss	xmm0, DWORD PTR __real@40d9999a
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN13@CBEAOAIndL

; 555  : 				pCPLight->mState = CPLIGHT_AOA_FAST;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1
$LN13@CBEAOAIndL:

; 556  : 			}
; 557  : 		break;

	jmp	$LN19@CBEAOAIndL
$LN12@CBEAOAIndL:

; 558  : 		case 6:
; 559  : 		case 7:
; 560  : 			if(currentAOAVal >= 15.5F) {

	movss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	comiss	xmm0, DWORD PTR __real@41780000
	jb	SHORT $LN11@CBEAOAIndL

; 561  : 				pCPLight->mState = CPLIGHT_AOA_SLOW;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 3
	jmp	SHORT $LN7@CBEAOAIndL
$LN11@CBEAOAIndL:

; 562  : 			}
; 563  : 			else if((currentAOAVal < 15.5F) && (currentAOAVal >= 14.5F)) {

	movss	xmm0, DWORD PTR __real@41780000
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN9@CBEAOAIndL
	movss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	comiss	xmm0, DWORD PTR __real@41680000
	jb	SHORT $LN9@CBEAOAIndL

; 564  : 				pCPLight->mState = CPLIGHT_AOA_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 2
	jmp	SHORT $LN7@CBEAOAIndL
$LN9@CBEAOAIndL:

; 565  : 			}
; 566  : 			else if(currentAOAVal < 14.5F) {

	movss	xmm0, DWORD PTR __real@41680000
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN7@CBEAOAIndL

; 567  : 				pCPLight->mState = CPLIGHT_AOA_FAST;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1
$LN7@CBEAOAIndL:

; 568  : 			}
; 569  : 		break;

	jmp	SHORT $LN19@CBEAOAIndL
$LN6@CBEAOAIndL:

; 570  : 		default:
; 571  : 			if(currentAOAVal >= 14.0F) {

	movss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	comiss	xmm0, DWORD PTR __real@41600000
	jb	SHORT $LN5@CBEAOAIndL

; 572  : 				pCPLight->mState = CPLIGHT_AOA_SLOW;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 3
	jmp	SHORT $LN1@CBEAOAIndL
$LN5@CBEAOAIndL:

; 573  : 			}
; 574  : 			else if((currentAOAVal < 14.0F) && (currentAOAVal >= 11.5F)) {

	movss	xmm0, DWORD PTR __real@41600000
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN3@CBEAOAIndL
	movss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	comiss	xmm0, DWORD PTR __real@41380000
	jb	SHORT $LN3@CBEAOAIndL

; 575  : 				pCPLight->mState = CPLIGHT_AOA_ON;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 2
	jmp	SHORT $LN1@CBEAOAIndL
$LN3@CBEAOAIndL:

; 576  : 			}
; 577  : 			else if(currentAOAVal < 11.5F) {

	movss	xmm0, DWORD PTR __real@41380000
	comiss	xmm0, DWORD PTR _currentAOAVal$[ebp]
	jbe	SHORT $LN1@CBEAOAIndL

; 578  : 				pCPLight->mState = CPLIGHT_AOA_FAST;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1
$LN1@CBEAOAIndL:
$LN19@CBEAOAIndL:
$LN22@CBEAOAIndL:

; 579  : 			}
; 580  : 	}
; 581  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@CBEAOAIndL:
	DD	$LN12@CBEAOAIndL
	DD	$LN12@CBEAOAIndL
	DD	$LN18@CBEAOAIndL
	DD	$LN18@CBEAOAIndL
	DD	$LN18@CBEAOAIndL
?CBEAOAIndLight@@YAXPAX@Z ENDP				; CBEAOAIndLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEECMFailLight@@YAXPAX@Z PROC				; CBEECMFailLight

; 53   : void CBEECMFailLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 54   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 55   : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN6@CBEECMFail

; 56   : 		return;

	jmp	SHORT $LN7@CBEECMFail
$LN6@CBEECMFail:

; 57   : 	}
; 58   : 
; 59   : 	CPLight *pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 60   : 	if (playerAC->HasSPJamming()) {

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+276]
	call	eax
	test	eax, eax
	je	SHORT $LN5@CBEECMFail

; 61   : 		if (
; 62   : 			playerAC->mFaults->GetFault(FaultClass::epod_fault) || 
; 63   : 			playerAC->mFaults->GetFault(FaultClass::blkr_fault)
; 64   : 		){ 			

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@CBEECMFail
	push	1
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN4@CBEECMFail
$LN3@CBEECMFail:

; 65   : 			pCPLight->mState = TRUE;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 1

; 66   : 		}
; 67   : 		else {

	jmp	SHORT $LN2@CBEECMFail
$LN4@CBEECMFail:

; 68   : 			pCPLight->mState = FALSE;

	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN2@CBEECMFail:

; 69   : 		}
; 70   : 	}
; 71   : 	else {

	jmp	SHORT $LN7@CBEECMFail
$LN5@CBEECMFail:

; 72   : 		pCPLight->mState = FALSE;

	mov	edx, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [edx+148], 0
$LN7@CBEECMFail:

; 73   : 	}
; 74   : 
; 75   : 	//MI data extraction
; 76   : 	// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 77   : 	// looking at the cockpit view.
; 78   : 	//if (pCPLight->mState) 
; 79   : 	//{
; 80   : 	//	cockpitFlightData.SetLightBit2(FlightData::EcmFail);
; 81   : 	//}
; 82   : 	//else 
; 83   : 	//{
; 84   : 	//	cockpitFlightData.ClearLightBit2(FlightData::EcmFail);
; 85   : 	//}
; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEECMFailLight@@YAXPAX@Z ENDP				; CBEECMFailLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cblights.cpp
_TEXT	SEGMENT
_pCPLight$ = -12					; size = 4
tv90 = -8						; size = 4
tv74 = -4						; size = 4
_pObject$ = 8						; size = 4
?CBEECMPwrLight@@YAXPAX@Z PROC				; CBEECMPwrLight

; 31   : void CBEECMPwrLight(void * pObject) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 32   : 	CPLight *pCPLight	= (CPLight*) pObject;

	mov	eax, DWORD PTR _pObject$[ebp]
	mov	DWORD PTR _pCPLight$[ebp], eax

; 33   : 	
; 34   : 	if(SimDriver.GetPlayerEntity() && SimDriver.GetPlayerEntity()->HasSPJamming()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN2@CBEECMPwrL
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv74[ebp]
	mov	eax, DWORD PTR [edx+276]
	call	eax
	test	eax, eax
	je	SHORT $LN2@CBEECMPwrL

; 35   : 		pCPLight->mState = SimDriver.GetPlayerEntity()->IsSetFlag(ECM_ON) != FALSE;

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN5@CBEECMPwrL
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN6@CBEECMPwrL
$LN5@CBEECMPwrL:
	mov	DWORD PTR tv90[ebp], 0
$LN6@CBEECMPwrL:
	mov	ecx, DWORD PTR _pCPLight$[ebp]
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [ecx+148], edx

; 36   : 	}
; 37   : 	else {

	jmp	SHORT $LN3@CBEECMPwrL
$LN2@CBEECMPwrL:

; 38   : 		pCPLight->mState = FALSE;

	mov	eax, DWORD PTR _pCPLight$[ebp]
	mov	DWORD PTR [eax+148], 0
$LN3@CBEECMPwrL:

; 39   : 	}
; 40   : 	//MI data extraction
; 41   : 	// MD -- 20031011: moved to cautions.cpp so the bits are set even if the player isn't
; 42   : 	// looking at the cockpit view.
; 43   : 	//if (pCPLight->mState) 
; 44   : 	//{
; 45   : 	//	cockpitFlightData.SetLightBit2(FlightData::EcmPwr);
; 46   : 	//}
; 47   : 	//else 
; 48   : 	//{
; 49   : 	//	cockpitFlightData.ClearLightBit2(FlightData::EcmPwr);
; 50   : 	//}
; 51   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CBEECMPwrLight@@YAXPAX@Z ENDP				; CBEECMPwrLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ShowNaval@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowNaval@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::ShowNaval, COMDAT
; _this$ = ecx

; 42   : 	int ShowNaval (void)		{return showNaval;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+632]
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowNaval@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::ShowNaval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?TargetSep@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TargetSep@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::TargetSep, COMDAT
; _this$ = ecx

; 40   : 	int TargetSep (void)		{return targetSep;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+624]
	mov	esp, ebp
	pop	ebp
	ret	0
?TargetSep@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::TargetSep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?IsPriority@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPriority@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::IsPriority, COMDAT
; _this$ = ecx

; 39   : 	int IsPriority (void)		{return priorityMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+620]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPriority@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::IsPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?LaunchIndication@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LaunchIndication@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::LaunchIndication, COMDAT
; _this$ = ecx

; 28   : 	int LaunchIndication (void) {return missileActivity;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+640]
	mov	esp, ebp
	pop	ebp
	ret	0
?LaunchIndication@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::LaunchIndication
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?HasActivity@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
?HasActivity@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::HasActivity, COMDAT
; _this$ = ecx

; 27   : 	int HasActivity (void)		{return detectionList[0].entity != NULL;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 32					; 00000020H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+76], 0
	je	SHORT $LN3@HasActivit
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@HasActivit
$LN3@HasActivit:
	mov	DWORD PTR tv73[ebp], 0
$LN4@HasActivit:
	mov	eax, DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HasActivity@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::HasActivity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vehrwr.h
;	COMDAT ?LowAltPriority@VehRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LowAltPriority@VehRwrClass@@QAEHXZ PROC		; VehRwrClass::LowAltPriority, COMDAT
; _this$ = ecx

; 26   : 	int  LowAltPriority (void)	{return lowAltPriority;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+592]
	mov	esp, ebp
	pop	ebp
	ret	0
?LowAltPriority@VehRwrClass@@QAEHXZ ENDP		; VehRwrClass::LowAltPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetAeroData@AirframeClass@@QBEMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_which$ = 8						; size = 4
?GetAeroData@AirframeClass@@QBEMH@Z PROC		; AirframeClass::GetAeroData, COMDAT
; _this$ = ecx

; 1207 : 	float GetAeroData(int which) const { return aeroDataset[vehicleIndex].inputData[which]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, DWORD PTR _which$[ebp]
	fld	DWORD PTR [ecx+edx*4+16]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAeroData@AirframeClass@@QBEMH@Z ENDP		; AirframeClass::GetAeroData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?NumGear@AirframeClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumGear@AirframeClass@@QBEHXZ PROC			; AirframeClass::NumGear, COMDAT
; _this$ = ecx

; 1206 : 	int NumGear(void) const	{return FloatToInt32(aeroDataset[vehicleIndex].inputData[AeroDataSet::NumGear]);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, 4
	imul	edx, 13					; 0000000dH
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?NumGear@AirframeClass@@QBEHXZ ENDP			; AirframeClass::NumGear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?FuelFlow@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FuelFlow@AirframeClass@@QAEMXZ PROC			; AirframeClass::FuelFlow, COMDAT
; _this$ = ecx

; 1192 : 	float FuelFlow (void) {return fuelFlow;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?FuelFlow@AirframeClass@@QAEMXZ ENDP			; AirframeClass::FuelFlow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?Fuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Fuel@AirframeClass@@QAEMXZ PROC			; AirframeClass::Fuel, COMDAT
; _this$ = ecx

; 1183 : 	float Fuel (void) {return fuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?Fuel@AirframeClass@@QAEMXZ ENDP			; AirframeClass::Fuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_gen$ = 8						; size = 4
?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z PROC ; AirframeClass::GeneratorRunning, COMDAT
; _this$ = ecx

; 1130 : 	BOOL GeneratorRunning(Generator gen) { return (generators & gen) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1804]
	and	ecx, DWORD PTR _gen$[ebp]
	je	SHORT $LN3@GeneratorR
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@GeneratorR
$LN3@GeneratorR:
	mov	DWORD PTR tv67[ebp], 0
$LN4@GeneratorR:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ENDP ; AirframeClass::GeneratorRunning
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_ef$ = 8						; size = 4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z PROC ; AirframeClass::IsEngineFlag, COMDAT
; _this$ = ecx

; 1070 : 	int IsEngineFlag(EngineFlags ef) { return (engineFlags & ef) ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	and	ecx, DWORD PTR _ef$[ebp]
	je	SHORT $LN3@IsEngineFl
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsEngineFl
$LN3@IsEngineFl:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsEngineFl:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ENDP ; AirframeClass::IsEngineFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?HydraulicOK@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?HydraulicOK@AirframeClass@@QAEHXZ PROC			; AirframeClass::HydraulicOK, COMDAT
; _this$ = ecx

; 1041 : 	int HydraulicOK() { return hydrAB == HYDR_ALL ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1601]
	cmp	ecx, 3
	jne	SHORT $LN3@HydraulicO
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@HydraulicO
$LN3@HydraulicO:
	mov	DWORD PTR tv67[ebp], 0
$LN4@HydraulicO:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HydraulicOK@AirframeClass@@QAEHXZ ENDP			; AirframeClass::HydraulicOK
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?HydraulicB@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HydraulicB@AirframeClass@@QAEHXZ PROC			; AirframeClass::HydraulicB, COMDAT
; _this$ = ecx

; 1040 : 	int HydraulicB() { return (hydrAB & HYDR_B_SYSTEM); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+1601]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?HydraulicB@AirframeClass@@QAEHXZ ENDP			; AirframeClass::HydraulicB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?HydraulicA@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HydraulicA@AirframeClass@@QAEHXZ PROC			; AirframeClass::HydraulicA, COMDAT
; _this$ = ecx

; 1039 : 	int HydraulicA() { return (hydrAB & HYDR_A_SYSTEM); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+1601]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?HydraulicA@AirframeClass@@QAEHXZ ENDP			; AirframeClass::HydraulicA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?EpuIsHydrazine@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?EpuIsHydrazine@AirframeClass@@QAEHXZ PROC		; AirframeClass::EpuIsHydrazine, COMDAT
; _this$ = ecx

; 1031 : 	BOOL EpuIsHydrazine() { return (epuBurnState & EpuHydrazine) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1600]
	and	ecx, 1
	je	SHORT $LN3@EpuIsHydra
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@EpuIsHydra
$LN3@EpuIsHydra:
	mov	DWORD PTR tv68[ebp], 0
$LN4@EpuIsHydra:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?EpuIsHydrazine@AirframeClass@@QAEHXZ ENDP		; AirframeClass::EpuIsHydrazine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?EpuIsAir@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?EpuIsAir@AirframeClass@@QAEHXZ PROC			; AirframeClass::EpuIsAir, COMDAT
; _this$ = ecx

; 1030 : 	BOOL EpuIsAir() { return (epuBurnState & EpuAir) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1600]
	and	ecx, 2
	je	SHORT $LN3@EpuIsAir
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@EpuIsAir
$LN3@EpuIsAir:
	mov	DWORD PTR tv68[ebp], 0
$LN4@EpuIsAir:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?EpuIsAir@AirframeClass@@QAEHXZ ENDP			; AirframeClass::EpuIsAir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetTypeAC@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTypeAC@AirframeClass@@QAEHXZ PROC			; AirframeClass::GetTypeAC, COMDAT
; _this$ = ecx

; 809  : 	int GetTypeAC() {return auxaeroData->typeAC;};//TJL 02/28/04

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+3880]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTypeAC@AirframeClass@@QAEHXZ ENDP			; AirframeClass::GetTypeAC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
