; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Cockpit\popmenu.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?MenuColors@@3W40@A				; MenuColors
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?gMenuColorTable@@3PAUMenuColorStruct@@A	; gMenuColorTable
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
_BSS	SEGMENT
?MenuColors@@3W40@A DD 01H DUP (?)			; MenuColors
_BSS	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
_DATA	SEGMENT
?gMenuColorTable@@3PAUMenuColorStruct@@A DB 'black', 00H ; gMenuColorTable
	ORG $+14
	DD	0ff000000H
	DB	'white', 00H
	ORG $+14
	DD	0ffffffffH
	DB	'bright_red', 00H
	ORG $+9
	DD	0ff0000ffH
	DB	'bright_green', 00H
	ORG $+7
	DD	0ff00ff00H
	DB	'bright_blue', 00H
	ORG $+8
	DD	0ffff0000H
	DB	'dark_grey', 00H
	ORG $+10
	DD	0ff505050H
	DB	'light_grey', 00H
	ORG $+9
	DD	0ffc0c0c0H
	DB	'cyan', 00H
	ORG $+15
	DD	0ffffff00H
	DB	'yellow', 00H
	ORG $+13
	DD	0ff00ffffH
	DB	'dark_red', 00H
	ORG $+11
	DD	0ff000080H
_DATA	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?CurFont@VirtualDisplay@@SAHXZ			; VirtualDisplay::CurFont
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?FindMenuColorIndex@@YAHPADPAH@Z		; FindMenuColorIndex
PUBLIC	?FindMenuColorValue@@YAHPADPAK@Z		; FindMenuColorValue
PUBLIC	?ReadDataFile@MenuManager@@AAEXPAD@Z		; MenuManager::ReadDataFile
PUBLIC	?ParseManagerInfo@MenuManager@@AAEXPAD@Z	; MenuManager::ParseManagerInfo
PUBLIC	?ParseMenuInfo@MenuManager@@AAEXPADPAH1@Z	; MenuManager::ParseMenuInfo
PUBLIC	?ParsePageInfo@MenuManager@@AAEXPADPAH11@Z	; MenuManager::ParsePageInfo
PUBLIC	?ParseItemInfo@MenuManager@@AAEXPADPAH11@Z	; MenuManager::ParseItemInfo
PUBLIC	?ParseResInfo@MenuManager@@AAEXPADH@Z		; MenuManager::ParseResInfo
PUBLIC	?SendMenuMsg@MenuManager@@AAEXHHHVVU_ID@@@Z	; MenuManager::SendMenuMsg
PUBLIC	?CheckItemConditions@MenuManager@@AAEXH@Z	; MenuManager::CheckItemConditions
PUBLIC	?InitPage@MenuManager@@AAEXXZ			; MenuManager::InitPage
PUBLIC	?DisplayDraw@MenuManager@@QAEXXZ		; MenuManager::DisplayDraw
PUBLIC	?ProcessInput@MenuManager@@QAEXKHHH@Z		; MenuManager::ProcessInput
PUBLIC	?StepNextPage@MenuManager@@QAEXH@Z		; MenuManager::StepNextPage
PUBLIC	?StepPrevPage@MenuManager@@QAEXH@Z		; MenuManager::StepPrevPage
PUBLIC	?DeActivate@MenuManager@@QAEXXZ			; MenuManager::DeActivate
PUBLIC	?DeActivateAndClear@MenuManager@@QAEXXZ		; MenuManager::DeActivateAndClear
PUBLIC	??0MenuManager@@QAE@HH@Z			; MenuManager::MenuManager
PUBLIC	??1MenuManager@@QAE@XZ				; MenuManager::~MenuManager
PUBLIC	?MenuSendAtc@@YAXHH@Z				; MenuSendAtc
PUBLIC	?MenuSendAwacs@@YAXHVVU_ID@@H@Z			; MenuSendAwacs
PUBLIC	?MenuSendTanker@@YAXH@Z				; MenuSendTanker
PUBLIC	?PopUpFont@CockpitManager@@QAEHXZ		; CockpitManager::PopUpFont
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	?MenuSendWingman@@YAXHH@Z			; MenuSendWingman
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0BF@GDHKJNKG@art?2ckptart?2menu?4dat?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0M@MNHFKKGE@MENUMANAGER?$AA@		; `string'
PUBLIC	??_C@_04IILMDFMO@MENU?$AA@			; `string'
PUBLIC	??_C@_04NKLNNIHE@PAGE?$AA@			; `string'
PUBLIC	??_C@_04BLNHNEEM@ITEM?$AA@			; `string'
PUBLIC	??_C@_0L@JGAABLGD@RESOLUTION?$AA@		; `string'
PUBLIC	??_C@_0BC@HDIJPDCG@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_0BM@NFKNFDNE@Sending?5AWACS?5message?5?$CD?$CFd?4?6?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@bf19999a
PUBLIC	__real@bf333333
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strcmpi:PROC
EXTRN	_fgets:PROC
EXTRN	_sscanf:PROC
EXTRN	_sprintf:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_MonoPrint:PROC
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?ClearBuffers@ContextMPR@@QAEXG@Z:PROC		; ContextMPR::ClearBuffers
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?SetFont@VirtualDisplay@@SAXH@Z:PROC		; VirtualDisplay::SetFont
EXTRN	?GetViewport@VirtualDisplay@@QAEXPAM000@Z:PROC	; VirtualDisplay::GetViewport
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?SendCallToATC@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z:PROC ; SendCallToATC
EXTRN	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z:PROC ; SendCallToATC
EXTRN	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z:PROC ; SendCallToAWACS
EXTRN	?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z:PROC ; CreateCallToAWACS
EXTRN	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z:PROC	; AiSendPlayerCommand
EXTRN	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z:PROC ; AiDesignateTarget
EXTRN	?FindToken@@YAPADPAPADPBD@Z:PROC		; FindToken
EXTRN	_ResFOpen:PROC
EXTRN	_ResFClose:PROC
EXTRN	??0FalconATCMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconATCMessage::FalconATCMessage
EXTRN	??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconAWACSMessage::FalconAWACSMessage
EXTRN	??0FalconTankerMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconTankerMessage::FalconTankerMessage
EXTRN	?CommandsSetKeyCombo@@YAXKHPAX@Z:PROC		; CommandsSetKeyCombo
EXTRN	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z:PROC ; CampBaseClass::GetComponentIndex
EXTRN	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ:PROC ; CampBaseClass::GetComponentLead
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?FindTanker@SimulationDriver@@QAEPAVFlightClass@@PAVSimBaseClass@@@Z:PROC ; SimulationDriver::FindTanker
EXTRN	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ:PROC ; NavigationSystem::GetControlSrc
EXTRN	?GetTacanVUID@NavigationSystem@@QAEXW4Tacan_Channel_Src@1@PAVVU_ID@@@Z:PROC ; NavigationSystem::GetTacanVUID
EXTRN	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z:PROC ; NavigationSystem::GetAirbase
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?SimToGrid@@YAFM@Z:PROC				; SimToGrid
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuNullId@@3VVU_ID@@A:QWORD			; vuNullId
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?pFontSet@VirtualDisplay@@2PAUFontSet@@A:DWORD	; VirtualDisplay::pFontSet
EXTRN	?CommandsKeyCombo@@3HA:DWORD			; CommandsKeyCombo
EXTRN	?CommandsKeyComboMod@@3HA:DWORD			; CommandsKeyComboMod
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?MsgNumElements@@3PAHA:BYTE			; MsgNumElements
EXTRN	?FalconMsgIdStr@@3PAHA:BYTE			; FalconMsgIdStr
EXTRN	?FalconMsgElementTypes@@3PAPAHA:BYTE		; FalconMsgElementTypes
EXTRN	?TheEventStrings@@3PAPADA:BYTE			; TheEventStrings
EXTRN	?gpAiExtentStr@@3PAPADA:BYTE			; gpAiExtentStr
EXTRN	?AllAirList@@3PAVVuLinkedList@@A:DWORD		; AllAirList
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?MenuCallbackArray@@3PAP6AHHHHHVVU_ID@@@ZA:BYTE	; MenuCallbackArray
EXTRN	?g_bAWACSRequired@@3_NA:BYTE			; g_bAWACSRequired
EXTRN	?g_bDisableCommsBorder@@3_NA:BYTE		; g_bDisableCommsBorder
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NFKNFDNE@Sending?5AWACS?5message?5?$CD?$CFd?4?6?$AA@
CONST	SEGMENT
??_C@_0BM@NFKNFDNE@Sending?5AWACS?5message?5?$CD?$CFd?4?6?$AA@ DB 'Sendin'
	DB	'g AWACS message #%d.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HDIJPDCG@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BC@HDIJPDCG@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %'
	DB	'd %d %d %d %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGAABLGD@RESOLUTION?$AA@
CONST	SEGMENT
??_C@_0L@JGAABLGD@RESOLUTION?$AA@ DB 'RESOLUTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BLNHNEEM@ITEM?$AA@
CONST	SEGMENT
??_C@_04BLNHNEEM@ITEM?$AA@ DB 'ITEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKLNNIHE@PAGE?$AA@
CONST	SEGMENT
??_C@_04NKLNNIHE@PAGE?$AA@ DB 'PAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IILMDFMO@MENU?$AA@
CONST	SEGMENT
??_C@_04IILMDFMO@MENU?$AA@ DB 'MENU', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MNHFKKGE@MENUMANAGER?$AA@
CONST	SEGMENT
??_C@_0M@MNHFKKGE@MENUMANAGER?$AA@ DB 'MENUMANAGER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDHKJNKG@art?2ckptart?2menu?4dat?$AA@
CONST	SEGMENT
??_C@_0BF@GDHKJNKG@art?2ckptart?2menu?4dat?$AA@ DB 'art\ckptart\menu.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?MenuSendAwacs@@YAXHVVU_ID@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuSendAwacs@@YAXHVVU_ID@@H@Z$0
__unwindtable$?InitPage@MenuManager@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitPage@MenuManager@@AAEXXZ$0
__unwindtable$?MenuSendTanker@@YAXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuSendTanker@@YAXH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuSendTanker@@YAXH@Z$1
__unwindtable$?MenuSendAtc@@YAXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuSendAtc@@YAXHH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuSendAtc@@YAXHH@Z$1
__ehfuncinfo$?MenuSendTanker@@YAXH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MenuSendTanker@@YAXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?MenuSendAwacs@@YAXHVVU_ID@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MenuSendAwacs@@YAXHVVU_ID@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?MenuSendAtc@@YAXHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MenuSendAtc@@YAXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InitPage@MenuManager@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitPage@MenuManager@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_enumId$ = 8						; size = 4
_extent$ = 12						; size = 4
?MenuSendWingman@@YAXHH@Z PROC				; MenuSendWingman

; 986  : void MenuSendWingman(int enumId, int extent){

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 987  : 	AiSendPlayerCommand(enumId, extent, AiDesignateTarget(SimDriver.GetPlayerAircraft()));

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; AiDesignateTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enumId$[ebp]
	push	ecx
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H

; 988  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MenuSendWingman@@YAXHH@Z ENDP				; MenuSendWingman
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpmanager.h
;	COMDAT ?PopUpFont@CockpitManager@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PopUpFont@CockpitManager@@QAEHXZ PROC			; CockpitManager::PopUpFont, COMDAT
; _this$ = ecx

; 594  : 	int      PopUpFont(void) { return mPopUpFont;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+80]
	mov	esp, ebp
	pop	ebp
	ret	0
?PopUpFont@CockpitManager@@QAEHXZ ENDP			; CockpitManager::PopUpFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T2 = -80						; size = 8
$T3 = -72						; size = 8
_TankerId$ = -64					; size = 8
$T4 = -56						; size = 4
$T5 = -52						; size = 4
tv213 = -48						; size = 4
$T6 = -44						; size = 4
tv209 = -40						; size = 4
tv186 = -36						; size = 4
$T7 = -32						; size = 4
tv175 = -28						; size = 4
_theTanker$ = -24					; size = 4
_TankerMsg$ = -20					; size = 4
_flight$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_enumId$ = 8						; size = 4
?MenuSendTanker@@YAXH@Z PROC				; MenuSendTanker

; 991  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MenuSendTanker@@YAXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 992  : 	VU_ID							TankerId = vuNullId;

	mov	eax, DWORD PTR ?vuNullId@@3VVU_ID@@A
	mov	DWORD PTR _TankerId$[ebp], eax
	mov	ecx, DWORD PTR ?vuNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _TankerId$[ebp+4], ecx

; 993  : 	AircraftClass				*theTanker = NULL;

	mov	DWORD PTR _theTanker$[ebp], 0

; 994  : 	FalconTankerMessage		*TankerMsg;
; 995  : 	FlightClass					*flight;
; 996  : 	
; 997  : 	gNavigationSys->GetTacanVUID(gNavigationSys->GetControlSrc(), &TankerId);

	lea	edx, DWORD PTR _TankerId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ ; NavigationSystem::GetControlSrc
	push	eax
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetTacanVUID@NavigationSystem@@QAEXW4Tacan_Channel_Src@1@PAVVU_ID@@@Z ; NavigationSystem::GetTacanVUID

; 998  : 	
; 999  : 	if(TankerId == FalconNullId)	

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _TankerId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@MenuSendTa

; 1000 : 		flight = SimDriver.FindTanker(SimDriver.GetPlayerEntity());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindTanker@SimulationDriver@@QAEPAVFlightClass@@PAVSimBaseClass@@@Z ; SimulationDriver::FindTanker
	mov	DWORD PTR _flight$[ebp], eax

; 1001 : 	else 

	jmp	SHORT $LN4@MenuSendTa
$LN6@MenuSendTa:

; 1002 : 	{
; 1003 : 		flight = (Flight)vuDatabase->Find(TankerId);

	mov	ecx, DWORD PTR _TankerId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _TankerId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$[ebp], eax

; 1004 : 		if(!flight->IsFlight())

	mov	eax, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@MenuSendTa

; 1005 : 		{
; 1006 : 			flight = SimDriver.FindTanker(SimDriver.GetPlayerEntity());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?FindTanker@SimulationDriver@@QAEPAVFlightClass@@PAVSimBaseClass@@@Z ; SimulationDriver::FindTanker
	mov	DWORD PTR _flight$[ebp], eax
$LN4@MenuSendTa:

; 1007 : 		}
; 1008 : 	}
; 1009 : 
; 1010 : 	if(flight) 

	cmp	DWORD PTR _flight$[ebp], 0
	je	SHORT $LN3@MenuSendTa

; 1011 : 		theTanker = (AircraftClass*) flight->GetComponentLead();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ ; CampBaseClass::GetComponentLead
	mov	DWORD PTR _theTanker$[ebp], eax
$LN3@MenuSendTa:

; 1012 : 	
; 1013 : 	if (theTanker)

	cmp	DWORD PTR _theTanker$[ebp], 0
	je	$LN2@MenuSendTa

; 1014 : 		TankerMsg	= new FalconTankerMessage (theTanker->Id(), FalconLocalGame);

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@MenuSendTa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@MenuSendTa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv175[ebp], eax
	jmp	SHORT $LN10@MenuSendTa
$LN9@MenuSendTa:
	mov	DWORD PTR tv175[ebp], 0
$LN10@MenuSendTa:
	push	1
	mov	edx, DWORD PTR tv175[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _theTanker$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconTankerMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconTankerMessage::FalconTankerMessage
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN12@MenuSendTa
$LN11@MenuSendTa:
	mov	DWORD PTR tv186[ebp], 0
$LN12@MenuSendTa:
	mov	eax, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _TankerMsg$[ebp], ecx

; 1015 : 	else

	jmp	$LN1@MenuSendTa
$LN2@MenuSendTa:

; 1016 : 		TankerMsg	= new FalconTankerMessage (FalconNullId, FalconLocalGame);	

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN15@MenuSendTa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@MenuSendTa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv209[ebp], eax
	jmp	SHORT $LN14@MenuSendTa
$LN13@MenuSendTa:
	mov	DWORD PTR tv209[ebp], 0
$LN14@MenuSendTa:
	push	1
	mov	eax, DWORD PTR tv209[ebp]
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconTankerMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconTankerMessage::FalconTankerMessage
	mov	DWORD PTR tv213[ebp], eax
	jmp	SHORT $LN16@MenuSendTa
$LN15@MenuSendTa:
	mov	DWORD PTR tv213[ebp], 0
$LN16@MenuSendTa:
	mov	eax, DWORD PTR tv213[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _TankerMsg$[ebp], ecx
$LN1@MenuSendTa:

; 1017 : 	
; 1018 : 	TankerMsg->dataBlock.type	= enumId;

	mov	edx, DWORD PTR _TankerMsg$[ebp]
	mov	eax, DWORD PTR _enumId$[ebp]
	mov	DWORD PTR [edx+56], eax

; 1019 : 	TankerMsg->dataBlock.data1  = 1;

	mov	ecx, DWORD PTR _TankerMsg$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+60], xmm0

; 1020 : 	TankerMsg->dataBlock.caller	= SimDriver.GetPlayerEntity()->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _TankerMsg$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 1021 : 	FalconSendMessage(TankerMsg);

	push	0
	mov	ecx, DWORD PTR _TankerMsg$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1022 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MenuSendTanker@@YAXH@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?MenuSendTanker@@YAXH@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?MenuSendTanker@@YAXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MenuSendTanker@@YAXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MenuSendTanker@@YAXH@Z ENDP				; MenuSendTanker
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T2 = -144						; size = 8
$T3 = -136						; size = 4
tv424 = -132						; size = 4
tv504 = -128						; size = 4
tv706 = -124						; size = 4
tv137 = -120						; size = 4
$T4 = -116						; size = 4
tv464 = -112						; size = 4
tv693 = -108						; size = 4
tv178 = -104						; size = 4
tv664 = -100						; size = 4
tv524 = -96						; size = 4
tv644 = -92						; size = 4
tv484 = -88						; size = 4
tv624 = -84						; size = 4
tv69 = -80						; size = 4
tv604 = -76						; size = 4
tv404 = -72						; size = 4
tv584 = -68						; size = 4
tv157 = -64						; size = 4
tv564 = -60						; size = 4
tv85 = -56						; size = 4
tv544 = -52						; size = 4
tv444 = -48						; size = 4
_pawacsMsg$ = -44					; size = 4
_flight$ = -40						; size = 4
_radioMessage$ = -36					; size = 4
_hasWeaps$5 = -32					; size = 4
_role$6 = -28						; size = 4
_sms$7 = -24						; size = 4
_hp$8 = -20						; size = 4
_playerAC$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_enumId$ = 8						; size = 4
_targetId$ = 12						; size = 8
_sendRequest$ = 20					; size = 4
?MenuSendAwacs@@YAXHVVU_ID@@H@Z PROC			; MenuSendAwacs

; 852  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MenuSendAwacs@@YAXHVVU_ID@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 853  : 	FalconAWACSMessage	*pawacsMsg;
; 854  : 	FalconRadioChatterMessage* radioMessage;
; 855  : 	Flight				flight;
; 856  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 857  : 
; 858  : 	// Send the 'call' message
; 859  : 	if (sendRequest && PlayerOptions.PlayerRadioVoice){

	cmp	DWORD PTR _sendRequest$[ebp], 0
	je	$LN38@MenuSendAw
	movzx	eax, BYTE PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+201
	test	eax, eax
	je	$LN38@MenuSendAw

; 860  : 		switch (enumId)

	mov	ecx, DWORD PTR _enumId$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 32			; 00000020H
	ja	$LN1@MenuSendAw
	mov	edx, DWORD PTR tv69[ebp]
	movzx	eax, BYTE PTR $LN84@MenuSendAw[edx]
	jmp	DWORD PTR $LN86@MenuSendAw[eax*4]
$LN37@MenuSendAw:

; 861  : 		{
; 862  : 			case FalconAWACSMessage::Unable:
; 863  : 				SendCallToAWACS(playerAC, rcUNABLE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN43@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN44@MenuSendAw
$LN43@MenuSendAw:
	mov	DWORD PTR tv85[ebp], 0
$LN44@MenuSendAw:
	mov	edx, DWORD PTR tv85[ebp]
	push	edx
	push	219					; 000000dbH
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 864  : 				break;

	jmp	$LN38@MenuSendAw
$LN36@MenuSendAw:

; 865  : 			case FalconAWACSMessage::Wilco:
; 866  : 				SendCallToAWACS(playerAC, rcCOPY, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN45@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN46@MenuSendAw
$LN45@MenuSendAw:
	mov	DWORD PTR tv137[ebp], 0
$LN46@MenuSendAw:
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	push	101					; 00000065H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 867  : 				break;

	jmp	$LN38@MenuSendAw

; 868  : 			case FalconAWACSMessage::Judy:
; 869  : //				SendCallToAWACS(playerAC, rcJUDY);
; 870  : 				break;

	jmp	$LN38@MenuSendAw
$LN34@MenuSendAw:

; 871  : 			case FalconAWACSMessage::RequestPicture:
; 872  : 				SendCallToAWACS (playerAC, rcPICTUREQUERY, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN47@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN48@MenuSendAw
$LN47@MenuSendAw:
	mov	DWORD PTR tv157[ebp], 0
$LN48@MenuSendAw:
	mov	edx, DWORD PTR tv157[ebp]
	push	edx
	push	140					; 0000008cH
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 873  : 				break;

	jmp	$LN38@MenuSendAw

; 874  : 			case FalconAWACSMessage::GivePicture:
; 875  : 				break;

	jmp	$LN38@MenuSendAw
$LN32@MenuSendAw:

; 876  : 			case FalconAWACSMessage::RequestHelp:
; 877  : 				radioMessage = CreateCallToAWACS (playerAC, rcNEEDHELP, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN49@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN50@MenuSendAw
$LN49@MenuSendAw:
	mov	DWORD PTR tv178[ebp], 0
$LN50@MenuSendAw:
	mov	edx, DWORD PTR tv178[ebp]
	push	edx
	push	122					; 0000007aH
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?CreateCallToAWACS@@YAPAVFalconRadioChatterMessage@@PAVAircraftClass@@FPAVVuTargetEntity@@@Z ; CreateCallToAWACS
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _radioMessage$[ebp], eax

; 878  : 				radioMessage->dataBlock.edata[1] -= VF_FLIGHTNUMBER_OFFSET; // jpo - rewrite this...

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	movsx	eax, WORD PTR [edx+ecx+64]
	sub	eax, 36					; 00000024H
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 879  : 				radioMessage->dataBlock.edata[2] = SimToGrid(playerAC->YPos());

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 880  : 				radioMessage->dataBlock.edata[3] = SimToGrid(playerAC->XPos());

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 881  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 882  : 				break;

	jmp	$LN38@MenuSendAw
$LN31@MenuSendAw:

; 883  : 			case FalconAWACSMessage::RequestRelief:
; 884  : 				flight = (Flight)playerAC->GetCampaignObject();	

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 885  : 				if(flight){

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN14@MenuSendAw

; 886  : 					int hasWeaps=0,role,hp;

	mov	DWORD PTR _hasWeaps$5[ebp], 0

; 887  : 					SMSClass *sms = (SMSClass*) playerAC->GetSMS();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+464]
	call	eax
	mov	DWORD PTR _sms$7[ebp], eax

; 888  : 
; 889  : 					role = flight->GetUnitCurrentRole();

	mov	ecx, DWORD PTR _flight$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _flight$[ebp]
	mov	eax, DWORD PTR [edx+672]
	call	eax
	mov	DWORD PTR _role$6[ebp], eax

; 890  : 					if (sms){

	cmp	DWORD PTR _sms$7[ebp], 0
	je	$LN26@MenuSendAw

; 891  : 						for (hp=1; hp<sms->NumHardpoints(); hp++){

	mov	DWORD PTR _hp$8[ebp], 1
	jmp	SHORT $LN28@MenuSendAw
$LN27@MenuSendAw:
	mov	ecx, DWORD PTR _hp$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _hp$8[ebp], ecx
$LN28@MenuSendAw:
	mov	ecx, DWORD PTR _sms$7[ebp]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _hp$8[ebp], eax
	jge	$LN26@MenuSendAw

; 892  : 							if (role == ARO_CA){

	cmp	DWORD PTR _role$6[ebp], 1
	jne	SHORT $LN25@MenuSendAw

; 893  : 								if (
; 894  : 									sms->hardPoint[hp] && 
; 895  : 									sms->hardPoint[hp]->weaponPointer && sms->hardPoint[hp]->Domain() & wdAir
; 896  : 								){

	mov	edx, DWORD PTR _sms$7[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN24@MenuSendAw
	mov	edx, DWORD PTR _sms$7[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN24@MenuSendAw
	mov	eax, DWORD PTR _sms$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _hp$8[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _sms$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+168]
	call	edx
	and	eax, 1
	je	SHORT $LN24@MenuSendAw

; 897  : 									hasWeaps++;

	mov	eax, DWORD PTR _hasWeaps$5[ebp]
	add	eax, 1
	mov	DWORD PTR _hasWeaps$5[ebp], eax
$LN24@MenuSendAw:

; 898  : 								}
; 899  : 							}

	jmp	$LN16@MenuSendAw
$LN25@MenuSendAw:

; 900  : 							else if (role == ARO_S || role == ARO_GA || role == ARO_SB || role == ARO_SEAD){

	cmp	DWORD PTR _role$6[ebp], 3
	je	SHORT $LN21@MenuSendAw
	cmp	DWORD PTR _role$6[ebp], 4
	je	SHORT $LN21@MenuSendAw
	cmp	DWORD PTR _role$6[ebp], 5
	je	SHORT $LN21@MenuSendAw
	cmp	DWORD PTR _role$6[ebp], 7
	jne	SHORT $LN22@MenuSendAw
$LN21@MenuSendAw:

; 901  : 								if (
; 902  : 									sms->hardPoint[hp] && 
; 903  : 									sms->hardPoint[hp]->weaponPointer && sms->hardPoint[hp]->Domain() & wdGround
; 904  : 								){

	mov	ecx, DWORD PTR _sms$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _hp$8[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN20@MenuSendAw
	mov	ecx, DWORD PTR _sms$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _hp$8[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@MenuSendAw
	mov	edx, DWORD PTR _sms$7[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _sms$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _hp$8[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	and	eax, 2
	je	SHORT $LN20@MenuSendAw

; 905  : 									hasWeaps++;

	mov	ecx, DWORD PTR _hasWeaps$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasWeaps$5[ebp], ecx
$LN20@MenuSendAw:

; 906  : 								}
; 907  : 							}

	jmp	SHORT $LN16@MenuSendAw
$LN22@MenuSendAw:

; 908  : 							else if (role == ARO_ASW || role == ARO_ASHIP){

	cmp	DWORD PTR _role$6[ebp], 8
	je	SHORT $LN17@MenuSendAw
	cmp	DWORD PTR _role$6[ebp], 9
	jne	SHORT $LN16@MenuSendAw
$LN17@MenuSendAw:

; 909  : 								if (
; 910  : 									sms->hardPoint[hp] && 
; 911  : 									sms->hardPoint[hp]->weaponPointer && sms->hardPoint[hp]->Domain() & wdGround
; 912  : 								){

	mov	edx, DWORD PTR _sms$7[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN16@MenuSendAw
	mov	edx, DWORD PTR _sms$7[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@MenuSendAw
	mov	eax, DWORD PTR _sms$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _hp$8[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _sms$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _hp$8[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+168]
	call	edx
	and	eax, 2
	je	SHORT $LN16@MenuSendAw

; 913  : 									hasWeaps++;

	mov	eax, DWORD PTR _hasWeaps$5[ebp]
	add	eax, 1
	mov	DWORD PTR _hasWeaps$5[ebp], eax
$LN16@MenuSendAw:

; 914  : 								}
; 915  : 							}
; 916  : 						}

	jmp	$LN27@MenuSendAw
$LN26@MenuSendAw:

; 917  : 					}
; 918  : 
; 919  : 					// Pick what we say depending on our status
; 920  : 					if (!hasWeaps)

	cmp	DWORD PTR _hasWeaps$5[ebp], 0
	jne	SHORT $LN15@MenuSendAw

; 921  : 						SendCallToAWACS(playerAC, rcENDCAPARMS, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN51@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv404[ebp], eax
	jmp	SHORT $LN52@MenuSendAw
$LN51@MenuSendAw:
	mov	DWORD PTR tv404[ebp], 0
$LN52@MenuSendAw:
	mov	edx, DWORD PTR tv404[ebp]
	push	edx
	push	54					; 00000036H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 922  : 					else

	jmp	SHORT $LN14@MenuSendAw
$LN15@MenuSendAw:

; 923  : 						SendCallToAWACS(playerAC, rcENDCAPFUEL, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN53@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv424[ebp], eax
	jmp	SHORT $LN54@MenuSendAw
$LN53@MenuSendAw:
	mov	DWORD PTR tv424[ebp], 0
$LN54@MenuSendAw:
	mov	edx, DWORD PTR tv424[ebp]
	push	edx
	push	55					; 00000037H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH
$LN14@MenuSendAw:

; 924  : 				}
; 925  : 
; 926  : 				break;

	jmp	$LN38@MenuSendAw
$LN13@MenuSendAw:

; 927  : 			case FalconAWACSMessage::RequestDivert:
; 928  : 				SendCallToAWACS(playerAC, rcREQUESTTASK, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN55@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv444[ebp], eax
	jmp	SHORT $LN56@MenuSendAw
$LN55@MenuSendAw:
	mov	DWORD PTR tv444[ebp], 0
$LN56@MenuSendAw:
	mov	edx, DWORD PTR tv444[ebp]
	push	edx
	push	130					; 00000082H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 929  : 				break;

	jmp	$LN38@MenuSendAw
$LN12@MenuSendAw:

; 930  : 			case FalconAWACSMessage::RequestSAR:
; 931  : 				SendCallToAWACS(playerAC, rcSENDCHOPPERS, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN57@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv464[ebp], eax
	jmp	SHORT $LN58@MenuSendAw
$LN57@MenuSendAw:
	mov	DWORD PTR tv464[ebp], 0
$LN58@MenuSendAw:
	mov	edx, DWORD PTR tv464[ebp]
	push	edx
	push	185					; 000000b9H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 932  : //				SendCallToAWACS(plane, rcAIRMANDOWND, FalconLocalGame); // JPO addition doesn't work
; 933  : 				break;

	jmp	$LN38@MenuSendAw
$LN11@MenuSendAw:

; 934  : 			case FalconAWACSMessage::OnStation:
; 935  : 				//TJL 12/14/03 Changing FAC Request
; 936  : 				//SendCallToAWACS(plane, rcFACCONTACT, FalconLocalGame);
; 937  : 				SendCallToAWACS(playerAC, rcFACREADY, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv484[ebp], eax
	jmp	SHORT $LN60@MenuSendAw
$LN59@MenuSendAw:
	mov	DWORD PTR tv484[ebp], 0
$LN60@MenuSendAw:
	mov	edx, DWORD PTR tv484[ebp]
	push	edx
	push	71					; 00000047H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 938  : 				break;

	jmp	$LN38@MenuSendAw
$LN10@MenuSendAw:

; 939  : 			case FalconAWACSMessage::OffStation:
; 940  : 				// KCK: I don't think we have the speach to impliment this
; 941  : //				SendCallToAWACS(plane, rcFACCONTACT);
; 942  : 				// VWF: It seems we dont have a "check out" call. Vamoose is as
; 943  : 				// close as it gets.
; 944  : 				//TJL 12/14/03 Enable Check Out Speech.
; 945  : 				SendCallToAWACS(playerAC, rcIMADOT, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN61@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv504[ebp], eax
	jmp	SHORT $LN62@MenuSendAw
$LN61@MenuSendAw:
	mov	DWORD PTR tv504[ebp], 0
$LN62@MenuSendAw:
	mov	edx, DWORD PTR tv504[ebp]
	push	edx
	push	97					; 00000061H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 946  : 				break;

	jmp	$LN38@MenuSendAw
$LN9@MenuSendAw:

; 947  : 			case FalconAWACSMessage::VectorHome:
; 948  : 				SendCallToAWACS(playerAC, rcVECTORHOMEPLATE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN63@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv524[ebp], eax
	jmp	SHORT $LN64@MenuSendAw
$LN63@MenuSendAw:
	mov	DWORD PTR tv524[ebp], 0
$LN64@MenuSendAw:
	mov	edx, DWORD PTR tv524[ebp]
	push	edx
	push	224					; 000000e0H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 949  : 				break;

	jmp	$LN38@MenuSendAw
$LN8@MenuSendAw:

; 950  : 			case FalconAWACSMessage::VectorToAltAirfield: 
; 951  : 				SendCallToAWACS(playerAC, rcDIVERTFIELD, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN65@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv544[ebp], eax
	jmp	SHORT $LN66@MenuSendAw
$LN65@MenuSendAw:
	mov	DWORD PTR tv544[ebp], 0
$LN66@MenuSendAw:
	mov	edx, DWORD PTR tv544[ebp]
	push	edx
	push	50					; 00000032H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 952  : 				break;

	jmp	$LN38@MenuSendAw
$LN7@MenuSendAw:

; 953  : 			case FalconAWACSMessage::VectorToPackage:
; 954  : 				SendCallToAWACS(playerAC, rcVECTORTOPACKAGE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN67@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv564[ebp], eax
	jmp	SHORT $LN68@MenuSendAw
$LN67@MenuSendAw:
	mov	DWORD PTR tv564[ebp], 0
$LN68@MenuSendAw:
	mov	edx, DWORD PTR tv564[ebp]
	push	edx
	push	227					; 000000e3H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 955  : 				break;

	jmp	$LN38@MenuSendAw
$LN6@MenuSendAw:

; 956  : 			case FalconAWACSMessage::VectorToTanker:
; 957  : 				SendCallToAWACS (playerAC, rcREQUESTVECTORTOTANKER, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN69@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv584[ebp], eax
	jmp	SHORT $LN70@MenuSendAw
$LN69@MenuSendAw:
	mov	DWORD PTR tv584[ebp], 0
$LN70@MenuSendAw:
	mov	edx, DWORD PTR tv584[ebp]
	push	edx
	push	319					; 0000013fH
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 958  : 				break;

	jmp	$LN38@MenuSendAw
$LN5@MenuSendAw:

; 959  : 			case FalconAWACSMessage::VectorToCarrier:	// Carrier
; 960  : 				SendCallToAWACS (playerAC, rcVECTORTOCARRIER, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN71@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv604[ebp], eax
	jmp	SHORT $LN72@MenuSendAw
$LN71@MenuSendAw:
	mov	DWORD PTR tv604[ebp], 0
$LN72@MenuSendAw:
	mov	edx, DWORD PTR tv604[ebp]
	push	edx
	push	345					; 00000159H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 961  : 				break;

	jmp	$LN38@MenuSendAw
$LN4@MenuSendAw:

; 962  : 			case FalconAWACSMessage::VectorToThreat:
; 963  : 				SendCallToAWACS(playerAC, rcVECTORTOTHREAT, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN73@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv624[ebp], eax
	jmp	SHORT $LN74@MenuSendAw
$LN73@MenuSendAw:
	mov	DWORD PTR tv624[ebp], 0
$LN74@MenuSendAw:
	mov	edx, DWORD PTR tv624[ebp]
	push	edx
	push	229					; 000000e5H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 964  : 				break;

	jmp	$LN38@MenuSendAw
$LN3@MenuSendAw:

; 965  : 			case FalconAWACSMessage::VectorToTarget:
; 966  : 				SendCallToAWACS(playerAC, rcVECTORTOTARGET, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN75@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv644[ebp], eax
	jmp	SHORT $LN76@MenuSendAw
$LN75@MenuSendAw:
	mov	DWORD PTR tv644[ebp], 0
$LN76@MenuSendAw:
	mov	edx, DWORD PTR tv644[ebp]
	push	edx
	push	228					; 000000e4H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH

; 967  : 				break;

	jmp	SHORT $LN38@MenuSendAw
$LN2@MenuSendAw:

; 968  : 			case FalconAWACSMessage::DeclareAircraft:
; 969  : 				SendCallToAWACS(playerAC, rcDECLARE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN77@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv664[ebp], eax
	jmp	SHORT $LN78@MenuSendAw
$LN77@MenuSendAw:
	mov	DWORD PTR tv664[ebp], 0
$LN78@MenuSendAw:
	mov	edx, DWORD PTR tv664[ebp]
	push	edx
	push	314					; 0000013aH
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToAWACS@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToAWACS
	add	esp, 12					; 0000000cH
$LN1@MenuSendAw:
$LN38@MenuSendAw:

; 970  : 				break;
; 971  : 			default:
; 972  : 				break;
; 973  : 			}
; 974  : 	}
; 975  : 
; 976  : 	// Now send the message
; 977  : 	pawacsMsg						= new FalconAWACSMessage (SimDriver.GetPlayerEntity()->Id(), FalconLocalGame);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN81@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN79@MenuSendAw
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv693[ebp], eax
	jmp	SHORT $LN80@MenuSendAw
$LN79@MenuSendAw:
	mov	DWORD PTR tv693[ebp], 0
$LN80@MenuSendAw:
	push	1
	mov	edx, DWORD PTR tv693[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0FalconAWACSMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconAWACSMessage::FalconAWACSMessage
	mov	DWORD PTR tv706[ebp], eax
	jmp	SHORT $LN82@MenuSendAw
$LN81@MenuSendAw:
	mov	DWORD PTR tv706[ebp], 0
$LN82@MenuSendAw:
	mov	eax, DWORD PTR tv706[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pawacsMsg$[ebp], ecx

; 978  : 	pawacsMsg->dataBlock.type		= enumId;

	mov	edx, DWORD PTR _pawacsMsg$[ebp]
	mov	eax, DWORD PTR _enumId$[ebp]
	mov	DWORD PTR [edx+56], eax

; 979  : 	pawacsMsg->dataBlock.caller		= targetId;

	mov	ecx, DWORD PTR _pawacsMsg$[ebp]
	mov	edx, DWORD PTR _targetId$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	eax, DWORD PTR _targetId$[ebp+4]
	mov	DWORD PTR [ecx+52], eax

; 980  : 
; 981  : 	MonoPrint("Sending AWACS message #%d.\n", enumId);

	mov	ecx, DWORD PTR _enumId$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BM@NFKNFDNE@Sending?5AWACS?5message?5?$CD?$CFd?4?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 982  : 
; 983  : 	FalconSendMessage(pawacsMsg,TRUE);

	push	1
	mov	edx, DWORD PTR _pawacsMsg$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 984  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN86@MenuSendAw:
	DD	$LN36@MenuSendAw
	DD	$LN37@MenuSendAw
	DD	$LN34@MenuSendAw
	DD	$LN32@MenuSendAw
	DD	$LN31@MenuSendAw
	DD	$LN13@MenuSendAw
	DD	$LN12@MenuSendAw
	DD	$LN11@MenuSendAw
	DD	$LN10@MenuSendAw
	DD	$LN9@MenuSendAw
	DD	$LN8@MenuSendAw
	DD	$LN6@MenuSendAw
	DD	$LN7@MenuSendAw
	DD	$LN4@MenuSendAw
	DD	$LN3@MenuSendAw
	DD	$LN2@MenuSendAw
	DD	$LN5@MenuSendAw
	DD	$LN1@MenuSendAw
$LN84@MenuSendAw:
	DB	0
	DB	1
	DB	17					; 00000011H
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	17					; 00000011H
	DB	15					; 0000000fH
	DB	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MenuSendAwacs@@YAXHVVU_ID@@H@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?MenuSendAwacs@@YAXHVVU_ID@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-136]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MenuSendAwacs@@YAXHVVU_ID@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MenuSendAwacs@@YAXHVVU_ID@@H@Z ENDP			; MenuSendAwacs
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 8
_ATCId$ = -96						; size = 8
$T3 = -88						; size = 4
$T4 = -84						; size = 4
tv315 = -80						; size = 4
$T5 = -76						; size = 4
tv311 = -72						; size = 4
tv288 = -68						; size = 4
$T6 = -64						; size = 4
tv284 = -60						; size = 4
_theATC$ = -56						; size = 4
tv245 = -52						; size = 4
tv225 = -48						; size = 4
tv204 = -44						; size = 4
tv183 = -40						; size = 4
tv162 = -36						; size = 4
tv141 = -32						; size = 4
tv88 = -28						; size = 4
tv72 = -24						; size = 4
_atcMsg$ = -20						; size = 4
_playerAC$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_enumId$ = 8						; size = 4
_sendRequest$ = 12					; size = 4
?MenuSendAtc@@YAXHH@Z PROC				; MenuSendAtc

; 794  : {	

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MenuSendAtc@@YAXHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 795  : 	VU_ID						ATCId = vuNullId;

	mov	eax, DWORD PTR ?vuNullId@@3VVU_ID@@A
	mov	DWORD PTR _ATCId$[ebp], eax
	mov	ecx, DWORD PTR ?vuNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _ATCId$[ebp+4], ecx

; 796  : 	ObjectiveClass				*theATC;
; 797  : 	FalconATCMessage			*atcMsg;
; 798  : 	AircraftClass				*playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 799  : 
; 800  : 	gNavigationSys->GetAirbase(&ATCId);

	lea	edx, DWORD PTR _ATCId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 801  : 
; 802  : 	if (sendRequest && PlayerOptions.PlayerRadioVoice && playerAC){

	cmp	DWORD PTR _sendRequest$[ebp], 0
	je	$LN15@MenuSendAt
	movzx	eax, BYTE PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+201
	test	eax, eax
	je	$LN15@MenuSendAt
	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN15@MenuSendAt

; 803  : 		switch (enumId)

	mov	ecx, DWORD PTR _enumId$[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	cmp	DWORD PTR tv72[ebp], 8
	ja	$LN15@MenuSendAt
	mov	edx, DWORD PTR tv72[ebp]
	jmp	DWORD PTR $LN43@MenuSendAt[edx*4]
$LN12@MenuSendAt:

; 804  : 		{
; 805  : 			case FalconATCMessage::ContactApproach:
; 806  : 			case FalconATCMessage::RequestClearance:
; 807  : 				SendCallToATC(playerAC, ATCId, rcLANDCLEARANCE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN19@MenuSendAt
$LN18@MenuSendAt:
	mov	DWORD PTR tv88[ebp], 0
$LN19@MenuSendAt:
	mov	ecx, DWORD PTR tv88[ebp]
	push	ecx
	push	103					; 00000067H
	mov	edx, DWORD PTR _ATCId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _ATCId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	push	ecx
	call	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 20					; 00000014H

; 808  : 				break;

	jmp	$LN15@MenuSendAt
$LN11@MenuSendAt:

; 809  : 			case FalconATCMessage::RequestEmerClearance:
; 810  : 				SendCallToATC(playerAC, ATCId, rcLANDCLEAREMERGENCY, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN20@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN21@MenuSendAt
$LN20@MenuSendAt:
	mov	DWORD PTR tv141[ebp], 0
$LN21@MenuSendAt:
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	push	104					; 00000068H
	mov	ecx, DWORD PTR _ATCId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ATCId$[ebp]
	push	edx
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 20					; 00000014H

; 811  : 				break;

	jmp	$LN15@MenuSendAt
$LN10@MenuSendAt:

; 812  : 			case FalconATCMessage::RequestTakeoff:
; 813  : 				SendCallToATC(playerAC, ATCId, rcREADYFORDERARTURE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN22@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN23@MenuSendAt
$LN22@MenuSendAt:
	mov	DWORD PTR tv162[ebp], 0
$LN23@MenuSendAt:
	mov	edx, DWORD PTR tv162[ebp]
	push	edx
	push	322					; 00000142H
	mov	eax, DWORD PTR _ATCId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ATCId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _playerAC$[ebp]
	push	edx
	call	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 20					; 00000014H

; 814  : 				break;

	jmp	$LN15@MenuSendAt
$LN9@MenuSendAt:

; 815  : 			case FalconATCMessage::RequestTaxi:
; 816  : 				SendCallToATC(playerAC, ATCId, rcREADYFORDERARTURE, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv183[ebp], eax
	jmp	SHORT $LN25@MenuSendAt
$LN24@MenuSendAt:
	mov	DWORD PTR tv183[ebp], 0
$LN25@MenuSendAt:
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	push	322					; 00000142H
	mov	edx, DWORD PTR _ATCId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _ATCId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	push	ecx
	call	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 20					; 00000014H

; 817  : 				break;

	jmp	$LN15@MenuSendAt
$LN8@MenuSendAt:

; 818  : 			case FalconATCMessage::AbortApproach:
; 819  : 				SendCallToATC(playerAC, ATCId, rcABORTAPPROACH, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN26@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv204[ebp], eax
	jmp	SHORT $LN27@MenuSendAt
$LN26@MenuSendAt:
	mov	DWORD PTR tv204[ebp], 0
$LN27@MenuSendAt:
	mov	eax, DWORD PTR tv204[ebp]
	push	eax
	push	348					; 0000015cH
	mov	ecx, DWORD PTR _ATCId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ATCId$[ebp]
	push	edx
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToATC@@YAXPAVAircraftClass@@VVU_ID@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 20					; 00000014H

; 820  : 				break;

	jmp	$LN15@MenuSendAt
$LN7@MenuSendAt:

; 821  : 			//RAS-17Jan04-Added for traffic call acknowledgement
; 822  : 			case FalconATCMessage::TrafficInSight:		
; 823  : 				SendCallToATC(playerAC, rcCOPY, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN28@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv225[ebp], eax
	jmp	SHORT $LN29@MenuSendAt
$LN28@MenuSendAt:
	mov	DWORD PTR tv225[ebp], 0
$LN29@MenuSendAt:
	mov	edx, DWORD PTR tv225[ebp]
	push	edx
	push	101					; 00000065H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToATC@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 12					; 0000000cH

; 824  : 				break;

	jmp	SHORT $LN15@MenuSendAt
$LN6@MenuSendAt:

; 825  :  			//TJL 08/16/04 Hotpit Refuel //Cobra 10/31/04 TJL
; 826  :  			case FalconATCMessage::RequestHotpitRefuel:
; 827  :  				SendCallToATC(playerAC, rcCOPY, FalconLocalGame);

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN30@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv245[ebp], eax
	jmp	SHORT $LN31@MenuSendAt
$LN30@MenuSendAt:
	mov	DWORD PTR tv245[ebp], 0
$LN31@MenuSendAt:
	mov	edx, DWORD PTR tv245[ebp]
	push	edx
	push	101					; 00000065H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?SendCallToATC@@YAXPAVAircraftClass@@FPAVVuTargetEntity@@@Z ; SendCallToATC
	add	esp, 12					; 0000000cH
$LN15@MenuSendAt:

; 828  :  				break;
; 829  : 			case FalconATCMessage::UpdateStatus:
; 830  : 			default:
; 831  : 				break;
; 832  : 		}
; 833  : 	}	
; 834  : 				
; 835  : 	theATC = (ObjectiveClass*)vuDatabase->Find(ATCId);

	mov	ecx, DWORD PTR _ATCId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ATCId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _theATC$[ebp], eax

; 836  : 	ShiAssert(theATC && theATC->brain);
; 837  : 	if (theATC && theATC->brain)

	cmp	DWORD PTR _theATC$[ebp], 0
	je	$LN4@MenuSendAt
	mov	eax, DWORD PTR _theATC$[ebp]
	cmp	DWORD PTR [eax+240], 0
	je	$LN4@MenuSendAt

; 838  : 		atcMsg	= new FalconATCMessage (ATCId, FalconLocalGame);

	push	62					; 0000003eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN34@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN32@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv284[ebp], eax
	jmp	SHORT $LN33@MenuSendAt
$LN32@MenuSendAt:
	mov	DWORD PTR tv284[ebp], 0
$LN33@MenuSendAt:
	push	1
	mov	edx, DWORD PTR tv284[ebp]
	push	edx
	mov	eax, DWORD PTR _ATCId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ATCId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0FalconATCMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconATCMessage::FalconATCMessage
	mov	DWORD PTR tv288[ebp], eax
	jmp	SHORT $LN35@MenuSendAt
$LN34@MenuSendAt:
	mov	DWORD PTR tv288[ebp], 0
$LN35@MenuSendAt:
	mov	edx, DWORD PTR tv288[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _atcMsg$[ebp], eax

; 839  : 	else

	jmp	$LN3@MenuSendAt
$LN4@MenuSendAt:

; 840  : 		atcMsg	= new FalconATCMessage (FalconNullId, FalconLocalGame);	

	push	62					; 0000003eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN38@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN36@MenuSendAt
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv311[ebp], eax
	jmp	SHORT $LN37@MenuSendAt
$LN36@MenuSendAt:
	mov	DWORD PTR tv311[ebp], 0
$LN37@MenuSendAt:
	push	1
	mov	edx, DWORD PTR tv311[ebp]
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconATCMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconATCMessage::FalconATCMessage
	mov	DWORD PTR tv315[ebp], eax
	jmp	SHORT $LN39@MenuSendAt
$LN38@MenuSendAt:
	mov	DWORD PTR tv315[ebp], 0
$LN39@MenuSendAt:
	mov	edx, DWORD PTR tv315[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _atcMsg$[ebp], eax
$LN3@MenuSendAt:

; 841  : 	
; 842  : 	atcMsg->dataBlock.type	= enumId;

	mov	ecx, DWORD PTR _atcMsg$[ebp]
	mov	edx, DWORD PTR _enumId$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 843  : 	if(SimDriver.GetPlayerEntity())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN2@MenuSendAt

; 844  : 		atcMsg->dataBlock.from	= SimDriver.GetPlayerEntity()->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _atcMsg$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 845  : 	else

	jmp	SHORT $LN1@MenuSendAt
$LN2@MenuSendAt:

; 846  : 		atcMsg->dataBlock.from	= FalconNullId;

	mov	ecx, DWORD PTR _atcMsg$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+48], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+52], eax
$LN1@MenuSendAt:

; 847  : 	FalconSendMessage(atcMsg,FALSE);

	push	0
	mov	ecx, DWORD PTR _atcMsg$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 848  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@MenuSendAt:
	DD	$LN12@MenuSendAt
	DD	$LN11@MenuSendAt
	DD	$LN12@MenuSendAt
	DD	$LN10@MenuSendAt
	DD	$LN9@MenuSendAt
	DD	$LN15@MenuSendAt
	DD	$LN8@MenuSendAt
	DD	$LN7@MenuSendAt
	DD	$LN6@MenuSendAt
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MenuSendAtc@@YAXHH@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?MenuSendAtc@@YAXHH@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?MenuSendAtc@@YAXHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MenuSendAtc@@YAXHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MenuSendAtc@@YAXHH@Z ENDP				; MenuSendAtc
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
$T5 = -28						; size = 4
$T6 = -24						; size = 4
$T7 = -20						; size = 4
_k$ = -16						; size = 4
_j$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
??1MenuManager@@QAE@XZ PROC				; MenuManager::~MenuManager
; _this$ = ecx

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 	int i, j, k;
; 435  : 
; 436  : 	for (i = 0; i < mNumMenus; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@MenuManage
$LN8@MenuManage:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@MenuManage:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	$LN7@MenuManage

; 437  : 		for (j = 0; j < mpMenus[i].mNumPages; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@MenuManage
$LN5@MenuManage:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@MenuManage:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [eax+ecx+12]
	jge	$LN4@MenuManage

; 438  : 			for (k = 0; k < mpMenus[i].mpPages[j].mNumItems; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN3@MenuManage
$LN2@MenuManage:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN3@MenuManage:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+4]
	jge	SHORT $LN1@MenuManage

; 439  : 				delete [] mpMenus[i].mpPages[j].mpItems[k].mpText;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR [ecx+edx+16]
	mov	edx, DWORD PTR _k$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+eax+8]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 440  : 			}

	jmp	SHORT $LN2@MenuManage
$LN1@MenuManage:

; 441  : 			delete [] mpMenus[i].mpPages[j].mpItems;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [edx+eax+16]
	mov	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 442  : 			delete [] mpMenus[i].mpPages[j].mpTitle;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR [ecx+edx+16]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 443  : 		}

	jmp	$LN5@MenuManage
$LN4@MenuManage:

; 444  : 		delete [] mpMenus[i].mpPages;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 445  : 		delete [] mpMenus[i].mpTitle;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 446  : 	}

	jmp	$LN8@MenuManage
$LN7@MenuManage:

; 447  : 
; 448  : 	delete [] mpResDimensions;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 449  : 	delete [] mpMenus;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 450  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1MenuManager@@QAE@XZ ENDP				; MenuManager::~MenuManager
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_bufWidth$ = -56					; size = 4
_bufHeight$ = -52					; size = 4
_backHeight$ = -48					; size = 4
_backWidth$ = -44					; size = 4
_found$ = -40						; size = 4
_halfSHeight$ = -36					; size = 4
_halfSWidth$ = -32					; size = 4
_i$ = -28						; size = 4
_this$ = -24						; size = 4
_backDest$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
??0MenuManager@@QAE@HH@Z PROC				; MenuManager::MenuManager
; _this$ = ecx

; 91   : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 92   : 	float		bufWidth;		// Buffer width
; 93   : 	float		bufHeight;		// Buffer height
; 94   : 	float		halfSWidth;		// Screen width
; 95   : 	float		halfSHeight;	// Screen height
; 96   : 	RECT		backDest={0};

	mov	DWORD PTR _backDest$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _backDest$[ebp+4], eax
	mov	DWORD PTR _backDest$[ebp+8], eax
	mov	DWORD PTR _backDest$[ebp+12], eax

; 97   : 	int		backWidth = 0;

	mov	DWORD PTR _backWidth$[ebp], 0

; 98   : 	int		backHeight = 0;

	mov	DWORD PTR _backHeight$[ebp], 0

; 99   : 	BOOL		found = FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 100  : 	int		i;
; 101  : 
; 102  : 	mIsActive			= FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 103  : 	mCurMenu				= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], 0

; 104  : 	mCurPage				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 105  : 	mTargetId			= FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+72], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+76], eax

; 106  : 	mpResDimensions	= NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 107  : 
; 108  : 	ReadDataFile("art\\ckptart\\menu.dat");

	push	OFFSET ??_C@_0BF@GDHKJNKG@art?2ckptart?2menu?4dat?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadDataFile@MenuManager@@AAEXPAD@Z	; MenuManager::ReadDataFile

; 109  : 
; 110  : 	ShiAssert(mpResDimensions);	// No dimension information in the data file!
; 111  : 
; 112  : 	backWidth		= 0;

	mov	DWORD PTR _backWidth$[ebp], 0

; 113  : 	backHeight		= 0;

	mov	DWORD PTR _backHeight$[ebp], 0

; 114  : 	for(i = 0; i < mTotalRes; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@MenuManage
$LN5@MenuManage:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@MenuManage:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jge	$LN4@MenuManage

; 115  : 		if(!found && mpResDimensions[i].xRes == width && mpResDimensions[i].yRes == height) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	$LN3@MenuManage
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	cmp	edx, DWORD PTR _width$[ebp]
	jne	SHORT $LN3@MenuManage
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax+4]
	cmp	eax, DWORD PTR _height$[ebp]
	jne	SHORT $LN3@MenuManage

; 116  : 			backDest.top		= mpResDimensions[i].mDimensions.top;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx+12]
	mov	DWORD PTR _backDest$[ebp+4], ecx

; 117  : 			backDest.left		= mpResDimensions[i].mDimensions.left;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR _backDest$[ebp], edx

; 118  : 			backDest.bottom	= mpResDimensions[i].mDimensions.bottom;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax+20]
	mov	DWORD PTR _backDest$[ebp+12], eax

; 119  : 			backDest.right		= mpResDimensions[i].mDimensions.right;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR _backDest$[ebp+8], ecx

; 120  : 
; 121  : 			found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 122  : 		}
; 123  : 		else if(!found &&

	jmp	$LN1@MenuManage
$LN3@MenuManage:

; 124  : 					mpResDimensions[i].xRes < width && 
; 125  : 					mpResDimensions[i].xRes > backWidth &&
; 126  : 					mpResDimensions[i].yRes < height &&
; 127  : 					mpResDimensions[i].yRes > backHeight) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	$LN1@MenuManage
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	cmp	edx, DWORD PTR _width$[ebp]
	jge	$LN1@MenuManage
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax]
	cmp	eax, DWORD PTR _backWidth$[ebp]
	jle	$LN1@MenuManage
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx+4]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	$LN1@MenuManage
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx+4]
	cmp	edx, DWORD PTR _backHeight$[ebp]
	jle	SHORT $LN1@MenuManage

; 128  : 
; 129  : 			backWidth	= mpResDimensions[i].xRes;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _backWidth$[ebp], eax

; 130  : 			backHeight	= mpResDimensions[i].yRes;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _backHeight$[ebp], ecx

; 131  : 			backDest.top		= mpResDimensions[i].mDimensions.top;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR _backDest$[ebp+4], edx

; 132  : 			backDest.left		= mpResDimensions[i].mDimensions.left;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR _backDest$[ebp], eax

; 133  : 			backDest.bottom	= mpResDimensions[i].mDimensions.bottom;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx+20]
	mov	DWORD PTR _backDest$[ebp+12], ecx

; 134  : 			backDest.right		= mpResDimensions[i].mDimensions.right;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx+16]
	mov	DWORD PTR _backDest$[ebp+8], edx
$LN1@MenuManage:

; 135  : 		}
; 136  : 	}

	jmp	$LN5@MenuManage
$LN4@MenuManage:

; 137  : 
; 138  : 	bufWidth				= (float)backDest.right - (float)backDest.left + 1.0F;

	cvtsi2ss xmm0, DWORD PTR _backDest$[ebp+8]
	cvtsi2ss xmm1, DWORD PTR _backDest$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _bufWidth$[ebp], xmm0

; 139  : 	bufHeight			= (float)backDest.bottom - (float)backDest.top + 1.0F;

	cvtsi2ss xmm0, DWORD PTR _backDest$[ebp+12]
	cvtsi2ss xmm1, DWORD PTR _backDest$[ebp+4]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _bufHeight$[ebp], xmm0

; 140  : 
; 141  : 	mDestRect.top		= backDest.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _backDest$[ebp+4]
	mov	DWORD PTR [eax+20], ecx

; 142  : 	mDestRect.left		= backDest.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _backDest$[ebp]
	mov	DWORD PTR [edx+16], eax

; 143  : 	mDestRect.bottom	= FloatToInt32(mDestRect.top + bufHeight); 

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+20]
	addss	xmm0, DWORD PTR _bufHeight$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 144  : 	mDestRect.right	= FloatToInt32(mDestRect.left + bufWidth);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR _bufWidth$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 145  : 
; 146  : 	halfSWidth			= (float) DisplayOptions.DispWidth * 0.5F;

	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _halfSWidth$[ebp], xmm0

; 147  : 	halfSHeight			= (float) DisplayOptions.DispHeight * 0.5F;

	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _halfSHeight$[ebp], xmm0

; 148  : 							
; 149  : 	mLeft					= (mDestRect.left - halfSWidth) / halfSWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+16]
	subss	xmm0, DWORD PTR _halfSWidth$[ebp]
	divss	xmm0, DWORD PTR _halfSWidth$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 150  :    mRight				= (mDestRect.right - halfSWidth) / halfSWidth;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR _halfSWidth$[ebp]
	divss	xmm0, DWORD PTR _halfSWidth$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 151  :    mTop					= -(mDestRect.top - halfSHeight) / halfSHeight;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+20]
	subss	xmm0, DWORD PTR _halfSHeight$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _halfSHeight$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+64], xmm0

; 152  :    mBottom				= -(mDestRect.bottom - halfSHeight) / halfSHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+28]
	subss	xmm0, DWORD PTR _halfSHeight$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _halfSHeight$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 153  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
??0MenuManager@@QAE@HH@Z ENDP				; MenuManager::MenuManager
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeActivateAndClear@MenuManager@@QAEXXZ PROC		; MenuManager::DeActivateAndClear
; _this$ = ecx

; 687  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 688  : 	mIsActive				= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 689  : 	CommandsKeyCombo		= 0;

	mov	DWORD PTR ?CommandsKeyCombo@@3HA, 0	; CommandsKeyCombo

; 690  : 	CommandsKeyComboMod	= 0;

	mov	DWORD PTR ?CommandsKeyComboMod@@3HA, 0	; CommandsKeyComboMod

; 691  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeActivateAndClear@MenuManager@@QAEXXZ ENDP		; MenuManager::DeActivateAndClear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeActivate@MenuManager@@QAEXXZ PROC			; MenuManager::DeActivate
; _this$ = ecx

; 682  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 683  : 	mIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 684  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeActivate@MenuManager@@QAEXXZ ENDP			; MenuManager::DeActivate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?StepPrevPage@MenuManager@@QAEXH@Z PROC			; MenuManager::StepPrevPage
; _this$ = ecx

; 664  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 665  :    if (state & KEY_DOWN)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN4@StepPrevPa

; 666  :    {
; 667  : 		if(mpMenus[mCurMenu].mNumPages > 1) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+edx+12], 1
	jle	SHORT $LN2@StepPrevPa

; 668  : 			mCurPage--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 669  : 			if(mCurPage < 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jge	SHORT $LN1@StepPrevPa

; 670  : 				mCurPage = mpMenus[mCurMenu].mNumPages - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], ecx
$LN1@StepPrevPa:

; 671  : 			}
; 672  : 			InitPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitPage@MenuManager@@AAEXXZ		; MenuManager::InitPage

; 673  : 			CheckItemConditions(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckItemConditions@MenuManager@@AAEXH@Z ; MenuManager::CheckItemConditions
$LN2@StepPrevPa:

; 674  : 		}
; 675  : 
; 676  :       CommandsSetKeyCombo (CommandsKeyCombo, state, NULL);

	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CommandsKeyCombo@@3HA	; CommandsKeyCombo
	push	ecx
	call	?CommandsSetKeyCombo@@YAXKHPAX@Z	; CommandsSetKeyCombo
	add	esp, 12					; 0000000cH
$LN4@StepPrevPa:

; 677  :    }
; 678  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StepPrevPage@MenuManager@@QAEXH@Z ENDP			; MenuManager::StepPrevPage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?StepNextPage@MenuManager@@QAEXH@Z PROC			; MenuManager::StepNextPage
; _this$ = ecx

; 647  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 648  :    if (state & KEY_DOWN)

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN4@StepNextPa

; 649  :    {
; 650  : 		if(mpMenus[mCurMenu].mNumPages > 1) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+edx+12], 1
	jle	SHORT $LN2@StepNextPa

; 651  : 			mCurPage++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 652  : 			if(mCurPage >= mpMenus[mCurMenu].mNumPages) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	cmp	ecx, DWORD PTR [edx+eax+12]
	jl	SHORT $LN1@StepNextPa

; 653  : 				mCurPage = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0
$LN1@StepNextPa:

; 654  : 			}
; 655  : 			InitPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitPage@MenuManager@@AAEXXZ		; MenuManager::InitPage

; 656  : 			CheckItemConditions(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckItemConditions@MenuManager@@AAEXH@Z ; MenuManager::CheckItemConditions
$LN2@StepNextPa:

; 657  : 		}
; 658  : 
; 659  :       CommandsSetKeyCombo (CommandsKeyCombo, state, NULL);

	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?CommandsKeyCombo@@3HA	; CommandsKeyCombo
	push	ecx
	call	?CommandsSetKeyCombo@@YAXKHPAX@Z	; CommandsSetKeyCombo
	add	esp, 12					; 0000000cH
$LN4@StepNextPa:

; 660  :    }
; 661  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StepNextPage@MenuManager@@QAEXH@Z ENDP			; MenuManager::StepNextPage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 8
$T2 = -36						; size = 8
_message$ = -28						; size = 4
_playerAC$ = -24					; size = 4
_pitem$ = -20						; size = 4
tv70 = -16						; size = 4
_item$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_val$ = 8						; size = 4
_state$ = 12						; size = 4
_type$ = 16						; size = 4
_extent$ = 20						; size = 4
?ProcessInput@MenuManager@@QAEXKHHH@Z PROC		; MenuManager::ProcessInput
; _this$ = ecx

; 695  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 696  : 	int			message;
; 697  : 	int			item = -1;

	mov	DWORD PTR _item$[ebp], -1

; 698  : 	int			i;
; 699  : 	ItemStruct*	pitem;
; 700  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 701  : 
; 702  :    if (state & KEY_DOWN) {

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	$LN17@ProcessInp

; 703  : 
; 704  : 		if(mIsActive) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN15@ProcessInp

; 705  : 
; 706  : 			switch (val) {

	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR tv70[ebp], edx
	cmp	DWORD PTR tv70[ebp], 2
	jb	SHORT $LN13@ProcessInp
	cmp	DWORD PTR tv70[ebp], 10			; 0000000aH
	jbe	SHORT $LN11@ProcessInp
	cmp	DWORD PTR tv70[ebp], 11			; 0000000bH
	je	SHORT $LN12@ProcessInp
	jmp	SHORT $LN13@ProcessInp
$LN12@ProcessInp:

; 707  : 
; 708  : 				case DIK_0:
; 709  : 					item	= 9;

	mov	DWORD PTR _item$[ebp], 9

; 710  : 				break;

	jmp	SHORT $LN13@ProcessInp
$LN11@ProcessInp:

; 711  : 
; 712  : 				case DIK_1:
; 713  : 				case DIK_2:
; 714  : 				case DIK_3:
; 715  : 				case DIK_4:
; 716  : 				case DIK_5:
; 717  : 				case DIK_6:
; 718  : 				case DIK_7:
; 719  : 				case DIK_8:
; 720  : 				case DIK_9:
; 721  : 					item	= val - DIK_1;

	mov	eax, DWORD PTR _val$[ebp]
	sub	eax, 2
	mov	DWORD PTR _item$[ebp], eax
$LN13@ProcessInp:

; 722  : 				break;
; 723  : 			}
; 724  : 
; 725  : 			if(item != -1) {

	cmp	DWORD PTR _item$[ebp], -1
	je	$LN10@ProcessInp

; 726  : 				DeActivateAndClear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeActivateAndClear@MenuManager@@QAEXXZ	; MenuManager::DeActivateAndClear

; 727  : 
; 728  : 				pitem	= &(mpMenus[mCurMenu].mpPages[mCurPage].mpItems[item]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR [ecx+edx+16]
	mov	edx, DWORD PTR _item$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _pitem$[ebp], edx

; 729  : 
; 730  : 				if(pitem->mIsAvailable) {

	mov	eax, DWORD PTR _pitem$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN9@ProcessInp

; 731  : 					message	= pitem->mMessage;

	mov	ecx, DWORD PTR _pitem$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _message$[ebp], edx

; 732  : 					mTargetId = AiDesignateTarget(playerAC);

	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; AiDesignateTarget
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	DWORD PTR [ecx+76], eax

; 733  : 					SendMenuMsg(mpMenus[mCurMenu].mMsgId, message, mpMenus[mCurMenu].mWingExtent, mTargetId);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR [edx+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax+8]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMenuMsg@MenuManager@@AAEXHHHVVU_ID@@@Z ; MenuManager::SendMenuMsg
$LN9@ProcessInp:

; 734  : 				}
; 735  : 			}

	jmp	SHORT $LN8@ProcessInp
$LN10@ProcessInp:

; 736  : 			else if(val == DIK_SYSRQ) {

	cmp	DWORD PTR _val$[ebp], 183		; 000000b7H
	jne	SHORT $LN7@ProcessInp

; 737  : 				CommandsKeyCombo		= 0;

	mov	DWORD PTR ?CommandsKeyCombo@@3HA, 0	; CommandsKeyCombo

; 738  : 				CommandsKeyComboMod	= 0;

	mov	DWORD PTR ?CommandsKeyComboMod@@3HA, 0	; CommandsKeyComboMod

; 739  : 				OTWDriver.takeScreenShot	= TRUE;

	mov	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32028, 1

; 740  : 			}
; 741  : 			else {

	jmp	SHORT $LN8@ProcessInp
$LN7@ProcessInp:

; 742  : 				DeActivateAndClear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeActivateAndClear@MenuManager@@QAEXXZ	; MenuManager::DeActivateAndClear
$LN8@ProcessInp:

; 743  : 			}
; 744  : 		}
; 745  : 		else {

	jmp	$LN17@ProcessInp
$LN15@ProcessInp:

; 746  : 			mIsActive = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 1

; 747  : 
; 748  : 			mTargetId = AiDesignateTarget(playerAC);

	mov	edx, DWORD PTR _playerAC$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; AiDesignateTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], edx

; 749  : 
; 750  : 			for(i = 0; i < mNumMenus; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ProcessInp
$LN3@ProcessInp:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ProcessInp:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN2@ProcessInp

; 751  : 				if(mpMenus[i].mMsgId == type && mpMenus[i].mWingExtent == extent) {

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx+4]
	cmp	ecx, DWORD PTR _type$[ebp]
	jne	SHORT $LN1@ProcessInp
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx+8]
	cmp	edx, DWORD PTR _extent$[ebp]
	jne	SHORT $LN1@ProcessInp

; 752  : 					mCurMenu = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+48], ecx
$LN1@ProcessInp:

; 753  : 				}
; 754  : 			}

	jmp	SHORT $LN3@ProcessInp
$LN2@ProcessInp:

; 755  : 
; 756  : 			mCurPage = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0

; 757  : 			InitPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitPage@MenuManager@@AAEXXZ		; MenuManager::InitPage

; 758  : 			CheckItemConditions(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckItemConditions@MenuManager@@AAEXH@Z ; MenuManager::CheckItemConditions

; 759  :          CommandsSetKeyCombo(val, state, NULL);

	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	?CommandsSetKeyCombo@@YAXKHPAX@Z	; CommandsSetKeyCombo
	add	esp, 12					; 0000000cH
$LN17@ProcessInp:

; 760  : 		}
; 761  :    }
; 762  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ProcessInput@MenuManager@@QAEXKHHH@Z ENDP		; MenuManager::ProcessInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_bottom$1 = -84						; size = 4
_top$2 = -80						; size = 4
_oldFont$3 = -76					; size = 4
_right$4 = -72						; size = 4
_left$5 = -68						; size = 4
_numElements$6 = -64					; size = 4
_eType$7 = -60						; size = 4
_elementNum$8 = -56					; size = 4
_mesgNum$9 = -52					; size = 4
_i$10 = -48						; size = 4
_position$11 = -44					; size = 4
_this$ = -40						; size = 4
_ptextStr$12 = -36					; size = 30
__$ArrayPad$ = -4					; size = 4
?DisplayDraw@MenuManager@@QAEXXZ PROC			; MenuManager::DisplayDraw
; _this$ = ecx

; 536  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 537  : 	if(mIsActive)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN9@DisplayDra

; 538  : 	{
; 539  : 
; 540  : 		float	top;
; 541  : 		float left;
; 542  : 		float bottom;
; 543  : 		float right;
; 544  : 
; 545  : 		float	position = 0.8F;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _position$11[ebp], xmm0

; 546  : 
; 547  : 		int mesgNum;
; 548  : 		int eType;
; 549  : 		int elementNum;
; 550  : 		int numElements;
; 551  : 		int oldFont;
; 552  : 
; 553  : 		char ptextStr[30] = "";

	mov	cl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptextStr$12[ebp], cl
	xor	edx, edx
	mov	DWORD PTR _ptextStr$12[ebp+1], edx
	mov	DWORD PTR _ptextStr$12[ebp+5], edx
	mov	DWORD PTR _ptextStr$12[ebp+9], edx
	mov	DWORD PTR _ptextStr$12[ebp+13], edx
	mov	DWORD PTR _ptextStr$12[ebp+17], edx
	mov	DWORD PTR _ptextStr$12[ebp+21], edx
	mov	DWORD PTR _ptextStr$12[ebp+25], edx
	mov	BYTE PTR _ptextStr$12[ebp+29], dl

; 554  : 		int i;
; 555  : 
; 556  : 		// save the current viewport
; 557  : 		oldFont = VirtualDisplay::CurFont();

	call	?CurFont@VirtualDisplay@@SAHXZ		; VirtualDisplay::CurFont
	mov	DWORD PTR _oldFont$3[ebp], eax

; 558  : 		OTWDriver.renderer->GetViewport(&left, &top, &right, &bottom);

	lea	eax, DWORD PTR _bottom$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _right$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _top$2[ebp]
	push	edx
	lea	eax, DWORD PTR _left$5[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetViewport@VirtualDisplay@@QAEXPAM000@Z ; VirtualDisplay::GetViewport

; 559  : 
; 560  : 		// set the new viewport
; 561  : 		VirtualDisplay::SetFont(OTWDriver.pCockpitManager->PopUpFont());

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?PopUpFont@CockpitManager@@QAEHXZ	; CockpitManager::PopUpFont
	push	eax
	call	?SetFont@VirtualDisplay@@SAXH@Z		; VirtualDisplay::SetFont
	add	esp, 4

; 562  : 
; 563  : 		OTWDriver.renderer->context.ClearBuffers(MPR_CI_ZBUFFER);

	push	4
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?ClearBuffers@ContextMPR@@QAEXG@Z	; ContextMPR::ClearBuffers

; 564  : 		OTWDriver.renderer->StartDraw();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 565  : 		// ASSO: disable the radio comms menu border //Cobra 10/31/04 TJL
; 566  :   		if( !g_bDisableCommsBorder )

	movzx	ecx, BYTE PTR ?g_bDisableCommsBorder@@3_NA ; g_bDisableCommsBorder
	test	ecx, ecx
	jne	$LN8@DisplayDra

; 567  :   		{
; 568  :     			OTWDriver.renderer->SetViewport(-1.0, 1.0, 1.0,	-1.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+112]
	call	edx

; 569  :     
; 570  :     			OTWDriver.renderer->SetColor( 0x997B5200 );					// 60% alpha blue

	push	-1719971328				; 997b5200H
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 571  :     			OTWDriver.renderer->context.RestoreState( STATE_ALPHA_SOLID	);

	push	16					; 00000010H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 572  :     			OTWDriver.renderer->Render2DTri( (float)mDestRect.left,	(float)mDestRect.top,
; 573  :     				(float)mDestRect.right	- 1.0F,	(float)mDestRect.top,
; 574  :     				(float)mDestRect.right	- 1.0F,	(float)mDestRect.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 575  :     			OTWDriver.renderer->Render2DTri( (float)mDestRect.left,	(float)mDestRect.top,
; 576  :     				(float)mDestRect.left,	(float)mDestRect.bottom,
; 577  :     				(float)mDestRect.right	- 1.0F,	(float)mDestRect.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 578  :     
; 579  :     			OTWDriver.renderer->SetColor( 0xFF000000 );					// black

	push	-16777216				; ff000000H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 580  :     
; 581  :     			OTWDriver.renderer->Render2DLine( (float)mDestRect.left, (float)mDestRect.top,
; 582  :     				(float)mDestRect.right	- 1.0F,	(float)mDestRect.top );

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+124]
	call	edx

; 583  :     			OTWDriver.renderer->Render2DLine( (float)mDestRect.right - 1.0F, (float)mDestRect.top,
; 584  :     				(float)mDestRect.right	- 1.0F,	(float)mDestRect.bottom	);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+124]
	call	eax

; 585  :     			OTWDriver.renderer->Render2DLine( (float)mDestRect.right - 1.0F, (float)mDestRect.bottom,
; 586  :     				(float)mDestRect.left,	(float)mDestRect.bottom	);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+124]
	call	edx

; 587  :     			OTWDriver.renderer->Render2DLine( (float)mDestRect.left, (float)mDestRect.bottom,
; 588  :     				(float)mDestRect.left,	(float)mDestRect.top );

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+20]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+28]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+124]
	call	eax
$LN8@DisplayDra:

; 589  : 		}
; 590  : 
; 591  : 
; 592  : 		OTWDriver.renderer->SetViewport(mLeft, mTop, mRight, mBottom);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+68]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+112]
	call	edx

; 593  : 
; 594  : 		// set the color and print the text for the menu
; 595  : 		OTWDriver.renderer->SetColor(mpMenus[mCurMenu].mDrawColor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx+24]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 596  : 		OTWDriver.renderer->TextCenter(0.0F, position, mpMenus[mCurMenu].mpTitle);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _position$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 597  : 
; 598  : 		// set the color and print the text for the page
; 599  : 		position -= 0.15F;

	movss	xmm0, DWORD PTR _position$11[ebp]
	subss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR _position$11[ebp], xmm0

; 600  : 		OTWDriver.renderer->SetColor(mpMenus[mCurMenu].mpPages[mCurPage].mDrawColor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 601  : 		OTWDriver.renderer->TextCenter(0.0F, position, mpMenus[mCurMenu].mpPages[mCurPage].mpTitle);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _position$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 602  : 
; 603  : 		CheckItemConditions(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckItemConditions@MenuManager@@AAEXH@Z ; MenuManager::CheckItemConditions

; 604  : 
; 605  : 		mesgNum			= mpMenus[mCurMenu].mMsgId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _mesgNum$9[ebp], ecx

; 606  : 			
; 607  : 	   mesgNum			-= (VU_LAST_EVENT + 1);

	mov	edx, DWORD PTR _mesgNum$9[ebp]
	sub	edx, 23					; 00000017H
	mov	DWORD PTR _mesgNum$9[ebp], edx

; 608  : 		numElements		= MsgNumElements[mesgNum];

	mov	eax, DWORD PTR _mesgNum$9[ebp]
	mov	ecx, DWORD PTR ?MsgNumElements@@3PAHA[eax*4]
	mov	DWORD PTR _numElements$6[ebp], ecx

; 609  : 		elementNum		= 0;

	mov	DWORD PTR _elementNum$8[ebp], 0

; 610  : 		eType				= -1;

	mov	DWORD PTR _eType$7[ebp], -1
$LN7@DisplayDra:

; 611  : 
; 612  : 		while(eType < 0 && elementNum < numElements) {

	cmp	DWORD PTR _eType$7[ebp], 0
	jge	SHORT $LN6@DisplayDra
	mov	edx, DWORD PTR _elementNum$8[ebp]
	cmp	edx, DWORD PTR _numElements$6[ebp]
	jge	SHORT $LN6@DisplayDra

; 613  : 			eType				= FalconMsgElementTypes[mesgNum][elementNum] - 1001;

	mov	eax, DWORD PTR _mesgNum$9[ebp]
	mov	ecx, DWORD PTR ?FalconMsgElementTypes@@3PAPAHA[eax*4]
	mov	edx, DWORD PTR _elementNum$8[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	sub	eax, 1001				; 000003e9H
	mov	DWORD PTR _eType$7[ebp], eax

; 614  : 			elementNum++;

	mov	ecx, DWORD PTR _elementNum$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _elementNum$8[ebp], ecx

; 615  : 		}

	jmp	SHORT $LN7@DisplayDra
$LN6@DisplayDra:

; 616  : 
; 617  : 		position -= 0.2F;

	movss	xmm0, DWORD PTR _position$11[ebp]
	subss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _position$11[ebp], xmm0

; 618  : 
; 619  : 		// draw text here
; 620  : 		for(i = 0; i < mpMenus[mCurMenu].mpPages[mCurPage].mNumItems; i++) {

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN5@DisplayDra
$LN4@DisplayDra:
	mov	edx, DWORD PTR _i$10[ebp]
	add	edx, 1
	mov	DWORD PTR _i$10[ebp], edx
$LN5@DisplayDra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR _i$10[ebp]
	cmp	ecx, DWORD PTR [eax+edx+4]
	jge	$LN3@DisplayDra

; 621  : 			position	-= mpMenus[mCurMenu].mpPages[mCurPage].mpItems[i].mSpacing;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [edx+eax+16]
	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+ecx+8]
	movss	xmm0, DWORD PTR _position$11[ebp]
	subss	xmm0, DWORD PTR [ecx+eax+8]
	movss	DWORD PTR _position$11[ebp], xmm0

; 622  : 
; 623  : 			sprintf(ptextStr, "%d", (i + 1) % 10);

	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _ptextStr$12[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 624  : 
; 625  : 			if(mpMenus[mCurMenu].mpPages[mCurPage].mpItems[i].mIsAvailable) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+8]
	cmp	DWORD PTR [edx+ecx+24], 0
	je	SHORT $LN2@DisplayDra

; 626  : 				OTWDriver.renderer->SetColor(gMenuColorTable[MENU_BRIGHT_GREEN].mValue);

	mov	eax, 24					; 00000018H
	imul	eax, 3
	mov	ecx, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[eax+20]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 627  : 			}
; 628  : 			else {

	jmp	SHORT $LN1@DisplayDra
$LN2@DisplayDra:

; 629  : 				OTWDriver.renderer->SetColor(gMenuColorTable[MENU_DARK_GREY].mValue);

	mov	eax, 24					; 00000018H
	imul	eax, 5
	mov	ecx, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[eax+20]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx
$LN1@DisplayDra:

; 630  : 			}
; 631  : 			OTWDriver.renderer->TextLeft(-0.70F, position, ptextStr);

	push	0
	lea	eax, DWORD PTR _ptextStr$12[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _position$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf333333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 632  : 
; 633  : 			OTWDriver.renderer->SetColor(mpMenus[mCurMenu].mpPages[mCurPage].mpItems[i].mDrawColor);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR [ecx+edx+16]
	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+eax+8]
	mov	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 634  : 			OTWDriver.renderer->TextLeft(-0.60F, position, mpMenus[mCurMenu].mpPages[mCurPage].mpItems[i].mpText);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+8]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _position$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 635  : 		}

	jmp	$LN4@DisplayDra
$LN3@DisplayDra:

; 636  : 
; 637  : 		OTWDriver.renderer->EndDraw();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 638  : 
; 639  : 		// restore the old viewport
; 640  : 		OTWDriver.renderer->SetViewport(left, top, right, bottom);

	push	ecx
	movss	xmm0, DWORD PTR _bottom$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _right$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _top$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _left$5[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 641  : 		VirtualDisplay::SetFont(oldFont);

	mov	ecx, DWORD PTR _oldFont$3[ebp]
	push	ecx
	call	?SetFont@VirtualDisplay@@SAXH@Z		; VirtualDisplay::SetFont
	add	esp, 4
$LN9@DisplayDra:

; 642  : 	}
; 643  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayDraw@MenuManager@@QAEXXZ ENDP			; MenuManager::DisplayDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_myit$ = -44						; size = 12
tv226 = -32						; size = 4
tv162 = -28						; size = 4
_nu$ = -24						; size = 4
_cf$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitPage@MenuManager@@AAEXXZ PROC			; MenuManager::InitPage
; _this$ = ecx

; 453  : void MenuManager::InitPage() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitPage@MenuManager@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 454  : 	mCallerIdx		= SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentIndex(SimDriver.GetPlayerEntity());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 455  : 	mNumInFlight	= ((FlightClass*) SimDriver.GetPlayerEntity()->GetCampaignObject())->GetTotalVehicles();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], eax

; 456  : 	mExtent			= mpMenus[mCurMenu].mWingExtent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR [edx+88], eax

; 457  : 
; 458  : 	mpPage			= &(mpMenus[mCurMenu].mpPages[mCurPage]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR [ecx+edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 459  : 	mNumItems		= mpPage->mNumItems;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+92], edx

; 460  : // check for OnGround status
; 461  : 	mOnGround = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0

; 462  : 	if(SimDriver.GetPlayerEntity()->OnGround())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	DWORD PTR tv162[ebp], eax
	mov	ecx, DWORD PTR tv162[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv162[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN7@InitPage

; 463  : 		mOnGround = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 1
$LN7@InitPage:

; 464  : 
; 465  : // check for an AWACS in the sky
; 466  : 	mAWACSavail = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 0

; 467  : 
; 468  : 	if (!g_bAWACSRequired)		// Only check for AWACS available if user wants AWACS required...

	movzx	eax, BYTE PTR ?g_bAWACSRequired@@3_NA	; g_bAWACSRequired
	test	eax, eax
	jne	SHORT $LN6@InitPage

; 469  : 		mAWACSavail = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], 1
$LN6@InitPage:

; 470  : 
; 471  : 	Unit				nu,cf;
; 472  : 	VuListIterator		myit(AllAirList);

	mov	edx, DWORD PTR ?AllAirList@@3PAVVuLinkedList@@A ; AllAirList
	push	edx
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 473  : 	nu = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _nu$[ebp], eax
$LN5@InitPage:

; 474  : 	while (nu && !mAWACSavail)

	cmp	DWORD PTR _nu$[ebp], 0
	je	$LN4@InitPage
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jne	$LN4@InitPage

; 475  : 	{
; 476  : 		cf = nu;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	DWORD PTR _cf$[ebp], ecx

; 477  : 		nu = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nu$[ebp], eax

; 478  : // 2002-03-07 MN of course only AWACS from our team - doh!
; 479  : 		if (!cf->IsFlight() || cf->IsDead())

	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	SHORT $LN2@InitPage
	mov	eax, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+552]
	call	eax
	test	eax, eax
	je	SHORT $LN3@InitPage
$LN2@InitPage:

; 480  : 			continue;

	jmp	SHORT $LN5@InitPage
$LN3@InitPage:

; 481  : 		if (cf->GetUnitMission() == AMIS_AWACS && cf->GetTeam() == SimDriver.GetPlayerEntity()->GetTeam())

	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	cmp	eax, 26					; 0000001aH
	jne	SHORT $LN1@InitPage
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	DWORD PTR tv226[ebp], eax
	mov	ecx, DWORD PTR tv226[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv226[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	esi, al
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	cmp	ecx, esi
	jne	SHORT $LN1@InitPage

; 482  : 		{
; 483  : 			mAWACSavail = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 1
$LN1@InitPage:

; 484  : 		}
; 485  : 	}

	jmp	$LN5@InitPage
$LN4@InitPage:

; 486  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitPage@MenuManager@@AAEXXZ$0:
	lea	ecx, DWORD PTR _myit$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?InitPage@MenuManager@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitPage@MenuManager@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitPage@MenuManager@@AAEXXZ ENDP			; MenuManager::InitPage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_playerAC$ = -20					; size = 4
_condition$ = -16					; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_doLoop$ = -1						; size = 1
_poll$ = 8						; size = 4
?CheckItemConditions@MenuManager@@AAEXH@Z PROC		; MenuManager::CheckItemConditions
; _this$ = ecx

; 490  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 491  : 	int			i;
; 492  : 	int			condition;
; 493  : 	
; 494  : 	// COBRA - RED - CTD Fix
; 495  : 	if(!SimDriver.GetPlayerEntity()) return;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	jne	SHORT $LN16@CheckItemC
	jmp	$LN17@CheckItemC
$LN16@CheckItemC:

; 496  : 	
; 497  : 	mIsPolling = poll;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _poll$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 498  : 	//Cobra this should update our menu list while open 
; 499  : 	bool doLoop = TRUE;

	mov	BYTE PTR _doLoop$[ebp], 1

; 500  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 501  : 	mTargetId = AiDesignateTarget(playerAC);

	mov	edx, DWORD PTR _playerAC$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; AiDesignateTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], edx

; 502  : 
; 503  : 	for(i = 0; i < mNumItems; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@CheckItemC
$LN14@CheckItemC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@CheckItemC:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+92]
	jge	$LN17@CheckItemC

; 504  : 		if(doLoop == TRUE || poll == FALSE || mpPage->mpItems[i].mPoll) {

	movzx	ecx, BYTE PTR _doLoop$[ebp]
	cmp	ecx, 1
	je	SHORT $LN11@CheckItemC
	cmp	DWORD PTR _poll$[ebp], 0
	je	SHORT $LN11@CheckItemC
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+8]
	cmp	DWORD PTR [edx+ecx+28], 0
	je	$LN12@CheckItemC
$LN11@CheckItemC:

; 505  : 			condition = mpPage->mpItems[i].mCondition;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [eax+edx+20]
	mov	DWORD PTR _condition$[ebp], ecx

; 506  : 
; 507  : 			if(condition < 0) {

	cmp	DWORD PTR _condition$[ebp], 0
	jge	SHORT $LN10@CheckItemC

; 508  : 				mpPage->mpItems[i].mIsAvailable = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx+24], 1

; 509  : 				mpPage->mpItems[i].mDrawColor = mpPage->mpItems[i].mNormColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+96]
	mov	esi, DWORD PTR _i$[ebp]
	shl	esi, 5
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR [ecx+esi+16], edx
	jmp	$LN12@CheckItemC
$LN10@CheckItemC:

; 510  : 			}
; 511  : 			else if(condition == 5 && !mOnGround) { 

	cmp	DWORD PTR _condition$[ebp], 5
	jne	SHORT $LN8@CheckItemC
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN8@CheckItemC

; 512  : 				mpPage->mpItems[i].mIsAvailable = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax+24], 1

; 513  : 				mpPage->mpItems[i].mDrawColor = mpPage->mpItems[i].mNormColor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]
	mov	esi, DWORD PTR _i$[ebp]
	shl	esi, 5
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	DWORD PTR [eax+esi+16], ecx
	jmp	$LN12@CheckItemC
$LN8@CheckItemC:

; 514  : 			}
; 515  : 			else if (condition == 6 && mAWACSavail) { 

	cmp	DWORD PTR _condition$[ebp], 6
	jne	SHORT $LN6@CheckItemC
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN6@CheckItemC

; 516  : 				mpPage->mpItems[i].mIsAvailable = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+edx+24], 1

; 517  : 				mpPage->mpItems[i].mDrawColor = mpPage->mpItems[i].mNormColor;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+96]
	mov	esi, DWORD PTR _i$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR [ecx+eax+12]
	mov	DWORD PTR [edx+esi+16], eax
	jmp	$LN12@CheckItemC
$LN6@CheckItemC:

; 518  : 			}
; 519  : 			else if (condition == 7 && mOnGround) { 

	cmp	DWORD PTR _condition$[ebp], 7
	jne	SHORT $LN4@CheckItemC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	SHORT $LN4@CheckItemC

; 520  : 				mpPage->mpItems[i].mIsAvailable = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx+24], 1

; 521  : 				mpPage->mpItems[i].mDrawColor = mpPage->mpItems[i].mNormColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+96]
	mov	esi, DWORD PTR _i$[ebp]
	shl	esi, 5
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR [ecx+esi+16], edx
	jmp	$LN12@CheckItemC
$LN4@CheckItemC:

; 522  : 			}
; 523  : 			else if(MenuCallbackArray[mpPage->mpItems[i].mCondition](mCallerIdx, mNumInFlight, mExtent, mIsPolling, mTargetId)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR [eax+72]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR ?MenuCallbackArray@@3PAP6AHHHHHVVU_ID@@@ZA[eax*4]
	call	ecx
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN2@CheckItemC

; 524  : 				mpPage->mpItems[i].mIsAvailable = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx+24], 1

; 525  : 				mpPage->mpItems[i].mDrawColor = mpPage->mpItems[i].mNormColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+96]
	mov	esi, DWORD PTR _i$[ebp]
	shl	esi, 5
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR [ecx+esi+16], edx

; 526  : 			}
; 527  : 			else {

	jmp	SHORT $LN12@CheckItemC
$LN2@CheckItemC:

; 528  : 				mpPage->mpItems[i].mIsAvailable = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+edx+24], 0

; 529  : 				mpPage->mpItems[i].mDrawColor = gMenuColorTable[MENU_DARK_GREY].mValue;

	mov	ecx, 24					; 00000018H
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[ecx+20]
	mov	DWORD PTR [eax+edx+16], ecx
$LN12@CheckItemC:

; 530  : 			}
; 531  : 		}
; 532  : 	}

	jmp	$LN14@CheckItemC
$LN17@CheckItemC:

; 533  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckItemConditions@MenuManager@@AAEXH@Z ENDP		; MenuManager::CheckItemConditions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_msgType$ = 8						; size = 4
_enumId$ = 12						; size = 4
_aiExtent$ = 16						; size = 4
_targetId$ = 20						; size = 8
?SendMenuMsg@MenuManager@@AAEXHHHVVU_ID@@@Z PROC	; MenuManager::SendMenuMsg
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 	if (SimDriver.GetPlayerEntity()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN9@SendMenuMs

; 768  :       switch (msgType) {

	mov	eax, DWORD PTR _msgType$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 38					; 00000026H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 26			; 0000001aH
	ja	SHORT $LN9@SendMenuMs
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN11@SendMenuMs[edx]
	jmp	DWORD PTR $LN12@SendMenuMs[eax*4]
$LN5@SendMenuMs:

; 769  :          case AWACSMsg:
; 770  : 				MenuSendAwacs(enumId, targetId);

	push	1
	mov	ecx, DWORD PTR _targetId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _targetId$[ebp]
	push	edx
	mov	eax, DWORD PTR _enumId$[ebp]
	push	eax
	call	?MenuSendAwacs@@YAXHVVU_ID@@H@Z		; MenuSendAwacs
	add	esp, 16					; 00000010H

; 771  :          break;

	jmp	SHORT $LN9@SendMenuMs
$LN4@SendMenuMs:

; 772  :   
; 773  :          case ATCMsg:
; 774  : 				MenuSendAtc(enumId);

	push	1
	mov	ecx, DWORD PTR _enumId$[ebp]
	push	ecx
	call	?MenuSendAtc@@YAXHH@Z			; MenuSendAtc
	add	esp, 8

; 775  :          break;

	jmp	SHORT $LN9@SendMenuMs
$LN3@SendMenuMs:

; 776  : 
; 777  :          case TankerMsg:
; 778  : 				MenuSendTanker(enumId);

	mov	edx, DWORD PTR _enumId$[ebp]
	push	edx
	call	?MenuSendTanker@@YAXH@Z			; MenuSendTanker
	add	esp, 4

; 779  : 				break;

	jmp	SHORT $LN9@SendMenuMs
$LN2@SendMenuMs:

; 780  : 
; 781  :          case WingmanMsg:
; 782  : 				AiSendPlayerCommand(enumId, aiExtent, targetId);

	mov	eax, DWORD PTR _targetId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _targetId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aiExtent$[ebp]
	push	edx
	mov	eax, DWORD PTR _enumId$[ebp]
	push	eax
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN9@SendMenuMs:

; 783  : 				break;
; 784  : 
; 785  : 			default:
; 786  : 				ShiWarning("Unsupported Message Type");	// unsupported message
; 787  : 				break;
; 788  :       }
; 789  :    }
; 790  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN12@SendMenuMs:
	DD	$LN2@SendMenuMs
	DD	$LN5@SendMenuMs
	DD	$LN4@SendMenuMs
	DD	$LN3@SendMenuMs
	DD	$LN9@SendMenuMs
$LN11@SendMenuMs:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?SendMenuMsg@MenuManager@@AAEXHHHVVU_ID@@@Z ENDP	; MenuManager::SendMenuMsg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plinePtr$ = 8						; size = 4
_resCount$ = 12						; size = 4
?ParseResInfo@MenuManager@@AAEXPADH@Z PROC		; MenuManager::ParseResInfo
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	ShiAssert(resCount >= 0);
; 215  : 
; 216  : 	sscanf(plinePtr, "%d %d %d %d %d %d", &(mpResDimensions[resCount].xRes),
; 217  : 														&(mpResDimensions[resCount].yRes),
; 218  : 														&(mpResDimensions[resCount].mDimensions.top),
; 219  : 														&(mpResDimensions[resCount].mDimensions.left),
; 220  : 														&(mpResDimensions[resCount].mDimensions.bottom),
; 221  : 														&(mpResDimensions[resCount].mDimensions.right));

	mov	eax, DWORD PTR _resCount$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [edx+eax+16]
	push	eax
	mov	ecx, DWORD PTR _resCount$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [eax+ecx+20]
	push	ecx
	mov	edx, DWORD PTR _resCount$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	lea	edx, DWORD PTR [ecx+edx+8]
	push	edx
	mov	eax, DWORD PTR _resCount$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [edx+eax+12]
	push	eax
	mov	ecx, DWORD PTR _resCount$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [eax+ecx+4]
	push	ecx
	mov	edx, DWORD PTR _resCount$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, edx
	push	ecx
	push	OFFSET ??_C@_0BC@HDIJPDCG@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	_sscanf
	add	esp, 32					; 00000020H

; 222  : 
; 223  : 
; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ParseResInfo@MenuManager@@AAEXPADH@Z ENDP		; MenuManager::ParseResInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_color$ = -60						; size = 4
$T1 = -56						; size = 4
_this$ = -52						; size = 4
_i$ = -48						; size = 4
_ptoken$ = -44						; size = 4
_pItem$ = -40						; size = 4
_pdrawColor$ = -36					; size = 20
_pseparators$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_plinePtr$ = 8						; size = 4
_menuNumber$ = 12					; size = 4
_pageNumber$ = 16					; size = 4
_itemNumber$ = 20					; size = 4
?ParseItemInfo@MenuManager@@AAEXPADPAH11@Z PROC		; MenuManager::ParseItemInfo
; _this$ = ecx

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 	(*itemNumber)++;

	mov	eax, DWORD PTR _itemNumber$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _itemNumber$[ebp]
	mov	DWORD PTR [edx], ecx

; 388  : 
; 389  : 	char	pdrawColor[20];
; 390  : 	ULONG color;
; 391  : 	char	pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x23, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 35	; 00000023H
	mov	BYTE PTR _pseparators$[ebp+8], 0

; 392  : 	char	*ptoken;
; 393  : 
; 394  : 	ItemStruct* pItem = &(mpMenus[*menuNumber].mpPages[*pageNumber].mpItems[*itemNumber]);

	mov	eax, DWORD PTR _menuNumber$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _pageNumber$[ebp]
	mov	edx, DWORD PTR [edx]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR _itemNumber$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shl	ecx, 5
	add	ecx, DWORD PTR [eax+edx+8]
	mov	DWORD PTR _pItem$[ebp], ecx

; 395  : 
; 396  : 	#ifdef USE_SH_POOLS
; 397  : 	pItem->mpText = (char *)MemAllocPtr(gCockMemPool,sizeof(char)*mMaxTextLen,FALSE);
; 398  : 	#else
; 399  : 	pItem->mpText		= new char[mMaxTextLen];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _pItem$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx

; 400  : 	#endif
; 401  : 
; 402  : 	*(pItem->mpText)	= '\0';

	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 0

; 403  : 
; 404  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 405  : 	sscanf(ptoken, "%d",  &(pItem->mCondition));

	mov	ecx, DWORD PTR _pItem$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 406  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 407  : 	sscanf(ptoken, "%d",  &(pItem->mPoll));

	mov	edx, DWORD PTR _pItem$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 408  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 409  : 	sscanf(ptoken, "%s",  pdrawColor);

	lea	eax, DWORD PTR _pdrawColor$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 410  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 411  : 	sscanf(ptoken, "%f",  &(pItem->mSpacing));

	mov	ecx, DWORD PTR _pItem$[ebp]
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 412  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 413  : 	sscanf(ptoken, "%d",  &(pItem->mMessage));

	mov	edx, DWORD PTR _pItem$[ebp]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 414  : 
; 415  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN4@ParseItemI:

; 416  : 	while(*plinePtr != '\n' && *plinePtr != NULL) {

	mov	ecx, DWORD PTR _plinePtr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN3@ParseItemI
	mov	eax, DWORD PTR _plinePtr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@ParseItemI

; 417  : 		pItem->mpText[i++] = *(plinePtr++);

	mov	edx, DWORD PTR _pItem$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _plinePtr$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _plinePtr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 418  : 	}

	jmp	SHORT $LN4@ParseItemI
$LN3@ParseItemI:

; 419  : 
; 420  : 	pItem->mpText[i] = '\0';

	mov	edx, DWORD PTR _pItem$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+ecx], 0

; 421  : 
; 422  : 	if(FindMenuColorValue(pdrawColor, &color)) {

	lea	edx, DWORD PTR _color$[ebp]
	push	edx
	lea	eax, DWORD PTR _pdrawColor$[ebp]
	push	eax
	call	?FindMenuColorValue@@YAHPADPAK@Z	; FindMenuColorValue
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ParseItemI

; 423  : 		pItem->mNormColor = color;

	mov	ecx, DWORD PTR _pItem$[ebp]
	mov	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 424  : 	}
; 425  : 	else {

	jmp	SHORT $LN5@ParseItemI
$LN2@ParseItemI:

; 426  : 		pItem->mNormColor = gMenuColorTable[MENU_WHITE].mValue;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _pItem$[ebp]
	mov	edx, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[eax+20]
	mov	DWORD PTR [ecx+12], edx
$LN5@ParseItemI:

; 427  : 	}
; 428  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ParseItemInfo@MenuManager@@AAEXPADPAH11@Z ENDP		; MenuManager::ParseItemInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -60						; size = 4
_color$ = -56						; size = 4
$T2 = -52						; size = 4
_this$ = -48						; size = 4
_ptoken$ = -44						; size = 4
_pPage$ = -40						; size = 4
_pdrawColor$ = -36					; size = 20
_pseparators$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_plinePtr$ = 8						; size = 4
_menuNumber$ = 12					; size = 4
_pageNumber$ = 16					; size = 4
_itemNumber$ = 20					; size = 4
?ParsePageInfo@MenuManager@@AAEXPADPAH11@Z PROC		; MenuManager::ParsePageInfo
; _this$ = ecx

; 334  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 	(*pageNumber)++;

	mov	eax, DWORD PTR _pageNumber$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pageNumber$[ebp]
	mov	DWORD PTR [edx], ecx

; 336  : 	*itemNumber = -1;

	mov	eax, DWORD PTR _itemNumber$[ebp]
	mov	DWORD PTR [eax], -1

; 337  : 
; 338  : 	char	pdrawColor[20];
; 339  : 	ULONG color;
; 340  : 	char	pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x23, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 35	; 00000023H
	mov	BYTE PTR _pseparators$[ebp+8], 0

; 341  : 	char	*ptoken;
; 342  : 
; 343  : 	PageStruct* pPage = &(mpMenus[*menuNumber].mpPages[*pageNumber]);

	mov	ecx, DWORD PTR _menuNumber$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _pageNumber$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR [ecx+edx+16]
	mov	DWORD PTR _pPage$[ebp], eax

; 344  : 
; 345  : 	#ifdef USE_SH_POOLS
; 346  : 	pPage->mpTitle = (char *)MemAllocPtr(gCockMemPool,sizeof(char)*mMaxTextLen,FALSE);
; 347  : 	#else
; 348  : 	pPage->mpTitle		= new char[mMaxTextLen];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _pPage$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 349  : 	#endif
; 350  : 
; 351  : 	*(pPage->mpTitle)	= '\0';

	mov	edx, DWORD PTR _pPage$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax], 0

; 352  : 
; 353  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 354  : 	sscanf(ptoken, "%d",  &(pPage->mNumItems));

	mov	eax, DWORD PTR _pPage$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 355  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 356  : 	sscanf(ptoken, "%d",  &(pPage->mCondition));

	mov	ecx, DWORD PTR _pPage$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 357  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 358  : 	sscanf(ptoken, "%s",  pdrawColor);

	lea	edx, DWORD PTR _pdrawColor$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 359  : 
; 360  : 	*(pPage->mpTitle) = NULL;

	mov	ecx, DWORD PTR _pPage$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0

; 361  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN5@ParsePageI:

; 362  : 	while(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN4@ParsePageI

; 363  : 		strcat(pPage->mpTitle, ptoken);

	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	mov	eax, DWORD PTR _pPage$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcat
	add	esp, 8

; 364  : 		ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 365  : 		if(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN3@ParsePageI

; 366  : 			strcat(pPage->mpTitle, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	ecx, DWORD PTR _pPage$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcat
	add	esp, 8
$LN3@ParsePageI:

; 367  : 		}
; 368  : 	}

	jmp	SHORT $LN5@ParsePageI
$LN4@ParsePageI:

; 369  : 
; 370  : 	if(FindMenuColorValue(pdrawColor, &color)) {

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pdrawColor$[ebp]
	push	ecx
	call	?FindMenuColorValue@@YAHPADPAK@Z	; FindMenuColorValue
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@ParsePageI

; 371  : 		pPage->mDrawColor = color;

	mov	edx, DWORD PTR _pPage$[ebp]
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR [edx+16], eax

; 372  : 	}
; 373  : 	else {

	jmp	SHORT $LN1@ParsePageI
$LN2@ParsePageI:

; 374  : 		pPage->mDrawColor = gMenuColorTable[MENU_WHITE].mValue;

	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _pPage$[ebp]
	mov	eax, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[ecx+20]
	mov	DWORD PTR [edx+16], eax
$LN1@ParsePageI:

; 375  : 	}
; 376  : 
; 377  : 
; 378  : 	#ifdef USE_SH_POOLS
; 379  : 	pPage->mpItems = (ItemStruct *)MemAllocPtr(gCockMemPool,sizeof(ItemStruct)*pPage->mNumItems,FALSE);
; 380  : 	#else
; 381  : 	pPage->mpItems = new ItemStruct[pPage->mNumItems];

	xor	ecx, ecx
	mov	edx, DWORD PTR _pPage$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _pPage$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 382  : 	#endif
; 383  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ParsePageInfo@MenuManager@@AAEXPADPAH11@Z ENDP		; MenuManager::ParsePageInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -124						; size = 4
_color$ = -120						; size = 4
$T2 = -116						; size = 4
_found$ = -112						; size = 4
_this$ = -108						; size = 4
_i$ = -104						; size = 4
_id$ = -100						; size = 4
_pMenu$ = -96						; size = 4
_ptoken$ = -92						; size = 4
_pdrawColor$ = -88					; size = 20
_pmsgName$ = -68					; size = 30
_paiExtent$ = -36					; size = 20
_pseparators$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_plinePtr$ = 8						; size = 4
_menuNumber$ = 12					; size = 4
_pageNumber$ = 16					; size = 4
?ParseMenuInfo@MenuManager@@AAEXPADPAH1@Z PROC		; MenuManager::ParseMenuInfo
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 	(*menuNumber)++;

	mov	eax, DWORD PTR _menuNumber$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _menuNumber$[ebp]
	mov	DWORD PTR [edx], ecx

; 253  : 	*pageNumber = -1;

	mov	eax, DWORD PTR _pageNumber$[ebp]
	mov	DWORD PTR [eax], -1

; 254  : 
; 255  : 	char	pdrawColor[20];
; 256  : 	ULONG color;
; 257  : 	char	pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x23, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 35	; 00000023H
	mov	BYTE PTR _pseparators$[ebp+8], 0

; 258  : 	char	*ptoken;
; 259  : 	char	pmsgName[30] = "";

	mov	cl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _pmsgName$[ebp], cl
	xor	edx, edx
	mov	DWORD PTR _pmsgName$[ebp+1], edx
	mov	DWORD PTR _pmsgName$[ebp+5], edx
	mov	DWORD PTR _pmsgName$[ebp+9], edx
	mov	DWORD PTR _pmsgName$[ebp+13], edx
	mov	DWORD PTR _pmsgName$[ebp+17], edx
	mov	DWORD PTR _pmsgName$[ebp+21], edx
	mov	DWORD PTR _pmsgName$[ebp+25], edx
	mov	BYTE PTR _pmsgName$[ebp+29], dl

; 260  : 	char	paiExtent[20] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _paiExtent$[ebp], al
	xor	ecx, ecx
	mov	DWORD PTR _paiExtent$[ebp+1], ecx
	mov	DWORD PTR _paiExtent$[ebp+5], ecx
	mov	DWORD PTR _paiExtent$[ebp+9], ecx
	mov	DWORD PTR _paiExtent$[ebp+13], ecx
	mov	WORD PTR _paiExtent$[ebp+17], cx
	mov	BYTE PTR _paiExtent$[ebp+19], cl

; 261  : 	BOOL	found;
; 262  : 	int	id;
; 263  : 	int	i;
; 264  : 
; 265  : 
; 266  : 	MenuStruct* pMenu = &(mpMenus[*menuNumber]);

	mov	edx, DWORD PTR _menuNumber$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pMenu$[ebp], eax

; 267  : 
; 268  : 	#ifdef USE_SH_POOLS
; 269  : 	pMenu->mpTitle = (char *)MemAllocPtr(gCockMemPool,sizeof(char)*mMaxTextLen,FALSE);
; 270  : 	#else
; 271  : 	pMenu->mpTitle		= new char[mMaxTextLen];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR _pMenu$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx

; 272  : 	#endif
; 273  : 	*(pMenu->mpTitle)	= '\0';

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 0

; 274  : 
; 275  : 
; 276  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 277  : 	sscanf(ptoken, "%s",  pmsgName);

	lea	ecx, DWORD PTR _pmsgName$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 278  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 279  : 	sscanf(ptoken, "%s",  paiExtent);

	lea	edx, DWORD PTR _paiExtent$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 280  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 281  : 	sscanf(ptoken, "%d",  &(pMenu->mNumPages));

	mov	eax, DWORD PTR _pMenu$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 282  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 283  : 	sscanf(ptoken, "%d",  &(pMenu->mCondition));

	mov	ecx, DWORD PTR _pMenu$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 284  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 285  : 	sscanf(ptoken, "%s",  pdrawColor);

	lea	edx, DWORD PTR _pdrawColor$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 286  : 
; 287  : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN13@ParseMenuI:

; 288  : 	while(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN12@ParseMenuI

; 289  : 		strcat(pMenu->mpTitle, ptoken);

	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMenu$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcat
	add	esp, 8

; 290  : 		ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 291  : 		if(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN11@ParseMenuI

; 292  : 			strcat(pMenu->mpTitle, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcat
	add	esp, 8
$LN11@ParseMenuI:

; 293  : 		}
; 294  : 	}

	jmp	SHORT $LN13@ParseMenuI
$LN12@ParseMenuI:

; 295  : 
; 296  : 	for(i = 0; i < AiTotalExtent; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@ParseMenuI
$LN9@ParseMenuI:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN10@ParseMenuI:
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN8@ParseMenuI

; 297  : 		if(!strcmpi(paiExtent, gpAiExtentStr[i])) {

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?gpAiExtentStr@@3PAPADA[edx*4]
	push	eax
	lea	ecx, DWORD PTR _paiExtent$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@ParseMenuI

; 298  : 			pMenu->mWingExtent = i;;

	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN7@ParseMenuI:

; 299  : 		}
; 300  : 	}

	jmp	SHORT $LN9@ParseMenuI
$LN8@ParseMenuI:

; 301  : 
; 302  : 	if(FindMenuColorValue(pdrawColor, &color)) {

	lea	ecx, DWORD PTR _color$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pdrawColor$[ebp]
	push	edx
	call	?FindMenuColorValue@@YAHPADPAK@Z	; FindMenuColorValue
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ParseMenuI

; 303  : 		pMenu->mDrawColor = color;

	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 304  : 	}
; 305  : 	else {

	jmp	SHORT $LN5@ParseMenuI
$LN6@ParseMenuI:

; 306  : 		pMenu->mDrawColor = gMenuColorTable[MENU_WHITE].mValue;

	mov	edx, 24					; 00000018H
	shl	edx, 0
	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[edx+20]
	mov	DWORD PTR [eax+24], ecx
$LN5@ParseMenuI:

; 307  : 	}
; 308  : 
; 309  :    id		= 0;

	mov	DWORD PTR _id$[ebp], 0

; 310  : 	found = FALSE;

	mov	DWORD PTR _found$[ebp], 0
$LN4@ParseMenuI:

; 311  : 
; 312  : 	while(!found && id <= SimRoughPositionUpdateMsg) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN3@ParseMenuI
	cmp	DWORD PTR _id$[ebp], 87			; 00000057H
	jg	SHORT $LN3@ParseMenuI

; 313  : 
; 314  : 		if(!strcmpi(pmsgName, TheEventStrings[FalconMsgIdStr[id]])) {

	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR ?FalconMsgIdStr@@3PAHA[edx*4]
	mov	ecx, DWORD PTR ?TheEventStrings@@3PAPADA[eax*4]
	push	ecx
	lea	edx, DWORD PTR _pmsgName$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ParseMenuI

; 315  : 			found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 316  : 			pMenu->mMsgId = id + (VU_LAST_EVENT + 1);

	mov	eax, DWORD PTR _id$[ebp]
	add	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _pMenu$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 317  : 		}
; 318  : 		else {

	jmp	SHORT $LN1@ParseMenuI
$LN2@ParseMenuI:

; 319  : 			id++;

	mov	edx, DWORD PTR _id$[ebp]
	add	edx, 1
	mov	DWORD PTR _id$[ebp], edx
$LN1@ParseMenuI:

; 320  : 		}
; 321  : 	}

	jmp	SHORT $LN4@ParseMenuI
$LN3@ParseMenuI:

; 322  : 
; 323  : 	F4Assert (found);
; 324  : 
; 325  : 
; 326  : 	#ifdef USE_SH_POOLS
; 327  : 	pMenu->mpPages = (PageStruct *)MemAllocPtr(gCockMemPool,sizeof(PageStruct)*pMenu->mNumPages,FALSE);
; 328  : 	#else
; 329  : 	pMenu->mpPages = new PageStruct[pMenu->mNumPages];

	xor	ecx, ecx
	mov	edx, DWORD PTR _pMenu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _pMenu$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+16], ecx

; 330  : 	#endif
; 331  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ParseMenuInfo@MenuManager@@AAEXPADPAH1@Z ENDP		; MenuManager::ParseMenuInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
_plinePtr$ = 8						; size = 4
?ParseManagerInfo@MenuManager@@AAEXPAD@Z PROC		; MenuManager::ParseManagerInfo
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	sscanf(plinePtr, "%d %d %d", &mNumMenus, &mMaxTextLen, &mTotalRes);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_08OOHKHLPO@?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	_sscanf
	add	esp, 20					; 00000014H

; 231  : 
; 232  : 	mMaxTextLen++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], edx

; 233  : 
; 234  : 	#ifdef USE_SH_POOLS
; 235  : 	mpMenus = (MenuStruct *)MemAllocPtr(gCockMemPool,sizeof(MenuStruct)*mNumMenus,FALSE);
; 236  : 	#else
; 237  : 	mpMenus = new MenuStruct[mNumMenus];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 28					; 0000001cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+12], ecx

; 238  : 	#endif
; 239  : 
; 240  : 	mResCount = mTotalRes;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+44], ecx

; 241  : 
; 242  : 	#ifdef USE_SH_POOLS
; 243  : 	mpResDimensions = (ResStruct *)MemAllocPtr(gCockMemPool,sizeof(ResStruct)*mTotalRes,FALSE);
; 244  : 	#else
; 245  : 	mpResDimensions = new ResStruct[mTotalRes];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+32], ecx

; 246  : 	#endif
; 247  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ParseManagerInfo@MenuManager@@AAEXPAD@Z ENDP		; MenuManager::ParseManagerInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_lineLen$ = -580					; size = 4
_itemNumber$ = -576					; size = 4
tv80 = -572						; size = 4
tv200 = -568						; size = 4
tv192 = -564						; size = 4
_menuNumber$ = -560					; size = 4
_quitFlag$ = -556					; size = 4
_pageNumber$ = -552					; size = 4
_pFile$ = -548						; size = 4
_presult$ = -544					; size = 4
_ptoken$ = -540						; size = 4
_this$ = -536						; size = 4
_plinePtr$ = -532					; size = 4
_plineBuffer$ = -528					; size = 512
_pseparators$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_pfileName$ = 8						; size = 4
?ReadDataFile@MenuManager@@AAEXPAD@Z PROC		; MenuManager::ReadDataFile
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 580				; 00000244H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 	FILE*				pFile;
; 159  : 	BOOL				quitFlag  = FALSE;

	mov	DWORD PTR _quitFlag$[ebp], 0

; 160  : 	char*				presult = "";

	mov	DWORD PTR _presult$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 161  : 	char*				plinePtr;
; 162  : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 163  : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 164  : 	char				*ptoken;
; 165  : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x23, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 35	; 00000023H
	mov	BYTE PTR _pseparators$[ebp+8], 0

; 166  : 	int				menuNumber = -1;

	mov	DWORD PTR _menuNumber$[ebp], -1

; 167  : 	int				pageNumber = -1;

	mov	DWORD PTR _pageNumber$[ebp], -1

; 168  : 	int				itemNumber = -1;

	mov	DWORD PTR _itemNumber$[ebp], -1

; 169  : 
; 170  : 	pFile = CP_OPEN(pfileName, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	mov	edx, DWORD PTR _pfileName$[ebp]
	push	edx
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _pFile$[ebp], eax

; 171  : 	F4Assert(pFile);
; 172  : 
; 173  : 	presult	= fgets(plineBuffer, lineLen, pFile);

	mov	eax, DWORD PTR _pFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _presult$[ebp], eax

; 174  : 	quitFlag	= (presult == NULL);

	cmp	DWORD PTR _presult$[ebp], 0
	jne	SHORT $LN16@ReadDataFi
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN17@ReadDataFi
$LN16@ReadDataFi:
	mov	DWORD PTR tv80[ebp], 0
$LN17@ReadDataFi:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _quitFlag$[ebp], edx

; 175  : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax
$LN13@ReadDataFi:

; 176  : 
; 177  : 	while(!quitFlag) {

	cmp	DWORD PTR _quitFlag$[ebp], 0
	jne	$LN12@ReadDataFi

; 178  : 
; 179  : 		if(*plineBuffer == '#') {

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _plineBuffer$[ebp+ecx]
	cmp	edx, 35					; 00000023H
	jne	$LN11@ReadDataFi

; 180  : 
; 181  : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 182  : 
; 183  : 			if(!strcmpi(ptoken, TYPE_MENUMANGER_STR)) {

	push	OFFSET ??_C@_0M@MNHFKKGE@MENUMANAGER?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@ReadDataFi

; 184  : 				ParseManagerInfo(plinePtr);

	mov	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseManagerInfo@MenuManager@@AAEXPAD@Z ; MenuManager::ParseManagerInfo
	jmp	$LN11@ReadDataFi
$LN10@ReadDataFi:

; 185  : 			}
; 186  : 			else if(!strcmpi(ptoken, TYPE_MENU_STR)) {

	push	OFFSET ??_C@_04IILMDFMO@MENU?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@ReadDataFi

; 187  : 				ParseMenuInfo(plinePtr, &menuNumber, &pageNumber);

	lea	edx, DWORD PTR _pageNumber$[ebp]
	push	edx
	lea	eax, DWORD PTR _menuNumber$[ebp]
	push	eax
	mov	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseMenuInfo@MenuManager@@AAEXPADPAH1@Z ; MenuManager::ParseMenuInfo
	jmp	$LN11@ReadDataFi
$LN8@ReadDataFi:

; 188  : 			}
; 189  : 			else if(!strcmpi(ptoken, TYPE_PAGE_STR)) {

	push	OFFSET ??_C@_04NKLNNIHE@PAGE?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@ReadDataFi

; 190  : 				ParsePageInfo(plinePtr, &menuNumber, &pageNumber, &itemNumber);

	lea	eax, DWORD PTR _itemNumber$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pageNumber$[ebp]
	push	ecx
	lea	edx, DWORD PTR _menuNumber$[ebp]
	push	edx
	mov	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParsePageInfo@MenuManager@@AAEXPADPAH11@Z ; MenuManager::ParsePageInfo
	jmp	$LN11@ReadDataFi
$LN6@ReadDataFi:

; 191  : 			}
; 192  : 			else if(!strcmpi(ptoken, TYPE_ITEM_STR)) {

	push	OFFSET ??_C@_04BLNHNEEM@ITEM?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@ReadDataFi

; 193  : 				ParseItemInfo(plinePtr, &menuNumber, &pageNumber, &itemNumber);

	lea	edx, DWORD PTR _itemNumber$[ebp]
	push	edx
	lea	eax, DWORD PTR _pageNumber$[ebp]
	push	eax
	lea	ecx, DWORD PTR _menuNumber$[ebp]
	push	ecx
	mov	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseItemInfo@MenuManager@@AAEXPADPAH11@Z ; MenuManager::ParseItemInfo
	jmp	SHORT $LN11@ReadDataFi
$LN4@ReadDataFi:

; 194  : 			}
; 195  : 			else if(!strcmpi(ptoken, TYPE_RES_STR)) {

	push	OFFSET ??_C@_0L@JGAABLGD@RESOLUTION?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@ReadDataFi

; 196  : 				ParseResInfo(plinePtr, --mResCount);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	DWORD PTR tv192[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv192[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	edx, DWORD PTR tv192[ebp]
	push	edx
	mov	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseResInfo@MenuManager@@AAEXPADH@Z	; MenuManager::ParseResInfo
$LN11@ReadDataFi:

; 197  : 			}
; 198  : 			else {
; 199  : 				ShiWarning ("Bad String in menu file");
; 200  : 			}
; 201  : 		}
; 202  : 		presult	= fgets(plineBuffer, lineLen, pFile);

	mov	ecx, DWORD PTR _pFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _presult$[ebp], eax

; 203  : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 204  : 		quitFlag	= (presult == NULL);

	cmp	DWORD PTR _presult$[ebp], 0
	jne	SHORT $LN18@ReadDataFi
	mov	DWORD PTR tv200[ebp], 1
	jmp	SHORT $LN19@ReadDataFi
$LN18@ReadDataFi:
	mov	DWORD PTR tv200[ebp], 0
$LN19@ReadDataFi:
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR _quitFlag$[ebp], ecx

; 205  : 	}

	jmp	$LN13@ReadDataFi
$LN12@ReadDataFi:

; 206  : 
; 207  : 	CP_CLOSE(pFile);

	mov	edx, DWORD PTR _pFile$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 208  : 	ShiAssert(mResCount == 0);	// Bad data in the manager information line!
; 209  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?ReadDataFile@MenuManager@@AAEXPAD@Z ENDP		; MenuManager::ReadDataFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_index$ = -8						; size = 4
_found$ = -4						; size = 4
_pColorName$ = 8					; size = 4
_pvalue$ = 12						; size = 4
?FindMenuColorValue@@YAHPADPAK@Z PROC			; FindMenuColorValue

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 75   : 	BOOL	found;
; 76   : 	int	index;
; 77   : 	
; 78   : 	*pvalue = 0;

	mov	eax, DWORD PTR _pvalue$[ebp]
	mov	DWORD PTR [eax], 0

; 79   : 
; 80   : 	found = FindMenuColorIndex(pColorName, &index);

	lea	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pColorName$[ebp]
	push	edx
	call	?FindMenuColorIndex@@YAHPADPAH@Z	; FindMenuColorIndex
	add	esp, 8
	mov	DWORD PTR _found$[ebp], eax

; 81   : 	
; 82   : 	if(found) {

	cmp	DWORD PTR _found$[ebp], 0
	je	SHORT $LN1@FindMenuCo

; 83   : 		*pvalue = gMenuColorTable[index].mValue;

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pvalue$[ebp]
	mov	edx, DWORD PTR ?gMenuColorTable@@3PAUMenuColorStruct@@A[eax+20]
	mov	DWORD PTR [ecx], edx
$LN1@FindMenuCo:

; 84   : 	}	
; 85   : 
; 86   : 	return found;

	mov	eax, DWORD PTR _found$[ebp]

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindMenuColorValue@@YAHPADPAK@Z ENDP			; FindMenuColorValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\popmenu.cpp
_TEXT	SEGMENT
_found$ = -4						; size = 4
_pColorName$ = 8					; size = 4
_pindex$ = 12						; size = 4
?FindMenuColorIndex@@YAHPADPAH@Z PROC			; FindMenuColorIndex

; 57   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 58   : 	BOOL found = FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 59   : 	*pindex = 0;

	mov	eax, DWORD PTR _pindex$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@FindMenuCo:

; 60   : 
; 61   : 	while(!found && *pindex < MENU_TOTAL_COLORS) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN3@FindMenuCo
	mov	ecx, DWORD PTR _pindex$[ebp]
	cmp	DWORD PTR [ecx], 10			; 0000000aH
	jge	SHORT $LN3@FindMenuCo

; 62   : 		if(strcmpi(gMenuColorTable[*pindex].mName, pColorName) == 0) {

	mov	edx, DWORD PTR _pColorName$[ebp]
	push	edx
	mov	eax, DWORD PTR _pindex$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET ?gMenuColorTable@@3PAUMenuColorStruct@@A ; gMenuColorTable
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@FindMenuCo

; 63   : 			found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 64   : 		}
; 65   : 		else {

	jmp	SHORT $LN1@FindMenuCo
$LN2@FindMenuCo:

; 66   : 			(*pindex)++;

	mov	edx, DWORD PTR _pindex$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _pindex$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@FindMenuCo:

; 67   : 		}
; 68   : 	}

	jmp	SHORT $LN4@FindMenuCo
$LN3@FindMenuCo:

; 69   : 	return found;

	mov	eax, DWORD PTR _found$[ebp]

; 70   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindMenuColorIndex@@YAHPADPAH@Z ENDP			; FindMenuColorIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CurFont@VirtualDisplay@@SAHXZ
_TEXT	SEGMENT
?CurFont@VirtualDisplay@@SAHXZ PROC			; VirtualDisplay::CurFont, COMDAT

; 132  : 	static int CurFont(void) { return pFontSet->fontNum; };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?pFontSet@VirtualDisplay@@2PAUFontSet@@A ; VirtualDisplay::pFontSet
	mov	eax, DWORD PTR [eax+24672]
	pop	ebp
	ret	0
?CurFont@VirtualDisplay@@SAHXZ ENDP			; VirtualDisplay::CurFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
