; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Cockpit\cphsi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
CONST	SEGMENT
_COMPASS_X_CENTER DD 000000000r			; 0
_COMPASS_Y_CENTER DD 0bdcccccdr			; -0.1
_HALFPI	DD	03fc90ff9r			; 1.5708
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
PUBLIC	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z		; _com_error::_com_error
PUBLIC	??0_com_error@@QAE@ABV0@@Z			; _com_error::_com_error
PUBLIC	??1_com_error@@UAE@XZ				; _com_error::~_com_error
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	?WCode@_com_error@@QBEGXZ			; _com_error::WCode
PUBLIC	?ErrorMessage@_com_error@@QBEPBDXZ		; _com_error::ErrorMessage
PUBLIC	?HRESULTToWCode@_com_error@@SAGJ@Z		; _com_error::HRESULTToWCode
PUBLIC	??_G_com_error@@UAEPAXI@Z			; _com_error::`scalar deleting destructor'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	_fabsf
PUBLIC	_ceilf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	?ceil@@YAMM@Z					; ceil
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?GetAltitude@FalconEntity@@QBEHXZ		; FalconEntity::GetAltitude
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ	; std::allocator<TextureHandle *>::allocator<TextureHandle *>
PUBLIC	?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::deallocate
PUBLIC	?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::allocate
PUBLIC	?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z ; std::allocator<TextureHandle *>::construct
PUBLIC	?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ ; std::allocator<TextureHandle *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
PUBLIC	?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
PUBLIC	?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
PUBLIC	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
PUBLIC	?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back
PUBLIC	?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
PUBLIC	?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range
PUBLIC	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ	; VirtualDisplay::ZeroRotationAboutOrigin
PUBLIC	?glReleaseMemory@@YAXPAX@Z			; glReleaseMemory
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
PUBLIC	?RunningTactical@SimulationDriver@@QBE_NXZ	; SimulationDriver::RunningTactical
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
PUBLIC	?HandleEvent@CPObject@@UAEXXZ			; CPObject::HandleEvent
PUBLIC	?Translate@CPObject@@UAEXPAG@Z			; CPObject::Translate
PUBLIC	?Translate@CPObject@@UAEXPAK@Z			; CPObject::Translate
PUBLIC	??0CPHsi@@QAE@XZ				; CPHsi::CPHsi
PUBLIC	?Exec@CPHsi@@QAEXXZ				; CPHsi::Exec
PUBLIC	?IncState@CPHsi@@QAEXW4HSIButtonStates@1@M@Z	; CPHsi::IncState
PUBLIC	?DecState@CPHsi@@QAEXW4HSIButtonStates@1@M@Z	; CPHsi::DecState
PUBLIC	?GetState@CPHsi@@QAEHW4HSIButtonStates@1@@Z	; CPHsi::GetState
PUBLIC	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z		; CPHsi::GetValue
PUBLIC	?GetFlag@CPHsi@@QAEHW4HSIFlags@1@@Z		; CPHsi::GetFlag
PUBLIC	?ExecNav@CPHsi@@AAEXXZ				; CPHsi::ExecNav
PUBLIC	?ExecTacan@CPHsi@@AAEXXZ			; CPHsi::ExecTacan
PUBLIC	?ExecILSNav@CPHsi@@AAEXXZ			; CPHsi::ExecILSNav
PUBLIC	?ExecILSTacan@CPHsi@@AAEXXZ			; CPHsi::ExecILSTacan
PUBLIC	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z		; CPHsi::ExecBeaconProximity
PUBLIC	?CalcTCNCrsDev@CPHsi@@AAEXM@Z			; CPHsi::CalcTCNCrsDev
PUBLIC	?CalcILSCrsDev@CPHsi@@AAEXM@Z			; CPHsi::CalcILSCrsDev
PUBLIC	?BeaconInRange@CPHsi@@AAEHMM@Z			; CPHsi::BeaconInRange
PUBLIC	?MoveToCompassCenter@CPHsiView@@AAEXXZ		; CPHsiView::MoveToCompassCenter
PUBLIC	?DrawCourse@CPHsiView@@AAEXMM@Z			; CPHsiView::DrawCourse
PUBLIC	?DrawStationBearing@CPHsiView@@AAEXM@Z		; CPHsiView::DrawStationBearing
PUBLIC	?DrawAircraftSymbol@CPHsiView@@AAEXXZ		; CPHsiView::DrawAircraftSymbol
PUBLIC	?DrawHeadingMarker@CPHsiView@@AAEXM@Z		; CPHsiView::DrawHeadingMarker
PUBLIC	?DrawCourseWarning@CPHsiView@@AAEXXZ		; CPHsiView::DrawCourseWarning
PUBLIC	?DrawToFrom@CPHsiView@@AAEXXZ			; CPHsiView::DrawToFrom
PUBLIC	?DisplayDraw@CPHsiView@@UAEXXZ			; CPHsiView::DisplayDraw
PUBLIC	?DisplayBlit@CPHsiView@@UAEXXZ			; CPHsiView::DisplayBlit
PUBLIC	?Exec@CPHsiView@@UAEXPAVSimBaseClass@@@Z	; CPHsiView::Exec
PUBLIC	?DisplayBlit3D@CPHsiView@@UAEXXZ		; CPHsiView::DisplayBlit3D
PUBLIC	?CreateLit@CPHsiView@@UAEXXZ			; CPHsiView::CreateLit
PUBLIC	??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z ; CPHsiView::CPHsiView
PUBLIC	??1CPHsiView@@UAE@XZ				; CPHsiView::~CPHsiView
PUBLIC	??_GCPHsiView@@UAEPAXI@Z			; CPHsiView::`scalar deleting destructor'
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	?RenderHSIPoly@@YAXPAUtagRECT@@0HPAVTextureHandle@@M@Z ; RenderHSIPoly
PUBLIC	??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ; std::addressof<TextureHandle * const>
PUBLIC	??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
PUBLIC	??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z ; std::_Allocate<TextureHandle *>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
PUBLIC	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
PUBLIC	??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ; std::forward<TextureHandle * const &>
PUBLIC	??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z ; std::_Val_type<TextureHandle * *>
PUBLIC	??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>
PUBLIC	??_7_com_error@@6B@				; _com_error::`vftable'
PUBLIC	??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@ ; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	__TI1?AV_com_error@@
PUBLIC	__CTA1?AV_com_error@@
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
PUBLIC	??_7CPHsiView@@6B@				; CPHsiView::`vftable'
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_C@_0BG@JDDPNFOC@10?5Instrument?5Landing?$AA@	; `string'
PUBLIC	??_C@_0BG@LDIJDCCC@bearingToBeacon?5?$DN?5?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_05EDMKJPGA@CPHsi?$AA@			; `string'
PUBLIC	??_C@_0CI@LMEDGJGB@CPHsi?3?3CreateHsiView?5?9?5Error?50x?$CF@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4_com_error@@6B@				; _com_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_com_error@@8				; _com_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_com_error@@8				; _com_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_com_error@@8			; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPHsiView@@6B@				; CPHsiView::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPHsiView@@@8				; CPHsiView `RTTI Type Descriptor'
PUBLIC	??_R3CPHsiView@@8				; CPHsiView::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPHsiView@@8				; CPHsiView::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPHsiView@@8			; CPHsiView::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CPObject@@8			; CPObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCPObject@@@8				; CPObject `RTTI Type Descriptor'
PUBLIC	??_R3CPObject@@8				; CPObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPObject@@8				; CPObject::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@392eb159
PUBLIC	__real@3d23d70b
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f87ae14
PUBLIC	__real@3fc99999a0000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@41200000
PUBLIC	__real@42652ee1
PUBLIC	__real@42b40000
PUBLIC	__real@43340000
PUBLIC	__real@43870000
PUBLIC	__real@43aa0000
PUBLIC	__real@43b40000
PUBLIC	__real@4479c000
PUBLIC	__real@477fff00
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0000000
PUBLIC	__real@c2b40000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strcmpi:PROC
EXTRN	__imp__LocalAlloc@8:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	_sprintf_s:PROC
EXTRN	??_E_com_error@@UAEPAXI@Z:PROC			; _com_error::`vector deleting destructor'
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0TextureHandle@@QAE@XZ:PROC			; TextureHandle::TextureHandle
EXTRN	?Create@TextureHandle@@QAE_NPADKGGGK@Z:PROC	; TextureHandle::Create
EXTRN	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z:PROC	; TextureHandle::Load
EXTRN	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z:PROC ; PaletteHandle::PaletteHandle
EXTRN	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z:PROC ; PaletteHandle::AttachToTexture
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z:PROC ; ContextMPR::DrawPrimitive
EXTRN	??0ImageBuffer@@QAE@XZ:PROC			; ImageBuffer::ImageBuffer
EXTRN	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:PROC ; ImageBuffer::Setup
EXTRN	?Cleanup@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Cleanup
EXTRN	?SetChromaKey@ImageBuffer@@QAEXK@Z:PROC		; ImageBuffer::SetChromaKey
EXTRN	?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z:PROC ; ImageBuffer::ComposeTransparent
EXTRN	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z:PROC ; ImageBuffer::ComposeRoundRot
EXTRN	?Clear@ImageBuffer@@QAEXK@Z:PROC		; ImageBuffer::Clear
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z:PROC ; VirtualDisplay::AdjustRotationAboutOrigin
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?CalculateNVGColor@@YAKK@Z:PROC			; CalculateNVGColor
EXTRN	?ApplyLighting@CockpitManager@@QAEKK_N@Z:PROC	; CockpitManager::ApplyLighting
EXTRN	?DiscardLit@CPObject@@UAEXXZ:PROC		; CPObject::DiscardLit
EXTRN	??0CPObject@@QAE@PBUObjectInitStr@@@Z:PROC	; CPObject::CPObject
EXTRN	??1CPObject@@UAE@XZ:PROC			; CPObject::~CPObject
EXTRN	?GetTCNAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z:PROC ; NavigationSystem::GetTCNAttribute
EXTRN	?GetTCNPosition@NavigationSystem@@QAEHPAM00@Z:PROC ; NavigationSystem::GetTCNPosition
EXTRN	?GetILSAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z:PROC ; NavigationSystem::GetILSAttribute
EXTRN	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ:PROC ; NavigationSystem::GetInstrumentMode
EXTRN	?IsTCNTanker@NavigationSystem@@QAEHXZ:PROC	; NavigationSystem::IsTCNTanker
EXTRN	?IsTCNCarrier@NavigationSystem@@QAEHXZ:PROC	; NavigationSystem::IsTCNCarrier
EXTRN	?IsTCNAirbase@NavigationSystem@@QAEHXZ:PROC	; NavigationSystem::IsTCNAirbase
EXTRN	?ConvertNavtoRad@@YAMM@Z:PROC			; ConvertNavtoRad
EXTRN	?ConvertRadtoNav@@YAMM@Z:PROC			; ConvertRadtoNav
EXTRN	??_ECPHsiView@@UAEPAXI@Z:PROC			; CPHsiView::`vector deleting destructor'
EXTRN	?get_type@tactical_mission@@QAE?AW4tactical_type@@XZ:PROC ; tactical_mission::get_type
EXTRN	?get_title@tactical_mission@@QAEPADXZ:PROC	; tactical_mission::get_title
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?CircleX@@3PAMA:BYTE				; CircleX
EXTRN	?CircleY@@3PAMA:BYTE				; CircleY
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?current_tactical_mission@@3PAVtactical_mission@@A:DWORD ; current_tactical_mission
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?g_bINS@@3_NA:BYTE				; g_bINS
EXTRN	?g_bCockpitAutoScale@@3_NA:BYTE			; g_bCockpitAutoScale
EXTRN	?g_bFilter2DPit@@3_NA:BYTE			; g_bFilter2DPit
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?monoYes@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA
_BSS	SEGMENT
?monoYes@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA DD 01H DUP (?) ; `CPHsiView::DisplayDraw'::`2'::monoYes
_BSS	ENDS
;	COMDAT ?init@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA
_BSS	SEGMENT
?init@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA DD 01H DUP (?) ; `CPHsiView::DisplayDraw'::`2'::init
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@4479c000
CONST	SEGMENT
__real@4479c000 DD 04479c000r			; 999
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43aa0000
CONST	SEGMENT
__real@43aa0000 DD 043aa0000r			; 340
CONST	ENDS
;	COMDAT __real@43870000
CONST	SEGMENT
__real@43870000 DD 043870000r			; 270
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc99999a0000000
CONST	SEGMENT
__real@3fc99999a0000000 DQ 03fc99999a0000000r	; 0.2
CONST	ENDS
;	COMDAT __real@3f87ae14
CONST	SEGMENT
__real@3f87ae14 DD 03f87ae14r			; 1.06
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3d23d70b
CONST	SEGMENT
__real@3d23d70b DD 03d23d70br			; 0.04
CONST	ENDS
;	COMDAT __real@392eb159
CONST	SEGMENT
__real@392eb159 DD 0392eb159r			; 0.0001666
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CPObject@@8
rdata$r	SEGMENT
??_R2CPObject@@8 DD FLAT:??_R1A@?0A@EA@CPObject@@8	; CPObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPObject@@8
rdata$r	SEGMENT
??_R3CPObject@@8 DD 00H					; CPObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPObject@@@8
_DATA	SEGMENT
??_R0?AVCPObject@@@8 DD FLAT:??_7type_info@@6B@		; CPObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CPObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPObject@@8 DD FLAT:??_R0?AVCPObject@@@8	; CPObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPHsiView@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPHsiView@@8 DD FLAT:??_R0?AVCPHsiView@@@8 ; CPHsiView::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPHsiView@@8
rdata$r	ENDS
;	COMDAT ??_R2CPHsiView@@8
rdata$r	SEGMENT
??_R2CPHsiView@@8 DD FLAT:??_R1A@?0A@EA@CPHsiView@@8	; CPHsiView::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CPObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CPHsiView@@8
rdata$r	SEGMENT
??_R3CPHsiView@@8 DD 00H				; CPHsiView::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPHsiView@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPHsiView@@@8
_DATA	SEGMENT
??_R0?AVCPHsiView@@@8 DD FLAT:??_7type_info@@6B@	; CPHsiView `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPHsiView@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPHsiView@@6B@
rdata$r	SEGMENT
??_R4CPHsiView@@6B@ DD 00H				; CPHsiView::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPHsiView@@@8
	DD	FLAT:??_R3CPHsiView@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_com_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_com_error@@8 DD FLAT:??_R0?AV_com_error@@@8 ; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R2_com_error@@8
rdata$r	SEGMENT
??_R2_com_error@@8 DD FLAT:??_R1A@?0A@EA@_com_error@@8	; _com_error::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_com_error@@8
rdata$r	SEGMENT
??_R3_com_error@@8 DD 00H				; _com_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R4_com_error@@6B@
rdata$r	SEGMENT
??_R4_com_error@@6B@ DD 00H				; _com_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LMEDGJGB@CPHsi?3?3CreateHsiView?5?9?5Error?50x?$CF@
CONST	SEGMENT
??_C@_0CI@LMEDGJGB@CPHsi?3?3CreateHsiView?5?9?5Error?50x?$CF@ DB 'CPHsi::'
	DB	'CreateHsiView - Error 0x%X (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EDMKJPGA@CPHsi?$AA@
CONST	SEGMENT
??_C@_05EDMKJPGA@CPHsi?$AA@ DB 'CPHsi', 00H		; `string'
CONST	ENDS
;	COMDAT ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA
CONST	SEGMENT
?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA DD 03c8b4396r ; 0.017 ; `CPHsiView::DrawAircraftSymbol'::`2'::aircraftSymbol
	DD	03e083127r			; 0.133
	DD	03e083127r			; 0.133
	DD	03c8b4396r			; 0.017
	DD	03d89374cr			; 0.067
	DD	0be083127r			; -0.133
	DD	03d89374cr			; 0.067
	DD	0be21cac1r			; -0.158
	DD	03c8b4396r			; 0.017
	DD	0be4ccccdr			; -0.2
	ORG $+40
CONST	ENDS
;	COMDAT ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB
CONST	SEGMENT
?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB DD 0bd23d70ar ; -0.04 ; `CPHsiView::DrawCourse'::`2'::courseDevWarn
	DD	03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA
CONST	SEGMENT
?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA DD 0bec7ae14r ; -0.39 ; `CPHsiView::DrawCourse'::`2'::courseDevBar
	DD	03ca3d70ar			; 0.02
	DD	03e75c28fr			; 0.24
	DD	03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB
CONST	SEGMENT
?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB DD 000000000r ; 0 ; `CPHsiView::DrawCourse'::`2'::courseDevScale
	DD	03e75c28fr			; 0.24
	DD	03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA
CONST	SEGMENT
?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA DD 0becccccdr ; -0.4 ; `CPHsiView::DrawCourse'::`2'::courseTail
	DD	03ca3d70ar			; 0.02
	DD	0bf19999ar			; -0.6
	DD	03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA
CONST	SEGMENT
?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA DD 03f1c28f6r ; 0.61 ; `CPHsiView::DrawCourse'::`2'::courseArrow
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
	DD	03d4ccccdr			; 0.05
	DD	03f000000r			; 0.5
	DD	03ca3d70ar			; 0.02
	DD	03e800000r			; 0.25
	DD	03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA
CONST	SEGMENT
?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA DD 0bf4ccccdr ; -0.8 ; `CPHsiView::DrawStationBearing'::`2'::bearingTail
	DD	03ca3d70ar			; 0.02
	DD	0bf30a3d7r			; -0.69
	DD	03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA
CONST	SEGMENT
?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA DD 03f30a3d7r ; 0.69 ; `CPHsiView::DrawStationBearing'::`2'::bearingArrow
	DD	03d4ccccdr			; 0.05
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA
CONST	SEGMENT
?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA DD 03f0f5c29r ; 0.56 ; `CPHsiView::DrawHeadingMarker'::`2'::headingMarker
	DD	03d23d70ar			; 0.04
	DD	03f1c28f6r			; 0.61
	DD	03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA
CONST	SEGMENT
?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA DD 03d6147aer ; 0.055 ; `CPHsiView::DrawToFrom'::`2'::toArrow
	DD	0be051eb8r			; -0.13
	DD	03e20c49cr			; 0.157
	DD	0be800000r			; -0.25
	DD	03d6147aer			; 0.055
	DD	0bebd70a4r			; -0.37
CONST	ENDS
;	COMDAT ??_C@_0BG@LDIJDCCC@bearingToBeacon?5?$DN?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BG@LDIJDCCC@bearingToBeacon?5?$DN?5?$CFf?6?$AA@ DB 'bearingToBeaco'
	DB	'n = %f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JDDPNFOC@10?5Instrument?5Landing?$AA@
CONST	SEGMENT
??_C@_0BG@JDDPNFOC@10?5Instrument?5Landing?$AA@ DB '10 Instrument Landing'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7CPHsiView@@6B@
CONST	SEGMENT
??_7CPHsiView@@6B@ DD FLAT:??_R4CPHsiView@@6B@		; CPHsiView::`vftable'
	DD	FLAT:?Exec@CPHsiView@@UAEXPAVSimBaseClass@@@Z
	DD	FLAT:?DisplayBlit@CPHsiView@@UAEXXZ
	DD	FLAT:?DisplayDraw@CPHsiView@@UAEXXZ
	DD	FLAT:?HandleEvent@CPObject@@UAEXXZ
	DD	FLAT:?CreateLit@CPHsiView@@UAEXXZ
	DD	FLAT:?DiscardLit@CPObject@@UAEXXZ
	DD	FLAT:?Translate@CPObject@@UAEXPAK@Z
	DD	FLAT:?Translate@CPObject@@UAEXPAG@Z
	DD	FLAT:?DisplayBlit3D@CPHsiView@@UAEXXZ
	DD	FLAT:??_ECPHsiView@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	SEGMENT
__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	010H
	DD	FLAT:??0_com_error@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AV_com_error@@
xdata$x	SEGMENT
__CTA1?AV_com_error@@ DD 01H
	DD	FLAT:__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	ENDS
;	COMDAT __TI1?AV_com_error@@
xdata$x	SEGMENT
__TI1?AV_com_error@@ DD 00H
	DD	FLAT:??1_com_error@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AV_com_error@@
xdata$x	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
CONST	SEGMENT
??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@ DB 'Unknown error 0x%0l'
	DB	'X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@ DB 'IDispatch error #%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT
??_7_com_error@@6B@ DD FLAT:??_R4_com_error@@6B@	; _com_error::`vftable'
	DD	FLAT:??_E_com_error@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??1CPHsiView@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CPHsiView@@UAE@XZ$0
__unwindtable$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z$1
__catchsym$?CreateLit@CPHsiView@@UAEXXZ$5 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff8cH
	DD	FLAT:__catch$?CreateLit@CPHsiView@@UAEXXZ$0
__tryblocktable$?CreateLit@CPHsiView@@UAEXXZ DD 00H
	DD	02H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?CreateLit@CPHsiView@@UAEXXZ$5
__ehfuncinfo$??1CPHsiView@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CPHsiView@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateLit@CPHsiView@@UAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CreateLit@CPHsiView@@UAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?CreateLit@CPHsiView@@UAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateLit@CPHsiView@@UAEXXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateLit@CPHsiView@@UAEXXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateLit@CPHsiView@@UAEXXZ$3
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateLit@CPHsiView@@UAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z PROC ; std::_Val_type<TextureHandle * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z ENDP ; std::_Val_type<TextureHandle * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z PROC ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ENDP ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z PROC ; std::_Ptr_cat<TextureHandle *,TextureHandle *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ENDP ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z PROC ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z ; std::_Val_type<TextureHandle * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ; std::forward<TextureHandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z ; std::allocator<TextureHandle *>::construct
	pop	ebp
	ret	0
??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z PROC ; std::forward<TextureHandle * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ENDP ; std::forward<TextureHandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>
	pop	ebp
	ret	0
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z PROC ; std::forward<TextureHandle * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ENDP ; std::forward<TextureHandle * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z PROC ; std::_Allocate<TextureHandle *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z ENDP ; std::_Allocate<TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ; std::forward<TextureHandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z PROC ; std::addressof<TextureHandle * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ENDP ; std::addressof<TextureHandle * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_tempx$1 = -3660					; size = 4
_hw_rate$ = -3656					; size = 4
_angcos$ = -3652					; size = 4
_y1$2 = -3648						; size = 4
_angsin$ = -3644					; size = 4
_fMaxU$ = -3640						; size = 4
_fStartU$ = -3636					; size = 4
_fStartV$ = -3632					; size = 4
_x1$3 = -3628						; size = 4
_Radius$ = -3624					; size = 4
_fMaxV$ = -3620						; size = 4
_y$ = -3616						; size = 4
_x$ = -3612						; size = 4
_entry$ = -3608						; size = 4
_pVtx$ = -3604						; size = 3600
__$ArrayPad$ = -4					; size = 4
_srcrect$ = 8						; size = 4
_destrect$ = 12						; size = 4
_alpha$ = 16						; size = 4
_pTex$ = 20						; size = 4
_angle$ = 24						; size = 4
?RenderHSIPoly@@YAXPAUtagRECT@@0HPAVTextureHandle@@M@Z PROC ; RenderHSIPoly

; 689  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3660				; 00000e4cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 690  : 	int entry;
; 691  : 
; 692  : 	const float angsin = sin(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _angsin$[ebp]

; 693  : 	const float angcos = cos(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _angcos$[ebp]

; 694  : 
; 695  : 	float x = destrect->left+((float)(destrect->right-destrect->left)/2.0f);

	mov	eax, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _destrect$[ebp]
	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 696  : 	float y = destrect->top+((float)(destrect->bottom-destrect->top)/2.0f);

	mov	ecx, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR _destrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm1, ecx
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR _y$[ebp], xmm0

; 697  : 	float Radius = (float)(destrect->bottom-destrect->top)/2.0f;

	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR _destrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _Radius$[ebp], xmm0

; 698  : 	float hw_rate= OTWDriver.pCockpitManager->mHScale/OTWDriver.pCockpitManager->mVScale;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	movss	xmm0, DWORD PTR [edx+248]
	divss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _hw_rate$[ebp], xmm0

; 699  : 
; 700  : 
; 701  : 	OTWDriver.renderer->CenterOriginInViewport();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 702  : 	OTWDriver.renderer->SetViewport(-1.0F, 1.0F, 1.0F, -1.0F);		

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 703  : 
; 704  : 	// Setup vertices
; 705  : 	float fStartU = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fStartU$[ebp], xmm0

; 706  : 	float fMaxU = (float) pTex->m_nWidth / (float) pTex->m_nActualWidth;

	mov	ecx, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+16]
	divss	xmm0, xmm1
	movss	DWORD PTR _fMaxU$[ebp], xmm0

; 707  : 	fMaxU -= fStartU;

	movss	xmm0, DWORD PTR _fMaxU$[ebp]
	subss	xmm0, DWORD PTR _fStartU$[ebp]
	movss	DWORD PTR _fMaxU$[ebp], xmm0

; 708  : 	float fStartV = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fStartV$[ebp], xmm0

; 709  : 	float fMaxV = (float) pTex->m_nHeight / (float) pTex->m_nActualHeight;

	mov	eax, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+20]
	divss	xmm0, xmm1
	movss	DWORD PTR _fMaxV$[ebp], xmm0

; 710  : 	fMaxV -= fStartV;

	movss	xmm0, DWORD PTR _fMaxV$[ebp]
	subss	xmm0, DWORD PTR _fStartV$[ebp]
	movss	DWORD PTR _fMaxV$[ebp], xmm0

; 711  : 
; 712  : 
; 713  : 	TwoDVertex pVtx[90];	
; 714  : 	ZeroMemory(pVtx, sizeof(pVtx));

	push	3600					; 00000e10H
	push	0
	lea	edx, DWORD PTR _pVtx$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 715  : 	for (entry = 0; entry <= CircleSegments-2; entry++) {

	mov	DWORD PTR _entry$[ebp], 0
	jmp	SHORT $LN3@RenderHSIP
$LN2@RenderHSIP:
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 1
	mov	DWORD PTR _entry$[ebp], eax
$LN3@RenderHSIP:
	cmp	DWORD PTR _entry$[ebp], 89		; 00000059H
	jg	$LN1@RenderHSIP

; 716  : 		float x1, y1;
; 717  : 		// Compute the end point of this next segment
; 718  : 		x1 = (x + Radius*CircleX[entry]);

	mov	ecx, DWORD PTR _entry$[ebp]
	movss	xmm0, DWORD PTR _Radius$[ebp]
	mulss	xmm0, DWORD PTR ?CircleX@@3PAMA[ecx*4]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x1$3[ebp], xmm0

; 719  : 		y1 = (y + Radius*CircleY[entry]);

	mov	edx, DWORD PTR _entry$[ebp]
	movss	xmm0, DWORD PTR _Radius$[ebp]
	mulss	xmm0, DWORD PTR ?CircleY@@3PAMA[edx*4]
	addss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y1$2[ebp], xmm0

; 720  : 
; 721  : 		// Draw the segment
; 722  : 		pVtx[entry].x = x1;

	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm0, DWORD PTR _x1$3[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax], xmm0

; 723  : 		pVtx[entry].y = y1;		

	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm0, DWORD PTR _y1$2[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+4], xmm0

; 724  : 
; 725  : 		float tempx = pVtx[entry].x;

	mov	edx, DWORD PTR _entry$[ebp]
	imul	edx, 40					; 00000028H
	movss	xmm0, DWORD PTR _pVtx$[ebp+edx]
	movss	DWORD PTR _tempx$1[ebp], xmm0

; 726  : 		pVtx[entry].x = x + ((angcos*(pVtx[entry].x-x)) + (-angsin*(pVtx[entry].y-y)))  * hw_rate;

	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm0, DWORD PTR _pVtx$[ebp+eax]
	subss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _angcos$[ebp]
	movss	xmm1, DWORD PTR _angsin$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm2, DWORD PTR _pVtx$[ebp+ecx+4]
	subss	xmm2, DWORD PTR _y$[ebp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _hw_rate$[ebp]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	imul	edx, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+edx], xmm0

; 727  : 		pVtx[entry].y = y + (angsin*(tempx-x)) + (angcos*(pVtx[entry].y-y));				

	movss	xmm0, DWORD PTR _tempx$1[ebp]
	subss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _angsin$[ebp]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm1, DWORD PTR _pVtx$[ebp+eax+4]
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _angcos$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+ecx+4], xmm0

; 728  : 		x1 = (x + Radius*CircleX[entry] * hw_rate);

	mov	edx, DWORD PTR _entry$[ebp]
	movss	xmm0, DWORD PTR _Radius$[ebp]
	mulss	xmm0, DWORD PTR ?CircleX@@3PAMA[edx*4]
	mulss	xmm0, DWORD PTR _hw_rate$[ebp]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x1$3[ebp], xmm0

; 729  : 		pVtx[entry].u = fStartU + 
; 730  : 			(((float)(x1-destrect->left)/(float)(destrect->right-destrect->left)) * (fMaxU-fStartU));

	mov	eax, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR _x1$3[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _destrect$[ebp]
	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cvtsi2ss xmm0, eax
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR _fMaxU$[ebp]
	subss	xmm0, DWORD PTR _fStartU$[ebp]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR _fStartU$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+ecx+24], xmm1

; 731  : 		pVtx[entry].v = fStartV + 
; 732  : 			(((float)(y1-destrect->top)/(float)(destrect->bottom-destrect->top)) * (fMaxV-fStartV));

	mov	edx, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR _y1$2[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _destrect$[ebp]
	mov	ecx, DWORD PTR _destrect$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	cvtsi2ss xmm0, edx
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR _fMaxV$[ebp]
	subss	xmm0, DWORD PTR _fStartV$[ebp]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR _fStartV$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+eax+28], xmm1

; 733  : 
; 734  : 		pVtx[entry].r = pVtx[entry].g = pVtx[entry].b = pVtx[entry].a = 1.0f;

	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+ecx+20], xmm0
	mov	edx, DWORD PTR _entry$[ebp]
	imul	edx, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+edx+16], xmm0
	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+eax+12], xmm0
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+ecx+8], xmm0

; 735  : 	}

	jmp	$LN2@RenderHSIP
$LN1@RenderHSIP:

; 736  : 	OTWDriver.renderer->context.RestoreState(alpha);	

	mov	edx, DWORD PTR _alpha$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 737  : 	OTWDriver.renderer->context.SelectTexture1((GLint) pTex);

	mov	eax, DWORD PTR _pTex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 738  : 	OTWDriver.renderer->context.DrawPrimitive(MPR_PRM_TRIFAN,MPR_VI_COLOR|MPR_VI_TEXTURE,90,pVtx,sizeof(pVtx[0]));

	push	40					; 00000028H
	lea	ecx, DWORD PTR _pVtx$[ebp]
	push	ecx
	push	90					; 0000005aH
	push	6
	push	6
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ; ContextMPR::DrawPrimitive

; 739  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderHSIPoly@@YAXPAUtagRECT@@0HPAVTextureHandle@@M@Z ENDP ; RenderHSIPoly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCPHsiView@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPHsiView@@UAEPAXI@Z PROC				; CPHsiView::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPHsiView@@UAE@XZ			; CPHsiView::~CPHsiView
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPHsiView@@UAEPAXI@Z ENDP				; CPHsiView::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
tv137 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPHsiView@@UAE@XZ PROC				; CPHsiView::~CPHsiView
; _this$ = ecx

; 616  : CPHsiView::~CPHsiView(void) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CPHsiView@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPHsiView@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 617  : 
; 618  : 	delete mpCompassCircle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 619  : 
; 620  : 	//Wombat778 3-22-04 clean up buffers
; 621  : 	if (DisplayOptions.bRender2DCockpit){		

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	SHORT $LN5@CPHsiView

; 622  : 		glReleaseMemory((char*) mpSourceBuffer);				

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+356]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4
	jmp	$LN9@CPHsiView
$LN5@CPHsiView:

; 623  : 	}
; 624  : 	//Wombat778 10-06-2003 Added following lines to destroy the temporary imagebuffer;
; 625  : 	//unnecessary if using rendered hsi
; 626  : 	else if (g_bCockpitAutoScale && ((mVScale!=1.0f) || (mHScale!=1.0f))) 

	movzx	ecx, BYTE PTR ?g_bCockpitAutoScale@@3_NA ; g_bCockpitAutoScale
	test	ecx, ecx
	je	SHORT $LN9@CPHsiView
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@CPHsiView
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@CPHsiView
$LN2@CPHsiView:

; 627  : 	{
; 628  : 		if (CompassBuffer) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+272], 0
	je	SHORT $LN9@CPHsiView

; 629  : 			CompassBuffer->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+272]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 630  : 			delete CompassBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@CPHsiView
	push	1
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN9@CPHsiView
$LN8@CPHsiView:
	mov	DWORD PTR tv137[ebp], 0
$LN9@CPHsiView:

; 631  : 		}
; 632  : 	}
; 633  : 	//Wombat778 10-06-2003 End of added code
; 634  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPObject@@UAE@XZ			; CPObject::~CPObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CPHsiView@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPObject@@UAE@XZ			; CPObject::~CPObject
__ehhandler$??1CPHsiView@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CPHsiView@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CPHsiView@@UAE@XZ ENDP				; CPHsiView::~CPHsiView
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
$T2 = -68						; size = 4
_radiusSquared$ = -64					; size = 4
_halfArraySize$ = -60					; size = 4
$T3 = -56						; size = 4
tv443 = -52						; size = 4
$T4 = -48						; size = 4
_x$ = -44						; size = 4
_y$ = -40						; size = 4
_arraySize$ = -36					; size = 4
tv315 = -32						; size = 4
_halfWidth$ = -28					; size = 4
_halfHeight$ = -24					; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pobjectInitStr$ = 8					; size = 4
_phsiInitStr$ = 12					; size = 4
??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z PROC ; CPHsiView::CPHsiView
; _this$ = ecx

; 519  : CPHsiView::CPHsiView(ObjectInitStr *pobjectInitStr, HsiInitStr *phsiInitStr) : CPObject(pobjectInitStr) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pobjectInitStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CPObject@@QAE@PBUObjectInitStr@@@Z	; CPObject::CPObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CPHsiView@@6B@

; 520  : 
; 521  : 	int	radiusSquared;
; 522  : 	int	arraySize, halfArraySize;
; 523  : 	int	i;
; 524  : 	float	x, y;
; 525  : 	int	halfHeight;
; 526  : 	int	halfWidth;
; 527  : 
; 528  : 	mWarnFlag.top					= (long)(phsiInitStr->warnFlag.top * mVScale);

	mov	edx, DWORD PTR _phsiInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+236], ecx

; 529  : 	mWarnFlag.left					= (long)(phsiInitStr->warnFlag.left * mHScale);

	mov	eax, DWORD PTR _phsiInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], edx

; 530  : 	mWarnFlag.bottom				= (long)(phsiInitStr->warnFlag.bottom * mVScale);

	mov	ecx, DWORD PTR _phsiInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+20]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], eax

; 531  : 	mWarnFlag.right					= (long)(phsiInitStr->warnFlag.right * mHScale);

	mov	edx, DWORD PTR _phsiInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+76]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+240], ecx

; 532  : 
; 533  : 	mpHsi								= phsiInitStr->pHsi;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _phsiInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+144], edx

; 534  : 
; 535  : 	mCompassTransparencyType	= phsiInitStr->compassTransparencyType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _phsiInitStr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+248], edx

; 536  : 
; 537  : 	mCompassSrc						= phsiInitStr->compassSrc;

	mov	eax, DWORD PTR _phsiInitStr$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 538  : 
; 539  : 	mCompassDest					= phsiInitStr->compassDest;

	mov	ecx, DWORD PTR _phsiInitStr$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 216				; 000000d8H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 540  : 	mCompassDest.top				= (long)(mCompassDest.top * mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+220]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+220], ecx

; 541  : 	mCompassDest.left				= (long)(mCompassDest.left * mHScale);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+216]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+216], edx

; 542  : 	mCompassDest.bottom				= (long)(mCompassDest.bottom * mVScale);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+228]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+20]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], eax

; 543  : 	mCompassDest.right				= (long)(mCompassDest.right * mHScale);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+224]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+224], ecx

; 544  : 
; 545  : 	mDevSrc							= phsiInitStr->devSrc;

	mov	eax, DWORD PTR _phsiInitStr$[ebp]
	add	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 546  : 
; 547  : 	mDevDest							= phsiInitStr->devDest;

	mov	ecx, DWORD PTR _phsiInitStr$[ebp]
	add	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 184				; 000000b8H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 548  : 	mDevDest.top					= (long)(mDevDest.top * mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+188]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], ecx

; 549  : 	mDevDest.left					= (long)(mDevDest.left * mHScale);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+184]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+184], edx

; 550  : 	mDevDest.bottom					= (long)(mDevDest.bottom * mVScale);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+196]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+20]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], eax

; 551  : 	mDevDest.right					= (long)(mDevDest.right * mHScale);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+192]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx

; 552  : 
; 553  : 	mCompassWidth					= mCompassSrc.right - mCompassSrc.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+208]
	sub	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], edx

; 554  : 	mCompassHeight					= mCompassSrc.bottom - mCompassSrc.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+212]
	sub	eax, DWORD PTR [edx+204]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 555  : 
; 556  : 	//	mCompassWidth					= mCompassDest.right - mCompassDest.left;
; 557  : 	//	mCompassHeight					= mCompassDest.bottom - mCompassDest.top;
; 558  : 
; 559  : 	mCompassXCenter				= mCompassDest.left + mCompassWidth / 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+216]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], eax

; 560  : 	mCompassYCenter				= mCompassDest.top + mCompassHeight / 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+220]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], eax

; 561  : 
; 562  : 	// Setup the compass circle limits
; 563  : 	mRadius							= max(mCompassWidth, mCompassHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+264]
	cmp	edx, DWORD PTR [ecx+268]
	jle	SHORT $LN13@CPHsiView
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR tv315[ebp], ecx
	jmp	SHORT $LN14@CPHsiView
$LN13@CPHsiView:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+268]
	mov	DWORD PTR tv315[ebp], eax
$LN14@CPHsiView:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv315[ebp]
	mov	DWORD PTR [ecx+164], edx

; 564  : 	mRadius							= (mRadius + 1)/ 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+164]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+164], eax

; 565  : 	arraySize						= mRadius * 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	shl	eax, 2
	mov	DWORD PTR _arraySize$[ebp], eax

; 566  : 
; 567  : #ifdef USE_SH_POOLS
; 568  : 	mpCompassCircle = (int *)MemAllocPtr(gCockMemPool,sizeof(int)*arraySize,FALSE);
; 569  : #else
; 570  : 	mpCompassCircle				= new int[arraySize];

	xor	ecx, ecx
	mov	eax, DWORD PTR _arraySize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+252], ecx

; 571  : #endif
; 572  : 
; 573  : 	radiusSquared					= mRadius * mRadius;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+164]
	imul	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR _radiusSquared$[ebp], ecx

; 574  : 
; 575  : 	halfArraySize					= arraySize / 2;

	mov	eax, DWORD PTR _arraySize$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _halfArraySize$[ebp], eax

; 576  : 	for(i = 0; i < halfArraySize; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@CPHsiView
$LN9@CPHsiView:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@CPHsiView:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _halfArraySize$[ebp]
	jge	$LN8@CPHsiView

; 577  : 
; 578  : 		y								= (float)fabs((float)i - mRadius);

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+164]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _y$[ebp]

; 579  : 		x								= (float)sqrt(radiusSquared - y * y );

	cvtsi2ss xmm0, DWORD PTR _radiusSquared$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _x$[ebp]

; 580  : 		mpCompassCircle[i * 2 + 1]	= mRadius + (int)x; //right

	cvttss2si edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+164]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+252]
	mov	DWORD PTR [eax+ecx*4+4], edx

; 581  : 		mpCompassCircle[i * 2 + 0]	= mRadius - (int)x; //left

	cvttss2si ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	sub	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+252]
	mov	DWORD PTR [edx+ecx*4], eax

; 582  : 	}

	jmp	$LN9@CPHsiView
$LN8@CPHsiView:

; 583  : 
; 584  : 	halfHeight						= DisplayOptions.DispHeight / 2;

	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _halfHeight$[ebp], eax

; 585  : 	halfWidth						= DisplayOptions.DispWidth / 2;

	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _halfWidth$[ebp], eax

; 586  : 	mTop								=	(float) (halfHeight - mDevDest.top) / halfHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _halfHeight$[ebp]
	sub	ecx, DWORD PTR [eax+188]
	cvtsi2ss xmm0, ecx
	cvtsi2ss xmm1, DWORD PTR _halfHeight$[ebp]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+148], xmm0

; 587  : 	mLeft								=	(float) (mDevDest.left - halfWidth) / halfWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	sub	ecx, DWORD PTR _halfWidth$[ebp]
	cvtsi2ss xmm0, ecx
	cvtsi2ss xmm1, DWORD PTR _halfWidth$[ebp]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0

; 588  : 	mBottom							=	(float) (halfHeight - mDevDest.bottom ) / halfHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _halfHeight$[ebp]
	sub	ecx, DWORD PTR [eax+196]
	cvtsi2ss xmm0, ecx
	cvtsi2ss xmm1, DWORD PTR _halfHeight$[ebp]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 589  : 	mRight							=	(float) (mDevDest.right - halfWidth) / halfWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	sub	ecx, DWORD PTR _halfWidth$[ebp]
	cvtsi2ss xmm0, ecx
	cvtsi2ss xmm1, DWORD PTR _halfWidth$[ebp]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+160], xmm0

; 590  : 
; 591  : 	for (i = 0; i < HSI_COLOR_TOTAL; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@CPHsiView
$LN6@CPHsiView:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@CPHsiView:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	SHORT $LN5@CPHsiView

; 592  : 		mColor[0][i] = phsiInitStr->colors[i];

	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _phsiInitStr$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+88]
	mov	DWORD PTR [eax+ecx*4], edx

; 593  : 		mColor[1][i] = CalculateNVGColor(mColor[0][i]);

	mov	eax, 40					; 00000028H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+276]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+edx+276]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 594  : 	}

	jmp	SHORT $LN6@CPHsiView
$LN5@CPHsiView:

; 595  : 
; 596  : 
; 597  : 
; 598  : 	//Wombat778 3-22-04  Added for rendered (rather than blitted hsi)
; 599  : 	if (DisplayOptions.bRender2DCockpit)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	SHORT $LN4@CPHsiView

; 600  : 	{
; 601  : 		mpSourceBuffer = phsiInitStr->sourcehsi;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _phsiInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+356], edx
	jmp	$LN2@CPHsiView
$LN4@CPHsiView:

; 602  : 	}
; 603  : 	//Wombat778 10-06-2003 Added following lines to set up a temporary buffer for the HSI
; 604  : 	//this is unnecessary in using rendered pit
; 605  : 	else if (g_bCockpitAutoScale && ((mVScale!=1.0f) || (mHScale!=1.0f))){

	movzx	eax, BYTE PTR ?g_bCockpitAutoScale@@3_NA ; g_bCockpitAutoScale
	test	eax, eax
	je	$LN2@CPHsiView
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@CPHsiView
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@CPHsiView
$LN1@CPHsiView:

; 606  : 
; 607  : 		CompassBuffer = new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@CPHsiView
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv443[ebp], eax
	jmp	SHORT $LN16@CPHsiView
$LN15@CPHsiView:
	mov	DWORD PTR tv443[ebp], 0
$LN16@CPHsiView:
	mov	eax, DWORD PTR tv443[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+272], edx

; 608  : 		CompassBuffer->Setup(&FalconDisplay.theDisplayDevice,mCompassWidth,mCompassHeight,SystemMem,None,FALSE);  //Wombat778 10-06 2003 Setup a new imagebuffer the size of the Compass

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+272]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 609  : 		CompassBuffer->SetChromaKey(0xFFFF0000);

	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+272]
	call	?SetChromaKey@ImageBuffer@@QAEXK@Z	; ImageBuffer::SetChromaKey
$LN2@CPHsiView:

; 610  : 	}
; 611  : 
; 612  : 	//Wombat778 10-06-2003 End of added code
; 613  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPObject@@UAE@XZ			; CPObject::~CPObject
__unwindfunclet$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z ENDP ; CPHsiView::CPHsiView
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
$T2 = -180						; size = 16
$T3 = -164						; size = 16
$T4 = -148						; size = 16
$T5 = -132						; size = 16
_e$6 = -116						; size = 16
tv244 = -100						; size = 4
tv246 = -96						; size = 4
tv252 = -92						; size = 4
tv243 = -88						; size = 4
$T7 = -84						; size = 4
$T8 = -80						; size = 4
tv251 = -76						; size = 4
tv256 = -72						; size = 4
tv247 = -68						; size = 4
tv253 = -64						; size = 4
tv245 = -60						; size = 4
_dwMaxTextureHeight$9 = -56				; size = 4
_dwMaxTextureWidth$10 = -52				; size = 4
tv250 = -48						; size = 4
tv168 = -44						; size = 4
$T11 = -40						; size = 4
$T12 = -36						; size = 4
tv145 = -32						; size = 4
_pTex$13 = -28						; size = 4
tv257 = -22						; size = 1
tv258 = -21						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?CreateLit@CPHsiView@@UAEXXZ PROC			; CPHsiView::CreateLit
; _this$ = ecx

; 1129 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateLit@CPHsiView@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 164				; 000000a4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1130 : 	if (DisplayOptions.bRender2DCockpit){

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	eax, eax
	je	$LN9@CreateLit

; 1131 : 		try {

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1132 : 			const DWORD dwMaxTextureWidth = 
; 1133 : 				mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pD3DHWDeviceDesc->dwMaxTextureWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv243[ebp], eax
	mov	ecx, DWORD PTR tv243[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv244[ebp], eax
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _dwMaxTextureWidth$10[ebp], ecx

; 1134 : 			const DWORD dwMaxTextureHeight = 
; 1135 : 				mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pD3DHWDeviceDesc->dwMaxTextureHeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv245[ebp], eax
	mov	ecx, DWORD PTR tv245[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv246[ebp], eax
	mov	eax, DWORD PTR tv246[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _dwMaxTextureHeight$9[ebp], edx

; 1136 : 			m_pPalette = new PaletteHandle(mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pDD, 32, 256);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv247[ebp], eax
	mov	eax, DWORD PTR tv247[ebp]
	mov	DWORD PTR $T11[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN10@CreateLit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv250[ebp], eax
	mov	ecx, DWORD PTR tv250[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv251[ebp], eax
	push	256					; 00000100H
	push	32					; 00000020H
	mov	edx, DWORD PTR tv251[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z ; PaletteHandle::PaletteHandle
	mov	DWORD PTR tv252[ebp], eax
	mov	ecx, DWORD PTR tv252[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	jmp	SHORT $LN11@CreateLit
$LN10@CreateLit:
	mov	DWORD PTR tv145[ebp], 0
$LN11@CreateLit:
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+116], ecx

; 1137 : 			if (!m_pPalette){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN5@CreateLit

; 1138 : 				throw _com_error(E_OUTOFMEMORY);

	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	__CxxThrowException@8
$LN5@CreateLit:

; 1139 : 			}
; 1140 : 
; 1141 : 			// Check if we can use a single texture
; 1142 : 			if (
; 1143 : 				(dwMaxTextureWidth >= (unsigned int)mCompassWidth) && 
; 1144 : 				(dwMaxTextureHeight >= (unsigned int)mCompassHeight) 
; 1145 : 			){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwMaxTextureWidth$10[ebp]
	cmp	edx, DWORD PTR [ecx+264]
	jb	$LN4@CreateLit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwMaxTextureHeight$9[ebp]
	cmp	ecx, DWORD PTR [eax+268]
	jb	$LN4@CreateLit

; 1146 : 				TextureHandle *pTex = new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv253[ebp], eax
	mov	edx, DWORD PTR tv253[ebp]
	mov	DWORD PTR $T12[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN12@CreateLit
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv256[ebp], eax
	mov	eax, DWORD PTR tv256[ebp]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN13@CreateLit
$LN12@CreateLit:
	mov	DWORD PTR tv168[ebp], 0
$LN13@CreateLit:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR $T8[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _pTex$13[ebp], edx

; 1147 : 				if (!pTex){

	cmp	DWORD PTR _pTex$13[ebp], 0
	jne	SHORT $LN3@CreateLit

; 1148 : 					throw _com_error(E_OUTOFMEMORY);

	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@CreateLit:

; 1149 : 				}
; 1150 : 				m_pPalette->AttachToTexture(pTex);

	mov	ecx, DWORD PTR _pTex$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	call	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::AttachToTexture

; 1151 : 				if (!pTex->Create("CPHsi", MPR_TI_PALETTE | MPR_TI_CHROMAKEY, 8, mCompassWidth, mCompassHeight)){

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+268]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+264]
	push	eax
	push	8
	push	160					; 000000a0H
	push	OFFSET ??_C@_05EDMKJPGA@CPHsi?$AA@
	mov	ecx, DWORD PTR _pTex$13[ebp]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create
	mov	BYTE PTR tv257[ebp], al
	movzx	ecx, BYTE PTR tv257[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@CreateLit

; 1152 : 					throw _com_error(E_FAIL);

	push	0
	push	0
	push	-2147467259				; 80004005H
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	__CxxThrowException@8
$LN2@CreateLit:

; 1153 : 				}
; 1154 : 				if (!pTex->Load(0, 0xFFFF0000, (BYTE*)mpSourceBuffer, true, true)){

	push	-1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	push	ecx
	push	-65536					; ffff0000H
	push	0
	mov	ecx, DWORD PTR _pTex$13[ebp]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
	mov	BYTE PTR tv258[ebp], al
	movzx	edx, BYTE PTR tv258[ebp]
	test	edx, edx
	jne	SHORT $LN1@CreateLit

; 1155 : 					// soon to be re-loaded by CPSurface::Translate3D
; 1156 : 					throw _com_error(E_FAIL);

	push	0
	push	0
	push	-2147467259				; 80004005H
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@CreateLit:

; 1157 : 				}
; 1158 : 				m_arrTex.push_back(pTex);

	lea	ecx, DWORD PTR _pTex$13[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back
$LN4@CreateLit:

; 1159 : 			}
; 1160 : 		}

	jmp	SHORT $LN14@CreateLit
__catch$?CreateLit@CPHsiView@@UAEXXZ$0:

; 1161 : 		catch(_com_error e)

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1162 : 		{
; 1163 : 			MonoPrint("CPHsi::CreateHsiView - Error 0x%X (%s)\n", e.Error(), e.ErrorMessage());

	lea	ecx, DWORD PTR _e$6[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR _e$6[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CI@LMEDGJGB@CPHsi?3?3CreateHsiView?5?9?5Error?50x?$CF@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 1164 : 			DiscardLit();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx

; 1165 : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _e$6[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN20@CreateLit
	ret	0
$LN14@CreateLit:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@CreateLit
$LN20@CreateLit:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@CreateLit:

; 1166 : 	}
; 1167 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateLit@CPHsiView@@UAEXXZ$2:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPHsiView@@UAEXXZ$3:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPHsiView@@UAEXXZ$4:
	lea	ecx, DWORD PTR _e$6[ebp]
	jmp	??1_com_error@@UAE@XZ			; _com_error::~_com_error
__ehhandler$?CreateLit@CPHsiView@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-184]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateLit@CPHsiView@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateLit@CPHsiView@@UAEXXZ ENDP			; CPHsiView::CreateLit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_currentHeading$ = -40					; size = 4
_OffsetX$ = -36						; size = 4
_OffsetY$ = -32						; size = 4
_angle$ = -28						; size = 4
_this$ = -24						; size = 4
_DestRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
?DisplayBlit3D@CPHsiView@@UAEXXZ PROC			; CPHsiView::DisplayBlit3D
; _this$ = ecx

; 742  : void CPHsiView::DisplayBlit3D() {	

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 743  : 
; 744  : 	mDirtyFlag = TRUE;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1

; 745  : 	if(!mDirtyFlag || !DisplayOptions.bRender2DCockpit){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN4@DisplayBli
	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	jne	SHORT $LN5@DisplayBli
$LN4@DisplayBli:

; 746  : 		return;

	jmp	$LN6@DisplayBli
$LN5@DisplayBli:

; 747  : 	}
; 748  : 
; 749  : 	float	angle;
; 750  : 	float	currentHeading = mpHsi->GetValue(CPHsi::HSI_VAL_CURRENT_HEADING);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _currentHeading$[ebp]

; 751  : 
; 752  : 	angle = currentHeading + 90.0F;

	movss	xmm0, DWORD PTR _currentHeading$[ebp]
	addss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR _angle$[ebp], xmm0

; 753  : 	if(angle > 360.0F) {

	movss	xmm0, DWORD PTR _angle$[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	jbe	SHORT $LN3@DisplayBli

; 754  : 		angle -= 360.0F;

	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _angle$[ebp], xmm0
$LN3@DisplayBli:

; 755  : 	}
; 756  : 
; 757  : 	RECT DestRect=mCompassDest;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _DestRect$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _DestRect$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _DestRect$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _DestRect$[ebp+12], eax

; 758  : 	// COBRA - RED - Pit Vibrations
; 759  : 	int	OffsetX=(int)OTWDriver.pCockpitManager->PitTurbulence.x;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cvttss2si edx, DWORD PTR [ecx+728]
	mov	DWORD PTR _OffsetX$[ebp], edx

; 760  : 	int	OffsetY=(int)OTWDriver.pCockpitManager->PitTurbulence.y;

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cvttss2si ecx, DWORD PTR [eax+732]
	mov	DWORD PTR _OffsetY$[ebp], ecx

; 761  : 	DestRect.top+=OffsetY;

	mov	edx, DWORD PTR _DestRect$[ebp+4]
	add	edx, DWORD PTR _OffsetY$[ebp]
	mov	DWORD PTR _DestRect$[ebp+4], edx

; 762  : 	DestRect.bottom+=OffsetY;

	mov	eax, DWORD PTR _DestRect$[ebp+12]
	add	eax, DWORD PTR _OffsetY$[ebp]
	mov	DWORD PTR _DestRect$[ebp+12], eax

; 763  : 	DestRect.left+=OffsetX;

	mov	ecx, DWORD PTR _DestRect$[ebp]
	add	ecx, DWORD PTR _OffsetX$[ebp]
	mov	DWORD PTR _DestRect$[ebp], ecx

; 764  : 	DestRect.right+=OffsetX;

	mov	edx, DWORD PTR _DestRect$[ebp+8]
	add	edx, DWORD PTR _OffsetX$[ebp]
	mov	DWORD PTR _DestRect$[ebp+8], edx

; 765  : 
; 766  : 
; 767  : 	if (g_bFilter2DPit){

	movzx	eax, BYTE PTR ?g_bFilter2DPit@@3_NA	; g_bFilter2DPit
	test	eax, eax
	je	SHORT $LN2@DisplayBli

; 768  : 		//Wombat778 3-30-04 Added option to filter
; 769  : 		RenderHSIPoly(&mCompassSrc,&DestRect,STATE_TEXTURE,m_arrTex[0], ConvertNavtoRad(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	3
	lea	edx, DWORD PTR _DestRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	call	?RenderHSIPoly@@YAXPAUtagRECT@@0HPAVTextureHandle@@M@Z ; RenderHSIPoly
	add	esp, 20					; 00000014H

; 770  : 	}
; 771  : 	else {

	jmp	SHORT $LN1@DisplayBli
$LN2@DisplayBli:

; 772  : 		RenderHSIPoly(&mCompassSrc,&DestRect,STATE_TEXTURE_NOFILTER,m_arrTex[0], ConvertNavtoRad(angle));

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	11					; 0000000bH
	lea	edx, DWORD PTR _DestRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	call	?RenderHSIPoly@@YAXPAUtagRECT@@0HPAVTextureHandle@@M@Z ; RenderHSIPoly
	add	esp, 20					; 00000014H
$LN1@DisplayBli:

; 773  : 	}
; 774  : 	mDirtyFlag = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN6@DisplayBli:

; 775  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit3D@CPHsiView@@UAEXXZ ENDP			; CPHsiView::DisplayBlit3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Exec@CPHsiView@@UAEXPAVSimBaseClass@@@Z PROC		; CPHsiView::Exec
; _this$ = ecx

; 780  : void CPHsiView::Exec(SimBaseClass*) { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 781  : 
; 782  : 	OTWDriver.pCockpitManager->mpHsi->Exec();

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	ecx, DWORD PTR [eax+692]
	call	?Exec@CPHsi@@QAEXXZ			; CPHsi::Exec

; 783  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Exec@CPHsiView@@UAEXPAVSimBaseClass@@@Z ENDP		; CPHsiView::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_currentHeading$ = -32					; size = 4
_angle$ = -28						; size = 4
_this$ = -24						; size = 4
_temprect$1 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
?DisplayBlit@CPHsiView@@UAEXXZ PROC			; CPHsiView::DisplayBlit
; _this$ = ecx

; 644  : void CPHsiView::DisplayBlit() {	

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 645  : 
; 646  : 	mDirtyFlag = TRUE;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1

; 647  : 	if(!mDirtyFlag || DisplayOptions.bRender2DCockpit) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN5@DisplayBli
	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	SHORT $LN6@DisplayBli
$LN5@DisplayBli:

; 648  : 		return;

	jmp	$LN7@DisplayBli
$LN6@DisplayBli:

; 649  : 	}
; 650  : 
; 651  : 	float	angle;
; 652  : 	float	currentHeading = mpHsi->GetValue(CPHsi::HSI_VAL_CURRENT_HEADING);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _currentHeading$[ebp]

; 653  : 
; 654  : 	angle = currentHeading + 90.0F;

	movss	xmm0, DWORD PTR _currentHeading$[ebp]
	addss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR _angle$[ebp], xmm0

; 655  : 	if(angle > 360.0F) {

	movss	xmm0, DWORD PTR _angle$[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	jbe	SHORT $LN4@DisplayBli

; 656  : 		angle -= 360.0F;

	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _angle$[ebp], xmm0
$LN4@DisplayBli:

; 657  : 	}
; 658  : 
; 659  : 	// Make the rotating blt call
; 660  : 
; 661  : 	//Wombat778 10-06-2003, modified following lines. allows HSI to scale properly when using cockpit auto scaling
; 662  : 	if (g_bCockpitAutoScale && ((mVScale!=1.0f) || (mHScale!=1.0f))) {			//dont run this code if the var is set but no scaling is occuring

	movzx	ecx, BYTE PTR ?g_bCockpitAutoScale@@3_NA ; g_bCockpitAutoScale
	test	ecx, ecx
	je	$LN3@DisplayBli
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@DisplayBli
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN3@DisplayBli
$LN2@DisplayBli:

; 663  : 
; 664  : 		RECT temprect;
; 665  : 
; 666  : 		temprect.top=0;

	mov	DWORD PTR _temprect$1[ebp+4], 0

; 667  : 		temprect.left=0;

	mov	DWORD PTR _temprect$1[ebp], 0

; 668  : 		temprect.right=mCompassWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR _temprect$1[ebp+8], edx

; 669  : 		temprect.bottom=mCompassHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR _temprect$1[ebp+12], ecx

; 670  : 
; 671  : 		CompassBuffer->Clear(0xFFFF0000);			//clear the temp buffer with chromakey blue;

	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+272]
	call	?Clear@ImageBuffer@@QAEXK@Z		; ImageBuffer::Clear

; 672  : 		CompassBuffer->ComposeRoundRot(mpTemplate,&mCompassSrc,&temprect, ConvertNavtoRad(angle), mpCompassCircle);  //Rotate the image from template to temp buffer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _temprect$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	call	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z ; ImageBuffer::ComposeRoundRot

; 673  : 		mpOTWImage->ComposeTransparent(CompassBuffer, &temprect, &mCompassDest);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	push	ecx
	lea	edx, DWORD PTR _temprect$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+104]
	call	?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::ComposeTransparent

; 674  : 
; 675  : 	}
; 676  : 	else

	jmp	SHORT $LN1@DisplayBli
$LN3@DisplayBli:

; 677  : 	{
; 678  : 		mpOTWImage->ComposeRoundRot(mpTemplate, &mCompassSrc, &mCompassDest, ConvertNavtoRad(angle), mpCompassCircle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 216				; 000000d8H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z ; ImageBuffer::ComposeRoundRot
$LN1@DisplayBli:

; 679  : 	}
; 680  : 
; 681  : 	//Wombat778 10-06-2003  End of modified lines
; 682  : 
; 683  : 	mDirtyFlag = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN7@DisplayBli:

; 684  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit@CPHsiView@@UAEXXZ ENDP			; CPHsiView::DisplayBlit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_crsWarnFlag$ = -24					; size = 4
_desiredHeading$ = -20					; size = 4
_desiredCourse$ = -16					; size = 4
_courseDeviation$ = -12					; size = 4
_bearingToBeacon$ = -8					; size = 4
_this$ = -4						; size = 4
?DisplayDraw@CPHsiView@@UAEXXZ PROC			; CPHsiView::DisplayDraw
; _this$ = ecx

; 786  : void CPHsiView::DisplayDraw() {	

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 	static BOOL monoYes;
; 788  : 	static int init = 0;
; 789  : 
; 790  : 	if(!init) {

	cmp	DWORD PTR ?init@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA, 0
	jne	SHORT $LN4@DisplayDra

; 791  : 		monoYes = 0;

	mov	DWORD PTR ?monoYes@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA, 0

; 792  : 		init = 1;

	mov	DWORD PTR ?init@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA, 1
$LN4@DisplayDra:

; 793  : 	}
; 794  : 	mDirtyFlag = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1

; 795  : 	if(!mDirtyFlag) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN3@DisplayDra

; 796  : 		return;

	jmp	$LN5@DisplayDra
$LN3@DisplayDra:

; 797  : 	}
; 798  : 
; 799  : 	float	desiredCourse		= mpHsi->GetValue(CPHsi::HSI_VAL_DESIRED_CRS);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _desiredCourse$[ebp]

; 800  : 	float	desiredHeading		= mpHsi->GetValue(CPHsi::HSI_VAL_DESIRED_HEADING);

	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _desiredHeading$[ebp]

; 801  : 	float	courseDeviation		= mpHsi->GetValue(CPHsi::HSI_VAL_CRS_DEVIATION);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _courseDeviation$[ebp]

; 802  : 	float	bearingToBeacon		= mpHsi->GetValue(CPHsi::HSI_VAL_BEARING_TO_BEACON);

	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _bearingToBeacon$[ebp]

; 803  : 	BOOL	crsWarnFlag			= mpHsi->GetFlag(CPHsi::HSI_FLAG_CRS_WARN);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetFlag@CPHsi@@QAEHW4HSIFlags@1@@Z	; CPHsi::GetFlag
	mov	DWORD PTR _crsWarnFlag$[ebp], eax

; 804  : 
; 805  : 
; 806  : 	if(monoYes) {

	cmp	DWORD PTR ?monoYes@?1??DisplayDraw@CPHsiView@@UAEXXZ@4HA, 0
	je	SHORT $LN2@DisplayDra

; 807  : 		MonoPrint("bearingToBeacon = %f\n", bearingToBeacon);

	cvtss2sd xmm0, DWORD PTR _bearingToBeacon$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BG@LDIJDCCC@bearingToBeacon?5?$DN?5?$CFf?6?$AA@
	call	_MonoPrint
	add	esp, 12					; 0000000cH
$LN2@DisplayDra:

; 808  : 	}
; 809  : 
; 810  : 
; 811  : 	OTWDriver.renderer->SetViewport(mLeft, mTop, mRight, mBottom);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+148]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+112]
	call	edx

; 812  : 
; 813  : 	DrawCourse(desiredCourse, courseDeviation);

	push	ecx
	movss	xmm0, DWORD PTR _courseDeviation$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCourse@CPHsiView@@AAEXMM@Z		; CPHsiView::DrawCourse

; 814  : 	DrawStationBearing(bearingToBeacon);

	push	ecx
	movss	xmm0, DWORD PTR _bearingToBeacon$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStationBearing@CPHsiView@@AAEXM@Z	; CPHsiView::DrawStationBearing

; 815  : 	DrawHeadingMarker(desiredHeading);

	push	ecx
	movss	xmm0, DWORD PTR _desiredHeading$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawHeadingMarker@CPHsiView@@AAEXM@Z	; CPHsiView::DrawHeadingMarker

; 816  : 
; 817  : 	DrawAircraftSymbol();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAircraftSymbol@CPHsiView@@AAEXXZ	; CPHsiView::DrawAircraftSymbol

; 818  : 
; 819  : 	if(crsWarnFlag) {

	cmp	DWORD PTR _crsWarnFlag$[ebp], 0
	je	SHORT $LN1@DisplayDra

; 820  : 		DrawCourseWarning();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCourseWarning@CPHsiView@@AAEXXZ	; CPHsiView::DrawCourseWarning
$LN1@DisplayDra:

; 821  : 	}
; 822  : 
; 823  : 	mDirtyFlag = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0
$LN5@DisplayDra:

; 824  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayDraw@CPHsiView@@UAEXXZ ENDP			; CPHsiView::DisplayDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_colorArrows$ = -16					; size = 4
_colorArrowGhost$ = -12					; size = 4
_crsToTrueFlag$ = -8					; size = 4
_this$ = -4						; size = 4
?DrawToFrom@CPHsiView@@AAEXXZ PROC			; CPHsiView::DrawToFrom
; _this$ = ecx

; 827  : void CPHsiView::DrawToFrom(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 828  : 
; 829  : 	static const float	toArrow[3][2] = {
; 830  : 		{ 0.055F,  0.12F - 0.25f},
; 831  : 		{ 0.157F,  0.00F - 0.25f},
; 832  : 		{ 0.055F, -0.12F - 0.25f},
; 833  : 	};
; 834  : 	BOOL	crsToTrueFlag		= mpHsi->GetFlag(CPHsi::HSI_FLAG_TO_TRUE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetFlag@CPHsi@@QAEHW4HSIFlags@1@@Z	; CPHsi::GetFlag
	mov	DWORD PTR _crsToTrueFlag$[ebp], eax

; 835  : 
; 836  : 	//MI
; 837  : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN5@DrawToFrom

; 838  : 	{
; 839  : 		if(gNavigationSys)

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN5@DrawToFrom

; 840  : 		{
; 841  : 			if(gNavigationSys->GetInstrumentMode() == NavigationSystem::NAV)

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ ; NavigationSystem::GetInstrumentMode
	test	eax, eax
	jne	SHORT $LN5@DrawToFrom

; 842  : 				crsToTrueFlag = FALSE;

	mov	DWORD PTR _crsToTrueFlag$[ebp], 0
$LN5@DrawToFrom:

; 843  : 		}
; 844  : 	}
; 845  : 
; 846  : 	//sfr: took the colors out of the ifs
; 847  : 	DWORD colorArrows = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_ARROWS], true);

	push	1
	mov	edx, 40					; 00000028H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+276]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _colorArrows$[ebp], eax

; 848  : 	DWORD colorArrowGhost = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_ARROWGHOST], true);

	push	1
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _colorArrowGhost$[ebp], eax

; 849  : 
; 850  : 	if(crsToTrueFlag == TRUE) {

	cmp	DWORD PTR _crsToTrueFlag$[ebp], 1
	jne	$LN4@DrawToFrom

; 851  : 		// Draw To-From Arrows
; 852  : 		OTWDriver.renderer->SetColor(colorArrows);

	mov	eax, DWORD PTR _colorArrows$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 853  : 		OTWDriver.renderer->Tri(toArrow[0][0], toArrow[0][1], toArrow[1][0], toArrow[1][1],
; 854  : 				toArrow[2][0], toArrow[2][1]);

	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 855  : 		// draw ghost arrow
; 856  : 		OTWDriver.renderer->SetColor(colorArrowGhost);

	mov	ecx, DWORD PTR _colorArrowGhost$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 857  : 		OTWDriver.renderer->Line(-toArrow[0][0], toArrow[0][1], -toArrow[1][0], toArrow[1][1]);

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 858  : 		OTWDriver.renderer->Line(-toArrow[1][0], toArrow[1][1], -toArrow[2][0], toArrow[2][1]);

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 859  : 		OTWDriver.renderer->Line(-toArrow[2][0], toArrow[2][1], -toArrow[0][0], toArrow[0][1]);

	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+32]
	call	edx
	jmp	$LN1@DrawToFrom
$LN4@DrawToFrom:

; 860  : 
; 861  : 	}
; 862  : 	else if (crsToTrueFlag == 2) { 

	cmp	DWORD PTR _crsToTrueFlag$[ebp], 2
	jne	$LN2@DrawToFrom

; 863  : 		// from
; 864  : 		OTWDriver.renderer->SetColor(colorArrows);

	mov	eax, DWORD PTR _colorArrows$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 865  : 		OTWDriver.renderer->Tri(-toArrow[0][0], toArrow[0][1], -toArrow[1][0], toArrow[1][1],
; 866  : 				-toArrow[2][0], toArrow[2][1]);

	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 867  : 		// draw ghost arrow
; 868  : 		OTWDriver.renderer->SetColor(colorArrowGhost);

	mov	ecx, DWORD PTR _colorArrowGhost$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 869  : 		OTWDriver.renderer->Line(toArrow[0][0], toArrow[0][1], toArrow[1][0], toArrow[1][1]);

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 870  : 		OTWDriver.renderer->Line(toArrow[1][0], toArrow[1][1], toArrow[2][0], toArrow[2][1]);

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 871  : 		OTWDriver.renderer->Line(toArrow[2][0], toArrow[2][1], toArrow[0][0], toArrow[0][1]);

	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 872  : 	}
; 873  : 	else {

	jmp	$LN1@DrawToFrom
$LN2@DrawToFrom:

; 874  : 		OTWDriver.renderer->SetColor(colorArrowGhost);

	mov	eax, DWORD PTR _colorArrowGhost$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 875  : 		// draw ghost arrow
; 876  : 		OTWDriver.renderer->Line(-toArrow[0][0], toArrow[0][1], -toArrow[1][0], toArrow[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 877  : 		OTWDriver.renderer->Line(-toArrow[1][0], toArrow[1][1], -toArrow[2][0], toArrow[2][1]);

	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 878  : 		OTWDriver.renderer->Line(-toArrow[2][0], toArrow[2][1], -toArrow[0][0], toArrow[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 879  : 		// draw ghost arrow
; 880  : 		OTWDriver.renderer->Line(toArrow[0][0], toArrow[0][1], toArrow[1][0], toArrow[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 881  : 		OTWDriver.renderer->Line(toArrow[1][0], toArrow[1][1], toArrow[2][0], toArrow[2][1]);

	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 882  : 		OTWDriver.renderer->Line(toArrow[2][0], toArrow[2][1], toArrow[0][0], toArrow[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?toArrow@?1??DrawToFrom@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN1@DrawToFrom:

; 883  : 	}
; 884  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawToFrom@CPHsiView@@AAEXXZ ENDP			; CPHsiView::DrawToFrom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawCourseWarning@CPHsiView@@AAEXXZ PROC		; CPHsiView::DrawCourseWarning
; _this$ = ecx

; 887  : void CPHsiView::DrawCourseWarning(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 888  : 
; 889  : 	OTWDriver.renderer->SetViewport(-1.0F, 1.0F, 1.0F, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 890  : 	DWORD color = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_COURSEWARN], true);

	push	1
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _color$[ebp], eax

; 891  : 	OTWDriver.renderer->SetColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 892  : 	OTWDriver.renderer->Render2DTri((float)mWarnFlag.left, (float)mWarnFlag.top,
; 893  : 			(float)mWarnFlag.right, (float)mWarnFlag.top,
; 894  : 			(float)mWarnFlag.right, (float)mWarnFlag.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+244]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+240]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+236]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+240]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+236]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+232]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 895  : 	OTWDriver.renderer->Render2DTri((float)mWarnFlag.left, (float)mWarnFlag.top,
; 896  : 			(float)mWarnFlag.left, (float)mWarnFlag.bottom,
; 897  : 			(float)mWarnFlag.right, (float)mWarnFlag.bottom);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+244]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+240]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+244]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+232]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+236]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+232]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 898  : 
; 899  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCourseWarning@CPHsiView@@AAEXXZ ENDP		; CPHsiView::DrawCourseWarning
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_color$ = -16						; size = 4
tv217 = -12						; size = 4
_currentHeading$ = -8					; size = 4
_this$ = -4						; size = 4
_desiredHeading$ = 8					; size = 4
?DrawHeadingMarker@CPHsiView@@AAEXM@Z PROC		; CPHsiView::DrawHeadingMarker
; _this$ = ecx

; 902  : void CPHsiView::DrawHeadingMarker(float desiredHeading) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 903  : 
; 904  : 	static const float	headingMarker[2][2] = {
; 905  : 		{0.56F, 0.04F},
; 906  : 		{0.61F, 0.04F},
; 907  : 	};
; 908  : 	float	currentHeading = mpHsi->GetValue(CPHsi::HSI_VAL_CURRENT_HEADING);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _currentHeading$[ebp]

; 909  : 
; 910  : 	MoveToCompassCenter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveToCompassCenter@CPHsiView@@AAEXXZ	; CPHsiView::MoveToCompassCenter

; 911  : 
; 912  : 
; 913  : 	OTWDriver.renderer->AdjustRotationAboutOrigin(-ConvertNavtoRad(360.0F - currentHeading + desiredHeading));

	movss	xmm0, DWORD PTR __real@43b40000
	subss	xmm0, DWORD PTR _currentHeading$[ebp]
	addss	xmm0, DWORD PTR _desiredHeading$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	add	esp, 4
	fstp	DWORD PTR tv217[ebp]
	movss	xmm0, DWORD PTR tv217[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 914  : 	DWORD color = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_HEADINGMARK], true);

	push	1
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _color$[ebp], eax

; 915  : 	OTWDriver.renderer->SetColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 916  : 
; 917  : 	// draw tail
; 918  : 	OTWDriver.renderer->Tri(headingMarker[0][0], headingMarker[0][1], headingMarker[1][0], headingMarker[1][1],
; 919  : 			headingMarker[1][0], -headingMarker[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 920  : 	OTWDriver.renderer->Tri(headingMarker[0][0], headingMarker[0][1], headingMarker[1][0], -headingMarker[1][1],
; 921  : 			headingMarker[0][0], -headingMarker[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?headingMarker@?1??DrawHeadingMarker@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 922  : 
; 923  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DrawHeadingMarker@CPHsiView@@AAEXM@Z ENDP		; CPHsiView::DrawHeadingMarker
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawAircraftSymbol@CPHsiView@@AAEXXZ PROC		; CPHsiView::DrawAircraftSymbol
; _this$ = ecx

; 1094 : void CPHsiView::DrawAircraftSymbol(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1095 : 
; 1096 : 	static const float	aircraftSymbol[10][2] = {
; 1097 : 		{0.017F, 0.133F},
; 1098 : 		{0.133F, 0.017F},
; 1099 : 		{0.067F, -0.133F},
; 1100 : 		{0.067F, -0.158F},
; 1101 : 		{0.017F, -0.2F},
; 1102 : 	};
; 1103 : 
; 1104 : 
; 1105 : 	MoveToCompassCenter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveToCompassCenter@CPHsiView@@AAEXXZ	; CPHsiView::MoveToCompassCenter

; 1106 : 
; 1107 : 	//transform the color using cockpit light
; 1108 : 	DWORD color = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_AIRCRAFT], true);

	push	1
	mov	eax, 40					; 00000028H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+276]
	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR [edx+eax]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _color$[ebp], eax

; 1109 : 	OTWDriver.renderer->SetColor(color);

	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1110 : 
; 1111 : 	// draw the aircraft symbol
; 1112 : 	OTWDriver.renderer->Tri(-aircraftSymbol[0][0], aircraftSymbol[0][1], aircraftSymbol[0][0], aircraftSymbol[0][1],
; 1113 : 			aircraftSymbol[4][0], aircraftSymbol[4][1]);

	mov	ecx, 8
	shl	ecx, 2
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 2
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1114 : 	OTWDriver.renderer->Tri(-aircraftSymbol[0][0], aircraftSymbol[0][1], aircraftSymbol[4][0], aircraftSymbol[4][1],
; 1115 : 			-aircraftSymbol[4][0], aircraftSymbol[4][1]);

	mov	ecx, 8
	shl	ecx, 2
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 2
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 2
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1116 : 	OTWDriver.renderer->Tri(-aircraftSymbol[1][0], aircraftSymbol[1][1], aircraftSymbol[1][0], aircraftSymbol[1][1],
; 1117 : 			aircraftSymbol[1][0], -aircraftSymbol[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1118 : 	OTWDriver.renderer->Tri(-aircraftSymbol[1][0], aircraftSymbol[1][1], aircraftSymbol[1][0], -aircraftSymbol[1][1],
; 1119 : 			-aircraftSymbol[1][0], -aircraftSymbol[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1120 : 	OTWDriver.renderer->Tri(-aircraftSymbol[2][0], aircraftSymbol[2][1], aircraftSymbol[2][0], aircraftSymbol[2][1],
; 1121 : 			aircraftSymbol[3][0], aircraftSymbol[3][1]);

	mov	ecx, 8
	imul	ecx, 3
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 3
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1122 : 	OTWDriver.renderer->Tri(-aircraftSymbol[2][0], aircraftSymbol[2][1], aircraftSymbol[3][0], aircraftSymbol[3][1],
; 1123 : 			-aircraftSymbol[3][0], aircraftSymbol[3][1]);

	mov	ecx, 8
	imul	ecx, 3
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 3
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 3
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 3
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?aircraftSymbol@?1??DrawAircraftSymbol@CPHsiView@@AAEXXZ@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1124 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAircraftSymbol@CPHsiView@@AAEXXZ ENDP		; CPHsiView::DrawAircraftSymbol
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_color$ = -16						; size = 4
tv256 = -12						; size = 4
_currentHeading$ = -8					; size = 4
_this$ = -4						; size = 4
_bearing$ = 8						; size = 4
?DrawStationBearing@CPHsiView@@AAEXM@Z PROC		; CPHsiView::DrawStationBearing
; _this$ = ecx

; 925  : void CPHsiView::DrawStationBearing(float bearing) { // in nav units

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 926  : 
; 927  : 	static const float	bearingArrow[2][2] = {
; 928  : 		{0.69F, 0.05F},
; 929  : 		{0.80F, 0.0F},
; 930  : 	};
; 931  : 	static const float	bearingTail[2][2] = {
; 932  : 		{-0.80F, 0.02F},
; 933  : 		{-0.69F, 0.02F},
; 934  : 	};
; 935  : 	float	currentHeading = mpHsi->GetValue(CPHsi::HSI_VAL_CURRENT_HEADING);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _currentHeading$[ebp]

; 936  : 
; 937  : 
; 938  : 	MoveToCompassCenter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveToCompassCenter@CPHsiView@@AAEXXZ	; CPHsiView::MoveToCompassCenter

; 939  : 
; 940  : 	OTWDriver.renderer->AdjustRotationAboutOrigin(-ConvertNavtoRad(360.0F - currentHeading + bearing));

	movss	xmm0, DWORD PTR __real@43b40000
	subss	xmm0, DWORD PTR _currentHeading$[ebp]
	addss	xmm0, DWORD PTR _bearing$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	add	esp, 4
	fstp	DWORD PTR tv256[ebp]
	movss	xmm0, DWORD PTR tv256[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 941  : 
; 942  : 	DWORD color = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_STATIONBEARING], true);

	push	1
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _color$[ebp], eax

; 943  : 	OTWDriver.renderer->SetColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 944  : 
; 945  : 	// draw arrow
; 946  : 	OTWDriver.renderer->Tri(bearingArrow[0][0], bearingArrow[0][1], bearingArrow[1][0], bearingArrow[1][1],
; 947  : 			bearingArrow[0][0], -bearingArrow[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingArrow@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 948  : 
; 949  : 	// draw tail
; 950  : 	//MI this is not here in real
; 951  : 	//	if(!g_bRealisticAvionics)					//Wombat778 10-19-2003   Re-enabled in all avionics modes for realism as per MIRV
; 952  : 	//	{
; 953  : 	OTWDriver.renderer->Tri(bearingTail[0][0], bearingTail[0][1], bearingTail[1][0], bearingTail[1][1],
; 954  : 			bearingTail[1][0], -bearingTail[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 955  : 	OTWDriver.renderer->Tri(bearingTail[0][0], bearingTail[0][1], bearingTail[1][0], -bearingTail[1][1],
; 956  : 			bearingTail[0][0], -bearingTail[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?bearingTail@?1??DrawStationBearing@CPHsiView@@AAEXM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 957  : 	//	}
; 958  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DrawStationBearing@CPHsiView@@AAEXM@Z ENDP		; CPHsiView::DrawStationBearing
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_devBarCenter$ = -68					; size = 8
_trig$ = -60						; size = 8
_colorWarning$1 = -52					; size = 4
_theta$ = -48						; size = 4
_ilsWarnFlag$ = -44					; size = 4
_colorDevBar$ = -40					; size = 4
_halfDeviationLimit$ = -36				; size = 4
_colorCircle$ = -32					; size = 4
_colorCourse$ = -28					; size = 4
_currentHeading$ = -24					; size = 4
_r$ = -20						; size = 4
_deviationLimit$ = -16					; size = 4
_i$ = -12						; size = 4
_startPoint$ = -8					; size = 4
_this$ = -4						; size = 4
_desiredCourse$ = 8					; size = 4
_deviaiton$ = 12					; size = 4
?DrawCourse@CPHsiView@@AAEXMM@Z PROC			; CPHsiView::DrawCourse
; _this$ = ecx

; 961  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 962  : 
; 963  : 	static const float	courseArrow[4][2] = {
; 964  : 		{0.610F, 0.000F},
; 965  : 		{0.50F, 0.050F},
; 966  : 		{0.50F, 0.020F},
; 967  : 		{0.25F, 0.020F},
; 968  : 	};
; 969  : 	static const float	courseTail[2][2] = {
; 970  : 		{-0.40F, 0.020F},
; 971  : 		{-0.60F, 0.020F},
; 972  : 	};
; 973  : 	static const float	courseDevScale[3] = {0.0000F, 0.24F, 0.04F };
; 974  : 	static const float	courseDevBar[2][2] = {
; 975  : 		{-0.39F,0.020F},
; 976  : 		{ 0.24F,0.020F},
; 977  : 	};
; 978  : 	static const float	courseDevWarn[2] = { -0.04F, 0.08F};
; 979  : 
; 980  : 	float				devBarCenter[2]; 
; 981  : 	float				startPoint;
; 982  : 	float				r;
; 983  : 	float				theta;
; 984  : 	int				i;
; 985  : 	float				currentHeading			= mpHsi->GetValue(CPHsi::HSI_VAL_CURRENT_HEADING);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _currentHeading$[ebp]

; 986  : 	float				deviationLimit			= mpHsi->GetValue(CPHsi::HSI_VAL_DEV_LIMIT);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _deviationLimit$[ebp]

; 987  : 	float				halfDeviationLimit	= mpHsi->GetValue(CPHsi::HSI_VAL_HALF_DEV_LIMIT);

	push	7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _halfDeviationLimit$[ebp]

; 988  : 	BOOL				ilsWarnFlag			= mpHsi->GetFlag(CPHsi::HSI_FLAG_ILS_WARN);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?GetFlag@CPHsi@@QAEHW4HSIFlags@1@@Z	; CPHsi::GetFlag
	mov	DWORD PTR _ilsWarnFlag$[ebp], eax

; 989  : 	mlTrig         trig;
; 990  : 
; 991  : 	MoveToCompassCenter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveToCompassCenter@CPHsiView@@AAEXXZ	; CPHsiView::MoveToCompassCenter

; 992  : 	desiredCourse	= 360.0F - currentHeading + desiredCourse;

	movss	xmm0, DWORD PTR __real@43b40000
	subss	xmm0, DWORD PTR _currentHeading$[ebp]
	addss	xmm0, DWORD PTR _desiredCourse$[ebp]
	movss	DWORD PTR _desiredCourse$[ebp], xmm0

; 993  : 
; 994  : 	if(desiredCourse > 360.0F) {

	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	jbe	SHORT $LN11@DrawCourse

; 995  : 		desiredCourse -= 360.0F;

	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	subss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _desiredCourse$[ebp], xmm0
$LN11@DrawCourse:

; 996  : 	}
; 997  : 
; 998  : 	desiredCourse	= ConvertNavtoRad(desiredCourse);

	push	ecx
	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ConvertNavtoRad@@YAMM@Z		; ConvertNavtoRad
	add	esp, 4
	fstp	DWORD PTR _desiredCourse$[ebp]

; 999  : 
; 1000 : 
; 1001 : 	// Draw Arrow
; 1002 : 	OTWDriver.renderer->AdjustRotationAboutOrigin(-desiredCourse);

	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 1003 : 
; 1004 : 	//	BOOL	toFromFlag			= mpHsi->GetFlag(CPHsi::HSI_FLAG_TO_TRUE);
; 1005 : 
; 1006 : 	DrawToFrom();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawToFrom@CPHsiView@@AAEXXZ		; CPHsiView::DrawToFrom

; 1007 : 
; 1008 : 	DWORD colorCourse = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_COURSE], true);

	push	1
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _colorCourse$[ebp], eax

; 1009 : 	OTWDriver.renderer->SetColor(colorCourse);

	mov	eax, DWORD PTR _colorCourse$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1010 : 
; 1011 : 	OTWDriver.renderer->Tri(courseArrow[1][0], courseArrow[1][1], courseArrow[1][0], -courseArrow[1][1], 
; 1012 : 			courseArrow[0][0], courseArrow[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1013 : 	OTWDriver.renderer->Tri(courseArrow[3][0], courseArrow[3][1], courseArrow[2][0], -courseArrow[2][1],
; 1014 : 			courseArrow[2][0], courseArrow[2][1]);

	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 3
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 3
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1015 : 	OTWDriver.renderer->Tri(courseArrow[3][0], courseArrow[3][1], courseArrow[3][0], -courseArrow[3][1],
; 1016 : 			courseArrow[2][0], -courseArrow[2][1]);

	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 3
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	imul	ecx, 3
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 3
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 3
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseArrow@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1017 : 
; 1018 : 	// Draw Tail
; 1019 : 	OTWDriver.renderer->Tri(courseTail[0][0], courseTail[0][1], courseTail[1][0], courseTail[1][1],
; 1020 : 			courseTail[1][0], -courseTail[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1021 : 	OTWDriver.renderer->Tri(courseTail[0][0], courseTail[0][1], courseTail[1][0], -courseTail[1][1],
; 1022 : 			courseTail[0][0], -courseTail[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseTail@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1023 : 
; 1024 : 	DWORD colorCircle = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_CIRCLES], true);

	push	1
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+276]
	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _colorCircle$[ebp], eax

; 1025 : 	OTWDriver.renderer->SetColor(colorCircle);

	mov	eax, DWORD PTR _colorCircle$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1026 : 
; 1027 : 	// Draw Scale start drawing the course 
; 1028 : 	// deviation scale from bottom circle, 
; 1029 : 	// draw four equally spaced circles
; 1030 : 	startPoint = -2.0F * courseDevScale[1];

	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	movss	DWORD PTR _startPoint$[ebp], xmm0

; 1031 : 
; 1032 : 	for(i = 0; i < 2; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@DrawCourse
$LN9@DrawCourse:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@DrawCourse:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN8@DrawCourse

; 1033 : 		OTWDriver.renderer->Circle(courseDevScale[0], -startPoint, courseDevScale[2]);

	mov	eax, 4
	shl	eax, 1
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _startPoint$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 1034 : 		OTWDriver.renderer->Circle(courseDevScale[0], startPoint, courseDevScale[2]);

	mov	eax, 4
	shl	eax, 1
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _startPoint$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 1035 : 		startPoint += courseDevScale[1];

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _startPoint$[ebp]
	addss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	movss	DWORD PTR _startPoint$[ebp], xmm0

; 1036 : 	}

	jmp	$LN9@DrawCourse
$LN8@DrawCourse:

; 1037 : 
; 1038 : 	// JPO - normalise to account for flying away.
; 1039 : 	if (deviaiton > 90) deviaiton = 180 - deviaiton;

	movss	xmm0, DWORD PTR _deviaiton$[ebp]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN7@DrawCourse
	movss	xmm0, DWORD PTR __real@43340000
	subss	xmm0, DWORD PTR _deviaiton$[ebp]
	movss	DWORD PTR _deviaiton$[ebp], xmm0
$LN7@DrawCourse:

; 1040 : 	if (deviaiton < -90) deviaiton = - (180 + deviaiton);

	movss	xmm0, DWORD PTR __real@c2b40000
	comiss	xmm0, DWORD PTR _deviaiton$[ebp]
	jbe	SHORT $LN6@DrawCourse
	movss	xmm0, DWORD PTR __real@43340000
	addss	xmm0, DWORD PTR _deviaiton$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _deviaiton$[ebp], xmm0
$LN6@DrawCourse:

; 1041 : 	// If the deviaion is > 10% or < -10%, the bar will be pinned
; 1042 : 	if(deviaiton > deviationLimit){

	movss	xmm0, DWORD PTR _deviaiton$[ebp]
	comiss	xmm0, DWORD PTR _deviationLimit$[ebp]
	jbe	SHORT $LN5@DrawCourse

; 1043 : 		startPoint		= 2.0F * courseDevScale[1];

	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	movss	DWORD PTR _startPoint$[ebp], xmm0
	jmp	SHORT $LN2@DrawCourse
$LN5@DrawCourse:

; 1044 : 	}
; 1045 : 	else if(deviaiton < -deviationLimit){

	movss	xmm0, DWORD PTR _deviationLimit$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR _deviaiton$[ebp]
	jbe	SHORT $LN3@DrawCourse

; 1046 : 		startPoint		= -2.0F * courseDevScale[1];

	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[edx]
	movss	DWORD PTR _startPoint$[ebp], xmm0

; 1047 : 	}
; 1048 : 	else{

	jmp	SHORT $LN2@DrawCourse
$LN3@DrawCourse:

; 1049 : 		startPoint		= deviaiton / halfDeviationLimit * courseDevScale[1];

	movss	xmm0, DWORD PTR _deviaiton$[ebp]
	divss	xmm0, DWORD PTR _halfDeviationLimit$[ebp]
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	movss	DWORD PTR _startPoint$[ebp], xmm0
$LN2@DrawCourse:

; 1050 : 	}
; 1051 : 
; 1052 : 	mlSinCos (&trig, HALFPI + desiredCourse);

	movss	xmm0, DWORD PTR _HALFPI
	addss	xmm0, DWORD PTR _desiredCourse$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1053 : 	devBarCenter[0]	= startPoint * trig.cos;

	movss	xmm0, DWORD PTR _startPoint$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR _devBarCenter$[ebp+edx], xmm0

; 1054 : 	devBarCenter[1]	= startPoint * trig.sin;

	movss	xmm0, DWORD PTR _startPoint$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _devBarCenter$[ebp+eax], xmm0

; 1055 : 
; 1056 : 	MoveToCompassCenter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveToCompassCenter@CPHsiView@@AAEXXZ	; CPHsiView::MoveToCompassCenter

; 1057 : 
; 1058 : 	OTWDriver.renderer->AdjustOriginInViewport(devBarCenter[0], devBarCenter[1]);

	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _devBarCenter$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _devBarCenter$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1059 : 	OTWDriver.renderer->AdjustRotationAboutOrigin(-desiredCourse);

	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 1060 : 
; 1061 : 	// Draw the course dev bar
; 1062 : 	DWORD colorDevBar = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_DEVBAR], true);

	push	1
	mov	eax, 40					; 00000028H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+276]
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR [edx+eax]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _colorDevBar$[ebp], eax

; 1063 : 	OTWDriver.renderer->SetColor(colorDevBar);

	mov	edx, DWORD PTR _colorDevBar$[ebp]
	push	edx
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1064 : 	OTWDriver.renderer->Tri(courseDevBar[0][0], courseDevBar[0][1], courseDevBar[1][0], courseDevBar[1][1], 
; 1065 : 			courseDevBar[1][0], -courseDevBar[1][1]);

	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1066 : 	OTWDriver.renderer->Tri(courseDevBar[0][0], courseDevBar[0][1], courseDevBar[1][0], -courseDevBar[1][1], 
; 1067 : 			courseDevBar[0][0], -courseDevBar[0][1]);

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[ecx+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 8
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevBar@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QAY01$$CBMA[edx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1068 : 
; 1069 : 
; 1070 : 	if(ilsWarnFlag) {// && (gNavigationSys->GetInstrumentMode() == NavigationSystem::ILS_TACAN || gNavigationSys->GetInstrumentMode() == NavigationSystem::ILS_NAV)) {

	cmp	DWORD PTR _ilsWarnFlag$[ebp], 0
	je	$LN1@DrawCourse

; 1071 : 
; 1072 : 		r = (float) sqrt(courseDevScale[1] * courseDevScale[1] + 0.2f * 0.2f);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	mulss	xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[edx]
	addss	xmm0, DWORD PTR __real@3d23d70b
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _r$[ebp]

; 1073 : 		theta = (float)atan2(courseDevScale[1], 0.2F);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fc99999a0000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	cvtss2sd xmm0, DWORD PTR ?courseDevScale@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _theta$[ebp]

; 1074 : 		MoveToCompassCenter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveToCompassCenter@CPHsiView@@AAEXXZ	; CPHsiView::MoveToCompassCenter

; 1075 : 		mlSinCos (&trig, theta + desiredCourse);

	movss	xmm0, DWORD PTR _theta$[ebp]
	addss	xmm0, DWORD PTR _desiredCourse$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1076 : 		OTWDriver.renderer->AdjustOriginInViewport(r * trig.cos, r * trig.sin);

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1077 : 		OTWDriver.renderer->AdjustRotationAboutOrigin(-desiredCourse);

	movss	xmm0, DWORD PTR _desiredCourse$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 1078 : 
; 1079 : 		DWORD colorWarning = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][HSI_COLOR_ILSDEVWARN], true);

	push	1
	mov	edx, 40					; 00000028H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+276]
	mov	edx, 4
	imul	edx, 9
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _colorWarning$1[ebp], eax

; 1080 : 		OTWDriver.renderer->SetColor(colorWarning);

	mov	ecx, DWORD PTR _colorWarning$1[ebp]
	push	ecx
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 1081 : 		OTWDriver.renderer->Tri(courseDevWarn[0], courseDevWarn[1], -courseDevWarn[0], courseDevWarn[1],
; 1082 : 				-courseDevWarn[0], -courseDevWarn[1]);

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1083 : 		OTWDriver.renderer->Tri(courseDevWarn[0], courseDevWarn[1], -courseDevWarn[0], -courseDevWarn[1],
; 1084 : 				courseDevWarn[0], -courseDevWarn[1]);

	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?courseDevWarn@?1??DrawCourse@CPHsiView@@AAEXMM@Z@4QBMB[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+36]
	call	eax
$LN1@DrawCourse:

; 1085 : 	}	
; 1086 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DrawCourse@CPHsiView@@AAEXMM@Z ENDP			; CPHsiView::DrawCourse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MoveToCompassCenter@CPHsiView@@AAEXXZ PROC		; CPHsiView::MoveToCompassCenter
; _this$ = ecx

; 1088 : void CPHsiView::MoveToCompassCenter(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1089 : 	OTWDriver.renderer->CenterOriginInViewport();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 1090 : 	OTWDriver.renderer->ZeroRotationAboutOrigin();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 1091 : 	OTWDriver.renderer->AdjustOriginInViewport(COMPASS_X_CENTER, COMPASS_Y_CENTER);

	push	ecx
	movss	xmm0, DWORD PTR _COMPASS_Y_CENTER
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _COMPASS_X_CENTER
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1092 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MoveToCompassCenter@CPHsiView@@AAEXXZ ENDP		; CPHsiView::MoveToCompassCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_radioHorizon$ = -32					; size = 8
tv162 = -24						; size = 4
_rndNum$ = -20						; size = 4
_detectionChanceAlt$ = -16				; size = 4
_detectionChanceRange$ = -12				; size = 4
_alt$ = -8						; size = 4
_this$ = -4						; size = 4
_rangeToBeacon$ = 8					; size = 4
_nominalBeaconrange$ = 12				; size = 4
?BeaconInRange@CPHsi@@AAEHMM@Z PROC			; CPHsi::BeaconInRange
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 	// we check every 5 seconds, to see if in range, else use the last result
; 348  : 	if (lastCheck < SimLibElapsedTime) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	jae	SHORT $LN12@BeaconInRa

; 349  : 		lastCheck = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], edx

; 350  : 	}
; 351  : 	else {

	jmp	SHORT $LN11@BeaconInRa
$LN12@BeaconInRa:

; 352  : 		return lastResult;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+88]
	jmp	$LN13@BeaconInRa
$LN11@BeaconInRa:

; 353  : 	}
; 354  : 
; 355  : 	// RAS - 18 Dec 03 - Added Radio Horizon Code
; 356  : 	// Purpose:  reception of TACAN based on altitude of aircraft
; 357  : 	// Note:  This added code combines both the range code and altitude code
; 358  : 
; 359  : 	int alt = 0;									// Aircrafts altitude

	mov	DWORD PTR _alt$[ebp], 0

; 360  : 	double radioHorizon = 0.0;						// Set radio horizon to 0

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _radioHorizon$[ebp], xmm0

; 361  : 	float rndNum = PRANDFloatPos();					// number picked from 4x4 array to add intermitant reception

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR _rndNum$[ebp]

; 362  : 
; 363  : 	alt = SimDriver.GetPlayerEntity()->GetAltitude();	// Get current altitude (AGL)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetAltitude@FalconEntity@@QBEHXZ	; FalconEntity::GetAltitude
	mov	DWORD PTR _alt$[ebp], eax

; 364  : 	if (alt <= 0)  alt = 1;							// Prevent taking the sqrt of 0 (may not be needed)

	cmp	DWORD PTR _alt$[ebp], 0
	jg	SHORT $LN10@BeaconInRa
	mov	DWORD PTR _alt$[ebp], 1
$LN10@BeaconInRa:

; 365  : 	radioHorizon = 1.06f*sqrt((float)alt);			// Simplified equation for radio line-of-site  //JPG 18 Apr 04 - Replaced sqrt(2*alt) w/ better equation

	cvtsi2ss xmm0, DWORD PTR _alt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	mulss	xmm0, DWORD PTR __real@3f87ae14
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _radioHorizon$[ebp], xmm0

; 366  : 
; 367  : 	// Ensure there is no divide by 0
; 368  : 	if (nominalBeaconrange == 0) nominalBeaconrange = 1;

	movss	xmm0, DWORD PTR _nominalBeaconrange$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@BeaconInRa
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _nominalBeaconrange$[ebp], xmm0
$LN9@BeaconInRa:

; 369  : 	if (rangeToBeacon == 0) rangeToBeacon = 1;

	movss	xmm0, DWORD PTR _rangeToBeacon$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@BeaconInRa
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _rangeToBeacon$[ebp], xmm0
$LN8@BeaconInRa:

; 370  : 
; 371  : 	// used to add random reception at edge of max range and lower altitudes
; 372  : 	float detectionChanceRange = 1.0f -  (rangeToBeacon - nominalBeaconrange)  * 2.0f / nominalBeaconrange;

	movss	xmm0, DWORD PTR _rangeToBeacon$[ebp]
	subss	xmm0, DWORD PTR _nominalBeaconrange$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR _nominalBeaconrange$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _detectionChanceRange$[ebp], xmm1

; 373  : 	float detectionChanceAlt = (float)(0.5f - (rangeToBeacon - radioHorizon) * 2.0f / radioHorizon);

	cvtss2sd xmm0, DWORD PTR _rangeToBeacon$[ebp]
	subsd	xmm0, QWORD PTR _radioHorizon$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	divsd	xmm0, QWORD PTR _radioHorizon$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _detectionChanceAlt$[ebp], xmm0

; 374  : 
; 375  : 	//MonoPrint("detectionChanceRange = %f\n", detectionChanceRange);
; 376  : 	//MonoPrint("detectionChanceAlt = %f\n", detectionChanceAlt);
; 377  : 	//MonoPrint("radioHorizon = %f\n", radioHorizon);
; 378  : 	//MonoPrint("rangeToBeacon = %f\n", rangeToBeacon);
; 379  : 	//MonoPrint("alt = %i\n\n", alt);
; 380  : 
; 381  : 	// above radio horizon and within detection range - good reception
; 382  : 	if ((rangeToBeacon < radioHorizon) && (detectionChanceRange > 1) && (detectionChanceAlt > 1))			// definite receive

	cvtss2sd xmm0, DWORD PTR _rangeToBeacon$[ebp]
	movsd	xmm1, QWORD PTR _radioHorizon$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN7@BeaconInRa
	movss	xmm0, DWORD PTR _detectionChanceRange$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN7@BeaconInRa
	movss	xmm0, DWORD PTR _detectionChanceAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN7@BeaconInRa

; 383  : 		lastResult = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 1
	jmp	SHORT $LN1@BeaconInRa
$LN7@BeaconInRa:

; 384  : 	// outside of radio horizon or detection range or altitude detection range to low for reception - no reception
; 385  : 	else if ((rangeToBeacon > radioHorizon) || (detectionChanceRange <=0) || (detectionChanceAlt <= 0.5))

	cvtss2sd xmm0, DWORD PTR _rangeToBeacon$[ebp]
	comisd	xmm0, QWORD PTR _radioHorizon$[ebp]
	ja	SHORT $LN4@BeaconInRa
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _detectionChanceRange$[ebp]
	jae	SHORT $LN4@BeaconInRa
	cvtss2sd xmm0, DWORD PTR _detectionChanceAlt$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN5@BeaconInRa
$LN4@BeaconInRa:

; 386  : 		lastResult = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	jmp	SHORT $LN1@BeaconInRa
$LN5@BeaconInRa:

; 387  : 	// detection range at max or detection altitude near min (intermitant reception)
; 388  : 	else if ((detectionChanceRange > rndNum) && (detectionChanceAlt > rndNum))

	movss	xmm0, DWORD PTR _detectionChanceRange$[ebp]
	comiss	xmm0, DWORD PTR _rndNum$[ebp]
	jbe	SHORT $LN2@BeaconInRa
	movss	xmm0, DWORD PTR _detectionChanceAlt$[ebp]
	comiss	xmm0, DWORD PTR _rndNum$[ebp]
	jbe	SHORT $LN2@BeaconInRa

; 389  : 		lastResult = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 1
	jmp	SHORT $LN1@BeaconInRa
$LN2@BeaconInRa:

; 390  : 	else lastResult = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0
$LN1@BeaconInRa:

; 391  : 
; 392  : 	// End of new code
; 393  : 
; 394  : 
; 395  : 
; 396  : 	// ***** Old Range Code ****
; 397  : 	//if (nominalBeaconrange ==0) nominalBeaconrange = 1;
; 398  : 	//float detectionChance = 1.0f -  (rangeToBeacon - nominalBeaconrange)  * 2.0f / nominalBeaconrange;
; 399  : 	//if (detectionChance > 1) lastResult = TRUE; // definite receive
; 400  : 	//else if (detectionChance <= 0) lastResult = FALSE; // definite no receive
; 401  : 	//else if (detectionChance > PRANDFloatPos()) { // somewhere in between
; 402  : 	//lastResult = TRUE;
; 403  : 	//}
; 404  : 	//else lastResult = FALSE;
; 405  : 
; 406  : 	return lastResult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]
$LN13@BeaconInRa:

; 407  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?BeaconInRange@CPHsi@@AAEHMM@Z ENDP			; CPHsi::BeaconInRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dev$ = 8						; size = 4
?CalcILSCrsDev@CPHsi@@AAEXM@Z PROC			; CPHsi::CalcILSCrsDev
; _this$ = ecx

; 410  : void CPHsi::CalcILSCrsDev(float dev) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 411  : 
; 412  : 	mpHsiValues[HSI_VAL_CRS_DEVIATION]	= -dev * RTD;

	movss	xmm0, DWORD PTR _dev$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 413  : 	if(mpHsiValues[HSI_VAL_CRS_DEVIATION] < 0.0F) {

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+edx+16]
	jbe	SHORT $LN1@CalcILSCrs

; 414  : 		mpHsiValues[HSI_VAL_CRS_DEVIATION]		+= 360.0F;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0
$LN1@CalcILSCrs:

; 415  : 	}
; 416  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcILSCrsDev@CPHsi@@AAEXM@Z ENDP			; CPHsi::CalcILSCrsDev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_course$ = 8						; size = 4
?CalcTCNCrsDev@CPHsi@@AAEXM@Z PROC			; CPHsi::CalcTCNCrsDev
; _this$ = ecx

; 336  : void CPHsi::CalcTCNCrsDev(float course) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 
; 338  : 	mpHsiValues[HSI_VAL_CRS_DEVIATION]	= course - mpHsiValues[HSI_VAL_BEARING_TO_BEACON]; // in degrees

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _course$[ebp]
	subss	xmm0, DWORD PTR [ecx+eax+16]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+16], xmm0

; 339  : 	if(mpHsiValues[HSI_VAL_CRS_DEVIATION] < 0.0F) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+ecx+16]
	jbe	SHORT $LN1@CalcTCNCrs

; 340  : 		mpHsiValues[HSI_VAL_CRS_DEVIATION]		+= 360.0F;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+16]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+16], xmm0
$LN1@CalcTCNCrs:

; 341  : 	}
; 342  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcTCNCrsDev@CPHsi@@AAEXM@Z ENDP			; CPHsi::CalcTCNCrsDev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_bearingToBeacon$ = -40					; size = 8
_ydiff$ = -32						; size = 8
_xdiff$ = -24						; size = 8
tv225 = -16						; size = 4
tv208 = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z PROC		; CPHsi::ExecBeaconProximity
; _this$ = ecx

; 295  : void CPHsi::ExecBeaconProximity(float x1, float y1, float x2, float y2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 296  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 297  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN7@ExecBeacon

; 298  : 		return;

	jmp	$LN8@ExecBeacon
$LN7@ExecBeacon:

; 299  : 	}
; 300  : 
; 301  : 	double	xdiff, ydiff;
; 302  : 	double	bearingToBeacon;
; 303  : 
; 304  : 	xdiff = x2 - x1;

	movss	xmm0, DWORD PTR _x2$[ebp]
	subss	xmm0, DWORD PTR _x1$[ebp]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _xdiff$[ebp], xmm0

; 305  : 	ydiff = y2 - y1;

	movss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR _y1$[ebp]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _ydiff$[ebp], xmm0

; 306  : 
; 307  : 	bearingToBeacon	= atan2(xdiff, ydiff); // radians +-pi, xaxis = 0deg

	sub	esp, 8
	movsd	xmm0, QWORD PTR _ydiff$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _xdiff$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _bearingToBeacon$[ebp]

; 308  : 
; 309  : 	mpHsiValues[HSI_VAL_BEARING_TO_BEACON]		= ConvertRadtoNav((float)bearingToBeacon);

	cvtsd2ss xmm0, QWORD PTR _bearingToBeacon$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?ConvertRadtoNav@@YAMM@Z		; ConvertRadtoNav
	add	esp, 4
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax+16]

; 310  : 	mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON]	= (float)sqrt((float)(xdiff * xdiff + ydiff * ydiff)) * 0.0001666F; // in nautical miles (1 / 6000)

	movsd	xmm0, QWORD PTR _xdiff$[ebp]
	mulsd	xmm0, QWORD PTR _xdiff$[ebp]
	movsd	xmm1, QWORD PTR _ydiff$[ebp]
	mulsd	xmm1, QWORD PTR _ydiff$[ebp]
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv208[ebp]
	movss	xmm0, DWORD PTR tv208[ebp]
	mulss	xmm0, DWORD PTR __real@392eb159
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+16], xmm0

; 311  : 
; 312  : 	if(mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON] > 999.0F) {

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	comiss	xmm0, DWORD PTR __real@4479c000
	jbe	SHORT $LN6@ExecBeacon

; 313  : 		mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON]	= 999.0F;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4479c000
	movss	DWORD PTR [ecx+eax+16], xmm0

; 314  : 	}
; 315  : 	else if ((mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON] - (float)floor(mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON])) > 0.5F

	jmp	SHORT $LN4@ExecBeacon
$LN6@ExecBeacon:

; 316  : 	) {

	mov	esi, 4
	shl	esi, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	fstp	DWORD PTR tv225[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+esi+16]
	subss	xmm0, DWORD PTR tv225[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN4@ExecBeacon

; 317  : 		mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON]	= (float)ceil(mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?ceil@@YAMM@Z				; ceil
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+ecx+16]
$LN4@ExecBeacon:

; 318  : 	}
; 319  : 
; 320  : 	mpHsiValues[HSI_VAL_CURRENT_HEADING]		= playerAC->af->psi * RTD;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1168]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+16], xmm0

; 321  : 	//update our value
; 322  : 	if (playerAC->INSState(AircraftClass::INS_HSI_OFF_IN)){

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN3@ExecBeacon

; 323  : 		LastHSIHeading = mpHsiValues[HSI_VAL_CURRENT_HEADING];

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR [edx], ecx
$LN3@ExecBeacon:

; 324  : 	}
; 325  : 
; 326  : 	if(g_bRealisticAvionics && g_bINS && !playerAC->INSState(AircraftClass::INS_HSI_OFF_IN)){

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN2@ExecBeacon
	movzx	eax, BYTE PTR ?g_bINS@@3_NA		; g_bINS
	test	eax, eax
	je	SHORT $LN2@ExecBeacon
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	jne	SHORT $LN2@ExecBeacon

; 327  : 		mpHsiValues[HSI_VAL_CURRENT_HEADING]		= LastHSIHeading;

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx+16], eax
$LN2@ExecBeacon:

; 328  : 	}
; 329  : 
; 330  : 	if(mpHsiValues[HSI_VAL_CURRENT_HEADING] < 0.0F) {

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+ecx+16]
	jbe	SHORT $LN1@ExecBeacon

; 331  : 		mpHsiValues[HSI_VAL_CURRENT_HEADING] += 360.0F;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+16]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+16], xmm0
$LN1@ExecBeacon:
$LN8@ExecBeacon:

; 332  : 	}
; 333  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z ENDP		; CPHsi::ExecBeaconProximity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_tacanZ$ = -40						; size = 4
_gpDew$ = -36						; size = 4
_range$ = -32						; size = 4
_ownshipX$ = -28					; size = 4
_ownshipY$ = -24					; size = 4
_tacanX$ = -20						; size = 4
_tacanY$ = -16						; size = 4
tv159 = -12						; size = 4
tv147 = -8						; size = 4
_this$ = -4						; size = 4
?ExecILSTacan@CPHsi@@AAEXXZ PROC			; CPHsi::ExecILSTacan
; _this$ = ecx

; 472  : void CPHsi::ExecILSTacan(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 473  : 
; 474  : 	float							ownshipX;
; 475  : 	float							ownshipY;
; 476  : 	float							tacanX;
; 477  : 	float							tacanY, tacanZ;
; 478  : 	float							gpDew;
; 479  : 	float							range;
; 480  : 
; 481  : 	if(mpHsiFlags[HSI_FLAG_INIT] == FALSE) {

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+60], 0
	jne	SHORT $LN6@ExecILSTac

; 482  : 
; 483  : 		mpHsiValues[HSI_VAL_DEV_LIMIT]		= 10.0F;

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+edx+16], xmm0

; 484  : 		mpHsiValues[HSI_VAL_HALF_DEV_LIMIT]	= mpHsiValues[HSI_VAL_DEV_LIMIT] * 0.5F;

	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 485  : 		mpHsiFlags[HSI_FLAG_INIT]				= TRUE;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 486  : 		mpHsiFlags[HSI_FLAG_ILS_WARN]			= FALSE;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 0

; 487  : 		mpHsiFlags[HSI_FLAG_TO_TRUE]			= FALSE;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 0
$LN6@ExecILSTac:

; 488  : 	}
; 489  : 
; 490  : 	if(SimDriver.GetPlayerEntity()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN1@ExecILSTac

; 491  : 
; 492  : 		ownshipX = SimDriver.GetPlayerEntity()->XPos();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _ownshipX$[ebp]

; 493  : 		ownshipY = SimDriver.GetPlayerEntity()->YPos();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _ownshipY$[ebp]

; 494  : 
; 495  : 		mpHsiFlags[HSI_FLAG_CRS_WARN]	= !gNavigationSys->GetTCNPosition(&tacanX, &tacanY, &tacanZ);

	lea	edx, DWORD PTR _tacanZ$[ebp]
	push	edx
	lea	eax, DWORD PTR _tacanY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tacanX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetTCNPosition@NavigationSystem@@QAEHPAM00@Z ; NavigationSystem::GetTCNPosition
	test	eax, eax
	jne	SHORT $LN9@ExecILSTac
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN10@ExecILSTac
$LN9@ExecILSTac:
	mov	DWORD PTR tv147[ebp], 0
$LN10@ExecILSTac:
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR [eax+edx+60], ecx

; 496  : 		gNavigationSys->GetTCNAttribute(NavigationSystem::RANGE, &range);

	lea	edx, DWORD PTR _range$[ebp]
	push	edx
	push	7
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetTCNAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z ; NavigationSystem::GetTCNAttribute

; 497  : 
; 498  : 		mpHsiFlags[HSI_FLAG_ILS_WARN]	= !gNavigationSys->GetILSAttribute(NavigationSystem::GP_DEV, &gpDew);

	lea	eax, DWORD PTR _gpDew$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetILSAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z ; NavigationSystem::GetILSAttribute
	test	eax, eax
	jne	SHORT $LN11@ExecILSTac
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN12@ExecILSTac
$LN11@ExecILSTac:
	mov	DWORD PTR tv159[ebp], 0
$LN12@ExecILSTac:
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR [edx+ecx+60], eax

; 499  : 		ExecBeaconProximity(ownshipX, ownshipY, tacanX, tacanY);

	push	ecx
	movss	xmm0, DWORD PTR _tacanY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tacanX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ownshipY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ownshipX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z	; CPHsi::ExecBeaconProximity

; 500  : 		if (BeaconInRange(mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON], range)) {

	push	ecx
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeaconInRange@CPHsi@@AAEHMM@Z		; CPHsi::BeaconInRange
	test	eax, eax
	je	SHORT $LN4@ExecILSTac

; 501  : 			CalcILSCrsDev(gpDew);

	push	ecx
	movss	xmm0, DWORD PTR _gpDew$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcILSCrsDev@CPHsi@@AAEXM@Z		; CPHsi::CalcILSCrsDev

; 502  : 		}
; 503  : 		else {

	jmp	SHORT $LN3@ExecILSTac
$LN4@ExecILSTac:

; 504  : 			mpHsiFlags[HSI_FLAG_CRS_WARN] = TRUE;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 1

; 505  : 			mpHsiFlags[HSI_FLAG_ILS_WARN] = TRUE;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 506  : 			mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON] = 0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+16], xmm0
$LN3@ExecILSTac:

; 507  : 			// mpHsiValues[HSI_VAL_CRS_DEVIATION] = 0; // last value?
; 508  : 		}
; 509  : 		if (mpHsiValues[HSI_VAL_CRS_DEVIATION] < 270 && mpHsiValues[HSI_VAL_CRS_DEVIATION] > 90)

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43870000
	comiss	xmm0, DWORD PTR [ecx+eax+16]
	jbe	SHORT $LN2@ExecILSTac
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+16]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN2@ExecILSTac

; 510  : 			mpHsiFlags[HSI_FLAG_TO_TRUE] = 2;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 2

; 511  : 		else

	jmp	SHORT $LN1@ExecILSTac
$LN2@ExecILSTac:

; 512  : 			mpHsiFlags[HSI_FLAG_TO_TRUE] = TRUE;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 1
$LN1@ExecILSTac:

; 513  : 	}
; 514  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecILSTacan@CPHsi@@AAEXXZ ENDP			; CPHsi::ExecILSTacan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_ilsObj$ = -48						; size = 8
_waypointZ$ = -40					; size = 4
_gpDew$ = -36						; size = 4
_waypointX$ = -32					; size = 4
_waypointY$ = -28					; size = 4
_ownshipX$ = -24					; size = 4
_ownshipY$ = -20					; size = 4
tv175 = -16						; size = 4
_pcurrentWaypoint$ = -12				; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecILSNav@CPHsi@@AAEXXZ PROC				; CPHsi::ExecILSNav
; _this$ = ecx

; 247  : void CPHsi::ExecILSNav(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 248  : 	float						ownshipX;
; 249  : 	float						ownshipY;
; 250  : 	WayPointClass			*pcurrentWaypoint;
; 251  : 	float						waypointX;
; 252  : 	float						waypointY;
; 253  : 	float						waypointZ;
; 254  : 	float						gpDew;
; 255  : 	VU_ID						ilsObj;

	lea	ecx, DWORD PTR _ilsObj$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 256  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 257  : 
; 258  : 	if(mpHsiFlags[HSI_FLAG_INIT] == FALSE) {

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+60], 0
	jne	SHORT $LN6@ExecILSNav

; 259  : 
; 260  : 		mpHsiValues[HSI_VAL_DEV_LIMIT]		= 10.0F;

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+edx+16], xmm0

; 261  : 		mpHsiValues[HSI_VAL_HALF_DEV_LIMIT]	= mpHsiValues[HSI_VAL_DEV_LIMIT] * 0.5F;

	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 262  : 		mpHsiFlags[HSI_FLAG_INIT]				= TRUE;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 263  : 		mpHsiFlags[HSI_FLAG_TO_TRUE]			= FALSE;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 0
$LN6@ExecILSNav:

; 264  : 	}
; 265  : 
; 266  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN5@ExecILSNav

; 267  : 		return;

	jmp	$LN7@ExecILSNav
$LN5@ExecILSNav:

; 268  : 	}
; 269  : 
; 270  : 	pcurrentWaypoint	= playerAC->curWaypoint;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+728]
	mov	DWORD PTR _pcurrentWaypoint$[ebp], ecx

; 271  : 	ownshipX = playerAC->XPos();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _ownshipX$[ebp]

; 272  : 	ownshipY = playerAC->YPos();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _ownshipY$[ebp]

; 273  : 
; 274  : 	if(pcurrentWaypoint == NULL) {

	cmp	DWORD PTR _pcurrentWaypoint$[ebp], 0
	jne	SHORT $LN4@ExecILSNav

; 275  : 		mpHsiFlags[HSI_FLAG_CRS_WARN]			= TRUE;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 276  : 		ExecBeaconProximity(ownshipX,ownshipY, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ownshipY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ownshipX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z	; CPHsi::ExecBeaconProximity

; 277  : 	}
; 278  : 	else {

	jmp	$LN3@ExecILSNav
$LN4@ExecILSNav:

; 279  : 		pcurrentWaypoint->GetLocation(&waypointX, &waypointY, &waypointZ);

	lea	ecx, DWORD PTR _waypointZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _waypointY$[ebp]
	push	edx
	lea	eax, DWORD PTR _waypointX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcurrentWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 280  : 		ExecBeaconProximity(playerAC->XPos(), playerAC->YPos(), waypointX, waypointY);

	push	ecx
	movss	xmm0, DWORD PTR _waypointY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _waypointX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z	; CPHsi::ExecBeaconProximity

; 281  : 		mpHsiFlags[HSI_FLAG_ILS_WARN] = !gNavigationSys->GetILSAttribute(NavigationSystem::GP_DEV, &gpDew);

	lea	ecx, DWORD PTR _gpDew$[ebp]
	push	ecx
	push	4
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetILSAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z ; NavigationSystem::GetILSAttribute
	test	eax, eax
	jne	SHORT $LN9@ExecILSNav
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN10@ExecILSNav
$LN9@ExecILSNav:
	mov	DWORD PTR tv175[ebp], 0
$LN10@ExecILSNav:
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv175[ebp]
	mov	DWORD PTR [eax+edx+60], ecx

; 282  : 		CalcILSCrsDev(gpDew);

	push	ecx
	movss	xmm0, DWORD PTR _gpDew$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcILSCrsDev@CPHsi@@AAEXM@Z		; CPHsi::CalcILSCrsDev
$LN3@ExecILSNav:

; 283  : 	}
; 284  : 
; 285  : 	if (mpHsiValues[HSI_VAL_CRS_DEVIATION] < 270 && mpHsiValues[HSI_VAL_CRS_DEVIATION] > 90){

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43870000
	comiss	xmm0, DWORD PTR [eax+edx+16]
	jbe	SHORT $LN2@ExecILSNav
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN2@ExecILSNav

; 286  : 		mpHsiFlags[HSI_FLAG_TO_TRUE] = 2;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 2

; 287  : 	}
; 288  : 	else{

	jmp	SHORT $LN1@ExecILSNav
$LN2@ExecILSNav:

; 289  : 		mpHsiFlags[HSI_FLAG_TO_TRUE] = TRUE;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1
$LN1@ExecILSNav:
$LN7@ExecILSNav:

; 290  : 	}
; 291  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecILSNav@CPHsi@@AAEXXZ ENDP				; CPHsi::ExecILSNav
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_tacanZ$ = -32						; size = 4
_tacanRange$ = -28					; size = 4
_ownshipX$ = -24					; size = 4
_ownshipY$ = -20					; size = 4
_tacanX$ = -16						; size = 4
_tacanY$ = -12						; size = 4
tv147 = -8						; size = 4
_this$ = -4						; size = 4
?ExecTacan@CPHsi@@AAEXXZ PROC				; CPHsi::ExecTacan
; _this$ = ecx

; 197  : void CPHsi::ExecTacan(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 
; 199  : 	float							ownshipX;
; 200  : 	float							ownshipY;
; 201  : 	float							tacanX;
; 202  : 	float							tacanY, tacanZ;
; 203  : 	float							tacanRange;
; 204  : 
; 205  : 	if(mpHsiFlags[HSI_FLAG_INIT] == FALSE) {

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+60], 0
	jne	SHORT $LN9@ExecTacan

; 206  : 
; 207  : 		mpHsiValues[HSI_VAL_DEV_LIMIT]		= 10.0F;

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+edx+16], xmm0

; 208  : 		mpHsiValues[HSI_VAL_HALF_DEV_LIMIT]	= mpHsiValues[HSI_VAL_DEV_LIMIT] * 0.5F;

	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 209  : 		mpHsiFlags[HSI_FLAG_INIT]				= TRUE;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 210  : 		mpHsiFlags[HSI_FLAG_ILS_WARN]			= TRUE;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 1

; 211  : 		mpHsiFlags[HSI_FLAG_TO_TRUE]			= TRUE;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 1
$LN9@ExecTacan:

; 212  : 	}
; 213  : 
; 214  : 	if(SimDriver.GetPlayerEntity()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN1@ExecTacan

; 215  : 
; 216  : 		ownshipX = SimDriver.GetPlayerEntity()->XPos();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _ownshipX$[ebp]

; 217  : 		ownshipY = SimDriver.GetPlayerEntity()->YPos();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _ownshipY$[ebp]

; 218  : 
; 219  : 		mpHsiFlags[HSI_FLAG_CRS_WARN]	= !gNavigationSys->GetTCNPosition(&tacanX, &tacanY, &tacanZ);

	lea	edx, DWORD PTR _tacanZ$[ebp]
	push	edx
	lea	eax, DWORD PTR _tacanY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tacanX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetTCNPosition@NavigationSystem@@QAEHPAM00@Z ; NavigationSystem::GetTCNPosition
	test	eax, eax
	jne	SHORT $LN12@ExecTacan
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN13@ExecTacan
$LN12@ExecTacan:
	mov	DWORD PTR tv147[ebp], 0
$LN13@ExecTacan:
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR [eax+edx+60], ecx

; 220  : 		gNavigationSys->GetTCNAttribute(NavigationSystem::RANGE, &tacanRange);

	lea	edx, DWORD PTR _tacanRange$[ebp]
	push	edx
	push	7
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetTCNAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z ; NavigationSystem::GetTCNAttribute

; 221  : 
; 222  : 		if(gNavigationSys->IsTCNTanker() || gNavigationSys->IsTCNAirbase() || gNavigationSys->IsTCNCarrier()) {	// now Carrier support

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?IsTCNTanker@NavigationSystem@@QAEHXZ	; NavigationSystem::IsTCNTanker
	test	eax, eax
	jne	SHORT $LN6@ExecTacan
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?IsTCNAirbase@NavigationSystem@@QAEHXZ	; NavigationSystem::IsTCNAirbase
	test	eax, eax
	jne	SHORT $LN6@ExecTacan
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?IsTCNCarrier@NavigationSystem@@QAEHXZ	; NavigationSystem::IsTCNCarrier
	test	eax, eax
	je	SHORT $LN7@ExecTacan
$LN6@ExecTacan:

; 223  : 			mpHsiFlags[HSI_FLAG_ILS_WARN]			= FALSE;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 0

; 224  : 		}
; 225  : 		else {

	jmp	SHORT $LN5@ExecTacan
$LN7@ExecTacan:

; 226  : 			mpHsiFlags[HSI_FLAG_ILS_WARN]			= 	mpHsiFlags[HSI_FLAG_CRS_WARN];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx+60]
	mov	DWORD PTR [ecx+eax+60], edx
$LN5@ExecTacan:

; 227  : 		}
; 228  : 
; 229  : 		ExecBeaconProximity(ownshipX, ownshipY, tacanX, tacanY);

	push	ecx
	movss	xmm0, DWORD PTR _tacanY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tacanX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ownshipY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ownshipX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z	; CPHsi::ExecBeaconProximity

; 230  : 		if (BeaconInRange(mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON], tacanRange)) {

	push	ecx
	movss	xmm0, DWORD PTR _tacanRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeaconInRange@CPHsi@@AAEHMM@Z		; CPHsi::BeaconInRange
	test	eax, eax
	je	SHORT $LN4@ExecTacan

; 231  : 			CalcTCNCrsDev(mpHsiValues[HSI_VAL_DESIRED_CRS]);

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcTCNCrsDev@CPHsi@@AAEXM@Z		; CPHsi::CalcTCNCrsDev

; 232  : 		}
; 233  : 		else {

	jmp	SHORT $LN3@ExecTacan
$LN4@ExecTacan:

; 234  : 			mpHsiValues[HSI_VAL_BEARING_TO_BEACON]=90; // fix at 90 deg off

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR [edx+ecx+16], xmm0

; 235  : 			mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON] = 0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+16], xmm0

; 236  : 			mpHsiFlags[HSI_FLAG_ILS_WARN]			= TRUE;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 237  : 			mpHsiFlags[HSI_FLAG_CRS_WARN]			= TRUE;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 1
$LN3@ExecTacan:

; 238  : 		}
; 239  : 		if (mpHsiValues[HSI_VAL_CRS_DEVIATION] < 270 && mpHsiValues[HSI_VAL_CRS_DEVIATION] > 90)

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43870000
	comiss	xmm0, DWORD PTR [ecx+eax+16]
	jbe	SHORT $LN2@ExecTacan
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+16]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN2@ExecTacan

; 240  : 			mpHsiFlags[HSI_FLAG_TO_TRUE] = 2;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 2

; 241  : 		else

	jmp	SHORT $LN1@ExecTacan
$LN2@ExecTacan:

; 242  : 			mpHsiFlags[HSI_FLAG_TO_TRUE] = TRUE;	    

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 1
$LN1@ExecTacan:

; 243  : 	}
; 244  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ExecTacan@CPHsi@@AAEXXZ ENDP				; CPHsi::ExecTacan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_z$ = -24						; size = 4
_x$ = -20						; size = 4
_y$ = -16						; size = 4
_pcurrentWaypoint$ = -12				; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecNav@CPHsi@@AAEXXZ PROC				; CPHsi::ExecNav
; _this$ = ecx

; 152  : void CPHsi::ExecNav(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 
; 154  : 	float				x;
; 155  : 	float				y; 
; 156  : 	float				z;
; 157  : 	WayPointClass	*pcurrentWaypoint;
; 158  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 159  : 
; 160  : 	if(mpHsiFlags[HSI_FLAG_INIT] == FALSE) {

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+60], 0
	jne	SHORT $LN6@ExecNav

; 161  : 
; 162  : 		mpHsiValues[HSI_VAL_DEV_LIMIT]		= 10.0F;

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+edx+16], xmm0

; 163  : 		mpHsiValues[HSI_VAL_HALF_DEV_LIMIT]	= mpHsiValues[HSI_VAL_DEV_LIMIT] * 0.5F;

	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 164  : 		mpHsiFlags[HSI_FLAG_INIT]				= TRUE;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 1

; 165  : 		mpHsiFlags[HSI_FLAG_TO_TRUE]			= FALSE;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 0
$LN6@ExecNav:

; 166  : 	}
; 167  : 
; 168  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN5@ExecNav

; 169  : 		return;

	jmp	$LN7@ExecNav
$LN5@ExecNav:

; 170  : 	}
; 171  : 
; 172  : 	pcurrentWaypoint	= playerAC->curWaypoint;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+728]
	mov	DWORD PTR _pcurrentWaypoint$[ebp], ecx

; 173  : 	// sfr TODO remove jb hack
; 174  : 	if(F4IsBadReadPtr(pcurrentWaypoint, sizeof *pcurrentWaypoint)) { // JPO CTD check

	push	60					; 0000003cH
	mov	edx, DWORD PTR _pcurrentWaypoint$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@ExecNav

; 175  : 		mpHsiFlags[HSI_FLAG_CRS_WARN]			= TRUE;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 1

; 176  : 		ExecBeaconProximity(SimDriver.GetPlayerEntity()->XPos(), playerAC->YPos(), 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z	; CPHsi::ExecBeaconProximity

; 177  : 		CalcTCNCrsDev(mpHsiValues[HSI_VAL_DESIRED_CRS]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcTCNCrsDev@CPHsi@@AAEXM@Z		; CPHsi::CalcTCNCrsDev

; 178  : 	}
; 179  : 	else {

	jmp	SHORT $LN3@ExecNav
$LN4@ExecNav:

; 180  : 		mpHsiFlags[HSI_FLAG_CRS_WARN]			= FALSE;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 0

; 181  : 		pcurrentWaypoint->GetLocation(&x, &y, &z);

	lea	ecx, DWORD PTR _z$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcurrentWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 182  : 		ExecBeaconProximity(playerAC->XPos(), playerAC->YPos(), x, y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBeaconProximity@CPHsi@@AAEXMMMM@Z	; CPHsi::ExecBeaconProximity

; 183  : 		CalcTCNCrsDev(mpHsiValues[HSI_VAL_DESIRED_CRS]);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcTCNCrsDev@CPHsi@@AAEXM@Z		; CPHsi::CalcTCNCrsDev
$LN3@ExecNav:

; 184  : 	}
; 185  : 
; 186  : 	if (mpHsiValues[HSI_VAL_CRS_DEVIATION] < 270 && mpHsiValues[HSI_VAL_CRS_DEVIATION] > 90){

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43870000
	comiss	xmm0, DWORD PTR [ecx+eax+16]
	jbe	SHORT $LN2@ExecNav
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+16]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN2@ExecNav

; 187  : 		mpHsiFlags[HSI_FLAG_TO_TRUE] = 2;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 2

; 188  : 	}
; 189  : 	else{

	jmp	SHORT $LN1@ExecNav
$LN2@ExecNav:

; 190  : 		mpHsiFlags[HSI_FLAG_TO_TRUE] = TRUE;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 1
$LN1@ExecNav:
$LN7@ExecNav:

; 191  : 	}
; 192  : 
; 193  : 
; 194  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecNav@CPHsi@@AAEXXZ ENDP				; CPHsi::ExecNav
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flagIndex$ = 8						; size = 4
?GetFlag@CPHsi@@QAEHW4HSIFlags@1@@Z PROC		; CPHsi::GetFlag
; _this$ = ecx

; 88   : BOOL CPHsi::GetFlag(HSIFlags flagIndex) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 
; 90   : 	return mpHsiFlags[flagIndex];

	mov	eax, DWORD PTR _flagIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+60]

; 91   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFlag@CPHsi@@QAEHW4HSIFlags@1@@Z ENDP		; CPHsi::GetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_valueIndex$ = 8					; size = 4
?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z PROC		; CPHsi::GetValue
; _this$ = ecx

; 82   : float CPHsi::GetValue(HSIValues valueIndex) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 
; 84   : 	return mpHsiValues[valueIndex];

	mov	eax, DWORD PTR _valueIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax*4+16]

; 85   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z ENDP		; CPHsi::GetValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stateIndex$ = 8					; size = 4
?GetState@CPHsi@@QAEHW4HSIButtonStates@1@@Z PROC	; CPHsi::GetState
; _this$ = ecx

; 76   : int CPHsi::GetState(HSIButtonStates stateIndex) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 
; 78   : 	return mpHsiStates[stateIndex];

	mov	eax, DWORD PTR _stateIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]

; 79   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetState@CPHsi@@QAEHW4HSIButtonStates@1@@Z ENDP	; CPHsi::GetState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_normalState$ = -12					; size = 4
_valueIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
_step$ = 12						; size = 4
?DecState@CPHsi@@QAEXW4HSIButtonStates@1@M@Z PROC	; CPHsi::DecState
; _this$ = ecx

; 123  : void CPHsi::DecState(HSIButtonStates state, float step) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 
; 125  : 	HSIValues	valueIndex;
; 126  : 	int			normalState;
; 127  : 
; 128  : 	if(state == HSI_STA_CRS_STATE) {

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN5@DecState

; 129  : 		valueIndex	= HSI_VAL_DESIRED_CRS;

	mov	DWORD PTR _valueIndex$[ebp], 1

; 130  : 		normalState = NORMAL_HSI_CRS_STATE;

	mov	DWORD PTR _normalState$[ebp], 7

; 131  : 	}
; 132  : 	else {

	jmp	SHORT $LN4@DecState
$LN5@DecState:

; 133  : 		valueIndex	= HSI_VAL_DESIRED_HEADING;

	mov	DWORD PTR _valueIndex$[ebp], 5

; 134  : 		normalState = NORMAL_HSI_HDG_STATE;

	mov	DWORD PTR _normalState$[ebp], 7
$LN4@DecState:

; 135  : 	}
; 136  : 
; 137  : 	mpHsiValues[valueIndex] -= step;  // MD -- 20040118: default 5 degrees

	mov	eax, DWORD PTR _valueIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+16]
	subss	xmm0, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR _valueIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx*4+16], xmm0

; 138  : 
; 139  : 	if(mpHsiValues[valueIndex] < 0.0F) {

	mov	ecx, DWORD PTR _valueIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+ecx*4+16]
	jbe	SHORT $LN3@DecState

; 140  : 		mpHsiValues[valueIndex] = 360.0F;

	mov	eax, DWORD PTR _valueIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR [ecx+eax*4+16], xmm0
$LN3@DecState:

; 141  : 	}
; 142  : 
; 143  : 	if(mpHsiStates[state] == 0) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+8], 0
	jne	SHORT $LN2@DecState

; 144  : 		mpHsiStates[state] = normalState;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _normalState$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax

; 145  : 	}
; 146  : 	else {

	jmp	SHORT $LN1@DecState
$LN2@DecState:

; 147  : 		mpHsiStates[state]--;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax
$LN1@DecState:

; 148  : 	}
; 149  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DecState@CPHsi@@QAEXW4HSIButtonStates@1@M@Z ENDP	; CPHsi::DecState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_normalState$ = -12					; size = 4
_valueIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_state$ = 8						; size = 4
_step$ = 12						; size = 4
?IncState@CPHsi@@QAEXW4HSIButtonStates@1@M@Z PROC	; CPHsi::IncState
; _this$ = ecx

; 94   : void CPHsi::IncState(HSIButtonStates state, float step) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 
; 96   : 	HSIValues	valueIndex;
; 97   : 	int			normalState;
; 98   : 
; 99   : 	if(state == HSI_STA_CRS_STATE) {

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN5@IncState

; 100  : 		valueIndex	= HSI_VAL_DESIRED_CRS;

	mov	DWORD PTR _valueIndex$[ebp], 1

; 101  : 		normalState = NORMAL_HSI_CRS_STATE;

	mov	DWORD PTR _normalState$[ebp], 7

; 102  : 	}
; 103  : 	else {

	jmp	SHORT $LN4@IncState
$LN5@IncState:

; 104  : 		valueIndex	= HSI_VAL_DESIRED_HEADING;

	mov	DWORD PTR _valueIndex$[ebp], 5

; 105  : 		normalState = NORMAL_HSI_HDG_STATE;

	mov	DWORD PTR _normalState$[ebp], 7
$LN4@IncState:

; 106  : 	}
; 107  : 
; 108  : 	mpHsiValues[valueIndex] += step;  // MD -- 20040118: default 5 degrees

	mov	eax, DWORD PTR _valueIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+16]
	addss	xmm0, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR _valueIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx*4+16], xmm0

; 109  : 
; 110  : 	if(mpHsiValues[valueIndex] >= 360.0F) {

	mov	ecx, DWORD PTR _valueIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+16]
	comiss	xmm0, DWORD PTR __real@43b40000
	jb	SHORT $LN3@IncState

; 111  : 		mpHsiValues[valueIndex] = 0.0F;

	mov	eax, DWORD PTR _valueIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax*4+16], xmm0
$LN3@IncState:

; 112  : 	}
; 113  : 
; 114  : 	if(mpHsiStates[state] == normalState) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+8]
	cmp	ecx, DWORD PTR _normalState$[ebp]
	jne	SHORT $LN2@IncState

; 115  : 		mpHsiStates[state] = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+8], 0

; 116  : 	}
; 117  : 	else {

	jmp	SHORT $LN1@IncState
$LN2@IncState:

; 118  : 		mpHsiStates[state]++;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax
$LN1@IncState:

; 119  : 	}
; 120  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IncState@CPHsi@@QAEXW4HSIButtonStates@1@M@Z ENDP	; CPHsi::IncState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
tv83 = -16						; size = 4
_mode$ = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?Exec@CPHsi@@QAEXXZ PROC				; CPHsi::Exec
; _this$ = ecx

; 419  : void CPHsi::Exec(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 420  : 
; 421  : 	NavigationSystem::Instrument_Mode	mode;
; 422  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 423  : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN12@Exec

; 424  : 		return;

	jmp	$LN13@Exec
$LN12@Exec:

; 425  : 	}
; 426  : 
; 427  : 	// Check for HSI Failure
; 428  : 	if (playerAC->mFaults && playerAC->mFaults->GetFault(FaultClass::tcn_fault)){

	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+928], 0
	je	SHORT $LN11@Exec
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN11@Exec

; 429  : 		return;

	jmp	SHORT $LN13@Exec
$LN11@Exec:

; 430  : 	}
; 431  : 
; 432  : 	if (gNavigationSys)

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN10@Exec

; 433  : 	{
; 434  : 		mode = gNavigationSys->GetInstrumentMode();

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ ; NavigationSystem::GetInstrumentMode
	mov	DWORD PTR _mode$[ebp], eax

; 435  : 	}
; 436  : 	else

	jmp	SHORT $LN9@Exec
$LN10@Exec:

; 437  : 	{
; 438  : 		return;

	jmp	SHORT $LN13@Exec
$LN9@Exec:

; 439  : 	}
; 440  : 
; 441  : 	if(mode != mLastMode) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mode$[ebp]
	cmp	eax, DWORD PTR [edx+76]
	je	SHORT $LN8@Exec

; 442  : 		mpHsiFlags[HSI_FLAG_INIT] = FALSE;

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 0
$LN8@Exec:

; 443  : 	}
; 444  : 
; 445  : 	mLastMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 446  : 
; 447  : 	switch(mode) {

	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv83[ebp], edx
	cmp	DWORD PTR tv83[ebp], 3
	ja	SHORT $LN13@Exec
	mov	eax, DWORD PTR tv83[ebp]
	jmp	DWORD PTR $LN15@Exec[eax*4]
$LN5@Exec:

; 448  : 
; 449  : 		case NavigationSystem::NAV:
; 450  : 			ExecNav();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecNav@CPHsi@@AAEXXZ			; CPHsi::ExecNav

; 451  : 			break;

	jmp	SHORT $LN13@Exec
$LN4@Exec:

; 452  : 
; 453  : 		case NavigationSystem::ILS_NAV:
; 454  : 			ExecILSNav();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILSNav@CPHsi@@AAEXXZ		; CPHsi::ExecILSNav

; 455  : 			break;

	jmp	SHORT $LN13@Exec
$LN3@Exec:

; 456  : 
; 457  : 		case NavigationSystem::TACAN:
; 458  : 			ExecTacan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecTacan@CPHsi@@AAEXXZ		; CPHsi::ExecTacan

; 459  : 			break;

	jmp	SHORT $LN13@Exec
$LN2@Exec:

; 460  : 
; 461  : 		case NavigationSystem::ILS_TACAN:
; 462  : 			ExecILSTacan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILSTacan@CPHsi@@AAEXXZ		; CPHsi::ExecILSTacan
$LN13@Exec:

; 463  : 			break;
; 464  : 
; 465  : 		default:
; 466  : 			break;
; 467  : 
; 468  : 	}
; 469  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@Exec:
	DD	$LN5@Exec
	DD	$LN4@Exec
	DD	$LN2@Exec
	DD	$LN3@Exec
?Exec@CPHsi@@QAEXXZ ENDP				; CPHsi::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cphsi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPHsi@@QAE@XZ PROC					; CPHsi::CPHsi
; _this$ = ecx

; 31   : CPHsi::CPHsi() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 
; 33   : 	mpHsiStates[HSI_STA_CRS_STATE]				= NORMAL_HSI_CRS_STATE;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+8], 7

; 34   : 	mpHsiStates[HSI_STA_HDG_STATE]				= NORMAL_HSI_HDG_STATE;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+8], 7

; 35   : 
; 36   : 	mpHsiFlags[HSI_FLAG_TO_TRUE]					= FALSE;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 0

; 37   : 	mpHsiFlags[HSI_FLAG_ILS_WARN]					= FALSE;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+60], 0

; 38   : 	mpHsiFlags[HSI_FLAG_CRS_WARN]					= FALSE;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+60], 0

; 39   : 	mpHsiFlags[HSI_FLAG_INIT]						= FALSE;

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+60], 0

; 40   : 	lastCheck = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 41   : 	lastResult = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 0

; 42   : 
; 43   : 	///VWF HACK: The following is a hack to make the Tac Eng Instrument
; 44   : 	// Landing Mission agree with the Manual
; 45   : 
; 46   : 	if(SimDriver.RunningTactical() && 
; 47   : 			current_tactical_mission &&
; 48   : 			current_tactical_mission->get_type() == tt_training &&
; 49   : 			SimDriver.GetPlayerEntity() &&
; 50   : 			!strcmpi(current_tactical_mission->get_title(), "10 Instrument Landing"))

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RunningTactical@SimulationDriver@@QBE_NXZ ; SimulationDriver::RunningTactical
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CPHsi
	cmp	DWORD PTR ?current_tactical_mission@@3PAVtactical_mission@@A, 0 ; current_tactical_mission
	je	SHORT $LN2@CPHsi
	mov	ecx, DWORD PTR ?current_tactical_mission@@3PAVtactical_mission@@A ; current_tactical_mission
	call	?get_type@tactical_mission@@QAE?AW4tactical_type@@XZ ; tactical_mission::get_type
	cmp	eax, 3
	jne	SHORT $LN2@CPHsi
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN2@CPHsi
	push	OFFSET ??_C@_0BG@JDDPNFOC@10?5Instrument?5Landing?$AA@
	mov	ecx, DWORD PTR ?current_tactical_mission@@3PAVtactical_mission@@A ; current_tactical_mission
	call	?get_title@tactical_mission@@QAEPADXZ	; tactical_mission::get_title
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@CPHsi

; 51   : 	{
; 52   : 		mpHsiValues[HSI_VAL_DESIRED_CRS]			= 340.0F;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43aa0000
	movss	DWORD PTR [ecx+eax+16], xmm0

; 53   : 	}
; 54   : 	else {

	jmp	SHORT $LN1@CPHsi
$LN2@CPHsi:

; 55   : 		mpHsiValues[HSI_VAL_DESIRED_CRS]			= 0.0F;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+16], xmm0
$LN1@CPHsi:

; 56   : 	}
; 57   : 	mpHsiValues[HSI_VAL_CRS_DEVIATION]			= 0.0F;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+16], xmm0

; 58   : 	mpHsiValues[HSI_VAL_DISTANCE_TO_BEACON]	= 0.0F;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+16], xmm0

; 59   : 	mpHsiValues[HSI_VAL_BEARING_TO_BEACON]		= 0.0F;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+16], xmm0

; 60   : 	mpHsiValues[HSI_VAL_CURRENT_HEADING]		= 0.0;

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+16], xmm0

; 61   : 	mpHsiValues[HSI_VAL_DESIRED_HEADING]		= 0.0F;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+16], xmm0

; 62   : 	mpHsiValues[HSI_VAL_DEV_LIMIT]				= 10.0F;

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+edx+16], xmm0

; 63   : 	mpHsiValues[HSI_VAL_HALF_DEV_LIMIT]			= mpHsiValues[HSI_VAL_DEV_LIMIT] * 0.5F;

	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+16]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+16], xmm0

; 64   : 	mpHsiValues[HSI_VAL_LOCALIZER_CRS]			= 0.0F;

	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+16], xmm0

; 65   : 	mpHsiValues[HSI_VAL_AIRBASE_X]				= 0.0F;

	mov	ecx, 4
	imul	ecx, 9
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+16], xmm0

; 66   : 	mpHsiValues[HSI_VAL_AIRBASE_Y]				= 0.0F;

	mov	eax, 4
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+16], xmm0

; 67   : 
; 68   : 	mLastWaypoint										= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0

; 69   : 	mLastMode											= NavigationSystem::TOTAL_MODES;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 4

; 70   : 
; 71   : 	//MI 02/02/02
; 72   : 	LastHSIHeading = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0

; 73   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPHsi@@QAE@XZ ENDP					; CPHsi::CPHsi
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpobject.h
;	COMDAT ?Translate@CPObject@@UAEXPAK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Translate@CPObject@@UAEXPAK@Z PROC			; CPObject::Translate, COMDAT
; _this$ = ecx

; 112  : 	virtual void	Translate(DWORD*) {};		// OW added for 32 Bit rendering

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@CPObject@@UAEXPAK@Z ENDP			; CPObject::Translate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpobject.h
;	COMDAT ?Translate@CPObject@@UAEXPAG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Translate@CPObject@@UAEXPAG@Z PROC			; CPObject::Translate, COMDAT
; _this$ = ecx

; 111  : 	virtual void	Translate(WORD*) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@CPObject@@UAEXPAG@Z ENDP			; CPObject::Translate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpobject.h
;	COMDAT ?HandleEvent@CPObject@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HandleEvent@CPObject@@UAEXXZ PROC			; CPObject::HandleEvent, COMDAT
; _this$ = ecx

; 107  : 	virtual void	HandleEvent(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?HandleEvent@CPObject@@UAEXXZ ENDP			; CPObject::HandleEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ PROC	; DisplayDevice::GetDefaultRC, COMDAT
; _this$ = ecx

; 29   : 	DXContext *GetDefaultRC( void )			{ return m_DXCtx; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ENDP	; DisplayDevice::GetDefaultRC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?RunningTactical@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv80 = -8						; size = 4
tv76 = -4						; size = 4
?RunningTactical@SimulationDriver@@QBE_NXZ PROC		; SimulationDriver::RunningTactical, COMDAT
; _this$ = ecx

; 57   : 	bool RunningTactical() const             { return FalconLocalGame->GetGameType() == game_TacticalEngagement; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@RunningTac
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@RunningTac
$LN3@RunningTac:
	mov	DWORD PTR tv76[ebp], 0
$LN4@RunningTac:
	mov	ecx, DWORD PTR tv76[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 3
	jne	SHORT $LN5@RunningTac
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN6@RunningTac
$LN5@RunningTac:
	mov	DWORD PTR tv80[ebp], 0
$LN6@RunningTac:
	mov	al, BYTE PTR tv80[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?RunningTactical@SimulationDriver@@QBE_NXZ ENDP		; SimulationDriver::RunningTactical
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z PROC	; AircraftClass::INSState, COMDAT
; _this$ = ecx

; 211  : 	int INSState(INSAlignFlags fl) { return (INSFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@INSState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@INSState
$LN3@INSState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@INSState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ENDP	; AircraftClass::INSState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glReleaseMemory@@YAXPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_memptr$ = 8						; size = 4
?glReleaseMemory@@YAXPAX@Z PROC				; glReleaseMemory, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   : #ifdef USE_SH_POOLS
; 34   : 	if (memptr)
; 35   : 	{
; 36   : 		MemFreePtr( memptr );
; 37   : 	}
; 38   : #else
; 39   : 	if (memptr)

	cmp	DWORD PTR _memptr$[ebp], 0
	je	SHORT $LN2@glReleaseM

; 40   : 	{
; 41   : 		delete[] memptr;

	mov	eax, DWORD PTR _memptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@glReleaseM:

; 42   : 	}
; 43   : #endif
; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glReleaseMemory@@YAXPAX@Z ENDP				; glReleaseMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::ZeroRotationAboutOrigin, COMDAT
; _this$ = ecx

; 144  :     void ZeroRotationAboutOrigin( void ) { dmatrix.rotation01 = dmatrix.rotation10 = 0.0f, dmatrix.rotation00 = dmatrix.rotation11 = 1.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+80], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+76], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::ZeroRotationAboutOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ PROC ; ImageBuffer::GetDisplayDevice, COMDAT
; _this$ = ecx

; 41   : 	DisplayDevice *GetDisplayDevice()	{ return device; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ENDP ; ImageBuffer::GetDisplayDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ; std::addressof<TextureHandle * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ; std::addressof<TextureHandle * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ; std::allocator<TextureHandle *>::allocator<TextureHandle *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z PROC ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ ; std::allocator<TextureHandle *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z ENDP ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ PROC ; std::allocator<TextureHandle *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ ENDP ; std::allocator<TextureHandle *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z PROC ; std::allocator<TextureHandle *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z ENDP ; std::allocator<TextureHandle *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z PROC ; std::allocator<TextureHandle *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z ; std::_Allocate<TextureHandle *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z ENDP ; std::allocator<TextureHandle *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z PROC ; std::allocator<TextureHandle *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ENDP ; std::allocator<TextureHandle *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ PROC	; std::allocator<TextureHandle *>::allocator<TextureHandle *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ENDP	; std::allocator<TextureHandle *>::allocator<TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAltitude@FalconEntity@@QBEHXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?GetAltitude@FalconEntity@@QBEHXZ PROC			; FalconEntity::GetAltitude, COMDAT
; _this$ = ecx

; 169  : 	int GetAltitude() const						{ return FloatToInt32(ZPos() * -1.0F); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv76[ebp]
	movss	xmm0, DWORD PTR tv76[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAltitude@FalconEntity@@QBEHXZ ENDP			; FalconEntity::GetAltitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 39   : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 519  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?ceil@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?ceil@@YAMM@Z PROC					; ceil, COMDAT

; 509  :         {return (ceilf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_ceilf
	add	esp, 4
	pop	ebp
	ret	0
?ceil@@YAMM@Z ENDP					; ceil
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 408  :         {return ((float)ceil((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_ceil
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_ceilf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_com_error@@UAEPAXI@Z PROC				; _com_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_com_error@@UAEPAXI@Z ENDP				; _com_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_hr$ = 8						; size = 4
?HRESULTToWCode@_com_error@@SAGJ@Z PROC			; _com_error::HRESULTToWCode, COMDAT

; 419  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 420  :     return (hr >= WCODE_HRESULT_FIRST && hr <= WCODE_HRESULT_LAST)
; 421  :         ? WORD(hr - WCODE_HRESULT_FIRST)
; 422  :         : 0;

	cmp	DWORD PTR _hr$[ebp], -2147220992	; 80040200H
	jl	SHORT $LN3@HRESULTToW
	cmp	DWORD PTR _hr$[ebp], -2147155969	; 8004ffffH
	jg	SHORT $LN3@HRESULTToW
	mov	eax, DWORD PTR _hr$[ebp]
	add	eax, 2147220992				; 7ffbfe00H
	movzx	ecx, ax
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@HRESULTToW
$LN3@HRESULTToW:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HRESULTToW:
	mov	ax, WORD PTR tv69[ebp]

; 423  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HRESULTToWCode@_com_error@@SAGJ@Z ENDP			; _com_error::HRESULTToWCode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?ErrorMessage@_com_error@@QBEPBDXZ
_TEXT	SEGMENT
_nLen$1 = -12						; size = 4
_this$ = -8						; size = 4
_wCode$2 = -4						; size = 2
?ErrorMessage@_com_error@@QBEPBDXZ PROC			; _com_error::ErrorMessage, COMDAT
; _this$ = ecx

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 378  :     if (m_pszMsg == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$LN8@ErrorMessa

; 379  :         FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER|
; 380  :                           FORMAT_MESSAGE_FROM_SYSTEM|
; 381  :                           FORMAT_MESSAGE_IGNORE_INSERTS,
; 382  :                       NULL,
; 383  :                       m_hresult,
; 384  :                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
; 385  :                       (LPTSTR)&m_pszMsg,
; 386  :                       0,
; 387  :                       NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	1024					; 00000400H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28

; 388  :         if (m_pszMsg != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN7@ErrorMessa

; 389  :             int nLen = lstrlen(m_pszMsg);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	mov	DWORD PTR _nLen$1[ebp], eax

; 390  :             if (nLen > 1 && m_pszMsg[nLen - 1] == '\n') {

	cmp	DWORD PTR _nLen$1[ebp], 1
	jle	SHORT $LN6@ErrorMessa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nLen$1[ebp]
	movsx	ecx, BYTE PTR [edx+eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN6@ErrorMessa

; 391  :                 m_pszMsg[nLen - 1] = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _nLen$1[ebp]
	mov	BYTE PTR [eax+ecx-1], 0

; 392  :                 if (m_pszMsg[nLen - 2] == '\r') {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _nLen$1[ebp]
	movsx	edx, BYTE PTR [eax+ecx-2]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN6@ErrorMessa

; 393  :                         m_pszMsg[nLen - 2] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _nLen$1[ebp]
	mov	BYTE PTR [ecx+edx-2], 0
$LN6@ErrorMessa:

; 394  :                 }
; 395  :             }
; 396  :         } 
; 397  :         else {

	jmp	SHORT $LN8@ErrorMessa
$LN7@ErrorMessa:

; 398  :             m_pszMsg = (LPTSTR)LocalAlloc(0, 32 * sizeof(TCHAR));

	push	32					; 00000020H
	push	0
	call	DWORD PTR __imp__LocalAlloc@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 399  :             if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN8@ErrorMessa

; 400  :                 WORD wCode = WCode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WCode@_com_error@@QBEGXZ		; _com_error::WCode
	mov	WORD PTR _wCode$2[ebp], ax

; 401  :                 if (wCode != 0) {

	movzx	eax, WORD PTR _wCode$2[ebp]
	test	eax, eax
	je	SHORT $LN2@ErrorMessa

; 402  :                     _COM_PRINTF_S_1(m_pszMsg, 32, TEXT("IDispatch error #%d"), (int)wCode);

	movzx	ecx, WORD PTR _wCode$2[ebp]
	push	ecx
	push	OFFSET ??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_sprintf_s
	add	esp, 16					; 00000010H

; 403  :                 } 
; 404  :                 else {

	jmp	SHORT $LN8@ErrorMessa
$LN2@ErrorMessa:

; 405  :                     _COM_PRINTF_S_1(m_pszMsg, 32, TEXT("Unknown error 0x%0lX"), m_hresult);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_sprintf_s
	add	esp, 16					; 00000010H
$LN8@ErrorMessa:

; 406  :                 }
; 407  :             }
; 408  :         }
; 409  :     }
; 410  :     return m_pszMsg;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]

; 411  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorMessage@_com_error@@QBEPBDXZ ENDP			; _com_error::ErrorMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WCode@_com_error@@QBEGXZ PROC				; _com_error::WCode, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 319  :     return HRESULTToWCode(m_hresult);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?HRESULTToWCode@_com_error@@SAGJ@Z	; _com_error::HRESULTToWCode
	add	esp, 4

; 320  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WCode@_com_error@@QBEGXZ ENDP				; _com_error::WCode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC				; _com_error::Error, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_com_error@@UAE@XZ PROC				; _com_error::~_com_error, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@

; 295  :     if (m_perrinfo != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@com_error

; 296  :         m_perrinfo->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN2@com_error:

; 297  :     }
; 298  :     if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@com_error

; 299  :         LocalFree((HLOCAL)m_pszMsg);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
$LN3@com_error:

; 300  :     }
; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_com_error@@UAE@XZ ENDP				; _com_error::~_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0_com_error@@QAE@ABV0@@Z PROC				; _com_error::_com_error, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 288  :     if (m_perrinfo != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@com_error

; 289  :         m_perrinfo->AddRef();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
$LN2@com_error:

; 290  :     }
; 291  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_com_error@@QAE@ABV0@@Z ENDP				; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_perrinfo$ = 12						; size = 4
_fAddRef$ = 16						; size = 1
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z PROC		; _com_error::_com_error, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _perrinfo$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 280  :     if (m_perrinfo != NULL && fAddRef) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@com_error
	movzx	ecx, BYTE PTR _fAddRef$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@com_error

; 281  :         m_perrinfo->AddRef();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
$LN2@com_error:

; 282  :     }
; 283  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z ENDP		; _com_error::_com_error
_TEXT	ENDS
END
