; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Cockpit\cpadi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
PUBLIC	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z		; _com_error::_com_error
PUBLIC	??0_com_error@@QAE@ABV0@@Z			; _com_error::_com_error
PUBLIC	??1_com_error@@UAE@XZ				; _com_error::~_com_error
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	?WCode@_com_error@@QBEGXZ			; _com_error::WCode
PUBLIC	?ErrorMessage@_com_error@@QBEPBDXZ		; _com_error::ErrorMessage
PUBLIC	?HRESULTToWCode@_com_error@@SAGJ@Z		; _com_error::HRESULTToWCode
PUBLIC	??_G_com_error@@UAEPAXI@Z			; _com_error::`scalar deleting destructor'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ	; std::allocator<TextureHandle *>::allocator<TextureHandle *>
PUBLIC	?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::deallocate
PUBLIC	?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::allocate
PUBLIC	?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z ; std::allocator<TextureHandle *>::construct
PUBLIC	?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ ; std::allocator<TextureHandle *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
PUBLIC	?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
PUBLIC	?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
PUBLIC	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
PUBLIC	?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back
PUBLIC	?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
PUBLIC	?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range
PUBLIC	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?glReleaseMemory@@YAXPAX@Z			; glReleaseMemory
PUBLIC	?IsHardware@DisplayDevice@@QAEHXZ		; DisplayDevice::IsHardware
PUBLIC	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
PUBLIC	?HandleEvent@CPObject@@UAEXXZ			; CPObject::HandleEvent
PUBLIC	?SetDirtyFlag@CPObject@@QAEXXZ			; CPObject::SetDirtyFlag
PUBLIC	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
PUBLIC	?Exec@CPAdi@@UAEXPAVSimBaseClass@@@Z		; CPAdi::Exec
PUBLIC	?ExecILS@CPAdi@@QAEXXZ				; CPAdi::ExecILS
PUBLIC	?ExecILSNone@CPAdi@@QAEXXZ			; CPAdi::ExecILSNone
PUBLIC	?DisplayBlit@CPAdi@@UAEXXZ			; CPAdi::DisplayBlit
PUBLIC	?DisplayDraw@CPAdi@@UAEXXZ			; CPAdi::DisplayDraw
PUBLIC	?CreateLit@CPAdi@@UAEXXZ			; CPAdi::CreateLit
PUBLIC	?DiscardLit@CPAdi@@UAEXXZ			; CPAdi::DiscardLit
PUBLIC	?Translate@CPAdi@@UAEXPAG@Z			; CPAdi::Translate
PUBLIC	?Translate@CPAdi@@UAEXPAK@Z			; CPAdi::Translate
PUBLIC	?DisplayBlit3D@CPAdi@@UAEXXZ			; CPAdi::DisplayBlit3D
PUBLIC	??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z ; CPAdi::CPAdi
PUBLIC	??1CPAdi@@UAE@XZ				; CPAdi::~CPAdi
PUBLIC	??_GCPAdi@@UAEPAXI@Z				; CPAdi::`scalar deleting destructor'
PUBLIC	?RenderADIPoly@@YAXPAUtagRECT@@00HPAVTextureHandle@@M@Z ; RenderADIPoly
PUBLIC	??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ; std::addressof<TextureHandle * const>
PUBLIC	??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
PUBLIC	??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z ; std::_Allocate<TextureHandle *>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
PUBLIC	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
PUBLIC	??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ; std::forward<TextureHandle * const &>
PUBLIC	??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z ; std::_Val_type<TextureHandle * *>
PUBLIC	??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>
PUBLIC	??_7_com_error@@6B@				; _com_error::`vftable'
PUBLIC	??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@ ; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	__TI1?AV_com_error@@
PUBLIC	__CTA1?AV_com_error@@
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
PUBLIC	??_7CPAdi@@6B@					; CPAdi::`vftable'
PUBLIC	??_C@_05CHKLGFBP@CPAdi?$AA@			; `string'
PUBLIC	??_C@_0CI@ODLLGOC@CPAdi?3?3CreateAdiView?5?9?5Error?50x?$CF@ ; `string'
PUBLIC	??_C@_0CE@NLAOHLOG@CPAdi?3?3CreateLit?5?9?5Error?50x?$CFX?5?$CI?$CF@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4_com_error@@6B@				; _com_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_com_error@@8				; _com_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_com_error@@8				; _com_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_com_error@@8			; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPAdi@@6B@					; CPAdi::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPAdi@@@8				; CPAdi `RTTI Type Descriptor'
PUBLIC	??_R3CPAdi@@8					; CPAdi::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPAdi@@8					; CPAdi::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPAdi@@8				; CPAdi::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CPObject@@8			; CPObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCPObject@@@8				; CPObject `RTTI Type Descriptor'
PUBLIC	??_R3CPObject@@8				; CPObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPObject@@8				; CPObject::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d0efa34
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e32b8c1
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3edf66f1
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fc8d6a8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@bc8efa34
PUBLIC	__real@bd0efa34
PUBLIC	__real@bd56774e
PUBLIC	__real@bdb2b8c1
PUBLIC	__real@be32b8c1
PUBLIC	__real@be860a91
PUBLIC	__real@bf800000
PUBLIC	__real@bfc8d6a8
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__LocalAlloc@8:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	_abs:PROC
EXTRN	_sprintf_s:PROC
EXTRN	??_E_com_error@@UAEPAXI@Z:PROC			; _com_error::`vector deleting destructor'
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	_MonoPrint:PROC
EXTRN	??0TextureHandle@@QAE@XZ:PROC			; TextureHandle::TextureHandle
EXTRN	?Create@TextureHandle@@QAE_NPADKGGGK@Z:PROC	; TextureHandle::Create
EXTRN	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z:PROC	; TextureHandle::Load
EXTRN	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z:PROC ; PaletteHandle::PaletteHandle
EXTRN	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z:PROC ; PaletteHandle::AttachToTexture
EXTRN	?SelectTexture1@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectTexture1
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z:PROC ; ContextMPR::DrawPrimitive
EXTRN	??0ImageBuffer@@QAE@XZ:PROC			; ImageBuffer::ImageBuffer
EXTRN	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:PROC ; ImageBuffer::Setup
EXTRN	?Cleanup@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Cleanup
EXTRN	?SetChromaKey@ImageBuffer@@QAEXK@Z:PROC		; ImageBuffer::SetChromaKey
EXTRN	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z:PROC ; ImageBuffer::Compose
EXTRN	?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z:PROC ; ImageBuffer::ComposeTransparent
EXTRN	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z:PROC ; ImageBuffer::ComposeRoundRot
EXTRN	?Clear@ImageBuffer@@QAEXK@Z:PROC		; ImageBuffer::Clear
EXTRN	?Translate8to16@@YAXPAGPAEPAVImageBuffer@@@Z:PROC ; Translate8to16
EXTRN	?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z:PROC ; Translate8to32
EXTRN	?CalculateNVGColor@@YAKK@Z:PROC			; CalculateNVGColor
EXTRN	?ApplyLighting@CockpitManager@@QAEKK_N@Z:PROC	; CockpitManager::ApplyLighting
EXTRN	?AddTurbulence@CockpitManager@@QAEXPAUTwoDVertex@@@Z:PROC ; CockpitManager::AddTurbulence
EXTRN	?DiscardLit@CPObject@@UAEXXZ:PROC		; CPObject::DiscardLit
EXTRN	??0CPObject@@QAE@PBUObjectInitStr@@@Z:PROC	; CPObject::CPObject
EXTRN	??1CPObject@@UAE@XZ:PROC			; CPObject::~CPObject
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetILSAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z:PROC ; NavigationSystem::GetILSAttribute
EXTRN	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ:PROC ; NavigationSystem::GetInstrumentMode
EXTRN	??_ECPAdi@@UAEPAXI@Z:PROC			; CPAdi::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?CircleX@@3PAMA:BYTE				; CircleX
EXTRN	?CircleY@@3PAMA:BYTE				; CircleY
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?g_bINS@@3_NA:BYTE				; g_bINS
EXTRN	?g_bCockpitAutoScale@@3_NA:BYTE			; g_bCockpitAutoScale
EXTRN	?g_bFilter2DPit@@3_NA:BYTE			; g_bFilter2DPit
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bfc8d6a8
CONST	SEGMENT
__real@bfc8d6a8 DD 0bfc8d6a8r			; -1.56905
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@be860a91
CONST	SEGMENT
__real@be860a91 DD 0be860a91r			; -0.261799
CONST	ENDS
;	COMDAT __real@be32b8c1
CONST	SEGMENT
__real@be32b8c1 DD 0be32b8c1r			; -0.174533
CONST	ENDS
;	COMDAT __real@bdb2b8c1
CONST	SEGMENT
__real@bdb2b8c1 DD 0bdb2b8c1r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bd56774e
CONST	SEGMENT
__real@bd56774e DD 0bd56774er			; -0.0523599
CONST	ENDS
;	COMDAT __real@bd0efa34
CONST	SEGMENT
__real@bd0efa34 DD 0bd0efa34r			; -0.0349066
CONST	ENDS
;	COMDAT __real@bc8efa34
CONST	SEGMENT
__real@bc8efa34 DD 0bc8efa34r			; -0.0174533
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc8d6a8
CONST	SEGMENT
__real@3fc8d6a8 DD 03fc8d6a8r			; 1.56905
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3edf66f1
CONST	SEGMENT
__real@3edf66f1 DD 03edf66f1r			; 0.436332
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e32b8c1
CONST	SEGMENT
__real@3e32b8c1 DD 03e32b8c1r			; 0.174533
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d0efa34
CONST	SEGMENT
__real@3d0efa34 DD 03d0efa34r			; 0.0349066
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CPObject@@8
rdata$r	SEGMENT
??_R2CPObject@@8 DD FLAT:??_R1A@?0A@EA@CPObject@@8	; CPObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPObject@@8
rdata$r	SEGMENT
??_R3CPObject@@8 DD 00H					; CPObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPObject@@@8
_DATA	SEGMENT
??_R0?AVCPObject@@@8 DD FLAT:??_7type_info@@6B@		; CPObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CPObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPObject@@8 DD FLAT:??_R0?AVCPObject@@@8	; CPObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPAdi@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPAdi@@8 DD FLAT:??_R0?AVCPAdi@@@8	; CPAdi::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPAdi@@8
rdata$r	ENDS
;	COMDAT ??_R2CPAdi@@8
rdata$r	SEGMENT
??_R2CPAdi@@8 DD FLAT:??_R1A@?0A@EA@CPAdi@@8		; CPAdi::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CPObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CPAdi@@8
rdata$r	SEGMENT
??_R3CPAdi@@8 DD 00H					; CPAdi::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPAdi@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPAdi@@@8
_DATA	SEGMENT
??_R0?AVCPAdi@@@8 DD FLAT:??_7type_info@@6B@		; CPAdi `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPAdi@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPAdi@@6B@
rdata$r	SEGMENT
??_R4CPAdi@@6B@ DD 00H					; CPAdi::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPAdi@@@8
	DD	FLAT:??_R3CPAdi@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_com_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_com_error@@8 DD FLAT:??_R0?AV_com_error@@@8 ; _com_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R2_com_error@@8
rdata$r	SEGMENT
??_R2_com_error@@8 DD FLAT:??_R1A@?0A@EA@_com_error@@8	; _com_error::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_com_error@@8
rdata$r	SEGMENT
??_R3_com_error@@8 DD 00H				; _com_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_com_error@@8
rdata$r	ENDS
;	COMDAT ??_R4_com_error@@6B@
rdata$r	SEGMENT
??_R4_com_error@@6B@ DD 00H				; _com_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	FLAT:??_R3_com_error@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NLAOHLOG@CPAdi?3?3CreateLit?5?9?5Error?50x?$CFX?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@NLAOHLOG@CPAdi?3?3CreateLit?5?9?5Error?50x?$CFX?5?$CI?$CF@ DB 'C'
	DB	'PAdi::CreateLit - Error 0x%X (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ODLLGOC@CPAdi?3?3CreateAdiView?5?9?5Error?50x?$CF@
CONST	SEGMENT
??_C@_0CI@ODLLGOC@CPAdi?3?3CreateAdiView?5?9?5Error?50x?$CF@ DB 'CPAdi::C'
	DB	'reateAdiView - Error 0x%X (%s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CHKLGFBP@CPAdi?$AA@
CONST	SEGMENT
??_C@_05CHKLGFBP@CPAdi?$AA@ DB 'CPAdi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CPAdi@@6B@
CONST	SEGMENT
??_7CPAdi@@6B@ DD FLAT:??_R4CPAdi@@6B@			; CPAdi::`vftable'
	DD	FLAT:?Exec@CPAdi@@UAEXPAVSimBaseClass@@@Z
	DD	FLAT:?DisplayBlit@CPAdi@@UAEXXZ
	DD	FLAT:?DisplayDraw@CPAdi@@UAEXXZ
	DD	FLAT:?HandleEvent@CPObject@@UAEXXZ
	DD	FLAT:?CreateLit@CPAdi@@UAEXXZ
	DD	FLAT:?DiscardLit@CPAdi@@UAEXXZ
	DD	FLAT:?Translate@CPAdi@@UAEXPAK@Z
	DD	FLAT:?Translate@CPAdi@@UAEXPAG@Z
	DD	FLAT:?DisplayBlit3D@CPAdi@@UAEXXZ
	DD	FLAT:??_ECPAdi@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	SEGMENT
__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	010H
	DD	FLAT:??0_com_error@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AV_com_error@@
xdata$x	SEGMENT
__CTA1?AV_com_error@@ DD 01H
	DD	FLAT:__CT??_R0?AV_com_error@@@8??0_com_error@@QAE@ABV0@@Z16
xdata$x	ENDS
;	COMDAT __TI1?AV_com_error@@
xdata$x	SEGMENT
__TI1?AV_com_error@@ DD 00H
	DD	FLAT:??1_com_error@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AV_com_error@@
xdata$x	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
CONST	SEGMENT
??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@ DB 'Unknown error 0x%0l'
	DB	'X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@ DB 'IDispatch error #%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT
??_7_com_error@@6B@ DD FLAT:??_R4_com_error@@6B@	; _com_error::`vftable'
	DD	FLAT:??_E_com_error@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??1CPAdi@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CPAdi@@UAE@XZ$0
__unwindtable$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z$1
__catchsym$?CreateLit@CPAdi@@UAEXXZ$12 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff28H
	DD	FLAT:__catch$?CreateLit@CPAdi@@UAEXXZ$2
__catchsym$?CreateLit@CPAdi@@UAEXXZ$11 DD 00H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff38H
	DD	FLAT:__catch$?CreateLit@CPAdi@@UAEXXZ$0
__ehfuncinfo$??1CPAdi@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CPAdi@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateLit@CPAdi@@UAEXXZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?CreateLit@CPAdi@@UAEXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?CreateLit@CPAdi@@UAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?CreateLit@CPAdi@@UAEXXZ DD 00H
	DD	02H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?CreateLit@CPAdi@@UAEXXZ$11
	DD	06H
	DD	08H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$?CreateLit@CPAdi@@UAEXXZ$12
__unwindtable$?CreateLit@CPAdi@@UAEXXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$5
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$7
	DD	0ffffffffH
	DD	00H
	DD	06H
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$8
	DD	06H
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$9
	DD	0ffffffffH
	DD	00H
	DD	09H
	DD	FLAT:__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$10
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z PROC ; std::_Val_type<TextureHandle * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z ENDP ; std::_Val_type<TextureHandle * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z PROC ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ENDP ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z PROC ; std::_Ptr_cat<TextureHandle *,TextureHandle *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ENDP ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z PROC ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVTextureHandle@@@std@@YAPAPAVTextureHandle@@PAPAV1@@Z ; std::_Val_type<TextureHandle * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVTextureHandle@@PAV1@PAV1@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<TextureHandle *,TextureHandle *,TextureHandle *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ; std::forward<TextureHandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z ; std::allocator<TextureHandle *>::construct
	pop	ebp
	ret	0
??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z PROC ; std::forward<TextureHandle * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ENDP ; std::forward<TextureHandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::allocator<TextureHandle *>::construct<TextureHandle *,TextureHandle * &>
	pop	ebp
	ret	0
??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z PROC ; std::forward<TextureHandle * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ENDP ; std::forward<TextureHandle * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z PROC ; std::_Allocate<TextureHandle *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z ENDP ; std::_Allocate<TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVTextureHandle@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAPAPAVTextureHandle@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Uninitialized_move<TextureHandle * *,TextureHandle * *,std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVTextureHandle@@@std@@YAABQAVTextureHandle@@ABQAV1@@Z ; std::forward<TextureHandle * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVTextureHandle@@ABQAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@ABQAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVTextureHandle@@@std@@YAAAPAVTextureHandle@@AAPAV1@@Z ; std::forward<TextureHandle * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVTextureHandle@@AAPAV1@@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAXAAV?$allocator@PAVTextureHandle@@@1@PAPAVTextureHandle@@AAPAV3@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z PROC ; std::addressof<TextureHandle * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ENDP ; std::addressof<TextureHandle * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_tempx$1 = -3660					; size = 4
_angsin$ = -3656					; size = 4
_angcos$ = -3652					; size = 4
_y1$ = -3648						; size = 4
_hw_rate$ = -3644					; size = 4
_x1$ = -3640						; size = 4
_Radius$ = -3636					; size = 4
_y$ = -3632						; size = 4
_fStartU$ = -3628					; size = 4
_fStartV$ = -3624					; size = 4
_x$ = -3620						; size = 4
_fMaxV$ = -3616						; size = 4
_fMaxU$ = -3612						; size = 4
_entry$ = -3608						; size = 4
_pVtx$ = -3604						; size = 3600
__$ArrayPad$ = -4					; size = 4
_srcrect$ = 8						; size = 4
_srcloc$ = 12						; size = 4
_destrect$ = 16						; size = 4
_alpha$ = 20						; size = 4
_pTex$ = 24						; size = 4
_angle$ = 28						; size = 4
?RenderADIPoly@@YAXPAUtagRECT@@00HPAVTextureHandle@@M@Z PROC ; RenderADIPoly

; 464  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3660				; 00000e4cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 465  : 	int entry;
; 466  : 
; 467  : 	float x1, y1;
; 468  : 	const float angsin = sin(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _angsin$[ebp]

; 469  : 	const float angcos = cos(angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _angcos$[ebp]

; 470  : 
; 471  : 	float x = destrect->left+((float)(destrect->right-destrect->left)/2.0f);

	mov	eax, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _destrect$[ebp]
	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 472  : 	float y = destrect->top+((float)(destrect->bottom-destrect->top)/2.0f);

	mov	ecx, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR _destrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm1, ecx
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR _y$[ebp], xmm0

; 473  : 	float Radius = (float)(destrect->bottom-destrect->top)/2.0f;

	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR _destrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _Radius$[ebp], xmm0

; 474  : 	float hw_rate= OTWDriver.pCockpitManager->mHScale/OTWDriver.pCockpitManager->mVScale;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	movss	xmm0, DWORD PTR [edx+248]
	divss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _hw_rate$[ebp], xmm0

; 475  : 
; 476  : 
; 477  : 
; 478  : 	OTWDriver.renderer->CenterOriginInViewport();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 479  : 	OTWDriver.renderer->SetViewport(-1.0F, 1.0F, 1.0F, -1.0F);		

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 480  : 	
; 481  : 	// Setup vertices
; 482  : 	float fStartU = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fStartU$[ebp], xmm0

; 483  : 	float fMaxU = (float) pTex->m_nWidth / (float) pTex->m_nActualWidth;

	mov	ecx, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+16]
	divss	xmm0, xmm1
	movss	DWORD PTR _fMaxU$[ebp], xmm0

; 484  : 	fMaxU -= fStartU;

	movss	xmm0, DWORD PTR _fMaxU$[ebp]
	subss	xmm0, DWORD PTR _fStartU$[ebp]
	movss	DWORD PTR _fMaxU$[ebp], xmm0

; 485  : 	float fStartV = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fStartV$[ebp], xmm0

; 486  : 	float fMaxV = (float) pTex->m_nHeight / (float) pTex->m_nActualHeight;

	mov	eax, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _pTex$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+20]
	divss	xmm0, xmm1
	movss	DWORD PTR _fMaxV$[ebp], xmm0

; 487  : 	fMaxV -= fStartV;

	movss	xmm0, DWORD PTR _fMaxV$[ebp]
	subss	xmm0, DWORD PTR _fStartV$[ebp]
	movss	DWORD PTR _fMaxV$[ebp], xmm0

; 488  : 
; 489  : 
; 490  : 	fStartU = ((float)(srcloc->left-srcrect->left)/(float)(srcrect->right-srcrect->left))*fMaxU;

	mov	edx, DWORD PTR _srcloc$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _srcrect$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _fMaxU$[ebp]
	movss	DWORD PTR _fStartU$[ebp], xmm0

; 491  : 	fMaxU = ((float)(srcloc->right-srcrect->left)/(float)(srcrect->right-srcrect->left))*fMaxU;	 

	mov	edx, DWORD PTR _srcloc$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _srcrect$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _fMaxU$[ebp]
	movss	DWORD PTR _fMaxU$[ebp], xmm0

; 492  : 
; 493  : 	fStartV = ((float)(srcloc->top-srcrect->top)/(float)(srcrect->bottom-srcrect->top))*fMaxV;

	mov	edx, DWORD PTR _srcloc$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _srcrect$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _fMaxV$[ebp]
	movss	DWORD PTR _fStartV$[ebp], xmm0

; 494  : 	fMaxV = ((float)(srcloc->bottom-srcrect->top)/(float)(srcrect->bottom-srcrect->top))*fMaxV;	 

	mov	edx, DWORD PTR _srcloc$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _srcrect$[ebp]
	mov	eax, DWORD PTR _srcrect$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _fMaxV$[ebp]
	movss	DWORD PTR _fMaxV$[ebp], xmm0

; 495  : 
; 496  : 	TwoDVertex pVtx[90];	
; 497  : 	ZeroMemory(pVtx, sizeof(pVtx));

	push	3600					; 00000e10H
	push	0
	lea	edx, DWORD PTR _pVtx$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 498  : 
; 499  : 	
; 500  : 	for (entry = 0; entry <= CircleSegments-2; entry++) {

	mov	DWORD PTR _entry$[ebp], 0
	jmp	SHORT $LN3@RenderADIP
$LN2@RenderADIP:
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 1
	mov	DWORD PTR _entry$[ebp], eax
$LN3@RenderADIP:
	cmp	DWORD PTR _entry$[ebp], 89		; 00000059H
	jg	$LN1@RenderADIP

; 501  : 
; 502  : 		// Compute the end point of this next segment
; 503  : 		x1 = (x + Radius*CircleX[entry]);

	mov	ecx, DWORD PTR _entry$[ebp]
	movss	xmm0, DWORD PTR _Radius$[ebp]
	mulss	xmm0, DWORD PTR ?CircleX@@3PAMA[ecx*4]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 504  : 		y1 = (y + Radius*CircleY[entry]);

	mov	edx, DWORD PTR _entry$[ebp]
	movss	xmm0, DWORD PTR _Radius$[ebp]
	mulss	xmm0, DWORD PTR ?CircleY@@3PAMA[edx*4]
	addss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y1$[ebp], xmm0

; 505  : 
; 506  : 		// Draw the segment
; 507  : 
; 508  : 		pVtx[entry].x = x1;

	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR _pVtx$[ebp+eax], xmm0

; 509  : 		pVtx[entry].y = y1;		

	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR _pVtx$[ebp+ecx+4], xmm0

; 510  : 
; 511  : 		float tempx = pVtx[entry].x;

	mov	edx, DWORD PTR _entry$[ebp]
	imul	edx, 40					; 00000028H
	movss	xmm0, DWORD PTR _pVtx$[ebp+edx]
	movss	DWORD PTR _tempx$1[ebp], xmm0

; 512  : 		pVtx[entry].x = x + ((angcos*(pVtx[entry].x-x)) + (-angsin*(pVtx[entry].y-y))) * hw_rate;

	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm0, DWORD PTR _pVtx$[ebp+eax]
	subss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _angcos$[ebp]
	movss	xmm1, DWORD PTR _angsin$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm2, DWORD PTR _pVtx$[ebp+ecx+4]
	subss	xmm2, DWORD PTR _y$[ebp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _hw_rate$[ebp]
	addss	xmm0, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	imul	edx, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+edx], xmm0

; 513  : 		pVtx[entry].y = y + (angsin*(tempx-x)) + (angcos*(pVtx[entry].y-y));				

	movss	xmm0, DWORD PTR _tempx$1[ebp]
	subss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _angsin$[ebp]
	addss	xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm1, DWORD PTR _pVtx$[ebp+eax+4]
	subss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _angcos$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+ecx+4], xmm0

; 514  : 		
; 515  : 		x1 = (x + Radius*CircleX[entry] * hw_rate);

	mov	edx, DWORD PTR _entry$[ebp]
	movss	xmm0, DWORD PTR _Radius$[ebp]
	mulss	xmm0, DWORD PTR ?CircleX@@3PAMA[edx*4]
	mulss	xmm0, DWORD PTR _hw_rate$[ebp]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x1$[ebp], xmm0

; 516  : 		pVtx[entry].u = fStartU + (((float)(x1-destrect->left)/(float)(destrect->right-destrect->left)) * (fMaxU-fStartU));

	mov	eax, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR _x1$[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _destrect$[ebp]
	mov	edx, DWORD PTR _destrect$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cvtsi2ss xmm0, eax
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR _fMaxU$[ebp]
	subss	xmm0, DWORD PTR _fStartU$[ebp]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR _fStartU$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+ecx+24], xmm1

; 517  : 		pVtx[entry].v = fStartV + (((float)(y1-destrect->top)/(float)(destrect->bottom-destrect->top)) * (fMaxV-fStartV));

	mov	edx, DWORD PTR _destrect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+4]
	movss	xmm1, DWORD PTR _y1$[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _destrect$[ebp]
	mov	ecx, DWORD PTR _destrect$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	cvtsi2ss xmm0, edx
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR _fMaxV$[ebp]
	subss	xmm0, DWORD PTR _fStartV$[ebp]
	mulss	xmm1, xmm0
	addss	xmm1, DWORD PTR _fStartV$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	DWORD PTR _pVtx$[ebp+eax+28], xmm1

; 518  : 
; 519  : 		pVtx[entry].r = pVtx[entry].g = pVtx[entry].b = pVtx[entry].a = 1.0f;

	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+ecx+20], xmm0
	mov	edx, DWORD PTR _entry$[ebp]
	imul	edx, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+edx+16], xmm0
	mov	eax, DWORD PTR _entry$[ebp]
	imul	eax, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+eax+12], xmm0
	mov	ecx, DWORD PTR _entry$[ebp]
	imul	ecx, 40					; 00000028H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$[ebp+ecx+8], xmm0

; 520  : 	}

	jmp	$LN2@RenderADIP
$LN1@RenderADIP:

; 521  : 	OTWDriver.renderer->context.RestoreState(alpha);	

	mov	edx, DWORD PTR _alpha$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 522  : 	OTWDriver.renderer->context.SelectTexture1((GLint) pTex);

	mov	eax, DWORD PTR _pTex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 523  : 	OTWDriver.renderer->context.DrawPrimitive(MPR_PRM_TRIFAN,MPR_VI_COLOR|MPR_VI_TEXTURE,90,pVtx,sizeof(pVtx[0]));

	push	40					; 00000028H
	lea	ecx, DWORD PTR _pVtx$[ebp]
	push	ecx
	push	90					; 0000005aH
	push	6
	push	6
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ; ContextMPR::DrawPrimitive

; 524  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?RenderADIPoly@@YAXPAUtagRECT@@00HPAVTextureHandle@@M@Z ENDP ; RenderADIPoly
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCPAdi@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPAdi@@UAEPAXI@Z PROC				; CPAdi::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPAdi@@UAE@XZ			; CPAdi::~CPAdi
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPAdi@@UAEPAXI@Z ENDP				; CPAdi::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
tv151 = -44						; size = 4
$T2 = -40						; size = 4
tv87 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPAdi@@UAE@XZ PROC					; CPAdi::~CPAdi
; _this$ = ecx

; 168  : CPAdi::~CPAdi(void) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CPAdi@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPAdi@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 169  : 
; 170  : 	delete [] mpADICircle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+472]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 171  : 
; 172  : 	if(mpSurfaceBuffer) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+480], 0
	je	SHORT $LN11@CPAdi

; 173  : 		mpSurfaceBuffer->Cleanup();	

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+480]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 174  : 		delete mpSurfaceBuffer;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T6[ebp], edx
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN10@CPAdi
	push	1
	mov	eax, DWORD PTR $T6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN11@CPAdi
$LN10@CPAdi:
	mov	DWORD PTR tv87[ebp], 0
$LN11@CPAdi:

; 175  : 	}
; 176  : 	
; 177  : 	if(DisplayOptions.bRender2DCockpit||mDoBackRect) {		//Wombat778 3-24-04

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	jne	SHORT $LN5@CPAdi
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+280], 0
	je	SHORT $LN6@CPAdi
$LN5@CPAdi:

; 178  : 		glReleaseMemory((char*) mpSourceBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+476]
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4
	jmp	$LN13@CPAdi
$LN6@CPAdi:

; 179  : 	}
; 180  : 	//Wombat778 10-06-2003 Added following lines to destroy the temporary imagebuffer;
; 181  : 	//this is unnecessary in using rendered pit
; 182  : 	else if (g_bCockpitAutoScale && ((mHScale!=1.0f) || (mVScale!=1.0f))){

	movzx	edx, BYTE PTR ?g_bCockpitAutoScale@@3_NA ; g_bCockpitAutoScale
	test	edx, edx
	je	SHORT $LN13@CPAdi
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@CPAdi
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@CPAdi
$LN2@CPAdi:

; 183  : 		if (ADIBuffer) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+484], 0
	je	SHORT $LN13@CPAdi

; 184  : 			ADIBuffer->Cleanup();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+484]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 185  : 			delete ADIBuffer;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN12@CPAdi
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN13@CPAdi
$LN12@CPAdi:
	mov	DWORD PTR tv151[ebp], 0
$LN13@CPAdi:

; 186  : 		}
; 187  : 	}
; 188  : 
; 189  : 	//Wombat778 10-06-2003 End of added code
; 190  : 
; 191  : 
; 192  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPObject@@UAE@XZ			; CPObject::~CPObject
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CPAdi@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPObject@@UAE@XZ			; CPObject::~CPObject
__ehhandler$??1CPAdi@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CPAdi@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CPAdi@@UAE@XZ ENDP					; CPAdi::~CPAdi
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
tv1085 = -148						; size = 8
tv1062 = -140						; size = 8
tv1078 = -132						; size = 8
tv1026 = -124						; size = 8
tv1069 = -116						; size = 8
tv1006 = -108						; size = 8
tv1004 = -100						; size = 4
tv1024 = -96						; size = 4
_radiusSquared$ = -92					; size = 4
tv1019 = -88						; size = 4
tv1067 = -84						; size = 4
tv999 = -80						; size = 4
$T2 = -76						; size = 4
_halfArraySize$ = -72					; size = 4
tv1083 = -68						; size = 4
$T3 = -64						; size = 4
tv681 = -60						; size = 4
tv246 = -56						; size = 4
$T4 = -52						; size = 4
_arraySize$ = -48					; size = 4
_x$ = -44						; size = 4
_y$ = -40						; size = 4
_halfCockpitHeight$ = -36				; size = 4
_halfCockpitWidth$ = -32				; size = 4
tv1001 = -28						; size = 2
tv1080 = -26						; size = 2
tv1021 = -24						; size = 2
tv1064 = -22						; size = 2
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pobjectInitStr$ = 8					; size = 4
_padiInitStr$ = 12					; size = 4
??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z PROC	; CPAdi::CPAdi
; _this$ = ecx

; 27   : CPAdi::CPAdi(ObjectInitStr *pobjectInitStr, ADIInitStr *padiInitStr) : CPObject(pobjectInitStr) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pobjectInitStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CPObject@@QAE@PBUObjectInitStr@@@Z	; CPObject::CPObject
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CPAdi@@6B@

; 28   : 	
; 29   : 	int				i;
; 30   : 	float				x;
; 31   : 	float				y;
; 32   : 	float				radiusSquared;
; 33   : 	int				arraySize;
; 34   : 	int				halfArraySize;
; 35   : 	float				halfCockpitWidth;
; 36   : 	float				halfCockpitHeight;
; 37   : 
; 38   : 	//MI inialize
; 39   : 	mPitch = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+144], xmm0

; 40   : 	mRoll = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+148], xmm0

; 41   : 
; 42   : 	mColor[0][0]	= padiInitStr->color0; //0xFF20A2C8;

	mov	ecx, 20					; 00000014H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+164]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _padiInitStr$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	DWORD PTR [eax+ecx], edx

; 43   : 	mColor[1][0]	= CalculateNVGColor(mColor[0][0]);

	mov	eax, 20					; 00000014H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+164]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR [edx+eax]
	push	ecx
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	edx, 20					; 00000014H
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+edx+164]
	mov	ecx, 4
	imul	ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 44   : 	mColor[0][1]	= padiInitStr->color1; //0xff808080;

	mov	edx, 20					; 00000014H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+164]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	DWORD PTR [ecx+edx], eax

; 45   : 	mColor[1][1]	= CalculateNVGColor(mColor[0][1]);

	mov	ecx, 20					; 00000014H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+164]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+164]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR [ecx+edx], eax

; 46   : 	mColor[0][2]	= padiInitStr->color2; //0xffffffff;

	mov	eax, 20					; 00000014H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+164]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	mov	DWORD PTR [edx+eax], ecx

; 47   : 	mColor[1][2]	= CalculateNVGColor(mColor[0][2]);

	mov	edx, 20					; 00000014H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+164]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+164]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR [ecx+edx], eax

; 48   : 	mColor[0][3]	= padiInitStr->color3; //0xFF6CF3F3;	ILS Bars, light yellow

	mov	eax, 20					; 00000014H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+164]
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	mov	DWORD PTR [edx+eax], ecx

; 49   : 	mColor[1][3]	= CalculateNVGColor(mColor[0][3]);

	mov	edx, 20					; 00000014H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+164]
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+164]
	mov	edx, 4
	imul	edx, 3
	mov	DWORD PTR [ecx+edx], eax

; 50   : 	mColor[0][4]	= padiInitStr->color4; //0xFF6CF3F3;	A/C reference symbol, light yellow

	mov	eax, 20					; 00000014H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+164]
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+eax], ecx

; 51   : 	mColor[1][4]	= CalculateNVGColor(mColor[0][4]);

	mov	edx, 20					; 00000014H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+164]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR [ecx+edx]
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+164]
	mov	edx, 4
	shl	edx, 2
	mov	DWORD PTR [ecx+edx], eax

; 52   : 	
; 53   : 
; 54   :  	mSrcRect			= padiInitStr->srcRect;

	mov	eax, DWORD PTR _padiInitStr$[ebp]
	add	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 55   : 	mILSLimits		= padiInitStr->ilsLimits;

	mov	ecx, DWORD PTR _padiInitStr$[ebp]
	add	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 56   : 
; 57   : 	mSrcHalfHeight	= (mSrcRect.bottom - mSrcRect.top + 1) / 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	sub	ecx, DWORD PTR [eax+216]
	add	ecx, 1
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], eax

; 58   : 
; 59   : 	mMinPitch		= -89.9F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bfc8d6a8
	movss	DWORD PTR [eax+156], xmm0

; 60   : 	mMaxPitch		= 89.9F * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fc8d6a8
	movss	DWORD PTR [ecx+152], xmm0

; 61   : 	mTanVisibleBallHalfAngle = (float)tan(25.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3edf66f1
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+160]

; 62   : 
; 63   : 
; 64   : 	// Setup the circle limits
; 65   : 	mRadius			= max(mWidth, mHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+28]
	jle	SHORT $LN13@CPAdi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv246[ebp], ecx
	jmp	SHORT $LN14@CPAdi
$LN13@CPAdi:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR tv246[ebp], eax
$LN14@CPAdi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv246[ebp]
	mov	DWORD PTR [ecx+204], edx

; 66   : 	mRadius			= (mRadius + 1)/ 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], eax

; 67   : 	arraySize		= (int)mRadius * 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	shl	eax, 2
	mov	DWORD PTR _arraySize$[ebp], eax

; 68   : 
; 69   : 	#ifdef USE_SH_POOLS
; 70   : 	mpADICircle = (int *)MemAllocPtr(gCockMemPool,sizeof(int)*arraySize,FALSE);
; 71   : 	#else
; 72   :  	mpADICircle		= new int[arraySize];

	xor	ecx, ecx
	mov	eax, DWORD PTR _arraySize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+472], ecx

; 73   : 	#endif
; 74   : 
; 75   : 	radiusSquared	= (float) mRadius * mRadius;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+204]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+204]
	mulss	xmm0, xmm1
	movss	DWORD PTR _radiusSquared$[ebp], xmm0

; 76   : 
; 77   : 	halfArraySize	= arraySize / 2;

	mov	eax, DWORD PTR _arraySize$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _halfArraySize$[ebp], eax

; 78   : 	for(i = 0; i < halfArraySize; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@CPAdi
$LN9@CPAdi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN10@CPAdi:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _halfArraySize$[ebp]
	jge	$LN8@CPAdi

; 79   : 
; 80   : 		y				= (float) abs(i - mRadius);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR [eax+204]
	push	ecx
	call	_abs
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _y$[ebp], xmm0

; 81   : 		x				= (float)sqrt(radiusSquared - y * y );

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR _radiusSquared$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _x$[ebp]

; 82   : 		mpADICircle[i * 2 + 1]	= mRadius + (int)x; //right

	cvttss2si edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+204]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+472]
	mov	DWORD PTR [eax+ecx*4+4], edx

; 83   : 		mpADICircle[i * 2 + 0]	= mRadius - (int)x; //left

	cvttss2si ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	sub	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+472]
	mov	DWORD PTR [edx+ecx*4], eax

; 84   : 	}

	jmp	$LN9@CPAdi
$LN8@CPAdi:

; 85   : 
; 86   : 	halfCockpitWidth	= (float) DisplayOptions.DispWidth * 0.5F;

	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _halfCockpitWidth$[ebp], xmm0

; 87   : 	halfCockpitHeight	= (float) DisplayOptions.DispHeight * 0.5F;

	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _halfCockpitHeight$[ebp], xmm0

; 88   : 
; 89   : 	mLeft				= (mDestRect.left - halfCockpitWidth) / halfCockpitWidth;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+32]
	subss	xmm0, DWORD PTR _halfCockpitWidth$[ebp]
	divss	xmm0, DWORD PTR _halfCockpitWidth$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+284], xmm0

; 90   :    mRight			= (mDestRect.right - halfCockpitWidth) / halfCockpitWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+40]
	subss	xmm0, DWORD PTR _halfCockpitWidth$[ebp]
	divss	xmm0, DWORD PTR _halfCockpitWidth$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+288], xmm0

; 91   :    mTop				= -(mDestRect.top - halfCockpitHeight) / halfCockpitHeight;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+36]
	subss	xmm0, DWORD PTR _halfCockpitHeight$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _halfCockpitHeight$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+292], xmm0

; 92   :    mBottom			= -(mDestRect.bottom - halfCockpitHeight) / halfCockpitHeight;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+44]
	subss	xmm0, DWORD PTR _halfCockpitHeight$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _halfCockpitHeight$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+296], xmm0

; 93   : 
; 94   : 	mpAircraftBarData[0][0] = 0.1F; mpAircraftBarData[0][1] = 0.5F;

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+356]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 8
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+356]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+edx], xmm0

; 95   : 	mpAircraftBarData[1][0] = 0.3F; mpAircraftBarData[1][1] = 0.5F;

	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+356]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+356]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+ecx], xmm0

; 96   : 	mpAircraftBarData[2][0] = 0.4F; mpAircraftBarData[2][1] = 0.6F;

	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+356]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+356]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [edx+eax], xmm0

; 97   : 	mpAircraftBarData[3][0] = 0.5F; mpAircraftBarData[3][1] = 0.5F;

	mov	ecx, 8
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+356]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 8
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+356]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+edx], xmm0

; 98   : 	mpAircraftBarData[4][0] = 0.6F; mpAircraftBarData[4][1] = 0.6F;

	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+356]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 8
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+356]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [eax+ecx], xmm0

; 99   : 	mpAircraftBarData[5][0] = 0.7F; mpAircraftBarData[5][1] = 0.5F;

	mov	edx, 8
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+356]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 8
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+356]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [edx+eax], xmm0

; 100  : 	mpAircraftBarData[6][0] = 0.9F; mpAircraftBarData[6][1] = 0.5F;

	mov	ecx, 8
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+356]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 8
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+356]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+edx], xmm0

; 101  : 
; 102  : 	for(i = 0; i < NUM_AC_BAR_POINTS; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@CPAdi
$LN6@CPAdi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@CPAdi:
	cmp	DWORD PTR _i$[ebp], 7
	jge	$LN5@CPAdi

; 103  : 		mpAircraftBar[i][0] =  (unsigned) (mpAircraftBarData[i][0] * (float) mWidth * mHScale) + mDestRect.left;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8+356]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR tv999[ebp], xmm0
	fld	DWORD PTR tv999[ebp]
	fnstcw	WORD PTR tv1001[ebp]
	movzx	eax, WORD PTR tv1001[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1004[ebp], eax
	fldcw	WORD PTR tv1004[ebp]
	fistp	QWORD PTR tv1006[ebp]
	fldcw	WORD PTR tv1001[ebp]
	mov	ecx, DWORD PTR tv1006[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+eax*8+300]
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR [eax+edx], ecx

; 104  : 		mpAircraftBar[i][1] =  (unsigned) (mpAircraftBarData[i][1] * (float) mHeight * mVScale) + mDestRect.top;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+356]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR tv1019[ebp], xmm0
	fld	DWORD PTR tv1019[ebp]
	fnstcw	WORD PTR tv1021[ebp]
	movzx	eax, WORD PTR tv1021[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1024[ebp], eax
	fldcw	WORD PTR tv1024[ebp]
	fistp	QWORD PTR tv1026[ebp]
	fldcw	WORD PTR tv1021[ebp]
	mov	eax, DWORD PTR tv1026[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+edx*8+300]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 105  : 	}

	jmp	$LN6@CPAdi
$LN5@CPAdi:

; 106  : 
; 107  : 	mLeftLimit		= (int)(mHScale * mILSLimits.left);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+232]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], ecx

; 108  : 	mRightLimit		= (int)(mHScale * mILSLimits.right);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+240]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+424], edx

; 109  : 	mTopLimit		= (int)(mVScale * mILSLimits.top);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+236]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+20]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+412], eax

; 110  : 	mBottomLimit	= (int)(mVScale * mILSLimits.bottom);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+244]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+420], ecx

; 111  : 
; 112  : 	mHorizScale		= (float)(mRightLimit - mLeftLimit) / HORIZONTAL_SCALE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+424]
	sub	edx, DWORD PTR [ecx+416]
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR __real@3e32b8c1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+428], xmm0

; 113  : 	mVertScale		= (float)(mBottomLimit - mTopLimit) / VERTICAL_SCALE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+420]
	sub	eax, DWORD PTR [edx+412]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@3d0efa34
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+432], xmm0

; 114  : 
; 115  : 	mHorizCenter	= (unsigned) (abs(int(mRightLimit - mLeftLimit)) * 0.5 + mLeftLimit);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+424]
	sub	ecx, DWORD PTR [eax+416]
	push	ecx
	call	_abs
	add	esp, 4
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2sd xmm1, DWORD PTR [edx+416]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv1062[ebp], xmm0
	fld	QWORD PTR tv1062[ebp]
	fnstcw	WORD PTR tv1064[ebp]
	movzx	eax, WORD PTR tv1064[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1067[ebp], eax
	fldcw	WORD PTR tv1067[ebp]
	fistp	QWORD PTR tv1069[ebp]
	fldcw	WORD PTR tv1064[ebp]
	mov	eax, DWORD PTR tv1069[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+436], eax

; 116  : 	mVertCenter		= (unsigned) (abs(int(mBottomLimit - mTopLimit)) * 0.5 + mTopLimit);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+420]
	sub	ecx, DWORD PTR [eax+412]
	push	ecx
	call	_abs
	add	esp, 4
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2sd xmm1, DWORD PTR [edx+412]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv1078[ebp], xmm0
	fld	QWORD PTR tv1078[ebp]
	fnstcw	WORD PTR tv1080[ebp]
	movzx	eax, WORD PTR tv1080[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1083[ebp], eax
	fldcw	WORD PTR tv1083[ebp]
	fistp	QWORD PTR tv1085[ebp]
	fldcw	WORD PTR tv1080[ebp]
	mov	eax, DWORD PTR tv1085[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+440], eax

; 117  : 
; 118  : 	mHorizBarPos	= mTopLimit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR [edx+444], ecx

; 119  : 	mVertBarPos		= mLeftLimit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR [edx+448], ecx

; 120  : 
; 121  : 	mDoBackRect			= padiInitStr->doBackRect;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+280], ecx

; 122  : 
; 123  : 
; 124  : 	mBackSrc.top		= padiInitStr->backSrc.top;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+252], ecx

; 125  : 	mBackSrc.left		= padiInitStr->backSrc.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+248], ecx

; 126  : 	mBackSrc.bottom	= padiInitStr->backSrc.bottom;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+260], ecx

; 127  : 	mBackSrc.right		= padiInitStr->backSrc.right;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+256], ecx

; 128  : 
; 129  : 	mBackDest.top		= (long)(mVScale * padiInitStr->backDest.top);

	mov	edx, DWORD PTR _padiInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], ecx

; 130  : 	mBackDest.left		= (long)(mHScale * padiInitStr->backDest.left);

	mov	eax, DWORD PTR _padiInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], edx

; 131  : 	mBackDest.bottom	= (long)(mVScale * (padiInitStr->backDest.bottom + 1));

	mov	ecx, DWORD PTR _padiInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], ecx

; 132  : 	mBackDest.right		= (long)(mHScale * (padiInitStr->backDest.right + 1));

	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], eax

; 133  : 
; 134  : 	mpSourceBuffer		= padiInitStr->pBackground;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _padiInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+476], ecx

; 135  : 	mpSurfaceBuffer	= NULL; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+480], 0

; 136  : 
; 137  : 	//MI
; 138  : 	Persistant = pobjectInitStr->persistant;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pobjectInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+452], edx

; 139  : 	LastMainADIPitch = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+456], xmm0

; 140  : 	LastMainADIRoll = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+460], xmm0

; 141  : 	LastBUPPitch = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+464], xmm0

; 142  : 	LastBUPRoll = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+468], xmm0

; 143  : 	
; 144  : 	
; 145  : 	if (DisplayOptions.bRender2DCockpit && !mDoBackRect){

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	SHORT $LN4@CPAdi
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+280], 0
	jne	SHORT $LN4@CPAdi

; 146  : 		mpSourceBuffer = padiInitStr->sourceadi;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _padiInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+476], edx
	jmp	$LN2@CPAdi
$LN4@CPAdi:

; 147  : 	}
; 148  : 	//Wombat778 10-06-2003 Added following lines to set up a temporary buffer for the ADI
; 149  : 	//this is unnecessary in using rendered pit
; 150  : 	else if (g_bCockpitAutoScale && ((mHScale!=1.0f) || (mVScale!=1.0f))) {

	movzx	eax, BYTE PTR ?g_bCockpitAutoScale@@3_NA ; g_bCockpitAutoScale
	test	eax, eax
	je	$LN2@CPAdi
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@CPAdi
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@CPAdi
$LN1@CPAdi:

; 151  : 		ADIBuffer = new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@CPAdi
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv681[ebp], eax
	jmp	SHORT $LN16@CPAdi
$LN15@CPAdi:
	mov	DWORD PTR tv681[ebp], 0
$LN16@CPAdi:
	mov	eax, DWORD PTR tv681[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+484], edx

; 152  : 		ADIBuffer->Setup(&FalconDisplay.theDisplayDevice,
; 153  : 			(int)((mDestRect.right - mDestRect.left) / mHScale),
; 154  : 			(int)((mDestRect.bottom - mDestRect.top) / mVScale),
; 155  : 			SystemMem, None, FALSE
; 156  : 		);  //Wombat778 10-06 2003 Setup a new imagebuffer the size of the 

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	sub	edx, DWORD PTR [ecx+36]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	sub	ecx, DWORD PTR [eax+32]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+16]
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+484]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 157  : 		ADIBuffer->SetChromaKey(0xFFFF0000);

	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+484]
	call	?SetChromaKey@ImageBuffer@@QAEXK@Z	; ImageBuffer::SetChromaKey
$LN2@CPAdi:

; 158  : 	}
; 159  : 
; 160  : 	//Wombat778 10-06-2003 End of added code
; 161  : 
; 162  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPObject@@UAE@XZ			; CPObject::~CPObject
__unwindfunclet$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-140]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z ENDP	; CPAdi::CPAdi
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_OffsetX$1 = -228					; size = 4
_OffsetY$2 = -224					; size = 4
_fStartV$3 = -220					; size = 4
_fStartU$4 = -216					; size = 4
_fMaxU$5 = -212						; size = 4
_fMaxV$6 = -208						; size = 4
_pTex$7 = -204						; size = 4
_this$ = -200						; size = 4
_srcRect$8 = -196					; size = 16
_DestRect$9 = -180					; size = 16
_pVtx$10 = -164						; size = 160
__$ArrayPad$ = -4					; size = 4
?DisplayBlit3D@CPAdi@@UAEXXZ PROC			; CPAdi::DisplayBlit3D
; _this$ = ecx

; 533  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 534  : 	if(!mDirtyFlag)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN8@DisplayBli

; 535  : 		return;

	jmp	$LN9@DisplayBli
$LN8@DisplayBli:

; 536  : 
; 537  : 	if (!DisplayOptions.bRender2DCockpit)		//handle in displayblit

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	jne	SHORT $LN7@DisplayBli

; 538  : 		return;

	jmp	$LN9@DisplayBli
$LN7@DisplayBli:

; 539  : 
; 540  : 	if(!m_arrTex.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	test	eax, eax
	jne	SHORT $LN6@DisplayBli

; 541  : 		return;		// handled in DisplayBlit

	jmp	$LN9@DisplayBli
$LN6@DisplayBli:

; 542  : 
; 543  : 	if(mDoBackRect)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+280], 0
	je	$LN5@DisplayBli

; 544  : 	{
; 545  : 		TextureHandle *pTex = m_arrTex[0];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pTex$7[ebp], eax

; 546  : 
; 547  : 		// Setup vertices
; 548  : 		float fStartU = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fStartU$4[ebp], xmm0

; 549  : 		float fMaxU = (float) pTex->m_nWidth / (float) pTex->m_nActualWidth;

	mov	ecx, DWORD PTR _pTex$7[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pTex$7[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+16]
	divss	xmm0, xmm1
	movss	DWORD PTR _fMaxU$5[ebp], xmm0

; 550  : 		fMaxU -= fStartU;

	movss	xmm0, DWORD PTR _fMaxU$5[ebp]
	subss	xmm0, DWORD PTR _fStartU$4[ebp]
	movss	DWORD PTR _fMaxU$5[ebp], xmm0

; 551  : 
; 552  : 		float fStartV = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fStartV$3[ebp], xmm0

; 553  : 		float fMaxV = (float) pTex->m_nHeight / (float) pTex->m_nActualHeight;

	mov	eax, DWORD PTR _pTex$7[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _pTex$7[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+20]
	divss	xmm0, xmm1
	movss	DWORD PTR _fMaxV$6[ebp], xmm0

; 554  : 		fMaxV -= fStartV;

	movss	xmm0, DWORD PTR _fMaxV$6[ebp]
	subss	xmm0, DWORD PTR _fStartV$3[ebp]
	movss	DWORD PTR _fMaxV$6[ebp], xmm0

; 555  : 
; 556  : 		TwoDVertex pVtx[4];
; 557  : 		ZeroMemory(pVtx, sizeof(pVtx));

	push	160					; 000000a0H
	push	0
	lea	edx, DWORD PTR _pVtx$10[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 558  : 		pVtx[0].x = (float)mBackDest.left; pVtx[0].y = (float)mBackDest.top; pVtx[0].u = fStartU; pVtx[0].v = fStartV;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+264]
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	DWORD PTR _pVtx$10[ebp+ecx], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+268]
	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	DWORD PTR _pVtx$10[ebp+eax+4], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR _fStartU$4[ebp]
	movss	DWORD PTR _pVtx$10[ebp+ecx+24], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR _fStartV$3[ebp]
	movss	DWORD PTR _pVtx$10[ebp+edx+28], xmm0

; 559  : 		pVtx[0].r = pVtx[0].g = pVtx[0].b = pVtx[0].a = 1.0f;

	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+eax+20], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+ecx+16], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+edx+12], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+eax+8], xmm0

; 560  : 		pVtx[1].x = (float)mBackDest.right; pVtx[1].y = (float)mBackDest.top; pVtx[1].u = fMaxU; pVtx[1].v = fStartV;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+272]
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	DWORD PTR _pVtx$10[ebp+edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+268]
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	DWORD PTR _pVtx$10[ebp+ecx+4], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR _fMaxU$5[ebp]
	movss	DWORD PTR _pVtx$10[ebp+edx+24], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR _fStartV$3[ebp]
	movss	DWORD PTR _pVtx$10[ebp+eax+28], xmm0

; 561  : 		pVtx[1].r = pVtx[1].g = pVtx[1].b = pVtx[1].a = 1.0f;

	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+ecx+20], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+edx+16], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+eax+12], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+ecx+8], xmm0

; 562  : 		pVtx[2].x = (float)mBackDest.right; pVtx[2].y = (float)mBackDest.bottom; pVtx[2].u = fMaxU; pVtx[2].v = fMaxV;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+272]
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	DWORD PTR _pVtx$10[ebp+eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+276]
	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	DWORD PTR _pVtx$10[ebp+edx+4], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR _fMaxU$5[ebp]
	movss	DWORD PTR _pVtx$10[ebp+eax+24], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	movss	xmm0, DWORD PTR _fMaxV$6[ebp]
	movss	DWORD PTR _pVtx$10[ebp+ecx+28], xmm0

; 563  : 		pVtx[2].r = pVtx[2].g = pVtx[2].b = pVtx[2].a = 1.0f;

	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+edx+20], xmm0
	mov	eax, 40					; 00000028H
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+eax+16], xmm0
	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+ecx+12], xmm0
	mov	edx, 40					; 00000028H
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+edx+8], xmm0

; 564  : 		pVtx[3].x = (float)mBackDest.left; pVtx[3].y = (float)mBackDest.bottom; pVtx[3].u = fStartU; pVtx[3].v = fMaxV;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+264]
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	DWORD PTR _pVtx$10[ebp+ecx], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+276]
	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	DWORD PTR _pVtx$10[ebp+eax+4], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR _fStartU$4[ebp]
	movss	DWORD PTR _pVtx$10[ebp+ecx+24], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR _fMaxV$6[ebp]
	movss	DWORD PTR _pVtx$10[ebp+edx+28], xmm0

; 565  : 		pVtx[3].r = pVtx[3].g = pVtx[3].b = pVtx[3].a = 1.0f;

	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+eax+20], xmm0
	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+ecx+16], xmm0
	mov	edx, 40					; 00000028H
	imul	edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+edx+12], xmm0
	mov	eax, 40					; 00000028H
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _pVtx$10[ebp+eax+8], xmm0

; 566  : 
; 567  : 		// COBRA - RED - Pit Vibrations
; 568  : 		OTWDriver.pCockpitManager->AddTurbulence(pVtx);

	lea	ecx, DWORD PTR _pVtx$10[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?AddTurbulence@CockpitManager@@QAEXPAUTwoDVertex@@@Z ; CockpitManager::AddTurbulence

; 569  : 
; 570  : 		// Setup state
; 571  : 		OTWDriver.renderer->context.RestoreState(STATE_ALPHA_TEXTURE_NOFILTER);

	push	34					; 00000022H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 572  : 		OTWDriver.renderer->context.SelectTexture1((GLint) pTex);

	mov	edx, DWORD PTR _pTex$7[ebp]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?SelectTexture1@ContextMPR@@QAEXH@Z	; ContextMPR::SelectTexture1

; 573  : 
; 574  : 		// Render it (finally)
; 575  : 		OTWDriver.renderer->context.DrawPrimitive(MPR_PRM_TRIFAN, MPR_VI_COLOR|MPR_VI_TEXTURE,4,pVtx,sizeof(pVtx[0]));

	push	40					; 00000028H
	lea	eax, DWORD PTR _pVtx$10[ebp]
	push	eax
	push	4
	push	6
	push	6
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?DrawPrimitive@ContextMPR@@QAEXHGGPAUMPRVtxTexClr_t@@G@Z ; ContextMPR::DrawPrimitive
	jmp	$LN1@DisplayBli
$LN5@DisplayBli:

; 576  : 	}
; 577  : 
; 578  : 	//Wombat778 3-24-04
; 579  : 	else if (DisplayOptions.bRender2DCockpit)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	$LN1@DisplayBli

; 580  : 	{
; 581  : 		RECT srcRect, DestRect=mDestRect;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _DestRect$9[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _DestRect$9[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _DestRect$9[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _DestRect$9[ebp+12], ecx

; 582  : 		// COBRA - RED - Pit Vibrations
; 583  : 		int	OffsetX=(int)OTWDriver.pCockpitManager->PitTurbulence.x;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cvttss2si eax, DWORD PTR [edx+728]
	mov	DWORD PTR _OffsetX$1[ebp], eax

; 584  : 		int	OffsetY=(int)OTWDriver.pCockpitManager->PitTurbulence.y;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cvttss2si edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _OffsetY$2[ebp], edx

; 585  : 		DestRect.top+=OffsetY;

	mov	eax, DWORD PTR _DestRect$9[ebp+4]
	add	eax, DWORD PTR _OffsetY$2[ebp]
	mov	DWORD PTR _DestRect$9[ebp+4], eax

; 586  : 		DestRect.bottom+=OffsetY;

	mov	ecx, DWORD PTR _DestRect$9[ebp+12]
	add	ecx, DWORD PTR _OffsetY$2[ebp]
	mov	DWORD PTR _DestRect$9[ebp+12], ecx

; 587  : 		DestRect.left+=OffsetX;

	mov	edx, DWORD PTR _DestRect$9[ebp]
	add	edx, DWORD PTR _OffsetX$1[ebp]
	mov	DWORD PTR _DestRect$9[ebp], edx

; 588  : 		DestRect.right+=OffsetX;

	mov	eax, DWORD PTR _DestRect$9[ebp+8]
	add	eax, DWORD PTR _OffsetX$1[ebp]
	mov	DWORD PTR _DestRect$9[ebp+8], eax

; 589  : 
; 590  : 		// Build the source rectangle
; 591  : 		srcRect.top			= (LONG)(mSrcRect.top + mSrcHalfHeight - mRadius - (int) mSlide);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+216]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+228]
	mov	ecx, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _this$[ebp]
	cvttss2si ecx, DWORD PTR [eax+208]
	sub	edx, ecx
	mov	DWORD PTR _srcRect$8[ebp+4], edx

; 592  : 		srcRect.left		= (LONG)(mSrcRect.left);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	DWORD PTR _srcRect$8[ebp], eax

; 593  : 		srcRect.bottom		= (LONG)(srcRect.top + (mDestRect.bottom - mDestRect.top) / mVScale);

	cvtsi2ss xmm0, DWORD PTR _srcRect$8[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+36]
	cvtsi2ss xmm1, eax
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm1, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	DWORD PTR _srcRect$8[ebp+12], edx

; 594  : 		srcRect.right		= (LONG)(srcRect.left + (mDestRect.right - mDestRect.left) / mHScale);	

	cvtsi2ss xmm0, DWORD PTR _srcRect$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	sub	edx, DWORD PTR [ecx+32]
	cvtsi2ss xmm1, edx
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _srcRect$8[ebp+8], ecx

; 595  : 				
; 596  : 		if (g_bFilter2DPit)	//Wombat778 3-30-04 Add option to filter

	movzx	edx, BYTE PTR ?g_bFilter2DPit@@3_NA	; g_bFilter2DPit
	test	edx, edx
	je	SHORT $LN2@DisplayBli

; 597  : 			RenderADIPoly(&mSrcRect, &srcRect,&DestRect, STATE_CHROMA_TEXTURE,m_arrTex[0], -mRoll);				

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	19					; 00000013H
	lea	edx, DWORD PTR _DestRect$9[ebp]
	push	edx
	lea	eax, DWORD PTR _srcRect$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	push	ecx
	call	?RenderADIPoly@@YAXPAUtagRECT@@00HPAVTextureHandle@@M@Z ; RenderADIPoly
	add	esp, 24					; 00000018H

; 598  : 		else

	jmp	SHORT $LN1@DisplayBli
$LN2@DisplayBli:

; 599  : 			RenderADIPoly(&mSrcRect, &srcRect,&DestRect, STATE_ALPHA_TEXTURE_NOFILTER,m_arrTex[0], -mRoll);		

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+148]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	push	34					; 00000022H
	lea	ecx, DWORD PTR _DestRect$9[ebp]
	push	ecx
	lea	edx, DWORD PTR _srcRect$8[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 212				; 000000d4H
	push	eax
	call	?RenderADIPoly@@YAXPAUtagRECT@@00HPAVTextureHandle@@M@Z ; RenderADIPoly
	add	esp, 24					; 00000018H
$LN1@DisplayBli:
$LN9@DisplayBli:

; 600  : 	}	
; 601  : 
; 602  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit3D@CPAdi@@UAEXXZ ENDP			; CPAdi::DisplayBlit3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_palette32$ = 8						; size = 4
?Translate@CPAdi@@UAEXPAK@Z PROC			; CPAdi::Translate
; _this$ = ecx

; 727  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 728  : 	if(mDoBackRect)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN3@Translate

; 729  : 	{
; 730  : 		if(mpSurfaceBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+480], 0
	je	SHORT $LN3@Translate

; 731  : 			Translate8to32(palette32, mpSourceBuffer, mpSurfaceBuffer); // 8 bit color indexes of individual surfaces

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+476]
	push	edx
	mov	eax, DWORD PTR _palette32$[ebp]
	push	eax
	call	?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z ; Translate8to32
	add	esp, 12					; 0000000cH
$LN3@Translate:

; 732  : 	}																					// 32 bit ImageBuffers
; 733  : }				

	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@CPAdi@@UAEXPAK@Z ENDP			; CPAdi::Translate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_palette16$ = 8						; size = 4
?Translate@CPAdi@@UAEXPAG@Z PROC			; CPAdi::Translate
; _this$ = ecx

; 718  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 719  : 	if(mDoBackRect)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN3@Translate

; 720  : 	{
; 721  : 		if(mpSurfaceBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+480], 0
	je	SHORT $LN3@Translate

; 722  : 			Translate8to16(palette16, mpSourceBuffer, mpSurfaceBuffer); // 8 bit color indexes of individual surfaces

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+476]
	push	edx
	mov	eax, DWORD PTR _palette16$[ebp]
	push	eax
	call	?Translate8to16@@YAXPAGPAEPAVImageBuffer@@@Z ; Translate8to16
	add	esp, 12					; 0000000cH
$LN3@Translate:

; 723  : 	}																					// 16 bit ImageBuffers
; 724  : }				

	mov	esp, ebp
	pop	ebp
	ret	4
?Translate@CPAdi@@UAEXPAG@Z ENDP			; CPAdi::Translate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
tv77 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?DiscardLit@CPAdi@@UAEXXZ PROC				; CPAdi::DiscardLit
; _this$ = ecx

; 309  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 	if(mDoBackRect)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN2@DiscardLit

; 311  : 	{
; 312  : 		if(mpSurfaceBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+480], 0
	je	SHORT $LN1@DiscardLit

; 313  : 			mpSurfaceBuffer->Cleanup();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+480]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup
$LN1@DiscardLit:

; 314  : 
; 315  : 		delete mpSurfaceBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@DiscardLit
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN6@DiscardLit
$LN5@DiscardLit:
	mov	DWORD PTR tv77[ebp], 0
$LN6@DiscardLit:

; 316  : 		mpSurfaceBuffer = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+480], 0
$LN2@DiscardLit:

; 317  : 	}
; 318  : 
; 319  : 	CPObject::DiscardLit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DiscardLit@CPObject@@UAEXXZ		; CPObject::DiscardLit

; 320  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DiscardLit@CPAdi@@UAEXXZ ENDP				; CPAdi::DiscardLit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
$T2 = -344						; size = 16
$T3 = -328						; size = 16
$T4 = -312						; size = 16
$T5 = -296						; size = 16
$T6 = -280						; size = 16
$T7 = -264						; size = 16
$T8 = -248						; size = 16
$T9 = -232						; size = 16
_e$10 = -216						; size = 16
_e$11 = -200						; size = 16
$T12 = -184						; size = 4
tv515 = -180						; size = 4
_dwMaxTextureWidth$ = -176				; size = 4
tv477 = -172						; size = 4
tv520 = -168						; size = 4
tv479 = -164						; size = 4
_dwMaxTextureHeight$13 = -160				; size = 4
_bResult$14 = -156					; size = 4
tv475 = -152						; size = 4
_dwMaxTextureHeight$ = -148				; size = 4
$T15 = -144						; size = 4
$T16 = -140						; size = 4
tv534 = -136						; size = 4
tv517 = -132						; size = 4
tv531 = -128						; size = 4
_dwMaxTextureWidth$17 = -124				; size = 4
$T18 = -120						; size = 4
tv516 = -116						; size = 4
tv530 = -112						; size = 4
tv514 = -108						; size = 4
tv529 = -104						; size = 4
tv478 = -100						; size = 4
tv528 = -96						; size = 4
tv476 = -92						; size = 4
tv525 = -88						; size = 4
$T19 = -84						; size = 4
tv392 = -80						; size = 4
$T20 = -76						; size = 4
$T21 = -72						; size = 4
$T22 = -68						; size = 4
tv373 = -64						; size = 4
tv301 = -60						; size = 4
$T23 = -56						; size = 4
tv198 = -52						; size = 4
_front$24 = -48						; size = 4
tv167 = -44						; size = 4
tv306 = -40						; size = 4
$T25 = -36						; size = 4
_pTex$26 = -32						; size = 4
_pTex$27 = -28						; size = 4
tv521 = -24						; size = 1
tv535 = -23						; size = 1
tv522 = -22						; size = 1
tv536 = -21						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?CreateLit@CPAdi@@UAEXXZ PROC				; CPAdi::CreateLit
; _this$ = ecx

; 201  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateLit@CPAdi@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 	const DWORD dwMaxTextureWidth = mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pD3DHWDeviceDesc->dwMaxTextureWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	ecx, eax
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _dwMaxTextureWidth$[ebp], edx

; 203  : 	const DWORD dwMaxTextureHeight = mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pD3DHWDeviceDesc->dwMaxTextureHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	ecx, eax
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _dwMaxTextureHeight$[ebp], edx

; 204  : 
; 205  : 
; 206  : 	if (DisplayOptions.bRender2DCockpit)		//Wombat778 3-24-04 we are gonna do this my way...dont know about all that crap below

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	eax, eax
	je	$LN23@CreateLit

; 207  : 	{
; 208  : 		try
; 209  : 		{

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 210  : 			const DWORD dwMaxTextureWidth = mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pD3DHWDeviceDesc->dwMaxTextureWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv475[ebp], eax
	mov	ecx, DWORD PTR tv475[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv476[ebp], eax
	mov	edx, DWORD PTR tv476[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _dwMaxTextureWidth$17[ebp], ecx

; 211  : 			const DWORD dwMaxTextureHeight = mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pD3DHWDeviceDesc->dwMaxTextureHeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv477[ebp], eax
	mov	ecx, DWORD PTR tv477[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv478[ebp], eax
	mov	eax, DWORD PTR tv478[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR _dwMaxTextureHeight$13[ebp], edx

; 212  : 			m_pPalette = new PaletteHandle(mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pDD, 32, 256);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv479[ebp], eax
	mov	eax, DWORD PTR tv479[ebp]
	mov	DWORD PTR $T20[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN26@CreateLit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv514[ebp], eax
	mov	ecx, DWORD PTR tv514[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv515[ebp], eax
	push	256					; 00000100H
	push	32					; 00000020H
	mov	edx, DWORD PTR tv515[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T20[ebp]
	call	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z ; PaletteHandle::PaletteHandle
	mov	DWORD PTR tv516[ebp], eax
	mov	ecx, DWORD PTR tv516[ebp]
	mov	DWORD PTR tv167[ebp], ecx
	jmp	SHORT $LN27@CreateLit
$LN26@CreateLit:
	mov	DWORD PTR tv167[ebp], 0
$LN27@CreateLit:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR $T19[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T19[ebp]
	mov	DWORD PTR [eax+116], ecx

; 213  : 
; 214  : 			if(!m_pPalette)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN21@CreateLit

; 215  : 				throw _com_error(E_OUTOFMEMORY);

	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	__CxxThrowException@8
$LN21@CreateLit:

; 216  : 
; 217  : 			// Check if we can use a single texture
; 218  : 			if((LONG)dwMaxTextureWidth >= (mSrcRect.right-mSrcRect.left) && (LONG)dwMaxTextureHeight >= (mSrcRect.bottom-mSrcRect.top)) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+220]
	sub	eax, DWORD PTR [edx+212]
	cmp	DWORD PTR _dwMaxTextureWidth$17[ebp], eax
	jl	$LN20@CreateLit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+224]
	sub	eax, DWORD PTR [edx+216]
	cmp	DWORD PTR _dwMaxTextureHeight$13[ebp], eax
	jl	$LN20@CreateLit

; 219  : 			{
; 220  : 				TextureHandle *pTex = new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv517[ebp], eax
	mov	ecx, DWORD PTR tv517[ebp]
	mov	DWORD PTR $T25[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN28@CreateLit
	mov	ecx, DWORD PTR $T25[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv520[ebp], eax
	mov	edx, DWORD PTR tv520[ebp]
	mov	DWORD PTR tv198[ebp], edx
	jmp	SHORT $LN29@CreateLit
$LN28@CreateLit:
	mov	DWORD PTR tv198[ebp], 0
$LN29@CreateLit:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T16[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR $T16[ebp]
	mov	DWORD PTR _pTex$27[ebp], ecx

; 221  : 				if(!pTex)

	cmp	DWORD PTR _pTex$27[ebp], 0
	jne	SHORT $LN19@CreateLit

; 222  : 					throw _com_error(E_OUTOFMEMORY);

	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	call	__CxxThrowException@8
$LN19@CreateLit:

; 223  : 				m_pPalette->AttachToTexture(pTex);

	mov	eax, DWORD PTR _pTex$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::AttachToTexture

; 224  : 				if(!pTex->Create("CPAdi", MPR_TI_PALETTE | MPR_TI_CHROMAKEY, 8, (UInt16)(mSrcRect.right-mSrcRect.left), (UInt16)(mSrcRect.bottom-mSrcRect.top)))

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	sub	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+220]
	sub	ecx, DWORD PTR [eax+212]
	push	ecx
	push	8
	push	160					; 000000a0H
	push	OFFSET ??_C@_05CHKLGFBP@CPAdi?$AA@
	mov	ecx, DWORD PTR _pTex$27[ebp]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create
	mov	BYTE PTR tv521[ebp], al
	movzx	edx, BYTE PTR tv521[ebp]
	test	edx, edx
	jne	SHORT $LN18@CreateLit

; 225  : 					throw _com_error(E_FAIL);

	push	0
	push	0
	push	-2147467259				; 80004005H
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	__CxxThrowException@8
$LN18@CreateLit:

; 226  : 				if(!pTex->Load(0, 0xFFFF0000, (BYTE*) mpSourceBuffer, true, true))	// soon to be re-loaded by CPSurface::Translate3D

	push	-1
	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+476]
	push	edx
	push	-65536					; ffff0000H
	push	0
	mov	ecx, DWORD PTR _pTex$27[ebp]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
	mov	BYTE PTR tv522[ebp], al
	movzx	eax, BYTE PTR tv522[ebp]
	test	eax, eax
	jne	SHORT $LN17@CreateLit

; 227  : 					throw _com_error(E_FAIL);

	push	0
	push	0
	push	-2147467259				; 80004005H
	lea	ecx, DWORD PTR $T9[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN17@CreateLit:

; 228  : 				m_arrTex.push_back(pTex);

	lea	edx, DWORD PTR _pTex$27[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back
$LN20@CreateLit:

; 229  : 			}
; 230  : 		
; 231  : 		}

	jmp	SHORT $LN38@CreateLit
__catch$?CreateLit@CPAdi@@UAEXXZ$0:

; 232  : 		catch(_com_error e)

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 233  : 		{
; 234  : 			MonoPrint("CPAdi::CreateAdiView - Error 0x%X (%s)\n", e.Error(), e.ErrorMessage());

	lea	ecx, DWORD PTR _e$11[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR _e$11[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CI@ODLLGOC@CPAdi?3?3CreateAdiView?5?9?5Error?50x?$CF@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 235  : 			DiscardLit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 236  : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _e$11[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN50@CreateLit
	ret	0
$LN38@CreateLit:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?CreateLit@CPAdi@@UAEXXZ$1
$LN50@CreateLit:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?CreateLit@CPAdi@@UAEXXZ$1:

; 237  : 	} else

	jmp	$LN25@CreateLit
$LN23@CreateLit:

; 238  : 
; 239  : 
; 240  : 	// revert to legacy rendering if we can't use a single texture even if Fast 2D Cockpit is active
; 241  : 	if(!DisplayOptions.bRender2DCockpit ||
; 242  : 		(DisplayOptions.bRender2DCockpit &&
; 243  : 			(mDoBackRect && ((LONG)dwMaxTextureWidth < mBackSrc.right || (LONG)dwMaxTextureHeight < mBackSrc.bottom))))

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	SHORT $LN14@CreateLit
	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	$LN15@CreateLit
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	$LN15@CreateLit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwMaxTextureWidth$[ebp]
	cmp	edx, DWORD PTR [ecx+256]
	jl	SHORT $LN14@CreateLit
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwMaxTextureHeight$[ebp]
	cmp	ecx, DWORD PTR [eax+260]
	jge	$LN15@CreateLit
$LN14@CreateLit:

; 244  : 	{
; 245  : 		if(mDoBackRect)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+280], 0
	je	$LN12@CreateLit

; 246  : 		{
; 247  : 			mpSurfaceBuffer = new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 5
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN30@CreateLit
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv301[ebp], eax
	jmp	SHORT $LN31@CreateLit
$LN30@CreateLit:
	mov	DWORD PTR tv301[ebp], 0
$LN31@CreateLit:
	mov	eax, DWORD PTR tv301[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T12[ebp]
	mov	DWORD PTR [ecx+480], edx

; 248  : 
; 249  : 			MPRSurfaceType front = (FalconDisplay.theDisplayDevice.IsHardware() && DisplayOptions.bRender2DCockpit) ? LocalVideoMem : SystemMem;

	mov	ecx, OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	call	?IsHardware@DisplayDevice@@QAEHXZ	; DisplayDevice::IsHardware
	test	eax, eax
	je	SHORT $LN32@CreateLit
	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	eax, eax
	je	SHORT $LN32@CreateLit
	mov	DWORD PTR tv306[ebp], 5
	jmp	SHORT $LN33@CreateLit
$LN32@CreateLit:
	mov	DWORD PTR tv306[ebp], 0
$LN33@CreateLit:
	mov	ecx, DWORD PTR tv306[ebp]
	mov	DWORD PTR _front$24[ebp], ecx

; 250  : 			if(!mpSurfaceBuffer->Setup(&FalconDisplay.theDisplayDevice, mBackSrc.right, mBackSrc.bottom, front, None) && front == LocalVideoMem)

	push	0
	push	0
	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _front$24[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+256]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+480]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
	test	eax, eax
	jne	SHORT $LN11@CreateLit
	cmp	DWORD PTR _front$24[ebp], 5
	jne	SHORT $LN11@CreateLit

; 251  : 			{
; 252  : 				// Retry with system memory if ouf video memory
; 253  : 				#ifdef _DEBUG
; 254  : 				OutputDebugString("CPAdi::CreateLit - Probably out of video memory. Retrying with system memory)\n");
; 255  : 				#endif
; 256  : 
; 257  : 				BOOL bResult = mpSurfaceBuffer->Setup(&FalconDisplay.theDisplayDevice, mBackSrc.right, mBackSrc.bottom, SystemMem, None);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	push	edx
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup
	mov	DWORD PTR _bResult$14[ebp], eax

; 258  : 				if(!bResult) return;

	cmp	DWORD PTR _bResult$14[ebp], 0
	jne	SHORT $LN11@CreateLit
	jmp	$LN25@CreateLit
$LN11@CreateLit:

; 259  : 			}
; 260  : 
; 261  : 			mpSurfaceBuffer->SetChromaKey(0xFFFF0000);

	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+480]
	call	?SetChromaKey@ImageBuffer@@QAEXK@Z	; ImageBuffer::SetChromaKey

; 262  : 		}
; 263  : 
; 264  : 		else

	jmp	SHORT $LN9@CreateLit
$LN12@CreateLit:

; 265  : 			mpSurfaceBuffer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+480], 0
$LN9@CreateLit:

; 266  : 	}
; 267  : 
; 268  : 	else

	jmp	$LN25@CreateLit
$LN15@CreateLit:

; 269  : 	{
; 270  : 		try
; 271  : 		{

	mov	DWORD PTR __$EHRec$[ebp+12], 6

; 272  : 			if(mDoBackRect)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	$LN6@CreateLit

; 273  : 			{
; 274  : 				m_pPalette = new PaletteHandle(mpOTWImage->GetDisplayDevice()->GetDefaultRC()->m_pDD, 32, 256);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv525[ebp], eax
	mov	ecx, DWORD PTR tv525[ebp]
	mov	DWORD PTR $T23[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN34@CreateLit
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+104]
	call	?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ; ImageBuffer::GetDisplayDevice
	mov	DWORD PTR tv528[ebp], eax
	mov	ecx, DWORD PTR tv528[ebp]
	call	?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ; DisplayDevice::GetDefaultRC
	mov	DWORD PTR tv529[ebp], eax
	push	256					; 00000100H
	push	32					; 00000020H
	mov	eax, DWORD PTR tv529[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR $T23[ebp]
	call	??0PaletteHandle@@QAE@PAUIDirectDraw7@@GG@Z ; PaletteHandle::PaletteHandle
	mov	DWORD PTR tv530[ebp], eax
	mov	edx, DWORD PTR tv530[ebp]
	mov	DWORD PTR tv373[ebp], edx
	jmp	SHORT $LN35@CreateLit
$LN34@CreateLit:
	mov	DWORD PTR tv373[ebp], 0
$LN35@CreateLit:
	mov	eax, DWORD PTR tv373[ebp]
	mov	DWORD PTR $T18[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T18[ebp]
	mov	DWORD PTR [ecx+116], edx

; 275  : 				if(!m_pPalette)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN5@CreateLit

; 276  : 					throw _com_error(E_OUTOFMEMORY);

	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T8[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN5@CreateLit:

; 277  : 
; 278  : 				TextureHandle *pTex = new TextureHandle;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv531[ebp], eax
	mov	edx, DWORD PTR tv531[ebp]
	mov	DWORD PTR $T21[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN36@CreateLit
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0TextureHandle@@QAE@XZ		; TextureHandle::TextureHandle
	mov	DWORD PTR tv534[ebp], eax
	mov	eax, DWORD PTR tv534[ebp]
	mov	DWORD PTR tv392[ebp], eax
	jmp	SHORT $LN37@CreateLit
$LN36@CreateLit:
	mov	DWORD PTR tv392[ebp], 0
$LN37@CreateLit:
	mov	ecx, DWORD PTR tv392[ebp]
	mov	DWORD PTR $T15[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	edx, DWORD PTR $T15[ebp]
	mov	DWORD PTR _pTex$26[ebp], edx

; 279  : 				if(!pTex)

	cmp	DWORD PTR _pTex$26[ebp], 0
	jne	SHORT $LN4@CreateLit

; 280  : 					throw _com_error(E_OUTOFMEMORY);

	push	0
	push	0
	push	-2147024882				; 8007000eH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	__CxxThrowException@8
$LN4@CreateLit:

; 281  : 
; 282  : 				m_pPalette->AttachToTexture(pTex);

	mov	ecx, DWORD PTR _pTex$26[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	call	?AttachToTexture@PaletteHandle@@QAEXPAVTextureHandle@@@Z ; PaletteHandle::AttachToTexture

; 283  : 				if(!pTex->Create("CPAdi", MPR_TI_PALETTE | MPR_TI_CHROMAKEY, 8, (UInt16)mBackSrc.right, (UInt16)mBackSrc.bottom))

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+260]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+256]
	push	eax
	push	8
	push	160					; 000000a0H
	push	OFFSET ??_C@_05CHKLGFBP@CPAdi?$AA@
	mov	ecx, DWORD PTR _pTex$26[ebp]
	call	?Create@TextureHandle@@QAE_NPADKGGGK@Z	; TextureHandle::Create
	mov	BYTE PTR tv535[ebp], al
	movzx	ecx, BYTE PTR tv535[ebp]
	test	ecx, ecx
	jne	SHORT $LN3@CreateLit

; 284  : 					throw _com_error(E_FAIL);

	push	0
	push	0
	push	-2147467259				; 80004005H
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	__CxxThrowException@8
$LN3@CreateLit:

; 285  : 
; 286  : 				if(!pTex->Load(0, 0xFFFF0000, (BYTE*) mpSourceBuffer, true, true))	// soon to be re-loaded by CPObject::Translate3D

	push	-1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+476]
	push	ecx
	push	-65536					; ffff0000H
	push	0
	mov	ecx, DWORD PTR _pTex$26[ebp]
	call	?Load@TextureHandle@@QAE_NGIPAE_N1H@Z	; TextureHandle::Load
	mov	BYTE PTR tv536[ebp], al
	movzx	edx, BYTE PTR tv536[ebp]
	test	edx, edx
	jne	SHORT $LN2@CreateLit

; 287  : 					throw _com_error(E_FAIL);

	push	0
	push	0
	push	-2147467259				; 80004005H
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z	; _com_error::_com_error
	push	OFFSET __TI1?AV_com_error@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@CreateLit:

; 288  : 
; 289  : 				m_arrTex.push_back(pTex);

	lea	ecx, DWORD PTR _pTex$26[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back

; 290  : 			}
; 291  : 
; 292  : 			else

	jmp	SHORT $LN1@CreateLit
$LN6@CreateLit:

; 293  : 				mpSurfaceBuffer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+480], 0
$LN1@CreateLit:

; 294  : 		}

	jmp	SHORT $LN40@CreateLit
__catch$?CreateLit@CPAdi@@UAEXXZ$2:

; 295  : 
; 296  : 		catch(_com_error e)

	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH

; 297  : 		{
; 298  : 			MonoPrint("CPAdi::CreateLit - Error 0x%X (%s)\n", e.Error(), e.ErrorMessage());

	lea	ecx, DWORD PTR _e$10[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR _e$10[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	push	OFFSET ??_C@_0CE@NLAOHLOG@CPAdi?3?3CreateLit?5?9?5Error?50x?$CFX?5?$CI?$CF@
	call	_MonoPrint
	add	esp, 12					; 0000000cH

; 299  : 			DiscardLit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 300  : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR _e$10[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, $LN52@CreateLit
	ret	0
$LN40@CreateLit:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN25@CreateLit
$LN52@CreateLit:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN25@CreateLit:

; 301  : 	}
; 302  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$4:
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$5:
	mov	eax, DWORD PTR $T25[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$6:
	lea	ecx, DWORD PTR _e$11[ebp]
	jmp	??1_com_error@@UAE@XZ			; _com_error::~_com_error
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$7:
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$8:
	mov	eax, DWORD PTR $T23[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$9:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLit@CPAdi@@UAEXXZ$10:
	lea	ecx, DWORD PTR _e$10[ebp]
	jmp	??1_com_error@@UAE@XZ			; _com_error::~_com_error
__ehhandler$?CreateLit@CPAdi@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-348]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateLit@CPAdi@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateLit@CPAdi@@UAEXXZ ENDP				; CPAdi::CreateLit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
tv526 = -64						; size = 8
tv514 = -56						; size = 8
tv502 = -48						; size = 8
tv490 = -40						; size = 8
_color$ = -32						; size = 4
tv522 = -28						; size = 4
tv510 = -24						; size = 4
tv498 = -20						; size = 4
tv486 = -16						; size = 4
_i$ = -12						; size = 4
_width$ = -8						; size = 4
_this$ = -4						; size = 4
?DisplayDraw@CPAdi@@UAEXXZ PROC				; CPAdi::DisplayDraw
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 663  : 	int		i;
; 664  : 	float	width = 2;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _width$[ebp], xmm0

; 665  : 
; 666  : 	//MI make them a bit smaller
; 667  : 	if(g_bRealisticAvionics){

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN6@DisplayDra

; 668  : 		width = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _width$[ebp], xmm0
$LN6@DisplayDra:

; 669  : 	}
; 670  : 
; 671  : 	// sfr: looks nonsense...
; 672  : 	mDirtyFlag = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 1

; 673  : 	if (!mDirtyFlag){ return; }

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN5@DisplayDra
	jmp	$LN7@DisplayDra
$LN5@DisplayDra:

; 674  : 
; 675  : 	OTWDriver.renderer->SetViewport(-1.0F, 1.0F, 1.0F, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 676  : 	DWORD color = OTWDriver.pCockpitManager->ApplyLighting(mColor[0][4], true);

	push	1
	mov	ecx, 20					; 00000014H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+164]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ApplyLighting@CockpitManager@@QAEKK_N@Z ; CockpitManager::ApplyLighting
	mov	DWORD PTR _color$[ebp], eax

; 677  : 	OTWDriver.renderer->SetColor(color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 678  : 
; 679  : 	for(i = 0; i < NUM_AC_BAR_POINTS - 1; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@DisplayDra
$LN3@DisplayDra:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@DisplayDra:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN2@DisplayDra

; 680  : 		OTWDriver.renderer->Render2DLine(
; 681  : 			(float)mpAircraftBar[i][0], 
; 682  : 			(float)mpAircraftBar[i][1], 
; 683  : 			(float)mpAircraftBar[i + 1][0],  
; 684  : 			(float)mpAircraftBar[i + 1][1]
; 685  : 		);

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+308]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR tv486[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv486[ebp]
	mov	ecx, DWORD PTR tv486[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv490[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv490[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+308]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR tv498[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv498[ebp]
	mov	ecx, DWORD PTR tv498[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv502[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv502[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+300]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR tv510[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv510[ebp]
	mov	ecx, DWORD PTR tv510[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv514[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv514[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+300]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR tv522[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv522[ebp]
	mov	ecx, DWORD PTR tv522[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv526[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv526[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+124]
	call	edx

; 686  : 	}

	jmp	$LN3@DisplayDra
$LN2@DisplayDra:

; 687  : 
; 688  : 	if(!mpCPManager->mHiddenFlag)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	cmp	DWORD PTR [ecx+712], 0
	jne	$LN1@DisplayDra

; 689  : 	{
; 690  : 		//OTWDriver.renderer->SetColor(mColor[OTWDriver.renderer->GetGreenMode() != 0][1]);
; 691  : 		OTWDriver.renderer->Render2DTri((float)mVertBarPos, (float)mTopLimit - 3.0F * width, (float)mVertBarPos + width,
; 692  :          (float)mTopLimit - 3.0F * width, (float)mVertBarPos + width, (float)mBottomLimit + 3.0F * width);

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+420]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+448]
	addss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+412]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+448]
	addss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+412]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+128]
	call	edx

; 693  : 		OTWDriver.renderer->Render2DTri((float)mVertBarPos, (float)mTopLimit - 3.0F * width, (float)mVertBarPos,
; 694  :          (float)mBottomLimit + 3.0F * width, (float)mVertBarPos + width, (float)mBottomLimit + 3.0F * width);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+420]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+448]
	addss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+420]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+412]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 695  : 		//OTWDriver.renderer->SetColor(mColor[OTWDriver.renderer->GetGreenMode() != 0][2]);
; 696  : 		OTWDriver.renderer->Render2DTri((float)mVertBarPos, (float)mTopLimit - 3.0F * width, (float)mVertBarPos - width,
; 697  :          (float)mTopLimit - 3.0F * width, (float)mVertBarPos - width, (float)mBottomLimit + 3.0F * width);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+420]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+448]
	subss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+412]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+448]
	subss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+412]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 698  : 		OTWDriver.renderer->Render2DTri((float)mVertBarPos, (float)mTopLimit - 3.0F * width, (float)mVertBarPos,
; 699  :          (float)mBottomLimit + 3.0F * width, (float)mVertBarPos - width, (float)mBottomLimit + 3.0F * width);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+420]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+448]
	subss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+420]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+412]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 700  : 		//OTWDriver.renderer->SetColor(mColor[OTWDriver.renderer->GetGreenMode() != 0][1]);
; 701  : 		OTWDriver.renderer->Render2DTri((float)mLeftLimit - 3.0F * width, (float)mHorizBarPos, (float)mLeftLimit - 3.0F * width,
; 702  :          (float)mHorizBarPos + width,  (float)mRightLimit + 3.0F * width, (float)mHorizBarPos + width);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+444]
	addss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+424]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+444]
	addss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+416]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+444]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+416]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 703  : 		OTWDriver.renderer->Render2DTri((float)mLeftLimit - 3.0F * width, (float)mHorizBarPos, (float)mRightLimit + 3.0F * width,
; 704  :          (float)mHorizBarPos,  (float)mRightLimit + 3.0F * width, (float)mHorizBarPos + width);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+444]
	addss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+424]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+444]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+424]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+444]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+416]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 705  : 		//OTWDriver.renderer->SetColor(mColor[OTWDriver.renderer->GetGreenMode() != 0][2]);
; 706  : 		OTWDriver.renderer->Render2DTri((float)mLeftLimit - 3.0F * width, (float)mHorizBarPos, (float)mLeftLimit - 3.0F * width,
; 707  :          (float)mHorizBarPos - 2.0F,  (float)mRightLimit + 3.0F * width, (float)mHorizBarPos - width); //MI (float)mHorizBarPos - 2.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+444]
	subss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+424]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+444]
	subss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+416]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+444]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+416]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax

; 708  : 		OTWDriver.renderer->Render2DTri((float)mLeftLimit - 3.0F * width, (float)mHorizBarPos, (float)mRightLimit + 3.0F * width,
; 709  :          (float)mHorizBarPos,  (float)mRightLimit + 3.0F * width, (float)mHorizBarPos - width); //MI (float)mHorizBarPos - 2.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+444]
	subss	xmm0, DWORD PTR _width$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+424]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+444]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+424]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+444]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+416]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR _width$[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+128]
	call	eax
$LN1@DisplayDra:

; 710  : 		 
; 711  :    }
; 712  : 
; 713  : 	mDirtyFlag = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN7@DisplayDra:

; 714  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayDraw@CPAdi@@UAEXXZ ENDP				; CPAdi::DisplayDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_this$ = -40						; size = 4
_temprect$1 = -36					; size = 16
_srcRect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?DisplayBlit@CPAdi@@UAEXXZ PROC				; CPAdi::DisplayBlit
; _this$ = ecx

; 605  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 	RECT srcRect;
; 607  : 	mDirtyFlag = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1

; 608  : 
; 609  : 	if(!mDirtyFlag)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN7@DisplayBli

; 610  : 		return;

	jmp	$LN8@DisplayBli
$LN7@DisplayBli:

; 611  : 
; 612  : 	if (DisplayOptions.bRender2DCockpit)			//Handle in Displayblit3d

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	SHORT $LN6@DisplayBli

; 613  : 		return;

	jmp	$LN8@DisplayBli
$LN6@DisplayBli:

; 614  : 
; 615  : 	if(mDoBackRect && m_arrTex.size() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN4@DisplayBli
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	test	eax, eax
	jne	SHORT $LN4@DisplayBli

; 616  : 	{
; 617  : 		if(mpSurfaceBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+480], 0
	je	SHORT $LN4@DisplayBli

; 618  : 			mpOTWImage->Compose(mpSurfaceBuffer, &mBackSrc, &mBackDest);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 248				; 000000f8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	?Compose@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::Compose
$LN4@DisplayBli:

; 619  : 	}
; 620  : 
; 621  : 	// Build the source rectangle
; 622  : 	srcRect.top			= (LONG)(mSrcRect.top + mSrcHalfHeight - mRadius - (int) mSlide);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+216]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+228]
	mov	ecx, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _this$[ebp]
	cvttss2si ecx, DWORD PTR [eax+208]
	sub	edx, ecx
	mov	DWORD PTR _srcRect$[ebp+4], edx

; 623  : 	srcRect.left		= (LONG)(mSrcRect.left);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	DWORD PTR _srcRect$[ebp], eax

; 624  : 	srcRect.bottom		= (LONG)(srcRect.top + (mDestRect.bottom - mDestRect.top) / mVScale);

	cvtsi2ss xmm0, DWORD PTR _srcRect$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+36]
	cvtsi2ss xmm1, eax
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm1, DWORD PTR [ecx+20]
	addss	xmm0, xmm1
	cvttss2si edx, xmm0
	mov	DWORD PTR _srcRect$[ebp+12], edx

; 625  : 	srcRect.right		= (LONG)(srcRect.left + (mDestRect.right - mDestRect.left) / mHScale);

	cvtsi2ss xmm0, DWORD PTR _srcRect$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	sub	edx, DWORD PTR [ecx+32]
	cvtsi2ss xmm1, edx
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _srcRect$[ebp+8], ecx

; 626  : 
; 627  : 
; 628  : 
; 629  : 
; 630  : 
; 631  : 	//Wombat778 10-06-2003, modified following lines. allows ADI to scale properly when using cockpit auto scaling
; 632  : 	if (g_bCockpitAutoScale && ((mHScale!=1.0f) || (mVScale!=1.0f)) ) {				//dont run this code if the var is set but no scaling is occuring

	movzx	edx, BYTE PTR ?g_bCockpitAutoScale@@3_NA ; g_bCockpitAutoScale
	test	edx, edx
	je	$LN3@DisplayBli
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@DisplayBli
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN3@DisplayBli
$LN2@DisplayBli:

; 633  : 
; 634  : 		RECT temprect;
; 635  : 
; 636  : 		temprect.top=0;

	mov	DWORD PTR _temprect$1[ebp+4], 0

; 637  : 		temprect.left=0;

	mov	DWORD PTR _temprect$1[ebp], 0

; 638  : 		temprect.right=(LONG)((mDestRect.right-mDestRect.left)/mHScale);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	sub	ecx, DWORD PTR [eax+32]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+16]
	cvttss2si eax, xmm0
	mov	DWORD PTR _temprect$1[ebp+8], eax

; 639  : 		temprect.bottom=(LONG)((mDestRect.bottom-mDestRect.top)/mVScale);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+36]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+20]
	cvttss2si edx, xmm0
	mov	DWORD PTR _temprect$1[ebp+12], edx

; 640  : 
; 641  : 		ADIBuffer->Clear(0xFFFF0000);			//clear the temp buffer with chromakey blue;

	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+484]
	call	?Clear@ImageBuffer@@QAEXK@Z		; ImageBuffer::Clear

; 642  : 		ADIBuffer->ComposeRoundRot(mpTemplate,&srcRect,&temprect, -mRoll, mpADICircle);  //Rotate the image from template to temp buffer

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+472]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _temprect$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _srcRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+484]
	call	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z ; ImageBuffer::ComposeRoundRot

; 643  : 		mpOTWImage->ComposeTransparent(ADIBuffer, &temprect, &mDestRect);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _temprect$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+104]
	call	?ComposeTransparent@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1@Z ; ImageBuffer::ComposeTransparent

; 644  : 		
; 645  : 	}
; 646  : 
; 647  : 	else

	jmp	SHORT $LN1@DisplayBli
$LN3@DisplayBli:

; 648  : 	{
; 649  : 		mpOTWImage->ComposeRoundRot(mpTemplate, &srcRect, &mDestRect, -mRoll, mpADICircle);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+472]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	lea	eax, DWORD PTR _srcRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	?ComposeRoundRot@ImageBuffer@@QAEXPAV1@PAUtagRECT@@1MPAH@Z ; ImageBuffer::ComposeRoundRot
$LN1@DisplayBli:

; 650  : 	}
; 651  : 
; 652  : 	//Wombat778 10-26-2003 End of modified lines
; 653  : 
; 654  : 	mDirtyFlag = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN8@DisplayBli:

; 655  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit@CPAdi@@UAEXXZ ENDP				; CPAdi::DisplayBlit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecILSNone@CPAdi@@QAEXXZ PROC				; CPAdi::ExecILSNone
; _this$ = ecx

; 455  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 456  : 	mHorizBarPos		= mTopLimit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+412]
	mov	DWORD PTR [eax+444], edx

; 457  : 	mVertBarPos			= mLeftLimit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	mov	DWORD PTR [eax+448], edx

; 458  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecILSNone@CPAdi@@QAEXXZ ENDP				; CPAdi::ExecILSNone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
tv525 = -92						; size = 4
tv508 = -88						; size = 4
tv491 = -84						; size = 4
tv474 = -80						; size = 4
tv319 = -76						; size = 4
tv312 = -72						; size = 4
tv305 = -68						; size = 4
tv298 = -64						; size = 4
tv258 = -60						; size = 4
tv257 = -56						; size = 4
tv240 = -52						; size = 4
tv218 = -48						; size = 4
tv217 = -44						; size = 4
tv200 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
tv130 = -28						; size = 4
tv128 = -24						; size = 4
tv95 = -20						; size = 4
tv92 = -16						; size = 4
_gsDeviation$ = -12					; size = 4
_gpDeviation$ = -8					; size = 4
_this$ = -4						; size = 4
?ExecILS@CPAdi@@QAEXXZ PROC				; CPAdi::ExecILS
; _this$ = ecx

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 	float		gpDeviation;
; 387  : 	float		gsDeviation;
; 388  : 
; 389  : 	if(mpCPManager->mHiddenFlag && (gNavigationSys->GetInstrumentMode() == NavigationSystem::TACAN || gNavigationSys->GetInstrumentMode() == NavigationSystem::NAV))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	cmp	DWORD PTR [ecx+712], 0
	je	SHORT $LN9@ExecILS
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ ; NavigationSystem::GetInstrumentMode
	cmp	eax, 3
	je	SHORT $LN8@ExecILS
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ ; NavigationSystem::GetInstrumentMode
	test	eax, eax
	jne	SHORT $LN9@ExecILS
$LN8@ExecILS:

; 390  : 		return;

	jmp	$LN10@ExecILS
$LN9@ExecILS:

; 391  : 
; 392  : 	if((gNavigationSys->GetInstrumentMode() == NavigationSystem::ILS_TACAN ||
; 393  : 		gNavigationSys->GetInstrumentMode() == NavigationSystem::ILS_NAV) &&
; 394  : 		gNavigationSys->GetILSAttribute(NavigationSystem::GP_DEV, &gpDeviation))

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ ; NavigationSystem::GetInstrumentMode
	cmp	eax, 2
	je	SHORT $LN6@ExecILS
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetInstrumentMode@NavigationSystem@@QAE?AW4Instrument_Mode@1@XZ ; NavigationSystem::GetInstrumentMode
	cmp	eax, 1
	jne	$LN7@ExecILS
$LN6@ExecILS:
	lea	edx, DWORD PTR _gpDeviation$[ebp]
	push	edx
	push	4
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetILSAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z ; NavigationSystem::GetILSAttribute
	test	eax, eax
	je	$LN7@ExecILS

; 395  : 	{
; 396  : 		gNavigationSys->GetILSAttribute(NavigationSystem::GS_DEV, &gsDeviation);

	lea	eax, DWORD PTR _gsDeviation$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetILSAttribute@NavigationSystem@@QAEHW4Attribute@1@PAM@Z ; NavigationSystem::GetILSAttribute

; 397  : 
; 398  : 		gpDeviation							= min(max(gpDeviation, -HORIZONTAL_SCALE * 0.5F), HORIZONTAL_SCALE * 0.5F);

	movss	xmm0, DWORD PTR _gpDeviation$[ebp]
	comiss	xmm0, DWORD PTR __real@bdb2b8c1
	jbe	SHORT $LN12@ExecILS
	movss	xmm0, DWORD PTR _gpDeviation$[ebp]
	movss	DWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN13@ExecILS
$LN12@ExecILS:
	movss	xmm0, DWORD PTR __real@bdb2b8c1
	movss	DWORD PTR tv92[ebp], xmm0
$LN13@ExecILS:
	movss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR tv92[ebp]
	jbe	SHORT $LN16@ExecILS
	movss	xmm0, DWORD PTR _gpDeviation$[ebp]
	comiss	xmm0, DWORD PTR __real@bdb2b8c1
	jbe	SHORT $LN14@ExecILS
	movss	xmm0, DWORD PTR _gpDeviation$[ebp]
	movss	DWORD PTR tv95[ebp], xmm0
	jmp	SHORT $LN15@ExecILS
$LN14@ExecILS:
	movss	xmm0, DWORD PTR __real@bdb2b8c1
	movss	DWORD PTR tv95[ebp], xmm0
$LN15@ExecILS:
	movss	xmm0, DWORD PTR tv95[ebp]
	movss	DWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN17@ExecILS
$LN16@ExecILS:
	movss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR tv128[ebp], xmm0
$LN17@ExecILS:
	movss	xmm0, DWORD PTR tv128[ebp]
	movss	DWORD PTR _gpDeviation$[ebp], xmm0

; 399  : 		gsDeviation							= min(max(gsDeviation, -VERTICAL_SCALE * 0.5F), VERTICAL_SCALE * 0.5F);

	movss	xmm0, DWORD PTR _gsDeviation$[ebp]
	comiss	xmm0, DWORD PTR __real@bc8efa34
	jbe	SHORT $LN18@ExecILS
	movss	xmm0, DWORD PTR _gsDeviation$[ebp]
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN19@ExecILS
$LN18@ExecILS:
	movss	xmm0, DWORD PTR __real@bc8efa34
	movss	DWORD PTR tv130[ebp], xmm0
$LN19@ExecILS:
	movss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR tv130[ebp]
	jbe	SHORT $LN22@ExecILS
	movss	xmm0, DWORD PTR _gsDeviation$[ebp]
	comiss	xmm0, DWORD PTR __real@bc8efa34
	jbe	SHORT $LN20@ExecILS
	movss	xmm0, DWORD PTR _gsDeviation$[ebp]
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN21@ExecILS
$LN20@ExecILS:
	movss	xmm0, DWORD PTR __real@bc8efa34
	movss	DWORD PTR tv133[ebp], xmm0
$LN21@ExecILS:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN23@ExecILS
$LN22@ExecILS:
	movss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv134[ebp], xmm0
$LN23@ExecILS:
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR _gsDeviation$[ebp], xmm0

; 400  : 
; 401  : 		mpCPManager->ADIGpDevReading	= mpCPManager->ADIGpDevReading + 0.1F * (gpDeviation - mpCPManager->ADIGpDevReading);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	movss	xmm0, DWORD PTR _gpDeviation$[ebp]
	subss	xmm0, DWORD PTR [ecx+704]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR [edx+704]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	DWORD PTR [eax+704], xmm0

; 402  : 		mpCPManager->ADIGsDevReading	= mpCPManager->ADIGsDevReading + 0.1F * (gsDeviation - mpCPManager->ADIGsDevReading);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	movss	xmm0, DWORD PTR _gsDeviation$[ebp]
	subss	xmm0, DWORD PTR [ecx+708]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR [edx+708]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	DWORD PTR [eax+708], xmm0

; 403  : 
; 404  : 		mpCPManager->ADIGpDevReading	= min(max(mpCPManager->ADIGpDevReading, -HORIZONTAL_SCALE * 0.5F), HORIZONTAL_SCALE * 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	xmm0, DWORD PTR [edx+704]
	comiss	xmm0, DWORD PTR __real@bdb2b8c1
	jbe	SHORT $LN24@ExecILS
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	movss	xmm0, DWORD PTR [ecx+704]
	movss	DWORD PTR tv200[ebp], xmm0
	jmp	SHORT $LN25@ExecILS
$LN24@ExecILS:
	movss	xmm0, DWORD PTR __real@bdb2b8c1
	movss	DWORD PTR tv200[ebp], xmm0
$LN25@ExecILS:
	movss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR tv200[ebp]
	jbe	SHORT $LN28@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR [eax+704]
	comiss	xmm0, DWORD PTR __real@bdb2b8c1
	jbe	SHORT $LN26@ExecILS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	xmm0, DWORD PTR [edx+704]
	movss	DWORD PTR tv217[ebp], xmm0
	jmp	SHORT $LN27@ExecILS
$LN26@ExecILS:
	movss	xmm0, DWORD PTR __real@bdb2b8c1
	movss	DWORD PTR tv217[ebp], xmm0
$LN27@ExecILS:
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	jmp	SHORT $LN29@ExecILS
$LN28@ExecILS:
	movss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR tv218[ebp], xmm0
$LN29@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [ecx+704], xmm0

; 405  : 		mpCPManager->ADIGsDevReading	= min(max(mpCPManager->ADIGsDevReading, -VERTICAL_SCALE * 0.5F), VERTICAL_SCALE * 0.5F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR [eax+708]
	comiss	xmm0, DWORD PTR __real@bc8efa34
	jbe	SHORT $LN30@ExecILS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	xmm0, DWORD PTR [edx+708]
	movss	DWORD PTR tv240[ebp], xmm0
	jmp	SHORT $LN31@ExecILS
$LN30@ExecILS:
	movss	xmm0, DWORD PTR __real@bc8efa34
	movss	DWORD PTR tv240[ebp], xmm0
$LN31@ExecILS:
	movss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR tv240[ebp]
	jbe	SHORT $LN34@ExecILS
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	movss	xmm0, DWORD PTR [ecx+708]
	comiss	xmm0, DWORD PTR __real@bc8efa34
	jbe	SHORT $LN32@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR [eax+708]
	movss	DWORD PTR tv257[ebp], xmm0
	jmp	SHORT $LN33@ExecILS
$LN32@ExecILS:
	movss	xmm0, DWORD PTR __real@bc8efa34
	movss	DWORD PTR tv257[ebp], xmm0
$LN33@ExecILS:
	movss	xmm0, DWORD PTR tv257[ebp]
	movss	DWORD PTR tv258[ebp], xmm0
	jmp	SHORT $LN35@ExecILS
$LN34@ExecILS:
	movss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv258[ebp], xmm0
$LN35@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	xmm0, DWORD PTR tv258[ebp]
	movss	DWORD PTR [edx+708], xmm0

; 406  : 
; 407  : 		mVertBarPos							= (unsigned) abs(FloatToInt32(mHorizScale * mpCPManager->ADIGpDevReading + mHorizCenter));		// Calc location of deviation bars

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+428]
	mulss	xmm0, DWORD PTR [ecx+704]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+436]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+448], eax

; 408  : 		mHorizBarPos						= (unsigned) abs(FloatToInt32(mVertScale * -mpCPManager->ADIGsDevReading + mVertCenter));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR [eax+708]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+432]
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+440]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+444], eax

; 409  : 
; 410  : 		mVertBarPos							= max(mVertBarPos, mLeftLimit);						// Bound the positions

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+448]
	cmp	ecx, DWORD PTR [eax+416]
	jle	SHORT $LN36@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+448]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN37@ExecILS
$LN36@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	mov	DWORD PTR tv298[ebp], edx
$LN37@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv298[ebp]
	mov	DWORD PTR [eax+448], ecx

; 411  : 		mVertBarPos							= min(mVertBarPos, mRightLimit);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+448]
	cmp	ecx, DWORD PTR [eax+424]
	jge	SHORT $LN38@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+448]
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN39@ExecILS
$LN38@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+424]
	mov	DWORD PTR tv305[ebp], edx
$LN39@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv305[ebp]
	mov	DWORD PTR [eax+448], ecx

; 412  : 
; 413  : 		mHorizBarPos						= min(mHorizBarPos, mBottomLimit);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+444]
	cmp	ecx, DWORD PTR [eax+420]
	jge	SHORT $LN40@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR tv312[ebp], eax
	jmp	SHORT $LN41@ExecILS
$LN40@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	mov	DWORD PTR tv312[ebp], edx
$LN41@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv312[ebp]
	mov	DWORD PTR [eax+444], ecx

; 414  : 		mHorizBarPos						= max(mHorizBarPos, mTopLimit);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+444]
	cmp	ecx, DWORD PTR [eax+412]
	jle	SHORT $LN42@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR tv319[ebp], eax
	jmp	SHORT $LN43@ExecILS
$LN42@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+412]
	mov	DWORD PTR tv319[ebp], edx
$LN43@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv319[ebp]
	mov	DWORD PTR [eax+444], ecx

; 415  : 
; 416  : 		mpCPManager->mHiddenFlag = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR [eax+712], 0

; 417  : 	}
; 418  : 
; 419  : 	else

	jmp	$LN1@ExecILS
$LN7@ExecILS:

; 420  : 	{
; 421  : 		if(mpCPManager->mHiddenFlag)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	cmp	DWORD PTR [edx+712], 0
	je	SHORT $LN4@ExecILS

; 422  : 			return;

	jmp	$LN10@ExecILS
	jmp	$LN1@ExecILS
$LN4@ExecILS:

; 423  : 
; 424  : 		else if(mVertBarPos <= mDestRect.left && mHorizBarPos >= mDestRect.bottom)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+32]
	jg	SHORT $LN2@ExecILS
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+444]
	cmp	edx, DWORD PTR [ecx+44]
	jl	SHORT $LN2@ExecILS

; 425  : 		{
; 426  : 			mpCPManager->mHiddenFlag		= TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR [ecx+712], 1

; 427  : 			mVertBarPos							= mDestRect.left;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+448], ecx

; 428  : 			mHorizBarPos						= mDestRect.bottom;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+444], ecx

; 429  : 			mpCPManager->ADIGpDevReading	=	-HORIZONTAL_SCALE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR __real@be32b8c1
	movss	DWORD PTR [eax+704], xmm0

; 430  : 			mpCPManager->ADIGsDevReading	=	-VERTICAL_SCALE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	xmm0, DWORD PTR __real@bd0efa34
	movss	DWORD PTR [edx+708], xmm0

; 431  : 		}
; 432  : 
; 433  : 		else

	jmp	$LN1@ExecILS
$LN2@ExecILS:

; 434  : 		{
; 435  : 			mpCPManager->ADIGpDevReading	= mpCPManager->ADIGpDevReading + 0.1F * (-HORIZONTAL_SCALE * 1.5F - mpCPManager->ADIGpDevReading);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR __real@be860a91
	subss	xmm0, DWORD PTR [eax+704]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR [ecx+704]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	DWORD PTR [edx+704], xmm0

; 436  : 			mpCPManager->ADIGsDevReading	= mpCPManager->ADIGsDevReading + 0.1F * (-VERTICAL_SCALE * 1.5F - mpCPManager->ADIGsDevReading);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR __real@bd56774e
	subss	xmm0, DWORD PTR [eax+708]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR [ecx+708]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	movss	DWORD PTR [edx+708], xmm0

; 437  : 
; 438  : 			mVertBarPos				= (unsigned) abs(FloatToInt32(mHorizScale * mpCPManager->ADIGpDevReading + mHorizCenter));		// Calc location of deviation bars

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+428]
	mulss	xmm0, DWORD PTR [ecx+704]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+436]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+448], eax

; 439  : 			mHorizBarPos			= (unsigned) abs(FloatToInt32(mVertScale * -mpCPManager->ADIGsDevReading + mVertCenter));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	movss	xmm0, DWORD PTR [eax+708]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+432]
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+440]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+444], eax

; 440  : 
; 441  : 			mVertBarPos				= max(mVertBarPos, mDestRect.left);						// Bound the positions

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+448]
	cmp	ecx, DWORD PTR [eax+32]
	jle	SHORT $LN44@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+448]
	mov	DWORD PTR tv474[ebp], eax
	jmp	SHORT $LN45@ExecILS
$LN44@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR tv474[ebp], edx
$LN45@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv474[ebp]
	mov	DWORD PTR [eax+448], ecx

; 442  : 			mVertBarPos				= min(mVertBarPos, mDestRect.right);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+448]
	cmp	ecx, DWORD PTR [eax+40]
	jge	SHORT $LN46@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+448]
	mov	DWORD PTR tv491[ebp], eax
	jmp	SHORT $LN47@ExecILS
$LN46@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv491[ebp], edx
$LN47@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv491[ebp]
	mov	DWORD PTR [eax+448], ecx

; 443  : 
; 444  : 			mHorizBarPos			= min(mHorizBarPos, mDestRect.bottom);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+444]
	cmp	ecx, DWORD PTR [eax+44]
	jge	SHORT $LN48@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR tv508[ebp], eax
	jmp	SHORT $LN49@ExecILS
$LN48@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv508[ebp], edx
$LN49@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv508[ebp]
	mov	DWORD PTR [eax+444], ecx

; 445  : 			mHorizBarPos			= max(mHorizBarPos, mDestRect.top);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+444]
	cmp	ecx, DWORD PTR [eax+36]
	jle	SHORT $LN50@ExecILS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR tv525[ebp], eax
	jmp	SHORT $LN51@ExecILS
$LN50@ExecILS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv525[ebp], edx
$LN51@ExecILS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv525[ebp]
	mov	DWORD PTR [eax+444], ecx
$LN1@ExecILS:
$LN10@ExecILS:

; 446  : 		}
; 447  : 	}
; 448  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecILS@CPAdi@@QAEXXZ ENDP				; CPAdi::ExecILS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpadi.cpp
_TEXT	SEGMENT
_PercentHalfXscale$ = -20				; size = 4
tv162 = -16						; size = 4
tv151 = -12						; size = 4
_playerAC$1 = -8					; size = 4
_this$ = -4						; size = 4
_pSimBaseClass$ = 8					; size = 4
?Exec@CPAdi@@UAEXPAVSimBaseClass@@@Z PROC		; CPAdi::Exec
; _this$ = ecx

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 328  : 	float		PercentHalfXscale;
; 329  : 
; 330  : 	mpOwnship	= pSimBaseClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSimBaseClass$[ebp]
	mov	DWORD PTR [eax+100], ecx

; 331  : 	//MI
; 332  : 	if(g_bRealisticAvionics && g_bINS){

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN9@Exec
	movzx	eax, BYTE PTR ?g_bINS@@3_NA		; g_bINS
	test	eax, eax
	je	$LN9@Exec

; 333  : 		AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$1[ebp], eax

; 334  : 		if(playerAC && Persistant == 1){	//backup ADI, continue to function until out of energy

	cmp	DWORD PTR _playerAC$1[ebp], 0
	je	$LN8@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+452], 1
	jne	$LN8@Exec

; 335  : 			if (playerAC->INSState(AircraftClass::BUP_ADI_OFF_IN)){

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN7@Exec

; 336  : 				//make a check for the BUP ADI energy here when ready
; 337  : 				mPitch	= cockpitFlightData.pitch;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+36
	movss	DWORD PTR [edx+144], xmm0

; 338  : 				mRoll	= cockpitFlightData.roll;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+40
	movss	DWORD PTR [eax+148], xmm0

; 339  : 				LastBUPPitch = mPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	DWORD PTR [ecx+464], eax

; 340  : 				LastBUPRoll = mRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR [ecx+468], eax

; 341  : 			}
; 342  : 			else {

	jmp	SHORT $LN6@Exec
$LN7@Exec:

; 343  : 				mPitch = LastBUPPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	mov	DWORD PTR [ecx+144], eax

; 344  : 				mRoll = LastBUPRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	mov	DWORD PTR [ecx+148], eax
$LN6@Exec:

; 345  : 			}

	jmp	$LN3@Exec
$LN8@Exec:

; 346  : 		}
; 347  : 		else if (playerAC && !playerAC->INSState(AircraftClass::INS_ADI_OFF_IN)){

	cmp	DWORD PTR _playerAC$1[ebp], 0
	je	SHORT $LN4@Exec
	push	128					; 00000080H
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	jne	SHORT $LN4@Exec

; 348  : 			//stay where you currently are
; 349  : 			mPitch = LastMainADIPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+456]
	mov	DWORD PTR [ecx+144], eax

; 350  : 			mRoll = LastMainADIRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+460]
	mov	DWORD PTR [ecx+148], eax

; 351  : 		}
; 352  : 		else {

	jmp	SHORT $LN3@Exec
$LN4@Exec:

; 353  : 			mPitch	= cockpitFlightData.pitch;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+36
	movss	DWORD PTR [ecx+144], xmm0

; 354  : 			mRoll	= cockpitFlightData.roll;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+40
	movss	DWORD PTR [edx+148], xmm0

; 355  : 			LastMainADIPitch = mPitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR [eax+456], edx

; 356  : 			LastMainADIRoll = mRoll;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+460], edx
$LN3@Exec:

; 357  : 		}
; 358  : 	}
; 359  : 	else

	jmp	SHORT $LN2@Exec
$LN9@Exec:

; 360  : 	{
; 361  : 		mPitch	= cockpitFlightData.pitch;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+36
	movss	DWORD PTR [eax+144], xmm0

; 362  : 		mRoll	= cockpitFlightData.roll;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+40
	movss	DWORD PTR [ecx+148], xmm0
$LN2@Exec:

; 363  : 	}
; 364  : 
; 365  : 	// Bound the pitch angle so we don't go beyond +/- 30 deg for now
; 366  : 	mPitch		= max(mPitch, mMinPitch);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+144]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+156]
	jbe	SHORT $LN12@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+144]
	movss	DWORD PTR tv151[ebp], xmm0
	jmp	SHORT $LN13@Exec
$LN12@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	movss	DWORD PTR tv151[ebp], xmm0
$LN13@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv151[ebp]
	movss	DWORD PTR [eax+144], xmm0

; 367  : 	mPitch		= min(mPitch, mMaxPitch);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	comiss	xmm0, DWORD PTR [ecx+144]
	jbe	SHORT $LN14@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+144]
	movss	DWORD PTR tv162[ebp], xmm0
	jmp	SHORT $LN15@Exec
$LN14@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR tv162[ebp], xmm0
$LN15@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	movss	DWORD PTR [edx+144], xmm0

; 368  : 
; 369  : 	// Compute the slide distance based on the pitch angle
; 370  : 	PercentHalfXscale		= mPitch / (25.0F * DTR); //tan(mPitch) / mTanVisibleBallHalfAngle;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+144]
	divss	xmm0, DWORD PTR __real@3edf66f1
	movss	DWORD PTR _PercentHalfXscale$[ebp], xmm0

; 371  : 	mSlide					= mRadius * (float)PercentHalfXscale;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+204]
	mulss	xmm0, DWORD PTR _PercentHalfXscale$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+208], xmm0

; 372  : 
; 373  : 	if (gNavigationSys){

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN1@Exec

; 374  : 		ExecILS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILS@CPAdi@@QAEXXZ			; CPAdi::ExecILS
$LN1@Exec:

; 375  : 	}
; 376  : 
; 377  : 	SetDirtyFlag(); //VWF FOR NOW

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDirtyFlag@CPObject@@QAEXXZ		; CPObject::SetDirtyFlag

; 378  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Exec@CPAdi@@UAEXPAVSimBaseClass@@@Z ENDP		; CPAdi::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z PROC	; AircraftClass::INSState, COMDAT
; _this$ = ecx

; 211  : 	int INSState(INSAlignFlags fl) { return (INSFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@INSState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@INSState
$LN3@INSState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@INSState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ENDP	; AircraftClass::INSState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpobject.h
;	COMDAT ?SetDirtyFlag@CPObject@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDirtyFlag@CPObject@@QAEXXZ PROC			; CPObject::SetDirtyFlag, COMDAT
; _this$ = ecx

; 108  : 	void			SetDirtyFlag() {mDirtyFlag = TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDirtyFlag@CPObject@@QAEXXZ ENDP			; CPObject::SetDirtyFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpobject.h
;	COMDAT ?HandleEvent@CPObject@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HandleEvent@CPObject@@UAEXXZ PROC			; CPObject::HandleEvent, COMDAT
; _this$ = ecx

; 107  : 	virtual void	HandleEvent(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?HandleEvent@CPObject@@UAEXXZ ENDP			; CPObject::HandleEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ PROC	; DisplayDevice::GetDefaultRC, COMDAT
; _this$ = ecx

; 29   : 	DXContext *GetDefaultRC( void )			{ return m_DXCtx; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultRC@DisplayDevice@@QAEPAVDXContext@@XZ ENDP	; DisplayDevice::GetDefaultRC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\device.h
;	COMDAT ?IsHardware@DisplayDevice@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsHardware@DisplayDevice@@QAEHXZ PROC			; DisplayDevice::IsHardware, COMDAT
; _this$ = ecx

; 24   : 	BOOL			IsHardware( void )				{ ShiAssert(IsReady());  return m_DXCtx->m_eDeviceCategory > DXContext::D3DDeviceCategory_Software; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+60], 1
	jle	SHORT $LN3@IsHardware
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsHardware
$LN3@IsHardware:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsHardware:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHardware@DisplayDevice@@QAEHXZ ENDP			; DisplayDevice::IsHardware
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glReleaseMemory@@YAXPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_memptr$ = 8						; size = 4
?glReleaseMemory@@YAXPAX@Z PROC				; glReleaseMemory, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   : #ifdef USE_SH_POOLS
; 34   : 	if (memptr)
; 35   : 	{
; 36   : 		MemFreePtr( memptr );
; 37   : 	}
; 38   : #else
; 39   : 	if (memptr)

	cmp	DWORD PTR _memptr$[ebp], 0
	je	SHORT $LN2@glReleaseM

; 40   : 	{
; 41   : 		delete[] memptr;

	mov	eax, DWORD PTR _memptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@glReleaseM:

; 42   : 	}
; 43   : #endif
; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glReleaseMemory@@YAXPAX@Z ENDP				; glReleaseMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ PROC ; ImageBuffer::GetDisplayDevice, COMDAT
; _this$ = ecx

; 41   : 	DisplayDevice *GetDisplayDevice()	{ return device; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayDevice@ImageBuffer@@QAEPAVDisplayDevice@@XZ ENDP ; ImageBuffer::GetDisplayDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVTextureHandle@@@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEPAPAVTextureHandle@@PAPAV2@00@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Umove<TextureHandle * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEII@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ; std::addressof<TextureHandle * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBE_NPBQAVTextureHandle@@@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVTextureHandle@@@std@@YAPBQAVTextureHandle@@ABQAV1@@Z ; std::addressof<TextureHandle * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVTextureHandle@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXI@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IBEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVTextureHandle@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::construct<TextureHandle *,TextureHandle * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXABQAVTextureHandle@@@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEAAPAVTextureHandle@@I@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEPAPAVTextureHandle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ; std::allocator<TextureHandle *>::allocator<TextureHandle *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z PROC ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ ; std::allocator<TextureHandle *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVTextureHandle@@@std@@@std@@SAIABV?$allocator@PAVTextureHandle@@@2@@Z ENDP ; std::allocator_traits<std::allocator<TextureHandle *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ PROC ; std::allocator<TextureHandle *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVTextureHandle@@@std@@QBEIXZ ENDP ; std::allocator<TextureHandle *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z PROC ; std::allocator<TextureHandle *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@ABQAV3@@Z ENDP ; std::allocator<TextureHandle *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z PROC ; std::allocator<TextureHandle *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVTextureHandle@@@std@@YAPAPAVTextureHandle@@IPAPAV1@@Z ; std::_Allocate<TextureHandle *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVTextureHandle@@@std@@QAEPAPAVTextureHandle@@I@Z ENDP ; std::allocator<TextureHandle *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z PROC ; std::allocator<TextureHandle *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ENDP ; std::allocator<TextureHandle *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ PROC	; std::allocator<TextureHandle *>::allocator<TextureHandle *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ENDP	; std::allocator<TextureHandle *>::allocator<TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 39   : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 543  :         {return (tanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_tanf
	add	esp, 4
	pop	ebp
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 436  :         {return ((float)tan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_com_error@@UAEPAXI@Z PROC				; _com_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_com_error@@UAE@XZ			; _com_error::~_com_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_com_error@@UAEPAXI@Z ENDP				; _com_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_hr$ = 8						; size = 4
?HRESULTToWCode@_com_error@@SAGJ@Z PROC			; _com_error::HRESULTToWCode, COMDAT

; 419  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 420  :     return (hr >= WCODE_HRESULT_FIRST && hr <= WCODE_HRESULT_LAST)
; 421  :         ? WORD(hr - WCODE_HRESULT_FIRST)
; 422  :         : 0;

	cmp	DWORD PTR _hr$[ebp], -2147220992	; 80040200H
	jl	SHORT $LN3@HRESULTToW
	cmp	DWORD PTR _hr$[ebp], -2147155969	; 8004ffffH
	jg	SHORT $LN3@HRESULTToW
	mov	eax, DWORD PTR _hr$[ebp]
	add	eax, 2147220992				; 7ffbfe00H
	movzx	ecx, ax
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@HRESULTToW
$LN3@HRESULTToW:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HRESULTToW:
	mov	ax, WORD PTR tv69[ebp]

; 423  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HRESULTToWCode@_com_error@@SAGJ@Z ENDP			; _com_error::HRESULTToWCode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?ErrorMessage@_com_error@@QBEPBDXZ
_TEXT	SEGMENT
_nLen$1 = -12						; size = 4
_this$ = -8						; size = 4
_wCode$2 = -4						; size = 2
?ErrorMessage@_com_error@@QBEPBDXZ PROC			; _com_error::ErrorMessage, COMDAT
; _this$ = ecx

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 378  :     if (m_pszMsg == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$LN8@ErrorMessa

; 379  :         FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER|
; 380  :                           FORMAT_MESSAGE_FROM_SYSTEM|
; 381  :                           FORMAT_MESSAGE_IGNORE_INSERTS,
; 382  :                       NULL,
; 383  :                       m_hresult,
; 384  :                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
; 385  :                       (LPTSTR)&m_pszMsg,
; 386  :                       0,
; 387  :                       NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	1024					; 00000400H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28

; 388  :         if (m_pszMsg != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN7@ErrorMessa

; 389  :             int nLen = lstrlen(m_pszMsg);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	mov	DWORD PTR _nLen$1[ebp], eax

; 390  :             if (nLen > 1 && m_pszMsg[nLen - 1] == '\n') {

	cmp	DWORD PTR _nLen$1[ebp], 1
	jle	SHORT $LN6@ErrorMessa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nLen$1[ebp]
	movsx	ecx, BYTE PTR [edx+eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN6@ErrorMessa

; 391  :                 m_pszMsg[nLen - 1] = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _nLen$1[ebp]
	mov	BYTE PTR [eax+ecx-1], 0

; 392  :                 if (m_pszMsg[nLen - 2] == '\r') {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _nLen$1[ebp]
	movsx	edx, BYTE PTR [eax+ecx-2]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN6@ErrorMessa

; 393  :                         m_pszMsg[nLen - 2] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _nLen$1[ebp]
	mov	BYTE PTR [ecx+edx-2], 0
$LN6@ErrorMessa:

; 394  :                 }
; 395  :             }
; 396  :         } 
; 397  :         else {

	jmp	SHORT $LN8@ErrorMessa
$LN7@ErrorMessa:

; 398  :             m_pszMsg = (LPTSTR)LocalAlloc(0, 32 * sizeof(TCHAR));

	push	32					; 00000020H
	push	0
	call	DWORD PTR __imp__LocalAlloc@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 399  :             if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN8@ErrorMessa

; 400  :                 WORD wCode = WCode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WCode@_com_error@@QBEGXZ		; _com_error::WCode
	mov	WORD PTR _wCode$2[ebp], ax

; 401  :                 if (wCode != 0) {

	movzx	eax, WORD PTR _wCode$2[ebp]
	test	eax, eax
	je	SHORT $LN2@ErrorMessa

; 402  :                     _COM_PRINTF_S_1(m_pszMsg, 32, TEXT("IDispatch error #%d"), (int)wCode);

	movzx	ecx, WORD PTR _wCode$2[ebp]
	push	ecx
	push	OFFSET ??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_sprintf_s
	add	esp, 16					; 00000010H

; 403  :                 } 
; 404  :                 else {

	jmp	SHORT $LN8@ErrorMessa
$LN2@ErrorMessa:

; 405  :                     _COM_PRINTF_S_1(m_pszMsg, 32, TEXT("Unknown error 0x%0lX"), m_hresult);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_sprintf_s
	add	esp, 16					; 00000010H
$LN8@ErrorMessa:

; 406  :                 }
; 407  :             }
; 408  :         }
; 409  :     }
; 410  :     return m_pszMsg;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]

; 411  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorMessage@_com_error@@QBEPBDXZ ENDP			; _com_error::ErrorMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WCode@_com_error@@QBEGXZ PROC				; _com_error::WCode, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 319  :     return HRESULTToWCode(m_hresult);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?HRESULTToWCode@_com_error@@SAGJ@Z	; _com_error::HRESULTToWCode
	add	esp, 4

; 320  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WCode@_com_error@@QBEGXZ ENDP				; _com_error::WCode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC				; _com_error::Error, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_com_error@@UAE@XZ PROC				; _com_error::~_com_error, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@

; 295  :     if (m_perrinfo != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@com_error

; 296  :         m_perrinfo->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN2@com_error:

; 297  :     }
; 298  :     if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@com_error

; 299  :         LocalFree((HLOCAL)m_pszMsg);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
$LN3@com_error:

; 300  :     }
; 301  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_com_error@@UAE@XZ ENDP				; _com_error::~_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_that$ = 8						; size = 4
??0_com_error@@QAE@ABV0@@Z PROC				; _com_error::_com_error, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 288  :     if (m_perrinfo != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@com_error

; 289  :         m_perrinfo->AddRef();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
$LN2@com_error:

; 290  :     }
; 291  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_com_error@@QAE@ABV0@@Z ENDP				; _com_error::_com_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\comdef.h
;	COMDAT ??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
_perrinfo$ = 12						; size = 4
_fAddRef$ = 16						; size = 1
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z PROC		; _com_error::_com_error, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_com_error@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _perrinfo$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 280  :     if (m_perrinfo != NULL && fAddRef) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@com_error
	movzx	ecx, BYTE PTR _fAddRef$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@com_error

; 281  :         m_perrinfo->AddRef();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
$LN2@com_error:

; 282  :     }
; 283  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_com_error@@QAE@JPAUIErrorInfo@@_N@Z ENDP		; _com_error::_com_error
_TEXT	ENDS
END
